Module ::= <Name:String> Definition*;
abstract Definition;
Entity :Definition ::= <Name:String> Property*;
Property ::= <Name:String> Type:Type Annotations:Annotation*;

abstract Annotation;
Id : Annotation ::= <Kind:String>;
Inverse : Annotation ::= <Name:String>;
abstract Type;
SimpleType : Type ::= <Name:String>;
SetType : Type ::= Type:Type;
     
abstract Exp;
StringLit : Exp ::= <Value:String>;
Var : Exp ::= <Name:String>;
PropertyAccess : Exp ::= Base:Exp <Field:String>;
MethodCall : Exp ::= Target:Exp <Method:String> Body:Exp*;
Constructor : Exp ::= <ClassName:String>;
ClassItems : Exp ::= Type;

TemplateDef : Definition ::= <Name:String> Mod:Mod* Params:Param* Body:Element*;

Param ::= <Name:String> Type:Type;

abstract Mod ;
Page : Mod;

abstract Element;
StringElem : Element ::= <Value:String>;
Call : Element ::= <Name:String> Args:Exp* Elements:Element*;
ForElem : Element ::= <Var:String> Collection:Exp Body:Element*;
Navigate : Element ::= Ref:MethodCall Label:Element*;
VarDeclElem : Element ::= <Var:String>  Type:Type Source:Exp;
Action : Element ::= <Name:String> Params:Param* Body:Statement*;
Submit : Element ::= <Name:String> Args:Exp* Label:Element*;
XmlElem : Element ::= <Tag:String> Body:Element*;
Elements : Element ::=;
abstract Statement;
Assign : Statement ::= Target:Exp Source:Exp;
ExpStat : Statement ::= Exp:Exp;
ReturnPage : Statement ::= Ref:MethodCall;
