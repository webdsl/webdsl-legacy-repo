/* The following code was generated by JFlex 1.4 on 5/2/10 4:21 AM */

package webdsl;

import webdsl.WebDSLParser.Terminals;
import beaver.Scanner;
import beaver.Symbol;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4 on 5/2/10 4:21 AM from the specification file
 * <tt>/Users/wcook/workspace/webdslint/interpreter/WebDSL.flex</tt>
 */
public final class WebDSLScanner extends Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\52"
			+ "\5\0\1\43\1\44\2\0\1\47\1\0\1\51\1\4\12\6\1\36"
			+ "\1\50\1\40\1\37\1\41\2\0\22\5\1\42\7\5\4\0\1\32"
			+ "\1\0\1\24\1\30\1\25\1\11\1\14\1\21\1\31\1\35\1\17"
			+ "\1\5\1\33\1\13\1\7\1\15\1\10\1\27\1\5\1\22\1\26"
			+ "\1\16\1\12\1\23\1\5\1\34\1\20\1\5\1\45\1\0\1\46"
			+ "\54\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5"
			+ "\1\0\u013f\5\31\0\162\5\4\0\14\5\16\0\5\5\11\0\1\5"
			+ "\213\0\1\5\13\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5"
			+ "\1\0\54\5\1\0\46\5\1\0\5\5\4\0\202\5\10\0\105\5"
			+ "\1\0\46\5\2\0\2\5\6\0\20\5\41\0\46\5\2\0\1\5"
			+ "\7\0\47\5\110\0\33\5\5\0\3\5\56\0\32\5\5\0\13\5"
			+ "\25\0\12\6\4\0\2\5\1\0\143\5\1\0\1\5\17\0\2\5"
			+ "\7\0\2\5\12\6\3\5\2\0\1\5\20\0\1\5\1\0\36\5"
			+ "\35\0\3\5\60\0\46\5\13\0\1\5\u0152\0\66\5\3\0\1\5"
			+ "\22\0\1\5\7\0\12\5\4\0\12\6\25\0\10\5\2\0\2\5"
			+ "\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5\3\0\1\5"
			+ "\36\0\2\5\1\0\3\5\4\0\12\6\2\5\23\0\6\5\4\0"
			+ "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0"
			+ "\2\5\37\0\4\5\1\0\1\5\7\0\12\6\2\0\3\5\20\0"
			+ "\11\5\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0"
			+ "\5\5\3\0\1\5\22\0\1\5\17\0\2\5\4\0\12\6\25\0"
			+ "\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"
			+ "\5\5\3\0\1\5\36\0\2\5\1\0\3\5\4\0\12\6\1\0"
			+ "\1\5\21\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0"
			+ "\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0"
			+ "\10\5\1\0\3\5\55\0\11\6\25\0\10\5\1\0\3\5\1\0"
			+ "\27\5\1\0\12\5\1\0\5\5\46\0\2\5\4\0\12\6\25\0"
			+ "\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\3\0"
			+ "\1\5\40\0\1\5\1\0\2\5\4\0\12\6\25\0\10\5\1\0"
			+ "\3\5\1\0\27\5\1\0\20\5\46\0\2\5\4\0\12\6\25\0"
			+ "\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5\72\0"
			+ "\60\5\1\0\2\5\14\0\7\5\11\0\12\6\47\0\2\5\1\0"
			+ "\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0"
			+ "\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0"
			+ "\4\5\1\0\2\5\11\0\1\5\2\0\5\5\1\0\1\5\11\0"
			+ "\12\6\2\0\2\5\42\0\1\5\37\0\12\6\26\0\10\5\1\0"
			+ "\42\5\35\0\4\5\164\0\42\5\1\0\5\5\1\0\2\5\25\0"
			+ "\12\6\6\0\6\5\112\0\46\5\12\0\51\5\7\0\132\5\5\0"
			+ "\104\5\5\0\122\5\6\0\7\5\1\0\77\5\1\0\1\5\1\0"
			+ "\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\47\5\1\0"
			+ "\1\5\1\0\4\5\2\0\37\5\1\0\1\5\1\0\4\5\2\0"
			+ "\7\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\7\5\1\0"
			+ "\27\5\1\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0"
			+ "\47\5\1\0\23\5\16\0\11\6\56\0\125\5\14\0\u026c\5\2\0"
			+ "\10\5\12\0\32\5\5\0\113\5\25\0\15\5\1\0\4\5\16\0"
			+ "\22\5\16\0\22\5\16\0\15\5\1\0\3\5\17\0\64\5\43\0"
			+ "\1\5\4\0\1\5\3\0\12\6\46\0\12\6\6\0\130\5\10\0"
			+ "\51\5\127\0\35\5\51\0\12\6\36\5\2\0\5\5\u038b\0\154\5"
			+ "\224\0\234\5\4\0\132\5\6\0\26\5\2\0\6\5\2\0\46\5"
			+ "\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5"
			+ "\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5"
			+ "\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5"
			+ "\1\0\7\5\164\0\1\5\15\0\1\5\202\0\1\5\4\0\1\5"
			+ "\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5"
			+ "\1\0\1\5\1\0\4\5\1\0\3\5\1\0\7\5\3\0\3\5"
			+ "\5\0\5\5\u0ebb\0\2\5\52\0\5\5\5\0\2\5\4\0\126\5"
			+ "\6\0\3\5\1\0\132\5\1\0\4\5\5\0\50\5\4\0\136\5"
			+ "\21\0\30\5\70\0\20\5\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5"
			+ "\u0773\0\u2ba4\5\u215c\0\u012e\5\2\0\73\5\225\0\7\5\14\0\5\5"
			+ "\5\0\1\5\1\0\12\5\1\0\15\5\1\0\5\5\1\0\1\5"
			+ "\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5"
			+ "\2\0\66\5\50\0\14\5\164\0\5\5\1\0\207\5\23\0\12\6"
			+ "\7\0\32\5\6\0\32\5\13\0\131\5\3\0\6\5\2\0\6\5"
			+ "\2\0\6\5\2\0\3\5\43\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\2\2\1\1\16\3\1\4\1\5\1\6"
			+ "\1\7\1\3\1\10\1\11\1\12\1\13\1\14\1\15"
			+ "\1\16\1\1\1\2\2\3\1\17\5\3\1\20\1\21"
			+ "\10\3\1\22\1\23\1\3\1\0\1\24\11\3\1\25"
			+ "\1\3\1\26\6\3\1\27\5\3\1\30\1\3\1\31"
			+ "\6\3\1\32\4\3\1\0\7\3\1\33\1\3\1\34"
			+ "\1\35\1\36\1\0\1\3\1\37\3\3\1\40\2\3"
			+ "\1\0\1\3\1\41\1\3\1\42\1\0\1\3\1\0"
			+ "\1\43\1\44\2\0\1\45\4\0\1\46\2\0\1\47";

	private static int[] zzUnpackAction() {
		int[] result = new int[137];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\53\0\126\0\53\0\201\0\254\0\327\0\u0102"
			+ "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"
			+ "\0\u0285\0\u02b0\0\u02db\0\u0306\0\53\0\u0331\0\53\0\u035c"
			+ "\0\53\0\53\0\53\0\53\0\53\0\53\0\53\0\u0387"
			+ "\0\u03b2\0\u03dd\0\u0408\0\254\0\u0433\0\u045e\0\u0489\0\u04b4"
			+ "\0\u04df\0\u050a\0\254\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1"
			+ "\0\u060c\0\u0637\0\u0662\0\53\0\53\0\u068d\0\u0387\0\53"
			+ "\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5"
			+ "\0\u0810\0\254\0\u083b\0\254\0\u0866\0\u0891\0\u08bc\0\u08e7"
			+ "\0\u0912\0\u093d\0\254\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14"
			+ "\0\254\0\u0a3f\0\254\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16"
			+ "\0\u0b41\0\254\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43"
			+ "\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\254\0\u0d70"
			+ "\0\254\0\254\0\254\0\u0d9b\0\u0dc6\0\254\0\u0df1\0\u0e1c"
			+ "\0\u0e47\0\254\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\254\0\u0f1e"
			+ "\0\254\0\u0f49\0\u0f74\0\u0f9f\0\254\0\254\0\u0fca\0\u0ff5"
			+ "\0\53\0\u1020\0\u104b\0\u1076\0\u10a1\0\53\0\u10cc\0\u10f7"
			+ "\0\53";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[137];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\2\1\3\2\4\1\5\1\6\1\2\1\7\1\10"
			+ "\1\11\1\6\1\12\1\13\1\6\1\14\1\15\1\6"
			+ "\1\16\1\17\1\20\1\21\2\6\1\22\1\23\1\6"
			+ "\1\2\3\6\1\24\1\25\1\26\1\27\1\30\1\31"
			+ "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\55\0"
			+ "\1\4\54\0\1\41\53\0\25\6\1\0\3\6\4\0"
			+ "\1\6\15\0\3\6\1\42\21\6\1\0\3\6\4\0"
			+ "\1\6\15\0\5\6\1\43\17\6\1\0\3\6\4\0"
			+ "\1\6\15\0\3\6\1\44\3\6\1\45\15\6\1\0"
			+ "\3\6\4\0\1\6\15\0\12\6\1\46\12\6\1\0"
			+ "\3\6\4\0\1\6\15\0\6\6\1\47\1\6\1\50"
			+ "\14\6\1\0\3\6\4\0\1\6\15\0\25\6\1\0"
			+ "\2\6\1\51\4\0\1\6\15\0\10\6\1\52\3\6"
			+ "\1\53\10\6\1\0\3\6\4\0\1\6\15\0\3\6"
			+ "\1\54\21\6\1\0\3\6\4\0\1\6\15\0\7\6"
			+ "\1\55\15\6\1\0\3\6\4\0\1\6\15\0\17\6"
			+ "\1\56\5\6\1\0\3\6\4\0\1\6\15\0\4\6"
			+ "\1\57\13\6\1\60\1\61\3\6\1\0\3\6\4\0"
			+ "\1\6\15\0\17\6\1\62\5\6\1\0\3\6\4\0"
			+ "\1\6\15\0\12\6\1\63\12\6\1\0\3\6\4\0"
			+ "\1\6\47\0\1\64\17\0\1\65\53\0\7\6\1\66"
			+ "\15\6\1\0\3\6\4\0\1\6\10\0\52\67\1\70"
			+ "\1\41\1\3\1\4\50\41\5\0\4\6\1\71\20\6"
			+ "\1\0\3\6\4\0\1\6\15\0\11\6\1\72\13\6"
			+ "\1\0\3\6\4\0\1\6\15\0\14\6\1\73\10\6"
			+ "\1\0\3\6\4\0\1\6\15\0\10\6\1\74\14\6"
			+ "\1\0\3\6\4\0\1\6\15\0\7\6\1\75\11\6"
			+ "\1\76\3\6\1\0\3\6\4\0\1\6\15\0\11\6"
			+ "\1\77\13\6\1\0\3\6\4\0\1\6\15\0\7\6"
			+ "\1\100\15\6\1\0\3\6\4\0\1\6\15\0\16\6"
			+ "\1\101\6\6\1\0\3\6\4\0\1\6\15\0\15\6"
			+ "\1\102\7\6\1\0\3\6\4\0\1\6\15\0\4\6"
			+ "\1\103\20\6\1\0\3\6\4\0\1\6\15\0\15\6"
			+ "\1\104\7\6\1\0\3\6\4\0\1\6\15\0\4\6"
			+ "\1\105\20\6\1\0\3\6\4\0\1\6\15\0\11\6"
			+ "\1\106\6\6\1\107\4\6\1\0\3\6\4\0\1\6"
			+ "\15\0\7\6\1\110\15\6\1\0\3\6\4\0\1\6"
			+ "\15\0\24\6\1\111\1\0\3\6\4\0\1\6\15\0"
			+ "\10\6\1\112\14\6\1\0\3\6\4\0\1\6\15\0"
			+ "\11\6\1\113\13\6\1\0\3\6\4\0\1\6\15\0"
			+ "\5\6\1\114\17\6\1\0\3\6\4\0\1\6\15\0"
			+ "\22\6\1\115\2\6\1\0\3\6\4\0\1\6\15\0"
			+ "\12\6\1\116\12\6\1\0\3\6\4\0\1\6\15\0"
			+ "\25\6\1\0\1\117\2\6\4\0\1\6\15\0\2\6"
			+ "\1\120\22\6\1\0\3\6\4\0\1\6\15\0\7\6"
			+ "\1\121\15\6\1\0\3\6\4\0\1\6\15\0\12\6"
			+ "\1\122\12\6\1\0\3\6\4\0\1\6\15\0\10\6"
			+ "\1\123\14\6\1\0\3\6\4\0\1\6\15\0\7\6"
			+ "\1\124\15\6\1\0\3\6\4\0\1\6\15\0\12\6"
			+ "\1\125\12\6\1\0\3\6\4\0\1\6\15\0\15\6"
			+ "\1\126\7\6\1\0\3\6\4\0\1\6\15\0\12\6"
			+ "\1\127\12\6\1\0\3\6\4\0\1\6\15\0\7\6"
			+ "\1\130\15\6\1\0\3\6\4\0\1\6\15\0\25\6"
			+ "\1\0\1\6\1\131\1\6\4\0\1\6\15\0\7\6"
			+ "\1\132\15\6\1\0\3\6\4\0\1\6\15\0\4\6"
			+ "\1\133\20\6\1\0\3\6\4\0\1\6\15\0\6\6"
			+ "\1\134\16\6\1\0\3\6\4\0\1\6\15\0\5\6"
			+ "\1\135\17\6\1\0\3\6\4\0\1\6\15\0\10\6"
			+ "\1\136\14\6\1\0\3\6\4\0\1\6\15\0\25\6"
			+ "\1\137\3\6\4\0\1\6\15\0\7\6\1\140\15\6"
			+ "\1\0\3\6\4\0\1\6\15\0\11\6\1\141\13\6"
			+ "\1\0\3\6\4\0\1\6\15\0\15\6\1\142\7\6"
			+ "\1\0\3\6\4\0\1\6\15\0\15\6\1\143\7\6"
			+ "\1\0\3\6\4\0\1\6\15\0\7\6\1\144\15\6"
			+ "\1\0\3\6\4\0\1\6\15\0\3\6\1\145\21\6"
			+ "\1\0\3\6\4\0\1\6\15\0\22\6\1\146\2\6"
			+ "\1\0\3\6\4\0\1\6\15\0\22\6\1\147\2\6"
			+ "\1\0\3\6\4\0\1\6\15\0\12\6\1\150\12\6"
			+ "\1\0\3\6\4\0\1\6\15\0\7\6\1\151\15\6"
			+ "\1\0\3\6\4\0\1\6\15\0\11\6\1\152\13\6"
			+ "\1\0\3\6\4\0\1\6\15\0\7\6\1\153\15\6"
			+ "\1\0\3\6\4\0\1\6\37\0\1\154\30\0\10\6"
			+ "\1\155\14\6\1\0\3\6\4\0\1\6\15\0\13\6"
			+ "\1\156\11\6\1\0\3\6\4\0\1\6\15\0\21\6"
			+ "\1\157\3\6\1\0\3\6\4\0\1\6\15\0\7\6"
			+ "\1\160\15\6\1\0\3\6\4\0\1\6\15\0\21\6"
			+ "\1\161\3\6\1\0\3\6\4\0\1\6\15\0\10\6"
			+ "\1\162\14\6\1\0\3\6\4\0\1\6\15\0\11\6"
			+ "\1\163\13\6\1\0\3\6\4\0\1\6\15\0\10\6"
			+ "\1\164\14\6\1\0\3\6\4\0\1\6\34\0\1\165"
			+ "\33\0\11\6\1\166\13\6\1\0\3\6\4\0\1\6"
			+ "\15\0\7\6\1\167\15\6\1\0\3\6\4\0\1\6"
			+ "\15\0\20\6\1\170\4\6\1\0\3\6\4\0\1\6"
			+ "\15\0\21\6\1\171\3\6\1\0\3\6\4\0\1\6"
			+ "\15\0\25\6\1\172\3\6\4\0\1\6\15\0\24\6"
			+ "\1\173\1\0\3\6\4\0\1\6\41\0\1\174\26\0"
			+ "\21\6\1\175\3\6\1\0\3\6\4\0\1\6\15\0"
			+ "\11\6\1\176\13\6\1\0\3\6\4\0\1\6\40\0"
			+ "\1\177\27\0\25\6\1\200\3\6\4\0\1\6\24\0"
			+ "\1\201\55\0\1\202\61\0\1\203\41\0\1\204\62\0"
			+ "\1\205\36\0\1\206\51\0\1\207\71\0\1\210\37\0" + "\1\211\36\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[4386];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\11\1\1\1\11\20\1\1\11\1\1\1\11"
			+ "\1\1\7\11\24\1\2\11\1\1\1\0\1\11\46\1"
			+ "\1\0\14\1\1\0\10\1\1\0\4\1\1\0\1\1"
			+ "\1\0\2\1\2\0\1\11\4\0\1\11\2\0\1\11";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[137];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the textposition at the last state to be included in yytext */
	private int zzPushbackPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/* user code: */
	private Symbol sym(short id) {
		return new Symbol(id, yyline + 1, yycolumn + 1, yylength(), yytext());
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public WebDSLScanner(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public WebDSLScanner(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 1290) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
					- zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzPushbackPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
				- zzEndRead);

		if (numRead < 0) {
			return true;
		} else {
			zzEndRead += numRead;
			return false;
		}
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = zzLexicalState;

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 15: {
				return sym(Terminals.DO);
			}
			case 40:
				break;
			case 18: {
				return sym(Terminals.ASSIGN);
			}
			case 41:
				break;
			case 28: {
				return sym(Terminals.MODULE);
			}
			case 42:
				break;
			case 27: {
				return sym(Terminals.AS_EXP);
			}
			case 43:
				break;
			case 12: {
				return sym(Terminals.COMMA);
			}
			case 44:
				break;
			case 1: {
				throw new RuntimeException("Illegal character \"" + yytext()
						+ "\" at line " + yyline + ", column " + yycolumn);
			}
			case 45:
				break;
			case 17: {
				return sym(Terminals.IF);
			}
			case 46:
				break;
			case 16: {
				return sym(Terminals.IN);
			}
			case 47:
				break;
			case 13: {
				return sym(Terminals.SEMICOLON);
			}
			case 48:
				break;
			case 38: {
				return sym(Terminals.ACCEPT_BIND);
			}
			case 49:
				break;
			case 39: {
				return sym(Terminals.BINDING_SCOPE);
			}
			case 50:
				break;
			case 34: {
				return sym(Terminals.ADDRESS);
			}
			case 51:
				break;
			case 26: {
				return sym(Terminals.PAGE);
			}
			case 52:
				break;
			case 8: {
				return sym(Terminals.LPAREN);
			}
			case 53:
				break;
			case 3: {
				return sym(Terminals.ID);
			}
			case 54:
				break;
			case 22: {
				return sym(Terminals.VAR);
			}
			case 55:
				break;
			case 11: {
				return sym(Terminals.RBRACE);
			}
			case 56:
				break;
			case 30: {
				return sym(Terminals.DEFINE);
			}
			case 57:
				break;
			case 21: {
				return sym(Terminals.FOR);
			}
			case 58:
				break;
			case 24: {
				return sym(Terminals.ELSE);
			}
			case 59:
				break;
			case 36: {
				return sym(Terminals.REDIRECT);
			}
			case 60:
				break;
			case 25: {
				return sym(Terminals.THEN);
			}
			case 61:
				break;
			case 23: {
				return sym(Terminals.SET);
			}
			case 62:
				break;
			case 20: {
				return sym(Terminals.STRING);
			}
			case 63:
				break;
			case 7: {
				return sym(Terminals.GT);
			}
			case 64:
				break;
			case 4: {
				return sym(Terminals.COLON);
			}
			case 65:
				break;
			case 6: {
				return sym(Terminals.LT);
			}
			case 66:
				break;
			case 5: {
				return sym(Terminals.EQUAL);
			}
			case 67:
				break;
			case 9: {
				return sym(Terminals.RPAREN);
			}
			case 68:
				break;
			case 14: {
				return sym(Terminals.DOT);
			}
			case 69:
				break;
			case 32: {
				return sym(Terminals.ACTION);
			}
			case 70:
				break;
			case 29: {
				return sym(Terminals.OUTPUT);
			}
			case 71:
				break;
			case 19: {
				return sym(Terminals.LT_SLASH);
			}
			case 72:
				break;
			case 33: {
				return sym(Terminals.INVERSE);
			}
			case 73:
				break;
			case 35: {
				return sym(Terminals.ELEMENTS);
			}
			case 74:
				break;
			case 37: {
				return sym(Terminals.LINK_PAGE);
			}
			case 75:
				break;
			case 31: {
				return sym(Terminals.ENTITY);
			}
			case 76:
				break;
			case 2: { /* discard token */
			}
			case 77:
				break;
			case 10: {
				return sym(Terminals.LBRACE);
			}
			case 78:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					{
						return sym(Terminals.EOF);
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
