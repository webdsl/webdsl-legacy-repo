Module ::= <Name:String> Definition*;

abstract Definition ::= <Name:String>;
Entity : Definition ::= <Name:String> Property*;
Property ::= <Name:String> Type Annotation*;

abstract Annotation;
Id : Annotation ::= <Kind:String>;
Inverse : Annotation ::= <Name:String>;

abstract Type;
SimpleType : Type ::= <Name:String>;
SetType : Type ::= Type:Type;
     
abstract Exp;
StringLit : Exp ::= <Value:String>;
Var : Exp ::= <Name:String>;
PropertyAccess : Exp ::= Base:Exp <Field:String>;
MethodCall : Exp ::= Target:Exp <Method:String> Body:Exp*;
PageRef : Exp ::= <Method:String> Body:Exp*;
Constructor : Exp ::= <ClassName:String>;
ClassItem : Exp ::= Type;
Address : Exp ::= Exp;
LinkPage : Exp ::= Exp;
Redirect : Exp ::= Exp;
AsExp : Exp ::= Element;

TemplateDef : Definition ::= <Name:String> Mod* Param* Body:Sequence;

Param ::= <Name:String> Type;
XmlAttr ::= <Name:String> Exp;

abstract Mod;
Page : Mod;

abstract Element;
Sequence : Element ::= Element*;
StringElem : Element ::= <Value:String>;
Call : Element ::= <Name:String> Arg:Exp* Body:Sequence;
ForElem : Element ::= <Var:String> Type Collection:Exp Body:Element;
/*
Navigate : Element ::= Ref:PageRef Label:Element;
Submit : Element ::= <Name:String> Arg:Exp* Label:Element;
*/
Action : Element ::= <Name:String> Param* Body:Statement*;
VarDeclElem : Element ::= <Var:String>  Type Source:Exp;
XmlElem : Element ::= <Tag:String> XmlAttr* Body:Sequence;
Elements : Element ::=;
OutputElem : Element ::= Exp;
Do : Element ::= Element;
IfThen : Element ::= Exp ThenPart:Element;
IfThenElse : Element ::= Exp ThenPart:Element ElsePart:Element;
BindingScope : Element ::= Exp Element;
AcceptBind : Element ::= Exp;
/*
Perform : Element ::= Exp;
*/

abstract Statement;
Assign : Statement ::= Target:Exp Source:Exp;
ExpStat : Statement ::= Exp;
/*
ReturnPage : Statement ::= Ref:PageRef;
*/
