Module ::= <Name:String> Definition*;

abstract Definition ::= <Name:String>;
Entity : Definition ::= <Name:String> Property*;
Property ::= <Name:String> Type Annotation*;

abstract Annotation;
Id : Annotation ::= <Kind:String>;
Inverse : Annotation ::= <Name:String>;

abstract Type;
SimpleType : Type ::= <Name:String>;
SetType : Type ::= Type:Type;
     
abstract Exp;
StringLit : Exp ::= <Value:String>;
Var : Exp ::= <Name:String>;
PropertyAccess : Exp ::= Base:Exp <Field:String>;
MethodCall : Exp ::= Target:Exp <Method:String> Body:Exp*;
PageRef : Exp ::= <Method:String> Body:Exp*;
Constructor : Exp ::= <ClassName:String>;
ClassItem : Exp ::= Type;

TemplateDef : Definition ::= <Name:String> Mod* Param* Body:Element;

Param ::= <Name:String> Type;

abstract Mod;
Page : Mod;

abstract Element;
Sequence : Element ::= Element*;
StringElem : Element ::= <Value:String>;
Call : Element ::= <Name:String> Arg:Exp* Body:Element;
ForElem : Element ::= <Var:String> Type Collection:Exp Body:Element;
Navigate : Element ::= Ref:PageRef Label:Element;
VarDeclElem : Element ::= <Var:String>  Type Source:Exp;
Action : Element ::= <Name:String> Param* Body:Statement*;
Submit : Element ::= <Name:String> Arg:Exp* Label:Element;
XmlElem : Element ::= <Tag:String> Body:Element;
Elements : Element ::=;

abstract Statement;
Assign : Statement ::= Target:Exp Source:Exp;
ExpStat : Statement ::= Exp;
ReturnPage : Statement ::= Ref:PageRef;
