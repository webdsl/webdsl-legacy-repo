module derive

imports
  libstratego-lib
  libstratego-xtc
  libwebdsl-front
  remove-annos
  rename
  normalize

strategies

  main =
    xtc-io-wrap(
        webdslc-options
      , webdslc-usage
      , webdslc-about
      , ![] // xtc dependencies
      , xtc-normalize
    )

  xtc-normalize = id
    ; set-appname
    ; set-default-config
    ; xtc-parse-webdsl
    ; remove-position-annos
    ; declare-all
    ; rename-all
    ; normalize
    ; output-webdsl

rules // derive editPage

  desugar = desugar-derive <+ derive-page <+ derive-edit-rows

  desugar-derive : 
    elem|[ derive editPage from e ]| -> 
    elem|[ derive editPage from e for (dprop*) ]|
    with debug(!"desugar-derive: ")
       ; SimpleSort(t) := <type-of> e
       ; prop*  := <Properties> t
       ; dprop* := <filter(property-to-derive-prop)> prop*

  property-to-derive-prop :
    Property(name,_,_,_) -> DeriveDefault(name)
            
  property-to-derive-prop :
    PropertyNoAnno(name,_,_) -> DeriveDefault(name)
  
  derive-page : 
    elem|[ derive editPage from e for (dprop*) ]| -> 
    elem|[ 
      dummy() {
        header{"Edit " text(e.name) }
        form { 
          group("Details") { 
            derive editRows from e for (dprop*)
          } 
          group() {
            action("Save", save())
          }
        }
        action save() { 
          e.save(); 
          return x_view(e); 
        }
      }
    ]| 
    with  SimpleSort(srt) := <type-of> e
        ; x_view := <decapitalize-string> srt 

rules // derive editRows

  derive-edit-rows :
    elem|[ derive editRows from e for (dprop*) ]| -> elem|[ dummy() { elem* } ]| 
    with  elem* := <filter-warn(derive-edit-row(|e )|"not a valid mode for edit row")> dprop*

  derive-edit-row(|e) : 
    DeriveDefault(y) -> <derive-edit-row(|e)> DeriveMode("edit", y)
    
  derive-edit-row(|e ) : 
    DeriveMode("edit", y) -> elem|[ groupitem { label(str){ input(e.y){} } } ]| 
    with str := <concat-strings> [<make-human-readable> y , ": "]
    
  derive-edit-row(|e ) : 
    DeriveMode("view", y) -> elem|[ groupitem { label(str){ output(e.y){} } } ]| 
    with str := <concat-strings> [<make-human-readable> y , ": "]
