module normalize-ast

imports
  libstratego-lib
  libstratego-xtc
  libwebdsl-front
  remove-annos

strategies
  main =
    xtc-io-wrap(
      webdslc-options
    , webdslc-usage
    , webdslc-about
    , ![]
    , xtc-normalize
    )

  xtc-normalize =
    id
    ; set-appname
    ; set-default-config
    ; xtc-parse-webdsl
    ; normalize
    ; remove-position-annos
    ; output-webdsl

strategies

  innermost-rep(s) =
    all-consnil(innermost-rep(s))
    ; try(s ; innermost-rep(s))

  all-consnil(s) =
    ?[_|_] < [s|s] + all(s)

signature
  constructors
    RemoveMe : Annotation

strategies
  normalize =
    innermost-rep(desugar)

  desugar :
    [RemoveMe()|lst] -> lst

  desugar =
    normalize-ui

rules

  normalize-ui :
    [ TemplateCall("dummy", [], elem1*), elem2*] -> [elem1*, elem2*]

rules

  normalize-ui :
    TemplateCall("section", [e], elem*) -> 
    TemplateCall("section", [], 
      [TemplateCallBody("header", [TemplateCallNoBody("output", [e])])|elem*])

rules

  normalize-ui :
    TemplateCall("text", [Var(x)], []) -> TemplateCall("text", [Var(y)], [])
    where y := <un-double-quote> x

  normalize-ui :
    Text(str) -> TemplateCall("text", [String(str)], [])

  normalize-ui :
    [TemplateCall("text", [e1|[e2|e*]], [])|elem*] -> 
    [TemplateCall("text", [e1], [])|[TemplateCall("text", [e2|e*], [])|elem*]]

  normalize-ui :
    TemplateCall("text", [e], []) -> TemplateCall("output", [e], [])
    where <not(?String(_))> e
