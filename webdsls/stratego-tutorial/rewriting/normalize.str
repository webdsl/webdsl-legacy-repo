module normalize

// parses a NanoWebDSL file, 
// applies syntactic normalizations to the AST,
// and pretty-prints the result

imports
  libstratego-lib
  libstratego-xtc
  libwebdsl-front
  remove-annos

strategies

  main =
    xtc-io-wrap(
        webdslc-options
      , webdslc-usage
      , webdslc-about
      , ![] // xtc dependencies
      , xtc-normalize
    )

  xtc-normalize = id
    ; set-appname
    ; set-default-config
    ; xtc-parse-webdsl
    ; normalize
    ; remove-position-annos
    ; output-webdsl

strategies

  innermost-rep(s) =
    all-consnil(innermost-rep(s)) // bottom-up traversal
       ; try(
           s                      // apply rule
           ; innermost-rep(s)     // normalize reduct
         )

  all-consnil(s) = 
    ?[_ | _] < [s | s] + all(s)

signature
  constructors
    RemoveMe : Annotation

strategies

  normalize = 
    innermost-rep(desugar)

  desugar :
    [RemoveMe()|lst] -> lst

  desugar =
    normalize-action

  desugar =
    normalize-ui

rules // functions

  normalize-action : 
    fun|[ function x(farg*) { stat* } ]| -> fun|[ function x(farg*) : Void { stat* } ]|

  normalize-action :
    stat|[ if(e) { stat* } ]| -> stat|[ if(e) { stat* } else { } ]|

  normalize-ui :
    elem|[ if(e) { elem* } ]| -> elem|[ if(e) { elem* } else { } ]|

rules // template calls

  normalize-ui :
    elem|[ x ]| -> elem|[ x(){} ]|

  normalize-ui :
    elem|[ x(e*) ]| -> elem|[ x(e*){} ]|

  normalize-ui :
    elem|[ x{elem*} ]| -> elem|[ x(){elem*} ]|

  normalize-ui :
    [elem|[ dummy(){ elem1* } ]|, elem2* ] -> [elem1*,elem2*]

rules // navigate

  normalize-ui :
    elem|[ navigate(url(e)){} ]| -> elem|[ navigate(url(e)){output(e)} ]|

  normalize-ui :
    elem|[ navigate(url(e)) ]| -> elem|[ navigate(url(e)){url(e)} ]|

  normalize-ui :
    elem|[ navigate(e1, e2){} ]| -> elem|[ navigate(e2){text(e1)} ]|

rules // section with header

  normalize-ui :
    elem|[ section(e){elem*} ]| -> elem|[ section(){ header{output(e)} elem* } ]|

rules // text

  normalize-ui :
    elem|[ text(x){} ]| -> elem|[ text(y){} ]| 
    where y := <un-double-quote> x
    
  normalize-ui :
    elem|[ str ]| -> elem|[ text(str){} ]|
    
  normalize-ui :
    elem*|[ text(e1,e2,e*){} elem* ]| -> elem*|[ text(e1){} text(e2,e*){ } elem* ]|

  normalize-ui :
    elem|[ text(e){} ]| -> elem|[ output(e){} ]|
    where <not(?String(_))> e
