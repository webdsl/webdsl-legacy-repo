%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: 4-generation.pdf
%%Creator: Adobe Acrobat 8.0
%%For: eelco
%%CreationDate: 06/16/2009, 11:29:31 AM
%%BoundingBox: 12 12 830 583
%%HiResBoundingBox: 12 12 830 583
%%CropBox: 12 12 830 583
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%TargetDevice: (NRG MP C2500 PS3) (3015.102) 2
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *CustomPageSize True
842.000000 595.000000 0.000000 0.000000 1 
pop pop pop 
  << /PageSize [ 5 -2 roll ]  /ImagingBBox null
  /Policies <</PageSize 2 /MediaType 2>>
  /DeferredMediaSelection true
  >> setpagedevice
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceRGB] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 4626 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c320 44.293068, Sun Jul 08 2007 18:06:15">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xap:CreateDate="2009-06-16T11:22:53+02:00"
   xap:CreatorTool="LaTeX with beamer class version 3.07"
   xap:ModifyDate="2009-06-16T11:22:53+02:00"
   pdf:Keywords=""
   pdf:Producer="pdfTeX-1.40.3"
   pdf:Trapped="False"
   pdfx:PTEX.Fullbanner="This is pdfTeX using libpoppler, Version 3.141592-1.40.3-2.2 (Web2C 7.5.6) kpathsea version 3.5.6">
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Eelco Visser</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Code Generation by Term Rewriting</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (1)]
[/TrimBox [12 12 830 583]]
[/BleedBox [12 12 830 583]]
[/ArtBox [12 12 830 583 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -595 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
12 12 mo
12 583 li
830 583 li
830 12 li
cp
clp
[1 0 0 1 0 0 ]ct
0.987037 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
43.1442 294.759 mo
401.276 294.759 li
401.276 26.1608 li
43.1442 26.1608 li
cp
false sop
/1 
[/DeviceGray] /CSA add_res
0 gry
@
gsave
43.1442 294.759 mo
401.276 294.759 li
401.276 26.1608 li
43.1442 26.1608 li
cp
clp
43.1442 294.759 mo
401.276 294.759 li
401.276 26.1608 li
43.1442 26.1608 li
cp
1 gry
f
67.1746 82.036 mo
67.1746 79.8645 68.9513 78.0878 71.1228 78.0878 cv
373.3 78.0878 li
375.471 78.0878 377.248 79.8645 377.248 82.036 cv
377.248 84.4907 li
67.1746 84.4907 li
0.37 0.45 0.66 rgb
f
67.1746 123.577 mo
67.1746 125.749 68.9513 127.526 71.1228 127.526 cv
373.3 127.526 li
375.471 127.526 377.248 125.749 377.248 123.577 cv
377.248 81.5397 li
67.1746 81.5397 li
f
1 gry
%ADOBeginSubsetFont: QCAAAA+CMSS12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /QCAAAA+CMSS12 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 71 /G put
dup 82 /R put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 119 /w put
dup 121 /y put
def
/UniqueID 5000804 def
/FontBBox {-62 -251 978 758} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 694 715 444 459 655 676] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [60] def
/StdVW [76] def
/StemSnapH [54 60] def
/StemSnapV [76 86] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/C <1C60D8A8C9B08A95E89BD1FA55F3C9FC54E2C9863902D6F75D05C264F001
7A0B5F36FB1EEF0F11263D359B596A218B0E0906D9CAF1169A5CCAF48E4FC013
81571B4E5A62FB5021C54228B20ECEF037A9A1D6C4A19F4113734CA5D977DBBA
DA1E> |-
/G <1C60D8A8C9B08A95E212C7DBD64D5D9359FC535766FB3035885556542383
EFD66BB095A1A6B2EAB35EFA47B031781A3F3237691CD01D02562CB835E6B254
75BBDD75014DD6BC0ACE4AD1B740DA3BC7077DB84A6F1EC808C39543CFCF581B
8F92B848B947BE1868042A666052A2C714132292A5> |-
/R <1C60D8A8C9B08A950473ED54B685FF9A0737A72C10DC8182660A478D6484
4A4EF90B6375B7375447CED09B73989D67EAF43A4B291783C63CCA8F086B1D32
EABD8A6A3E5F275095F8C7F9F835FCBF54131EF35194A8396111E677F144F44E
10B416BE> |-
/T <1C60D8A8C9B08A944A190E55AA5DD31F467D0423A053EC03AAF47B71EE2A
AEA5FF3133690A0B50D8047A1BB69E2A539CBFF9DA2B5FAB4D6D6A0AF2306532
49B3E60F0279> |-
/a <1C60D8A8C9B08A95AB8DC622FEBB6EFF06B75EF6258DE24B779154260802
09CB95D8B91CC3B7736DBF97AE14274E0B6510D496F67062BFCE0BB9CBACBE35
5F30492B158AC74EB9B3916A328DFB0878E37507C5BCF3AAC286368133DFF49E
5BFBAE5B0F32B9FF9A26081328FEE6F2CD893A23BE17B2365CDBE122DD403C74
5D10> |-
/b <1C60D8A8C9B08A95D8E840BC3BFE7FD1EFEA271B3268EA0D05262E3E1978
A9191C949094A8BAB37317B63101C9E897D3EBBB99192DBAD2C5B7A654A40263
23466FE00AE14F7DF513956E5EB4FD1A561BACACD68519F1BC31C92D77CEF42F
1647B9BF99793DB993BF77430E9C2CE12143> |-
/d <1C60D8A8C9B08A95D8E840BC3BFE7FD1EFEA271B3268EA0D05517066D38D
ABBDEC65403CE063C0EA82DFE6D2FDF5BA1BBD31046A4120919C9B005E02E215
E02C7060E04810197A4EE37E54B068AAD7A07D32D37F6835A705F045AD78BB47
E46188A54523911A939C12> |-
/e <1C60D8A8C9B08A95B5589A17E299A839B353761A5754405332DB751515E1
39F49B25FCC8C9DC8E3EBCFAC169ACB1889E709DBE3BE8BCDEBEDBEBD2E7A5D0
CB9FE062E3F18084EF219DED1EBBC816BE1DD940708D3FE9C79213BBC3FE62C8
E2F15DD9B8C87592CA19D102E03E0A3373B50DE6098AFA0A314B> |-
/g <1C60D8A8C9B08A95A31CD7D9F217DCBA037270857DAD016AE51D4410EDA7
45973C28E7621269D37937188B9E68E34ABB0C5A72A609A7299E87271E0ABC47
74D2D8CA31B2F58929BF44FC33854896D645F525702BCAE3049461EC5EA86184
8D66C047EE767AFCC6820558E167DC40532C5DDE3262AC3BB210DF2141A8CEBC
ACB9EA2A8EB81F3BF88D4F1FEBADE5FFBEAD886E960B95B0782E81B113A22DAB
655E030E15B75690C59979ACBB3A059B891FCA8CA0AFA0465ECDFA78D870A66B
1E466F09AC80AAA22E127934C645FC14C636848474C7B8A5AC887BDA510F3EC1> |-
/i <1C60D8A8C9B08A9545AEAF563F384DC2228F717BF90667A52C65A5379193
AB133511F7507802DAB6A8197D0254965D7A9693EB947D> |-
/m <1C60D8A8C9B08A95026F9C287FEF94494F5F295BA6AA092C89C7B7C8F42A
D6ECF94DC23B657C2BEDDCAAAF73855BA7C35045977586FD8F4502D50E30528F
35706E2F7FE6DDDE87FE22397BE27204CBAC52ADB6612CE76C675529AE0C0E78
00CEF282F44050942FB389811CC45B52> |-
/n <1C60D8A8C9B08A95D8E840BC3BFE75A638CC60EDE4E32C5F043D10AD74DF
9A133AEBB7526F4D0EE19DBCFB2DC1F38B66C5E23BE4CADA86F303D1868E0D3A
764094313DE70340C27818A6A5> |-
/o <1C60D8A8C9B08A95A31CD7D9F217A69992F44FA90AA023A397851E23C8E4
CBFCD69F4E7C3676D1839CE0A79E45A4141988EDFB3760BD3C43FD952EA4939A
C78485AB0271866C6B5494B9EB377464114D395D7CA45C9E2453E1E4BA1CE2> |-
/r <1C60D8A8C9B08A959DB77AE556B1923D6116776B12D082BADF5DB74D347F
28D8BBC405A19BD03F9240EAD5B4D10CE1E88EA4C23A53669629> |-
/t <1C60D8A8C9B08A9596B916DE68D8C5084A09F6F7CC28E2D467F61B3C384E
4CBB2539885E158BDFC5A71AC496C670DE10727BF0A213AE26DFAC2C451BE67B
4AF66EC8C9F901DC42C63A8759911A0BB39EBAAE3E8151438D> |-
/w <1C60D8A8C9B08A950544B94169164E7CEF5A41C23BFB6D3A9ACE6D939891
BE7BACC4208D57C5DD3F1E1E1A3F5A0A1B7C43540CA318451D0AC85A66D36C68
DD083B438DAEE8D26F5EEB1FE44706E9C76390BAC1413304F4A657755D9D44D9
0CC7D9A06B10E477E1F0419C4C586EEC14DA2E8D3EDBFBA96FA3> |-
/y <1C60D8A8C9B08A95B2CCC00C0CACA7ED3EA78B54591E25CC4E6A1FDCEB3C
D700CDE1F3C606D0C5AC44A06A2A8E08B513D8F94A49EB734FD6329193B24F4B
FCB108F93DD8457E52FDD2E1D96DC5B76459D2B066BB85A54422AB3DBAAB97AE
4F2C> |-
/.notdef <1C60D8A8C9B08A9563F93DCB7939BC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EUCWGU+CMSS12 /QCAAAA+CMSS12 findfont ct_VMDictPut
/EUCWGU+CMSS12*1 
[67{/.notdef}rp /C 3{/.notdef}rp /G 10{/.notdef}rp /R /.notdef /T 
12{/.notdef}rp /a /b /.notdef /d /e /.notdef /g 
/.notdef /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r 
/.notdef /t 2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
EUCWGU+CMSS12 nf
EUCWGU+CMSS12*1 [14.1602 0 0 -14.1602 0 0 ]msf
118.066 107.33 mo
(CodeGenerationbyTermRewriting)
[8.85857 7.31507 7.11273 10.7929 9.22966 6.16248 7.11275 6.16246 4.71243 6.63696 5.00717 3.26109 
6.93277 11.7431 6.73042 10.9587 8.29507 6.16248 4.71246 15.5947 8.9238 6.16248 9.42361 4.71243 
3.26111 5.00714 3.26114 7.11273 0 ]xsh
0 gry
%ADOBeginSubsetFont: FLDBAA+CMSS10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /FLDBAA+CMSS10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 54 /six put
dup 57 /nine put
dup 67 /C put
dup 69 /E put
dup 71 /G put
dup 74 /J put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
def
/UniqueID 5000803 def
/FontBBox {-61 -250 999 759} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 694 716 444 461 656 678] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [61] def
/StdVW [78] def
/StemSnapH [61 64] def
/StemSnapV [78 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
27 dict dup begin
/comma <1C60D8A8C9B08A9570810981675918941BEC6C7A36625EEAAFD058DA
9FD482C52B27746E5D76B78817A726AA> |-
/zero <1C60D8A8C9B7A73D3B44BE74C368F4E2FC0D1E282D6B80C084CC069A0
A14712591F89EABDE27294D1768DD69DB23E7FDCDF76DD01EA2CE0CCF6F4531C
8A5BCAB0F1BE07F8191DEC09C9A3BC8F2BD2C623D1D6E463DE09FAA97A87D431
A34F6930759E9BEDE1196203F9A0CFDDAE3BE022EED71EB4AA4845FF1759BB73
5B5433870BF2F7C4D6B648D9C9DDAA0B7F47B27B9132A> |-
/one <1C60D8A8C9B7A73DC516E502D071D3E5EFB09D24340CA928DF0A691007
E1845C890D948062796F6CD87850B222F312B9A1047DDA1457E58E9699EFA460
BF3E57> |-
/two <1C60D8A8C9B7A73DC501F4900507988D419B48DDAD77641FCF9B01129F
44B2D0DA0A0D4246B40A3567725D92D14A71BEF3D15B0FCD87AFBF51EDF2E434
E7AA8140D4D28AD634F885437601AC91D4765E112CCA291CD10E37C9ADCD0B75
E41F6A87C712119256205A282F77AFDAF9159A199A13D204AE23426594> |-
/six <1C60D8A8C9B7A73D3B44BE741BE130889A29A62362BBF3BD4998A9716D
017BD3E90015A944479F79C367805DC4C50DB057D8E0A451E77FA8FEED04690F
091D41623ACB39AB5DC1AF72765D755468DC2818F70C26AC9F213B1838D66ABE
CDDED3650E39182CCE464B3439BDD0888E3B029C3E54D01F55FD3262BD39E2B7
7913583D31FCB75B5E307697CF4A1695AF9EFBD77C943134485F13A1> |-
/nine <1C60D8A8C9B7A73D3B44BE7BB547913A9BDE169CF47BDFB08AECD5607
99E5BC8494BE235E9ADCC03CB80F5292113DF6968D1EA7A40F55C5B9F80DEC1E
C90EFB1C279B74EA768317A0E0EF74EDF4617CB23F4C910337B8288987BD48E8
3A5C57153D99C537E1535151D97A04BE59B429AB8384BD475BB1798042991B18
A318E879D6A9C6C64FA96744223F01926110C9D549A9098592C1B> |-
/C <1C60D8A8C9B08A95E5CBCB5155105F8988F9AFEF72D4ED646885BB7DE8C7
E8C204EF39896CAEAE260120B824957C86C847669EFAAFA89587DF4162B146D0
F0043DBAB0058C4DE87E670378F0402E39E25B24B07EFD192C0AC2CE9661ACF7
17A6> |-
/E <1C60D8A8C9B08A95F50B1739DB3597D285FCEA4B0869AB5A3F34412C816E
F5670553D0830A356BB3DBA1147151DFF348A03547A198B7E361C103459B1DE8
DDCC1385C818BC5B4336FF4443B097740A8C1EAFD1D15E> |-
/G <1C60D8A8C9B08A944AAF3A41AE50C6A3E7588471850A270BFB011EF44BFA
19648F82DF16DAD5B24375BE5FF8B2431CF8300971B59A5AF73BAF6D880F19EF
BC305C8BB76865C6EEA4AC2F1A290723008A11FF5789E0A418BFA9C5E9B68740
8C5C4C010B040A40A4BDE37268984DD12805F819C6> |-
/J <1C60D8A8C9B08A95A487F5C1974C48C55CD7C2A3088220F504C5020A7247
83ECFE13FDCFE42E5D7E24817F4887133BFFBA6580F06C75E94E209F38B02CEA
70A94B01> |-
/V <1C60D8A8C9B08A944AAF3A41AE50384710D1AA3E893FE2A2C36FA63B3AFC
0E3259D2C693222B828C2FD4446A3985F82DA6BF06A42B4572983B1DD9646471
771E5585A146AFA17E> |-
/a <1C60D8A8C9B08A95A7E4088C7A38B070CB5597CB6E5B5727BA22A17D0DAE
C407D8C3D3136AA342232348EF23781510C3E78954963CD307527E6A8156255F
51163D8760FA65EEBAD56EA8F7D2F06154AF2F14F168207F31B23917B20B9FDB
A8E4C1D2E16D03E0C04BF729182FBA85E7EDE81B43C3AA0ECB9C9BA27B0E7F> |-
/b <1C60D8A8C9B08A95D5A79985A827220D46CBA17D951D71091A804487D3CC
69BB9C43B70B1C054AE8BCF010FEB975725958C0171BBED6676C9AAAE6CFEE46
F69DED7901CD1C4DCA677E0DE526159ACDEB3DE152447BA9BBFE3963B6938BEA
3024E87A005166176A2DFF> |-
/c <1C60D8A8C9B08A95B1F07368C45D8D45BA2821B5F2C4FA9D3A85E224B022
8E5FE35AB726CC4A33D25588EC7C48DA589632E55C3DF3C711B3593039ACD915
ABCF7631DC124554B002B7F4444201B431DF315B197FE5799F7C> |-
/d <1C60D8A8C9B08A95D5A79985A827220D46CBA17D951D71091AF2A64FDF58
3D2492D2B07E549E6F0F191740B84475A05D8CB502D6FFA02A5BDBC262D7461F
84CEFB949AA32E310EECB077C8C7052B181BF14CE47E6F9404B3FEBC4A576FA9
7D4D209BDF970697D6703F5C6BF334F97BF1> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D4688EED3D508397A2A1B06E9E596E8
BA0B06EFF5DB68A2B2DEDDBCB7B6A7B35813A23FFFD2FE0EE478C0BFB7745A31
69762B785AFBDC923FD45580217660D52ED1B556384A2F561D47B21C6662A2D6
C7FC6E088D08DCAF0061583F541694> |-
/g <1C60D8A8C9B7A73DB58EC4F5735257CF6484034BE48838869C792E77FEDB
2EDDDF87A4ECEA55DED30419BE80B9800A7A7BCC852BBF2F2E06BC58F5220971
E571F38CF807ABB277789A55600204E7D4F9D5B79E85F55DBE49717A60C2DBDE
EFC117FFEA09FDB25E08EC0D2C46945DC382E7BB216BC1ED46A53D7DCC40B2C9
9BE8374E106F137F672ABF5E8DC549748A999EC7C6BF9EB4A8ACFE131064AD2B
C89A39B533BAC508010480088F92C9E199DE77B0D5D956B2F9890F91DB699D5B
FE37A68F78A04CA9D3C85DA607FEC9886BB4D6> |-
/i <1C60D8A8C9B08A95414C3FF7328CB21E74879F707A294CE56FA4856D5579
AC24D99BEF447D92E629D8CC408E6D9D7B0F2DD90AECF9> |-
/l <1C60D8A8C9B08A95414C3FF7328CB21E7486E3B6B5E1E357CEC11DF3B72C
60D7555125BC3695> |-
/m <1C60D8A8C9B08A947888CD346A212481DC30FBBA5172AB33DA555892BB0D
4457537FDCBE22278A04524382B282B93AE276CEC08E722FA268559910EF4D4B
7BDAD0078C7ABF5DB8F1EE00F47BCD24C7B22C3566337374E8D52DA222B452E3
AA33BC072A7E37009D15AFC4B051AF57> |-
/n <1C60D8A8C9B08A95D5A79985A82729CAE756D0489903E93B90E41EC367F6
1A5B1D9E6565B3F6AD5D7DB5A2C3E43D0E00B470AD40C0D92976A92464A2E599
1D4AD84826F60EFFB914AFB515> |-
/o <1C60D8A8C9B7A73DCEDF64ACF1D92FCD603C38194EF3F5934A984E60F2AF
9261930EDC731DFAE6DC0D65525DECAD56D01145F3205995C224947145FF19D1
982913BDB63436AA6C4E83643807117E1530260A08A6B9A3F353> |-
/r <1C60D8A8C9B08A959965E2515C2E939D32F95F06D24977D250B5BA06E866
AA828AC35B0DE74E529A185884FE51182FAA624B3FDBC3A7A2C8> |-
/s <1C60D8A8C9B08A95899606B6B06029417B1C57880E6EC5D2D6786BEDA677
1C673DCA1F1E4C0DEF808791979853B096E133BFED7F29CEC7631B543CDA3044
7AA41B7FA0F4C395215EB8E1863D34AE9393B851AFDB1E97EFCAABF875BA3C47
5E5986C14523B69201AE249C951AE0EFA42707CEBD6E1E21237369A79A3BF9EA
ECA687BB513F7892AF8337C0F0> |-
/t <1C60D8A8C9B08A9591900960B3FA4D96867B930C4350F4E0B4C1A851140E
2736CC0BCA482E4D8AAD1BEEFCDDE668980FBCDB1FA095D98D1D1D88986BF245
E52C01B70C1F43F764CB2ADCDFD2E95C5ED85956ABE04B8858> |-
/u <1C60D8A8C9B08A95D5A79985A8272207708A02D998439C3D8F5943D44B24
05B880A2E47A3923B4151C5A4934C03CC4787600BB3DBF41B100327D7717400B
228ACD479E7A669CC2CAE88F> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EUCWGV+CMSS10 /FLDBAA+CMSS10 findfont ct_VMDictPut
/EUCWGV+CMSS10*1 
[44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 3{/.notdef}rp /six 
2{/.notdef}rp /nine 9{/.notdef}rp /C /.notdef /E /.notdef /G 
2{/.notdef}rp /J 11{/.notdef}rp /V 10{/.notdef}rp /a /b /c 
/d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l 
/m /n /o 2{/.notdef}rp /r /s /t /u 
138{/.notdef}rp]
EUCWGV+CMSS10 nf
EUCWGV+CMSS10*1 [10.7677 0 0 -10.7677 0 0 ]msf
195.201 150.68 mo
(EelcoVisser)
[6.43044 4.78514 2.57248 4.78511 8.96948 7.17885 2.57246 4.12726 4.12727 4.78511 0 ]xsh
%ADOBeginSubsetFont: QHLBAA+CMSS8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /QHLBAA+CMSS8 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
dup 84 /T put
dup 85 /U put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
dup 121 /y put
def
/UniqueID 5000801 def
/FontBBox {-65 -250 1062 761} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 694 715 444 459 656 677] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [66] def
/StdVW [87] def
/StemSnapH [59 66] def
/StemSnapV [87 101] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/D <1C60D8A8C9B08A946548FE93FF91E282ED17DEAD31FDE2451ADED7697DC4
55BA37D4A0011E496FB88E2D4E659921E48B691B21676F09C1E48C65F2108F85
426A91C8DCB87E04ADFC5429F8CA89F79B65DC2D687A1A879A> |-
/T <1C60D8A8C9B08A9500EA96090FFCE1279362845AF36A891DD30BDCF505C2
B811B8526F864E813AE046EA590E9ECE9CEFE68B52F0C15481EB81B0E4A47954
BAC9FB872865> |-
/U <1C60D8A8C9B08A9452E115893F9BBC126CA6D3D8A2A2E6A6E90377036946
7444797F3054BFD01815A906E52946CF6AAA5CF53FFB9D9CFA10FFA45631D5A4
8F4A7B4C44972EB9B3056E6C56D4C335> |-
/c <1C60D8A8C9B08A95A487F5C1974CBC46EDFA024B10BFB82411DB9E6ED2A0
E93DEF0A35A251D920BFDAA2A7B46E6CBC92605CBA9B7BD58F9E0E0F22DBFDD9
F40F67CFFC104E724BE31C70114FEE7FB1A015AD23F1DD1A43926E> |-
/e <1C60D8A8C9B08A95A487F5C1974CBC5BDAADE84D2519473ADA857CF323C1
531CAD5B4F52A3607E2E7E14D187064DADC2B60F9198B7518A01DA501B426BBD
B66B30E2F7F9F5FC2B656F5C44680AF59260F6A73D520D43BF83BC3E70663D37
160A8B27AAF5B392D06E> |-
/f <1C60D8A8C9B08A95626B58A6B1237965053973B8FB404709A89F375E9156
15E158C393BA01B95E846CF870F30888327DD24AE0FEF9D9DD698B73315409A4
3DA7F58A531667197A4326089196F7D6EBC0991D4E4B4C> |-
/g <1C60D8A8C9B08A95D352586DE3156F009F9006009F639A8258D634C07A47
28FC89A512B81732DCEC6E9C982BEEAD774A0369723BB6C108357241F27F5FA8
5A7410FE95C47BB0D587F73F0CE300962C85F2CF522AEC6D33B60BDBA1538F1D
02C3AF684A5F56CACB3E4CDB89627AB713B34ED63DA7D77D5FF5C046631112D3
BB1D955DDB2E28B394D3FB493F888A13EC7559B5D2F28EEF4492C4D6B068EA9D
9F4BFCC1277B93AD0C07BF7FC92A8C7BD166D5D34860A47802A212E1590C7BAD
1E3008AE30317DDBBCC90A770C2D7D19CFBC181ADE76DF145BA68F685903> |-
/h <1C60D8A8C9B08A95CADB2E0FDF214E965EEE6A31BF20ED8726B66B03BF8C
D150B019AC29E18310BC01780E8A4925A7599F1078EA84900F159B6E9E497F48
76380A38A2040C85E44373D7DD24F2D570DC> |-
/i <1C60D8A8C9B08A957F18A8F05374566C54B3F131F13F95C22E46A72210C0
1F61090D743E7C213D1F57D26842EF5CC50EFFDF11134D> |-
/l <1C60D8A8C9B08A957F18A8F05374566C54B2C94D26200652204839D8E9E4
3E536042EE59181A> |-
/n <1C60D8A8C9B08A95CADB2E0FDF214E965EEE6A31BF07513AF3D24D78824B
3E6C6ABEE9F370367376A7CE04A537C7A0001D37E4BD39292215E9D356226EA9
131646E85A12A1282CAB5B15ED> |-
/o <1C60D8A8C9B08A95D352586DE315151F0C9B78479922FD3E6C9893F15D45
86B2140D4A4478EAFADB947B582120E117287CD2DF2FCE24199168377CA0504E
0C0BE83D11C4F89E14A0860926970E4FEE1B073415A5894BDDADFBA30AE560BC
FA> |-
/r <1C60D8A8C9B08A959122DC3B14EDDFCB397F3EF6B08D988D22D83D5CE86B
8D2CCA7075727E4338E5AFC13950BF9D54804E4A8B7E1CF3330648> |-
/s <1C60D8A8C9B08A9513EC80F28A41BF87157FDA4623F5273C2BD0C4E6D6AC
0CE2C31A91DF1BD8BA9355DE114E1B20382A66DC7664BDB6776A450E9C22675A
0D0CA24171BB35EE2DD06BA8801270E6D847E65A096EC93AF01A345A28D6D17F
8D9EEE450308A68A824C28A0F8262739B8FECD34860AAC34A2A7057864825C85
CC6017F1B2A294D995C85740D9> |-
/t <1C60D8A8C9B08A9589CB49B41630CF5E51AE136E9062C16038719333849C
3269AD8A1B72076DFFE2F35CC12F3F72FF08F607A1C4D8933DFEF117E940A58E
989DE0E131D0212EB3F4DA90F61A97BA63870873D14909B6A1B3> |-
/v <1C60D8A8C9B08A95A31DE9FFB66A152398A4480AFC89370F2D14EC2D2E6C
1A1157FDDAD5D51273C8724A14AFDAE0ED984D36E2A50043CF20A6871D2398D3
EFE1> |-
/y <1C60D8A8C9B08A95A31DE9FFB66A6565D5551F906784D46B9447616F9DD1
2B9A8805BB11E36465513461847268DC2EB0903E82F2474A8D998945C2047545
F0E6D0687A549D97BBFA68FA82F0AFDDA7C143D6CF3253F639B0693F9B314351
D7A7A92DA1DCEE4A91> |-
/.notdef <1C60D8A8C9B08A9596FE72ACE143EF> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EUCWGW+CMSS8 /QHLBAA+CMSS8 findfont ct_VMDictPut
/EUCWGW+CMSS8*1 
[68{/.notdef}rp /D 15{/.notdef}rp /T /U 13{/.notdef}rp /c /.notdef 
/e /f /g /h /i 2{/.notdef}rp /l /.notdef 
/n /o 2{/.notdef}rp /r /s /t /.notdef /v 
2{/.notdef}rp /y 134{/.notdef}rp]
EUCWGW+CMSS8 nf
EUCWGW+CMSS8*1 [7.86678 0 0 -7.86678 0 0 ]msf
169.125 170.789 mo
(DelftUniversityofTechnology)
[6.03694 3.71466 1.9942 2.5544 5.8033 5.73648 4.3157 1.99419 3.85153 3.71468 2.85486 3.20416 
1.99419 2.78246 6.64423 4.1796 5.33923 5.00873 3.71468 3.71471 4.31569 4.31572 4.17957 1.9942 
4.17957 4.17963 0 ]xsh
%ADOBeginSubsetFont: CRNAAA+CMTT8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /CRNAAA+CMTT8 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 47 /slash put
dup 58 /colon put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 119 /w put
dup 120 /x put
def
/UniqueID 5000830 def
/FontBBox {-5 -232 545 699} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 0 611 621 431 439] def
/OtherBlues [-228 -222] def
/BlueScale 0.04796 def
/StdHW [66] def
/StdVW [76] def
/StemSnapH [66] def
/StemSnapV [76] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
15 dict dup begin
/period <1C60D8A8C9B08A95D352586DE3151F284CCA085189CC3A86192DA10
69841318240DB8D8F307D51B08E9F6736B2F8F2947D> |-
/slash <1C60D8A8C9B08A95D352586DE315AC31A5947749DA3F5DE717D03CF4
B2B84B398D06AECE71C4BF1A54B5ED4DD10AEDE5F5B67088E6A2FDE285BDE7B6
64012E838CD4E4911A32AD> |-
/colon <1C60D8A8C9B08A95D352586DE3151F284CCA08B74A8BFE0F0FFEC117
A077DE77E355134782F2E1F8B685912E9E63F2C84FB725423A3643611D48506D
C5543893056A3E2D4D15CB9F8F1E0844605730> |-
/a <1C60D8A8C9B08A95D352586DE3151F12983889D169B8FFADAB8E26F0BC1A
C4E0E815C26FE8BA1C4A7B44D18BC7F23E75BDE88B4181929A87102DD3C45047
09C67C4507D1EDC6B31AAFD1699BDDB274652DAFD881B0F7B587FDB7B987E5AF
D671EE193CF44C3C20CF1BC62E860A2BD5DCA0A1FDD6A81BAEB5654762AEDD3A
183246A4333FC98160C8BA3C5FB92E60B19210C16F924EFB11C0B0781860> |-
/e <1C60D8A8C9B08A95D352586DE31512A9858CD5986B7AB824726AE442FFA9
F147147E556BD8B414D9FBC1F63AD8157030124B8585FBB7278DA93BF71934E3
5C29DE475F8FCB1C119934E740C145D5C02207BD91E331A68D08545FDE72F117
5AE5A90C95C9215CA8EEA610A2AC242A693F1BC110> |-
/g <1C60D8A8C9B08A95D352586DE3156F19B3C756633BDE10AECB262B4D5EE3
7767001DDCD4C8E8057170383CDE77303B7E3CD0686BEDA809FBE1441FDF192D
02372C141D8102314542DE4F7E0D8CC9DFE5051C8A5510FE4A1D9483F3AAF48F
8F23296D6046AB96473A1C54A7BD4C55F95B775DC8C20DFBE37103DBAB701580
686B3E2F316949AF61876415A2475F3E3B2E1FA21A2D3CB6EA5C24962CFB0D24
CD22EBAC7B03B67CCE13BCFBBBB7FC554CDDACDC18664905B65C96202824C4BE
A6B5C51EA601A3070F21720C16F5640761082F96880F3AB07409C68BCC2452E4
CF8C094CA11D64> |-
/h <1C60D8A8C9B08A95D352586DE3151F1298371023E384364E8A1B0771CE0D
585246F8961BDE789896927D84452F894202B86C9685A022CE7DEC6881C28A3E
EEF297D30CB7BC45BE095C4506486CE2099D0C5B608F9C3BE30E9F7DE0433F87
CB51F983102F2CC3A044F181831D3F175A99F974735BE8088C428542F5C02F61
A0ACF01203BC648B66FA69B097E931494C36A01F> |-
/o <1C60D8A8C9B08A95D352586DE31512A985834A1C7598AD27DB151CF8E87D
4BD3CFB33498738A427636945D495B849960DDE3D80DAE1F3D3D8C0A5B9C6DEB
3DD360F1DEE52D8CA211D1EF8709A40E45096E95E29FA1FC52F615> |-
/p <1C60D8A8C9B08A95D352586DE3156F136472B874FA676FC41CFA9DA5142D
DE9C70595E7B58A7A36513D44C1A3DB576C65EDBCC99F82CE735026CEDE587EB
2283BBB8589404AAE52AA79C4421FD179D3F56100D2458ACD6D04D6FC9BF8438
1AE3CB95124B3FACB4F44BACFA65834CEE913BE64B8D928AD846C09C89B2D92D
3AC19249642DCF93BA397FF00F6787CC> |-
/r <1C60D8A8C9B08A95D352586DE3151F129837175EAF3AD82702284CF541D3
63A58601CB4F8E16B0FCFC3FA25BA682DC19A010FC17ECBC5B7C1AF7DE69E2E1
9215AEF962631A9069BFC71BAAC1AB4B9E6EE7A226C4630FBD481D70DF1DEAAF
40BB66EFCD0011B251973D8DA6B8F0D1E10D1EB387DA0A8A> |-
/s <1C60D8A8C9B08A95D352586DE31512A985834A1C758EA4D926A6BAC8E0D5
93EDC8AB0CA8C4FBEAE0C6420CBD0811E161B095EB59F8D7A85E28C79BBAD978
AF67C8AC204ABB6752B69233C1736D8B90F7A9CABD72C1D20F4753E506D24565
6AAC65E797A370C6CBE2A84142ED0B47EFF68FF0844530902387E8B6CF841C93
B78E0D954BBAF4FF8FB0909C987161D47E887A9A28F4D5C544E89D33ED8EE4E1
D25CAD9F781C1BF6AECEF9AF> |-
/t <1C60D8A8C9B08A95D352586DE31512A9858342902B38523E484129D011BF
80DB97B3A9DDF438A4619D71C083C6D335CE7E4CB7ABDA29FD8546FD3906DAE9
CE4460DB7A02F34EDD288B18998AEB9F51ABD60FF1ECD74311334477D10BD3FE
1BE659EDB4F7591E1AE61F1E942B540EC198348A947003D8386FFD35> |-
/w <1C60D8A8C9B08A95D352586DE31512C44BF807CF75F1BE613961F84F6339
00FEF42D48C1AC67776513BA5EF664DE958F983F41C22A5BEB960862BC64DF79
C19741EADFBBA3FA5E2E8E16D5F964A7290086C56A5CE9098BBE2B504D3F06CF
F150F53E271163C1746E1B6642BC83AE4A7F3471F8F0188545F961B84633B86A
A3D71F84BD41780BC787B2B2AC6F10D1C7DB4EBEF18B6DE48BADCDF7CABF990C
FC9C9EB2A125B7385284846C> |-
/x <1C60D8A8C9B08A95D352586DE3151F129837175EAF3A4BC9E53498880BF6
A07EB2C6648CD21C481FF8437C26CA305D33A18DE31EE1E32CFBD39B209BBB00
A8124CABD0EE56AA58FA4BD13F053008021CE7199A36AE5C18EA825C391E9655
2653FD74B925E40D6F064A1E88202BD724AF1A662CD3B0713DB9EC4E4F1A2A0A
0EF809A5654144AB920721AB265B2D719A18885F57F5027D8A9E611A189733> |-
/.notdef <1C60D8A8C9B08A95D352586DE3159A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EUCWGX+CMTT8 /CRNAAA+CMTT8 findfont ct_VMDictPut
/EUCWGX+CMTT8*1 
[46{/.notdef}rp /period /slash 10{/.notdef}rp /colon 38{/.notdef}rp /a 3{/.notdef}rp 
/e /.notdef /g /h 6{/.notdef}rp /o /p /.notdef 
/r /s /t 2{/.notdef}rp /w /x 135{/.notdef}rp]
EUCWGX+CMTT8 nf
EUCWGX+CMTT8*1 [7.86678 0 0 -7.86678 0 0 ]msf
169.969 189.473 mo
(http://www.strategoxt.org)
[4.1796 4.17958 4.1796 4.1796 4.17958 4.17958 4.17958 4.1796 4.17958 4.1796 4.1796 4.17958 
4.17171 4.17961 4.17958 4.1796 4.17958 4.1796 4.17958 4.1796 4.17958 4.1796 4.17957 4.1796 
0 ]xsh
EUCWGV+CMSS10*1 [10.7677 0 0 -10.7677 0 0 ]msf
172.11 213.615 mo
(CodeGeneration2009)
[6.87947 5.68535 5.56357 8.37079 7.17883 4.78513 5.56358 4.78513 3.67937 5.17502 3.8882 2.57248 
5.38385 9.14922 5.38385 5.38382 5.38385 0 ]xsh
198.282 226.988 mo
(Cambridge)
[6.87947 5.17502 8.55388 5.2621 3.67938 2.57246 5.56358 5.38383 0 ]xsh
190.475 240.362 mo
(June16,2009)
[5.08449 5.56358 5.56358 8.37076 5.38385 5.38385 6.58766 5.38387 5.38383 5.38383 0 ]xsh
grestore
0.987037 lw
43.1443 568.839 mo
401.276 568.839 li
401.276 300.241 li
43.1443 300.241 li
cp
@
gsave
43.1443 568.839 mo
401.276 568.839 li
401.276 300.241 li
43.1443 300.241 li
cp
clp
43.1443 568.839 mo
401.276 568.839 li
401.276 300.241 li
43.1443 300.241 li
cp
1 gry
f
43.1443 327.451 mo
401.276 327.451 li
401.276 300.24 li
43.1443 300.24 li
cp
0.37 0.45 0.66 rgb
f
1 gry
%ADOBeginSubsetFont: QCAAAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWGU+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/s <1C60D8A8C9B08A958EAD96EA79E68C696421123C465FF383548823BEE6B0
B1D796EE93EACCAD38184BB40BAED6DACF889E709F6F51268598C5D52183041A
A0B4C8546EC8349093BF0AB0DF900BCCE0E2AD7F1DB19B2D0F599C1A61450945
CB48796545EDE5A4E5DCA108E4149E28953DC631CBB95409F3A88083E00999BE
E6A5BBBA70> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWGU+CMSS12 /Encoding get
dup 115 /s put
pop
%ADOEndSubsetFont
/EUCWGU+CMSS12*1 
[67{/.notdef}rp /C 3{/.notdef}rp /G 10{/.notdef}rp /R /.notdef /T 
12{/.notdef}rp /a /b /.notdef /d /e /.notdef /g 
/.notdef /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r 
/s /t 2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]
EUCWGU+CMSS12 nf
EUCWGU+CMSS12*1 [14.1602 0 0 -14.1602 0 0 ]msf
51.538 320.042 mo
(CodeGenerationisRewriting)
[8.85857 7.31508 7.11274 10.7929 9.22965 6.16248 7.11274 6.16248 4.71243 6.63696 5.00716 3.26111 
6.93275 11.7431 3.26111 9.93065 8.92383 6.16248 9.42357 4.71243 3.26112 5.00717 3.26111 7.11273 
0 ]xsh
67.1746 398.646 mo
67.1746 396.475 68.9513 394.698 71.1227 394.698 cv
373.3 394.698 li
375.471 394.698 377.248 396.475 377.248 398.646 cv
377.248 401.101 li
67.1746 401.101 li
0.8 0.8 0.8 rgb
f
67.1746 473.968 mo
67.1746 476.14 68.9513 477.916 71.1227 477.916 cv
373.3 477.916 li
375.471 477.916 377.248 476.14 377.248 473.968 cv
377.248 398.151 li
67.1746 398.151 li
f
0 gry
%ADOBeginSubsetFont: QPVAAA+CMTT10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /QPVAAA+CMTT10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 42 /asterisk put
dup 45 /hyphen put
dup 58 /colon put
dup 59 /semicolon put
dup 62 /greater put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 95 /underscore put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
dup 123 /braceleft put
dup 124 /bar put
dup 125 /braceright put
def
/UniqueID 5000832 def
/FontBBox {-4 -235 731 800} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 0 611 622 431 440] def
/OtherBlues [-229 -222] def
/BlueScale 0.04796 def
/StdHW [61] def
/StdVW [69] def
/StemSnapH [61] def
/StemSnapV [69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
32 dict dup begin
/asterisk <1C60D8A8C9B78E05F7CF88ECD8CC4B521887C06B204735CA10A79
44DD36AA1ACADFC8A9317D68354E6A5420BD391B6911BBBDB4D6F81FED1A3AB1
2DEDC13899C0813120F3A366275DDDD9C1222EB526932FA2664C138809C156B9
D54B62C7FBD1DE592C63BA23249A34674A4010EA58A8F2C0B921C1E44E2CD9D2
E4BF81492AFBA97C7B3A981496D1475FB1B90EB9C14AE8DE5D9D60144FFC6005
7111024659F0636ADB1B311DAEF03FA> |-
/hyphen <1C60D8A8C9B78E05E54FA6CA76B469E10285D91611F71C88A7F3A61
2E901BCFEBC39901E5969C6496709215DE972> |-
/colon <1C60D8A8C9B78E059954B91DD6211CE740A7B82F48C8E422101B33F5
E48BD43B9F01F5930F7348958A8F4536B7387509A9698D663A4DAAD82D2461AE
1FE2F18FB68C69FCFF18012B0C> |-
/semicolon <1C60D8A8C9B78E05E93A525965CF42FA76D6466EEB83F7CABEBF
2D2A61851D832E8608F9E64F70E2B0E02773B2CD03F3CBE06B7D0BE9240344DF
A2336F494AC944EEE0A0686722BC5015233E96F60C95069AD143B48F4B462615
3E16CA2E02922BC1> |-
/greater <1C60D8A8C9B78E05D16BFA5443B384F9B043E4C5310A98676249C5
8B0C27F610ED2913C4EA6AED43A2ABED423DC419306EE27FAB42C2B3AB59537F
8F1ACA3F308C4D0382D51B8176AE6A54873F1CDE1C21F2BF122493FD5DA5ABC3
580D> |-
/bracketleft <1C60D8A8C9B78E052AEAA9A593768B15FFD788D3D7E1905BBD
4EED1E00FA6EC2F77BF09AEFB342DFDEB6AA9C18C144877AF0831574EC612A62
23C5AFC25B6029D6528AF0581717> |-
/bracketright <1C60D8A8C9B78E052AEAA9A593768B15F03FEC67971B74369
11DED884DEC3124638157144FC2A2E30CC9215269E50536B11C6AE7D3255DE92
485F22252F3368E5509B6EBE5E2A7> |-
/underscore <1C60D8A8C9B78E053E9390BB6B7A46D951B846302098EA4EC50
C0C60B903348822F84AF2E8FD681C754D1FD3> |-
/a <1C60D8A8C9B78E05996B357CFC3D6A68429CE44210300ADBF33D3BA65564
22DB30AA2C2DE7C9116C427A19DC90F7A98606BDBFB27DF4235F2AAAEBA26184
E5C8D38867C076F8FDD8600853EA72DC9D3F2800940687EC72A6F334200BA15B
ADC95674191868FBF18D675A9DF803EE70B50222D29881504A1059B3AFD24FEF
30B48C4F1746ADB09F7A9701B6D22B65D1EEEC5210E72A1090FCFC77ADC9FE9D
0DCBF3CF0D355063BE501BF4AD72162F8BF2> |-
/c <1C60D8A8C9B78E0597CED2992C40EF0933D2EB4E9751CE6D26C4230365A0
1A77D6560F9665D142AC6129BE55DB79B05CBF5497F12914BB4720E37487DE2D
C750A4E03E76022EAF5BAC6844F7A9B88979942D3D8CB528AD7DB48ACEAE040A
6F2C3348862BFCF3> |-
/d <1C60D8A8C9B78E05996B35735C4B10FF1E7638B59B00B7AFF75E25A2A92C
841F6391917CE6AACD0C2A5249A68F1C767AB0D887F0980FF4031D18C0AB3FDE
D4CD2E16FEF143C1F0FD8035C390F0DD7806572B84D99BCA72CB562C352DBDAD
A0E1A764EBD9E0616EF3C6E8FF7E9E2049F8B1F19FBB4EBD3968D3C295E3CF8E
79D70A00B6014870A793520EB0C590C01F483B972AF483> |-
/e <1C60D8A8C9B78E0597CED296E4DF68F57D691EB40490BC0E3694A5AD16EF
8A4C42509F5EC82DED1ADE3F99EFB62E9AEDC7EDD5864ED4AD854BBBC30F02BB
3445BE2D343398E4E410DA907E4AF891E988EBF702755D737A3F1D7180EE892E
12328CBC80382D1CE834408AB8F4B8> |-
/g <1C60D8A8C9B78E05E95C9BB68C365D5EE5F2A501E8A3C0639ACE817E7678
3445DDF0A7B004D3C6BD5BB837E5166614ECC13D5921A09D73BB6DD34E83DE1B
2453736F6FBD255BB670255CF305C0FC1DC5320132AC7F5BCF83CE909D3E0421
D6120CA81BED29F616D0E3A97CDEF99541CA25403051723F6D5B70FC81935874
F8CFBA7353DBD9D849B38B557C2613C6068EF4194AB586736167506A03AC9149
644EDCFFAFBFA949C2A4C984690301B9460DA63FFDA91DA54D011FE98924800E
9AD57D76E45531EFFF5FEBF7636F3F5B3B3023047A10BD8CDFEBD53DBE980143
FD25CFE8D7C192824866DE36E61F0077A26CE06FA16110672EB390109A6D609B
B92B7775F6DFAEC48077AA8DCEF02AA40C90A54DF8> |-
/i <1C60D8A8C9B78E05996B3573566568C75479E22564A3834F3FF0CB347574
CC2A502F85F740F591300E69B039D730185D703A65E03A7AE8A5896360C52193
422D46DCA3858C85C7D3735F0189AE0EC4B26122B3CC5C6F5305A44DCAC7D12D
B652EFBBCAE7FA1BC7AD5F1A111355C1CBFB8911D5457DF2D53DF380C7> |-
/j <1C60D8A8C9B78E05E95DE290973D6E3674FD41050C9E7D0273D33E7699F2
FB9B5536B33664BF450FAC4C4F7DBAEFDD64238BE8BBF8705C94D41864D5BAE4
E3DBB0078E2B6E2BB0632B2AC43E39B59AE162F8F427A40CDDB7A8F8C6BD486F
F93D11512FCE1804C8F7767DDB46DAC923CC69CE1315428707B94A99F2F3C382
6FD38B8F3556856FDB7040ACFF1D7E547782B4B6DB4D57D6DDB03D> |-
/k <1C60D8A8C9B78E05996B3573566568C77AF2600A3D6FD1253615031CAC16
89340F14D722D10ADA76D791CF009CD32AB1FDED383E81E307318EFDC2E4952E
6C07C0D49A8B1F3D14871B3655168BE59CD054CE0E1B28FF5DDF4D8DA6199D69
50F05623773E4A481F84B7E4670131B04F9F6EDC6DB352BAB3D45C73CAE54F6E
AAFED8AE3641A38610B070AA3CFA8FCC396FEA50DC6C4BF903AE272C> |-
/l <1C60D8A8C9B78E05996B3573EACCBDF587501E2E2A7DAB07F1EC7DA6B38D
A835EA10078B9E2B100F85897D223789968CA4EAC10C4518C8484F6D351A45C2
631D45E58DD2D017C08AC6FE6E789829FF> |-
/m <1C60D8A8C9B78E05D25A17E5A4A5A7AB9B248182E40ADAD3A5056924F15E
E3318FE5DD6B0DE35F3D77359CFA565CD5AF9FE6D4C00699E6A9502B038A8D31
AEFCBBCE1F0C13F3065647910063AA77618C3CE8B289E5A8461C67D6CB4AA452
4937BE04A9D613992D94DA0EEFEDCFE8DA27FF7B00D827E72C2A6683FA50AE59
FFD07DCBF91D6EB63382226508DB4BCFF556FF0656E76E4EB72BEA64F4C8968F
F0CAA1D648E1BA8E402023C43D9764C3AF0F12F90B412AE5F21C000DA5A011AE
492071E1F0B68AB7E18889> |-
/n <1C60D8A8C9B78E05996B3573566568D3BD7DBC88EC0DBB494335B1E5E2B7
545BF5C126FAD117D4185F678CBDBB86A3D5BF7A1FC96E952495142FC1403365
3DC2225A5B237F6F93C2AB3A660518B2D756CB3253126D6E9E75DC70BD3EABEF
FBE1F4DCC612E90D6C3F42A291FC34C6A59A26A0FAEA5C060CBCF99AA0FD3CFE
C907624115BA8AEF49BE1FD04968360B30D105FA904CA39A0D7F> |-
/o <1C60D8A8C9B78E0597CED2992C40EF191A4C45874D1ADBEC70B4332BD16F
C6E72E6C0814914F733B15187F2AE02ECDDAAD323B8CE54E5890D7A8B16ADA89
C162996B3F0E21E0F239A7E5BD13615A4D755DB24A> |-
/p <1C60D8A8C9B78E05E9579C8066B5A1A06B36B7FF66195215C79244992D77
B97EFBEA0A8D05A6CA95BB13E70354726AE8C05FABCDDE3F7B30CB6672B8B8A3
301542E48301FFDEAE69AFD0B49FEA49CBD0CA48EE7014446B9B4ED70741C91C
2C1D2C9254171ABA5A747575563C7A28538E954047A3BBAECB0D48226D3CC60A
10275408D602711ED86FED017A11D96C70DEF32508C2E3F127F50D> |-
/r <1C60D8A8C9B78E05996B35735C4B10F0A68C733837FFC46D15E711585D69
409D476B4E1B79D899A1EBE7F07D42FC0D7F3AF51B20EA4BE96332191606B9F9
30E6A59EE195CD4F0E430523A60FA98B36B2D8D170EE2CB19C9F94E68C957715
7726B0DF61D35FB969298349003E15248E2E23535954CBD18C62CEB28D8079F7> |-
/s <1C60D8A8C9B78E0597CED2992C40EF0E23ED992D0847EBD4D7A32405CA34
8BE21E2815FE9E3B4F6CE7DE8ED79CBFF6780D984520D4E47AFC689725072389
774DDC786F016BFD014DEFD2D215C8F3AE1E706DA78EBC69748F186A9961B36E
72753BE06922009C0C56DA25E5958E9D5F9FCB985581D87937C60A27317D1C79
3A386C4DBD7CAA3075189E1D814800E18C62454A70859C018D7795D755A68960
0B8BC77ED035A4776C85B9D6A70EB62E3E37E5723F2E6B9267> |-
/t <1C60D8A8C9B78E0597CED299252BC7B05D988F4F7EE667DF4F850255BD28
5E9BDB6F1D9734666CE6E99228B4903C845663259737533F426C749652248BD5
8E77C356FC8FFF7AAAF4F3EDBBF4F304000495C28895CB8E17AE8F20B0D8171A
FE2F325DCA0172B98285FEDEFC5314F65074B9> |-
/u <1C60D8A8C9B78E05996B3573566568D3BD7DBC88EC0DBB89FCFD20C3791D
F212FED324CF0777EBFD9186E58FF0242D94A5C47340E616982C4E54E74330E2
D68AC5B8663318B23E9917C91D84ED11D8A498E9037B93F4241D10D51D1297E5
7E43EDEE7D0AF019908BE05C261DC3127838D1B73624CB4D2C1E98CC74EE7207
939CD3B747887F5BCAE42C> |-
/v <1C60D8A8C9B78E0595D542FBFE75E31BD1B2F14181C73259894018533E2F
9B448F3FCD1B9445697BD7B3C8611A6D2B6180ECDB5062B6AA466D0FAAC579A5
162D654EC16E1AA9CE371180548E3FEEF74EB382087774349FC706E8AE794025
5623195B8D1A175A796AD5AA879BB5> |-
/x <1C60D8A8C9B78E05996B3573566568995105A112EC758F266EB06CA3D030
D24193382A89A5EF5D11E36C2DB4A4D3E11F57036BAB7F8643E2D88760A64A76
20AA8F58DD7AAD84A999CEBD138256AF5276829F5EF2F7EBAE1D157FAE0734E6
C7087C366BC363834BDFEC21C84A88208EC7054A8B9EAC0C20BC1441822D6372
A252B0319D772C186FDD8B3CADAB9A0E90A21E7C08A8467C30BB500007> |-
/y <1C60D8A8C9B78E05E95DE290973D6E363A47F2CED9B1B42B6B0D762D57F5
2FBD58655FD8922D99AA453DD21045F754FFEA2D25D7125E3D7E2AAE2CFF8D51
302B9D7F6E12FC2D0713B7975A8C09CE6D90ECF6E2C336D53FAC96C12F0BB1FC
5944E208C4CD65ED837F7D0DBB7DB32B90CC8E56739588036489AC8F0D82C118
47A9A533C31B5732EE64C2CEC44DC4C3A52323257691B77E20476EC17EC2BE0E
0276> |-
/braceleft <1C60D8A8C9B78E052AEAA9ABD2E13FF67749EE599FD987531EA8
48DB4FE11E0DBD7CA212A5EF0795289850EECAC4A05F45ABDED3E7F21AED644B
BEBB6D31E9629411172FBE7A1A8ACC83444188D3B89E5A49F08D8BB139758BDD
A6AABCEF72B5A75357DD28378CA3BEF0377D2513EEEA91CD7139F4EDDC63EB36
9617405A65E89BC54A626479097FC8DEDEFAB53120DEC433516490EF9F20FEF5
AE> |-
/bar <1C60D8A8C9B78E052A82CD5017F8F1A9AD6962E7DF6422B34CBEF33DED
68F92AC40A43DBD9F59A21A0614EB63393C2611E> |-
/braceright <1C60D8A8C9B78E052AEAA9ABD2E13FF67749EE599FD987531EA
8125678E9E0C06123C4DF7B0240E58F406CE4295BADFD9551D8C070804727220
2CEC724B99F98C0275272EF8183F57BBC948D40E9994805E2180FDD578C78D73
22BE74A10D2F0E2061C7DC8A838F0976A351F0C19F726750AD27C44D59D9C8D6
64E6B828040A035B94B5022362491FF4852B8AEAC79B1DC8676A7> |-
/.notdef <1C60D8A8C9B78E051C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EUCWGY+CMTT10 /QPVAAA+CMTT10 findfont ct_VMDictPut
/EUCWGY+CMTT10*1 
[42{/.notdef}rp /asterisk 2{/.notdef}rp /hyphen 12{/.notdef}rp /colon /semicolon 2{/.notdef}rp 
/greater 28{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef 
/a /.notdef /c /d /e /.notdef /g /.notdef 
/i /j /k /l /m /n /o /p 
/.notdef /r /s /t /u /v /.notdef /x 
/y /.notdef /braceleft /bar /braceright 130{/.notdef}rp]
EUCWGY+CMTT10 nf
EUCWGY+CMTT10*1 [10.7677 0 0 -10.7677 0 0 ]msf
82.4293 406.699 mo
(entity-to-java:)
[5.65297 5.65297 5.65296 5.65297 5.65296 5.65297 5.65297 5.65297 5.65296 5.65297 5.65297 5.65297 
5.65295 11.306 0 ]xsh
93.7348 420.072 mo
(|[entityx_class{prop*}]|->)
[5.65297 11.306 5.65298 5.65296 5.65297 5.65296 5.65297 11.306 5.65297 5.65297 5.65295 5.65297 
5.65298 5.65295 11.306 11.306 5.65297 5.65297 5.65298 5.65295 11.306 11.306 5.65295 11.306 
5.65298 0 ]xsh
93.7348 433.445 mo
(compilation-unit|[)
[5.65297 5.65296 5.65297 5.65297 5.65297 5.65296 5.65297 5.65295 5.65298 5.65295 5.65297 5.65297 
5.65297 5.65295 5.65297 5.65297 5.65298 0 ]xsh
116.347 446.819 mo
(packagedomain;)
[5.65296 5.65297 5.65296 5.65297 5.65297 5.65297 11.306 5.65297 5.65295 5.65298 5.65295 5.65295 
5.65298 0 ]xsh
116.347 460.192 mo
(classx_class{})
[5.65296 5.65297 5.65296 5.65297 11.306 5.65297 5.65297 5.65297 5.65295 5.65298 5.65295 11.306 
11.306 0 ]xsh
93.7348 473.566 mo
(]|)
[5.65297 0 ]xsh
grestore
0.987037 lw
440.724 294.759 mo
798.856 294.759 li
798.856 26.1608 li
440.724 26.1608 li
cp
@
gsave
440.724 294.759 mo
798.856 294.759 li
798.856 26.1608 li
440.724 26.1608 li
cp
clp
440.724 294.759 mo
798.856 294.759 li
798.856 26.1608 li
440.724 26.1608 li
cp
1 gry
f
440.724 53.3714 mo
798.856 53.3714 li
798.856 26.1598 li
440.724 26.1598 li
cp
0.37 0.45 0.66 rgb
f
1 gry
%ADOBeginSubsetFont: QCAAAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWGU+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B08A95C5B0FE9162D1893FDAFF32D067F228F2B9E128B35747
EC344FDC082036AD6C4DDD655DFD196D221252B56B839649643119D53AFDFA91
75660C926BCA0B> |-
/M <1C60D8A8C9B08A9405F8FB94046DE22792E0291ECEF731BF1FD82876DAAB
7D9D5A98639DBB904BB96E48B9A9A1E5B96C4B4CA0C4FC8390D7B3246CFD5CCC
A8F4E44709722BF90808FE563C4E8357BADD0FBDE765E5649A49829BA1871953
39269EC0503CB1CD2B81ABB8A4573674C91D7D> |-
/l <1C60D8A8C9B08A9545AEAF563F384DC2228E48A5DE8F50618834EC6A9283
370543991AB61F41> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWGU+CMSS12 /Encoding get
dup 70 /F put
dup 77 /M put
dup 108 /l put
pop
%ADOEndSubsetFont
/EUCWGU+CMSS12*1 
[67{/.notdef}rp /C 2{/.notdef}rp /F /G 5{/.notdef}rp /M 4{/.notdef}rp 
/R /.notdef /T 12{/.notdef}rp /a /b /.notdef /d 
/e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m 
/n /o 2{/.notdef}rp /r /s /t 2{/.notdef}rp /w 
/.notdef /y 134{/.notdef}rp]
EUCWGU+CMSS12 nf
EUCWGU+CMSS12*1 [14.1602 0 0 -14.1602 0 0 ]msf
449.118 45.9617 mo
(GeneratingManyFiles)
[9.24384 6.16248 7.11273 6.16248 4.71243 6.63696 5.00717 3.26111 7.11273 11.549 12.0292 6.63696 
7.11273 10.9728 7.87463 3.26111 3.26111 6.16248 0 ]xsh
464.755 76.0524 mo
464.755 73.881 466.531 72.1043 468.703 72.1043 cv
770.88 72.1043 li
773.051 72.1043 774.828 73.881 774.828 76.0524 cv
774.828 78.5072 li
464.755 78.5072 li
0.8 0.8 0.8 rgb
f
464.755 272.66 mo
464.755 274.832 466.531 276.608 468.703 276.608 cv
770.88 276.608 li
773.051 276.608 774.828 274.832 774.828 272.66 cv
774.828 75.5546 li
464.755 75.5546 li
f
0 gry
%ADOBeginSubsetFont: QPVAAA+CMTT10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWGY+CMTT10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/quotedbl <1C60D8A8C9B78E05E530D86B11E8F8E8919B500F801E4C58CB07C
4A566081C581ED1A893B304EE86CDA70BC14443186EF89F2395C859EEE87ACD4
97EAF7049DC428F37138A8C663EECF2B38B290D8A1FCB272D30939FEA4992098
D4194F64311F93242DEF5> |-
/parenleft <1C60D8A8C9B78E052B5014696E259DAF8E01306EC808FBA3878A
EF92D1573760E60C70710A3F134D88D4599FA45A43877DD43469242B08854C29
EDF1752F339E4F847AB2D1F18E0723E941FD8F20C4DA4B74F9996E1D5E981DE0
2E> |-
/parenright <1C60D8A8C9B78E052B5014696E259DAF60695224D8A26674B63
4F4F790D26931282B3A802E5C898E9DEC60B1F4853401563174CE9ACB4BA4CDD
171A5F45C36173D2783EC58DE19EDC843D07F0B865FAF9D5B1DF734063AF072F
8D3EC> |-
/comma <1C60D8A8C9B78E05E93A525965CF42FA76BE9C5D94290FC10DB47181
8F0B5FD9CC4457D26119B525930248735A05C44137B725A37B11A9DAEB059785
EBB1D5F62DA0451BFCD61EB5E7> |-
/equal <1C60D8A8C9B78E05E5BB5C458737D5D2D24B61F8D43245245FA8A6AC
6530B6B2B0FCC656CBB8373551B595C18ED0BF60C55F199125FF8200E7224739
AFB76763B9FEB78DD767327992D3BFFC85E530> |-
/F <1C60D8A8C9B78E05996B357C35B6F45A917F98EC9A9B99FE7DB993DBAE4B
9B4C2AF19901B4DCD5A120452D9F672603760997FF7CAFB9E08E90318D760FBF
EC01735B86D188831B9D145CCFA1699D52D65582D0F684B198D45E123C71C99A
61468291590C1282A54D2A49E2A27C46250EEAB49AC9B5CEA1827C2FE167482B
9C71327C2193E039A3> |-
/J <1C60D8A8C9B78E0592363F02952015B6C2ACD9B182B135CD20486B37F14E
D976F10EAFA46FAE461EEF7EC730D4F644D0B25B088195C811873617D7E24300
5A9A4946632E4064B658A9CBAE9E44D81E87A2954CDD81AF66D706A4AC2D2DCE
88E2CE4C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWGY+CMTT10 /Encoding get
dup 34 /quotedbl put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 61 /equal put
dup 70 /F put
dup 74 /J put
pop
%ADOEndSubsetFont
/EUCWGY+CMTT10*1 
[34{/.notdef}rp /quotedbl 5{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen 12{/.notdef}rp /colon /semicolon /.notdef /equal /greater 7{/.notdef}rp 
/F 3{/.notdef}rp /J 16{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef 
/underscore /.notdef /a /.notdef /c /d /e /.notdef 
/g /.notdef /i /j /k /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/.notdef /x /y /.notdef /braceleft /bar /braceright 130{/.notdef}rp]
EUCWGY+CMTT10 nf
EUCWGY+CMTT10*1 [9.83345 0 0 -9.83345 0 0 ]msf
468.703 83.5332 mo
(strategies)
[5.16248 5.16251 5.16251 5.16251 5.16251 5.16251 5.16251 5.16251 5.16248 0 ]xsh
479.028 107.133 mo
(generate=)
[5.16251 5.16251 5.16251 5.16251 5.16248 5.16251 5.16248 10.3251 0 ]xsh
489.353 118.933 mo
(collect\(generate-code\))
[5.16251 5.16251 5.16251 5.16251 5.16251 5.16248 5.16254 5.16248 5.16248 5.16254 5.16248 5.16254 
5.16248 5.16254 5.16248 5.16254 5.16248 5.16248 5.16254 5.16248 5.16254 0 ]xsh
479.028 142.533 mo
(generate-code=)
[5.16251 5.16251 5.16251 5.16251 5.16248 5.16251 5.16248 5.16254 5.16248 5.16254 5.16248 5.16254 
10.325 0 ]xsh
489.353 154.334 mo
(entity-to-java)
[5.16251 5.16251 5.16251 5.16251 5.16251 5.16248 5.16254 5.16248 5.16248 5.16254 5.16248 5.16254 
5.16248 0 ]xsh
468.703 177.934 mo
(rules)
[5.16251 5.16251 5.16251 5.16251 0 ]xsh
479.028 201.534 mo
(entity-to-java:)
[5.16251 5.16251 5.16251 5.16251 5.16248 5.16251 5.16248 5.16254 5.16248 5.16254 5.16248 5.16254 
5.16248 10.3251 0 ]xsh
489.353 213.334 mo
(|[entityx_class{prop*}]|->)
[5.16251 10.3251 5.16251 5.16251 5.16248 5.16254 5.16248 10.3251 5.16248 5.16254 5.16248 5.16254 
5.16248 5.16254 10.325 10.3251 5.16248 5.16254 5.16254 5.16248 10.3251 10.325 5.16254 10.3251 
5.16254 0 ]xsh
489.353 225.135 mo
(JavaFile\(["src"],)
[5.16251 5.16251 5.16251 5.16251 5.16251 5.16248 5.16254 5.16248 5.16248 5.16254 5.16248 5.16254 
5.16248 5.16254 5.16248 5.16254 0 ]xsh
499.678 236.935 mo
(compilation-unit|[)
[5.16251 5.16251 5.16251 5.16248 5.16254 5.16248 5.16254 5.16248 5.16248 5.16254 5.16248 5.16254 
5.16248 5.16254 5.16248 5.16254 5.16248 0 ]xsh
510.003 248.736 mo
(packagedomain;)
[5.16248 5.16254 5.16248 5.16248 5.16254 5.16248 10.3251 5.16254 5.16248 5.16248 5.16254 5.16248 
5.16254 0 ]xsh
510.003 260.536 mo
(classx_class{})
[5.16248 5.16254 5.16248 5.16248 10.3251 5.16254 5.16248 5.16254 5.16248 5.16248 5.16254 10.3251 
10.3251 0 ]xsh
499.678 272.336 mo
(]|\))
[5.16251 5.16251 0 ]xsh
grestore
0.987037 lw
440.724 568.839 mo
798.856 568.839 li
798.856 300.241 li
440.724 300.241 li
cp
@
gsave
440.724 568.839 mo
798.856 568.839 li
798.856 300.241 li
440.724 300.241 li
cp
clp
440.724 568.839 mo
798.856 568.839 li
798.856 300.241 li
440.724 300.241 li
cp
1 gry
f
440.724 327.451 mo
798.856 327.451 li
798.856 300.24 li
440.724 300.24 li
cp
0.37 0.45 0.66 rgb
f
1 gry
%ADOBeginSubsetFont: QCAAAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWGU+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B08A95E0E86DD3D35C1EC96C676F01E9A265048F4C62D89CB1
AC1A0276333355878729FDB5C9C6DAA5F36F803B505C464FC5423FA44CF35AD1
1BB3E5A8B06E8FFC6118> |-
/E <1C60D8A8C9B08A95FF8CEA8AF5E07F07B9209BE8EFE3918064848673946D
453707F617635118BD551F1A18718FF0CD6E4E2D56231D99FEE9BD6AEF0D1531
E5D3FE59D28598C719248EB56EE27A52CDE518DB034463> |-
/J <1C60D8A8C9B08A95AFB3D89C20814F5C5EC33D858595D684FB3024C18F5F
A71160297AF7A23B1ECB5AFEBFB1F39998393354916926DE33979240A9F34A4B
6877> |-
/P <1C60D8A8C9B08A95EF574D27FCC3E4AD1365BD5458B3224CAE7D4D30D1E3
EB6B11C3CE9A4834AB4372A104C04DF3EB9EE9A78CCA7B9CE238EE9BB6BF1422
757359E92A20AB7B9AAFF34B633A923A87B89D4534A0F930> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWGU+CMSS12 /Encoding get
dup 65 /A put
dup 69 /E put
dup 74 /J put
dup 80 /P put
pop
%ADOEndSubsetFont
/EUCWGU+CMSS12*1 
[65{/.notdef}rp /A /.notdef /C /.notdef /E /F /G 
2{/.notdef}rp /J 2{/.notdef}rp /M 2{/.notdef}rp /P /.notdef /R 
/.notdef /T 12{/.notdef}rp /a /b /.notdef /d /e 
/.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n 
/o 2{/.notdef}rp /r /s /t 2{/.notdef}rp /w /.notdef 
/y 134{/.notdef}rp]
EUCWGU+CMSS12 nf
EUCWGU+CMSS12*1 [14.1602 0 0 -14.1602 0 0 ]msf
449.118 320.042 mo
(GeneratingJPAEntityClasses)
[9.24384 6.16248 7.11273 6.16248 4.71243 6.63696 5.00714 3.26111 7.11276 11.549 6.50665 7.67059 
13.7779 8.25964 7.11273 5.0072 3.26111 4.62482 10.9587 8.85858 3.26111 6.63696 5.31439 5.31439 
6.16248 0 ]xsh
464.755 382.627 mo
464.755 380.455 466.531 378.679 468.703 378.679 cv
770.88 378.679 li
773.051 378.679 774.828 380.455 774.828 382.627 cv
774.828 385.082 li
464.755 385.082 li
0.8 0.8 0.8 rgb
f
464.755 497.999 mo
464.755 500.17 466.531 501.947 468.703 501.947 cv
770.88 501.947 li
773.051 501.947 774.828 500.17 774.828 497.999 cv
774.828 382.129 li
464.755 382.129 li
f
0 gry
%ADOBeginSubsetFont: QPVAAA+CMTT10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWGY+CMTT10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/less <1C60D8A8C9B78E05D16BFA5443B384F9B043E4C5336213D4E8CA17C5C
3E0B135D5B63742DA49D2DF9EC6E456ED9A00E4FAF01EB64BD0A54C27472D8D6
893FCDEDCE8E13D8B69B5F0C7EC52496A763FE44A5CFFE42101B17FD02D03E0D
E> |-
/at <1C60D8A8C9B78E0597CED294D25EE862CFA4E0EC5AE2628642410B8F119
B2938A7218616E56327357DDACA2C165E601E78A2929E9AEDDA60F9F651D8999
64C50A8676C06A82E3003EFFDEA88EF5B832DFCD5FBD9F50DD9C83E2207E1089
87B92E1E1FE67130C5EB68A53D6E01E156D535AB007914076585392025C84FED
B961B937BC525BFA843218C34388BC2FE253BBAA90C2CBE15B3C762803DD4AAE
853A0> |-
/E <1C60D8A8C9B78E05996B357C2047C8C14A6A62BF0B05451D791E7298B0C3
22F66CD90BF5D5810343B7B20C9D067C3DA3FD38AC1BF57253BC77BA5B1063D6
AB2792B636C752C9505EEC9AB4E8031C7777CD033F07ACBC6382AFD4530F871B
CC0A1DD3737D0BBA5F9FEB3AAEA5AB713F2B18F8E8CE57A24D9B0CF1898F2319
726D9A2EFF30FDD3350B8B405EA23B1BDDC7EBEAEE8DE99ADF9A6AC04FFD060C
C0ABF570586630C580> |-
/b <1C60D8A8C9B78E059903569426DC47841EF13EDA8E7E885315FCEA455013
A9670C154405DD4FF07FA68FEB4C6D786E5FA9AFB2C1B8F3A4203E43E7DB32A4
6F7EB59A7EFFCF3878B38D796B5FC4814468B2D396BA38E3869C2F5EF746D021
7CEC838A6FDD92AA526F078326636FA822663FE759F7805898E37E5DC05D8D35
286F47ADBCE0A8A93471FBD6EA3194> |-
/f <1C60D8A8C9B78E05996B3573566568C70013FB7E9A96778514DA8740D04B
86854D927C9710A080F220DE323923CD3CCEEAB89F62D937FD7F0B2566CE1AED
BDE8E58083ADFD032B5EA25E5D2D781DE1BD9A2FD02E6B123F0684610E8E1490
537970809147F5AC62FBA2314421BCEE470DD2B6304305AFE390A732D6> |-
/h <1C60D8A8C9B78E05996B35735C4B10FF1E7638F665AE91E3A7AF8201D1AC
3AB04A180E34E965C0530ECE103A40EABA18BE6A1DCB4BE1B404E87AFDD258E6
7C2DDA55F8A7832BB41393C709F8D388D515C51F4A949385C9583C498D04281B
C9AE18769703983D7C868B7B495ADE857058B2A5F913115575D7CEE5364C6751
3BEBCAA5EDE66B27251EC9D43A56> |-
/w <1C60D8A8C9B78E0595CA656E950ED4CDC0A13C58FF0D941F94F6B78AE8A5
B0383DA8C81E40C30CEF391EACED34FF28716E01C96DF090D41AED571CFD9F74
9F7DBF260D681565180405D0F4ABECAC7964D5B5128FFF1FD66164172DD537FF
40587512A5B2D030903A094725E6391272C2EB5161B590F4028489B83561EE5E
5EEB8D8C1D8F70CDF21493C7F54B31ABE1EF87F98AB6F75FEB59D2078D8FC30B
7D4A0729D4D050C25B47CF33> |-
/asciitilde <1C60D8A8C9B78E05EA8B2BF1AC0199A35B034CA4946D7E6E14F
961DC1E4DEB986552BBBFB8C5DDAEF69AE85B3AA043F37C436E3A641C42BD4BB
8AA52576B1034B67DD4A523BA82634668B2B0D89101C669ECA26857925CB2BD8
E67FA19F6297FC695EBFEEE5D1DF3B959212CB0A0F9E9B79F2057F03A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWGY+CMTT10 /Encoding get
dup 60 /less put
dup 64 /at put
dup 69 /E put
dup 98 /b put
dup 102 /f put
dup 104 /h put
dup 119 /w put
dup 126 /asciitilde put
pop
%ADOEndSubsetFont
/EUCWGY+CMTT10*1 
[34{/.notdef}rp /quotedbl 5{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen 12{/.notdef}rp /colon /semicolon /less /equal /greater /.notdef 
/at 4{/.notdef}rp /E /F 3{/.notdef}rp /J 16{/.notdef}rp /bracketleft 
/.notdef /bracketright /.notdef /underscore /.notdef /a /b /c 
/d /e /f /g /h /i /j /k 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /w /x /y /.notdef /braceleft 
/bar /braceright /asciitilde 129{/.notdef}rp]
EUCWGY+CMTT10 nf
EUCWGY+CMTT10*1 [9.83345 0 0 -9.83345 0 0 ]msf
479.028 390.108 mo
(entity-to-java:)
[5.16251 5.16251 5.16248 5.16251 5.16251 5.16251 5.16248 5.16254 5.16248 5.16248 5.16254 5.16248 
5.16254 10.3251 0 ]xsh
489.353 401.908 mo
(|[entityx_class{prop*}]|->)
[5.16251 10.3251 5.16251 5.16245 5.16254 5.16248 5.16254 10.3251 5.16248 5.16254 5.16248 5.16248 
5.16254 5.16248 10.3251 10.3251 5.16248 5.16254 5.16248 5.16254 10.325 10.3251 5.16254 10.325 
5.16254 0 ]xsh
489.353 413.708 mo
(JavaFile\(["src"],)
[5.16251 5.16251 5.16251 5.16251 5.16245 5.16254 5.16248 5.16254 5.16248 5.16254 5.16248 5.16254 
5.16248 5.16248 5.16254 5.16248 0 ]xsh
499.678 425.508 mo
(compilation-unit|[)
[5.16251 5.16251 5.16251 5.16248 5.16248 5.16254 5.16248 5.16254 5.16248 5.16254 5.16248 5.16254 
5.16248 5.16248 5.16254 5.16248 5.16254 0 ]xsh
510.003 437.308 mo
(packagedomain;)
[5.16248 5.16248 5.16254 5.16248 5.16254 5.16248 10.3251 5.16248 5.16254 5.16248 5.16254 5.16248 
5.16254 0 ]xsh
510.003 449.108 mo
(@Entityclassx_class{)
[5.16248 5.16248 5.16254 5.16248 5.16254 5.16248 10.3251 5.16248 5.16254 5.16248 5.16254 10.3251 
5.16248 5.16254 5.16248 5.16248 5.16254 5.16248 10.3251 0 ]xsh
520.329 460.909 mo
(~*cbd*)
[5.16248 5.16254 5.16248 5.16248 5.16254 0 ]xsh
504.841 472.709 mo
(})sh
499.679 484.509 mo
(]|\))
[5.16251 5.16251 0 ]xsh
489.353 496.309 mo
(wherecbd*:=<filter\(property-to-java\);concat>prop*)
[5.16251 5.16251 5.16248 5.16251 10.3251 5.16248 5.16254 5.16248 10.3251 5.16248 10.3251 5.16254 
5.16248 5.16254 5.16248 5.16248 5.16254 5.16248 5.16254 5.16248 5.16254 5.16248 5.16254 5.16248 
5.16248 5.16254 5.16248 5.16254 5.16248 5.16254 5.16248 5.16254 5.16248 5.16248 5.16254 5.16248 
10.3251 5.16248 5.16254 5.16248 5.16254 5.16248 5.16254 10.3251 5.16248 5.16248 5.16248 5.16254 
0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/1 ]]
] del_res
/EUCWGY+CMTT10*1 uf
/EUCWGY+CMTT10 uf
/QPVAAA+CMTT10 uf
/EUCWGV+CMSS10*1 uf
/EUCWGV+CMSS10 uf
/FLDBAA+CMSS10 uf
/EUCWGX+CMTT8*1 uf
/EUCWGX+CMTT8 uf
/CRNAAA+CMTT8 uf
/EUCWGW+CMSS8*1 uf
/EUCWGW+CMSS8 uf
/QHLBAA+CMSS8 uf
/EUCWGU+CMSS12*1 uf
/EUCWGU+CMSS12 uf
/QCAAAA+CMSS12 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Page: 5 2
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (5)]
[/TrimBox [12 12 830 583]]
[/BleedBox [12 12 830 583]]
[/ArtBox [12 12 830 583 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -595 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
12 12 mo
12 583 li
830 583 li
830 12 li
cp
clp
[1 0 0 1 0 0 ]ct
0.987037 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
43.1442 294.759 mo
401.276 294.759 li
401.276 26.1608 li
43.1442 26.1608 li
cp
false sop
/2 
[/DeviceGray] /CSA add_res
0 gry
@
gsave
43.1442 294.759 mo
401.276 294.759 li
401.276 26.1608 li
43.1442 26.1608 li
cp
clp
43.1442 294.759 mo
401.276 294.759 li
401.276 26.1608 li
43.1442 26.1608 li
cp
1 gry
f
43.1442 53.3714 mo
401.276 53.3714 li
401.276 26.1598 li
43.1442 26.1598 li
cp
0.37 0.45 0.66 rgb
f
1 gry
%ADOBeginSubsetFont: QCAAAA+CMSS12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /QCAAAA+CMSS12 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 71 /G put
dup 83 /S put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
def
/UniqueID 5000804 def
/FontBBox {-62 -251 978 758} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 694 715 444 459 655 676] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [60] def
/StdVW [76] def
/StemSnapH [54 60] def
/StemSnapV [76 86] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/G <1C60D8A8C9B08A95E212C7DBD64D5D9359FC535766FB3035885556542383
EFD66BB095A1A6B2EAB35EFA47B031781A3F3237691CD01D02562CB835E6B254
75BBDD75014DD6BC0ACE4AD1B740DA3BC7077DB84A6F1EC808C39543CFCF581B
8F92B848B947BE1868042A666052A2C714132292A5> |-
/S <1C60D8A8C9B08A95C885DB2659C88FD2DAC972C2503A689198AB4B3225B9
68E80B5EB73D3555758A317DCA71AB6822D6E0E00C9BA3020784B5001D40D821
0AD9B6DFB6B325A7C59892E21AA643952EF18B033FC4D33190A9728EC706283A
5B6987C8EA9A1BF44811A78B7154E81D19762911D2F1D749A78F890FF2BF985D
E8593A7E53226F6EADEC08C071CD0D95051494> |-
/a <1C60D8A8C9B08A95AB8DC622FEBB6EFF06B75EF6258DE24B779154260802
09CB95D8B91CC3B7736DBF97AE14274E0B6510D496F67062BFCE0BB9CBACBE35
5F30492B158AC74EB9B3916A328DFB0878E37507C5BCF3AAC286368133DFF49E
5BFBAE5B0F32B9FF9A26081328FEE6F2CD893A23BE17B2365CDBE122DD403C74
5D10> |-
/d <1C60D8A8C9B08A95D8E840BC3BFE7FD1EFEA271B3268EA0D05517066D38D
ABBDEC65403CE063C0EA82DFE6D2FDF5BA1BBD31046A4120919C9B005E02E215
E02C7060E04810197A4EE37E54B068AAD7A07D32D37F6835A705F045AD78BB47
E46188A54523911A939C12> |-
/e <1C60D8A8C9B08A95B5589A17E299A839B353761A5754405332DB751515E1
39F49B25FCC8C9DC8E3EBCFAC169ACB1889E709DBE3BE8BCDEBEDBEBD2E7A5D0
CB9FE062E3F18084EF219DED1EBBC816BE1DD940708D3FE9C79213BBC3FE62C8
E2F15DD9B8C87592CA19D102E03E0A3373B50DE6098AFA0A314B> |-
/g <1C60D8A8C9B08A95A31CD7D9F217DCBA037270857DAD016AE51D4410EDA7
45973C28E7621269D37937188B9E68E34ABB0C5A72A609A7299E87271E0ABC47
74D2D8CA31B2F58929BF44FC33854896D645F525702BCAE3049461EC5EA86184
8D66C047EE767AFCC6820558E167DC40532C5DDE3262AC3BB210DF2141A8CEBC
ACB9EA2A8EB81F3BF88D4F1FEBADE5FFBEAD886E960B95B0782E81B113A22DAB
655E030E15B75690C59979ACBB3A059B891FCA8CA0AFA0465ECDFA78D870A66B
1E466F09AC80AAA22E127934C645FC14C636848474C7B8A5AC887BDA510F3EC1> |-
/i <1C60D8A8C9B08A9545AEAF563F384DC2228F717BF90667A52C65A5379193
AB133511F7507802DAB6A8197D0254965D7A9693EB947D> |-
/n <1C60D8A8C9B08A95D8E840BC3BFE75A638CC60EDE4E32C5F043D10AD74DF
9A133AEBB7526F4D0EE19DBCFB2DC1F38B66C5E23BE4CADA86F303D1868E0D3A
764094313DE70340C27818A6A5> |-
/r <1C60D8A8C9B08A959DB77AE556B1923D6116776B12D082BADF5DB74D347F
28D8BBC405A19BD03F9240EAD5B4D10CE1E88EA4C23A53669629> |-
/s <1C60D8A8C9B08A958EAD96EA79E68C696421123C465FF383548823BEE6B0
B1D796EE93EACCAD38184BB40BAED6DACF889E709F6F51268598C5D52183041A
A0B4C8546EC8349093BF0AB0DF900BCCE0E2AD7F1DB19B2D0F599C1A61450945
CB48796545EDE5A4E5DCA108E4149E28953DC631CBB95409F3A88083E00999BE
E6A5BBBA70> |-
/t <1C60D8A8C9B08A9596B916DE68D8C5084A09F6F7CC28E2D467F61B3C384E
4CBB2539885E158BDFC5A71AC496C670DE10727BF0A213AE26DFAC2C451BE67B
4AF66EC8C9F901DC42C63A8759911A0BB39EBAAE3E8151438D> |-
/.notdef <1C60D8A8C9B08A9563F93DCB7939BC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EUCWGZ+CMSS12 /QCAAAA+CMSS12 findfont ct_VMDictPut
/EUCWGZ+CMSS12*1 
[71{/.notdef}rp /G 11{/.notdef}rp /S 13{/.notdef}rp /a 2{/.notdef}rp /d 
/e /.notdef /g /.notdef /i 4{/.notdef}rp /n 3{/.notdef}rp 
/r /s /t 139{/.notdef}rp]
EUCWGZ+CMSS12 nf
EUCWGZ+CMSS12*1 [14.1602 0 0 -14.1602 0 0 ]msf
51.538 45.9617 mo
(GeneratingSettersandGetters)
[9.24382 6.16247 7.11274 6.16248 4.71244 6.63696 5.00716 3.26111 7.11274 11.549 7.70326 6.16246 
5.00716 5.00716 6.16248 4.71245 9.94481 6.63695 7.11275 11.729 9.24382 6.16248 5.00716 5.00717 
6.16246 4.71245 0 ]xsh
67.1745 84.9457 mo
67.1745 82.7742 68.9512 80.9975 71.1227 80.9975 cv
373.3 80.9975 li
375.471 80.9975 377.248 82.7742 377.248 84.9457 cv
377.248 87.4004 li
67.1745 87.4004 li
0.8 0.8 0.8 rgb
f
67.1745 259.32 mo
67.1745 261.491 68.9512 263.268 71.1227 263.268 cv
373.3 263.268 li
375.471 263.268 377.248 261.491 377.248 259.32 cv
377.248 84.4487 li
67.1745 84.4487 li
f
0 gry
%ADOBeginSubsetFont: QPVAAA+CMTT10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /QPVAAA+CMTT10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 34 /quotedbl put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 44 /comma put
dup 45 /hyphen put
dup 58 /colon put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 83 /S put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 95 /underscore put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 123 /braceleft put
dup 124 /bar put
dup 125 /braceright put
def
/UniqueID 5000832 def
/FontBBox {-4 -235 731 800} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 0 611 622 431 440] def
/OtherBlues [-229 -222] def
/BlueScale 0.04796 def
/StdHW [61] def
/StdVW [69] def
/StemSnapH [61] def
/StemSnapV [69] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
41 dict dup begin
/quotedbl <1C60D8A8C9B78E05E530D86B11E8F8E8919B500F801E4C58CB07C
4A566081C581ED1A893B304EE86CDA70BC14443186EF89F2395C859EEE87ACD4
97EAF7049DC428F37138A8C663EECF2B38B290D8A1FCB272D30939FEA4992098
D4194F64311F93242DEF5> |-
/parenleft <1C60D8A8C9B78E052B5014696E259DAF8E01306EC808FBA3878A
EF92D1573760E60C70710A3F134D88D4599FA45A43877DD43469242B08854C29
EDF1752F339E4F847AB2D1F18E0723E941FD8F20C4DA4B74F9996E1D5E981DE0
2E> |-
/parenright <1C60D8A8C9B78E052B5014696E259DAF60695224D8A26674B63
4F4F790D26931282B3A802E5C898E9DEC60B1F4853401563174CE9ACB4BA4CDD
171A5F45C36173D2783EC58DE19EDC843D07F0B865FAF9D5B1DF734063AF072F
8D3EC> |-
/asterisk <1C60D8A8C9B78E05F7CF88ECD8CC4B521887C06B204735CA10A79
44DD36AA1ACADFC8A9317D68354E6A5420BD391B6911BBBDB4D6F81FED1A3AB1
2DEDC13899C0813120F3A366275DDDD9C1222EB526932FA2664C138809C156B9
D54B62C7FBD1DE592C63BA23249A34674A4010EA58A8F2C0B921C1E44E2CD9D2
E4BF81492AFBA97C7B3A981496D1475FB1B90EB9C14AE8DE5D9D60144FFC6005
7111024659F0636ADB1B311DAEF03FA> |-
/comma <1C60D8A8C9B78E05E93A525965CF42FA76BE9C5D94290FC10DB47181
8F0B5FD9CC4457D26119B525930248735A05C44137B725A37B11A9DAEB059785
EBB1D5F62DA0451BFCD61EB5E7> |-
/hyphen <1C60D8A8C9B78E05E54FA6CA76B469E10285D91611F71C88A7F3A61
2E901BCFEBC39901E5969C6496709215DE972> |-
/colon <1C60D8A8C9B78E059954B91DD6211CE740A7B82F48C8E422101B33F5
E48BD43B9F01F5930F7348958A8F4536B7387509A9698D663A4DAAD82D2461AE
1FE2F18FB68C69FCFF18012B0C> |-
/semicolon <1C60D8A8C9B78E05E93A525965CF42FA76D6466EEB83F7CABEBF
2D2A61851D832E8608F9E64F70E2B0E02773B2CD03F3CBE06B7D0BE9240344DF
A2336F494AC944EEE0A0686722BC5015233E96F60C95069AD143B48F4B462615
3E16CA2E02922BC1> |-
/less <1C60D8A8C9B78E05D16BFA5443B384F9B043E4C5336213D4E8CA17C5C
3E0B135D5B63742DA49D2DF9EC6E456ED9A00E4FAF01EB64BD0A54C27472D8D6
893FCDEDCE8E13D8B69B5F0C7EC52496A763FE44A5CFFE42101B17FD02D03E0D
E> |-
/equal <1C60D8A8C9B78E05E5BB5C458737D5D2D24B61F8D43245245FA8A6AC
6530B6B2B0FCC656CBB8373551B595C18ED0BF60C55F199125FF8200E7224739
AFB76763B9FEB78DD767327992D3BFFC85E530> |-
/greater <1C60D8A8C9B78E05D16BFA5443B384F9B043E4C5310A98676249C5
8B0C27F610ED2913C4EA6AED43A2ABED423DC419306EE27FAB42C2B3AB59537F
8F1ACA3F308C4D0382D51B8176AE6A54873F1CDE1C21F2BF122493FD5DA5ABC3
580D> |-
/S <1C60D8A8C9B78E0592363F02EABA8632585316089E86CAF689E5DE6136C4
AB1370C037442E420DE8FB919F40445DF68836E524046F295CA0A702BD5719F2
F21DB1AF41487EF9830DE10073168AD879633729E75BBD930A03DF806ACF7FDF
8EBCD6E59156975D808776ACDD05D48EE4BE919E3A0A5FBB0C705A00BC903024
F2F4D468DB13C03E65AA2B5DBC08ED97856C33A4CBF48778438F565631796F17
DF9F9AB032CE44E7419F4249973D02263419C07CD56D54A54C71557F98AC0425
A5D56C21B023A5276E9CEE0C> |-
/bracketleft <1C60D8A8C9B78E052AEAA9A593768B15FFD788D3D7E1905BBD
4EED1E00FA6EC2F77BF09AEFB342DFDEB6AA9C18C144877AF0831574EC612A62
23C5AFC25B6029D6528AF0581717> |-
/bracketright <1C60D8A8C9B78E052AEAA9A593768B15F03FEC67971B74369
11DED884DEC3124638157144FC2A2E30CC9215269E50536B11C6AE7D3255DE92
485F22252F3368E5509B6EBE5E2A7> |-
/underscore <1C60D8A8C9B78E053E9390BB6B7A46D951B846302098EA4EC50
C0C60B903348822F84AF2E8FD681C754D1FD3> |-
/a <1C60D8A8C9B78E05996B357CFC3D6A68429CE44210300ADBF33D3BA65564
22DB30AA2C2DE7C9116C427A19DC90F7A98606BDBFB27DF4235F2AAAEBA26184
E5C8D38867C076F8FDD8600853EA72DC9D3F2800940687EC72A6F334200BA15B
ADC95674191868FBF18D675A9DF803EE70B50222D29881504A1059B3AFD24FEF
30B48C4F1746ADB09F7A9701B6D22B65D1EEEC5210E72A1090FCFC77ADC9FE9D
0DCBF3CF0D355063BE501BF4AD72162F8BF2> |-
/b <1C60D8A8C9B78E059903569426DC47841EF13EDA8E7E885315FCEA455013
A9670C154405DD4FF07FA68FEB4C6D786E5FA9AFB2C1B8F3A4203E43E7DB32A4
6F7EB59A7EFFCF3878B38D796B5FC4814468B2D396BA38E3869C2F5EF746D021
7CEC838A6FDD92AA526F078326636FA822663FE759F7805898E37E5DC05D8D35
286F47ADBCE0A8A93471FBD6EA3194> |-
/c <1C60D8A8C9B78E0597CED2992C40EF0933D2EB4E9751CE6D26C4230365A0
1A77D6560F9665D142AC6129BE55DB79B05CBF5497F12914BB4720E37487DE2D
C750A4E03E76022EAF5BAC6844F7A9B88979942D3D8CB528AD7DB48ACEAE040A
6F2C3348862BFCF3> |-
/d <1C60D8A8C9B78E05996B35735C4B10FF1E7638B59B00B7AFF75E25A2A92C
841F6391917CE6AACD0C2A5249A68F1C767AB0D887F0980FF4031D18C0AB3FDE
D4CD2E16FEF143C1F0FD8035C390F0DD7806572B84D99BCA72CB562C352DBDAD
A0E1A764EBD9E0616EF3C6E8FF7E9E2049F8B1F19FBB4EBD3968D3C295E3CF8E
79D70A00B6014870A793520EB0C590C01F483B972AF483> |-
/e <1C60D8A8C9B78E0597CED296E4DF68F57D691EB40490BC0E3694A5AD16EF
8A4C42509F5EC82DED1ADE3F99EFB62E9AEDC7EDD5864ED4AD854BBBC30F02BB
3445BE2D343398E4E410DA907E4AF891E988EBF702755D737A3F1D7180EE892E
12328CBC80382D1CE834408AB8F4B8> |-
/g <1C60D8A8C9B78E05E95C9BB68C365D5EE5F2A501E8A3C0639ACE817E7678
3445DDF0A7B004D3C6BD5BB837E5166614ECC13D5921A09D73BB6DD34E83DE1B
2453736F6FBD255BB670255CF305C0FC1DC5320132AC7F5BCF83CE909D3E0421
D6120CA81BED29F616D0E3A97CDEF99541CA25403051723F6D5B70FC81935874
F8CFBA7353DBD9D849B38B557C2613C6068EF4194AB586736167506A03AC9149
644EDCFFAFBFA949C2A4C984690301B9460DA63FFDA91DA54D011FE98924800E
9AD57D76E45531EFFF5FEBF7636F3F5B3B3023047A10BD8CDFEBD53DBE980143
FD25CFE8D7C192824866DE36E61F0077A26CE06FA16110672EB390109A6D609B
B92B7775F6DFAEC48077AA8DCEF02AA40C90A54DF8> |-
/h <1C60D8A8C9B78E05996B35735C4B10FF1E7638F665AE91E3A7AF8201D1AC
3AB04A180E34E965C0530ECE103A40EABA18BE6A1DCB4BE1B404E87AFDD258E6
7C2DDA55F8A7832BB41393C709F8D388D515C51F4A949385C9583C498D04281B
C9AE18769703983D7C868B7B495ADE857058B2A5F913115575D7CEE5364C6751
3BEBCAA5EDE66B27251EC9D43A56> |-
/i <1C60D8A8C9B78E05996B3573566568C75479E22564A3834F3FF0CB347574
CC2A502F85F740F591300E69B039D730185D703A65E03A7AE8A5896360C52193
422D46DCA3858C85C7D3735F0189AE0EC4B26122B3CC5C6F5305A44DCAC7D12D
B652EFBBCAE7FA1BC7AD5F1A111355C1CBFB8911D5457DF2D53DF380C7> |-
/j <1C60D8A8C9B78E05E95DE290973D6E3674FD41050C9E7D0273D33E7699F2
FB9B5536B33664BF450FAC4C4F7DBAEFDD64238BE8BBF8705C94D41864D5BAE4
E3DBB0078E2B6E2BB0632B2AC43E39B59AE162F8F427A40CDDB7A8F8C6BD486F
F93D11512FCE1804C8F7767DDB46DAC923CC69CE1315428707B94A99F2F3C382
6FD38B8F3556856FDB7040ACFF1D7E547782B4B6DB4D57D6DDB03D> |-
/l <1C60D8A8C9B78E05996B3573EACCBDF587501E2E2A7DAB07F1EC7DA6B38D
A835EA10078B9E2B100F85897D223789968CA4EAC10C4518C8484F6D351A45C2
631D45E58DD2D017C08AC6FE6E789829FF> |-
/m <1C60D8A8C9B78E05D25A17E5A4A5A7AB9B248182E40ADAD3A5056924F15E
E3318FE5DD6B0DE35F3D77359CFA565CD5AF9FE6D4C00699E6A9502B038A8D31
AEFCBBCE1F0C13F3065647910063AA77618C3CE8B289E5A8461C67D6CB4AA452
4937BE04A9D613992D94DA0EEFEDCFE8DA27FF7B00D827E72C2A6683FA50AE59
FFD07DCBF91D6EB63382226508DB4BCFF556FF0656E76E4EB72BEA64F4C8968F
F0CAA1D648E1BA8E402023C43D9764C3AF0F12F90B412AE5F21C000DA5A011AE
492071E1F0B68AB7E18889> |-
/n <1C60D8A8C9B78E05996B3573566568D3BD7DBC88EC0DBB494335B1E5E2B7
545BF5C126FAD117D4185F678CBDBB86A3D5BF7A1FC96E952495142FC1403365
3DC2225A5B237F6F93C2AB3A660518B2D756CB3253126D6E9E75DC70BD3EABEF
FBE1F4DCC612E90D6C3F42A291FC34C6A59A26A0FAEA5C060CBCF99AA0FD3CFE
C907624115BA8AEF49BE1FD04968360B30D105FA904CA39A0D7F> |-
/o <1C60D8A8C9B78E0597CED2992C40EF191A4C45874D1ADBEC70B4332BD16F
C6E72E6C0814914F733B15187F2AE02ECDDAAD323B8CE54E5890D7A8B16ADA89
C162996B3F0E21E0F239A7E5BD13615A4D755DB24A> |-
/p <1C60D8A8C9B78E05E9579C8066B5A1A06B36B7FF66195215C79244992D77
B97EFBEA0A8D05A6CA95BB13E70354726AE8C05FABCDDE3F7B30CB6672B8B8A3
301542E48301FFDEAE69AFD0B49FEA49CBD0CA48EE7014446B9B4ED70741C91C
2C1D2C9254171ABA5A747575563C7A28538E954047A3BBAECB0D48226D3CC60A
10275408D602711ED86FED017A11D96C70DEF32508C2E3F127F50D> |-
/r <1C60D8A8C9B78E05996B35735C4B10F0A68C733837FFC46D15E711585D69
409D476B4E1B79D899A1EBE7F07D42FC0D7F3AF51B20EA4BE96332191606B9F9
30E6A59EE195CD4F0E430523A60FA98B36B2D8D170EE2CB19C9F94E68C957715
7726B0DF61D35FB969298349003E15248E2E23535954CBD18C62CEB28D8079F7> |-
/s <1C60D8A8C9B78E0597CED2992C40EF0E23ED992D0847EBD4D7A32405CA34
8BE21E2815FE9E3B4F6CE7DE8ED79CBFF6780D984520D4E47AFC689725072389
774DDC786F016BFD014DEFD2D215C8F3AE1E706DA78EBC69748F186A9961B36E
72753BE06922009C0C56DA25E5958E9D5F9FCB985581D87937C60A27317D1C79
3A386C4DBD7CAA3075189E1D814800E18C62454A70859C018D7795D755A68960
0B8BC77ED035A4776C85B9D6A70EB62E3E37E5723F2E6B9267> |-
/t <1C60D8A8C9B78E0597CED299252BC7B05D988F4F7EE667DF4F850255BD28
5E9BDB6F1D9734666CE6E99228B4903C845663259737533F426C749652248BD5
8E77C356FC8FFF7AAAF4F3EDBBF4F304000495C28895CB8E17AE8F20B0D8171A
FE2F325DCA0172B98285FEDEFC5314F65074B9> |-
/u <1C60D8A8C9B78E05996B3573566568D3BD7DBC88EC0DBB89FCFD20C3791D
F212FED324CF0777EBFD9186E58FF0242D94A5C47340E616982C4E54E74330E2
D68AC5B8663318B23E9917C91D84ED11D8A498E9037B93F4241D10D51D1297E5
7E43EDEE7D0AF019908BE05C261DC3127838D1B73624CB4D2C1E98CC74EE7207
939CD3B747887F5BCAE42C> |-
/v <1C60D8A8C9B78E0595D542FBFE75E31BD1B2F14181C73259894018533E2F
9B448F3FCD1B9445697BD7B3C8611A6D2B6180ECDB5062B6AA466D0FAAC579A5
162D654EC16E1AA9CE371180548E3FEEF74EB382087774349FC706E8AE794025
5623195B8D1A175A796AD5AA879BB5> |-
/w <1C60D8A8C9B78E0595CA656E950ED4CDC0A13C58FF0D941F94F6B78AE8A5
B0383DA8C81E40C30CEF391EACED34FF28716E01C96DF090D41AED571CFD9F74
9F7DBF260D681565180405D0F4ABECAC7964D5B5128FFF1FD66164172DD537FF
40587512A5B2D030903A094725E6391272C2EB5161B590F4028489B83561EE5E
5EEB8D8C1D8F70CDF21493C7F54B31ABE1EF87F98AB6F75FEB59D2078D8FC30B
7D4A0729D4D050C25B47CF33> |-
/x <1C60D8A8C9B78E05996B3573566568995105A112EC758F266EB06CA3D030
D24193382A89A5EF5D11E36C2DB4A4D3E11F57036BAB7F8643E2D88760A64A76
20AA8F58DD7AAD84A999CEBD138256AF5276829F5EF2F7EBAE1D157FAE0734E6
C7087C366BC363834BDFEC21C84A88208EC7054A8B9EAC0C20BC1441822D6372
A252B0319D772C186FDD8B3CADAB9A0E90A21E7C08A8467C30BB500007> |-
/y <1C60D8A8C9B78E05E95DE290973D6E363A47F2CED9B1B42B6B0D762D57F5
2FBD58655FD8922D99AA453DD21045F754FFEA2D25D7125E3D7E2AAE2CFF8D51
302B9D7F6E12FC2D0713B7975A8C09CE6D90ECF6E2C336D53FAC96C12F0BB1FC
5944E208C4CD65ED837F7D0DBB7DB32B90CC8E56739588036489AC8F0D82C118
47A9A533C31B5732EE64C2CEC44DC4C3A52323257691B77E20476EC17EC2BE0E
0276> |-
/braceleft <1C60D8A8C9B78E052AEAA9ABD2E13FF67749EE599FD987531EA8
48DB4FE11E0DBD7CA212A5EF0795289850EECAC4A05F45ABDED3E7F21AED644B
BEBB6D31E9629411172FBE7A1A8ACC83444188D3B89E5A49F08D8BB139758BDD
A6AABCEF72B5A75357DD28378CA3BEF0377D2513EEEA91CD7139F4EDDC63EB36
9617405A65E89BC54A626479097FC8DEDEFAB53120DEC433516490EF9F20FEF5
AE> |-
/bar <1C60D8A8C9B78E052A82CD5017F8F1A9AD6962E7DF6422B34CBEF33DED
68F92AC40A43DBD9F59A21A0614EB63393C2611E> |-
/braceright <1C60D8A8C9B78E052AEAA9ABD2E13FF67749EE599FD987531EA
8125678E9E0C06123C4DF7B0240E58F406CE4295BADFD9551D8C070804727220
2CEC724B99F98C0275272EF8183F57BBC948D40E9994805E2180FDD578C78D73
22BE74A10D2F0E2061C7DC8A838F0976A351F0C19F726750AD27C44D59D9C8D6
64E6B828040A035B94B5022362491FF4852B8AEAC79B1DC8676A7> |-
/.notdef <1C60D8A8C9B78E051C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EUCWHA+CMTT10 /QPVAAA+CMTT10 findfont ct_VMDictPut
/EUCWHA+CMTT10*1 
[34{/.notdef}rp /quotedbl 5{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen 12{/.notdef}rp /colon /semicolon /less /equal /greater 20{/.notdef}rp 
/S 7{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef 
/a /b /c /d /e /.notdef /g /h 
/i /j /.notdef /l /m /n /o /p 
/.notdef /r /s /t /u /v /w /x 
/y /.notdef /braceleft /bar /braceright 130{/.notdef}rp]
EUCWHA+CMTT10 nf
EUCWHA+CMTT10*1 [9.83345 0 0 -9.83345 0 0 ]msf
81.4481 92.4264 mo
(property-to-java:)
[5.16251 5.1625 5.16251 5.16251 5.1625 5.16251 5.1625 5.1625 5.1625 5.16251 5.16251 5.16249 
5.16251 5.16251 5.16249 10.3251 0 ]xsh
91.7735 104.226 mo
(|[x::String\(ann*\)]|->)
[5.1625 10.3251 10.3251 5.1625 10.3251 5.16249 5.16251 5.16251 5.16251 5.16249 10.3251 5.16251 
5.16251 5.16251 5.16249 5.16251 10.3251 5.16251 10.3251 5.16249 0 ]xsh
91.7735 116.026 mo
(class-body-dec*|[)
[5.1625 5.16251 5.1625 5.16251 5.1625 5.16251 5.1625 5.1625 5.16249 5.16251 5.16251 5.16251 
5.16251 5.16251 5.16249 5.16251 0 ]xsh
102.098 127.827 mo
(protectedStringx="";)
[5.1625 5.16251 5.16251 5.16251 5.1625 5.16249 5.16251 5.16251 10.3251 5.16251 5.16251 5.16251 
5.16251 5.16249 10.3251 10.3251 10.3251 5.16249 5.16252 0 ]xsh
102.098 151.428 mo
(publicStringx_get\(\){)
[5.1625 5.16251 5.16251 5.16251 5.1625 10.3251 5.16251 5.16251 5.16249 5.16251 5.16251 10.3251 
5.16249 5.16252 5.16248 5.16252 5.16251 5.16249 10.3251 0 ]xsh
112.423 163.228 mo
(returnx;)
[5.1625 5.16251 5.1625 5.16251 5.16249 10.3251 5.16251 0 ]xsh
102.098 175.028 mo
(})sh
102.098 198.629 mo
(publicvoidx_set\(Stringnewitem\){)
[5.1625 5.16251 5.16251 5.16251 5.1625 10.3251 5.16251 5.16251 5.16249 10.3251 5.16251 5.16251 
5.16249 5.16252 5.16248 5.16252 5.16251 5.16249 5.16252 5.16248 5.16252 10.3251 5.16249 5.16251 
5.16252 5.16249 5.16251 5.16251 5.16251 10.325 0 ]xsh
112.423 210.429 mo
(x=newitem;)
[10.3251 10.3251 5.16249 5.16251 5.16251 5.16251 5.16251 5.16249 5.16251 0 ]xsh
102.098 222.229 mo
(})sh
91.7735 234.029 mo
(]|)
[5.1625 0 ]xsh
91.7735 245.829 mo
(wherex_get:=<concat-strings>["get",x])
[5.1625 5.16251 5.1625 5.16251 10.3251 5.1625 5.1625 5.16251 5.16249 10.3251 5.16251 10.3251 
5.16252 5.16249 5.16251 5.16251 5.16249 5.16252 5.16249 5.16251 5.16251 5.16249 5.16252 5.16248 
5.16252 5.16249 5.16251 10.325 5.16254 5.16248 5.16251 5.16251 5.16251 5.16251 10.3251 5.16248 
0 ]xsh
112.423 257.63 mo
(;x_set:=<concat-strings>["set",x])
[10.3251 5.1625 5.16251 5.16249 5.16251 10.3251 5.16251 10.3251 5.16251 5.16251 5.16249 5.16251 
5.16252 5.16249 5.16251 5.16251 5.16249 5.16251 5.16251 5.16251 5.16251 5.16251 5.16249 10.325 
5.16251 5.16251 5.16251 5.16251 5.16251 5.16251 10.325 5.16254 0 ]xsh
grestore
0.987037 lw
43.1443 568.839 mo
401.276 568.839 li
401.276 300.241 li
43.1443 300.241 li
cp
@
gsave
43.1443 568.839 mo
401.276 568.839 li
401.276 300.241 li
43.1443 300.241 li
cp
clp
43.1443 568.839 mo
401.276 568.839 li
401.276 300.241 li
43.1443 300.241 li
cp
1 gry
f
43.1443 327.451 mo
401.276 327.451 li
401.276 300.24 li
43.1443 300.24 li
cp
0.37 0.45 0.66 rgb
f
1 gry
%ADOBeginSubsetFont: QCAAAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWGZ+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/fi <1C60D8A8C9B08A95D031A4009E0FACBEB4A6A7089F11EFA546F417989CB
17C919D209E6E421E2BD0EECF1724B1D1D951D0C3528F6B77BC71B0B45AF722D
E10FA9A6B329872C276CCC4D83EAB298E74E082542FAA8ABE704C5E50757B67B
662539885467CDA4A8B46F436FC2FF1BD93C374> |-
/C <1C60D8A8C9B08A95E89BD1FA55F3C9FC54E2C9863902D6F75D05C264F001
7A0B5F36FB1EEF0F11263D359B596A218B0E0906D9CAF1169A5CCAF48E4FC013
81571B4E5A62FB5021C54228B20ECEF037A9A1D6C4A19F4113734CA5D977DBBA
DA1E> |-
/I <1C60D8A8C9B08A951616C3AB6236DB7681C57392EB12FA1D724A6FD7A27A
7DA24D35F0D93181> |-
/c <1C60D8A8C9B08A95B5589A17E299A83714C20537662F3B21D7A1F6748813
7EE8F8989BE1733172CD364BFC7FCB06F306148983BDDAEF22E29B526FD7F366
D8B31143EED2A05EDA8050128ABD5A88912DE79EA26B9F558DADFB6CF8334A6B> |-
/o <1C60D8A8C9B08A95A31CD7D9F217A69992F44FA90AA023A397851E23C8E4
CBFCD69F4E7C3676D1839CE0A79E45A4141988EDFB3760BD3C43FD952EA4939A
C78485AB0271866C6B5494B9EB377464114D395D7CA45C9E2453E1E4BA1CE2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWGZ+CMSS12 /Encoding get
dup 12 /fi put
dup 67 /C put
dup 73 /I put
dup 99 /c put
dup 111 /o put
pop
%ADOEndSubsetFont
/EUCWGZ+CMSS12*1 
[12{/.notdef}rp /fi 54{/.notdef}rp /C 3{/.notdef}rp /G /.notdef /I 
9{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d /e 
/.notdef /g /.notdef /i 4{/.notdef}rp /n /o 2{/.notdef}rp 
/r /s /t 139{/.notdef}rp]
EUCWGZ+CMSS12 nf
EUCWGZ+CMSS12*1 [14.1602 0 0 -14.1602 0 0 ]msf
51.538 320.042 mo
(Identi\014erConcatenation)
[3.76952 7.11274 6.16248 7.11273 5.00716 3.26111 7.40724 6.16248 9.32867 8.85857 6.93275 7.11273 
6.16248 6.63696 5.00716 6.16248 7.11273 6.63696 5.00716 3.26112 6.93274 0 ]xsh
67.1746 369.013 mo
67.1746 366.841 68.9513 365.064 71.1227 365.064 cv
373.3 365.064 li
375.471 365.064 377.248 366.841 377.248 369.013 cv
377.248 371.467 li
67.1746 371.467 li
0.8 0.8 0.8 rgb
f
67.1746 518.419 mo
67.1746 520.591 68.9513 522.368 71.1227 522.368 cv
373.3 522.368 li
375.471 522.368 377.248 520.591 377.248 518.419 cv
377.248 368.515 li
67.1746 368.515 li
f
0 gry
%ADOBeginSubsetFont: QPVAAA+CMTT10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWHA+CMTT10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/numbersign <1C60D8A8C9B78E059903569BF873EF1CE36ABF95F46C3EB56D5
569845AB6AF3B3136D52FB3913B28C3222B243E033539E4D441E783B5B8F712A
2AD91B625A53112E15F723BE6EE43561285E2F0004339DB688F1B46B9C77464D
CA3B5753F68D372E2C9F2A055C1D34FEFCD0C8A9B79A6DF631BAE453B10B870E
708492D9833099C06735DBCA75BF1CBB3AFF504B6755FD991A4BA313A78F8675
FE76516AC866B638F6EB5F8BFA8CF66FAD2DB350F956E24501CDB2BCEBD21DC3
E504A9597A4FB2EF20CF82D609AFC77FBE3D5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWHA+CMTT10 /Encoding get
dup 35 /numbersign put
pop
%ADOEndSubsetFont
/EUCWHA+CMTT10*1 
[34{/.notdef}rp /quotedbl /numbersign 4{/.notdef}rp /parenleft /parenright /asterisk /.notdef 
/comma /hyphen 12{/.notdef}rp /colon /semicolon /less /equal /greater 
20{/.notdef}rp /S 7{/.notdef}rp /bracketleft /.notdef /bracketright /.notdef /underscore 
/.notdef /a /b /c /d /e /.notdef /g 
/h /i /j /.notdef /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
/x /y /.notdef /braceleft /bar /braceright 130{/.notdef}rp]
EUCWHA+CMTT10 nf
EUCWHA+CMTT10*1 [9.83345 0 0 -9.83345 0 0 ]msf
81.4481 376.493 mo
(property-to-java:)
[5.1625 5.16251 5.1625 5.16251 5.1625 5.16251 5.1625 5.1625 5.1625 5.1625 5.16251 5.16251 
5.16249 5.16251 5.16251 10.3251 0 ]xsh
91.7735 388.293 mo
(|[x::String\(ann*\)]|->)
[5.16251 10.3251 10.3251 5.1625 10.3251 5.16251 5.16251 5.16249 5.16251 5.16251 10.3251 5.16252 
5.16249 5.16252 5.16248 5.16252 10.3251 5.16249 10.3251 5.16249 0 ]xsh
91.7735 400.093 mo
(class-body-dec*|[)
[5.16251 5.1625 5.1625 5.16251 5.1625 5.16251 5.1625 5.16249 5.16251 5.16251 5.16251 5.16251 
5.16249 5.16251 5.16251 5.16251 0 ]xsh
102.098 411.893 mo
(protectedString_#x="";)
[5.1625 5.16251 5.1625 5.16251 5.1625 5.1625 5.16251 5.16251 10.3251 5.16251 5.16251 5.16249 
5.16251 5.16251 10.3251 5.16251 5.16251 10.3251 10.3251 5.16248 5.16252 0 ]xsh
102.098 435.495 mo
(publicStringget#x\(\){)
[5.1625 5.16251 5.1625 5.16251 5.1625 10.3251 5.16251 5.16251 5.16249 5.16251 5.16251 10.3251 
5.16251 5.16251 5.16249 5.16251 5.16251 5.16249 10.3251 0 ]xsh
112.423 447.295 mo
(return_#x;)
[5.1625 5.16251 5.1625 5.16251 5.16249 10.3251 5.16251 5.16249 5.16251 0 ]xsh
102.098 459.095 mo
(})sh
102.098 482.695 mo
(publicvoidset#x\(Stringnewitem\){)
[5.1625 5.16251 5.1625 5.16251 5.1625 10.3251 5.16251 5.16251 5.16249 10.3251 5.16251 5.16249 
5.16251 5.16251 5.16249 5.16251 5.16251 5.16249 5.16252 5.16248 5.16252 10.3251 5.16249 5.16251 
5.16252 5.16249 5.16251 5.16251 5.16251 10.325 0 ]xsh
112.423 494.496 mo
(_#x=newitem;)
[5.1625 5.16251 10.3251 10.3251 5.16251 5.16251 5.16249 5.16251 5.16249 5.16251 5.16251 0 
]xsh
102.098 506.296 mo
(})sh
91.7735 518.096 mo
(]|)
[5.16251 0 ]xsh
grestore
0.987037 lw
440.724 294.759 mo
798.856 294.759 li
798.856 26.1608 li
440.724 26.1608 li
cp
@
gsave
440.724 294.759 mo
798.856 294.759 li
798.856 26.1608 li
440.724 26.1608 li
cp
clp
440.724 294.759 mo
798.856 294.759 li
798.856 26.1608 li
440.724 26.1608 li
cp
1 gry
f
440.724 53.3714 mo
798.856 53.3714 li
798.856 26.1598 li
440.724 26.1598 li
cp
0.37 0.45 0.66 rgb
f
1 gry
%ADOBeginSubsetFont: QCAAAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWGZ+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B08A9563F93DCB793945E7BEE8284AE1E59A20EA03496
C304FC3E64B5A357D> |-
/period <1C60D8A8C9B08A9576E61A96850602E826CA965FFF4DD5A6EECC139
E62BC3997> |-
/one <1C60D8A8C9B08A95A31CD7D9F217ACE20F262BC5333DC69BB8E54E04E9
BEF838759028E07A9DBE7115A1AAD428A10D98FB707D9DE973738F236F54A153
00E71140E97AA551C05FE6B428F56E> |-
/four <1C60D8A8C9B08A95A31CD7D9F217AC87AC63A5F9EF8FFE1CBB5287F2A
18416BB6091527DEC61158E740B6803D87EC2D0304702A46D248420473FE4C3E
EE8A253F63762783EAB8BBFC20C8FCB990A149D45629CE1E780> |-
/colon <1C60D8A8C9B08A9576E61A96850602E826D739EA1B879C5C2FC0C513
A9A69F81820F4A916769F475991382C899E32E70> |-
/A <1C60D8A8C9B08A95E0E86DD3D35C1EC96C676F01E9A265048F4C62D89CB1
AC1A0276333355878729FDB5C9C6DAA5F36F803B505C464FC5423FA44CF35AD1
1BB3E5A8B06E8FFC6118> |-
/E <1C60D8A8C9B08A95FF8CEA8AF5E07F07B9209BE8EFE3918064848673946D
453707F617635118BD551F1A18718FF0CD6E4E2D56231D99FEE9BD6AEF0D1531
E5D3FE59D28598C719248EB56EE27A52CDE518DB034463> |-
/M <1C60D8A8C9B08A9405F8FB94046DE22792E0291ECEF731BF1FD82876DAAB
7D9D5A98639DBB904BB96E48B9A9A1E5B96C4B4CA0C4FC8390D7B3246CFD5CCC
A8F4E44709722BF90808FE563C4E8357BADD0FBDE765E5649A49829BA1871953
39269EC0503CB1CD2B81ABB8A4573674C91D7D> |-
/x <1C60D8A8C9B08A95B2CCC00C0CACD7E211E48A51C4B3A3650F680506F546
5B4F3988FAB37422BC4AA11361957FE835F02410C921ECEE21175686EB0E1EE8
CCB245E9013AE35D337E571635> |-
/y <1C60D8A8C9B08A95B2CCC00C0CACA7ED3EA78B54591E25CC4E6A1FDCEB3C
D700CDE1F3C606D0C5AC44A06A2A8E08B513D8F94A49EB734FD6329193B24F4B
FCB108F93DD8457E52FDD2E1D96DC5B76459D2B066BB85A54422AB3DBAAB97AE
4F2C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWGZ+CMSS12 /Encoding get
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 52 /four put
dup 58 /colon put
dup 65 /A put
dup 69 /E put
dup 77 /M put
dup 120 /x put
dup 121 /y put
pop
%ADOEndSubsetFont
/EUCWGZ+CMSS12*1 
[12{/.notdef}rp /fi 32{/.notdef}rp /hyphen /period 2{/.notdef}rp /one 2{/.notdef}rp 
/four 5{/.notdef}rp /colon 6{/.notdef}rp /A /.notdef /C /.notdef 
/E /.notdef /G /.notdef /I 3{/.notdef}rp /M 5{/.notdef}rp 
/S 13{/.notdef}rp /a /.notdef /c /d /e /.notdef 
/g /.notdef /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r 
/s /t 3{/.notdef}rp /x /y 134{/.notdef}rp]
EUCWGZ+CMSS12 nf
EUCWGZ+CMSS12*1 [14.1602 0 0 -14.1602 0 0 ]msf
449.118 45.9617 mo
(Exercise4.1:GeneratingMany-to-ManyAssociations)
[8.25964 6.34244 6.16248 4.71246 6.16245 3.26114 5.31439 10.7787 6.93274 3.85165 6.93271 10.0114 
9.24384 6.16248 7.11273 6.16248 4.7124 6.63696 5.00714 3.26111 7.11279 11.5631 12.0292 6.63696 
7.11273 6.34247 4.62189 5.00714 6.93274 4.62195 12.0292 6.6369 7.11279 10.9587 9.16168 5.31445 
5.31439 7.32922 6.16248 3.26111 6.63696 5.00714 3.26111 6.93274 7.11279 0 ]xsh
464.755 130.768 mo
464.755 128.596 466.531 126.82 468.703 126.82 cv
770.88 126.82 li
773.051 126.82 774.828 128.596 774.828 130.768 cv
774.828 133.223 li
464.755 133.223 li
0.8 0.8 0.8 rgb
f
464.755 190.585 mo
464.755 192.757 466.531 194.533 468.703 194.533 cv
770.88 194.533 li
773.051 194.533 774.828 192.757 774.828 190.585 cv
774.828 130.272 li
464.755 130.272 li
f
0.37 0.45 0.66 rgb
%ADOBeginSubsetFont: ADGBAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /ADGBAA+CMSY10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.035 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
def
/UniqueID 5000820 def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 683 705] def
/OtherBlues [-124 -119] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [85] def
/StemSnapH [40 55] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/bullet <1C60D8A8C9B7A73D8D0B3FCDAA7E46FB68E7B1A6FB865A1D0E06554
A3E2854CF0B6294B7C2961A3DF80EB436E70A3DC7> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EUCWHB+CMSY10 /ADGBAA+CMSY10 findfont ct_VMDictPut
/EUCWHB+CMSY10*1 
[15{/.notdef}rp /bullet 240{/.notdef}rp]
EUCWHB+CMSY10 nf
EUCWHB+CMSY10*1 [10.7677 0 0 -10.7677 0 0 ]msf
479.471 139.226 mo
(\017)sh
0 gry
%ADOBeginSubsetFont: QPVAAA+CMTT10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWHA+CMTT10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B78E052A82CD5017F8F19B688F169B4CB59525512C57E4
E0723141AB92CFAE39A5CD046C6FC8F668F52BB2A00BAED99CC0DE86CAC89327
8CF2F5608049A5229A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWHA+CMTT10 /Encoding get
dup 47 /slash put
pop
%ADOEndSubsetFont
/EUCWHA+CMTT10*1 
[34{/.notdef}rp /quotedbl /numbersign 4{/.notdef}rp /parenleft /parenright /asterisk /.notdef 
/comma /hyphen /.notdef /slash 10{/.notdef}rp /colon /semicolon /less 
/equal /greater 20{/.notdef}rp /S 7{/.notdef}rp /bracketleft /.notdef /bracketright 
/.notdef /underscore /.notdef /a /b /c /d /e 
/.notdef /g /h /i /j /.notdef /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y /.notdef /braceleft /bar /braceright 
130{/.notdef}rp]
EUCWHA+CMTT10 nf
EUCWHA+CMTT10*1 [10.7677 0 0 -10.7677 0 0 ]msf
490.239 139.717 mo
(cdstrategoxt-tutorial/generation)
[5.65298 11.306 5.65292 5.65302 5.65295 5.65295 5.65295 5.65295 5.65302 5.65295 5.65295 5.65295 
5.65295 5.65302 5.65295 5.65295 5.65295 5.65302 5.65295 5.65295 5.65295 5.65295 5.65302 5.65295 
5.65295 5.65295 5.65302 5.65295 5.65295 5.65295 5.65295 0 ]xsh
0.37 0.45 0.66 rgb
EUCWHB+CMSY10*1 [10.7677 0 0 -10.7677 0 0 ]msf
479.471 155.549 mo
(\017)sh
0 gry
%ADOBeginSubsetFont: FLDBAA+CMSS10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /FLDBAA+CMSS10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
def
/UniqueID 5000803 def
/FontBBox {-61 -250 999 759} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 694 716 444 461 656 678] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [61] def
/StdVW [78] def
/StemSnapH [61 64] def
/StemSnapV [78 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/a <1C60D8A8C9B08A95A7E4088C7A38B070CB5597CB6E5B5727BA22A17D0DAE
C407D8C3D3136AA342232348EF23781510C3E78954963CD307527E6A8156255F
51163D8760FA65EEBAD56EA8F7D2F06154AF2F14F168207F31B23917B20B9FDB
A8E4C1D2E16D03E0C04BF729182FBA85E7EDE81B43C3AA0ECB9C9BA27B0E7F> |-
/c <1C60D8A8C9B08A95B1F07368C45D8D45BA2821B5F2C4FA9D3A85E224B022
8E5FE35AB726CC4A33D25588EC7C48DA589632E55C3DF3C711B3593039ACD915
ABCF7631DC124554B002B7F4444201B431DF315B197FE5799F7C> |-
/d <1C60D8A8C9B08A95D5A79985A827220D46CBA17D951D71091AF2A64FDF58
3D2492D2B07E549E6F0F191740B84475A05D8CB502D6FFA02A5BDBC262D7461F
84CEFB949AA32E310EECB077C8C7052B181BF14CE47E6F9404B3FEBC4A576FA9
7D4D209BDF970697D6703F5C6BF334F97BF1> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D4688EED3D508397A2A1B06E9E596E8
BA0B06EFF5DB68A2B2DEDDBCB7B6A7B35813A23FFFD2FE0EE478C0BFB7745A31
69762B785AFBDC923FD45580217660D52ED1B556384A2F561D47B21C6662A2D6
C7FC6E088D08DCAF0061583F541694> |-
/f <1C60D8A8C9B08A956BA65798425CE9BAB660BE0333F0C383EFD1A8DC8672
6AD58353FF3E06EC019FC152878FA43F42A0AB8BF17B2829C797A765CD324AF1
4A81F113C04B27DD0D55F1868E3A74F6D8403D87B03D56> |-
/g <1C60D8A8C9B7A73DB58EC4F5735257CF6484034BE48838869C792E77FEDB
2EDDDF87A4ECEA55DED30419BE80B9800A7A7BCC852BBF2F2E06BC58F5220971
E571F38CF807ABB277789A55600204E7D4F9D5B79E85F55DBE49717A60C2DBDE
EFC117FFEA09FDB25E08EC0D2C46945DC382E7BB216BC1ED46A53D7DCC40B2C9
9BE8374E106F137F672ABF5E8DC549748A999EC7C6BF9EB4A8ACFE131064AD2B
C89A39B533BAC508010480088F92C9E199DE77B0D5D956B2F9890F91DB699D5B
FE37A68F78A04CA9D3C85DA607FEC9886BB4D6> |-
/i <1C60D8A8C9B08A95414C3FF7328CB21E74879F707A294CE56FA4856D5579
AC24D99BEF447D92E629D8CC408E6D9D7B0F2DD90AECF9> |-
/l <1C60D8A8C9B08A95414C3FF7328CB21E7486E3B6B5E1E357CEC11DF3B72C
60D7555125BC3695> |-
/n <1C60D8A8C9B08A95D5A79985A82729CAE756D0489903E93B90E41EC367F6
1A5B1D9E6565B3F6AD5D7DB5A2C3E43D0E00B470AD40C0D92976A92464A2E599
1D4AD84826F60EFFB914AFB515> |-
/o <1C60D8A8C9B7A73DCEDF64ACF1D92FCD603C38194EF3F5934A984E60F2AF
9261930EDC731DFAE6DC0D65525DECAD56D01145F3205995C224947145FF19D1
982913BDB63436AA6C4E83643807117E1530260A08A6B9A3F353> |-
/p <1C60D8A8C9B08A95D5A79985A8275948A70A6BD8D1F2EA5F170BA20A3467
B97387D8D8E2E47D725A77E3D89E610463BEB33F2000963437F3E1548999C4C0
D771AEADC64008A4018EB255F27E32C5AC3E27C9FE47F18E6F6006D8F9D35D48
3D63730ACC150C4935A22C3C9F17D6> |-
/r <1C60D8A8C9B08A959965E2515C2E939D32F95F06D24977D250B5BA06E866
AA828AC35B0DE74E529A185884FE51182FAA624B3FDBC3A7A2C8> |-
/s <1C60D8A8C9B08A95899606B6B06029417B1C57880E6EC5D2D6786BEDA677
1C673DCA1F1E4C0DEF808791979853B096E133BFED7F29CEC7631B543CDA3044
7AA41B7FA0F4C395215EB8E1863D34AE9393B851AFDB1E97EFCAABF875BA3C47
5E5986C14523B69201AE249C951AE0EFA42707CEBD6E1E21237369A79A3BF9EA
ECA687BB513F7892AF8337C0F0> |-
/t <1C60D8A8C9B08A9591900960B3FA4D96867B930C4350F4E0B4C1A851140E
2736CC0BCA482E4D8AAD1BEEFCDDE668980FBCDB1FA095D98D1D1D88986BF245
E52C01B70C1F43F764CB2ADCDFD2E95C5ED85956ABE04B8858> |-
/u <1C60D8A8C9B08A95D5A79985A8272207708A02D998439C3D8F5943D44B24
05B880A2E47A3923B4151C5A4934C03CC4787600BB3DBF41B100327D7717400B
228ACD479E7A669CC2CAE88F> |-
/v <1C60D8A8C9B08A95A8358A0E497F758EA77B0083E13DA0209FC91E76A913
F4514D418F55771FDDC53456160C1DE8D884748B270EAAA99861A2D465DBA4A1
CB768E0ACE> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EUCWHC+CMSS10 /FLDBAA+CMSS10 findfont ct_VMDictPut
/EUCWHC+CMSS10*1 
[97{/.notdef}rp /a /.notdef /c /d /e /f /g 
/.notdef /i 2{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /s /t /u /v 137{/.notdef}rp]
EUCWHC+CMSS10 nf
EUCWHC+CMSS10*1 [10.7677 0 0 -10.7677 0 0 ]msf
490.239 156.041 mo
(generatecodefor)
[5.38385 4.78513 5.5636 4.78513 3.67935 5.17499 3.88824 8.37073 4.78516 5.6853 5.5636 8.38153 
3.27991 5.09308 0 ]xsh
EUCWHA+CMTT10*1 [10.7677 0 0 -10.7677 0 0 ]msf
572.073 156.041 mo
(Set)
[5.65295 5.65295 0 ]xsh
EUCWHC+CMSS10*1 [10.7677 0 0 -10.7677 0 0 ]msf
592.621 156.041 mo
(valuedproperties)
[4.96503 5.17505 2.57245 5.5636 4.7851 9.14923 5.26208 3.67938 5.38385 5.86511 4.7851 3.67938 
3.88818 2.57251 4.7851 0 ]xsh
0.37 0.45 0.66 rgb
EUCWHB+CMSY10*1 [10.7677 0 0 -10.7677 0 0 ]msf
479.471 171.873 mo
(\017)sh
0 gry
%ADOBeginSubsetFont: QPVAAA+CMTT10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWHA+CMTT10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B78E05B704C9A72A07DD8D3F335D9B511EFFB33CEA8644C441
62259FCEA487846A2630F0020CFBE6063FD707971FB21A656C0CF320B7780DC8
91D6AE79C8D8FC56B800DB840F359FC11C200990321B3C2318A27D8F8BDF1052
4E260EA29B19E3A17728595FABC834> |-
/k <1C60D8A8C9B78E05996B3573566568C77AF2600A3D6FD1253615031CAC16
89340F14D722D10ADA76D791CF009CD32AB1FDED383E81E307318EFDC2E4952E
6C07C0D49A8B1F3D14871B3655168BE59CD054CE0E1B28FF5DDF4D8DA6199D69
50F05623773E4A481F84B7E4670131B04F9F6EDC6DB352BAB3D45C73CAE54F6E
AAFED8AE3641A38610B070AA3CFA8FCC396FEA50DC6C4BF903AE272C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWHA+CMTT10 /Encoding get
dup 84 /T put
dup 107 /k put
pop
%ADOEndSubsetFont
/EUCWHA+CMTT10*1 
[34{/.notdef}rp /quotedbl /numbersign 4{/.notdef}rp /parenleft /parenright /asterisk /.notdef 
/comma /hyphen /.notdef /slash 10{/.notdef}rp /colon /semicolon /less 
/equal /greater 20{/.notdef}rp /S /T 6{/.notdef}rp /bracketleft /.notdef 
/bracketright /.notdef /underscore /.notdef /a /b /c /d 
/e /.notdef /g /h /i /j /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /x /y /.notdef /braceleft /bar 
/braceright 130{/.notdef}rp]
EUCWHA+CMTT10 nf
EUCWHA+CMTT10*1 [10.7677 0 0 -10.7677 0 0 ]msf
490.239 172.365 mo
(tasks->Set<Task>)
[5.65298 5.65295 5.65298 5.65292 11.306 5.65295 11.306 5.65295 5.65295 5.65295 5.65295 5.65302 
5.65295 5.65295 5.65295 0 ]xsh
0.37 0.45 0.66 rgb
EUCWHB+CMSY10*1 [10.7677 0 0 -10.7677 0 0 ]msf
479.471 188.197 mo
(\017)sh
0 gry
EUCWHC+CMSS10*1 [10.7677 0 0 -10.7677 0 0 ]msf
490.239 188.688 mo
(see)
[4.12726 4.78513 0 ]xsh
%ADOBeginSubsetFont: QPVAAA+CMTT10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWHA+CMTT10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B78E059954B91DD6BBEE3FFAC4899E7241AD37B76CB92
A910164888C2C282BEE906495909BB5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWHA+CMTT10 /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/EUCWHA+CMTT10*1 
[34{/.notdef}rp /quotedbl /numbersign 4{/.notdef}rp /parenleft /parenright /asterisk /.notdef 
/comma /hyphen /period /slash 10{/.notdef}rp /colon /semicolon /less 
/equal /greater 20{/.notdef}rp /S /T 6{/.notdef}rp /bracketleft /.notdef 
/bracketright /.notdef /underscore /.notdef /a /b /c /d 
/e /.notdef /g /h /i /j /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /x /y /.notdef /braceleft /bar 
/braceright 130{/.notdef}rp]
EUCWHA+CMTT10 nf
EUCWHA+CMTT10*1 [10.7677 0 0 -10.7677 0 0 ]msf
507.527 188.688 mo
(test/Task.java)
[5.65292 5.65295 5.65302 5.65295 5.65295 5.65295 5.65302 5.65295 5.65295 5.65295 5.65295 5.65302 
5.65295 0 ]xsh
EUCWHC+CMSS10*1 [10.7677 0 0 -10.7677 0 0 ]msf
590.257 188.688 mo
(forinspiration)
[3.29065 5.08234 7.26501 2.57245 5.5636 4.12726 5.5636 2.57245 3.67938 5.17505 3.88818 2.57245 
5.38385 0 ]xsh
grestore
0.987037 lw
440.724 568.839 mo
798.856 568.839 li
798.856 300.241 li
440.724 300.241 li
cp
@
gsave
440.724 568.839 mo
798.856 568.839 li
798.856 300.241 li
440.724 300.241 li
cp
clp
440.724 568.839 mo
798.856 568.839 li
798.856 300.241 li
440.724 300.241 li
cp
1 gry
f
440.724 327.451 mo
798.856 327.451 li
798.856 300.24 li
440.724 300.24 li
cp
0.37 0.45 0.66 rgb
f
1 gry
%ADOBeginSubsetFont: QCAAAA+CMSS12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWGZ+CMSS12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B08A944A190E55AA5DD31F467D0423A053EC03AAF47B71EE2A
AEA5FF3133690A0B50D8047A1BB69E2A539CBFF9DA2B5FAB4D6D6A0AF2306532
49B3E60F0279> |-
/b <1C60D8A8C9B08A95D8E840BC3BFE7FD1EFEA271B3268EA0D05262E3E1978
A9191C949094A8BAB37317B63101C9E897D3EBBB99192DBAD2C5B7A654A40263
23466FE00AE14F7DF513956E5EB4FD1A561BACACD68519F1BC31C92D77CEF42F
1647B9BF99793DB993BF77430E9C2CE12143> |-
/f <1C60D8A8C9B08A9568507F33172027C976C70BDEF1BE12B98D436E88E4CF
067376F3D3DDD6A12CC0981498658EF8FB773D0190CE565ADC91D806D8C98EBB
4048EB48BC67B6B6485A5D904BD8B8BE3D8C195268C8> |-
/l <1C60D8A8C9B08A9545AEAF563F384DC2228E48A5DE8F50618834EC6A9283
370543991AB61F41> |-
/m <1C60D8A8C9B08A95026F9C287FEF94494F5F295BA6AA092C89C7B7C8F42A
D6ECF94DC23B657C2BEDDCAAAF73855BA7C35045977586FD8F4502D50E30528F
35706E2F7FE6DDDE87FE22397BE27204CBAC52ADB6612CE76C675529AE0C0E78
00CEF282F44050942FB389811CC45B52> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWGZ+CMSS12 /Encoding get
dup 84 /T put
dup 98 /b put
dup 102 /f put
dup 108 /l put
dup 109 /m put
pop
%ADOEndSubsetFont
/EUCWGZ+CMSS12*1 
[12{/.notdef}rp /fi 32{/.notdef}rp /hyphen /period 2{/.notdef}rp /one 2{/.notdef}rp 
/four 5{/.notdef}rp /colon 6{/.notdef}rp /A /.notdef /C /.notdef 
/E /.notdef /G /.notdef /I 3{/.notdef}rp /M 5{/.notdef}rp 
/S /T 12{/.notdef}rp /a /b /c /d /e 
/f /g /.notdef /i 2{/.notdef}rp /l /m /n 
/o 2{/.notdef}rp /r /s /t 3{/.notdef}rp /x /y 
134{/.notdef}rp]
EUCWGZ+CMSS12 nf
EUCWGZ+CMSS12*1 [14.1602 0 0 -14.1602 0 0 ]msf
449.118 320.042 mo
(CodeGenerationbyModelTransformation)
[8.85858 7.31506 7.11276 10.7928 9.22968 6.16248 7.11273 6.16248 4.71243 6.63696 5.00714 3.26111 
6.93274 11.7432 6.73041 10.9587 12.0291 7.31512 7.11273 6.16248 7.89148 8.2951 4.71246 6.6369 
7.11279 5.31439 4.23663 6.55042 4.71246 10.9644 6.63696 5.00714 3.26111 6.93274 0 ]xsh
464.755 374.62 mo
464.755 372.448 466.531 370.672 468.703 370.672 cv
770.88 370.672 li
773.051 370.672 774.828 372.448 774.828 374.62 cv
774.828 377.075 li
464.755 377.075 li
0.8 0.8 0.8 rgb
f
464.755 465.409 mo
464.755 467.58 466.531 469.357 468.703 469.357 cv
770.88 469.357 li
773.051 469.357 774.828 467.58 774.828 465.409 cv
774.828 374.123 li
464.755 374.123 li
f
0 gry
%ADOBeginSubsetFont: FLDBAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
systemdict begin
EUCWHC+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A88FF0A3D8
D9739C79CD8FEDDEB9EF209FC269D6334213691C39F989AE55C33109BB139AF8
D0F2255C93F02EDF6C44126695870CBBF70966F502E9A2F646BC7FF0> |-
/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207EC0
7DE01D2D6D0C1F139C5F8402C4465ED0D67A37E4EDAB90C2CD0E78D6AB3D4D0C
1EE9207C272D3BF7D46E1FA3FD26AD592C5A1DEB2B642E639B04641EA21> |-
/comma <1C60D8A8C9B08A9570810981675918941BEC6C7A36625EEAAFD058DA
9FD482C52B27746E5D76B78817A726AA> |-
/period <1C60D8A8C9B08A9570810981675968D99EC91A4FB3FF0912F3FF225
19AEBE50A> |-
/zero <1C60D8A8C9B7A73D3B44BE74C368F4E2FC0D1E282D6B80C084CC069A0
A14712591F89EABDE27294D1768DD69DB23E7FDCDF76DD01EA2CE0CCF6F4531C
8A5BCAB0F1BE07F8191DEC09C9A3BC8F2BD2C623D1D6E463DE09FAA97A87D431
A34F6930759E9BEDE1196203F9A0CFDDAE3BE022EED71EB4AA4845FF1759BB73
5B5433870BF2F7C4D6B648D9C9DDAA0B7F47B27B9132A> |-
/one <1C60D8A8C9B7A73DC516E502D071D3E5EFB09D24340CA928DF0A691007
E1845C890D948062796F6CD87850B222F312B9A1047DDA1457E58E9699EFA460
BF3E57> |-
/two <1C60D8A8C9B7A73DC501F4900507988D419B48DDAD77641FCF9B01129F
44B2D0DA0A0D4246B40A3567725D92D14A71BEF3D15B0FCD87AFBF51EDF2E434
E7AA8140D4D28AD634F885437601AC91D4765E112CCA291CD10E37C9ADCD0B75
E41F6A87C712119256205A282F77AFDAF9159A199A13D204AE23426594> |-
/three <1C60D8A8C9B7A73D3B44BE7B3BE12688EE7DDA3A63BDA62EEDB076E2
123EB921A3297B68A71F5DF92E7CDAF71A150A947FFEC101C8C7F263DD77DC4F
7F72BCB13AC247B7F12687C9B4904765C9156BEE359166190CA1B2094BC32103
9EC0AE22422B378A1337A7F24F1131A027BF6934C63B5D4012127C> |-
/five <1C60D8A8C9B7A73D3B44BE743C0D26AD679F5F93FC6E985F4FDB089B8
726C660FA9B5F57D310BE08C36ED05112B17AD96AEB48FF2FC2898E2D336EBE9
EAD56A8D07216507E5146B1B78A220C1E81864951416BE98FD5933A8730B6A85
BD795303C655D884BCE53> |-
/six <1C60D8A8C9B7A73D3B44BE741BE130889A29A62362BBF3BD4998A9716D
017BD3E90015A944479F79C367805DC4C50DB057D8E0A451E77FA8FEED04690F
091D41623ACB39AB5DC1AF72765D755468DC2818F70C26AC9F213B1838D66ABE
CDDED3650E39182CCE464B3439BDD0888E3B029C3E54D01F55FD3262BD39E2B7
7913583D31FCB75B5E307697CF4A1695AF9EFBD77C943134485F13A1> |-
/eight <1C60D8A8C9B7A73D3B44BE7B3BE7FFF019E7EA34A15DED5B2D465B7A
EF0670A9A82FD7960ADCB9AC66DFEEF0861C850B47C18C8FDA29F7110651E34D
B968A252461EC8952242A73E5EB97F44A6426892D458558FFACEEDFD9EE7CEFC
F2EBA0F87B093BA3F7C5A1995F8226596B2F5C1F5B66D610213976210B72F90B
CCC0A2F9F74525CA504F> |-
/nine <1C60D8A8C9B7A73D3B44BE7BB547913A9BDE169CF47BDFB08AECD5607
99E5BC8494BE235E9ADCC03CB80F5292113DF6968D1EA7A40F55C5B9F80DEC1E
C90EFB1C279B74EA768317A0E0EF74EDF4617CB23F4C910337B8288987BD48E8
3A5C57153D99C537E1535151D97A04BE59B429AB8384BD475BB1798042991B18
A318E879D6A9C6C64FA96744223F01926110C9D549A9098592C1B> |-
/A <1C60D8A8C9B08A944AAF3A41AE50384710DF86C86BE2766CF1446A4725D6
14797E14439E776E246B31ACA2732981CBCD5021D679A5247C473DD16A69B54E
FAC72E86C31EB4813A990D17F639CA5A2B4A60C4A18CD2FF46228F08A0BD> |-
/C <1C60D8A8C9B08A95E5CBCB5155105F8988F9AFEF72D4ED646885BB7DE8C7
E8C204EF39896CAEAE260120B824957C86C847669EFAAFA89587DF4162B146D0
F0043DBAB0058C4DE87E670378F0402E39E25B24B07EFD192C0AC2CE9661ACF7
17A6> |-
/E <1C60D8A8C9B08A95F50B1739DB3597D285FCEA4B0869AB5A3F34412C816E
F5670553D0830A356BB3DBA1147151DFF348A03547A198B7E361C103459B1DE8
DDCC1385C818BC5B4336FF4443B097740A8C1EAFD1D15E> |-
/F <1C60D8A8C9B08A95C25148D4A67F951EBD6EF3AD9462C395D44288F6CB81
F376CF5EDFD5430607513999D2146E1C667F83F8118977160401906D0121BE0C
CF839AAEF40A80> |-
/G <1C60D8A8C9B08A944AAF3A41AE50C6A3E7588471850A270BFB011EF44BFA
19648F82DF16DAD5B24375BE5FF8B2431CF8300971B59A5AF73BAF6D880F19EF
BC305C8BB76865C6EEA4AC2F1A290723008A11FF5789E0A418BFA9C5E9B68740
8C5C4C010B040A40A4BDE37268984DD12805F819C6> |-
/H <1C60D8A8C9B08A945A1AB9ADE1431F4D4C7E422E90FC41FDA1B8B3A0F467
742389A2DF2EC390F9B1DCEF589756F5F1ABE4A0E6A3FF60D1CACED45D0C302D
42B6B020BAF5> |-
/I <1C60D8A8C9B08A9570810981675968A74FB02CB1E4D0254CE742213CB9B9
EBFAAD12A2DAE953> |-
/J <1C60D8A8C9B08A95A487F5C1974C48C55CD7C2A3088220F504C5020A7247
83ECFE13FDCFE42E5D7E24817F4887133BFFBA6580F06C75E94E209F38B02CEA
70A94B01> |-
/K <1C60D8A8C9B08A9441C61CD5D11332AD2A8E1D54768A783C46605C167A4F
3CD41BB75C94EAD347F5402C88574F59D17F50294236C726DA4F457ADDC6145A
387391127575> |-
/L <1C60D8A8C9B08A95CF0AD19F21AB368486DFF0EA52B92677B9DBFAB95E13
BD476D31E8E6AA2B86DF27A5D8F7A57B5295549F> |-
/M <1C60D8A8C9B69E59BC73D93FC5A356A227E17EA9C31EFFA71275C6B5EB76
9923CE4FA51C8A1EAEED0428CE577507A9116D4E93C97EF19E9F9C7938C83656
342A6195D2BADF02DD8FE47428F019C292D90E07E4319371C83FC96B01EBE161
D7AEA1A5C028EB3560F099A0C07EAACAE48658B786> |-
/N <1C60D8A8C9B08A945A1AB9ADE1431F4D4C706440445EB3B0AC42C017E667
E3B1F1AC20498D10D59C4B84EF905C8E5EA3C5C9A989C1FC16849E408F5E2AC8
F9219876B942B12D4274D9639C64DF3A8DD0> |-
/P <1C60D8A8C9B08A95E5CBCB515510A1DB766E66BB68264ABF90DD718217D9
B36182A2F041C72BEB1A0004579EE3860968B0F631081AB288C0DEE8D6338BB7
6DA4D5B22D81C2C6CE553DCC530034E4302890BB1BA61F50A5> |-
/S <1C60D8A8C9B08A95C5897169EED998E3A483411C7A0F3390660D3244B230
926C536826CD5B5B7B2ADAD07DFBA69DDB5E59FEC017BE84EEE8F8A88B3F76D3
141C36DE6F631E2DE0D75823AECC86270AF5782264021D446D7F5C8F80743DE5
586CF952071F10762DE0BE112CC581D3668B9189B8CDCA398FFECC3DCC67A6D4
52B2556D4C19E874DE57221BD15B399E0687FD> |-
/T <1C60D8A8C9B08A94478101EE5603CAF315CBAC0B90AC512307A4563E44C8
1F696404737A0561325213774D7BE31FD4E1A37D8B8C0A80D54181862337CD6E
7F6232B0033F> |-
/V <1C60D8A8C9B08A944AAF3A41AE50384710D1AA3E893FE2A2C36FA63B3AFC
0E3259D2C693222B828C2FD4446A3985F82DA6BF06A42B4572983B1DD9646471
771E5585A146AFA17E> |-
/Z <1C60D8A8C9B08A95F2616DBAAE74C3FEDFD0543BDA0DAEA6F7038C7426C7
8187CB86C65B0B951E07C64FFD37EE3AAAB331C28D37896D62A9D1F45B9BC37A
0A8CE687C7543866E6D0A9FC29> |-
/b <1C60D8A8C9B08A95D5A79985A827220D46CBA17D951D71091A804487D3CC
69BB9C43B70B1C054AE8BCF010FEB975725958C0171BBED6676C9AAAE6CFEE46
F69DED7901CD1C4DCA677E0DE526159ACDEB3DE152447BA9BBFE3963B6938BEA
3024E87A005166176A2DFF> |-
/h <1C60D8A8C9B08A95D5A79985A82729CAE756D04899265F929F8923BB7F66
0F8BA9AE60D5A68E190A1C2D331328AC43A0120F78B2E91DADC6910D7E5CDF89
D74BBBD78E503590AE48EFA32DF8171C17BE> |-
/m <1C60D8A8C9B08A947888CD346A212481DC30FBBA5172AB33DA555892BB0D
4457537FDCBE22278A04524382B282B93AE276CEC08E722FA268559910EF4D4B
7BDAD0078C7ABF5DB8F1EE00F47BCD24C7B22C3566337374E8D52DA222B452E3
AA33BC072A7E37009D15AFC4B051AF57> |-
/y <1C60D8A8C9B08A95A8358A0E497F05BF5F726C557A2E2829313B836F25DB
5900E849559FDA967A2F65CB8602740FE08056FF8447EF879526A4DF9E08F0AC
AB853F0CC97F5F0A2389709E18B6B2DF1BC7478B686DDE603D07DF69E90921F3
CB21E43826> |-
/endash <1C60D8A8C9B7A73DB9ADA16155BB972BF7BAC1BF2C509D40EFDA06E
9441B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
EUCWHC+CMSS10 /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 90 /Z put
dup 98 /b put
dup 104 /h put
dup 109 /m put
dup 121 /y put
dup 123 /endash put
pop
%ADOEndSubsetFont
/EUCWHC+CMSS10*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef 
/zero /one /two /three /.notdef /five /six /.notdef 
/eight /nine 7{/.notdef}rp /A /.notdef /C /.notdef /E 
/F /G /H /I /J /K /L /M 
/N /.notdef /P 2{/.notdef}rp /S /T /.notdef /V 
3{/.notdef}rp /Z 6{/.notdef}rp /a /b /c /d /e 
/f /g /h /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u /v 
2{/.notdef}rp /y /.notdef /endash 132{/.notdef}rp]
EUCWHC+CMSS10 nf
EUCWHC+CMSS10*1 [10.7677 0 0 -10.7677 0 0 ]msf
468.703 383.568 mo
(Z.Hemel,L.C.L.Kats,andE.Visser.CodeGenerationbyModel)
[6.58014 6.5769 7.62674 4.78513 8.55386 4.7959 2.57248 6.5769 5.83289 6.5769 6.87946 6.57697 
5.83282 6.58771 7.47705 5.17499 3.88824 4.12726 6.5769 5.17499 5.5636 9.14923 6.43048 6.58765 
7.17883 2.57245 4.12732 4.12726 4.7851 3.67938 7.77209 6.87952 5.68536 5.56354 8.37079 7.17883 
4.7851 5.5636 4.78516 3.67938 5.17499 3.88818 2.57245 5.38385 9.14929 5.27283 8.55066 9.42175 
5.6853 5.5636 4.78516 0 ]xsh
468.703 396.942 mo
(Transformation.ACaseStudyinTransformationModularity.InJ.)
[6.43481 3.67938 5.17502 5.56357 4.12726 3.29065 5.08234 3.67938 8.55383 5.17505 3.88818 2.57251 
5.38379 5.5636 7.77216 10.7645 6.87946 5.17505 4.12726 8.38153 5.98254 3.88818 5.5636 5.5636 
8.55066 2.57245 9.14929 6.43475 3.67938 5.17505 5.56354 4.12726 3.29065 5.08234 3.67938 8.55389 
5.17499 3.88824 2.57245 5.38385 9.14923 9.42169 5.68536 5.56354 5.5636 2.57251 4.87354 3.67938 
2.57245 3.58667 4.07135 7.7829 2.98053 9.15997 5.08447 0 ]xsh
468.703 410.315 mo
(Gray,A.Pierantonio,andA.Vallecillo,editors,Theoryand)
[7.17886 3.67935 4.87354 4.07132 6.5769 7.17883 6.57693 6.87946 2.57245 4.78516 3.67938 5.17499 
5.5636 3.88818 5.38385 5.5636 2.57245 5.38385 6.58771 5.17499 5.5636 9.14923 7.17883 6.5769 
6.87732 5.17505 2.57245 2.57251 4.7851 4.78516 2.57245 2.57245 2.57251 5.38385 6.58765 4.78516 
5.56354 2.57251 3.88818 5.0824 3.67932 4.12726 6.57697 7.32849 5.5636 4.7851 5.0824 3.67932 
8.56146 5.17505 5.56354 0 ]xsh
468.703 423.689 mo
(PracticeofModelTransformations.FirstInternationalConference)
[6.87949 3.67938 5.17502 4.78513 3.88818 2.57248 4.78513 8.37076 5.38385 6.88702 9.42175 5.67456 
5.5636 4.79584 6.15814 6.42401 3.67938 5.17499 5.5636 4.12726 3.29065 5.09314 3.67932 8.55389 
5.17505 3.88818 2.57251 5.38379 5.5636 4.12726 7.77216 6.1311 2.57245 3.67938 4.12726 7.47382 
2.99127 5.5636 3.88818 4.78516 3.67938 5.56354 5.17505 3.88818 2.57251 5.38385 5.56354 5.17505 
6.15808 6.87946 5.38385 5.5636 3.29065 4.78516 3.67932 4.78516 5.5636 4.7851 0 ]xsh
468.703 437.063 mo
(onModelTransformation\(ICMT2008\),volume5063ofLecture)
[5.38385 9.14923 9.42172 5.68533 5.5636 4.78513 6.15811 6.43475 3.67938 5.17499 5.5636 4.12726 
3.29065 5.08234 3.67938 8.55389 5.17499 3.88824 2.57245 5.38385 9.14923 4.18756 2.99127 6.87946 
9.42175 10.9249 5.38385 5.38385 5.38379 5.38385 4.18756 6.5769 4.96509 5.38385 2.57245 5.56354 
8.55389 8.37079 5.38385 5.38379 5.38385 8.98029 5.38385 6.87622 5.83289 4.78516 4.78516 3.88818 
5.5636 3.67932 0 ]xsh
468.703 450.436 mo
(NotesinComputerScience,pages183{198,Heidelberg,July2008.)
[7.62674 5.38385 3.88818 4.78513 7.71289 2.57248 9.13846 6.87946 5.38385 8.55389 5.5636 5.56354 
3.88824 4.7851 7.25427 5.98254 4.7851 2.57251 4.7959 5.5528 4.7959 4.78516 6.56616 5.56354 
5.17505 5.38379 4.78516 7.71289 5.38385 5.38385 5.38379 5.38385 5.38385 5.38385 5.38385 6.56616 
7.62671 4.78516 2.57245 5.5636 4.7851 2.57251 5.86505 4.78516 3.67932 5.38385 6.57697 5.08447 
5.5636 2.57245 8.53992 5.38385 5.38385 5.38385 5.38379 0 ]xsh
468.703 463.81 mo
(Springer.)
[5.98257 5.26208 3.67938 2.57248 5.56357 5.38385 4.78513 3.67938 0 ]xsh
464.755 483.138 mo
464.755 480.966 466.531 479.19 468.703 479.19 cv
770.88 479.19 li
773.051 479.19 774.828 480.966 774.828 483.138 cv
774.828 485.592 li
464.755 485.592 li
0.8 0.8 0.8 rgb
f
464.755 510.009 mo
464.755 512.18 466.531 513.957 468.703 513.957 cv
770.88 513.957 li
773.051 513.957 774.828 512.18 774.828 510.009 cv
774.828 482.642 li
464.755 482.642 li
f
0.37 0.45 0.66 rgb
EUCWHB+CMSY10*1 [10.7677 0 0 -10.7677 0 0 ]msf
479.471 491.595 mo
(\017)sh
0 gry
EUCWHC+CMSS10*1 [10.7677 0 0 -10.7677 0 0 ]msf
490.239 492.087 mo
(generatingpartialclasses)
[5.38385 4.78513 5.56357 4.78513 3.67938 5.17499 3.88818 2.57251 5.5636 8.96948 5.5636 4.87347 
3.67938 3.88818 2.57251 5.17499 6.16888 4.78516 2.57245 5.17499 4.12732 4.1272 4.78516 0 
]xsh
0.37 0.45 0.66 rgb
EUCWHB+CMSY10*1 [10.7677 0 0 -10.7677 0 0 ]msf
479.471 507.918 mo
(\017)sh
0 gry
EUCWHC+CMSS10*1 [10.7677 0 0 -10.7677 0 0 ]msf
490.239 508.411 mo
(combininganalysisandtransformation)
[4.78513 5.38385 8.55386 5.56357 2.57251 5.56354 2.57251 5.5636 8.96948 5.17499 5.5636 5.17499 
2.57251 4.96503 4.12726 2.57245 7.72369 5.17499 5.5528 9.16003 3.88818 3.67938 5.17499 5.5636 
4.12726 3.29065 5.08234 3.67938 8.55389 5.17499 3.88824 2.57245 5.38385 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/2 ]]
] del_res
/EUCWHB+CMSY10*1 uf
/EUCWHB+CMSY10 uf
/ADGBAA+CMSY10 uf
/EUCWHA+CMTT10*1 uf
/EUCWHA+CMTT10 uf
/QPVAAA+CMTT10 uf
/EUCWHC+CMSS10*1 uf
/EUCWHC+CMSS10 uf
/FLDBAA+CMSS10 uf
/EUCWGZ+CMSS12*1 uf
/EUCWGZ+CMSS12 uf
/QCAAAA+CMSS12 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Page: 9 3
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (9)]
[/TrimBox [12 12 830 583]]
[/BleedBox [12 12 830 583]]
[/ArtBox [12 12 830 583 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -595 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
12 12 mo
12 583 li
830 583 li
830 12 li
cp
clp
[1 0 0 1 0 0 ]ct
0.987037 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
43.1442 294.759 mo
401.276 294.759 li
401.276 26.1608 li
43.1442 26.1608 li
cp
false sop
/3 
[/DeviceGray] /CSA add_res
0 gry
@
gsave
43.1442 294.759 mo
401.276 294.759 li
401.276 26.1608 li
43.1442 26.1608 li
cp
clp
43.1442 294.759 mo
401.276 294.759 li
401.276 26.1608 li
43.1442 26.1608 li
cp
1 gry
f
43.1442 53.3714 mo
401.276 53.3714 li
401.276 26.1598 li
43.1442 26.1598 li
cp
0.37 0.45 0.66 rgb
f
1 gry
%ADOBeginSubsetFont: QCAAAA+CMSS12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /QCAAAA+CMSS12 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 69 /E put
dup 84 /T put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 110 /n put
def
/UniqueID 5000804 def
/FontBBox {-62 -251 978 758} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 694 715 444 459 655 676] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [60] def
/StdVW [76] def
/StemSnapH [54 60] def
/StemSnapV [76 86] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
7 dict dup begin
/E <1C60D8A8C9B08A95FF8CEA8AF5E07F07B9209BE8EFE3918064848673946D
453707F617635118BD551F1A18718FF0CD6E4E2D56231D99FEE9BD6AEF0D1531
E5D3FE59D28598C719248EB56EE27A52CDE518DB034463> |-
/T <1C60D8A8C9B08A944A190E55AA5DD31F467D0423A053EC03AAF47B71EE2A
AEA5FF3133690A0B50D8047A1BB69E2A539CBFF9DA2B5FAB4D6D6A0AF2306532
49B3E60F0279> |-
/d <1C60D8A8C9B08A95D8E840BC3BFE7FD1EFEA271B3268EA0D05517066D38D
ABBDEC65403CE063C0EA82DFE6D2FDF5BA1BBD31046A4120919C9B005E02E215
E02C7060E04810197A4EE37E54B068AAD7A07D32D37F6835A705F045AD78BB47
E46188A54523911A939C12> |-
/e <1C60D8A8C9B08A95B5589A17E299A839B353761A5754405332DB751515E1
39F49B25FCC8C9DC8E3EBCFAC169ACB1889E709DBE3BE8BCDEBEDBEBD2E7A5D0
CB9FE062E3F18084EF219DED1EBBC816BE1DD940708D3FE9C79213BBC3FE62C8
E2F15DD9B8C87592CA19D102E03E0A3373B50DE6098AFA0A314B> |-
/h <1C60D8A8C9B08A95D8E840BC3BFE75A638CC60EDE4C2693BE2F740BA156F
5A93574F442A2542FCDCCE6A654B33BB983B0D65C8F643FD519630B43DEE300E
0A357A0230F66197A90E27AE111714D76C53> |-
/n <1C60D8A8C9B08A95D8E840BC3BFE75A638CC60EDE4E32C5F043D10AD74DF
9A133AEBB7526F4D0EE19DBCFB2DC1F38B66C5E23BE4CADA86F303D1868E0D3A
764094313DE70340C27818A6A5> |-
/.notdef <1C60D8A8C9B08A9563F93DCB7939BC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EUCWHD+CMSS12 /QCAAAA+CMSS12 findfont ct_VMDictPut
/EUCWHD+CMSS12*1 
[69{/.notdef}rp /E 14{/.notdef}rp /T 15{/.notdef}rp /d /e 2{/.notdef}rp 
/h 5{/.notdef}rp /n 145{/.notdef}rp]
EUCWHD+CMSS12 nf
EUCWHD+CMSS12*1 [14.1602 0 0 -14.1602 0 0 ]msf
51.538 45.9617 mo
(TheEnd)
[9.45621 7.11274 10.7787 8.25963 7.11274 0 ]xsh
0 gry
%ADOBeginSubsetFont: NASAAA+CMSS17 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /NASAAA+CMSS17 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 47 /slash put
dup 58 /colon put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 120 /x put
def
/UniqueID 5000805 def
/FontBBox {-58 -250 939 758} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-16 0 694 710 430 442 656 672] def
/OtherBlues [-204 -194] def
/BlueScale 0.04796 def
/StdHW [61] def
/StdVW [76] def
/StemSnapH [56 61] def
/StemSnapV [76 84] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
14 dict dup begin
/period <1C60D8A8C9B08A957A19FDFDED319B6FC21CBA72CCCAD76C9F46FDF
FC6CF68FD> |-
/slash <1C60D8A8C9B08A95AB3D48588881555787E547605BACCDF8B6933CB6
454933D95DD8FF55C2346C75DB1E6FF28551BC28B9F8DCAFE9FC5858CF637AF3
543800CA7C38DC61951AB304549E6374> |-
/colon <1C60D8A8C9B08A957A19FDFDED319B6FC20EE577E0BDEE3996E83F03
D4224C8D4AF6F86F4D1F8E11B767B2D535AAE2EE> |-
/a <1C60D8A8C9B08A950DB3141672AA80223600340D395A84CD5C8307175E13
EEE54AFD863FF8DBACB85D97235C63B7C40408A2DC9C4BDBDBF5632749921AD9
26E32E1DEE8826B089D9730BADFD2BB70DE611C358610325F3719E92A3A2A4CB
C161DC03E58012E50B798EB8CCC9A4D572027E502E8BF82CCAC4F42AFD7F> |-
/e <1C60D8A8C9B08A95BFF5F9CB9DC735B65A82C7912C32AF2A3C95F49F34FB
58CDF55E48248EAC53719777299F50B18877991AE38B586B3F34F3F7892FA00C
A002E58886CC516367CF3D13DC263C0A5D02CA6C802ABE18599531290097133E
B0E60CDA731FD76ECB51DE9213F945FE0FA7BCADD1ABA31F826D> |-
/g <1C60D8A8C9B08A95AB3D4858888155BA39B42DF8C1D661756F9A0F61CFC2
A0A87ABF1E8711063344639B1044F4C84505B4B4BD4872FC35169373F803CF22
20BCBF870435F0E868F1640E2C8D58888E025B4A9689EDEA8ADDC7EA1D230ADB
DE97C471A4CAF388E3E4FC7CE1041A785F8C1905C004A2BAA6A186C67D4E9909
CDB0E6EC74AD73A899B789253F56B50D1D16D1CF42953580EB8C03ED218E77A7
63354D353ED8A8C7EE8100231AB8B9F56DC8B52B7C2ACC03D4305988C4814FE0
AD80F701F2C1B1371136AD78676772F50D129F8062EF20> |-
/h <1C60D8A8C9B08A95A187A4CA88055D9D145FB4AFF46087F002963B4D0545
F082E7F9DE4E88B9AE041659DEDA4681362E3BBF6E95C94F02414F5DCDAF25A4
CE45487E0F6CC009A9CCE27CE0F1A65D3CBE> |-
/o <1C60D8A8C9B08A95AB3D485888812D53CC59BD116BAA89C5703233E7098F
59BE0C6F24D9FBCCFB062DE37528D581A6E8C859723132F3F15EA7EB52EA0B69
755512F51AA3FD834C03C29ED3877059D761668781D45AEC1E2453834392B5> |-
/p <1C60D8A8C9B08A95A187A4CA88052DDE2B044C1B132D90807D2B432ED955
AB6F4DC230E98BB919B605AAF258858DE0378445DA6745E39D5C42E863A75DF1
250582216637E752D482BE765AB9D6A842973D7EADD1057102FDB8E96F63E946
353967DA5DC7A98095B9B64B81CF> |-
/r <1C60D8A8C9B08A9561F7EFAD26D85F42EE283AB44DB8BB436DBB106877EE
581750E7655D5E1D37F3B1565ECF0A16FAD7EF9061395CD0D831> |-
/s <1C60D8A8C9B08A959000C1BFBCEB809DCE4238680B00797FFDAA83B4F0C0
1D5C2C09868E1ECAA23C42611E22B1BEDABE4DC7255AF2FD199ECA139ABAC098
FD34D31D8E38718DFB5C3A68F9F9C36540588D03B0C82EA3637CCD230B657B0D
8D21D7DD789FCCD168CFF9533C79ED6A3A6132C30D0A392228BD5F6FE5> |-
/t <1C60D8A8C9B08A9598E2D1DC45A4D03323D19974BC4344EFF06365AA0DE7
BC25DF06599BFF2FA576243E2AF5831A417BDD4B16625396A6B5268E00A5202E
4E12EF442D84EE4E9B8E90DADE834F753C31254C73C771E0E0> |-
/x <1C60D8A8C9B08A95B44E2572D3EF460EB92861C55CB21CA58AE8D397FB7D
C631D1EDD76BA009BB37FDB51123DC233C48E0A0FC2C657120B2516A743622A6
7BCAEE44253A44D854> |-
/.notdef <1C60D8A8C9B08A956680E0FDEF79AE> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EUCWHE+CMSS17 /NASAAA+CMSS17 findfont ct_VMDictPut
/EUCWHE+CMSS17*1 
[46{/.notdef}rp /period /slash 10{/.notdef}rp /colon 38{/.notdef}rp /a 3{/.notdef}rp 
/e /.notdef /g /h 6{/.notdef}rp /o /p /.notdef 
/r /s /t 3{/.notdef}rp /x 135{/.notdef}rp]
EUCWHE+CMSS17 nf
EUCWHE+CMSS17*1 [20.3946 0 0 -20.3946 0 0 ]msf
137.995 165.046 mo
(http://strategoxt.org)
[9.86902 6.92601 6.92601 9.869 5.32709 9.58955 9.58957 7.35236 6.92601 6.53235 9.19589 6.92601 
8.52278 9.58955 9.05928 8.80222 6.92603 5.32709 9.0593 6.53235 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/3 ]]
] del_res
/EUCWHE+CMSS17*1 uf
/EUCWHE+CMSS17 uf
/NASAAA+CMSS17 uf
/EUCWHD+CMSS12*1 uf
/EUCWHD+CMSS12 uf
/QCAAAA+CMSS12 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Core/pt gx
end
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 3
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *CustomPageSize True
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
