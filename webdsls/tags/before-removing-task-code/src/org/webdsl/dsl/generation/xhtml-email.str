module org/webdsl/dsl/generation/xhtml-email

imports 
  libstrategolib 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/utils/-
    
rules
  
  emails-to-xml =
    ?def@Define([Email()], x, args, elems1)
    ; email_templates := <EmailDefinitions> x
 /*   ; <debug> ["email_templates: ", email_templates]
    ; email_calls := <EmailCallList> x
    ; <debug> ["email_calls: ", email_calls]
    ; <map(construct-email(|def))> email_calls*/
 //   ; <debug> ["email_templates: ", email_templates]
    ; <map(email-to-xml2)> email_templates
  
 /* construct-email(|def) =
    call_from_page := <id>
    ; <email-to-xml(|call_from_page)> def */

  
 /* emails-to-xml =
    ?def@Define([Email()], x, args, elems1)
    ; email_templates := <EmailDefinitions> x
    */
  
  email-to-xml2 : 
    Define([Email()], x, fargs, elems) ->
      XmlFile(["view"], <concat-strings>[x, ".xhtml"], 
		%>
		<?xml version="1.0" encoding="UTF-8"?>
		
		<m:message xmlns="http://www.w3.org/1999/xhtml"
		           xmlns:m="http://jboss.com/products/seam/mail"
		           xmlns:h="http://java.sun.com/jsf/html"
		           xmlns:c="http://java.sun.com/jstl/core">
            <%= <email-elems-to-xhtml> elems::* %>
		</m:message>
		<%)
//  where <debug> ["email-to-xml2: ", x]
  
  /*(template_name, page) := <EmailCallToTemplateName> call_from_page
      ; ThisCall("email", [ThisCall(name2, aargs)]) := call_from_page
      ; {|
          ArrayIndex : bargs := <map(parameters-to-array-calls(|page))> aargs
        |}
      ; arg_list := <zip> (fargs, bargs)
 /*     ; {| PageName
         : rules ( PageName := page )
         ; elems2 := <try(sometd(translate-if))> elems1
         |} */
 //     ; <debug> ["elems1: ", elems1]
 //     ; elems3 := <try(sometd(transform-variables(|arg_list)))> elems1
  //     elems2 := <email-elems-to-xhtml> elems1

  email-elems-to-xhtml =
    filter-concat-warn(email-elem-to-xhtml <+ undefined-template-call | "email-elem-to-xhtml undefined: ")
  
  email-elem-to-xhtml :
    TemplateCall("to", [elem], []) ->
    %>
      <m:to address="<%= email_address %>" />
    <%
    where email_address := <arg-to-value-string> elem
  
  email-elem-to-xhtml :
    TemplateCall("from", [String(name), String(email)], []) ->
    %>
      <m:from name="<%= name %>" address="<%= email %>" />
    <%
    
  email-elem-to-xhtml :
    TemplateCall("subject", elems, _) ->
    %>
      <m:subject>
        <%= subject::cdata %>
      </m:subject>
    <%
    where [elem] := elems
        ; subject := <arg-to-value-string> elem
  
  email-elem-to-xhtml :
    TemplateCall("body", [], elems) ->
    %>
      <m:body>
        <%= <elems-to-xhtml> elems::* %>
      </m:body>
    <%

  construct-email-definition(|def) =
    call_from_page := <id>
    ; <transform-email-template(|call_from_page)> def
  
   transform-email-template(|call_from_page) : 
     Define([Email()], x, fargs, elems1) -> Define([Email()], template_name, fargs, elems3)
     where (template_name, page) := <EmailCallToTemplateName> call_from_page
         ; ThisCall("email", [ThisCall(name2, aargs)]) := call_from_page
         ; {|
             ArrayIndex : bargs := <map(parameters-to-array-calls(|page))> aargs
           |}
         ; arg_list := <zip> (fargs, bargs)
         ; rules ( Component := page )
         ; elems2 := <try(sometd(transform-variables(|arg_list)))> elems1
         ; elems3 := <try(sometd(translate-if))> elems2        

  transform-variables(|arg_list) :
    Var(name) -> exp
    where <collect(?(Arg(name, _), exp))> arg_list  

  parameters-to-array-calls(|x_page) =
    ?_{Type(t)}
    ; rules( ArrayIndex := <(ArrayIndex; inc) <+ !0> )
    ; x_parm := <concat-strings>[<GetEmailArgumentsList> x_page, "[", <ArrayIndex; int-to-string>, "]"] 
    ; !FieldAccess(Var(x_page){Type("Component")}, x_parm) {Type(t)}
    