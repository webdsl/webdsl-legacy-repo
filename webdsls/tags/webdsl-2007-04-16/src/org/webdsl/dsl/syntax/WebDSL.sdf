module org/webdsl/dsl/syntax/WebDSL

hiddens
  context-free start-symbols Application
    
exports

  sorts Id QId Int

  lexical syntax
    [a-zA-Z][a-zA-Z0-9\_]* -> Id
    {Id "."}+              -> QId
    [0-9]+                 -> Int
    "\"" ~[\"\n]* "\""     -> String
    [\ \t\n\r]             -> LAYOUT
    "//" ~[\n\r]* [\n\r]   -> LAYOUT
  lexical restrictions
    Id -/- [a-zA-Z0-9] 

exports

  sorts Word Words Keyword

  lexical syntax
    ~[\ \t\n\r]+ -> Word
    Keyword      -> Word {reject}
    "end"        -> Keyword
  lexical restrictions
    Word -/- ~[\ \t\n\r]
  context-free syntax
    Word*   -> Words

exports

  sorts Application

  context-free syntax

    "application" QId Section* -> Application {cons("Application")}

    "section" Id+ "." Definition* -> Section {cons("Section")}

    "description" Words "end" -> Description {cons("Description")}

    "note" Words "end" -> Description {cons("Note")}

    Description -> Section
    Description -> Definition

exports

  sorts Entity Property Sort Annotation

  context-free syntax

    Id ":" Id "{" Property* "}" -> Entity {cons("Entity")}
    Id "{" Property* "}"        -> Entity {cons("EntityNoSuper")}
    Entity                      -> Definition

    Id "::" Sort "(" {Annotation ","}* ")" -> Property {cons("PropertySimple")}
    Id "::" Sort                           -> Property {cons("PropertySimpleNoAnno")}
   
    Id "<>" Sort "(" {Annotation ","}* ")" -> Property {cons("PropertyComp")}
    Id "<>" Sort                           -> Property {cons("PropertyCompNoAnno")}
    
    Id "->" Sort "(" {Annotation ","}* ")" -> Property {cons("PropertyRef")}
    Id "->" Sort                           -> Property {cons("PropertyRefNoAnno")}
       
    Id                     -> Sort {cons("SimpleSort")}
    Id "<" {Sort ","}+ ">" -> Sort {cons("GenericSort")}
    Id "?"                 -> Sort {cons("OptionalSort")}

    Id                           -> Annotation {cons("SimpleAnno")}
    Id "(" {Annotation ","}* ")" -> Annotation {cons("ParamAnno")}


exports

  sorts Action Statements Statement Exp

  context-free syntax
  
    "action" Id Block  -> Action {cons("Action")}
    
    Action		       -> Definition
    Statement*		   -> Statements
    
    "{" Statement* "}" -> Block {cons("Block")}
    Block              -> Statement
    Assignment ";"	   -> Statement {cons("Assign")}
    Exp ";"		       -> Statement {cons("Stat")}

    "if" "(" Exp ")" Statement "else" Statement -> Statement {cons("If")}

    "for" "(" Id "in" Sort "where" Exp "ordered" "by" Id "ascending" ")" 
       Statement -> Statement {cons("For")}

exports

  sorts Rules Rule

  context-free syntax

    "rules" Rule* -> Definition {cons("Rules")}

    Exp "=" Exp -> Rule {cons("Equation")}

exports

  sorts Exp

  context-free syntax
  
    Int                    -> Exp {cons("Int")}
    String                 -> Exp {cons("String")}
    QId			           -> Exp {cons("Var")}

    Id "{" Assignment* "}" -> Exp {cons("ObjectCreation")}
    Id ":=" Exp            -> Assignment {cons("Assignment")}
    
    "[" Mapping* "]"       -> Exp {cons("MapCreation")}
    Exp "->" Exp           -> Mapping {cons("Mapping")}
    
    "[" {Exp ","}* "]"     -> Exp {cons("CollectionCreation")}
    
    "create" Sort	       -> Exp {cons("Create")}
    "enter" {Exp ","}+	   -> Exp {cons("Enter")}
    "find" Sort Exp        -> Exp {cons("Find")}
    "show" {Exp ","}+      -> Exp {cons("Show")}
    Id "(" {Exp ","}* ")"  -> Exp {cons("FunCall")}

    Exp "==" Exp           -> Exp {cons("Eq")}
    Exp "!=" Exp           -> Exp {cons("Eq")}
    Exp "+" Exp            -> Exp {cons("Plus")}
    

    