module org/webdsl/dsl/modules/styling/typechecker/types

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front

rules

  type-of =
    type-of-style-property <+ type-of-style-expression <+ type-of-style-value <+ style-error

  //@todo: this has to be done better...
  style-error =
    ( ?StyleProperty(_) <+ ?StyleValue(_) <+ ?StyleValue(_, _) <+
      ?StyleValueExpression(_, _) <+ ?StyleAdd(_, _) <+ ?StyleSub(_, _) <+
      ?StyleMul(_, _) <+ ?StyleDiv(_, _) <+ ?StylePropertyValue(_, _) <+
      ?StyleValueExpression(_, _) <+ ?StyleVar(_) )
    ; !StyleSort("Error")

rules
  
  style-types-compatible =
    ?(StyleSort(t, u), StyleSort(t, u))
    
  style-types-compatible =
    ?(StyleSort(t), StyleSort(t))
  
  style-types-compatible =
    ?(StyleSort("Length"), StyleSort(t))
    ; where ( <style-types-compatible> (<get-length-types>, StyleSort(t)) )
  
  style-types-compatible =
    ?(StyleSort(t), StyleSort("Length"))
    ; where ( <style-types-compatible> (<get-length-types>, StyleSort(t)) )
  
  style-types-compatible =
    ?(sort*, StyleSort(t, u))
    ; where ( <elem> (StyleSort(t, u), sort*) )
   
  style-types-compatible =
    ?(sort*, StyleSort(t))
    ; where ( <elem> (StyleSort(t), sort*) ) 
    
  style-types-compatible =
    ?(sort*, sort*)

rules

  type-of-style-property :
    StyleProperty("align") -> StyleSort("Align")
    
  type-of-style-property :
    StyleProperty("background-color") -> StyleSort("Color")

  type-of-style-property :
    StyleProperty("border-color") -> StyleSort("Color")
      
  type-of-style-property :
    StyleProperty("border-width") -> <get-length-types>

  type-of-style-property :
    StyleProperty("border-style") -> StyleSort("BorderStyle")

  type-of-style-property :
    StyleProperty("border-left-color") -> StyleSort("Color")
      
  type-of-style-property :
    StyleProperty("border-left-width") -> <get-length-types>

  type-of-style-property :
    StyleProperty("border-left-style") -> StyleSort("BorderStyle")

  type-of-style-property :
    StyleProperty("border-right-color") -> StyleSort("Color")
      
  type-of-style-property :
    StyleProperty("border-right-width") -> <get-length-types>

  type-of-style-property :
    StyleProperty("border-right-style") -> StyleSort("BorderStyle")

  type-of-style-property :
    StyleProperty("border-top-color") -> StyleSort("Color")
      
  type-of-style-property :
    StyleProperty("border-top-width") -> <get-length-types>

  type-of-style-property :
    StyleProperty("border-top-style") -> StyleSort("BorderStyle")

  type-of-style-property :
    StyleProperty("border-bottom-color") -> StyleSort("Color")
      
  type-of-style-property :
    StyleProperty("border-bottom-width") -> <get-length-types>

  type-of-style-property :
    StyleProperty("border-bottom-style") -> StyleSort("BorderStyle")

  type-of-style-property :
    StyleProperty("font") -> StyleSort("Font")

  type-of-style-property :
    StyleProperty("font-color") -> StyleSort("Color")
    
  type-of-style-property :
    StyleProperty("font-line") -> StyleSort("Line")
  
  type-of-style-property :
    StyleProperty("font-size") -> <get-length-types>
   
  type-of-style-property :
    StyleProperty("font-style") -> StyleSort("FontStyle")
    
  type-of-style-property :
    StyleProperty("height") -> <get-length-types>
  
  type-of-style-property :
    StyleProperty("image") -> StyleSort("Uri")

  type-of-style-property :
    StyleProperty("image-repeat") -> StyleSort("Repeat")

  type-of-style-property :
    StyleProperty("line-height") -> <get-length-types>
      
  type-of-style-property :
    StyleProperty("margin") -> <get-length-types>

  type-of-style-property :
    StyleProperty("margin-top") -> <get-length-types>
  
  type-of-style-property :
    StyleProperty("margin-bottom") -> <get-length-types>
  
  type-of-style-property :
    StyleProperty("margin-left") -> <get-length-types>
  
  type-of-style-property :
    StyleProperty("margin-right") -> <get-length-types>

  type-of-style-property :
    StyleProperty("orientation") -> StyleSort("Orientation")
             
  type-of-style-property :
    StyleProperty("padding") -> <get-length-types>

  type-of-style-property :
    StyleProperty("padding-top") -> <get-length-types>
  
  type-of-style-property :
    StyleProperty("padding-right") -> <get-length-types>
  
  type-of-style-property :
    StyleProperty("padding-bottom") -> <get-length-types>
  
  type-of-style-property :
    StyleProperty("padding-left") -> <get-length-types>

  type-of-style-property :
    StyleProperty("separator") -> StyleSort("Separator")

  type-of-style-property :
    StyleProperty("spacing") -> <get-length-types>

  type-of-style-property :
    StyleProperty("spacing-right") -> <get-length-types>

  type-of-style-property :
    StyleProperty("spacing-left") -> <get-length-types>

  type-of-style-property :
    StyleProperty("width") -> <get-length-types>
          
rules

  get-length-types = ![ StyleSort("Length", "px"),
                        StyleSort("Length", "pt"),
//                       StyleSort("Length", "mm"),
//                       StyleSort("Length", "cm"),
                       StyleSort("Length"),
                       StyleSort("Ems"),
//                       StyleSort("Exs"),
                       StyleSort("Percentage") ]
rules

  type-of-style-expression :
    StyleValueExpression(selector, prop) -> <type-of-style-property> prop

  type-of-style-expression :
    StyleAdd(expr1, expr2) -> <type-of> expr1
    where <style-types-compatible> (<type-of> expr1, <type-of> expr2)

  type-of-style-expression :
    StyleSub(expr1, expr2) -> <type-of> expr1
    where <style-types-compatible> (<type-of> expr1, <type-of> expr2)

  type-of-style-expression :
    StyleMul(expr1, expr2) -> <type-of> expr1
    where <style-types-compatible> (<type-of> expr1, <type-of> expr2)

  type-of-style-expression :
    StyleDiv(expr1, expr2) -> <type-of> expr1
    where <style-types-compatible> (<type-of> expr1, <type-of> expr2)
     
  type-of-style-expression :
    StylePropertyValue(matchdef, prop) -> <type-of-style-property> prop

rules

  type-of-style-value :
    StyleValue(value, unit) -> <type-of-style-unit> unit
    
  type-of-style-value :
    StyleValue(sort@StyleSort(s), values) -> sort

  type-of-style-value :
    StyleValue(Hash(color)) -> StyleSort("Color")
    
  type-of-style-value :
    StyleValue(Uri(address)) -> StyleSort("Uri")

  type-of-style-value :
    StyleValue("auto") -> StyleSort("Avoid")
  
  type-of-style-value :
    StyleVar(x) -> <TypeOf> x

rules

  is-values-of-sort =
    ?(sort, val*)
    ; <map(is-value-of-sort(|sort))> val*
    
  is-value-of-sort(|sort) =
    ?StyleValueExtension(val)
    ; <elem> (val, <values-of-sort> sort)
  
  is-value-of-sort(|sort) =
    ?StyleValueExtension(val)
    ; where ( <?StyleSort("Font")> sort )
    ; id
  
  values-of-sort :
    StyleSort("Align") -> ["left", "right", "center"]
  
  values-of-sort :
    StyleSort("Color") -> ["red", "green", "blue", "yellow", 
                           "orange", "brown", "black", "white",
                           "cyan", "magenta", "purple", "grey"]

  values-of-sort :
    StyleSort("Repeat") -> ["horizontal", "vertical", "both", "none"]

  values-of-sort :
    StyleSort("BorderStyle") -> ["solid", "dotted", "dashed", "double", "none"]

  values-of-sort :
    StyleSort("Line") -> ["under", "over", "through", "none"]

  values-of-sort :
    StyleSort("Orientation") -> ["horizontal", "vertical"]

  values-of-sort :
    StyleSort("Separator") -> ["pipe", "dot", "comma", "dash", "underscore", "colon", "semicolon", "tab", "none"]
  
  values-of-sort :
    StyleSort("FontStyle") -> ["italic", "bold", "normal"]


rules

  type-of-style-unit :
    "%" -> StyleSort("Percentage")
  
  type-of-style-unit :
    "px" -> StyleSort("Length", "px")
  

  type-of-style-unit :
    "pt" -> StyleSort("Length", "pt")

/*  
  type-of-style-unit :
    "mm" -> StyleSort("Length", "mm")
  
  type-of-style-unit :
    "cm" -> StyleSort("Length", "cm")
*/
  
  type-of-style-unit :
    "em" -> StyleSort("Ems")

rules

  // @todo: ugly, ugly!! Use resolve for this.
  is-xhtml-element =
    ?"par" <+ ?"section" <+ ?"text" <+ ?"navigate" <+ ?"header" <+ ?"block" <+
    ?"menubar"  <+ ?"menu" <+ ?"menuheader" <+ ?"menuitem" <+ ?"list" <+ ?"listitem" <+ ?"container" <+
    ?"group" <+ ?"groupitem" <+ ?"label" <+ ?"form" <+ ?"action" <+ ?"actionLink" <+ ?"input" <+
    ?"table" <+ ?"row" <+ ?"inputText" <+ ?"image"
    


    
