module org/webdsl/dsl/modules/styling/typechecker/declare

imports
  libstrategolib

imports
  libwebdsl-front

strategies

  declare-style-section =
    ?StyleSection(name, defs)
    ; where (
        if <oncetd(\ Selector(s, ss) -> Selector(s, ss) where <oncetd(is-xhtml-element)> s \)> defs then
          rules ( StyleSheetsAllPages :+= name )
        end
    )

  declare-style-definitions =
    map(declare-style-definition)

  declare-style-definition =
    ?def@StyleDefinition(selector, stat1*)
    ; where (
      {| ThisSelector
       : s := <remove-position-annos> selector
       ; rules ( ThisSelector := s )
       ; rules (
	       StyleDefinition :+ s -> def
	       StyleDefinitions :+= <remove-position-annos> def
	     )
	   ; if not(InSection) then
	       <alltd(declare-style-declaration)> stat1*
	     else
	       if Selector(SimpleSelector(m@MatchDefinition(name, arg*)), l) := selector; <matches-definition> m then
	         <add-stylesheet> (<InSection>, name)
	       end
	     end
	   |}
	  )
  
  declare-style-declarations =
    map(declare-style-declaration)
    
  declare-style-declaration =
    ?decl@StyleDeclaration(prop, val)
    ; where (
        selector := <ThisSelector>
        ; p := <remove-position-annos> prop
        ; v := <remove-position-annos> val
        ; rules (
            StyleDeclarations :+ selector -> (p, v)
            StyleProperties :+ selector -> p
          )
//        ; <declare-style-value> (name, t*, p, v)
        ; <declare-style-value> (p, v)
//        ; <debug> ["____styledecl: ", (name, t*, p), v]
//        ; <debug> ["_____selector: ", <ThisSelector>, v]
//        ; <debug> ""
      )

  declare-style-value =
    ?(p, v)
    ; where (
        selector := <ThisSelector>
        ; rules ( StyleValue : (selector, p) -> v )
/*        ; if Selector(SimpleSelector(_, m@MatchDefinition(_, _)), l) := selector then
            rules ( StyleValue : (Selector(SimpleSelector(m), l), p) -> v )
          end*/
//        ; <pp-aterm(!"decl-val: ")> [selector, p, v]
//; if <sometd(?"topmenu")> selector then
//    <debug(!"decl-val: ")> [selector, p, v]
//  end 
      )

  declare-style-var-decl =
    ?StyleVarDeclInit(x, srt, e)
    ; where (
        e' := <strip-annos> e
        ; rules (
            StyleVariable : x -> e'
            TypeOf : x -> srt
          )
      )

strategies

  declare-layout-definition =
    ?def@LayoutDefinition(type, matchdef, stat*)
    ; where (
        MatchDefinition(n, arg*) := matchdef
        ; t* := <map(?Arg(_,<id>))> arg*
        ; name := <concat-strings> [n, "Layout"]
        ; <add-stylesheet> (name, n)
        ; rules (
            LayoutDefinition : (n, t*) -> def
          )
      )
  
  declare-layout-definition =
    ?def@LayoutDefinition(matchdef, stat*)
    ; where (
        MatchDefinition(n, arg*) := matchdef
        ; t* := <map(?Arg(_,<id>))> arg*
        ; name := <concat-strings> [n, "Layout"]
        ; <add-stylesheet> (name, n)
        ; rules (
            LayoutDefinition : (n, t*) -> def
          )
      )
  
  declare-layout-expression =
    ?NamedLayoutExpression(name, expr*)
    ; where ( 
        rules ( LayoutIdentifiers :+= name )
        ; <map(declare-layout-expression)> expr*
      )

  declare-layout-expression =
    ?LayoutExpression(MatchDefinition(x, farg*))
    ; where (
        t1* := <map(?Arg(_,<id>))> farg*
        ; (name, t2*) := <InDef>
        ; rules (
            NamedLayoutExpression : (x, t*) -> (name, t2*)
          )
      )
