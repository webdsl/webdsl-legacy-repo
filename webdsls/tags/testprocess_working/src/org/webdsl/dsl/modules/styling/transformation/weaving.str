module org/webdsl/dsl/modules/styling/transformation/weaving

imports
  libstrategolib
  libwebdsl-front

strategies
    
  weave-layout-information =
    alltd(weave-layout)

/*  
  weave-all-style =
    alltd(weave-style)
*/  
rules

  rewrite-template-call =
    RewriteCall <+ id
    
  weave-layout :
    def|[ define template x(farg*){ elem1* } ]| -> def|[ define template x(farg*){ elem2* } ]|
    where {| RewriteCall, ThisPage, ThisArgumentTypes
           : x_page := <concat-strings> [x, "Layout"]
           ; t* := <map(?Arg(_,<id>))> farg*
           ; x' := <strip-annos> x
           ; rules ( 
               ThisPage := x_page
               ThisTemplate := x'
               ThisArgumentTypes := t*
             )
//           ; <debug> [".....", x, x', x_page]
//        ; not( <elem> ((x, t*), <bagof-ProcessedLayoutDefinitions> ) )
//        ; rules ( ProcessedLayoutDefinitions :+= (x, t*) )
//        ; call* := <filter(filter-template-calls)> elem1*
        ; x' := <strip-annos> x
        ; LayoutDefinition(type, matchdef, stat*) := <LayoutDefinition> (x', t*)
//        ; <debug> ["---layout-def: ", LayoutDefinition(type, matchdef, stat*)]
        ; <alltd(gather-layout-rules(|elem1*))> stat*
//        ; <debug> ["_______elem1: ", elem1*]
        ; elem2* := <map(rewrite-template-call)> elem1*
//        ; <debug> ["_______elem2: ", elem2*]
//        ; <debug> ""
        |}

  
  filter-template-calls :
    TemplateCall(t, arg*, passign*, elem*) -> TemplateCall(t, arg*, passign*, elem*)
    where is-call-to-toplevel-template
  
  filter-template-call =
    ?TemplateCall(t, arg*, passign*, elem*)

    
  gather-layout-rules(|calls) =
    ?LayoutStatement(expr)
    ; <gather-layout-rules(|calls)> expr
    
  gather-layout-rules(|calls) =
    ?LayoutExpression(MatchDefinition(x, farg*))

  gather-layout-rules(|calls) =
    ?NamedLayoutExpression(str10, [expr1, expr2])
    ; if LayoutExpression(MatchDefinition(x1, farg1*)) := expr1 ; LayoutExpression(MatchDefinition(x2, farg2*)) := expr2 then
      t1* := <map(?Arg(_,<id>))> farg1*
      ; t2* := <map(?Arg(_,<id>))> farg2*
//   	    ; <debug> ["_______x1, x2: ", x1, t1*, x2, t2*]
      ; [call1] := <filter(find-template-call(|x1, t1*))> calls
//	    ; <debug> ["_______call1: ", call1]
      ; [call2] := <filter(find-template-call(|x2, t2*))> calls
//	    ; <debug> ["_______call2: ", call2]
      
      ; s1 := <construct-selector> ("template", x1, t1*)
//	    ; <debug> ["_______val0: ", val0, unit0]
    else
      LayoutExpression(x1) := expr1
      ; LayoutExpression(x2) := expr2
      
//	    ; <debug> ["_______x1, x2: ", x1, x2]
      ; [call1] := <filter(find-template-element(|x1))> calls
//	    ; <debug> ["_______call1: ", call1]
      ; [call2] := <filter(find-template-element(|x2))> calls
//	    ; <debug> ["_______call2: ", call2]
        
      ; s1 := <construct-descendant-selector> (<ThisTemplate>, [], x1)
    end

    ; StyleValue(val0, unit0) := <StyleValue> (s1, StyleProperty("width"))
      
    ; str0 := <newname> str10; str01 := <concat-strings> [str0, " ",  "_container_"]
    ; str1 := <newname> x1; str11 := <concat-strings> [str1, " ",  "_col1_"]
    ; str2 := <newname> x2; str21 := <concat-strings> [str2, " ",  "_col2_ clearfix"]
    ; str3 := <newname> "wrapper"; str31 := <concat-strings> [str3, " ",  "_colwrap_"]
    ; sel0 := <name-to-css-class> str0
    ; sel1 := <name-to-css-class> str1
    ; sel2 := <name-to-css-class> str2
    ; sel3 := <name-to-css-class> str3
    ; rules ( 
        RewriteCall : call1 -> 
          elem |[
            block(str10)[] {
              block("_colmask_ _leftmenu_")[] {
		          block(str01) []{
		            block(str11)[] { call1 }
		            block(str31)[] {
		              block(str21) []{ call2 }
		            }
		          }
		        }
		      }
          ]|
        RewriteCall : call2 -> elem|[ dummy()[]{} ]|
      )
    ; <emit-css-rules> //@todo: use emit-style-definition!
        rule* |( 
           sel0 {
             left: val0 unit0;
           }
           
           sel1 {
             width: val0 unit0;
             right: val0 unit0;
           }
           
           sel2 {
             margin-left: val0 unit0;
             right: 100%;
           }
           
           sel3 {
             width: 50%;
             right: val0 unit0;
           }
        )|
    /* If a background color is set on one of the templates in this 2-column layout,
     * the background colors of other divs (added above) have to be set as well. */
    ; if (color1 := <StyleValue> (<construct-selector> ("template", x1, t1*), StyleProperty("background-color")))  then
        val2 := <color-to-css> color1
      else
        val2 := expr |( #ffffff )|
      end
    ; sel100 := <construct-nested-selector(|"._leftmenu_ ")> (<ThisTemplate>, <ThisArgumentTypes>)
//    ; <debug> ["___val2", val2, sel100]
    ; <set-background-color> (<concat-strings> [<name-to-css-class> str10, " ", sel100], val2)
    ; if (color2 := <StyleValue> (<construct-selector> ("template", x2, t2*), StyleProperty("background-color")))  then
        val4 := <color-to-css> color2
      else
        val4 := |( #ffffff )|
      end
//    ; <debug> ["___val4", val4, sel0]
    ; <set-background-color> (sel0, val4)


  //@todo: bring up to date in accordance with rule above!
  gather-layout-rules(|calls) =
    ?NamedLayoutExpression(str10, [expr1, expr2])
    ; LayoutExpression(MatchDefinition(x1, farg1*)) := expr1
    ; LayoutExpression(MatchDefinition(x2, farg2*)) := expr2
    ; t1* := <map(?Arg(_,<id>))> farg1*
    ; t2* := <map(?Arg(_,<id>))> farg2*
    ; StyleValue(val0, unit0) := <StyleValue> (<construct-selector> ("template", x2, t2*), StyleProperty("width"))
    ; [call1] := <filter(find-template-call(|x1, t1*))> calls
    ; [call2] := <filter(find-template-call(|x2, t2*))> calls
    ; str0 := <newname> str10
    ; str1 := <newname> x1
    ; str2 := <newname> x2
    ; str3 := <newname> "wrapper"
    ; sel0 := <name-to-css-id> str0
    ; sel1 := <name-to-css-id> str1
    ; sel2 := <name-to-css-id> str2
    ; sel3 := <name-to-css-id> str3
    ; rules ( 
        RewriteCall : call1 -> 
          elem |[
            block(str10, "")[] {
              block("", "_colmask_ _rightmenu_") []{
          block(str0, "_container_")[] {
              block(str3, "_colwrap_")[] {
              block(str1, "_col1_")[] { call1 }
            }
            block(str2, "_col2_ clearfix")[] { call2 }
          }
        }
            }
          ]|
        RewriteCall : call2 -> elem|[ dummy()[]{} ]|
      )
    ; val1 := <value-to-negative-value> val0
    ; <emit-css-rules> //@todo: use emit-style-definition!
        rule* |( 
           sel0 {
             margin-left: val1 unit0;
           }
           
           sel1 {
             margin-left: val0 unit0;
           }
           
           sel2 {
             width: val0 unit0;
         left: val0 unit0;
           }
           
           sel3 {
             width: 50%;
         left: 50%;
           }
        )|
    /* If a background color is set on one of the templates in this 2-column layout,
     * the background colors of other divs (added above) have to be set as well. */
    ; if (color1 := <StyleValue> (<construct-selector> ("template", x2, t2*), StyleProperty("background-color")))  then
        val3 := <color-to-css> color1
      else
        val3 := |( #ffffff )|
      end
    ; sel100 := <construct-nested-selector(|"._rightmenu_ ")> (<ThisTemplate>, <ThisArgumentTypes>)
//    ; <debug> ["___val3", sel100]
    ; <set-background-color> (<concat-strings> [<name-to-css-id> str10, " ", sel100], val3)
    ; if (color2 := <StyleValue> (<construct-selector> ("template", x1, t1*), StyleProperty("background-color")))  then
        val5 := <color-to-css> color2
      else
        val5 := |( #ffffff )|
      end
//    ; <debug> ["___val5", val5, sel0]
    ; <set-background-color> (sel0, val5)
    

  construct-nested-selector(|selector) =
    ?(n, f*)
    ; if (n1, f1*) := <NamedLayoutExpression> (n, f*) then
        !<concat-strings> [selector, <construct-nested-selector(|selector)> (n1, f1*)]
      else
        !selector
      end


  find-template-call(|x1, t1*) =
    ?TemplateCall(x, arg*, passign*, elem*);
    where ( <?x1> x; t1* := <map(type-of)> arg* )
  
  find-template-element(|a) =
    ?TemplateCall("block", arg, passign* ,elem*)
    ; where ( <elem> (String(a), arg) )
    
rules

  weave-style :
    def |[ define template x(farg*){ elem1* } ]| -> def |[ define template x(farg*){ elem elem1* } ]|
    where t* := <map(?Arg(_,<id>))> farg*
        ; x' := <strip-annos> x
        ; StyleValue(Uri(value)) := <StyleValue> (x', t*, StyleProperty("image"))
        ; e0 := String(value)
        ; elem := call |[ image(e0) ]|

 
