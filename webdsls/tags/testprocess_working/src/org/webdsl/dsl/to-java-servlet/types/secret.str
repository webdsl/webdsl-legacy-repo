module org/webdsl/dsl/to-java-servlet/types/secret

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front
  
rules
  java-servlet-element-id : 
    tc@elem|[ inputSecret(e)[passign*]{} ]|-> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  handle-actions-input-to-java-servlet :
    tc@elem|[ inputSecret(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code> 
    bstm*|[
          
        ident += "~inputident"+uniqueid;
        
        if(ps.getRequest().getParameter(ident)!=null)
        {
            String x_temp = ps.getRequest().getParameter(ident);
            bstm 
        }
      
    ]|
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; bstm := <input-assignment-to-java-servlet(|x_temp)> e
    
  elem-to-java-servlet : 
    tc@elem|[ inputSecret(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code>
    bstm* |[ 
    String x_temp = ident+"~inputident"+uniqueid;
    out.print("<input name=\""+x_temp+"\"  type=\"password\" value=\"");
    if(inSubmittedForm)
    {
      out.print(ps.getRequest().getParameter(x_temp));
    }
    else
    {
      out.print(e1);
    }
    out.println("\" />"); 
    ]|
    with  inputident := <get-inputnumber> tc
        ; e1 := <arg-to-value-string-java-servlet> e
        ; x_temp := <newname> "temp"
    
  elem-to-java-servlet :
    elem |[ outputSecret(e)[passign*]{} ]| ->
    java |[ out.println("********"); ]|

    /*
    %>
      <s:decorate>
        <h:inputSecret styleClass="inputSecret" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    with estring := <arg-to-value-string> e
       ; req := <input-of-required-property(|e)>
    */   
/*
  sort-to-java-type-string : SimpleSort("Secret") -> "java.lang.String"

rules // types

  builtin-java-type :
    SimpleSort("Secret") -> type|[ String ]|

  builtin-java-type-default-value :
    SimpleSort("Secret") -> java|[ "" ]|

  type-default-value :
    SimpleSort("Secret") -> exp|[ "" ]|

  check-builtin-signature :
    (s@SimpleSort(_), "digest", []) -> SimpleSort("Secret")
    where SimpleSort("Secret") := s

  check-builtin-signature :
    (s, "check", [s]) -> SimpleSort("Bool")
    where SimpleSort("Secret") := s

  type-compatible =
    ?(SimpleSort("Secret"), SimpleSort("String"))

rules // desugar

  DeriveInput :
    elem|[ input(e){} ]| -> elem|[ inputSecret(e){} ]|
    where SimpleSort("Secret") := <type-of> e

  DeriveOutput :
    elem|[ output(e){} ]| -> elem|[ outputSecret(e){} ]|
    where SimpleSort("Secret") := <type-of> e
*/
rules // java
   call-to-java-servlet :
     exp|[ e1.digest() ]| ->
     java|[ {|
       org.jasypt.util.password.StrongPasswordEncryptor x_var2 =
         new org.jasypt.util.password.StrongPasswordEncryptor();
       String x_var = x_var2.encryptPassword(e2);
       | x_var
     |} ]|
     with e2 := <expression-to-java-servlet> e1
        ; x_var := <newname> "_string"
        ; x_var2 := <newname> "_passwordEncryptor"

   call-to-java-servlet :
     exp|[ e1.check(e2) ]| ->
     java|[ {|
       org.jasypt.util.password.StrongPasswordEncryptor x_var2 =
         new org.jasypt.util.password.StrongPasswordEncryptor();
       boolean x_var = x_var2.checkPassword(e4,e3);
       | x_var
     |} ]|
     with e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java-servlet> e2
        ; x_var := <newname> "_string"
        ; x_var2 := <newname> "_passwordEncryptor"

