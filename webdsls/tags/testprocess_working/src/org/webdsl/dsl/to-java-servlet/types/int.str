module org/webdsl/dsl/to-java-servlet/types/int

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front
  
rules
    
  java-servlet-element-id :
    tc@elem|[ inputInt(e)[passign*]{} ]| -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"
    
    //just load
  handle-actions-input-to-java-servlet :
    tc@elem|[ inputInt(e)[passign*]{} ]| -> //elem|[ var x : srt := e1 ]| ->
    <for-loop-counter-wrap-code> 
    bstm*|[
          
        ident += "~inputident"+uniqueid;
        
        if(ps.getRequest().getParameter(ident)!=null)
        {
            String name = ps.getRequest().getParameter(ident);
            //Integer x_temp1;
            //bstm
            //@todo use setter...
            //e1 = x_temp1;
            //out.println("todo:store result in hashmap");
            //inputs.put(ident,Integer.parseInt(name));
            int x_temp = Integer.parseInt(name);
            bstm 
        }
      
    ]|
    with  inputident := <get-inputnumber> tc
        //; e1 := <expression-to-java-servlet> e
        ; x_temp := <newname> "temp"
        ; bstm := <input-assignment-to-java-servlet(|x_temp)> e
        
        

     
/* @todo is going to be part of a strategy similar to the render, taking into account cflow elements 
(eg need to generate a dyn id for inputs in for loops)
  input-to-java-servlet-template :
    elem|[ inputInt(e){} ]| -> //elem|[ var x : srt := e1 ]| ->
    <generate-java-servlet-template-partial> java|[
       @Partial
       private void storeInputs() {
        String x_temp = "~inputident"+uniqueid;
        if(ps.getRequest().getParameter(x_temp)!=null)
        {
            String name = ps.getRequest().getParameter(x_temp);
            Integer x_temp1;
            bstm
            //@todo use setter...
            e1 = x_temp1;
        }
       }
    ]|
    with  e1 := <expression-to-java> e
        ; inputident := <pp-webdsl> e
        ; x_temp := <newname> "temp"
        ; x_temp1 := <newname> "temp1"
        ; bstm := <java-servlet-conversion-to-object> (type|[ Integer ]|,x_temp,x_temp1)
 */       
        
  elem-to-java-servlet :
    tc@elem|[ inputInt(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code>
    bstm* |[ 
    String x_temp = ident+"~inputident"+uniqueid;
    out.print("<input name=\""+x_temp+"\" value=\"");
    if(inSubmittedForm)
    {
      out.print(ps.getRequest().getParameter(x_temp));
    }
    else
    {
      out.print(e1);
    }
    out.println("\" />"); 
    ]|
    with  inputident := <get-inputnumber> tc
        ; e1 := <arg-to-value-string-java-servlet> e
        ; x_temp := <newname> "temp"
 

    /*
    %>
      <s:decorate>
        <h:inputText styleClass="inputInt" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    with estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>
    */
  elem-to-java-servlet :
    elem|[ outputInt(e)[passign*]{} ]| ->
    java |[ out.println(utils.HTMLFilter.filter(e1)); ]|
    with  e1 := <arg-to-value-string-java-servlet> e
    /*
    %>
      <h:outputText styleClass="outputInt" value="<%= estring %>"/>
    <%
    with estring := <arg-to-value-string> e
    */
/*
rules // type

  sort-to-java-type-string : SimpleSort("Int") -> "java.lang.Integer"

  builtin-java-type :
    SimpleSort("Int") -> type|[ Integer ]|

  builtin-wrapper-java-type :
    SimpleSort("Int") -> type|[ Integer ]|

  builtin-java-type-default-value :
    SimpleSort("Int") -> java|[ 0 ]|

  type-default-value :
    SimpleSort("Int") -> exp|[ 0 ]|

  eq-type-of :
    Int(x) -> SimpleSort("Int")

rules // desugar
  DeriveInput :
    elem|[ input(e){} ]| -> elem|[ inputInt(e){} ]|
    where SimpleSort("Int") := <type-of> e


  DeriveOutput :
    elem|[ output(e){} ]| -> elem|[ text(e){} ]|
    where SimpleSort("Int") := <type-of> e
*/
rules // java
   expression-to-java-servlet :
     Int(x) -> Lit(Deci(x))
     


