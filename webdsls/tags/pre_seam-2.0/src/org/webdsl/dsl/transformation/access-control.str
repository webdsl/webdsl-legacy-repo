/**

 Security rules for WebDSL
 
*/

module org/webdsl/dsl/transformation/access-control

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  
rules
  process-security=
    desugar-security
    ; declare-security
    ; typecheck-security  
    ; generate-security
    ; declare-definitions
    ; if AccessControlEnabled then
    ( try(sometd(apply-checks-to-page))  
      ;try(sometd(apply-checks-to-template-defs-actions))     
    //; try(attach-decision-classes-to-application)
      ; add-access-denied-page
    )
    end

    
  add-access-denied-page:
    Application(qid, sections) -> Application(qid, <concat>[sections, deniedpage])
    where deniedpage := 
      [ |[ section access denied page. 			    
                define page accessDenied()
			    {
			      title("Access Denied")
			      text("Access Denied")
			    } 
	    ]| 
	  ]
     
  generate-security:
  	Application(qid, sections) -> Application(qid, <concat>[ <collect(generate-security-defs);concat> sections, <map(try(remove-security-decs))>sections] )

  remove-security-decs:
    Module(ident,defs) -> Module(ident,<map(try(remove-security-decs))>defs)

  remove-security-decs:
    Section(ident,defs) -> Section(ident,<filter(not(?AccessControlDefinition(_)))>defs)

  generate-security-defs:
	AccessControlDefinition(defs) -> 
		<filter(security-subject
					<+ create-rule-classes
				)
				> defs
	where rules (
	  AccessControlEnabled := True()
	)

  // there can be only one of these (not yet checked)
  security-subject:
	AccessControlPrincipal($ident,props) -> 
			|[ 	
				section generated security.
				
				session securityContext {
				  	loggedIn	:: Bool
				    principal   -> $ident
				}
			  
			  	entity AccessControlRule
				{
					name :: String
					decisions -> Set<AccessControlDecision>
					checks -> Set<AccessControlCheck>
			    }
				
				entity AccessControlCheck
				{
					description :: Text
					results -> Set<AccessControlCheckResult>
					rule -> AccessControlRule (inverse=AccessControlRule.checks)
				}
				
				entity AccessControlCheckResult
				{
					check -> AccessControlCheck (inverse=AccessControlCheck.results)
					result :: Bool
					decision -> AccessControlDecision (inverse=AccessControlDecision.results)
				}
				 
				entity AccessControlDecision{
					rule -> AccessControlRule (inverse=AccessControlRule.decisions)
					endResult :: Bool
					principal -> $ident
					time :: Date
					results -> Set<AccessControlCheckResult>
				}
				
				/*
                define page login()
				{
                  var subject : $ident := $ident{};
				
                  form { 
                  table {
                    elem0*
                    row{ "username: " input(subject.username) }
				    row{ "password: " input(subject.password) }
				         
				  }
				  action("login", login())
				  action login() {
				      
				    var subjects : List<$ident> :=
				    select s from $ident as s 
				    where (s._username = ~subject.username) and (s._password = ~subject.password);
				          	
				    for sub : $ident in subjects do
				    securityContext.subject:=sub;
				    securityContext.loggedIn:=true;
				    end
				            
				  }
				          
				  action("logout", logout())
				  action logout() {
				    securityContext.loggedIn:=false;
				  }
				  }
			    }*/
			]|
			//where rules (
			//  Access-Control-Principal := $ident
			//)
			//where elem0* := <map(property-to-input-row)> props
 
  //property-to-input-row:
    //PropertyNoAnno($ident,kind,xsort) -> elem|[ row{ "$ident: " input(subject.$ident) } ]|

  create-rule-classes:
    st@AccessControlRule(checktype,matchstring,fargs,checks,acrules) -> []
    			/*|[ 	
				section generated rule entities $random.
			  	def0*
			]|*/
	where //$random := <new>
	   def0* := <create-rule-classes-helper> st
			
  create-rule-classes-helper:
	st@AccessControlRule(checktype,matchstring,fargs,checks,acrules) -> <fail>
			/*<concat>[
			[def|[ 		  
			  	globals { 
			  		var $varname : AccessControlRule := AccessControlRule
					{
						
					};	
				}
			]|]
			,
			  <filter(create-rule-classes-helper);concat> acrules
			]*/
	where //$varname := <concat-strings> ["ACRule",checktype,<remove-wildcards>matchstring]
	    
		 newlistfromtype :=  <concat> [<Security-Rules-List-From-Type <+ ![]> checktype , [st] ]
		; rules(
			Security-Rules-List-From-Type : checktype -> newlistfromtype
			//Security-Rule-Name : (checktype,matchstring) -> $varname
		)
		//; if checktype := "action" then <debug> <Security-Rules-List-From-Type> checktype end
		//;<filter(create-rule-classes-helper);concat> acrules

  remove-wildcards=
  	explode-string;map(try(?'*';!'1'));implode-string
  	
  generate-access-control-checks(|checktype,name,vars,previousname,previousrules)=
    if previousname := []
    then
  	  possibleTargets := <Security-Rules-List-From-Type> checktype
  	else
  	  possibleTargets := <concat> [<Security-Rules-List-From-Type<+![]> checktype,<filter(?AccessControlRule(checktype,_,_,_,_))> previousrules]
  	end
  	//; if checktype := "action" then <debug> possibleTargets end
  	; filteredrules := <filter(find-most-applicable-target-filter(|name,vars))> possibleTargets
  	; if filteredrules := [] 
  	  then
  	    pt := [AccessControlRule(checktype,"*",[],[AccessControlCheckExpression(False())],[])]
  	  else
  	    pt := filteredrules
  	  end 
  	; if previousname := []
  	then
  	 ( $decisionclassname := <concat-strings> ["ACDecision",checktype,name]
  	   ; $acrulename := <concat-strings> ["ACRule",checktype,name] )
  	else
  	 ( $decisionclassname := <concat-strings> ["ACDecision",previousname,checktype,name]
  	   ; $acrulename := <concat-strings> ["ACRule",previousname,checktype,name] )
  	end
  	; selectedchecks := <map(\AccessControlRule(_,_,_,checks,_) -> checks\);concat> pt
  	; selectedrules := <map(\AccessControlRule(_,_,_,_,acrules) -> acrules\);concat> pt
  	; if <elem> (checktype,<Visual-Check-Types>)
  	  then
  	    (
  	    if filteredrules := []
  	    then
  	      rulecheckactions :=[] //these visual things shouldn't be too restrictive, just ignore when nothing is specified
  	    else
  	      rulecheckactions := <map(\AccessControlCheckExpression(expr)->expr\;generate-extended-check);generate-conjunction-exp> selectedchecks
  	    end
  	    ;rules
  	    (
  	        Previous-Selected-Rules := selectedrules
			Previous-Decision-Name := <concat-strings> [checktype,name]
  	    )
  	    )
  	  else
  	    (rulecheckactions := <generate-security-checks-from-target(|$decisionclassname,vars,$acrulename)> selectedchecks
  	    ; otherclasses := <Generated-Decision-Classes <+ ![]>
	  	; prop0* := <map(try(vars-to-props))> vars
	  	; str0 := <double-quote> $acrulename
	  	//; e0* := <add-indices;map(generate-listinits-from-check(|$acrulename))> selectedchecks
	  	; def0* := <add-indices;map(generate-definition-from-check(|$acrulename))> selectedchecks
	  	; rules (
			Generated-Decision-Classes := 
				<concat>[
					def* |[
					entity $decisionclassname : AccessControlDecision{	
						prop0*
					}  
	
					globals {
						var $acrulename : AccessControlRule := AccessControlRule { 
						  name:=str0
			        	};
				    }
				    
				    def0*
					]|
				, otherclasses ]
				
			Access-Control-Decision-Class: (checktype,name) -> $decisionclassname
	
			Previous-Selected-Rules := selectedrules
			Previous-Decision-Name := <concat-strings> [checktype,name]
	  	
	  	))
  	  end
  	//; if checktype := "action" then <debug> rulecheckactions end
  	; !rulecheckactions

  generate-definition-from-check(|$rulename):
    (index,check) -> def|[ 
                        globals{
                          var $varname :AccessControlCheck := AccessControlCheck{ 
                          rule := $rulename
                          description := str0 }; 
                          
                        }
                     ]| 
   where $varname := <concat-strings> ["check",$rulename,<int-to-string> index]
   ; str0 := <pp-webdsl-to-string; double-quote; explode-string; filter(not(?'\n')); implode-string> check
   
 // generate-listinits-from-check(|rulename):
  //  (index,check)->  Var ( $varname )
  // where $varname := <concat-strings> ["check",rulename,<int-to-string> index]
            	
  vars-to-props:
	Arg($ident,$argsort) -> |[ $ident -> $classname]|
	where <defined-java-type> $argsort  
		; SimpleSort($classname) := $argsort	

  vars-to-props:
	Arg($ident,$argsort) -> |[ $ident :: $typename]|
	where <builtin-java-type> $argsort
	    ; SimpleSort($typename) := $argsort

  vars-to-props:
	Arg($ident,$argsort) -> |[ $ident -> $gentype<$thesort>]|
	where GenericSort($gentype,$thesort) := $argsort	
	    ; <defined-java-type> $thesort
		
  // only supports tail wildcards (*) so far
  find-most-applicable-target-filter(|name,vars):
	AccessControlRule(checktype,matchstring,fargs,checks,acrules) -> AccessControlRule(checktype,matchstring,fargs,newchecks,acrules)
	where 
	if not(matchstring := "*")
	then
	    (
		leftmatcher := <explode-string;reverse;drop-until(?'*');drop-while(?'*');reverse> matchstring
		; if leftmatcher := []
			then  
				(matchresulttemp := <left-match;implode-string> (<explode-string> name,<explode-string> matchstring)
				//still need to check whether it is precisely the name or something longer
				; if equal(|<explode-string;length> name, <explode-string;length> matchstring)
				  then matchresult := matchresulttemp
				  else matchresult := matchstring
				  end
				)
			else
				matchresult := <left-match;implode-string> (<explode-string> name,leftmatcher)
			end
		//; if checktype:="template" then <debug> [name,vars,fargs] end	
		; not(matchresult := matchstring) //if equal, left-match failed
		)
	end
	//check arguments
	; newfargs := <?MatchArgs(args,wc);!args> fargs
	; getWC := <?MatchArgs(args,wc);!wc> fargs
	; if getWC := None() then
	  newvars := vars
	else
	  newvars := <take(<length> newfargs)> vars
	end
	; //if <elem> (checktype,<Visual-Check-Types>)
	//then
	 // <eq> (newfargs,newvars)
	//else
	//(   //commented, needs to leak through for child rules  {|   FixVarsInCheck:
     <zip(try(dynamic-rule-check-vars ; extract-sort-from-arg) ; eq)> (newfargs,newvars)  //try because when failing will be treated as matching on expressions
	 ; newchecks := <map(try(fix-var-names-in-check))> checks
	//|}
	//)
	//end

  dynamic-rule-check-vars:
    (Arg(ident1,thesort1),Arg(ident2,thesort2)) -> (Arg(ident1,thesort1),Arg(ident2,thesort2)) 
    where rules(
             FixVarsInCheck : Var(ident1) -> Var(ident2)
          )
   
  fix-var-names-in-check:
    AccessControlCheckExpression(expr) -> AccessControlCheckExpression(newexpr)
    where newexpr:= <alltd(FixVarsInCheck)> expr
  
  extract-sort-from-arg:
	(Arg(ident1,thesort1),Arg(ident2,thesort2)) -> (thesort1,thesort2)
	 
  generate-security-checks-from-target(|$acdclassname,vars,$acrulename):
	xs ->
  		|[
  		    //var acdecision : $acdclassname := $acdclassname{
  		    //  rule :=$acrulename
  		    //};    
  			
  			//if(securityContext.loggedIn) {
  			//  acdecision.principal :=  securityContext.principal;
  			//}
  			
  			//stat2*
  			stat1*
  				
  			//acdecision.endResult := e0 ;
  			//acdecision.save();
  			//if ( acdecision.endResult = false )
  			//{
  			//  goto(accessDenied());
  			//}
  			
  			if ( e0= false )
  			{
  			  goto(accessDenied());
  			}
  			
  			
  		]|
  	where
  		numberedchecks := <add-indices> xs
  		; stat1* := <map(generate-security-checks-from-target-element(|$acrulename));concat> numberedchecks
  		; stat2* := <map(generate-security-checks-from-target-var)> vars
  		; e0 := <map(fix-var-name-in-check);generate-final-exp> numberedchecks
 
  generate-final-exp : 
    [x|xs] ->  |[  $varname && e0  ]| 
    where ($varname,_) := x
        ; e0 := <generate-final-exp> xs 
  
  generate-final-exp :  
    [x] -> Var($varname)
    where ($varname,_) := x
 
  fix-var-name-in-check:
    (index,anything) -> (newindex,anything)
    where newindex := <concat-strings> ["check",<int-to-string> index]
 
  generate-security-checks-from-target-element(|rulename):
	(index,AccessControlCheckExpression(expr)) ->  [|[ 
	                                                
													var $varname : Bool := e0;
													 
													//var $anyname : AccessControlCheckResult := AccessControlCheckResult{};
													//$anyname.decision := acdecision;
													//$anyname.result := $varname;
													//$anyname.check := $varnamecheck;
													//$anyname.save(); //this shouldn't be necessary, fix needed in manytoone generation, owning side needs to add to the list when setdecision is called
												 ]| ]
	where $varname := <concat-strings> ["check",<int-to-string> index]
	    ; $varnamecheck := <concat-strings> ["check",rulename,<int-to-string> index]
	    ; $anyname := <newname> "accessControlCheckResult"
	    ; e0 := <generate-extended-check> expr
	    
  generate-extended-check:
    expr -> e0	    
 	where extrachecks0 := <collect(ignore-for-exp <+ field-access-to-not-null-checks-first);concat> expr
	    ; if <oncetd(?FieldAccess(Var("securityContext"),"principal"))> expr
	      then
	      extrachecks := [ |[ securityContext.loggedIn ]| | extrachecks0 ]
	      else
	      extrachecks := extrachecks0
	      end
	    ; e0 := <concat;generate-conjunction-exp>[extrachecks,[expr]]

  ignore-for-exp =
    ?ForExp(oe, x, s, ie)	
// @todo adding !=null checks to avoid nullpointer exceptions, in the context of access control rules a nullpointer could be automatically
// resolved by deciding whether a null means returning true or false.
  
  //add-not-null-checks=
   // add-not-null-checks-eq
   // <+ add-not-null-checks-neq
    //<+ field-access-to-not-null-checks
     
  //add-not-null-checks-eq:
   // Eq(e1,e2) -> <concat>[newe1,newe2]
   // where newe1 := <field-access-to-not-null-checks> e1
   //     ; newe2 := <field-access-to-not-null-checks> e2

  //add-not-null-checks-neq:
   // NotEq(e1,e2) -> <concat>[newe1,newe2]
   // where newe1 := <field-access-to-not-null-checks> e1
   //     ; newe2 := <field-access-to-not-null-checks> e2

  field-access-to-not-null-checks-first:
    fa@FieldAccess(ent,prop)-> return
    where check := NotEq(fa,Null())
        ; if Var(varname) := ent
        then
          checks := [ NotEq(Var(varname),Null()) ]  //the null check for the property being accessed is left out, needs to be further examined
                                                    // to decide whether to add a not null check or not
        else
          checks := []
        end
        ; if newchecks := <field-access-to-not-null-checks> ent
        then
          return := <concat> [newchecks, checks]
        else
          return := checks
        end

  field-access-to-not-null-checks:
    fa@FieldAccess(ent,prop)-> return
    where check := NotEq(fa,Null())
        ; if Var(varname) := ent
        then
          checks := [ NotEq(Var(varname),Null()),check ]
        else
          checks := [check]
        end
        ; if newchecks := <field-access-to-not-null-checks> ent
        then
          return := <concat> [newchecks, checks]
        else
          return := checks
        end
  
  generate-conjunction-exp : 
    [x|xs] ->  |[  e0 && e1  ]| 
    where not([] := xs)
        ; e0 := x
        ; e1 := <generate-conjunction-exp> xs 
        
  generate-conjunction-exp :  
    [e0] -> |[ e0 ]|
	
  generate-security-checks-from-target-var:
    Arg($ident,_) -> |[ acdecision.$ident := $ident; ]|
