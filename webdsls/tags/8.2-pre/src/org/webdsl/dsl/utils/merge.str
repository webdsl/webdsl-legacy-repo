module org/webdsl/dsl/utils/merge

imports
  libstratego-lib
  libjava-front
  libstratego-sglr
  libstratego-tool-doc

rules

  merge-find-imports =
    ?TypeImportDec(_)

  merge-find-imports =
    ?TypeImportOnDemandDec(_)

  merge-add-unique :
    ([], items) -> items

  merge-add-unique :
    ([i|k], items) -> new-items
    where if [] := <filter(?i)> items then // Not in list yet
            new-items := <merge-add-unique> (k, [i|items])
          else
            new-items := <merge-add-unique> (k, items)
          end

  merge-add-unique-method :
    ([], items) -> items

  merge-add-unique-method :
    ([i|k], items) -> new-items
    where if [] := <filter(merge-is-same-method(|i))> items then // Not in list yet
            new-items := <merge-add-unique> (k, [i|items])
          else
            new-items := <merge-add-unique> (k, items)
          end

  merge-is-same-method(|md) = // compare name, return type and params, but not the rest
    ?MethodDec(MethodDecHead(_, _, rt, name, params, _), _)
    ; where( <?MethodDec(MethodDecHead(_, _, rt, name, params, _), _)> md )

  merge-is-same-method(|md) = // compare name, return type and params, but not the rest
    ?AbstractMethodDec(_, _, rt, name, params, _)
    ; where( <?AbstractMethodDec(_, _, rt, name, params, _)> md )

  merge-remove-unnecessary-annos :
    MethodDecHead(annos1, b, c, d, e, f) -> MethodDecHead(annos2, b, c, d, e, f)
    where annos2 := <remove-all(?MarkerAnno(TypeName(Id("Partial"))))> annos1

  merge-remove-unnecessary-annos :
    ClassDecHead(annos1, b, c, d, e)-> ClassDecHead(annos2, b, c, d, e)
    where annos2 := <remove-all(?MarkerAnno(TypeName(Id("Partial"))))> annos1

  merge-add-imports(|new-imports) :
    JavaFile(src, CompilationUnit(packagedef, imprts, cbds)) -> JavaFile(src, CompilationUnit(packagedef, imprts2, cbds))
    where imprts2 := <merge-add-unique> (new-imports, imprts)

  merge-add-body-decs :
    ([], k) -> k

  merge-add-body-decs :
    ([fd@FieldDec(_, _, _)|k],
     k2) ->
    <merge-add-unique> ([fd], <merge-add-body-decs> (k, k2))

  merge-add-body-decs :
    ([AbstractMethodDec(a, b, c, d, e, f)|k], k2) ->
    <merge-add-unique-method> ([AbstractMethodDec(a, b, c, d, e, f)], <merge-add-body-decs> (k, k2))

  merge-add-body-decs : // non-partial method
    ([MethodDec(h, b)|k], k2) ->
    <merge-add-unique> ([MethodDec(h, b)], <merge-add-body-decs> (k, k2))
    where [] := <collect(?MarkerAnno(TypeName(Id("Partial"))))> h

  merge-add-body-decs : // partial method
    ([MethodDec(h@MethodDecHead(annos1, b, c, d, e, f), Block(stmts1))|k], k2) ->
    <merge-add-unique-method> ([MethodDec(MethodDecHead(annos2, b, c, d, e, f), Block(stmts2))], <merge-add-body-decs> (k, k3))
    where not([] := <collect(?MarkerAnno(TypeName(Id("Partial"))))> h)
        ; old-body := <collect(merge-retrieve-method-stmts(|h)); concat> k2
//        ; annos2 := <remove-partial-anno> annos1
        ; annos2 := annos1
        ; k3 := <remove-all(merge-is-same-method(|MethodDec(h, [])))> k2 //<merge-remove-method(|h)> k2
        ; stmts2 := <concat> [stmts1, old-body]

  merge-add-body-decs :
    ([ClassDec(h, b)|k],
     k2) ->
    <merge-add-unique-method> ([ClassDec(h, b)], <merge-add-body-decs> (k, k2))

  merge-add-body-decs =
    ?([a|k], k2)
    ; not(<?MethodDec(_, _)> a)
    ; not(<?FieldDec(_, _, _)> a)
    ; not(<?ClassDec(_, _)> a)
    ; not(<?AbstractMethodDec(_, _, _, _, _, _)> a)
    //; <debug> ["Found an unknown body declaration: ", a]
    ; !<merge-add-unique> (a, <merge-add-body-decs> (k, k2))

  merge-retrieve-method-stmts(|mdh) :
    MethodDec(mdh, Block(stmts)) -> stmts //mdh@MethodDecHead(_, _, _, _, _, _)

  // input: list of class body declarations
  merge-remove-method(|mdh) :
    [MethodDec(mdh, Block(stmts))|k] -> k

  merge-remove-method(|mdh) :
    [MethodDec(mdh2, Block(stmts))|k] -> <merge-remove-method(|mdh)> k
    where not(mdh := mdh2)

  merge-remove-method(|mdh) :
    [a|k] -> [a|<merge-remove-method(|mdh)> k]
    where not(<?MethodDec(_, _)> a)

/*
 MethodDecHead(
              [MarkerAnno(TypeName(Id("Partial"))), Public()]
            , None()
            , Void()
            , Id("doSomething")
            , []
            , None()
            )
*/


  merge-classes :
    (ClassDec(ClassDecHead(annos1, Id(classname), None(), superclass1, interfaces1), ClassBody(body1)),
     ClassDec(ClassDecHead(annos2, Id(classname), None(), superclass2, interfaces2), ClassBody(body2))) ->
     ClassDec(ClassDecHead(annos3, Id(classname), None(), superclass3, interfaces3), ClassBody(body3))
    where if not(None() := superclass1); not(None() := superclass2) then
            <debug> ["Cannot merge classes, class already has superclass: ", superclass1, " - ", superclass2]
          end
        ; if not(None() := superclass2) then
            superclass3 := superclass2
          else
            superclass3 := superclass1
          end
        ; if not(None() := interfaces2); Some(ImplementsDec(impls1)) := interfaces1 then
            Some(ImplementsDec(impls2)) := interfaces2
            ; interfaces3 := Some(ImplementsDec(<merge-add-unique> (impls1, impls2)))
          else
            if not(None() := interfaces2) then
              interfaces3 := interfaces2
            else
              interfaces3 := interfaces1
            end
          end
        ; annos3 := <merge-add-unique> (annos1, annos2)
        ; body3 := <merge-add-body-decs> (body1, body2)

  merge-classes : // Some(ExtendsInterfaces([InterfaceType(TypeName(Id("Ha")),None)])) @TODO Add support for interface inheritance, now assumes none
    (InterfaceDec(InterfaceDecHead(annos1,Id(interfacename),None(),None()),body1),
     InterfaceDec(InterfaceDecHead(annos2,Id(interfacename),None(),None()),body2)) ->
     InterfaceDec(InterfaceDecHead(annos3,Id(interfacename),None(),None()),body3)
    where annos3 := <merge-add-unique> (annos1, annos2)
        ; body3 := <merge-add-body-decs> (body1, body2)

//    [AbstractMethodDec([],None,Void,Id("p"),[],None),AbstractMethodDec([],None,Void,Id("a"),[],None)]

  merge-two-classes: // Same classes
    (JavaFile(src, CompilationUnit(packagedef, imprts1, cds1)),
     JavaFile(src, CompilationUnit(packagedef, imprts2, cds2))) ->
    JavaFile(src, CompilationUnit(packagedef, imprts3, cds3))
    where imprts3 := <merge-add-unique> (imprts1, imprts2)
        ; cds3 := [<merge-classes> (<Hd> cds1, <Hd> cds2)]

  merge-many-classes :
    [a] -> a

  merge-many-classes :
    [a|[b|k]] -> <merge-two-classes> (a, <merge-many-classes> [b|k])

  get-package-and-classname :
    JavaFile(src, CompilationUnit(packagedef, _, [ClassDec(ClassDecHead(_, Id(classname), _, _, _), _)])) -> (packagedef, classname)

  get-package-and-classname :
    JavaFile(src, CompilationUnit(packagedef, _, [InterfaceDec(InterfaceDecHead(_, Id(classname), _, _), _)])) -> (packagedef, classname)

  has-package-and-classname(|packagedef, classname) =
    ?JavaFile(src, CompilationUnit(packagedef, _, [ClassDec(ClassDecHead(_, Id(classname), _, _, _), _)]))

  has-package-and-classname(|packagedef, classname) =
    ?JavaFile(src, CompilationUnit(packagedef, _, [InterfaceDec(InterfaceDecHead(_, Id(classname), _, _), _)]))

  merge-group-classes :
    [] -> []

  merge-group-classes :
    [cls|k] -> [group|<merge-group-classes> k2]
    where (packagedef, classname) := <get-package-and-classname> cls
        ; group := [cls|<filter(has-package-and-classname(|packagedef, classname))> k]
        ; k2 := <remove-all(has-package-and-classname(|packagedef, classname))> k

strategies

  merge-classes =
    merge-group-classes
    ; map(merge-many-classes)
    ; topdown(try(merge-remove-unnecessary-annos))
