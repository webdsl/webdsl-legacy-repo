/**
 * Generate a Seam EntityHome class for a declared entity
 */

module org/webdsl/dsl/generation/java-page

imports 
  libstrategolib  
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/syntax/HQL
  org/webdsl/dsl/utils/utils

rules // session bean from page definition

  page-to-java : 
    def@Define([Page()], x_page, args, elems1) -> 
    <create-local-interface(|pkgname, pkgname2, x_PageBeanInterface)> JavaFile(["src"], 
    compilation-unit|[
      package pkgname;
      import java.util.*;
      import java.io.Serializable;

      import static javax.persistence.PersistenceContextType.EXTENDED;
      
      import javax.persistence.PersistenceContext;
      import javax.persistence.EntityManager;
      
      import javax.faces.event.ValueChangeEvent;
      import javax.faces.application.FacesMessage;
      
      import javax.ejb.Stateless;
      import javax.ejb.Stateful;
      import javax.ejb.Remove;

      import org.jboss.seam.ScopeType;
      import org.jboss.seam.annotations.Begin;
      import org.jboss.seam.annotations.End;
      import org.jboss.seam.annotations.Destroy;
      import org.jboss.seam.annotations.Name;
      import org.jboss.seam.annotations.Scope;
      import org.jboss.seam.annotations.Create;
      import org.jboss.seam.annotations.Logger;
      import org.jboss.seam.annotations.web.RequestParameter;
      import org.jboss.seam.annotations.datamodel.DataModel;
      import org.jboss.seam.annotations.datamodel.DataModelSelection;
      import org.jboss.seam.faces.FacesMessages;
      import org.jboss.seam.faces.Renderer;
      import org.jboss.seam.faces.Redirect;
      import org.jboss.seam.log.Log;

      import org.jboss.seam.annotations.In;
      import org.jboss.seam.annotations.Out;

      import org.jboss.seam.annotations.Factory;

      import pkgname2.*;
  
      @Stateful
      @Name(~string:String([Chars(x_page)]))
      public class x_PageBean implements x_PageBeanInterface {
      
        @Logger 
        private Log log;
      
        @PersistenceContext(type = EXTENDED)
        private EntityManager em;

        @In 
        private FacesMessages facesMessages;
        
        @In
        private Renderer renderer;

        @Create @Begin(join=true) 
            public void initialize() {
              log.info("~x_page" + ".initalize()");
              bstm0*
              bstm1*
              bstm5*
              bstm3*
              bstm4*
              bstm6*
            }
            
        /* By calling forceInitialization the initialization of a bean is forced
             * This also enforces the execution of @Create annotated methods such as initialize()
             * When a bean is already active, nothing happens.
             */
        public void forceInitialization() {}
            
            @Destroy @Remove
            public void destroy() {}
            
            ~*cbds1
            ~*cbds2
            ~*cbds3
            ~*cbds4
            ~*cbds5
            ~*cbds6
            ~*cbds7
            ~*cbds8
            ~*cbds9
            ~*cbds10
            ~*cbds11
            ~*cbds12
      }
    ]|)
    where {| Parameter
           : pkgname    := <BeanPackage>
           ; pkgname2   := <DomainPackage>
           ; x_Page     := <capitalize-string> x_page
           ; x_PageBean := <concat-strings> [x_Page, "Bean"]
           ; x_PageBeanInterface := <concat-strings> [x_Page, "BeanInterface"]
           ; bstm0* := <map(session-entity-property-to-merge);concat> <SessionEntities>
           ; cbds1  := <filter-concat-warn(argument-to-bean-property | "cannot generate bean property for argument: ")> args
           ; bstm1* := <filter-concat-warn(argument-to-initialization | "cannot generate initialization code for argument: ")> args
           ; cbds2  := <collect(action-to-bean-method)> elems1
           ; cbds3  := <collect(select-to-declarations); concat> elems1
           ; bstm3* := <collect(select-to-initialization); concat> elems1
           ; cbds4  := <collect(collection-to-declarations); concat> elems1
           ; bstm4* := <collect(collection-to-initialization); concat> elems1
           ; vdc*   := <get-page-vardecls> elems1
           ; cbds5  := <map(vardecl-to-member-variable); concat> vdc*
           ; bstm5* := <map(vardecl-to-initialization); concat> vdc*
           // @todo scoping of variables, conflicts between session, global and page vars
           ; cbds6  := <map(session-inouts);concat> <filter(\ se@SessionEntity(nm, _, _) -> se where <oncetd(?Var(nm) <+ ?Qualified(nm, _))> elems1 \)> <SessionEntities>
           ; bstm6* := <collect(initaction-to-initialization);concat> elems1
           ; cbds7 := <template-functions-to-java> <decapitalize-string> x_Page
           ; cbds8  := <add-email-properties(|x_page)> elems1
           ; cbds9  := <email-to-code(|x_page)> elems1
           ; cbds10 := <map(function-to-function-code(|[]))>  <filter(\ fu@Function(nm, _, _, _) -> fu where <oncetd(?ThisCall(nm, _))> elems1 \)> <global-functions <+ ![]>
           ; cbds11 := <collect(menu-actions-to-java(|x_page)); concat> elems1
           // @todo scoping of variables, conflicts between session, global and page vars
           ; cbds12 := <map(global-var-retrieval-for-xhtml)> <filter(\ vdi@VarDeclInit(nm, _, _) -> vdi where <oncetd(?Var(nm) <+ ?Qualified(nm, _))> elems1 \)> <global-variables <+ ![]>
           |}
            
        // @todo not all beans need to declare initialize to @Begin a conversation

rules
  global-var-retrieval-for-xhtml :
    VarDeclInit(x_name, x_sort, e1) -> 
    class-body-dec |[ 
       public x_thetype x_methodname()
       {
         return (x_thetype) em.find (x_thetype.class, x_type.valueOf((String)org.jboss.seam.contexts.Contexts.getApplicationContext().get(x_varname)));
       }
    ]|
    where x_methodname := <property-getter> x_name
        ; SimpleSort(x_thetype) := x_sort
        ; if <EntityIdName> x_thetype then
            x_type := <sort-to-java-type-string> <EntityIdType> x_thetype
          else
            x_type := "Long"
          end
        ; x_varname := <concat-strings> ["\"global-declaration-",x_name,"\""]

rules //session variables
  session-inouts :
    SessionEntity(x_ident, _, _) -> 
        class-body-dec*
        |[ 
               @org.jboss.seam.annotations.In(create=true) @org.jboss.seam.annotations.Out private x_ent x_ident; 
                        
               public void x_set(x_ent x_ident) {
                 this.x_ident = x_ident;
               }
              
               public x_ent x_get() {
                 return x_ident;
               }
                ]|
    where x_get := <property-getter> x_ident
        ; x_set := <property-setter> x_ident
        ; x_ent := <capitalize-string> x_ident

  //merge references inside session entities at page initialization
  session-entity-property-to-merge:
    SessionEntity(x_ident, _, _) -> bstm0*
    where classofsession := <TypeOf> x_ident
        ; SimpleSort(classname) := classofsession
        ; props := <Properties> classname
        ; bstm0* := <filter(session-entity-property-to-merge(|x_ident))> props

  session-entity-property-to-merge(|x_ident):
    Property(x, k, s, annos) -> |[
             if (x_ident.x_get()!=null){
               x_ident.x_set(em.merge(x_ident.x_get()));
             } 
     ]|
    where <defined-java-type> s 
         ; x_get := <concat-strings>["get", <capitalize-string> x]
         ; x_set := <concat-strings>["set", <capitalize-string> x]
           

rules // bean parameters
           
  argument-to-bean-property :
    Arg(x, SimpleSort(x_Class)) -> 
    |[
       @RequestParameter("~x")
       private t x_Id;
      
       private x_Class x;
      
       public void x_set(x_Class x) {
         log.info("~x_set");
         this.x = x;
       }
      
       public x_Class x_get() {
         log.info("~x_get");
         return x;
       }
    ]|
    where x_Id := <concat-strings>[x, "Id"]
        ; x_get := <property-getter> x
        ; x_set := <property-setter> x
        ; if <EntityIdName> x_Class then
            t := <java-wrapper-type> <EntityIdType> x_Class
          else
            t := type|[ Long ]|
          end
        
  argument-to-initialization :
    Arg(x, SimpleSort(x_Class)) -> 
    bstm*|[
          if (x_Id == null) {
            log.info("No " + "~x_Id" + " defined, creating new " + "~x_Class");
            x = new x_Class();
          } else {
            x = em.find(x_Class.class, x_Id);
            if(x == null) { // Is this a good idea?
              x = new x_Class();
              x.setId(x_Id);
            }
         }
    ]|
    where x_Id := <concat-strings>[x, "Id"]
        ; rules( Parameter :+= x )

rules // action methods

  action-to-bean-method = 
    action-to-java-method
        
  // @todo what does it mean to delete an object?
  
  initaction-to-initialization:
    InitAction(Block(statements)) -> <statements-to-java> statements
        
rules // view transition

//  call-to-view-string :
//    ThisCall(p,args) -> e
//    where <IsPage> p
//        ; fargs := <TemplateArguments> p
//        ; params := <zip(view-string-bind-param)> (fargs, args)
//        ; e := <page-call-to-java-url> (p, params)
//        
  call-to-view-string :
    ThisCall(p,args) -> |[ "/" + "~p" + ".seam?" + e ]|
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(view-string-bind-param)> (fargs, args)
        ; e := <foldr(!|[ "" ]|, add-string-expressions)> params

  add-string-expressions :
    (e1, e2) -> |[ e1 + e2 ]|
   
//  view-string-bind-param :
//    (Arg(x, s@SimpleSort(x_Class)), e) -> (x, e)
//    where <defined-java-type> s
//
//  page-call-to-java-url :
//    (fn, []) -> |[ "/" + "~fn" ]|
//
//  page-call-to-java-url : 
//    (fn, [fst]) -> |[ "/" + "~fn" + "/" + e.getId() ]|
//    where (_, fid) := fst
//        ; e := <arg-to-java-exp> fid
//
//  page-call-to-java-url =
//    ?(fn, [fst|[snd|rest]]) 
//    ; info(|["page calls with more than one argument are not implemented yet."])
//    ; fail
//
//  param-to-request-param :
//    (param, value) -> <concat-strings> [param, "=", value]
//
  view-string-bind-param :
    (Arg(x, s@SimpleSort(x_Class)), e1) -> |[ "~x" + "=" + e2.getId() ]|
    where <defined-java-type> s
        ; e2 := <arg-to-java-exp> e1
        
  arg-to-java-exp :
    Var(x){Type(t)} -> |[ x ]|
    where not(<eq>(t, "Component"))
    
  arg-to-java-exp :
    FieldAccess(Var(x){Type("Component")}, y) -> |[ y ]|
    
  arg-to-java-exp :
    FieldAccess(e1, y) -> |[ e2.y_get() ]|
    where e2 := <arg-to-java-exp> e1
        ; y_get := <concat-strings>["get", <capitalize-string> y]
    
  arg-to-java-exp :
    Call(e1, x, e2*) -> |[ e3.x(e4*) ]|
    where e3 := <arg-to-java-exp> e1
        ; e4* := <map(arg-to-java-exp)> e2*
        
  arg-to-java-exp :
    ThisCall(x, e1*) -> |[ x(e2*) ]|
    where e2* := <map(arg-to-java-exp)> e1*
      

rules // collections

  collection-to-java(|x, x_Class) = 
      dbg(|"select-declarations match: ")
    ; X          := <capitalize-string> x
    ; x_List     := <concat-strings>[x, "List"]
    ; x_getList  := <concat-strings>["get", X, "List"]
    ; x_initList := <concat-strings>["init", X, "List"]
    ; !|[ 
                  @DataModel(~string:String([Chars(x_List)]))
                  private List<x_Class> x_List;
        
                  public List<x_Class> x_getList() {
                    log.info("~x_getList");
                        return x_List;
                  }
        
                  @Factory(~string:String([Chars(x_List)]))
                  public void x_initList() {
                        log.info("~x_initList");
                        x_List = em.createQuery("from " + "~x_Class").getResultList();
                  }
           ]|
  
  collection-init-to-java(|x) =
      X          := <capitalize-string> x
    ; x_initList := <concat-strings>["init", X, "List"]
    ; ! bstm*|[ x_initList(); ]| 

rules // tables
        
  collection-to-declarations :
    TemplateCallDeclaredType("table", x, SimpleSort(x_Class), columns) ->
      <collection-to-java(|x, x_Class)>
  
  collection-to-initialization :
    TemplateCallDeclaredType("table", x, SimpleSort(x_Class), columns) ->
      <collection-init-to-java(|x)>

rules // for all: for(x : s) { ... }

  collection-to-declarations :
    ForAll(x, SimpleSort(x_Class), elems) ->
      <dbg(|"forall-declarations success: ")
        ; collection-to-java(|x, x_Class)>
        
  collection-to-initialization :
    ForAll(x, SimpleSort(x_Class),elems) ->
      <collection-init-to-java(|x)>
          
rules // select

  select-to-declarations :
    Select(x, SimpleSort(x_Class), label, e1) -> <dbg(|"select-declarations success: ")>
    |[ 
      private String x_new;

          public void x_setNew(String p) {
                x_new = p;
          }

          public String x_getNew() {
                return x_new;
          }
          
/*
        public void addPerson(ValueChangeEvent event) {
                log.info("addPerson" + " " + newPerson22);
                log.info("addPerson: new value = " + event.getNewValue());
                Person person22 = em.find(Person.class, new Long((String)event.getNewValue()));
                addPerson0(person22);
        }
*/

          public void x_select(ValueChangeEvent event) {
                log.info("~x_select" + ": new value = " + " " + event.getNewValue());
                Long id = new Long((String)event.getNewValue());
                if (id > 0) {
                  x_Class x = em.find(x_Class.class, id);
                  e2;
                }
      }

          @DataModel(~string:String([Chars(x_List)]))
          private Map<String, String> x_List;

          public Map<String, String> x_getList() {
                return x_List;
          }

          @Factory(~string:String([Chars(x_List)]))
          public void x_initList() {
                log.info("~x_initList");
                x_List = new HashMap<String, String>();
                for (Object o : em.createQuery("from " + "~x_Class").getResultList()) {
                        x_Class p = (x_Class) o;
                    x_List.put(p.getName(), p.getId().toString());
                }
          }
    ]|
    where dbg(|"select-declarations match: ")
        ; X          := <capitalize-string> x
        ; x_new      := <concat-strings>["new", X]
        ; x_getNew   := <concat-strings>["getNew", X]
        ; x_setNew   := <concat-strings>["setNew", X]
        ; x_select   := <concat-strings>["select", X]
        ; x_List     := <concat-strings>[x, "List"]
        ; x_getList  := <concat-strings>["get", X, "List"]
        ; x_initList := <concat-strings>["init", X, "List"]
        ; dbg(|"select-to-declarations names: ")
        ; e2          := <arg-to-java-exp> e1
        ; dbg(|"select-to-declarations java-exp: ")
        
  select-to-initialization :
    Select(x, SimpleSort(x_Class), label, e) ->
    bstm*|[ x_initList(); ]| 
    where X          := <capitalize-string> x
        ; x_initList := <concat-strings>["init", X, "List"]

rules // template expression functions
   template-functions-to-code = []
//     (x_fn, e) -> |[
//       public boolean x_fn(
rules // page variables

    
  vardecl-to-initialization :
    VarDecl(x, s) -> bstm*|[ ]|
        
  vardecl-to-initialization :
    VarDeclInit(x, s, e1) -> bstm*|[ x = e2; ]|
    where not(HqlQuery(_) := e1)
        ; <not(HasFileProperty)> s
        ; e2 := <expression-to-java> e1

  vardecl-to-initialization :
    VarDeclInit(x, SimpleSort(s), e1) -> bstm*|[ x = e2; x.x_set(new File()); ]|
    where not(HqlQuery(_) := e1)
        ; Property(ident, k, sort, annos) := <once-HasFileProperty> s
        ; x_set := <property-setter> ident
        ; e2 := <expression-to-java> e1
        
  vardecl-to-member-variable :
    VarDecl(x, s) -> |[
      private t x;
      
      public t x_get() {
        log.info("~x_get");
        return x;
      }
      
      public void x_set(t x) {
        log.info("~x_set");
        this.x = x;
      }
    ]|
    where t     := <java-type> s
        ; X     := <capitalize-string> x
        ; x_get := <concat-strings>["get", X]
        ; x_set := <concat-strings>["set", X]
        
  vardecl-to-member-variable :
    VarDeclInit(x, s, e) -> <vardecl-to-member-variable> VarDecl(x, s)
    where not(HqlQuery(_) := e)
    
rules // page-level variables with query initializers
        
  vardecl-to-member-variable :
    VarDeclInit(x, s, HqlQuery(e1)) ->
    |[
       @DataModel(~string:String([Chars(x)]))
       private t x;
      
       public t x_get() {
         log.info("~x_get");
         return x;
       }
      
       public void x_set(t x) {
         log.info("~x_set");
         this.x = x;
       }
      
           @Factory(~string:String([Chars(x)]))
       public void x_init() {
         log.info("~x_init");
         x = e2.getResultList();
       }
    ]|
    where t      := <java-type> s
        ; e2     := <query-to-create-query> e1
        ; X      := <capitalize-string> x
        ; x_init := <concat-strings>["init", X]
        ; x_get  := <concat-strings>["get", X]
        ; x_set  := <concat-strings>["set", X]

  vardecl-to-initialization :
    VarDeclInit(x, s, HqlQuery(_)) -> bstm*|[
      x_init();
    ]|
    where x_init := <concat-strings>["init", <capitalize-string>x]

  query-to-create-query :
    e -> <repeat(once-AddQueryParameter)> |[ em.createQuery("~q") ]|
    where q := <alltd(replace-parameter); pp-hql-to-string; trim-chars('\n')> e
    
  replace-parameter :
    DslExp(e1) -> IdParam(x2)
    where x1  := <newname> "param"
        ; x2 := <concat-strings>[":", x1]
        ; e2 := <expression-to-java> e1
        ; rules( 
            AddQueryParameter :+ e -> |[ e.setParameter("~x1", e2) ]|
          )

rules // For generating template functions

   template-functions-to-java :
     page -> function*
     where  pkgname := <Package>
         ; pkgname2 := <DomainPackage>
         ; functions := <retain-all(?(page, _, _, _))> <AllTemplateFunctions>
         ; function* := <map(template-function-to-java)> functions

   template-function-to-java :
     (page, x_fn, params, e) -> |[
       public boolean x_fn(param*) {
         stm
       } ]|
     where {| InFunction, TransformParameterName
            : param* := <map(template-function-param-to-java)> params
            ; rules ( InFunction := "Yes" )
            ; e2 := <try(sometd(replace-template-call-params))> e
            ; stm := <statement-to-java> <try(DesugarLiftExp)> Return(e2)
            |}
   
   replace-template-call-params :
     FieldAccess(e, x) {Type(s)} -> Var(y) {Type(s)}
     where y := <TransformParameterName> x
     
   replace-template-call-params :
     Var(x) {Type(s)} -> Var(y) {Type(s)}
     where y := <TransformParameterName> x
     
   template-function-param-to-java :
     FieldAccess(_, x) {Type(s)} -> |[ t y ]|
     where t := <java-type> s
         ; y := <newname> "param"
         ; rules ( TransformParameterName : x -> y )

   template-function-param-to-java :
     Var(x) {Type(s)} -> |[ t y ]|
     where t := <java-type> s
         ; y := <newname> "param"
         ; rules ( TransformParameterName : x -> y )


rules // Email functionality

  email-to-code(|page) =
    if <oncetd(?ThisCall("email", [_]))> <id> then
      list_property := <GetEmailArgumentsList> page
      ; x_set := <property-setter> list_property
      ; ! class-body-dec* |[
        public void sendEmail(String template, ArrayList _list) {
          x_set(_list);
              try {
                renderer.render(template);
                facesMessages.add("Email sent successfully");
              } catch (Exception ex) {
                 log.error("Error sending mail", ex);
                 facesMessages.add(FacesMessage.SEVERITY_INFO, "Email sending failed: " + ex.getMessage());
              }
        }
      ]|
    else
      ![]
    end

  add-email-properties(|page) =
    if <oncetd(?ThisCall("email", [_]))> <id> then
            x := <GetEmailArgumentsList> page
        ; X     := <capitalize-string> x
        ; x_get := <concat-strings>["get", X]
        ; x_set := <concat-strings>["set", X]
            ; ! |[
                      private ArrayList x;
                      
                      public ArrayList x_get() {
                        log.info("~x_get");
                        return x;
                      }
                      
                      public void x_set(ArrayList x) {
                        log.info("~x_set");
                        this.x = x;
                      }
                    ]|
    else
      ![]
    end

  menu-actions-to-java(|page) =
    ?TemplateCall("dropdownmenu", [name], elems)
    ; <map(menu-action-to-java(|page))> elems
    
  menu-action-to-java(|page) :
    t@TemplateCall("menuitem", [e], elems) ->
      class-body-dec* |[
        public void x_fun() {
          log.info("~x_fun");
          Redirect r = new Redirect();
          r.setViewId("/~x_p");
          bstm0*
          r.execute();
        }
      ]|
    where x_fun := <MenuActionFunction> (page, t)
        ; ThisCall(x_p,args) := e
        ; fargs := <TemplateArguments> x_p
        ; params := <zip> (fargs, args)
        ; bstm0* := <map(add-page-parameter)> params
  
  add-page-parameter :
    (Arg(x, _), Var(x_value) {Type(s)}) -> |[ r.setParameter("~x", x_value); ]|
