// vim: syntax=stratego
/*

- use sglr library

*/

module domainmodel-dsl
imports libstratego-lib libstratego-xtc libstratego-sglr libjava-front
imports DomainModel
imports file-management domainmodel-dsl-xtc xml-configuration native2java-types check-annotations 

strategies

  main = 
   xtc-input-wrap-custom(
       where( (project-name   := <get-config>"--project-name" 
                                 <+ fatal-err(|"Projectname must be set. Try using -pn <name> or --projectname <name>. Use --help for more information."))
            ; (package-prefix := <get-config>"--prefix" 
                                 <+ None()) // @todo handle this in Package rule
            )
     ; read-from
     ; where( // Canonical package name as dynamic rule for later use
              domainname := <DomainName>
            ; rules(Package : _ -> <concat-strings> [package-prefix, ".", domainname, ".domainclasses"])
	    )
     ; desugar
     ; alltd(annotate-with-type)
     // Typecheck input, halt on error
     ; where({| TypeError : 
                  def-use-check
                ; bagof-TypeError
                ; if ?Nil() then id else (list-loop({ error : ?error; err-msg(|<id>)}); fatal-err-msg(|"Compilation failed")) end
            |})
     // Transform domainmodel AST to Java implementing classes
     ; domainmodel-to-jpa
     // Create and write JPA XML configuration file
     ; where(domainmodel-to-jpa-xml(|project-name))
     // Write implementing Java classes
     ; map(output-class)
     // Write helper class
     ; create-file(|"pp-java", <pkg-to-dirlist>, "PersistenceUtil.java", <persistence-helper> "blog") 
     // Check for warnings generated during translation
     ; where( bagof-AnnotationWarning
            ; if ?Nil() then id else (list-loop({ error : ?error; warn-msg(|<id>)}); notice-msg(|"Warnings have been issued during compilation")) end
            )
   )

  desugar = innermost(ConceptAnnotated)

  ConceptAnnotated : Concept(name, type) -> Concept(name, type, [])

  DomainName : Domain(name, _) -> name

  output-class = 
      ?(name, class)
    ; directory_structure := <pkg-to-dirlist>
    ; create-file(| "pp-java"
                  , directory_structure
                  , <conc-strings> (name, ".java")
                  , class
		 )

  domainmodel-to-jpa-xml(|project-name)
     = filter(Fst; ![<Package>, "." , <id>]; concat-strings)
     ; debug(!"Generating classes : ")
     ; create-jpa-config(|project-name)
     ; create-file(| "pp-xml-doc"
                   , ["META-INF"]
                   , "persistence.xml"
                   , <id>
                  )

  domainmodel-to-jpa :
    Domain(name, conceptdecls) -> <map(conceptdecl-to-class)> conceptdecls

  conceptdecl-to-class : 
    ConceptDecl(x_name, conceptmembers) -> (x_name, compilation-unit |[

      package ~id:Id(<Package>);

      import java.util.*;
      import javax.persistence.*;

      @Entity
      public class x_name {

        // Default constructor required by some JPA implementations
        public x_name() {}
        // Constructor setting all fields
        public x_name(param*) { bstm* }

        // Auto-generated id for objects of the class, managed by JPA	
        private Long id;
        
        @Id @GeneratedValue
        public Long getId() { return id; }

        // @todo should this be public?
        public void setId(Long id) { this.id = id; }

        // Field for JPA managed optimistic locking strategy.
        int versionNum;

        @Version
        @Column(name="OPTLOCK")
        protected int getVersionNum() { return versionNum; }

        protected void setVersionNum(int versionNum) { this.versionNum = versionNum; }

        // Field declaration, getter and setter for each ConceptDecl member
        ~*cbds
	
      }

    ]| )
    where   cbds               := <mapconcat(member-to-classbodydecs) 
                                  <+ debug(!"error")> conceptmembers
          ; (param*,bstm*)     := <map(member-to-formalparams-and-assign);unzip> conceptmembers

  member-to-formalparams-and-assign :
    Concept(x_name, _{t}, _) -> (|[ ty_0 x_name]|, |[ this.x_name = x_name; ]|)
      where ty_0 := <extract-type> t
         

  member-to-classbodydecs :
    Concept(x_name, SimpleConcept(_){type}, annos) -> class-body-dec* |[

      private ty_0 x_name;

      mod_0*
      public ty_0 x_get() {
        return x_name;
      }

      public void x_set(ty_0 x_name) {
        this.x_name = x_name;
      }
  
    ]|
    where x_get  := <getter> x_name
        ; x_set  := <setter> x_name
        ; ty_0   := <extract-type> type
        ; mod    := <if is-NativeType then 
                        !( anno |[ @Basic  ]| ) 
                     else 
                        !( anno |[ @OneToOne(cascade={CascadeType.PERSIST, CascadeType.MERGE}) ]| )
                     end> type
        ; mod_0*  := <filter(not(?None()))> Cons (mod, <create-annotations>  annos)
        ; debug(!"annos : ")
	
  member-to-classbodydecs :
    Concept(x_name, CollectionConcept(y_type){type}, annos) -> 
    class-body-dec* |[

      private ty_0 x_name = new HashSet<y_type>();

      @ManyToMany(cascade={CascadeType.PERSIST, CascadeType.MERGE})
      public ty_0 x_get() {
        return x_name;
      }

      public void x_set(ty_0 x_name) {
        this.x_name = x_name;
      }

      public void x_add(y_type z) {
        this.x_name.add(z);
      }
  
    ]|
    where x_get := <getter> x_name
        ; x_set := <setter> x_name
        ; x_add := <concat-strings>["add", <first-to-upper> x_name]
        ; ty_0  := <extract-type> type
	; z := <new>"one"

  persistence-helper : 
    projectname -> |[

      package ~id:Id(<Package>);

      import java.util.*;
      import javax.persistence.*;
      
      public class PersistenceUtil {
      
        private static final EntityManagerFactory emf;
      
        static {
      
          try {
      
            emf = Persistence.createEntityManagerFactory("~projectname");
      
          } catch (Throwable ex) {
      
            // Log exception!
            System.err.println("Initial EntityManagerFactory creation failed." + ex);
            System.err.println(" ===== ");
            ex.printStackTrace();
            System.err.println(" ===== ");
      
            throw new RuntimeException(ex);
      
          }
      
        }
      
        public static EntityManager getEM() {
      
                return emf.createEntityManager();
      
        }
      
      } 
   ]|

  // Utilities

  /* @type String -> String */
  first-to-upper = explode-string; one(to-upper); implode-string
  getter         = ?name; <concat-strings> ["get", <first-to-upper> name]
  setter         = ?name; <concat-strings> ["set", <first-to-upper> name]

  /* Note: dynamic rule Package must be in scope
     @type String -> List(String) */
  pkg-to-dirlist = Package; string-tokenize(|['.'])
