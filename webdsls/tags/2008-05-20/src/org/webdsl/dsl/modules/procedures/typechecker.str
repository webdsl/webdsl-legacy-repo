module org/webdsl/dsl/modules/procedures/typechecker

imports
  libstrategolib
  libwebdsl-front

rules // Declaring

  declare-definition =
    declare-procedure
//    <+ declare-workflow

  declare-procedure =
    ?def|[ procedure x_id (x_o : srt) { procelem* }]|
    ; who-exp := <filter(procedure-who-exp); Hd> procelem*
    ; when-exp := <filter(procedure-when-exp); Hd> procelem*
    ; SimpleSort(s) := srt
    ; hasopfun := <concat-strings> [<decapitalize-string> s, "HasProcedures"]
    ; rules ( IsProcedure            : x_id 
              ProcedureWho           : x_id -> who-exp
              ProcedureWhen          : x_id -> when-exp
              ProcedureArg           : x_id -> x_o
              Procedures             :+ srt -> x_id 
              CheckGeneratedGlobalFunctionSignature : (None(), hasopfun, [srt]) -> SimpleSort("Bool")
              ProcedureEntities :+= srt )
    ; viewelems* := <filter(\ procelem|[ view { elem* } ]| -> elem* \);concat> procelem*
    ; if [] := viewelems* then
        rules ( IsDoProcedure : x_id )
      end
/*
  declare-workflow =
    ?def|[ workflow x_id (x_o : srt) { procelem* }]|
    ; done-exp := <filter(workflow-done-exp); Hd> procelem*
    ; who-exp := <filter(procedure-who-exp); Hd> procelem*
    ; when-exp := <filter(procedure-when-exp); Hd> procelem*
    ; rules ( IsWorkflow       : x_id 
              WorkflowDone     : x_id -> done-exp
              WorkflowWho      : x_id -> who-exp
              WorkflowWhen     : x_id -> when-exp
              WorkflowArg      : x_id -> x_o
              Workflows        :+ srt -> x_id 
              WorkflowEntities :+= srt )
*/
rules // Typechecking

  typecheck-section :
    Procedures(nm, defs) -> Procedures(nm, defs2)
    where defs2 := <typecheck-definitions> defs
    
  typecheck-specific-definition :
    Procedure(nm, Arg(o, srt), elems) -> Procedure(nm, Arg(o, srt), elems2)
    where {| TypeOf
           : rules ( TypeOf : "status" -> srt ) 
           ; rules ( TypeOf : o -> srt )
           ; <map(declare-typeof-arg)> <collect(\ VarDecl(x, srt) -> Arg(x, srt)\ <+ \ VarDeclInit(x, srt, e) -> Arg(x, srt) \)> elems // @TODO clean this shit up
           ; elems2 := <map(typecheck-procedure-element <+ typecheck-error(|["Could not typecheck: ", <id>]))> elems
           |}
/* eruit
  typecheck-specific-definition :
    Workflow(nm, Arg(o, srt), elems) -> Workflow(nm, Arg(o, srt), elems2)
    where {| TypeOf
           : rules ( TypeOf : "status" -> srt ) 
           ; rules ( TypeOf : o -> srt )
           ; elems2 := <map(typecheck-procedure-element <+ typecheck-error(|["Could not typecheck: ", <id>]))> elems
           |}
*/ 
  typecheck-procedure-element :
    ProcedureWho(e) -> ProcedureWho(e2)
    where e2 := <typecheck-expression> e
        ; if not(SimpleSort("Bool") := <type-of> e2) then
            typecheck-error(|["Expression in who should return a boolean: ", e2])
          end

  typecheck-procedure-element :
    ProcedureWhen(e) -> ProcedureWhen(e2)
    where e2 := <typecheck-expression> e
        ; if not(SimpleSort("Bool") := <type-of> e2) then
            typecheck-error(|["Expression in when should return a boolean: ", e2])
          end

  typecheck-procedure-element :
    ProcedureDone(e) -> ProcedureDone(e2)
    where e2 := <typecheck-expression> e
        ; if not(SimpleSort("Bool") := <type-of> e2) then
            typecheck-error(|["Expression in done should return a boolean: ", e2])
          end

  typecheck-procedure-element :
    ProcedureDo(b) -> ProcedureDo(b2)
    where b2 := <typecheck-block> b

/* eruit
  typecheck-procedure-element :
    WorkflowInit(args, b) -> WorkflowInit(args, b2)
    where {| TypeOf
           : <map(declare-typeof-arg)> args
           ; b2 := <typecheck-block> b
           |}
*/
  typecheck-procedure-element :
    ProcedureView(el*) -> ProcedureView(el2*)
    where el2* := <typecheck-page-elements> el*

  check-builtin-signature :
    (SimpleSort("WorkflowStatus"), "start", args) -> SimpleSort("Bool")
