module WebDSL

imports
  WebDSL-Lexical
  WebDSL-UI
  WebDSL-Ajax
  WebDSL-Action
  WebDSL-DataModel
  WebDSL-DataValidation
  WebDSL-AccessControl
  WebDSL-XML
  WebDSL-JavaScript
  WebDSL-Regex
  WebDSL-Enums
  WebDSL-Styling
  WebDSL-PagedFor
  WebDSL-Derive
  WebDSL-Procedures
  WebDSL-ValidationAnnos
  WebDSL-Native
  WebDSL-Dispatch
  WebDSL-Exception
  WebDSL-Type
  WebDSL-Test
  WebDSL-TimeInterval
  WebDSL-Service
  WebDSL-Search
  WebDSL-Recommend

%% hiddens
%%   context-free start-symbols
%%   
%%     Start
%% 
%% auto-generated entity language
exports
  context-free syntax
  
    "module" Module@=Id Definition*       -> Foo {"Module", scope(Type)}
    "entity" Type@=Id "{" Property* "}"   -> Foo {"Entity", scope(Property)}
    Property@=Id ":" FooType              -> Foo {"Property"}
    Type@Id                               -> FooType {"Type"}
  
hiddens
  context-free start-symbols
    Unit

exports

  sorts
    Id QId Int ModuleName SectionHeader Float FloatDigits ExponentPart
    SignedInteger String UNDEFINED Eof


  context-free syntax
    Id         -> QId
    QId "." Id -> QId {cons("Qualified")}
    Keyword    -> Id {reject} %% (not rejected as HQL or styling keyword)

exports

  sorts Application Module Unit
  
  syntax

    "section" <SectionName-CF> <LAYOUT?-CF> <Definition*-CF> -> <Section-CF> {cons("Section")}

  context-free syntax

    "application" QId Definition+ Section* -> Application {cons("ApplicationDefs")}
    "application" QId Section*             -> Application {cons("Application")}

    "description" "{" Word* "}"     -> Description {cons("Description")}
    "note" "{" Word* "}"            -> Description {cons("Note")}

    Description                   -> Definition
    %%Description                   -> Definition {prefer}

    "module" Module@=ModuleName Section*              -> Module {"Module", scope(Type)}
    "module" Module@=ModuleName Definition+ Section*  -> Module {"ModuleDefs", scope(Type)}

    "imports" Module@ModuleName          -> Definition {cons("Imports")}
    
    Application                   -> Unit
    Module                        -> Unit

exports
  sorts Action Statements Statement Exp
  context-free syntax
    Action		       	          -> Definition
    Statement*		   	          -> Statements
    NativeFunctionDeclaration   -> Definition
    NativeClassDeclaration      -> Definition

