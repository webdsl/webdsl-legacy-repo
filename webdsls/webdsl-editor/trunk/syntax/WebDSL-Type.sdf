module WebDSL-Type

imports WebDSL-Lexical

exports

  context-free syntax %% Types
    SimpleSort   -> Sort
    GenericSort  -> Sort
    RefSort      -> Sort
    FunctionSort -> Sort
    
    Type@Id                 -> SimpleSort  {cons("SimpleSort")}
    Id "<" {Sort ","}+ ">"  -> GenericSort {cons("GenericSort")}
    "Ref" "<" Sort ">"      -> RefSort     {cons("RefSort")}
    "Ref" "<" Sort ">"      -> GenericSort {reject}
    
  context-free syntax
  
    %%  Construct for creating custom value types, and altering the existing value types.
    %%
    %%  example: 
    %%    type String { validate(this.length() <= 255 , "input too long (max 255 characters)") }
    %%    type USDate : Date { format = "MM/dd/yyyy" }
    %% 
    %%  Will also need to cope with input/output decode/encode.
    %%

    "type" Type@=Id "{" TypeProperty* "}" -> Definition {cons("TypeDef")}
    
    Annotation -> TypeProperty {cons("TypeDefAnno")}
    
    NativeClassFunction -> TypeProperty
    %%solve ambiguities
    "static" -> TypeProperty {reject}
    
    QId "as" NativeClassFunction -> TypeProperty{cons("NativeClassFunctionFromStatic")}
    
    
    