module WebDSL-UI

imports
  WebDSL-Action
  WebDSL-Lexical
  WebDSL-DataModel
  WebDSL-XML
  
exports

  sorts TemplateDefinition Modifier Exp

  lexical syntax
    
    "define" -> Keyword
  %%"action" -> Keyword
    "for"    -> Keyword

  context-free syntax

    TemplateDefinition -> Definition

    "define" Modifier*
       Template@=Id "(" {FormalArg ","}* ")"
       TemplateArgs
       "{" TemplateElement* "}"         -> TemplateDefinition {"Define", scope(Var,Template)}

    "requires" {TemplateArg "," }*			-> TemplateArgs{"TemplateArgs", prefer}
    Template@=Id "(" {Sort ","}* ")"    -> TemplateArg {"TemplateArg"}
    
      -> TemplateArgs{cons("None")}
      
    "define" Modifier* Template@=Id "(" {FormalArg ","}* ")" "=" Template@Id OptLocalRedefineArgs -> TemplateDefinition {"LocalRedefine"}
    
                                            -> OptLocalRedefineArgs {"None"}
    "(" "*" "," {LocalRedefineArg ","}+ ")" -> OptLocalRedefineArgs {"LocalRedefineArgs"}
    Var@Id                                  -> LocalRedefineArg{"Var"}
    
    %% new page syntax
    Modifier* "page"
       Page@=Id "(" {FormalArg ","}* ")"
       TemplateArgs
       "{" TemplateElement* "}"             -> TemplateDefinition {"DefinePage", scope(Var,Template)}
       
    %% new template syntax
     Modifier* "template"
       Template@=Id "(" {FormalArg ","}* ")"
       TemplateArgs
       "{" TemplateElement* "}"             -> TemplateDefinition {"DefineTemplate", scope(Var,Template)}
          
    %%"define" Modifier*
    %%   Id UNDEFINED*
    %%   "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}

    "page"                                  -> Modifier {cons("Page")}
    "email"                                 -> Modifier {cons("Email")}
    "ajax"                                  -> Modifier {cons("AjaxTemplate")}
    "template"                              -> Modifier {cons("Template")}
    "feed"                                  -> Modifier {cons("Feed")}
    "local"                                 -> Modifier {cons("Local")}
    "no-span"                								-> Modifier {cons("NoSpan")}    
    "span"  							                	-> Modifier {cons("TemplateModSpan")}    
    "inline"  								              -> Modifier {cons("TemplateModInline")}    
    "secure"                             	  -> Modifier {cons("TempateModSecure")}    
    "not-secure"                          	-> Modifier {cons("TemplateModNotSecure")}    
    "override"                            	-> Modifier {cons("TemplateModOverride")}    
    "deprecated"                          	-> Modifier {cons("TemplateDeprecated")}    

    InitAction                              -> TemplateElement
    Action                                  -> TemplateElement
    VarDecl                                 -> TemplateElement
    %% still allow ";" behind page var for backwards comp., remove VarDeclStat-> TemplateElement to disallow
    VarDeclStat                             -> TemplateElement
    "request" VarDecl                       -> TemplateElement {cons("RequestScopeTemplate")}
    "request"                               -> TemplateCallId {reject} %% reject TemplateCallNoArgs("request")
    "local" VarDecl                         -> TemplateElement {cons("LocalScopeTemplate")}
    "local"                                 -> TemplateCallId {reject} %% reject TemplateCallNoArgs("local")
    TemplateDefinition                      -> TemplateElement
    TemplateCall                            -> TemplateElement {avoid}
    String                                  -> TemplateElement {cons("Text")}


  context-free syntax %% filter
    
    "where" Exp                              -> Filter {cons("FilterNoOrderByNoLimit")}
    "order" "by" OrderExp                    -> Filter {cons("FilterNoWhereNoLimit")}
    "where" Exp "order" "by" OrderExp        -> Filter {cons("FilterNoLimit")}
    "where" Exp Limit                        -> Filter {cons("FilterNoOrderBy")}
    "order" "by" OrderExp Limit              -> Filter {cons("FilterNoWhere")}
    Limit                                    -> Filter {cons("FilterNoWhereNoOrderBy")}
    "where" Exp "order" "by" OrderExp Limit  -> Filter {cons("Filter")}
    Exp                                      -> OrderExp {cons("OrderNonSpecific")}
    Exp "asc"                                -> OrderExp {cons("OrderAscending")}
    Exp "desc"                               -> OrderExp {cons("OrderDescending")}
    "limit" Exp "offset" Exp                 -> Limit {cons("Limit")}
    "limit" Exp                              -> Limit {cons("LimitNoOffset")}
    "offset" Exp                             -> Limit {cons("LimitNoLimit")}

   
  context-free syntax %% for
    
    %% to do: how about variables in Exp?
    
  %% scope rules
    
    %% Entity(name, super, decs) :
    %%   defines unique Entity name
    %%   refers to Entity super 
    %%   scope for Property overriding Property of super
    
    %% <index-lookup> uri
        
    %% Property(x, t) : 
    %%   defines Property x of Type t
    
    %% PropertyAccess(e, f) : 
    %%   refers to Property f in <type-of>e  
    
    %% For(x, t, e, f, elem*) : TemplateElement
    %%   defines Var x of Type t in elem*
    
    %% VarDecl(x, t, e) :
    %%   defines Var x of Type t after this
    
    %% VarDecl(x, e) :
    %%   defines Var x of Type (<type-of>e) after this
    
    %% Var(x) :
    %%   refers to (Var x of Type t or Property x of Type t)
    
    %%   refers to Var x of Type t  // implies has Type t
    %%   refers to Property x of Type t 
    %%   // issue in what order are Var's and Property's considered?
    
    %% Block(Statement*) : Statement
    %%   ordered scope for Var
    
    %% Method(f, param*, t, block) : 
    %%   defines unique Method (f, <map(type-of)> param*) of Type t
    %%   scope for Var
    
    %% Param(x, t): 
    %%   defines Var x of Type t
    
    %% MethodCall(e, f, e*) :
    %%   refers to Method (f, <map(type-of)> e*) of Type t in <type-of> e 
    %%   has Type t
  
               
    "for" "(" Var@=Id ":" Sort "in" Exp Filter ")"
       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {"For",scope(Var)}
                
    "for" "(" Var@=Id ":" Sort "in" Exp ")"
       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {"ForNoFilter",scope(Var), prefer}

    "for" "(" Var@=Id ":" Sort Filter ")"
       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {"ForAll",scope(Var)}

    "for" "(" Var@=Id ":" Sort ")" 
       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {"ForAllNoFilter",scope(Var)} 
    
    "for" "(" Var@=Id ":" "Int" "from" Exp "to" Exp ")" 
      "{" TemplateElement* "}" ForSeparator        -> TemplateElement {"ForCount",scope(Var)}
    
    "separated-by" "{" TemplateElement* "}"        -> ForSeparator{"ForSeparator", scope(Var)}
                                                   -> ForSeparator{"None"}
    %% Reject
    %%"for" "(" Id ":" Sort "in" HqlExp Filter ")" "{" TemplateElement* "}" -> TemplateElement {reject}
      
  context-free syntax %% select

    "select" "(" Exp "from" Exp ")"                                                            -> TemplateElement {cons("SelectFromListNoPropsNoElems")}
    "select" "(" Exp "from" Exp ")" "[" {PropertyAssignment ","}* "]"                          -> TemplateElement {cons("SelectFromListNoElems")}
    "select" "(" Exp "from" Exp ")" "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SelectFromList")}
    "select" "(" Exp "from" Exp ")" "{" TemplateElement* "}"                                   -> TemplateElement {cons("SelectFromListNoProps")}

    "if" "(" Exp ")" "{" TemplateElement* "}" "else" "{" TemplateElement* "}" -> TemplateElement {cons("IfTempl"),prefer}
    "if" "(" Exp ")" "{" TemplateElement* "}"                                 -> TemplateElement {cons("IfNoElseTempl")}


    "if" "(" Exp ")" "{" TemplateElement* "}" ElseIfTempl+ ElseTempl? -> TemplateElement {cons("IfElseIfTempl"),prefer}
    "else" "if" "(" Exp ")" "{" TemplateElement* "}"                  -> ElseIfTempl {cons("ElseIfTempl"),prefer}
    "else" "{" TemplateElement* "}"                                   -> ElseTempl  {cons("ElseTempl"),prefer}

  context-free syntax %% case

    "case" "(" {Exp ","}* ")" "{" TemplateCaseAlt* "}" 	-> TemplateElement {cons("TemplateCase")}
    {ConstValue ","}* "{" TemplateElement* "}"          -> TemplateCaseAlt {cons("TemplateCaseAlt")}
    "default" "{" TemplateElement* "}"                  -> TemplateCaseAlt {cons("TemplateCaseAltDefault")}

  lexical syntax
    Id -> TemplateCallId %% hook for reject rules on templatecall names

  context-free syntax %% template calls
    
    Template@TemplateCallId "(" {Exp ","}* ")" "[" {PropertyAssignment ","}*"]" TemplateBody -> TemplateCall {cons("TemplateCall")}

    TemplateCallNoArgs        -> TemplateCall
    TemplateCallNoBody        -> TemplateCall
    TemplateCallNoAssigns     -> TemplateCall
    TemplateCallPropsNoBody   -> TemplateCall
    TemplateCallProps         -> TemplateCall
    TemplateCallPropsNoArgs   -> TemplateCall
    TemplateCallBody          -> TemplateCall
    Template@TemplateCallId                                                     -> TemplateCallNoArgs {"TemplateCallNoArgs"}
    Template@TemplateCallId "(" {Exp ","}* ")"                                  -> TemplateCallNoBody {"TemplateCallNoBody"}
    Template@TemplateCallId "(" {Exp ","}* ")" TemplateBody                     -> TemplateCallNoAssigns {"TemplateCallNoAssigns"}
    Template@TemplateCallId "(" {Exp ","}* ")" "[" {PropertyAssignment ","}*"]" -> TemplateCallPropsNoBody {"TemplateCallPropsNoBody"}
    Template@TemplateCallId "[" {PropertyAssignment ","}*"]"                    -> TemplateCallProps {"TemplateCallProps"}
    Template@TemplateCallId "[" {PropertyAssignment ","}*"]" TemplateBody       -> TemplateCallPropsNoArgs {"TemplateCallPropsNoArgs"}
    Template@TemplateCallId  TemplateBody                                       -> TemplateCallBody {"TemplateCallBody"}
    
    "{" TemplateElement* "}"                                         -> TemplateBody {"TemplateBody"}
    "with" "{" ArgDefine* "}"                                        -> TemplateBody {"TemplateWith"}
    TemplateCallId "(" {FormalArg ","}* ")" "{" TemplateElement* "}" -> ArgDefine {"ArgDefine"}

    "with" "{" TemplateElement* "}"                -> TemplateCall {reject}
    
    %%disambiguate
    "define"                     -> TemplateCallId {reject}
    "for"                        -> TemplateCallId {reject}
    "placeholder"                -> TemplateCallId {reject}
    
  %%
  
    %% deprecated
    "navigate" "(" PageCall ")" UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
    "navigate" "(" PageCall ")" "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}

    "navigate" PageCall UNDEFINED* "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
    "navigate" PageCall "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}

    Page@Id "(" {Exp ","}* ")"  -> PageCall {"PageCall"}

    %%disambiguate
    "navigate" -> TemplateCallId {reject}
    
  %%

    %% deprecated
    "action" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {"Submit", prefer}
    "action" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {"Submit", prefer}
    "actionLink" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {"SubmitLink", prefer}
    "actionLink" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {"SubmitLink", prefer}

    "submit" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {"Submit", prefer}
    "submit" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {"Submit", prefer}
    "submitlink" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {"SubmitLink", prefer}
    "submitlink" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SubmitLink"), prefer}

    "submit"     ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("SubmitElem"), prefer}
    "submit"     ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SubmitElem"), prefer}
    "submitlink" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("SubmitLinkElem"), prefer}
    "submitlink" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SubmitLinkElem"), prefer}
    
    "downloadlink" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("DownloadLink"), prefer}
    "downloadlink" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("DownloadLink"), prefer}
    "outputimage" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("OutputImage"), prefer}
    "outputimage" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("OutputImage"), prefer}
    
    ActionCall -> ActionCallOrInline
    InlineAction -> ActionCallOrInline

    Action@Id "(" {Exp ","}* ")"  -> ActionCall {cons("ActionCall")}
    
    %%disambiguate
    "action"                       -> TemplateCallId {reject}
    "actionLink"                   -> TemplateCallId {reject}
    "submit"                       -> TemplateCallId {reject}
    "submitlink"                   -> TemplateCallId {reject}
    "downloadlink"                 -> TemplateCallId {reject}
    "outputimage"                  -> TemplateCallId {reject}
  %%
   
    "action" Block -> InlineAction {cons("InlineAction")}
    %% reject ambiguous ObjectCreation(SimpleSort("action"), [])
    "action" -> Sort {reject}
    %%"template" "{" TemplateElement* "}" -> InlineTemplate {cons("InlineTemplateCall")}    
    %% "template"               -> Id {reject}
   
    %% Template call without braces must be disambiguated in some cases
    "action" -> TemplateCall {reject}  %%this is an action definiton, not a templatecall without params
    "action" -> Exp {reject}		   %%this is an inline action, not a variable
    "action" -> PropertyValue {reject} %%this is an inline action, not an id
    
  %%

    %% preferably have the symbol options in one production, unfortunately then it ends up in ast, can use ast instead of cons...
    %% SubmitProp PropertyAssignSymbol ActionCallOrInline -> PropertyAssignment {ast("PropertySubmit(<1>,<3>)"),prefer}
    %% however, in this case the constructors are not automatically generated for stratego
    %% 
%%  lexical syntax %% different opinions about nice syntax here, something to discuss (leaning towards "=")
%%    ":"  -> PropertyAssignSymbol %% same as type declaration
%%    ":=" -> PropertyAssignSymbol %% same as assignment
%%    "="  -> PropertyAssignSymbol %% same as html and data model property annotations  

    SubmitProp ":"  ActionCallOrInline -> PropertyAssignment {cons("PropertySubmit"),prefer}
    SubmitProp ":=" ActionCallOrInline -> PropertyAssignment {cons("PropertySubmit"),prefer}
    SubmitProp "="  ActionCallOrInline -> PropertyAssignment {cons("PropertySubmit"),prefer}
    
    Id ":"  PropertyValue		       -> PropertyAssignment {cons("PropertyAssignment")}
    Id ":=" PropertyValue		       -> PropertyAssignment {cons("PropertyAssignment")}
    Id "="  PropertyValue		       -> PropertyAssignment {cons("PropertyAssignment")}
    
    Exp								        	   -> PropertyValue
    
    "ajax"                         -> PropertyAssignment {cons("TemplateCallPropertyAjax"),prefer}
    "secure"                       -> PropertyAssignment {cons("TemplateCallPropertySecure"),prefer} %% for navigates and submits
    "ignore-validation"            -> PropertyAssignment {cons("TemplateCallPropertyIgnoreValidation"),prefer}
    "not-secure"                   -> PropertyAssignment {cons("TemplateCallPropertyNotSecure"),prefer} %% for navigates and submits
    "not null"                     -> PropertyAssignment {cons("TemplateCallPropertyNotNull"),prefer}
    CommonAttribute                -> PropertyAssignment
       
  lexical syntax
    "onabort"    -> SubmitProp
    "onblur"     -> SubmitProp
    "onchange"   -> SubmitProp
    "onclick"    -> SubmitProp
    "ondblclick" -> SubmitProp
    
    "onerror"    -> SubmitProp
    "onfocus"    -> SubmitProp
    "onkeydown"  -> SubmitProp
    "onkeypress" -> SubmitProp
    "onkeyup"    -> SubmitProp
    
    "onload"      -> SubmitProp 
    "onmousedown" -> SubmitProp
    "onmousemove" -> SubmitProp
    "onmouseout"  -> SubmitProp
    "onmouseover" -> SubmitProp
    
    "onmouseup" -> SubmitProp
    "onreset"   -> SubmitProp
    "onresize"  -> SubmitProp
    "onselect"  -> SubmitProp
    "onsubmit"  -> SubmitProp
    
    "onunload" -> SubmitProp
    
  context-free syntax
  %%
    
    "if" "(" Exp ")" "{" TemplateElement* "}"      -> TemplateCall {reject}
    "else" "{" TemplateElement* "}"                -> TemplateCall {reject}
    "separated-by" "{" TemplateElement* "}"        -> TemplateCall {reject}

    "init" Block  		-> InitAction {cons("InitAction"),prefer}
    "init"            -> TemplateCallId {reject}
    "databind" Block  -> TemplateElement {cons("DataBindAction"),prefer}
    "databind"        -> TemplateCallId {reject}
    "render" Block    -> TemplateElement {cons("RenderAction"),prefer}
    "validate" Block  -> TemplateElement {cons("ValidateAction"),prefer}
    
    "action" ActionModifier* Action@=Id "(" {FormalArg ","}* ")" Block -> Action {cons("Action")}
    "ignore-validation" -> ActionModifier{cons("ActionModifierIgnoreValidation")}

  context-free syntax
    
    Id ".elements" -> TemplateCallId {cons("QualifiedElementsCall"),prefer}
