module names

imports
  lib/analysis-library
  lib/analysis-library-internal
  lib/index-library


imports
  include/WebDSL
  hacks


signature
  constructors
    Type        : DefDataKind
    Import      : DefDataKind
    Transitive  : ImportAnno
    CurrentFile : ImportAnno

  constructors
    Application : Namespace
    Module      : Namespace
    Import      : Namespace
    Entity      : Namespace
    Function    : Namespace
    Property    : Namespace
    Var         : Namespace
    Page        : Namespace
    Template    : Namespace
    Action      : Namespace


rules

  nam-get-scope-types :
    Application(a, _) -> [Entity(), Page()]

  nam-get-definition-keys :
    Application(a, _) -> [a]

  nam-get-definitions :
    Application(a, _) -> [(Application(), [a])]

  nam-annotate-names(|paths__, path__):
    Application(a, _) -> <Application(nam-annotate-def(|path__), id)>

  nam-unique :
    Application(a, _) -> <id>


rules

  nam-get-scope-types :
    ApplicationDefs(a, _, _) -> [Entity(), Page()]

  nam-get-definition-keys :
    ApplicationDefs(a, _, _) -> [a]

  nam-get-definitions :
    ApplicationDefs(a, _, _) -> [(Application(), [a])]

  nam-annotate-names(|paths__, path__):
    ApplicationDefs(a, _, _) -> <ApplicationDefs(nam-annotate-def(|path__), id, id)>

  nam-unique :
    ApplicationDefs(a, _, _) -> <id>


rules

  nam-get-scope-types :
    Module(m, _) -> [Entity(), Page()]

  nam-get-definition-keys :
    Module(m, _) -> [m]

  nam-get-definitions :
    Module(m, _) -> [(Module(), [m])]

  nam-annotate-names(|paths__, path__):
    Module(m, _) -> <Module(nam-annotate-def(|path__), id)>

  nam-unique :
    Module(m, _) -> <id>


rules

  nam-get-scope-types :
    ModuleDefs(m, _, _) -> [Entity(), Page()]

  nam-get-definition-keys :
    ModuleDefs(m, _, _) -> [m]

  nam-get-definitions :
    ModuleDefs(m, _, _) -> [(Module(), [m])]

  nam-annotate-names(|paths__, path__):
    ModuleDefs(m, _, _) -> <ModuleDefs(nam-annotate-def(|path__), id, id)>

  nam-unique :
    ModuleDefs(m, _, _) -> <id>


rules

  nam-get-definition-keys :
    Imports(m) -> [m]

  nam-get-definitions :
    Imports(m) -> [(Import(), [m])]

  nam-get-uses-keys :
    Imports(m) -> [m]

  nam-get-uses :
    Imports(m) -> [(Module(), [m])]

  nam-annotate-names(|paths__, path__):
    Imports(m) -> <Imports(nam-annotate-def(|path__))>

  nam-unique :
    Imports(m) -> <id>

  adjust-index-def-data(store__|namespace__, path__):
    Imports(m) -> <store__> DefData(
                              [Page()|[<index-file-to-string> <index-get-current-file>]]
                            , Import()
                            , (m, [CurrentFile()])
                            )

  adjust-index-def-data(store__|namespace__, path__):
    Imports(m) -> <store__> DefData(
                              [Entity()|[<index-file-to-string> <index-get-current-file>]]
                            , Import()
                            , (m, [CurrentFile()])
                            )


rules

  nam-get-scope-types :
    Define([Page()], x, _, _, _) -> [ Var()
                                    , Action()
                                    , Template()
                                    , Property()
                                    , Page()
                                    , Function()
                                    ]

  nam-get-definition-keys :
    Define([Page()], x, _, _, _) -> [x]

  nam-get-definitions :
    Define([Page()], x, _, _, _) -> [(Page(), [x])]

  nam-annotate-names(|paths__, path__):
    Define([Page()], x, _, _, _) -> <Define(
                                       [Page()]
                                     , nam-annotate-def(|path__)
                                     , id
                                     , id
                                     , id
                                     )>

  nam-unique :
    Define([Page()], x, _, _, _) -> <id>


rules

  nam-get-uses-keys :
    PageCall(x, _) -> [x]

  nam-get-uses :
    PageCall(x, _) -> [(Page(), [x])]

  nam-annotate-names(|paths__, path__):
    PageCall(x, _) -> <PageCall(nam-annotate-use(|paths__, Page()), id)>


rules

  nam-get-scope-types :
    Define([], x, _, _, _) -> [ Var()
                              , Action()
                              , Property()
                              , Page()
                              , Function()
                              ]

  nam-get-definition-keys :
    Define([], x, _, _, _) -> [x]

  nam-get-definitions :
    Define([], x, _, _, _) -> [(Template(), [x])]

  nam-annotate-names(|paths__, path__):
    Define([], x, _, _, _) -> <Define(
                                 []
                               , nam-annotate-def(|path__)
                               , id
                               , id
                               , id
                               )>

  nam-unique :
    Define([], x, _, _, _) -> <id>


rules

  nam-get-uses-keys :
    TemplateCallNoBody(x, _) -> [x]

  nam-get-uses :
    TemplateCallNoBody(x, _) -> [(Template(), [x])]

  nam-annotate-names(|paths__, path__):
    TemplateCallNoBody(x, _) -> <TemplateCallNoBody(nam-annotate-use(|paths__, Template()), id)>


rules

  nam-get-uses-keys :
    TemplateCallBody(x, _) -> [x]

  nam-get-uses :
    TemplateCallBody(x, _) -> [(Template(), [x])]

  nam-annotate-names(|paths__, path__):
    TemplateCallBody(x, _) -> <TemplateCallBody(nam-annotate-use(|paths__, Template()), id)>


rules

  nam-get-scope-types :
    Action(_, x, _, _) -> [ Var()
                          , Property()
                          , Page()
                          , Function()
                          ]

  nam-get-definition-keys :
    Action(_, x, _, _) -> [x]

  nam-get-definitions :
    Action(_, x, _, _) -> [(Action(), [x])]

  nam-annotate-names(|paths__, path__):
    Action(_, x, _, _) -> <Action(id, nam-annotate-def(|path__), id, id)>

  nam-unique :
    Action(_, x, _, _) -> <id>


rules

  nam-get-uses-keys :
    ActionCall(x, _) -> [x]

  nam-get-uses :
    ActionCall(x, _) -> [(Action(), [x])]

  nam-annotate-names(|paths__, path__):
    ActionCall(x, _) -> <ActionCall(nam-annotate-use(|paths__, Action()), id)>


rules

  nam-get-scope-types :
    EntityNoSuper(t, _) -> [Property(), Function()]

  nam-get-definition-keys :
    EntityNoSuper(t, _) -> [t]

  nam-get-definitions :
    EntityNoSuper(t, _) -> [(Entity(), [t])]

  nam-annotate-names(|paths__, path__):
    EntityNoSuper(t, _) -> <EntityNoSuper(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    EntityNoSuper(t, _) -> <store__> DefData(
                                       [namespace__|path__]
                                     , Type()
                                     , SimpleSort(t)
                                     )

  type-of :
    EntityNoSuper(t, _) -> SimpleSort(t)

  nam-unique :
    EntityNoSuper(t, _) -> <id>


rules

  nam-get-uses-keys :
    SimpleSort(t) -> [t]

  nam-get-uses :
    SimpleSort(t) -> [(Entity(), [t])]

  nam-annotate-names(|paths__, path__):
    SimpleSort(t) -> <SimpleSort(nam-annotate-use(|paths__, Entity()))>


rules

  nam-get-definition-keys :
    Property(f, _, t, _) -> [f]

  nam-get-definitions :
    Property(f, _, t, _) -> [(Property(), [f])]

  nam-annotate-names(|paths__, path__):
    Property(f, _, t, _) -> <Property(nam-annotate-def(|path__), id, id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    Property(f, _, t, _) -> <store__> DefData(
                                        [namespace__|path__]
                                      , Type()
                                      , t
                                      )

  type-of :
    Property(f, _, t, _) -> t

  nam-unique :
    Property(f, _, t, _) -> <id>


rules

  nam-get-definition-keys :
    PropertyNoAnno(f, _, t) -> [f]

  nam-get-definitions :
    PropertyNoAnno(f, _, t) -> [(Property(), [f])]

  nam-annotate-names(|paths__, path__):
    PropertyNoAnno(f, _, t) -> <PropertyNoAnno(nam-annotate-def(|path__), id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    PropertyNoAnno(f, _, t) -> <store__> DefData(
                                           [namespace__|path__]
                                         , Type()
                                         , t
                                         )

  type-of :
    PropertyNoAnno(f, _, t) -> t

  nam-unique :
    PropertyNoAnno(f, _, t) -> <id>


rules

  nam-get-definition-keys :
    DerivedPropertyNoAnno(f, _, t, _) -> [f]

  nam-get-definitions :
    DerivedPropertyNoAnno(f, _, t, _) -> [(Property(), [f])]

  nam-annotate-names(|paths__, path__):
    DerivedPropertyNoAnno(f, _, t, _) -> <DerivedPropertyNoAnno(nam-annotate-def(|path__), id, id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    DerivedPropertyNoAnno(f, _, t, _) -> <store__> DefData(
                                                     [namespace__|path__]
                                                   , Type()
                                                   , t
                                                   )

  type-of :
    DerivedPropertyNoAnno(f, _, t, _) -> t

  nam-unique :
    DerivedPropertyNoAnno(f, _, t, _) -> <id>


rules

  nam-get-uses-keys :
    FieldAccess(e, f) -> [f]
    where SimpleSort(t) := <type-of> e

  nam-get-uses :
    FieldAccess(e, f) -> [(Property(), [f])]
    where SimpleSort(t) := <type-of> e

  nam-annotate-names(|paths__, path__):
    FieldAccess(e, f) -> <FieldAccess(id, nam-annotate-use(|paths__, Property()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    FieldAccess(e, f) -> <index-lookup-children(|Property(), prefix__)> t
    where <target__> f
    where SimpleSort(t) := <type-of> e


rules

  nam-get-scope-types :
    Function(f, _, t, _) -> [Var(), Property()]

  nam-get-definition-keys :
    Function(f, _, t, _) -> [f]

  nam-get-definitions :
    Function(f, _, t, _) -> [(Function(), [f])]

  nam-annotate-names(|paths__, path__):
    Function(f, _, t, _) -> <Function(nam-annotate-def(|path__), id, id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    Function(f, _, t, _) -> <store__> DefData(
                                        [namespace__|path__]
                                      , Type()
                                      , t
                                      )

  type-of :
    Function(f, _, t, _) -> t

  nam-unique :
    Function(f, _, t, _) -> <id>


rules

  nam-get-uses-keys :
    ThisCall(f, _) -> [f]

  nam-get-uses :
    ThisCall(f, _) -> [ (Function(), [f])
                      , (Page(), [f])
                      ]

  nam-annotate-names(|paths__, path__):
    ThisCall(f, _) -> <ThisCall(nam-annotate-use(|paths__, Function()), id)>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    ThisCall(f, _) -> [ [Function()|path__]
                      , [Page()|path__]
                      ]
    where <target__> f


rules

  nam-get-uses-keys :
    Call(e, f, _) -> [f]
    where SimpleSort(t) := <type-of> e

  nam-get-uses :
    Call(e, f, _) -> [(Function(), [f])]
    where SimpleSort(t) := <type-of> e

  nam-annotate-names(|paths__, path__):
    Call(e, f, _) -> <Call(
                        id
                      , nam-annotate-use(|paths__, Function())
                      , id
                      )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    Call(e, f, _) -> <index-lookup-children(|Function(), prefix__)> t
    where <target__> f
    where SimpleSort(t) := <type-of> e


rules

  nam-get-definition-keys :
    Arg(x, t) -> [x]

  nam-get-definitions :
    Arg(x, t) -> [(Var(), [x])]

  nam-annotate-names(|paths__, path__):
    Arg(x, t) -> <Arg(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    Arg(x, t) -> <store__> DefData(
                             [namespace__|path__]
                           , Type()
                           , t
                           )

  type-of :
    Arg(x, t) -> t

  nam-unique :
    Arg(x, t) -> <id>


rules

  nam-get-definition-keys :
    VarDeclInit(x, t, _) -> [x]

  nam-get-definitions :
    VarDeclInit(x, t, _) -> [(Var(), [x])]

  nam-annotate-names(|paths__, path__):
    VarDeclInit(x, t, _) -> <VarDeclInit(nam-annotate-def(|path__), id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    VarDeclInit(x, t, _) -> <store__> DefData(
                                        [namespace__|path__]
                                      , Type()
                                      , t
                                      )

  type-of :
    VarDeclInit(x, t, _) -> t

  nam-unique :
    VarDeclInit(x, t, _) -> <id>


rules

  nam-get-uses-keys :
    Var(x) -> [x]

  nam-get-uses :
    Var(x) -> [ (Property(), [x])
              , (Var(), [x])
              ]

  nam-annotate-names(|paths__, path__):
    Var(x) -> <Var(nam-annotate-use(|paths__, Property()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    Var(x) -> [ [Property()|path__]
              , [Var()|path__]
              ]
    where <target__> x


rules

  nam-get-definition-keys :
    ForAllNoFilter(x, t, body, _) -> [x]

  nam-get-definitions :
    ForAllNoFilter(x, t, body, _) -> [(Var(), [x])]

  nam-annotate-names(|paths__, path__):
    ForAllNoFilter(x, t, body, _) -> <ForAllNoFilter(nam-annotate-def(|path__), id, id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    ForAllNoFilter(x, t, body, _) -> <store__> DefData(
                                                 [namespace__|path__]
                                               , Type()
                                               , t
                                               )

  type-of :
    ForAllNoFilter(x, t, body, _) -> t

  nam-unique :
    ForAllNoFilter(x, t, body, _) -> <id>