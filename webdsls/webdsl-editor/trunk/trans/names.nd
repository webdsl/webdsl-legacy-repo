module names

imports 

  include/WebDSL
  hacks

namespaces

  Application 
  Module
  Import
  Entity
  Function
  Property
  Var
  Page
  Template
  Action
  
rules // Application

  Application(a, _) :
    defines Application a
    scopes Entity, Page // Do not scope imports here, otherwise wrong path will be imported.

  ApplicationDefs(a, _, _) :
    defines Application a
    scopes Entity, Page // Do not scope imports here, otherwise wrong path will be imported.
    
rules // Module

	Module(m, _) :
		defines Module m
		scopes Entity, Page // Do not scope imports here, otherwise wrong path will be imported.

  ModuleDefs(m, _, _) :
    defines Module m
    scopes Entity, Page // Do not scope imports here, otherwise wrong path will be imported.
    
  Imports(m) : 
    defines Import m
    refers to Module m
    imports Page from Module m {current-file}   // Imports are only valid within the same file.
    imports Entity from Module m {current-file}

rules // Page

  Define([Page()], x, _, _, _) :
    defines Page x
    scopes Var, Action, Template, Property, Page, Function 
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    // HACK: Also scope Page and Function so that ThisCall can refer to pages.
    
  PageCall(x, _) :
    refers to Page x
    
rules // Template

  Define([], x, _, _, _) :
    defines Template x
    scopes Var, Action, Property, Page, Function 
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    // HACK: Also scope Page and Function so that ThisCall can refer to pages.
 
  TemplateCallNoBody(x, _) :
    refers to Template x
    
  TemplateCallBody(x, _) :
    refers to Template x
    
  // TODO: Add primitive templates: input, output, form, etc..
    
rules // Action

  Action(_, x, _, _) :
    defines Action x
    scopes Var, Property, Page, Function 
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    // HACK: Also scope Page and Function so that ThisCall can refer to pages.

  ActionCall(x, _) :
    refers to Action x
    
rules // Entity

  EntityNoSuper(t, _) :
    defines Entity t of type SimpleSort(t)
    scopes Property, Function
    
  SimpleSort(t) :
    refers to Entity t
    
  // TODO: Add primitive types: String, Email, etc..

rules // Property

  Property(f, _, t, _) :
    defines Property f of type t

  PropertyNoAnno(f, _, t) :
    defines Property f of type t
   
  DerivedPropertyNoAnno(f, _, t, _) :
    defines Property f of type t
    
  FieldAccess(e, f) :
    refers to Property f in Entity t
    where e has type SimpleSort(t)
    
rules // Function
   
  Function(f, _, t, _) :
    defines Function f of type t
    scopes Var, Property // HACK: Scope Property here because a Var(_) can refer to Property as well.

  ThisCall(f, _) :
    refers to Function f
    refers to Page f

  Call(e, f, _):
    refers to Function f in Entity t
    where e has type SimpleSort(t)
    
  // TODO: Add primitive function: save, find<x>ByName etc..

rules // Variables

  Arg(x, t) :
    defines Var x of type t
    
  VarDeclInit(x, t, _) :
    defines Var x of type t
    
  Var(x) :
    refers to Property x
    refers to Var x
    
rules // Control flow

  ForAllNoFilter(x, t, body, _) :
    defines Var x of type t //in body
    // TODO: Define x in y does not work yet.