module names

imports 

  include/WebDSL
  hacks

namespaces

  Application 
  Module
  Import
  Entity
  Function
  Property
  Var
  Page
  Template
  AjaxTemplate
  Action
  Test
  Placeholder
  
rules // Top-level definitions

  // Do not scope imports in any top-level definition, otherwise wrong path will be imported.

  Application(a, _) :
    //defines Application a
    // HACK: Anonymous scope because all applications are called "app".
    scopes Entity, Page, Test, Var, Property
    // HACK: Scope Property here because a Var(_) can refer to Property as well.

  ApplicationDefs(a, _, _) :
    //defines Application a
    // HACK: Anonymous scope because all applications are called "app".
    scopes Entity, Page, Test, Var, Property
    // HACK: Scope Property here because a Var(_) can refer to Property as well.

	Module(m, _) :
		defines Module m
		scopes Entity, Page, Test, Var, Property
		// HACK: Scope Property here because a Var(_) can refer to Property as well.

  ModuleDefs(m, _, _) :
    defines Module m
    scopes Entity, Page, Test, Var, Property
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    
  Imports(m) : 
    defines Import m
    refers to Module m
    imports Page from Module m {current-file}
    imports Entity from Module m {current-file}
    // Imports are only valid within the same file.

rules // Test

  Test(t, _) :
    defines Test t
    scopes Var, Action, Template, AjaxTemplate, Placeholder, Property, Page, Function 
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    // HACK: Also scope Page and Function so that ThisCall can refer to pages.
    
rules // Page

  Define([Page()], x, _, _, _) :
    defines Page x
    scopes Var, Action, Template, AjaxTemplate, Placeholder, Property, Page, Function 
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    // HACK: Also scope Page and Function so that ThisCall can refer to pages.
    
  PageCall(x, _) :
    refers to Page x
    
rules // Template

  Define([], x, _, _, _) :
    defines Template x
    scopes Var, Action, Template, AjaxTemplate, Placeholder, Property, Page, Function 
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    // HACK: Also scope Page and Function so that ThisCall can refer to pages.
 
  Define([AjaxTemplate()], x, _, _, _) :
    defines AjaxTemplate x
    scopes Var, Action, Template, AjaxTemplate, Placeholder, Property, Page, Function
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    // HACK: Also scope Page and Function so that ThisCall can refer to pages.
    
  // TODO: Lots of duplicate code, this could be shortened by grouping the term maches.
    
  TemplateCallNoBody(x, _) :
    refers to Template x
    refers to AjaxTemplate x
    refers to Template "input"
    refers to Template "output"
    refers to Template "form"
    refers to Template "break"
    
  TemplateCallBody(x, _) :
    refers to Template x
    refers to AjaxTemplate x
    refers to Template "input"
    refers to Template "output"
    refers to Template "form"
    refers to Template "break"
    
  TemplateCallNoArgs(x) :
    refers to Template x
    refers to AjaxTemplate x
    refers to Template "input"
    refers to Template "output"
    refers to Template "form"
    refers to Template "break"
    
rules // Action

  Action(_, x, _, _) :
    defines Action x
    scopes Var, Property, Page, Function 
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    // HACK: Also scope Page and Function so that ThisCall can refer to pages.

  ActionCall(x, _) :
    refers to Action x
    
  InitAction(_) :
    scopes Var, Property, Page, Function 
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    // HACK: Also scope Page and Function so that ThisCall can refer to pages.    
    
rules // Access control

  // TODO: Nested access control rules are hard to specify properly in NBL.

  AccessControlRule("page", x, _, _, _) :
    refers to Page x
    scopes Var, Property
    // HACK: Scope Property here because a Var(_) can refer to Property as well.

  AccessControlRule("template", x, _, _, _) :
    refers to Template x
    scopes Var, Property
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    
  AccessControlRule("ajaxtemplate", x, _, _, _) :
    refers to AjaxTemplate x
    scopes Var, Property
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    
  AccessControlRule("action", x, _, _, _) :
    refers to Action x
    scopes Var, Property
    // HACK: Scope Property here because a Var(_) can refer to Property as well.
    
rules // Ajax

  Placeholder(x, _) :
    defines Placeholder x
    
  AjaxReplace(x, _) :
    refers to Placeholder x
    
rules // Entity

  EntityNoSuper(t, _) :
    defines Entity t of type SimpleSort(t)
    scopes Property, Function
  
  // TODO: Lots of duplicate code, this could be shortened by grouping the term maches.
    
  SimpleSort(t) :
    refers to Entity t
    refers to Entity "Bool"
    refers to Entity "Int"
    refers to Entity "String"
    refers to Entity "Text"
    refers to Entity "Email"
    
  GenericSort(t, _) :
    refers to Entity t
    refers to Entity "Bool"
    refers to Entity "Int"
    refers to Entity "String"
    refers to Entity "Text"
    refers to Entity "Email"

rules // Property

  Property(f, _, t, _) :
    defines Property f of type t

  PropertyNoAnno(f, _, t) :
    defines Property f of type t
   
  DerivedPropertyNoAnno(f, _, t, _) :
    defines Property f of type t
    
  FieldAccess(e, f) :
    refers to Property f in Entity t
    where e has type SimpleSort(t)
    
rules // Function
   
  Function(f, _, t, _) :
    defines Function f of type t
    scopes Var, Property 
    // HACK: Scope Property here because a Var(_) can refer to Property as well.

  ThisCall(f, _) :
    refers to Function f
    refers to Page f
    refers to Function "assert"
    refers to Page "accessDenied"
    refers to Page "pagenotfound"

  Call(e, f, _):
    refers to Function f in Entity t
    refers to Function "save"
    where e has type SimpleSort(t)
    
  // TODO: Add generated primitive function: find<x>ByName etc..

rules // Variables

  Arg(x, t) :
    defines Var x of type t
    
  VarDecl(x, t) :
    defines Var x of type t
    
  VarDeclInit(x, t, _) :
    defines Var x of type t
    
  VarDeclInitInferred(x, e) :
    defines Var x //of type t
    // TODO: Type inference
    
  Var(x) :
    refers to Property x
    refers to Var x
    refers to Var "principal"
    refers to Var "securityContext"
    
  // TODO: Add principal/securityContext only if defined.
    
rules // Control flow

  // TODO: Define x in y does not work yet?
  // TODO: Anonymous scopes not working

  ForAllNoFilter(x, t, body, _) :
    defines Var x of type t //in body
    scopes Var, Property
    
  ForNoFilter(x, t, _, body, _) :
    defines Var x of type t //in body
    scopes Var, Property
  
  ForCount(x, from, to, body, _) :
    defines Var x //of type to in body
    scopes Var, Property
    // TODO: Type of 'from' or 'to' can be complex, need to retrieve type.
        
  ForCountStmt(x, from, to, body) :
    defines Var x //of type to in body
    scopes Var, Property
    // TODO: Type of 'from' or 'to' can be complex, need to retrieve type.
    
  ForExp(_, x, t, body, filter) :
    defines Var x of type t //in body
    scopes Var, Property