# The size of PermGen memory available to Tomcat
# It is used for both the -XX:PermSize and -XX:MaxPermSize Java options
# This property is optional and defaults to 256M
PERMSIZE="256M"

# The size of Heap memory available to Tomcat
# It is used for both the -Xms and -Xmx Java options
# This property is optional and defaults to 1g
HEAPSIZE="1g"

# The installation directory of the Oracle JDK that is to be used
# Defining a JRE is not enough, because that does not include jmap
# If this variable is available as an environment variable then it does not need to be defined here
JAVA_HOME="/usr/lib/jvm/java-7-oracle"

# The installation directory of Tomcat
# If this variable is available as an environment variable then it does not need to be defined here
# This path should be similar to what is normally set as the tomcatpath option in application.ini
CATALINA_HOME="/opt/tomcat"

RUNNINGTOMCAT=0 # Set to 1 to benchmark an already running tomcat instance (memory usage is not measured)
REDUCE_DEPLOYS=0 # Similar to RUNNINGTOMCAT, when set to 1 tomcat is started once per war (memory usage is not measured)

BASEURL="http://localhost:8080/" # to change the base url of requests

# The path of a continue file, which will be created if not found
# If the benchmark is terminiated before it is finished, then it can be started again with the same configuration to continue
# By default this continue file has the same name as the config file
# So for this example.cfg file, the default value would be example.continue
CONTINUE_PATH="test.continue"

# The paths of the *.war files that should be benchmarked
# This property is optional and the default value is obtained by executing: find ./tests/*.war
# This property is passed to a for-loop, so paths may not contain spaces
# A query string can be attached to a *.war file, for example, "test.war?disableopt" will append "disableopt" to the query string of requests.
# When compiling *.war files the dbmode in application.ini should not be set to create-drop, because a database creation script is used (except when the script is called "existing")
WARS="./tests/queryoptimization0.war ./tests/queryoptimization1.war ./tests/queryoptimization2.war ./tests/queryoptimization3.war ./tests/queryoptimization4.war ./tests/queryoptimization5.war ./tests/queryoptimization6.war ./tests/queryoptimization7.war"

# MySQL database connection options
# These are similar to the ones found in application.ini
# The dbserver property is optional and defaults to localhost
dbserver='localhost'
dbuser='root'
dbpass='myrootpassword'
dbname='mydatabase' # WARNING: The database will be overwritten by a database creation script

# The paths of the *.sql.gz files that are to be used as database creation scripts, or simply "exsisting" to reuse the existing database.
# These files should be gzipped dumps of the MySQL databases to benchmark
# These dump files can be obtained by running a *.war file with dbmode=create-drop, to let the WebDSL application initialize the database
# Then something similar to the following command can be executed: mysqldump --add-locks --extended-insert -u$dbuser -p$dbpass -h $dbserver $dbname | gzip > dump.sql.gz
# During benchmarking a single sessionId will be selected from the _SessionManager table
# It is recommended to only have one session within this table and that session should be logged-in if required
# The _lastUse value of the session is automatically update to the current time before each case
# This property is optional and the default value is obtained by executing: find ./tests/*.sql.gz
# Like with WARS this property is passed to a for-loop, so paths may not contain spaces
SQLS="./tests/small9.sql.gz ./tests/small6.sql.gz ./tests/small3.sql.gz"

SESSIONSQL="SELECT id FROM _SessionManager LIMIT 1;" # to change the query that is used to select a session

# The number of requests that are send before measuring the response time and memory usage
# Before the warmup requests, a request has already been send to initialize the application and to fill the second level cache
# During the warmup requests the ?logsql suffix is appended to the requests and its sql/entity/duplicate/collection information is recorded
# If ?logsql can return different values for warmup requests, then it is recommended to increase the number of warmup requests so an average can be calculated
# This property is optional and defaults to 5
WARMUP=5

# The number of requests send to measure the average response time and memory usage
# It is recommended that this number is as high as possible, to reduce the effect of measuring errors
# This property is optional and defaults to 50
ITERATIONS=50

# The time a request may take in seconds.
# The default is 900 seconds, which is 15 minutes.
REQUEST_TIMEOUT=900

# As with WARS and SQLS this property is passed to a for-loop
# The PAGES property defines the pages including their arguments
# This property is optional, but by default no pages are benchmarked and test cases should be defined inside a manual_test_cases function shown later
PAGES="query1"
for i in $(seq 2 8)
do
	PAGES="$PAGES query$i"
done

# The declaration of the following function is optional
# This function is called with every sql/page/war combination and should call append_test_case for test cases of interest
# Without this function all combinations will be benchmarked
# The following example will skip the small3 and small6 databases for all pages, except for page query5
test_case_filter() {
  local sql="$1"
  local sqlname="$(basename $1 .sql.gz)"
  local page="$2"
  local war="$3"
  local warname="$(basename $3 .war)"
  if [[ $sqlname == "small3" || $sqlname == "small6" ]]; then
    if [[ $page == "query5" ]]; then
      append_test_case "$sql" "$page" "$war"
    fi
  else
    append_test_case "$sql" "$page" "$war"
  fi
}

# An optional alternative way of defining test cases
# This function can define cases for pages that are not in PAGES, but the sqls and wars need to be defined in SQLS and WARS
manual_test_cases() {
  append_test_case "./tests/small9.sql.gz" "traversal1templateManual" "./tests/queryoptimization0.war"
}
