module AccessControl

%% syntax for access control  
exports

  sorts MatchId

  lexical syntax
    [a-zA-Z][a-zA-Z0-9\_]*[\*]? -> MatchId
    [\*]						-> MatchId
    [\*]						-> WildCardArg 

context-free syntax

  "access" "control" "rules" "{" AccessControlDefinition* "}"   -> Definition {cons("AccessControlDefinition")}
      
  "principal" "is" Id "with" "credentials" {Id ","}+            -> AccessControlDefinition {cons("AccessControlPrincipal")} 

  AccessControlRule                                             -> AccessControlDefinition
	
  "rules" Id MatchId "(" MatchArgs ")"
  "{" AccessControlCheck* AccessControlRule* "}"                -> AccessControlRule {cons("AccessControlRule")}

  {FormalArg ","}* WildCardArg?                                 -> MatchArgs {cons("MatchArgs"),prefer}
  {Exp ","}* WildCardArg?                                       -> MatchArgs {cons("MatchArgs")}

  %% to prevent an AccessControlRule becoming an AccessControlCheck
  "rules"                                                       -> Exp {reject}

  Exp                                                           -> AccessControlCheck {cons("AccessControlCheckExpression")}

context-free priorities
    Exp "in" Exp  -> Exp
  > Exp -> AccessControlCheck
