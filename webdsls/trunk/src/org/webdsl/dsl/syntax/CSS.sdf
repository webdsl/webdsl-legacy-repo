module CSS

hiddens
  context-free start-symbols Stylesheet
  
exports

  sorts
    Ident Name Num String UnaryOperator

  lexical syntax
    "-"? [\_a-z][\_a-z0-9\-]*      -> Ident
    [\_a-z0-9\-]+                  -> Name
    UnaryOperator?[0-9]+           -> Num
    [0-9]* "." [0-9]+              -> Num
    "\"" ~[\"\n]* "\""             -> String
    "'" ~[\"\n]* "'"               -> String
    [\+\-]                         -> UnaryOperator

  lexical restrictions
    Ident -/- [a-zA-Z0-9\_]


exports

  sorts
     Number Percentage Ems Exs Length Angle Time Freq Dimension Uri Hash

  lexical syntax
    Num                     -> Number
    Num "%"                 -> Percentage {prefer}
    Num "em"                -> Ems {prefer}
    Num "ex"                -> Exs {prefer}
    Num "px"                -> Length {prefer}
    Num "cm"                -> Length {prefer}
    Num "mm"                -> Length {prefer}
    Num "in"                -> Length {prefer}
    Num "pt"                -> Length {prefer}
    Num "pc"                -> Length {prefer}
    Num "deg"               -> Angle {prefer}
    Num "rad"               -> Angle {prefer}
    Num "grad"              -> Angle {prefer}
    Num "ms"                -> Time {prefer}
    Num "s"                 -> Time {prefer}
    Num "hz"                -> Freq {prefer}
    Num "khz"               -> Freq {prefer}
    Num Ident               -> Dimension {prefer}

    "url" "(" String ")"    -> Uri {prefer}

    "#" Name                -> Hash {prefer}

exports

  lexical syntax
    [\ \t\n\r]                        -> LAYOUT
    "/*" [\*]* ~[\n\r]* [\n\r] "*/"   -> LAYOUT

  context-free restrictions
    LAYOUT?     -/- [\ \t\n\r]
    LAYOUT?     -/- [\/].[\/]

exports

  sorts
    Stylesheet Ruleset Page PseudoPage Selector SimpleSelector Declaration Property Term Expr

  context-free syntax

    %%("@charset" String ";")?
    %%( Ruleset | Page )*                                -> Stylesheet {cons("Stylesheet")}
    Ruleset*                                           -> Stylesheet {cons("Stylesheet")}

    {Selector ","}+ "{" Declaration* "}"                     -> Ruleset {cons("Ruleset")}

    

    "@Page" PseudoPage? "{" Declaration* "}"                 -> Page  {cons("Page")}
    ":" Ident                                                -> PseudoPage  {cons("PseudoPage")}
    SimpleSelector (Combinator SimpleSelector)*              -> Selector {cons("Selector")}
    ElementName (IdSelector | Class | Attrib | Pseudo )*     -> SimpleSelector {cons("SimpleSelector")}
    (IdSelector | Class | Attrib | Pseudo )+                 -> SimpleSelector {cons("SimpleSelector")}
    Property ":" Expr Prio? ";"                              -> Declaration {cons("Declaration")}
    Ident                                                    -> Property {cons("Property")}
    Term+                                                    -> Expr {cons("Expr")}

    %%UnaryOperator?
     Number
      | Percentage
      | Length 
      | Ems 
      | Exs
      | Angle 
      | Time 
      | Freq
      | String
      | Ident
      | Uri
      | Hexcolor
      | Function                                       -> Term {cons("Term")}

exports

  sorts
    Hexcolor Function Combinator Operator Prio Class ElementName Attrib Pseudo
  
  context-free syntax

    Hash                                                        -> Hexcolor {cons("Hexcolor")}
    Ident "(" Expr ")"                                          -> Function {cons("Function")}
    "+"                                                         -> Combinator {cons("AdjacentSiblingCombinator")}
    ">"                                                         -> Combinator {cons("ChildCombinator")}
    "/"                                                         -> Operator {cons("Operator")}
    ","                                                         -> Operator {cons("Operator")}
    "!" "important"                                             -> Prio {cons("Prio")}
    "." Ident                                                   -> Class {cons("Class")}
    Ident                                                       -> ElementName {cons("ElementName")}
    "*"                                                         -> ElementName {cons("ElementName")}
    "#" Ident                                                   -> IdSelector {cons("IdSelector")}
    "[" Ident ( ( "=" | "~=" | "|=" ) ( Ident | String ) )? "]" -> Attrib {cons("Attrib")}
    ":" Ident | ( "(" Ident? ")" )                              -> Pseudo {cons("Pseudo")}
