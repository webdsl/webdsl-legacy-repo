module org/webdsl/dsl/syntax/WebDSL

hiddens
  context-free start-symbols Application
    
exports

  sorts Id QId Int

  lexical syntax
    [a-zA-Z][a-zA-Z0-9\_]* -> Id
    [0-9]+                 -> Int
    "\"" ~[\"\n]* "\""     -> String
    [\ \t\n\r]             -> LAYOUT
    "//" ~[\n\r]* [\n\r]   -> LAYOUT
  lexical restrictions
    Id -/- [a-zA-Z0-9]
  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    
  context-free syntax
    Id         -> QId
    QId "." Id -> QId {cons("Qualified")}
    
exports

  sorts Word Words Keyword

  lexical syntax
    ~[\ \t\n\r]+ -> Word
    Keyword      -> Word {reject}
    "end"        -> Keyword
  lexical restrictions
    Word -/- ~[\ \t\n\r]
  context-free syntax
    Word*   -> Words

exports

  sorts Application

  context-free syntax

    "application" QId Section* -> Application {cons("Application")}

    "section" Id+ "." Definition* -> Section {cons("Section")}

    "description" Words "end" -> Description {cons("Description")}

    "note" Words "end" -> Description {cons("Note")}

    Description -> Section
    Description -> Definition

exports

  sorts Entity Property Sort Annotation

  context-free syntax

    Id ":" Id "{" Property* "}" -> Entity {cons("Entity")}
    Id "{" Property* "}"        -> Entity {cons("EntityNoSuper")}
    Entity                      -> Definition

  sorts Property Annotation
  
  context-free syntax
    
    Id PropKind Sort "(" {Annotation ","}* ")" -> Property {cons("Property")}
    Id PropKind Sort                           -> Property {cons("PropertyNoAnno")}
    
    "::" -> PropKind {cons("Simple")}
    "->" -> PropKind {cons("Ref")}
    "<>" -> PropKind {cons("Comp")}
    
  sorts Sort
  
  context-free syntax
  
    Id                     -> Sort {cons("SimpleSort")}
    Id "<" {Sort ","}+ ">" -> Sort {cons("GenericSort")}
    Id "?"                 -> Sort {cons("OptionalSort")}

    Id                           -> Annotation {cons("SimpleAnno")}
    Id "(" {Annotation ","}* ")" -> Annotation {cons("ParamAnno")}
    
exports

  sorts TemplateDefinition Modifier
  
  context-free syntax
  
    TemplateDefinition -> Definition
  
    "define" Modifier* 
       Id "(" {FormalArg ","}* ")" 
       "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}
       
    "define" -> Id {reject}
    "for" -> Id {reject}
    
    "page"                                  -> Modifier {cons("Page")}
    Id ":" Sort                             -> FormalArg {cons("Arg")}
    
    Action  								-> TemplateElement
    TemplateDefinition                      -> TemplateElement
    TemplateCall                            -> TemplateElement
    String                                  -> TemplateElement {cons("Text")}
    
    "for" "(" Id ":" Sort "in" Exp ")" 
       "{" TemplateElement* "}"                             -> TemplateElement {cons("For")}

    "select" "(" Id ":" Sort "," String "," Exp ")" -> TemplateElement {cons("Select")}
           
    Id                                                      -> TemplateCall {cons("TemplateCallNoArgs")}
    Id "(" {TemplCallArg ","}* ")"                          -> TemplateCall {cons("TemplateCallNoBody")}
    Id                             "{" TemplateElement* "}" -> TemplateCall {cons("TemplateCallBody")}
    Id "(" {TemplCallArg ","}* ")" "{" TemplateElement* "}" -> TemplateCall {cons("TemplateCall")}
    
    Exp -> TemplCallArg
    
    
exports

  sorts Action Statements Statement Exp

  context-free syntax
  
    "action" Id "(" {FormalArg ","}* ")" Block  -> Action {cons("Action")}
    
    Action		       -> Definition
    Statement*		   -> Statements
    
    "{" Statement* "}" -> Block {cons("Block")}
    Block              -> Statement
    Assignment ";"	   -> Statement {cons("Assign")}
    Exp ";"		       -> Statement {cons("Stat")}
    
    "return" Exp ";"     -> Statement {cons("Return")}
    
    Id ":" Sort ":=" Exp ";" -> Statement {cons("VarDecl")} 

    "if" "(" Exp ")" Statement "else" Statement -> Statement {cons("If")}

    "for" "(" Id "in" Sort "where" Exp "ordered" "by" Id "ascending" ")" 
       Statement -> Statement {cons("For")}

exports

  sorts Rules Rule

  context-free syntax

    "rules" Rule* -> Definition {cons("Rules")}

    Exp "=" Exp -> Rule {cons("Equation")}

exports

  sorts Exp

  context-free syntax
  
    Int                    -> Exp {cons("Int")}
    String                 -> Exp {cons("String")}
    Id			           -> Exp {cons("Var")}
    
    Exp "." Id             -> Exp {cons("FieldAccess")}

    Id "{" Assignment* "}" -> Exp {cons("ObjectCreation")}
    QId ":=" Exp           -> Assignment {cons("Assignment")}
    
    "[" Mapping* "]"       -> Exp {cons("MapCreation")}
    Exp "->" Exp           -> Mapping {cons("Mapping")}
    
    "[" {Exp ","}* "]"     -> Exp {cons("ListCreation")}
    
    "{" {Exp ","}* "}"     -> Exp {cons("SetCreation")}
    
    Id "(" {Exp ","}* ")"  -> Exp {cons("ThisCall")}
    Exp "." Id "(" {Exp ","}* ")"  -> Exp {cons("Call")}

    Exp "==" Exp           -> Exp {cons("Eq")}
    Exp "!=" Exp           -> Exp {cons("Eq")}
    Exp "+" Exp            -> Exp {cons("Plus")}
    

    