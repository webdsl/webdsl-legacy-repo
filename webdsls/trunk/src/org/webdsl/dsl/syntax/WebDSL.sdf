module WebDSL

hiddens
  context-free start-symbols Application Module
    
imports MixHQL[HQL]
imports AccessControl
imports ValidationAnnos

exports

  sorts
    Id QId Int ModuleName SectionHeader Float FloatDigits ExponentPart
    SignedInteger String

  lexical syntax
    [a-zA-Z][a-zA-Z0-9\_]* -> Id
    [a-zA-Z0-9\-\_]+       -> FileName
    {FileName "/"}+        -> ModuleName
    "-"? [0-9]+            -> Int
    ~[\n\r]*               -> SectionName
    
    "-"? FloatDigits ExponentPart? [fFdD]? -> Float
    [0-9]* "." [0-9]* -> FloatDigits
    [0-9]+            -> FloatDigits
    [eE] SignedInteger -> ExponentPart
    [\+\-]? [0-9]+ -> SignedInteger

    "-"? [0-9]+ -> Float {reject}
    "."    -> FloatDigits  {reject}
    
    "\"" ~[\"\n]* "\""     -> String
    [\ \t\n\r]             -> LAYOUT
    "//" ~[\n\r]* [\n\r]   -> LAYOUT
    
  lexical restrictions
    Id -/- [a-zA-Z0-9]
    ModuleName -/- [a-zA-Z0-9\/]
  
  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    SectionName -/- ~[\n\r]
    
  context-free syntax
    Id         -> QId
    QId "." Id -> QId {cons("Qualified")}
    
exports

  sorts Word

  lexical syntax
    ~[\ \t\n\r\}]+ -> Word
  lexical restrictions
     Word -/- ~[\ \t\n\r\}]

exports

  sorts Application

  context-free syntax

    "application" QId Section*    -> Application {cons("Application")}

    "section" SectionName Definition* -> Section {cons("Section")}

    "description" "{" Word* "}"     -> Description {cons("Description")}

    "note" "{" Word* "}"            -> Description {cons("Note")}

    Description                   -> Section
    %%Description                   -> Definition {prefer}
    
    "module" ModuleName Section*  -> Module {cons("Module")}
    
    Module                        -> Section
    
    "imports" ModuleName          -> Section {cons("Imports")}

exports

  sorts Entity Property Sort Annotation

  context-free syntax

    "entity" Id ":" Id "{" Property* Function* "}"       -> Entity {cons("Entity")}
    "entity" Id "{" Property* Function* "}"              -> Entity {cons("EntityNoSuper")}
    "session" Id "{" Property* Function* "}"             -> Entity {cons("SessionEntity")}
    "task" Id "(" String ")" "{" Property* Function* "}" -> Entity {cons("Task")}

    Entity                                   		  -> Definition
    
    "extend" "entity" Id "{" Property* Function* "}"	  -> Definition {cons("ExtendEntity")}
  
    "globals" "{" GlobalsDef* "}"                         -> Definition {prefer,cons("GlobalsDefinition")}
    VarDecl                                               -> GlobalsDef
    Function                                              -> GlobalsDef
    
    "function" Id "(" {FormalArg ","}* ")" ":" Sort Block -> Function {cons("Function")}

  sorts Property Annotation
  
  context-free syntax
    
    Id PropKind Sort "(" {Annotation ","}* ")" -> Property {cons("Property")}
    Id PropKind Sort                           -> Property {cons("PropertyNoAnno")}

    Id PropKind Sort "(" {Annotation ","}* ")" ":=" Exp -> Property {cons("DerivedProperty")}
    Id PropKind Sort ":=" Exp                           -> Property {cons("DerivedPropertyNoAnno")}

    
    "::" -> PropKind {cons("Simple")}
    "->" -> PropKind {cons("Ref")}
    "<>" -> PropKind {cons("Comp")}
    
  sorts Sort
  
  context-free syntax
  
    Id                     -> Sort {cons("SimpleSort")}
    Id "<" {Sort ","}+ ">" -> Sort {cons("GenericSort")}
    Id "?"                 -> Sort {cons("OptionalSort")}

    Id                               -> Annotation {cons("SimpleAnno")}
    "inverse" "=" Id "." Id      -> Annotation {cons("InverseAnno")}
    "inverseSlave" "=" Id "." Id -> Annotation {cons("InverseSlaveAnno")}
%%  Id "(" {Annotation ","}* ")" -> Annotation {cons("ParamAnno")}
    
exports

  sorts TemplateDefinition Modifier
  
  context-free syntax
  
    TemplateDefinition -> Definition
  
    "define" Modifier* 
       Id "(" {FormalArg ","}* ")" 
       "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}
       
    "define" -> Id {reject}
    "for" -> Id {reject}
    
    "page"                                  -> Modifier {cons("Page")}
    "email"                                 -> Modifier {cons("Email")}
    Id ":" Sort                             -> FormalArg {cons("Arg")}
    
    InitAction								-> TemplateElement
    Action  								-> TemplateElement
    VarDecl                                 -> TemplateElement                                                                  
    TemplateDefinition                      -> TemplateElement
    TemplateCall                            -> TemplateElement {avoid}
    String                                  -> TemplateElement {cons("Text")}

  
    "where" Exp                         -> Filter {cons("FilterNoOrderBy")}
    "order" "by" Exp                    -> Filter {cons("FilterNoWhere")}
    "where" Exp "order" "by" Exp        -> Filter {cons("Filter")}
  
  
    "for" "(" Id ":" Sort "in" Exp Filter ")" 
       "{" TemplateElement* "}"                             -> TemplateElement {cons("For")}

    "for" "(" Id ":" Sort "in" Exp ")" 
       "{" TemplateElement* "}"                             -> TemplateElement {cons("ForNoFilter")}

    "for" "(" Id ":" Sort Filter ")"
       "{" TemplateElement* "}"                             -> TemplateElement {cons("ForAll")}
              
    "for" "(" Id ":" Sort ")"
       "{" TemplateElement* "}"                             -> TemplateElement {cons("ForAllNoFilter")}
    %%

    "select" "(" Id ":" Sort "," String "," Exp ")" -> TemplateElement {cons("Select")}

    "if" "(" Exp ")" "{" TemplateElement* "}"      -> TemplateElement {cons("IfTempl")}
    
    "subtable" "(" Id ":" Sort "in" Exp ")"
      "{" TemplateElement* "}"                              -> TemplateElement {cons("Subtable")}
             
    Id                                             -> TemplateCall {cons("TemplateCallNoArgs")}
    Id "(" {Exp ","}* ")"                          -> TemplateCall {cons("TemplateCallNoBody")}
    
    Id "(" Id ":" Sort ")" "{" TemplateElement* "}" -> TemplateCall {cons("TemplateCallDeclaredType")}
    
    Id                    "{" TemplateElement* "}" -> TemplateCall {cons("TemplateCallBody")}
    Id "(" {Exp ","}* ")" "{" TemplateElement* "}" -> TemplateCall {cons("TemplateCall")}
    
    %% Template call without braces must be disambiguated in some cases
    "action" -> TemplateCall {reject}
    
exports

  sorts Action Statements Statement Exp

  context-free syntax

    "init" Block  -> InitAction {cons("InitAction"),prefer}  
    "action" Id "(" {FormalArg ","}* ")" Block  -> Action {cons("Action")}
    
    Action		       -> Definition
    Statement*		   -> Statements
    
    "{" Statements "}" -> Block {cons("Block")}
    Block              -> Statement
    Assignment ";"	   -> Statement {cons("Assign")}
    Exp ";"		       -> Statement {cons("Stat")}
    
%%    "email" "(" String "," String ")" -> Statement {cons("EmailStat")}
    
    "return" Exp ";"     -> Statement {cons("Return")}
    
    "goto" Exp ";" -> Statement {cons("GoTo")}
    
    "var" Id ":" Sort ";" -> VarDecl {cons("VarDecl")} 
    
    "var" Id ":" Sort ":=" Exp ";" -> VarDecl {cons("VarDeclInit")} 
    
    VarDecl -> Statement

    "if" "(" Exp ")" Block "else" Block -> Statement {cons("If")}

    "if" "(" Exp ")" Block -> Statement {cons("IfNoElse")}

  
    "for" "(" Id ":" Sort "in" Exp Filter ")"
      Block -> Statement {cons("ForStmt")}

    "for" "(" Id ":" Sort "in" Exp ")"
      Block -> Statement {cons("ForStmtNoFilter")}


exports

  sorts Rules Rule

  context-free syntax

    "rules" Rule* -> Definition {cons("Rules")}

    Exp "=" Exp -> Rule {cons("Equation")}

exports

  sorts Exp

  context-free syntax
  
    Int                    -> Exp {cons("Int")}
    Float                  -> Exp {cons("Float")}
    String                 -> Exp {cons("String")}
    Id			           -> Exp {cons("Var")}
    "in"                   -> Exp {reject}
    "return"               -> Id {reject}
    
    Exp "." Id             -> Exp {cons("FieldAccess"),prefer}

    Id "{" Assignment* "}" -> Exp {cons("ObjectCreation")}
    QId ":=" Exp           -> Assignment {cons("Assignment")}
    
    "[" Mapping* "]"       -> Exp {cons("MapCreation")}
    Exp "->" Exp           -> Mapping {cons("Mapping")}
    
    "[" {Exp ","}* "]"     -> Exp {cons("ListCreation")}
    
    "{" {Exp ","}* "}"     -> Exp {cons("SetCreation")}

    "List" "<" Sort ">" "(" {Exp ","}* ")" -> Exp {cons("TypedListCreation"), prefer}
    "Set" "<" Sort ">" "(" {Exp ","}* ")" -> Exp {cons("TypedSetCreation"), prefer}
      
    Id "(" {Exp ","}* ")"  -> Exp {cons("ThisCall")}
    "!" "(" {Exp ","}* ")"  -> Exp {reject}

    Exp "." Id "(" {Exp ","}* ")"  -> Exp {cons("Call")}
    
    Exp "is" "a" Sort      -> Exp {cons("IsA")}
    Exp "as" Sort          -> Exp {cons("Cast"), avoid} %% Casting, hooray!

    Exp "in" Exp           -> Exp {cons("InColl")}

    Exp "=" Exp           -> Exp {cons("Eq")}
    Exp "!=" Exp           -> Exp {cons("NotEq")}
    Exp ">" Exp           -> Exp {cons("LargerThan")}
    Exp ">=" Exp           -> Exp {cons("LargerThanOrEqual")}
    Exp "<" Exp           -> Exp {cons("SmallerThan")}
    Exp "<=" Exp           -> Exp {cons("SmallerThanOrEqual")}
        
    "true"                 -> Exp {prefer,cons("True")}
    "false"                -> Exp {prefer,cons("False")}
  
    "null"                 -> Exp {prefer,cons("Null")}
    
    Exp "&&" Exp          -> Exp {cons("And"), assoc}
    Exp "||" Exp           -> Exp {cons("Or"), assoc}
    "!" Exp              -> Exp {cons("Not")}
    
    "(" Exp ")"            -> Exp {bracket}
  
    "[" Exp "for" "(" Id ":" Sort "in" Exp Filter ")" "]" -> Exp {cons("ForExp")}

    "[" Exp "for" "(" Id ":" Sort "in" Exp ")" "]" -> Exp {cons("ForExpNoFilter")}    
    
    Exp "*" Exp  -> Exp {cons("Mul"),assoc}
    Exp "/" Exp  -> Exp {cons("Div"),assoc}
    Exp "%" Exp  -> Exp {cons("Mod"),assoc}
    Exp "+" Exp  -> Exp {cons("Add"),assoc}
    Exp "-" Exp  -> Exp {cons("Sub"),assoc}

context-free priorities
  {left:
    Exp "." Id "(" {Exp ","}* ")"  -> Exp
    Exp "." Id  -> Exp }
  > Exp "as" Sort -> Exp
  > "!" Exp -> Exp
  > Exp "in" Exp -> Exp
  > {left: 
       Exp "*" Exp -> Exp 
       Exp "/" Exp -> Exp }
  > {left: 
       Exp "+" Exp -> Exp 
       Exp "-" Exp -> Exp }
  > {left:
       Exp "=" Exp -> Exp
       Exp "!=" Exp -> Exp
       Exp ">" Exp -> Exp
       Exp ">=" Exp -> Exp
       Exp "<" Exp -> Exp
       Exp "<=" Exp -> Exp }
  > {left:
       Exp "&&" Exp -> Exp }
  > {left:
       Exp "||" Exp -> Exp }

exports

  context-free syntax
  
    QueryRule[[HQL]] -> Exp {cons("HqlQuery"), prefer}
    
    "~" Exp -> Expression[[HQL]] {cons("DslExp")}

    
    
    
