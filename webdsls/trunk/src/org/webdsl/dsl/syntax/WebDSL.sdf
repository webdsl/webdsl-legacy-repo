module WebDSL

imports
  MixHQL[HQL]
  AccessControl
  ValidationAnnos
%%  InputValidation
  Styling
  Enums
  PagedFor
  Derive
  Procedures
  TemplateMarkdown
  StringSelectEntity

hiddens
  context-free start-symbols
    Application Module Unit

exports

  sorts
    Id QId Int ModuleName SectionHeader Float FloatDigits ExponentPart
    SignedInteger String UNDEFINED Eof

  lexical syntax
    [a-zA-Z][a-zA-Z0-9\_]* -> Id
    [a-zA-Z0-9\-\_]+       -> FileName
    {FileName "/"}+        -> ModuleName
    ~[\n\r]*               -> SectionName

  lexical restrictions
    Id         -/- [a-zA-Z0-9\_]
    ModuleName -/- [a-zA-Z0-9\/]

  lexical syntax
    "-"? [0-9]+            -> Int

  lexical syntax
    "-"? FloatDigits
     ExponentPart? [fFdD]? -> Float
    [0-9]* "." [0-9]*      -> FloatDigits
    [0-9]+                 -> FloatDigits
    [eE] SignedInteger     -> ExponentPart
    [\+\-]? [0-9]+         -> SignedInteger

    "-"? [0-9]+            -> Float {reject}
    "."                    -> FloatDigits  {reject}

  lexical syntax
    "\"" ~[\"\n]* "\""           -> String
    [\ \t\n\r]                   -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | Eof) -> LAYOUT
    "/*" CommentChar* "*/"       -> LAYOUT
                                 -> Eof
    ~[\*]                        -> CommentChar
    Asterisk                     -> CommentChar
    [\*]                         -> Asterisk

  lexical restrictions
    Asterisk   -/- [\/]
    Eof        -/- ~[]

  context-free restrictions
    LAYOUT?     -/- [\ \t\n\r]
    LAYOUT?     -/- [\/].[\/]
    LAYOUT?     -/- [\/].[\*]
    SectionName -/- ~[\n\r]

  context-free syntax
    Id         -> QId
    QId "." Id -> QId {cons("Qualified")}

  lexical restrictions
    "page" -/- [a-zA-Z0-9]

exports

  sorts Word Unit

  lexical syntax
    ~[\ \t\n\r\}]+ -> Word
  lexical restrictions
     Word -/- ~[\ \t\n\r\}]

exports

  sorts Application
  
  syntax

    "section" <SectionName-CF> <LAYOUT?-CF> <Definition*-CF> -> <Section-CF> {cons("Section")}

  context-free syntax

    "application" QId Definition+ Section* -> Application {cons("ApplicationDefs")}
    "application" QId Section*      -> Application {cons("Application")}

    "description" "{" Word* "}"     -> Description {cons("Description")}

    "note" "{" Word* "}"            -> Description {cons("Note")}

    Description                   -> Definition
    %%Description                   -> Definition {prefer}

    "module" ModuleName Section*  -> Module {cons("Module")}
    "module" ModuleName Definition+ Section*  -> Module {cons("ModuleDefs")}

    "imports" ModuleName          -> Section {cons("Imports")}
    
    Application                   -> Unit
    
    Module                        -> Unit

exports

  sorts Entity Property Sort Annotation

  context-free syntax

    "entity" Id ":" Id "{" Property* Function* "}"       -> Entity {cons("Entity")}
    "entity" Id "{" Property* Function* "}"              -> Entity {cons("EntityNoSuper")}
    "session" Id "{" Property* Function* "}"             -> Entity {cons("SessionEntity")}

    Entity                                   		     -> Definition

    "extend" "entity" Id "{" Property* Function* "}"	 -> Definition {cons("ExtendEntity")}
    "extend" "session" Id "{" Property* Function* "}"   -> Definition {cons("ExtendSessionEntity")}

    "globals" "{" GlobalsDef* "}"                        -> Definition {prefer,cons("GlobalsDefinition")}
    VarDecl                                              -> GlobalsDef
    Function                                             -> GlobalsDef
    GlobalsDef                                           -> Definition
    InitAction                                           -> Definition

    "function" Id "(" {FormalArg ","}* ")" ":" Sort
        Block                                            -> Function {cons("Function")}

    "function" Id "(" {FormalArg ","}* ")" 
        Block                                            -> FunctionNoReturn {cons("FunctionNoReturn")}

    FunctionNoReturn                                     -> Function

    "extend" FunctionNoReturn                            -> Function {cons("ExtendFunction")}

  sorts Property Annotation

  context-free syntax

    Id PropKind Sort "(" {Annotation ","}* ")" -> Property {cons("Property")}
    Id PropKind Sort                           -> Property {cons("PropertyNoAnno")}

    Id PropKind Sort "(" {Annotation ","}* ")" ":=" Exp -> Property {cons("DerivedProperty")}
    Id PropKind Sort ":=" Exp                           -> Property {cons("DerivedPropertyNoAnno")}


    "::" -> PropKind {cons("Simple")}
    "->" -> PropKind {cons("Ref")}
    "<>" -> PropKind {cons("Comp")}

  sorts Sort

  context-free syntax

    Id                     -> Sort {cons("SimpleSort")}
    Id "<" {Sort ","}+ ">" -> Sort {cons("GenericSort")}

    Id                           -> Annotation {cons("SimpleAnno")}
    "inverse" "=" Id "." Id      -> Annotation {cons("InverseAnno")}
    "inverseSlave" "=" Id "." Id -> Annotation {cons("InverseSlaveAnno")}
    "inline" "(" {Id ","}* ")"   -> Annotation {cons("InlineAnno")}
    "select" "=" Id              -> Annotation {cons("SelectAnno")}
%%  Id "(" {Annotation ","}* ")" -> Annotation {cons("ParamAnno")}

exports

  sorts TemplateDefinition Modifier Exp

  context-free syntax

    TemplateDefinition -> Definition

    "define" Modifier*
       Id "(" {FormalArg ","}* ")"
       "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}

    "define" Modifier*
       Id UNDEFINED*
       "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}
    
    "define" -> Id {reject}
    "for" -> Id {reject}

    "page"                                  -> Modifier {cons("Page")}
    "email"                                 -> Modifier {cons("Email")}
    "template"                              -> Modifier {cons("Template")}
    "local"                                 -> Modifier {cons("Local")}
    "feed"                                  -> Modifier {cons("Feed")}
    Id ":" Sort                             -> FormalArg {cons("Arg")}

    InitAction							    -> TemplateElement
    Action  						        -> TemplateElement
    VarDecl                                 -> TemplateElement
    TemplateDefinition                      -> TemplateElement
    TemplateCall                            -> TemplateElement {avoid}
    String                                  -> TemplateElement {cons("Text")}


    "where" Exp                              -> Filter {cons("FilterNoOrderByNoLimit")}
    "order" "by" OrderExp                    -> Filter {cons("FilterNoWhereNoLimit")}
    "where" Exp "order" "by" OrderExp        -> Filter {cons("FilterNoLimit")}
    "where" Exp Limit                        -> Filter {cons("FilterNoOrderBy")}
    "order" "by" OrderExp Limit              -> Filter {cons("FilterNoWhere")}
    Limit                                    -> Filter {cons("FilterNoWhereNoOrderBy")}
    "where" Exp "order" "by" OrderExp Limit  -> Filter {cons("Filter")}
    Exp                                      -> OrderExp {cons("OrderNonSpecific")}
    Exp "asc"                                -> OrderExp {cons("OrderAscending")}
    Exp "desc"                               -> OrderExp {cons("OrderDescending")}
    "limit" Exp "offset" Exp                 -> Limit {cons("Limit")}
    "limit" Exp                              -> Limit {cons("LimitNoOffset")}
    "offset" Exp                             -> Limit {cons("LimitNoLimit")}


    "for" "(" Id ":" Sort "in" Exp Filter ")"
       "{" TemplateElement* "}"                             -> TemplateElement {cons("For")}

    "for" "(" Id ":" Sort "in" Exp ")"
       "{" TemplateElement* "}"                             -> TemplateElement {cons("ForNoFilter")}

    "for" "(" Id ":" Sort Filter ")"
       "{" TemplateElement* "}"                             -> TemplateElement {cons("ForAll")}

    "for" "(" Id ":" Sort ")"
       "{" TemplateElement* "}"                             -> TemplateElement {cons("ForAllNoFilter")}


    "for" "(" Id ":" Sort "in" Exp ")"
       "{" TemplateElement* "}" 
    "separated-by" "{" TemplateElement* "}"               -> TemplateElement {cons("ForSepNoFilter")}

    "for" "(" Id ":" Sort "in" Exp Filter ")"
       "{" TemplateElement* "}" 
    "separated-by" "{" TemplateElement* "}"               -> TemplateElement {cons("ForSep")}

    %%

    "select" "(" Id ":" Sort "," String "," Exp ")" -> TemplateElement {cons("Select")}

    "select" "(" Exp "from" Exp ")" -> TemplateElement {cons("SelectFromList")}

    "if" "(" Exp ")" "{" TemplateElement* "}" "else" "{" TemplateElement* "}"
                                                   -> TemplateElement {cons("IfTempl"),prefer}
    "if" "(" Exp ")" "{" TemplateElement* "}"      -> TemplateElement {cons("IfNoElseTempl")}

  %%

    Id                                             -> TemplateCall {cons("TemplateCallNoArgs")}
    Id "(" {Exp ","}* ")"                          -> TemplateCall {cons("TemplateCallNoBody")}
    Id "(" {Exp ","}* ")" "{" TemplateElement* "}" -> TemplateCall {cons("TemplateCallNoAssigns")}
  
    Id "(" {Exp ","}* ")" "[" {PropertyAssignment ","}*"]" -> TemplateCall {cons("TemplateCallPropsNoBody")}
    Id "[" {PropertyAssignment ","}*"]" -> TemplateCall {cons("TemplateCallProps")}
    Id "[" {PropertyAssignment ","}*"]" "{" TemplateElement* "}" -> TemplateCall {cons("TemplateCallPropsNoArgs")}

    Id                    "{" TemplateElement* "}" -> TemplateCall {cons("TemplateCallBody")}
    Id "(" {Exp ","}* ")" "[" {PropertyAssignment ","}*"]" "{" TemplateElement* "}" -> TemplateCall {cons("TemplateCall")}

  %%
    
    "if" "(" Exp ")" "{" TemplateElement* "}"      -> TemplateCall {reject}
    "else" "{" TemplateElement* "}"                -> TemplateCall {reject}
    "separated-by" "{" TemplateElement* "}"                -> TemplateCall {reject}

  %%
    
    Id ":=" PropertyValue				           -> PropertyAssignment {cons("PropertyAssignment")}
    Id											   -> PropertyValue {prefer}
    String										   -> PropertyValue {cons("String"),prefer}  %% needed to deconfuse StyleValue and Exp
    Exp								        	   -> PropertyValue 
    "[" {PropertyValue "," }* "]"				   -> PropertyValue{cons("PropertyValueList"), prefer}
    StyleValue									   -> PropertyValue
  
    %%AJAX desugarings/ inline
    "action" Block -> Exp {cons("InlineAction"), prefer}
    "template" "{" TemplateElement* "}" -> Exp {cons("InlineTemplateCall"), prefer}    
   
    %% Template call without braces must be disambiguated in some cases
    "action" -> TemplateCall {reject}  %%this is an action definiton, not a templatecall without params
    "action" -> Exp {reject}		   %%this is an inline action, not a variable
    "action" -> PropertyValue {reject} %%this is an inline action, not an id

exports

  sorts Action Statements Statement Exp

  context-free syntax

    "init" Block  		-> InitAction {cons("InitAction"),prefer}
    "action" 
      Id "(" {FormalArg ","}* ")" 
      Block  			-> Action {cons("Action")}
    
    Action		       	-> Definition
    Statement*		   	-> Statements

    "{" Statements "}" 		-> Block {cons("Block")}
    Block              		-> Statement
    %%Assignment ";"	   	-> Statement {cons("Assign")}
    Exp ";"		       	-> Statement {cons("Stat")}

    "return" Exp ";"     	-> Statement {cons("Return")}
    
    "return" ";"         	-> Statement {cons("ReturnEmpty")}
    
  context-free syntax

    Id Id "<<" Id  ";" 	 	-> Statement {cons("AjaxActionIdParam"),prefer}
    Id Id "<<" ";"		-> Statement {cons("AjaxActionNoParam")}
    Id "<<" Exp ";"	 	-> Statement {cons("AjaxActionNoTarget")}
    Id Id "<<" Exp ";"   	-> Statement {cons("AjaxAction")}

    "cancel" Exp ";"     	-> Statement {cons("Cancel")}

    "goto" Exp ";"       	-> Statement {cons("GoTo")}

    "schedule" Exp "for" Exp ";" -> Statement {cons("Schedule")}
    "schedule" Exp ";"           -> Statement {cons("ScheduleNoFor")}

  context-free syntax

    "var" Id ":" Sort ";" 	-> VarDecl {cons("VarDecl")}
    "var" Id ":" Sort 		-> TemplateElement {cons("VarDecl")} %% TODO: Make neat

    "var" Id ":" Sort ":=" Exp ";" -> VarDecl {cons("VarDeclInit")}
    "var" Id ":" Sort ":=" Exp -> TemplateElement {cons("VarDeclInit")} %% TODO: Make neat

    VarDecl -> Statement

  context-free syntax

    "if" "(" Exp ")" Block "else" Block -> Statement {cons("If")}

    "if" "(" Exp ")" Block 		-> Statement {cons("IfNoElse")}

    "case" "(" Exp ")" "{" Case* "}" 	-> Statement {cons("Case")}
    ConstValue Block                 	-> Case {cons("CaseAlt")}
    "default"  Block                 	-> Case {cons("CaseDefault")}


  context-free syntax

    "for" "(" Id ":" Sort "in" Exp Filter ")"
      Block 				-> Statement {cons("ForStmt")}

    "for" "(" Id ":" Sort "in" Exp ")"
      Block 				-> Statement {cons("ForStmtNoFilter")}

    "for" "(" Id ":" Sort Filter ")"
      Block 				-> Statement {cons("ForAllStmt")}

    "for" "(" Id ":" Sort ")"
      Block 				-> Statement {cons("ForAllStmtNoFilter")}


exports

  sorts Rules Rule

  context-free syntax

    "rules" Rule* -> Definition {cons("Rules")}

    Exp "=" Exp -> Rule {cons("Equation")}

exports

  sorts ConstValue Exp

  context-free syntax
    Int                    -> ConstValue {cons("Int")}
    Float                  -> ConstValue {cons("Float")}
    String                 -> ConstValue {cons("String")}

    ConstValue                  -> Exp

    Id			   -> Exp {cons("Var")}
    "in"                   -> Exp {reject}
    "return"               -> Id {reject}
        
    %% to be able to refer to page or template farg/var from actions when names clashing with farg/var in action
    "externalscope" "." Id -> Exp {cons("ExternalScopeVar")}

    Exp "." Id             -> Exp {cons("FieldAccess"),prefer}

    Sort "{" ObjectPropertyAssignment* "}"         -> Exp {cons("ObjectCreation")}
    Sort "{" { ObjectPropertyAssignment "," }* "}" -> Exp {cons("ObjectCreation"), prefer}

    Id ":=" Exp           -> ObjectPropertyAssignment {cons("ObjectPropertyAssignment")}

    QId ":=" Exp           -> Assignment {cons("Assignment")}
    Assignment				-> Exp

    "[" Mapping* "]"       -> Exp {cons("MapCreation")}
    Exp "->" Exp           -> Mapping {cons("Mapping")}

    "[" {Exp ","}* "]"     -> Exp {cons("ListCreation")}

    "{" {Exp ","}* "}"     -> Exp {cons("SetCreation")}

    "List" "<" Sort ">" "(" {Exp ","}* ")" -> Exp {cons("TypedListCreation"), prefer}
    "Set" "<" Sort ">" "(" {Exp ","}* ")" -> Exp {cons("TypedSetCreation"), prefer}

    Id "(" {Exp ","}* ")"  -> Exp {cons("ThisCall")}
    "!" "(" {Exp ","}* ")"  -> Exp {reject}

    Exp "." Id "(" {Exp ","}* ")"  -> Exp {cons("Call")}

    Exp "is" "a" Sort      -> Exp {cons("IsA")}
    Exp "as" Sort          -> Exp {cons("Cast"), avoid} %% Casting, hooray!

    Exp "in" Exp           -> Exp {cons("InColl")}

    Exp "==" Exp           -> Exp {cons("Eq")}
    Exp "!=" Exp           -> Exp {cons("NotEq")}
    Exp ">" Exp           -> Exp {cons("LargerThan")}
    Exp ">=" Exp           -> Exp {cons("LargerThanOrEqual")}
    Exp "<" Exp           -> Exp {cons("SmallerThan")}
    Exp "<=" Exp           -> Exp {cons("SmallerThanOrEqual")}

    "true"                 -> Exp {prefer,cons("True")}
    "false"                -> Exp {prefer,cons("False")}

    "null"                 -> Exp {prefer,cons("Null")}

    Exp "&&" Exp          -> Exp {cons("And"), assoc}
    Exp "||" Exp           -> Exp {cons("Or"), assoc}
    "!" Exp              -> Exp {cons("Not")}

    "(" Exp ")"            -> Exp {bracket}


    "[" Exp "for" "(" Id ":" Sort "in" Exp Filter ")" "]" -> ForExp {cons("ForExp")}
    "[" Exp "for" "(" Id ":" Sort "in" Exp ")" "]"        -> ForExp {cons("ForExpNoFilter")}
    "[" Exp "|" Id ":" Sort "in" Exp Filter "]"           -> ForExp {cons("ForExp")}
    "[" Exp "|" Id ":" Sort "in" Exp "]"                  -> ForExp {cons("ForExpNoFilter")}
    ForExp                                                -> Exp

    "And" ForExp                                          -> Exp {cons("AndForExp")}
    "Or"  ForExp                                          -> Exp {cons("OrForExp")}


    Exp "*" Exp  -> Exp {cons("Mul"),assoc}
    Exp "/" Exp  -> Exp {cons("Div"),assoc}
    Exp "%" Exp  -> Exp {cons("Mod"),assoc}
    Exp "+" Exp  -> Exp {cons("Add"),assoc}
    Exp "-" Exp  -> Exp {cons("Sub"),assoc}

context-free priorities
  {left:
    Exp "." Id "(" {Exp ","}* ")"  -> Exp
    Exp "." Id  -> Exp }
  > Exp "as" Sort -> Exp
  > "!" Exp -> Exp
  > Exp "in" Exp -> Exp
  > {left:
       Exp "*" Exp -> Exp
       Exp "%" Exp -> Exp
       Exp "/" Exp -> Exp }
  > {left:
       Exp "+" Exp -> Exp
       Exp "-" Exp -> Exp }
  > {left:
       Exp "==" Exp -> Exp
       Exp "!=" Exp -> Exp
       Exp ">" Exp -> Exp
       Exp ">=" Exp -> Exp
       Exp "<" Exp -> Exp
       Exp "<=" Exp -> Exp }
  > {left:
       Exp "&&" Exp -> Exp }
  > {left:
       Exp "||" Exp -> Exp }
  > Assignment -> Exp 

exports

  context-free syntax

    QueryRule[[HQL]] -> Exp {cons("HqlQuery"), prefer}

    "~" Exp -> Expression[[HQL]] {cons("DslExp")}




