/**
 * Parsing WebDSL web application definitions.
 */

module org/webdsl/dsl/syntax/parse-webdsl

imports
  libstratego-lib
  libstratego-sglr

signature
  constructors
    At : File * Row * Column -> Location

/**
 * Main parsing strategies.
 */
strategies

  xtc-parse-webdsl =
    xtc-ensure-file;
    where(id
      ; path := <path-of-xtc-file>
      ; (appname, _) := <split-before> (path, ".app")
      /*
      ; rules ( AppName := appname )
      ; if PythonBackend then
          rules ( AppRoot := "" )
        else
          rules ( AppRoot := <concat-strings> ["/", appname] )
        end
        */
    )
    ; xtc-parse-webdsl-unit(|path)
    ; check-for-ambiguities(|path)
  
  webdsl-anno-location(|path) = // NOTE: this requires Stratego/XT revision 18217 or newer
    asfix-anno-location
  ; topdown(
        try(\t {Location(r, c, _, _)} -> t {At(path, r, c)}\)
      )
  
  xtc-parse-webdsl-module = 
    xtc-ensure-file;
    where(id
      ; path := <path-of-xtc-file>
    )
    ; xtc-parse-webdsl-unit(|path)
    ; check-for-ambiguities(|path)
    ; try(simplify-module-constructor)
  
  xtc-parse-webdsl-unit(|path) =
      with(
        tbl := <get-webdsl-parse-table>
      )
    ; parse-xtc-file-pt(err(|["cannot open file ", path]), strsglr-report-parse-error | tbl, "Unit", path)
    ; webdsl-anno-location(|path)
    ; implode-asfix
  
  xtc-parse-webdsl-unit-override(|path) =
    fail // may be overridden externally

  simplify-module-constructor :
    ModuleDefs(qid, defs, sections) -> Module(qid, [Section("definitions", defs)|sections])

  /**
   * @type String -> ParseTree(sort)
   */
  parse-webdsl-string-pt =
    where(tbl := <get-webdsl-parse-table>)
    ; parse-string-pt(strsglr-report-parse-error | tbl, "Unit", "string")
    ; webdsl-anno-location(|"")

  parse-webdsl-string =
    parse-webdsl-string-pt
    ; implode-asfix
    ; check-for-ambiguities(|"")

  /**
   * Returns an open parse table for the given sort.
   *
   * @type Sort -> OpenParseTable
   */
  get-webdsl-parse-table =
    <jfr-memo-open-parse-table(import-term(WebDSL.tbl))> "WebDSL.tbl"
    
  //report amb terms  
  check-for-ambiguities(|path) = 
    if collect(?amb(_)) => [_ | _] => ambs then
      !ambs
    ; map(strip-annos; pp-aterm(|"Ambiguities found during parsing of ",path))
    ; fatal-err-msg(|["Internal error - ambiguities found in module ", path])
    end
   
