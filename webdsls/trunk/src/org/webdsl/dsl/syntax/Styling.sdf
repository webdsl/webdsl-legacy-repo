module Styling

%% syntax for styling of WebDSL applications

exports

  sorts
    Name Num String UnaryOperator

  lexical syntax
    [a-zA-Z][a-zA-Z\-\_]+          -> ValueName
    [a-z][a-z\-]+           	   -> Value
    [a-f0-9]+ 	                   -> Hex
    [a-z\%]+                       -> Unit
    [0-9]+                         -> Num
    [0-9]* "." [0-9]+              -> Num
    "\"" ~[\"\n]* "\""             -> String
    "'" ~[\"\n]* "'"               -> String

  lexical syntax
    [a-zA-Z][a-zA-Z0-9\_]*[\*]? -> MatchIdent
    [\*]                        -> MatchIdent
    [\*]                        -> WildCardArg 
    
    
  lexical restrictions
    ValueName -/- [a-zA-Z\-\_]
    Value -/- [a-z\-]
    Unit -/- [a-z\%]
    Hex -/- [a-f0-9]
    
exports

  sorts
     Number

  lexical syntax
    Num                     -> Number
    Num "%"                 -> Percentage {prefer}
    Num "em"                -> Ems {prefer}
    Num "ex"                -> Exs {prefer}
    Num "px"                -> Length {prefer}
    Num "cm"                -> Length {prefer}
    Num "mm"                -> Length {prefer}
    Num "in"                -> Length {prefer}
    Num "pt"                -> Length {prefer}
    Num "pc"                -> Length {prefer}
    Num "deg"               -> Angle {prefer}
    Num "rad"               -> Angle {prefer}
    Num "grad"              -> Angle {prefer}
    Num "ms"                -> Time {prefer}
    Num "s"                 -> Time {prefer}
    Num "hz"                -> Freq {prefer}
    Num "khz"               -> Freq {prefer}
    Num Id                  -> Dimension {prefer}





context-free syntax

  "theme" Modifier Id "(" ")" "{" StyleDeclaration* "}"         -> Definition {cons("ThemeDefinition")}

context-free syntax %% Styling syntax

  "style" Id StyleDefinition*                                   -> Section {cons("StyleSection")}

  Selector "{" StyleStatement* "}"           		        	-> StyleDefinition {cons("StyleDefinition")}

  SimpleSelector
    (Combinator SimpleSelector SelectorAttribute?)*				-> Selector {cons("Selector")}
  
  Id MatchDefinition 	-> SimpleSelector {cons("SimpleSelector")}
  "#" Id				-> SimpleSelector {cons("IdSimpleSelector")}
  Id					-> SimpleSelector {cons("ElemSimpleSelector")}
  "." Id				-> SimpleSelector {cons("ClassSimpleSelector")}
  MatchDefinition       -> SimpleSelector {cons("SimpleSelector")}
  
  "." ValueName			-> SelectorAttribute {cons("SelectorAttribute")}
  
  ">"                   -> Combinator {cons("ChildCombinator")}
  ">>"                   -> Combinator {cons("DescendantCombinator"), prefer}
  


  MatchIdent "(" MatchDefinitionArgs ")"							-> MatchDefinition {cons("MatchDefinition")}
  {FormalArg ","}*                                              -> MatchDefinitionArgs
  

  "const" Id ":" StyleSort ";" 									-> StyleVarDecl {cons("StyleVarDecl")}
  "const" Id ":" StyleSort ":=" StyleExpression ";" 			-> StyleVarDecl {cons("StyleVarDeclInit")}
  
  StyleVarDecl                                                  -> StyleStatement {prefer}
  StyleVarDecl													-> StyleDefinition
  
  StyleProperty ":=" StyleExpression ";"      	                -> StyleStatement {cons("StyleDeclaration")}
%%  StylePropertyLocal ":=" StyleProperty ";"    	                -> StyleStatement {cons("StyleDeclaration")}

  ValueName														-> StyleProperty {cons("StyleProperty")}

  MatchDefinition "." StyleProperty								-> StyleExpression {cons("StylePropertyValue")}

  Id -> StyleExpression {cons("Var")}

  StyleValue -> StyleExpression
%%  StyleValues -> StyleExpression

  Number Unit 						-> StyleValue {cons("StyleValue")}
  StyleSort StyleValueExtension+	-> StyleValue {cons("StyleValue")}
  Uri 						-> StyleValue {cons("StyleValue")}
  Hash 						-> StyleValue {cons("StyleValue")}
  Value		 				-> StyleValue {cons("StyleValue"), prefer}
  
  "." ValueName					-> StyleValueExtension {cons("StyleValueExtension") }

%%  {StyleValue "|"}* -> StyleValue {cons("StyleValueOptions") }

  Id Unit 		-> StyleSort {cons("StyleSort")}
  Id			-> StyleSort {cons("StyleSort")}

  "url" "(" String ")"    -> Uri {cons("Uri")}
  "#" Hex                 -> Hash {cons("Hash")}


  "const" -> Id {reject}  
  "layout" -> Id {reject}
  "style" -> Id {reject}
  "theme" -> Id {reject}


context-free syntax %% Layout syntax

  "layout" LayoutDefinition* 							-> Section {cons("LayoutSection")}

  Id MatchDefinition "{" LayoutStatement* "}"   		-> LayoutDefinition {cons("LayoutDefinition")}
  
  StyleDefinition										-> LayoutDefinition
%%  StyleStatement										-> LayoutStatement
  
  LayoutExpression ";"                                  -> LayoutStatement {cons("LayoutStatement")}
  Id ":" "[" LayoutExpressions "]"     		            -> LayoutExpression {cons("NamedLayoutExpression")}
  {LayoutExpression "|"}+								-> LayoutExpressions
  Id			 										-> LayoutExpression {cons("LayoutExpression")}
  MatchDefinition 										-> LayoutExpression {cons("LayoutExpression")}

  