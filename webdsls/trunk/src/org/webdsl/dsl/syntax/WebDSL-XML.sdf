module WebDSL-XML

exports
  context-free syntax

    "<" QualName Attribute* "/>" -> TemplateElement {cons("XMLEmptyElement")}

    "<" QualName Attribute* ">"
      TemplateElement*
    "</" QualName ">" -> TemplateElement {cons("XMLElement")}

  %% http://www.w3.org/html/wg/drafts/html/master/single-page.html#void-elements
  context-free syntax
    "<" HTML5VoidElement Attribute* ">" -> TemplateElement {cons("XMLEmptyElementUnclosed")}
  lexical syntax
    "area" -> HTML5VoidElement
    "base" -> HTML5VoidElement
    "br" -> HTML5VoidElement
    "col" -> HTML5VoidElement
    "embed" -> HTML5VoidElement
    "hr" -> HTML5VoidElement
    "img" -> HTML5VoidElement
    "input" -> HTML5VoidElement
    "keygen" -> HTML5VoidElement
    "link" -> HTML5VoidElement
    "menuitem" -> HTML5VoidElement
    "meta" -> HTML5VoidElement
    "param" -> HTML5VoidElement
    "source" -> HTML5VoidElement
    "track" -> HTML5VoidElement
    "wbr" -> HTML5VoidElement

  %% <!-- --> comments
  context-free syntax
    XMLComment -> TemplateElement {cons("XMLComment")}
  lexical syntax
    "<!--" XMLCommentChar* "-->" -> XMLComment
    ~[\-]                        -> XMLCommentChar
    OneDash                      -> XMLCommentChar
    TwoDashes                    -> XMLCommentChar
    [\-]                         -> OneDash
    [\-][\-]                     -> TwoDashes
  lexical restrictions
    OneDash   -/- [\-]
    TwoDashes -/- [\>]

  context-free syntax %% if(){} and if(){}else{} inside an XML element containing a list of attributes

    "if" "(" Exp ")" "{" Attribute* "}"		          -> Attribute {cons("XMLAttributesIf")}
    "if" "(" Exp ")" "{" Attribute* "}" "else" "{" Attribute* "}" -> Attribute {cons("XMLAttributesIfElse")}

  context-free syntax

    QualName "=" Exp -> Attribute {cons("Attribute")}

    %%easy injection of attributes from template call
    CommonAttribute -> Attribute
    "all attributes"  -> CommonAttribute {cons("AllAttributes")}
    "all attributes except" Exp        -> CommonAttribute {cons("AllAttributeExceptExp")}
    "attributes" Exp        -> CommonAttribute {cons("AttributesExp")}

    "attributes" -> KEYWORD

exports

  lexical syntax
    Qualifier? NCName -> QualName
    NCName ":"        -> Qualifier


    [A-Za-z\_] [A-Za-z0-9\.\-\_]* -> NCName

  lexical restrictions
    NCName -/- [A-Za-z0-9\.\-\_]
