module Procedures

exports
  sorts Section Definition

  context-free syntax

	"procedure" Id "(" FormalArg ")" "{"
	   ProcedureElement* 
	"}"                                   -> Procedure {cons("Procedure")}

	"auto" "procedure" Id "(" FormalArg ")" "{"
	   ProcedureElement* 
	"}"                                   -> Procedure {cons("AutoProcedure")}

  "extend" "procedure" Id "(" FormalArg ")" "{"
	   ProcedureElement* 
	"}"                                   -> Definition {cons("ExtendProcedure")}

  Procedure                             -> Definition

  "status" Id "{" Property* Function* "}" -> Entity {cons("StatusEntity")}
	
	"who" "{" Exp "}"                     -> ProcedureElement {cons("ProcedureWho")}
	"when" "{" Exp "}"					  -> ProcedureElement {cons("ProcedureWhen")}
	"do" Block							  -> ProcedureElement {cons("ProcedureDo")}
	"done" Block							  -> ProcedureElement {cons("ProcedureDone")}
	"enabled" Block							  -> ProcedureElement {cons("ProcedureEnabled")}
	"disabled" Block						  -> ProcedureElement {cons("ProcedureDisabled")}
	"view" "{" TemplateElement* "}"       -> ProcedureElement {cons("ProcedureView")}
	
	"process" "{" ProcessExp "}" -> ProcedureElement {cons("ProcedureProcess")}
	"processed" Block							  -> ProcedureElement {cons("ProcedureProcessed")}
	
  sorts ProcessExp
  
context-free syntax
    
    Id "(" Exp ")"                -> ProcessExp {cons("ProcCall")}
    ProcessExp ";" ProcessExp     -> ProcessExp {cons("ProcSeq"), left}
    
    "while" "(" Exp ")" "{" ProcessExp "}"   -> ProcessExp {cons("ProcWhile")}
    
    "repeat" "{" ProcessExp "}" "until" ProcessExp -> ProcessExp {cons("ProcRepeatUntil")}

    "if" "(" Exp ")" "{" ProcessExp "}"      -> ProcessExp {cons("ProcIfNoElse")}
    
    "if" "(" Exp ")" "{" ProcessExp "}" "else" "{" ProcessExp "}" -> ProcessExp {cons("ProcIf")}
    
    ProcessExp "xor"  ProcessExp -> ProcessExp {cons("ProcXor")}
    ProcessExp "and" ProcessExp -> ProcessExp {cons("ProcAnd")}
    
    ProcessExp "+"     ProcessExp -> ProcessExp {cons("ProcPlus")}
    
    "(" ProcessExp ")"            -> ProcessExp {bracket}
  
  context-free priorities
      {left:
        ProcessExp ";" ProcessExp     -> ProcessExp {cons("ProcSeq"), left}}
    > {left:
        ProcessExp "and" ProcessExp  -> ProcessExp}
    > {left:
        ProcessExp "xor" ProcessExp -> ProcessExp
        ProcessExp "+" ProcessExp    -> ProcessExp }
