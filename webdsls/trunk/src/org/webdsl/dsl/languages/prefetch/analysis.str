module org/webdsl/dsl/languages/prefetch/analysis

rules
  
  //desugar = desugar-query-analysis

  perform-query-analysis(|name,args,cond,x,early) :
    (body, anno*) -> (body, [qa | anno*])
    where QueryOptimizationDisabled
    ; not(<fetch-elem(is-query-analysis)> anno*)
    ; qa := <get-empty-query-analysis>

  perform-query-analysis(|name,args,cond,x,early) :
    (body, anno*) -> (body3, [QueryAnalysis(ts, returns, requiredcalls, unresolvedcalls, recursivecalls) | anno*])
    where not(QueryOptimizationDisabled)
    ; not(<fetch-elem(is-query-analysis)> anno*)
    ; {| RootVar, BindableVar, SynonymVar, IsSessionVar
       : (roots, bindable, synonyms) := <conc; categorize-and-define-argument-bindings> (args, <get-session-args; map({v,srt: ?Arg(v, srt); rules( IsSessionVar : Var(v) -> srt ) })>)
       ; [] := <collect(query-optimization-waiting-for); flatten-list/*; where(try(not(?[]); !(name, <id>); debug(!"wait:")))*/> (body, cond, early)
       ; {| QueryConditions, IsEffectful, DetectedTraveral, DetectedReturn, DetectedRequiredCall, DetectedUnresolvedCall, DetectedRecursiveCall
         : with(
           basecond := <extract-query-cond-as-list(get-accessible-expr(try-strip-generic-sort,id))> cond
           ; rules (  QueryConditions := basecond // Changes over time to represent the query conditions active on the term currently being analyzed
                      IsEffectful     := False()  // True if the current statement is effectful (means: can affect non-local state), False otherwise
                   )
           //; <debug(!"Analyzing: ")> name
           ; <analyze-for-query-optimization-early> early
           ; body3 := <analyze-for-query-optimization-continue> body
           ; ts := <bagof-DetectedTraveral; try(ensure-condition(|x, basecond)); make-set>
           ; returns := <bagof-DetectedReturn>
           ; requiredcalls := <bagof-DetectedRequiredCall>
           ; unresolvedcalls := <bagof-DetectedUnresolvedCall/*;debug(!"gotunres:")*/>
           ; recursivecalls := <bagof-DetectedRecursiveCall>
           //; <debug(!"TS of ")> name
           //; <repeat(oncetd(?Cast(<id>, _)));log-traversal-summary-table(|45,135,5)> ts
          )
        //; <debug(!"ts:")>(name, ts)
        //; <debug(!"requiredcalls:")>(name, requiredcalls)
        //;<debug(!"qa:")>(name, QueryAnalysis(ts, returns, requiredcalls, unresolvedcalls, recursivecalls))
        |}
      |}

  categorize-and-define-argument-bindings :
  	args -> (roots, bindable, synonyms) 
    with (thisargs, argstmp) := <partition(?Arg("this", _))> args
    ; bindable :=  <filter(where(query-optimization-bindable-argument))> args
    ; (roots, synonyms) := <create-synonyms-for-extra-this> (argstmp, thisargs)
    ; <map({v,srt: ?Arg(v, srt); rules( RootVar : Var(v) -> srt ) })> roots
    ; <map({v,srt: ?Arg(v, srt); rules( BindableVar : Var(v) -> srt ) })> bindable
    ; <map({v,e: ?(v, e); rules( SynonymVar : v -> e ) })> synonyms

  create-synonyms-for-extra-this :
  	(roots, []) -> (roots, []) // There are no this keywords, so there are no synonyms

  create-synonyms-for-extra-this :
  	(roots, [firstthis@Arg(this1,_)|otherthis]) -> ([firstthis|roots], synonyms)
  	with synonyms := <map({this2: ?Arg(this2,_); !(Var(this2), Var(this1))})> otherthis

strategies

  analyze-for-query-optimization-early =
   {| RequiredEarly
    : rules ( RequiredEarly := True() )
    ; analyze-for-query-optimization-continue
   |}

  detect-extra-synonym =
    where (
      (?VarDeclInit(x, _, e) <+ ?VarDeclInitInferred(x, e) <+ ?TemplateVarDeclInit(x, _, e) <+ ?TemplateVarDeclInitInferred(x, e))
      ; has-immutable-anno
      ; <is-accessible-from(RootVar <+ IsSessionVar <+ BindableVar, id)> e
      ; v := Var(x)
      ; rules ( SynonymVar : v -> e )
    )

  analyze-for-query-optimization-continue = alltd(try(detect-extra-synonym); analyze-for-query-optimization)

  analyze-for-query-optimization-effectful =
    where(True() := <IsEffectful>)
    ; analyze-for-query-optimization-continue

  analyze-for-query-optimization-effectful =
    where(
      False() := <IsEffectful>
      ; rules( IsEffectful := True() )
      ; register-all-effectful
    )
    ; analyze-for-query-optimization-continue
    ; rules( IsEffectful := False() )

  analyze-for-query-optimization =
    (
      ?VarDeclInit(_, _, _)
      <+ ?VarDeclInitInferred(_, _)
      <+ ?TemplateVarDeclInit(_, _, _)
      <+ ?TemplateVarDeclInitInferred(_, _)
      <+ ?Assignment(_, _)
      <+ ?PropertyAssignment(_, _)
      <+ ?NavigateCall(_, _, _)
      <+ ?PageCall(_, _)
      <+ ?Text(_)
      <+ ?DeleteStatement(_, _)
      <+ ?Submit(_, _, _)
      <+ ?SubmitLink(_, _, _)
      <+ ?SubmitElem(_, _, _)
      <+ ?SubmitLinkElem(_, _, _)
      <+ ?DownloadLink(_, _, _)
      <+ ?OutputImage(_, _, _)
      <+ ?Placeholder(_, _)
      <+ ?PlaceholderWithAjaxCall(_, _)
      <+ (?TemplateCall(name, args, passign, body); where(not(is-defined-tc-get-called-tc))) // A template call we cannot follow
    )
    ; where(
      False() := <IsEffectful>
      ; rules( IsEffectful := True() )
      ; register-all-effectful
    )
    ; analyze-for-query-optimization-continue
    ; rules( IsEffectful := False() )

  analyze-for-query-optimization = query-optimization-skip

  query-optimization-skip = // Code inside these terms are ignored 
    ?Action(_, _, _, _) <+ ?LocalRedefine(_, _, _, _, _)

strategies // Update the dynamic rules
  
  register-detected-traversal =
    ?(traversal, srt)
    ; condition := <QueryConditions <+ ![]>
    ; effectful := <IsEffectful>
    ; <register-detected-traversal> (traversal, srt, condition, effectful)

  register-detected-traversal =
    ?(traversal{anno*}, srt, condition, effectful)
    ; if RequiredEarly then
        rules( DetectedTraveral :+= (traversal{FetchEarly(),anno*}, srt, condition, False()) )
      else
        rules( DetectedTraveral :+= (traversal, srt, condition, effectful) )
      end

  register-detected-return-traversal =
    ?(traversal, srt)
    ; rules( DetectedReturn :+= traversal )

  register-detected-required-call =
    ?tc
    ; condition := <QueryConditions <+ ![]>
    ; effectful := <IsEffectful>
    ; rules( DetectedRequiredCall :+= (tc, condition, effectful) )

  register-detected-unresolved-call =
    ?(genname, args)
    ; args2 := <filter(filter(where(is-accessible-from(RootVar))))> args
    ; condition := <QueryConditions <+ ![]>
    ; effectful := <IsEffectful>
    ; rules( DetectedUnresolvedCall :+= (genname, args2, condition, effectful) )

  register-detected-recursive-call = 
    ?(callee, args)
    ; args2 := <map(filter(where(is-accessible-from(RootVar))))> args
    ; rules( DetectedRecursiveCall :+= (callee, args2) )

  register-detected-recursive-call = 
    ?(callee, e, args)
    ; <is-accessible-from(RootVar)> e
    ; args2 := <map(filter(where(is-accessible-from(RootVar))))> args
    ; rules( DetectedRecursiveCall :+= (callee, e, args2) )

  register-all-effectful-for-empty-analysis =
    try(
      where(
        ?[]
        ; register-all-effectful
      )
    )

  register-all-effectful-if-effectful =
    try(
      where(
        ?analysis
        ; filter({\ (e, _, _, True()) -> v where v := <collect-one(?Var(_));rm-annotations> e \})
        ; make-set
        ; ?effectfulvars
        ; not(?[]) // Only need to register effectful traversals, if the analysis contains at least on effectful traversal
        ; roots := <dr-all-keys(|"RootVar"); filter(not(IsSessionVar);rm-annotations)>
        ; condition := <QueryConditions <+ ![]>
        ; <diff> (roots, effectfulvars)
        ; map({key,value:?key; RootVar; ?value; <register-detected-traversal> (key, value, condition, True())}) // Register only effectful traversals for roots that have no efffectful traversals inside the input analysis
      )
    )

  register-all-effectful = 
    condition := <QueryConditions <+ ![]>
    ; dr-all-keys(|"RootVar")
    ; filter(not(IsSessionVar))
    ; map({key,value
          : ?key
          ; value := <RootVar> key
          ; <register-detected-traversal> (key, value, condition, True())
          })

strategies

  combine-analysis =
    ?(e, srt, cond, effectful)
    ; where (
      (traversal{anno*}, esrt) := <is-accessible-from(RootVar)> e
      ; tmpcond := <revalidate-query-condition(get-accessible-expr(try-strip-generic-sort,id))> cond
      ; fltrs := <filter(?PrefetchWhere(_, _)); (map(where(revalidate-prefetch-where)) <+ !PrefetchWhere([], True()))> cond
      ; newcond := <concat; make-set>[<QueryConditions>, tmpcond, fltrs]
      //; iseffectful := <IsEffectful; (?True() <+ !effectful)>
      ; keepanno* := <remove-all(?FetchEarly())> anno* // fetch-early does not carry over to parent or called analysis blocks
      ; if RequiredEarly then
          rules( DetectedTraveral :+= (traversal{FetchEarly(),keepanno*}, esrt, newcond, False()) )
        else
          rules( DetectedTraveral :+= (traversal{keepanno*}, esrt, newcond, effectful) )
        end
    )

  revalidate-prefetch-where =
    ?PrefetchWhere(mod*,cond)
    ; collect(?Var(_))
    ; map(is-accessible-from(BindableVar))

rules // Expressions and Statements

  analyze-for-query-optimization :
    fa@FieldAccess(_, _){anno*} -> fa{anno*}
    where is-accessible-from-allow-calls(RootVar)
    ; map(register-detected-traversal)

  analyze-for-query-optimization :
    v@Var(_){anno*} -> v{anno*}
    where is-accessible-from-allow-calls(RootVar)
    ; map(register-detected-traversal)

  analyze-for-query-optimization :
    Return(e1){anno*} -> Return(e2){anno*}
    where <is-accessible-from-allow-calls(RootVar)> e1
    ; map(register-detected-return-traversal)
    ; e2 := <analyze-for-query-optimization> e1

  analyze-for-query-optimization : // For functions returning SimpleSort("Bool"), because is-accessible-from-allow-calls always fails for complete conditions 
    Return(e1){anno*} -> Return(e2){anno*}
    where traversal := <extract-query-cond(get-accessible-expr(id,id),fail); not(?True())> e1
    ; rules( DetectedReturn :+= traversal )
    ; e2 := <analyze-for-query-optimization> e1

rules // If

  analyze-for-query-optimization :
    IfTempl(cond1, true1, false1){anno*} -> IfTempl(cond2, true2, false2){anno*}
    where (cond2, true2, false2) := <analyze-for-query-optimization-if> (cond1, true1, false1)

  analyze-for-query-optimization :
    If(cond1, true1, false1){anno*} -> If(cond2, true2, false2){anno*}
    where (cond2, true2, false2) := <analyze-for-query-optimization-if> (cond1, true1, false1)

  analyze-for-query-optimization-if :
    (cond1, true1, false1) -> (cond2, true2, false2)
    where condlst := <extract-query-cond-as-list(get-accessible-expr(try-strip-generic-sort,id))> cond1
    ; not([] := condlst)
    with cond2 := <analyze-for-query-optimization-continue> cond1
    ; oldcond := <QueryConditions>
    ; rules( QueryConditions := <conc; make-set>(oldcond, condlst) )
    ; true2 := <analyze-for-query-optimization-continue> true1
    ; rules( QueryConditions := <conc; make-set>(oldcond, <negate-query-cond-lst>condlst) )
    ; false2 := <analyze-for-query-optimization-continue> false1
    ; rules( QueryConditions := oldcond )

strategies // For

  analyze-for-query-optimization =
    where((?For(x, srt, e, f, b, _){anno*} <+ ?ForStmt(x, srt, e, f, b){anno*}); <is-entity-type-strip-generics> srt)
    ; with(
	      if toreg := <?FieldAccess(_, _); is-accessible-from-allow-calls(RootVar)> e then
	        with-prefetch-where(<map(register-detected-traversal)> toreg|x,e,anno*) // This ensures that we properly attach a filter to traversals detected on the collection expression
	      else
	        <analyze-for-query-optimization-continue> e // Can happen if the expression is not accessible from a persistent root variable. If it is a HQL query for example.
	      end
	      // The filter is already analyzed and part of the analysis in anno*
		    //; <topdown(try(?Var(x); !e)); analyze-for-query-optimization-continue> f // Var(x) is not a RootVar, so rename Var(x) to e before analyzing the filter
		    ; <fetch-elem(?QueryAnalysis(analysis, _, _, unresolvedcalls, recursivecalls))> anno*
		    ; mapping := [(e, Arg(x, srt))] // We only need to rename the iterator to the collection, all other variables are the same
		    //; <debug(!"usefor:")> (x, anno*)
		    ; <register-all-effectful-for-empty-analysis> analysis
		    ; newanalysis := <foldr(<try(add-filter-to-analysis(|x,anno*))> analysis, rename-vars-in-analysis(RootVar))> mapping
		    ; <map(translate-unresolved(|mapping))> unresolvedcalls
		    ; <filter(translate-recursive(|mapping); register-detected-recursive-call)> recursivecalls
		    ; <register-all-effectful-if-effectful; filter(combine-analysis)> newanalysis
      )

  with-prefetch-where(s|x,e,anno*) =
    if pw := <fetch-elem(?QueryCondition(_)); ?QueryCondition(cond); query-condition-to-prefetch-where(|x)> anno* then
      oldcond* := <QueryConditions> 
      ; newcond* := <alltd(?Var(x); !e); extract-query-cond-as-list(get-accessible-expr(try-strip-generic-sort,id))> cond
      ; pw* := [pw]
      ; rules( QueryConditions := <make-set>[oldcond*, newcond*, pw*] )
      ; s
      ; rules( QueryConditions := oldcond* )
    else
      s
    end

  ensure-effectful-traversal-for-var(|x) =
    where(filter(?(Var(x), _, _, True())); ?[])
    ; ![(Var(x), <type-of> Var(x), <QueryConditions>, True()) | <id>]

rules

  add-filter-to-analysis(|x,anno*) =
    where(pw := <fetch-elem(?QueryCondition(_)) < query-condition-to-prefetch-where(|x) + !PrefetchWhere([],True())> anno*)
    ; try(ensure-effectful-traversal-for-var(|x))
    ; map(try(add-filter-to-analysis-helper(|x, pw)))

  add-filter-to-analysis-helper(|x,pw) :
    (traversal, srt, condition, effectful){anno*} -> (traversal, srt, [pw|condition], effectful){anno*}
    where [Var(x)] := <collect(?Var(x))> traversal

strategies // TemplateCall

  analyze-for-query-optimization =
    where(match-template-with-name(|"elements")
      ; register-detected-required-call
    )

rules

  analyze-for-query-optimization :
    c@TemplateCall(name, args1, passign1, body){anno*} -> c{anno*}
    where <CallToRequiredTemplate> name
    ; <register-detected-required-call> c

  analyze-for-query-optimization :
    c@TemplateCall(name, args1, passign1, body){anno*} -> c
    where genname := <is-defined-tc-get-called-tc; where(is-unresolved-local-redefine)> c
    ; args := <map((is-accessible-from-allow-calls(RootVar); map(Fst)) <+ ![])> args1
    ; <register-detected-unresolved-call> (genname, args)

  analyze-for-query-optimization :
    c@TemplateCall(name, args1, passign1, body){anno*} -> TemplateCall(name, args2, passign2, body){anno*}
    where genname := <is-defined-tc-get-called-tc> c
    ; [] := <filter(?ResolvedRequireKey(_))> passign1 // Required calls are resolved on the call that requires them
    with Define(defmod, defname, deffargs, deftargs, defbody){defanno*} := <get-local-redefined-decl <+ CurrentTemplateDecl> genname // get-local-redefined-decl resolves a template call if it is redefined in the current template/page. That way it is handled as a regular resolvable template call.
        ; passign2 := <map(?TemplateCall(_, _, _, _) <+ analyze-for-query-optimization-effectful)> passign1
        ; if recname := <get-follow-genname; Recursive> genname then
            extraArgs := <LocalRedefineArgs <+ ![]> recname
            ; recargs := <conc; map((is-accessible-from-allow-calls(RootVar); map(Fst)) <+ ![])> (args1, extraArgs)
            ; <register-detected-recursive-call> (recname, recargs)
            ; args2 := <map(analyze-for-query-optimization-effectful)> args1
          else
            args2 := <map(where(is-accessible-from-allow-calls(RootVar)) < analyze-for-query-optimization-continue + analyze-for-query-optimization-effectful)> args1
            ; <fetch-elem(?QueryAnalysis(analysis, _, reqCalls, redefCalls, recursivecalls))> defanno*
            ; reqcallana := <filter(resolve-required-call-for-analysis(|genname,passign1,deffargs));flatten-list/*;debug(!"reqcallres:")*/> reqCalls
            ; argmapping := <zip; handle-escaped-ref-arg-in-mapping> (args1, deffargs)
            ; <filter(translate-recursive(|argmapping); register-detected-recursive-call)> recursivecalls
            ; resolvedcalls := <resolve-unresolved-calls> (argmapping, redefCalls)
            ; <register-all-effectful-for-empty-analysis> analysis
            ; newanalysis := <foldr(!<concat>[analysis,reqcallana,resolvedcalls], rename-vars-in-analysis(RootVar))> argmapping
            ; <register-all-effectful-if-effectful; filter(combine-analysis)> newanalysis
          end

  resolve-required-call-for-analysis(|elemname,passign1,callerargs) :
    (req@TemplateCall(reqname, reqargs, reqpassign, TemplateBody([])), cond, eff) -> newanalysis
    where if <match-template-with-name(|"elements")> req then // elements call is not resolvable when no elements are present
      reqkey := <concat-strings>["elements#",elemname]
    else
      reqkey := <strip-annos> reqname
    end
    //; reqkey := <where(try(generate-elements-tcallsmap-name; debug(!"test:")); try(CallToDefinedTemplate; debug(!"test2:")));strip-annos;debug(!"reqkey:")> reqname
    ; TemplateCall(resname, resargs, respassign, TemplateBody([])) := <fetch-elem(where(?TemplateCall(_, _, <fetch-elem(?ResolvedRequireKey(reqkey))>, _)))> passign1
    ; newargs := <conc>(reqargs, resargs)
    ; newpassign := <conc>(reqpassign,respassign)
    ; genname := </*debug(!"newtempl:");*/is-defined-tc-get-called-tc> TemplateCall(resname, newargs, newpassign, TemplateBody([]))
    ; Define(defmod, defname, deffargs, deftargs, defbody){defanno*} := </*debug(!"Combining req call:");*/CurrentTemplateDecl> genname
    ; analysis := <fetch-elem(get-ts-from-query-analysis)> defanno*
    ; <try(register-new-elements-call)> (req, defanno*)
    ; argmapping := <zip; handle-escaped-ref-arg-in-mapping> (newargs, deffargs)
    ; tmpana := <map(add-condition-to-traversal(|cond))/*;debug(!"oldana:")*/>analysis
    ; {| TempVar
       : <map(\Arg(x, srt) -> <id> with rules(TempVar : Var(x) -> srt)\)> callerargs
       ; newanalysis := <foldr(!tmpana, rename-vars-in-analysis(TempVar <+ RootVar))/*;debug(!"newana:")*/> argmapping
       |}

  register-new-elements-call :
    (req, anno*) -> []
    where <match-template-with-name(|"elements")> req
    ; <fetch-elem(?QueryAnalysis(_, _, reqCalls, _, _))> anno*
    ; <fetch-elem(?(<where(match-template-with-name(|"elements"))>, _, _)); register-detected-required-call> reqCalls

  resolve-unresolved-calls :
    (argmapping, redefCalls) -> resolvedcalls
    with <filter(translate-unresolved(|argmapping))> redefCalls // Calls that we cannot resolve are registered as such
    ; (qas, unresolvedcalls1) := <filter(resolve-unresolved-call(|argmapping)); unzip> redefCalls // We resolve calls, which may result in more unresolved calls
    ; <flatten-list; filter(translate-unresolved(|argmapping))/*;debug(!"unsolvable:")*/> unresolvedcalls1 // We register new unsolvable calls
    ; (qas2, unresolvedcalls2) := <flatten-list; filter(resolve-unresolved-call(|argmapping))/*;debug(!"out:")*/; unzip> unresolvedcalls1 // We solve the new resolvable calls
    ; unresolved3 := <flatten-list; make-set; filter(translate-unresolved(|argmapping) <+ (analyze-for-query-optimization-effectful; fail))> unresolvedcalls2 // We do not try to solve new unresolved calls
    ; resolvedcalls := <conc; flatten-list; make-set> (qas, qas2)

  translate-unresolved(|argmapping) :
    (genname, args, cond, eff) -> (genname, newargs, cond, eff) // TODO: cond and eff
    where <is-unresolved-local-redefine> genname
    ; newargs := <map(fix-argument(|argmapping))> args
    ; <register-detected-unresolved-call> (genname, newargs) // We ignore cond and eff for now

  resolve-unresolved-call(|argmapping) :
    (genname, args, cond, eff) -> (newanalysis, newRedefCalls)
    where (Define(defmod, defname, deffargs, deftargs, defbody){defanno*}, extraMapping) := <get-local-redefined-decl-with-mapping> genname
    ; <fetch-elem(?QueryAnalysis(analysis, _, _, redefCalls, _))> defanno*
    ; newargs := <map(fix-argument(|argmapping))> args
    ; <handle-escaped-ref-arg-in-mapping> extraMapping 
    ; newmap := <zip; handle-escaped-ref-arg-in-mapping> (newargs, deffargs)
    ; tmpana := <map(add-condition-to-traversal(|cond))>analysis
    ; newanalysis := <foldr(!tmpana, rename-vars-in-analysis(RootVar))> newmap
    ; newRedefCalls := <foldr(!redefCalls, rename-vars-in-analysis(RootVar))> newmap

rules

  analyze-for-query-optimization :
    pf@PrefetchFor(v, templ, wherecond, children) -> pf
    where <RootVar> v
    with old_effectful := <IsEffectful> 
    ; rules(IsEffectful := False())
    ; nodes := <get-prefetch-children> children
    ; <map(analyze-for-query-optimization-prefetch-node(|v))> nodes
    ; rules(IsEffectful := old_effectful)

  analyze-for-query-optimization-prefetch-node(|v) :
    pfn@PrefetchNode(castsrt, f, mod*, templ, cond, elemcond, children){anno*} -> pfn
    with p := <?Some(cast) < !FieldAccess(Cast(v, cast), f{}) + !FieldAccess(v, f{})> castsrt
    ; <is-accessible-from(RootVar); register-detected-traversal> p
    ; nodes := <get-prefetch-children> children
    ; <map(analyze-for-query-optimization-prefetch-node(|p))> nodes

strategies // Function calls

  analyze-for-query-optimization =
    (?Call(_, _, args) <+ ?ThisCall(_, args))
    ; with(
        analyze-for-query-optimization-calls-simple
        <+
        analyze-for-query-optimization-calls-recursive
        <+
        (register-all-effectful; <filter(analyze-for-query-optimization-effectful)> args)
      )    

  analyze-for-query-optimization-calls-simple =
    is-accessible-from-allow-calls(RootVar)
    ; not(?[])
    ; map(register-detected-traversal)

rules

  analyze-for-query-optimization-calls-recursive :
    c@Call(e, nm, args1){anno*} -> c //Call(e, nm, args2){anno*}
    where <is-accessible-from(RootVar); ?(e2, <is-entity-type; ?srt@SimpleSort(x_class)>)> e
    ; targs := <map(type-of); prepare-type-list-for-compare> args1
    ; n := <strip-annos> nm  
    ; <not(not-allowed-ent-fun-name)> n
    ; not("Entity" := x_class)
    ; (fent@SimpleSort(x_class2), defn, deftargs, Function(defname, defargs, _, _){defanno*}) := <resolve-current-entity-function> (srt, nm, targs)
    ; <not(check-builtin-signature)> (fent, n, targs)
    ; <Recursive> (fent, defn, deftargs)
    with  recargs := <map((is-accessible-from-allow-calls(RootVar); map(Fst)) <+ ![])> args1
          ; <register-detected-recursive-call> ((fent, defn, deftargs), e, recargs)
          ; args2 := <map(analyze-for-query-optimization-effectful)> args1

  analyze-for-query-optimization-calls-recursive :
    c@ThisCall(nm, args1){anno*} -> ThisCall(nm, args2){anno*}
    where not([] := <filter(is-accessible-from-allow-calls(RootVar))> args1)
    ; argtypes := <map(type-of)> args1
    ; targs := <prepare-type-list-for-compare> argtypes
    ; n := <strip-annos> nm
    ; <not(bagof-StaticSignatures; filter(signature-to-static-anno(|argtypes)); Hd; ?StaticFunctionCallAnno(_, _))> nm // Not a static function
    ; <not(check-builtin-signature)> (None(), n, targs)
    ; <not(is-call-to-reserved-function)> (nm, targs)
    ; Function(defname, defargs, _, _){defanno*} := <resolve-function-call-to-decl> (None(), n, targs)
    ; (defn, deftargs) := <normalize-signature> (defname, defargs)
    ; <Recursive> (None(), defn, deftargs)
    with  recargs := <map((is-accessible-from-allow-calls(RootVar); map(Fst)) <+ ![])> args1
          ; <register-detected-recursive-call> ((None(), defn, deftargs), recargs)
          ; args2 := <map(analyze-for-query-optimization-effectful)> args1

strategies

  handle-escaped-ref-arg-in-mapping =
    with(try(filter(is-escaped-ref-arg); not(?[]); register-all-effectful))

rules

  is-escaped-ref-arg : // Means that we do not track the ref arg, which is a problem, because changes made to the ref arg may be effectful
    (e, Arg(x, srt)) -> e
    where <is-ref-type> srt
    ; <not(is-accessible-from-allow-calls(RootVar))> e
