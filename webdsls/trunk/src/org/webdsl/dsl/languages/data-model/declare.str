module org/webdsl/dsl/languages/data-model/declare

signature constructors
  IsGeneratedProperty : Term

overlays

  NameProperty =
    Property("name", Simple(), SimpleSort("String"), []){IsGeneratedProperty()}

  IdProperty =
    Property("id", Simple(), SimpleSort("UUID"), []){IsGeneratedProperty()}

  VersionProperty =
    Property("version", Simple(), SimpleSort("Int"), []){IsGeneratedProperty()}

strategies

  declare-data = declare-entity  
  declare-data = declare-extend-entity

strategies // register all declared entities

  inherit-object :
    EntityNoSuper(x_class, entbodydecs) -> Entity(x_class, "Entity", entbodydecs)

  all-properties :
    x_class -> result
    with  props := <bagof-Properties; concat> x_class
        ; if not(<Extends> x_class)
          then result := []
          else
            if not("Entity" := <Extends> x_class) 
            then props1 := <concat> [props, <Extends; all-properties> x_class]
            else props1 := props end
          ; result := <uniq> props1
          end

  all-functions :
    x_class -> result
    with  funcs := <bagof-Functions; concat> x_class
        ; if not(<Extends> x_class)
          then result := []
          else
            if not("Entity" := <Extends> x_class)
            then funcs1 := <concat> [funcs, <Extends; all-functions> x_class]
            else funcs1 := funcs end
          ; result := <uniq> funcs1
          end

rules

  is-entity-type = where(?SimpleSort(<IsEntity>)) //without the where it would remove SimpleSort constructor due to term projection syntax

  declare-entity = 
    where ( try(inherit-object)
        ; ?Entity(x_class, x_super, entbodydecs) 
        ; props := <filter(is-property-cons)> entbodydecs
        ; funcs := <filter(is-function-cons)> entbodydecs
        )
    ; with (id
      ; if not([] := <collect(?SimpleAnno("searchable"))> entbodydecs) then // We need to index!
          rules ( IndexedEntity : x_class 
                  IndexedEntities :+= x_class )
        end
      ; rules(
          Entities :+= x_class

          IsEntity :+
            x_class -> x_class

          Properties :+
            x_class -> props

          Functions :+
            x_class -> funcs

          Extends :
            x_class -> x_super

          SubClasses :+
            l -> [(x_super, x_class)|l] where not(<elem> ((x_super, x_class), l))

          SubClass :+
            x_super -> x_class
        )
      ; <map(declare-property(|x_class))> [VersionProperty(), IdProperty(), NameProperty() | props]
      ; <map(declare-function(|x_class))> funcs
      ; <handle-entity-id(|x_class)> props      
      ; not(<extend-entity-declare> Entity(x_class, x_super, entbodydecs)) //for example used in typechecker/entity-events, ends in fail for extensibility
    )

  defined-superclasses :
    x -> []
    where "Entity" := <Extends> x
       <+ not(<Extends> x) //e.g. x is not a valid entity, then the Extends rule is not declared
    
  defined-superclasses :
    x -> [super | <defined-superclasses> super]
    where super := <Extends> x
        ; not("Extends" := super)

  declare-entity = 
    ?SessionEntity(nm, entbodydecs)
    ; with (id
      ; x_class := <capitalize-string> nm
      ; rules(
          TypeOf : nm -> SimpleSort(x_class)
          IsSessionVariable : nm
          IsSessionEntityType : SimpleSort(x_class) 
          SessionVariable :+= nm
        )
      ; <declare-entity> Entity(x_class, "Entity", entbodydecs)
    )
    
  declare-extend-entity :
    ExtendSessionEntity(x_class, entbodydecs) -> ExtendSessionEntity(x_class, entbodydecs)
    with <declare-extend-entity> ExtendEntity(<capitalize-string> x_class, entbodydecs)
    
  declare-extend-entity :
    ExtendEntity(x_class, entbodydecs) -> ExtendEntity(x_class, entbodydecs)
    with  props := <filter(is-property-cons)> entbodydecs
        ; funcs := <filter(is-function-cons)> entbodydecs
        ; rules( Properties :+
                  x_class -> props

                 Functions :+
                   x_class -> funcs
          )
        ; <map(declare-property(|x_class) <+ debug(!"declare extend entity property"))> props
        ; <map(declare-function(|x_class) <+ debug(!"declare extend entity function"))> funcs
       
  declare-property(|x_class) =
    ?prop@Property(x, k, s, annos)
    ; where( 
        y := x{<newname> x}
      ; xsa := <strip-annos> x
      )
    ; rules( TypeOfProperty : (x_class, x) -> s 
             PropertyAnnos  : (x_class, x) -> annos
             IsProperty     : (x_class, x)
             //renaming to allow direct references to properties in entity functions/derived properties
             //RenameProperty : (x_class,x) -> y
             /**
              *  These Rename rules are not scoped in the entity, since an extend entity is not part of the entity def
              *  Scoping is done by the 'where x_class := <InEntity>' condition
              */
             Rename :+ Var(x) -> Var(y) where x_class := <InEntity>
             PropertyNameToUniqueName : xsa -> y //this dynamic rule is renewed each time a new Rename is performed
             Rename :+ Qualified(x, z) -> Qualified(y, z) where x_class := <InEntity>
             TypeOf : y -> s
           )
    ; where( escapedname := <concat-strings> ["_",x]
           ; y1 := escapedname{y} 
           )
    ; rules( //don't add the new name in the generated code
             ExcludeFromVarRenaming : Var(y) -> Var(y1)
             ExcludeFromVarRenaming : Qualified(y, z) -> Qualified(y1, z)
             TypeOf : y1 -> s
             OriginalNonUniqueName : y1 -> x
           )
    ; try(declare-list-property(|x_class))
    ; try(<create-prop-required-rule(|x_class,x)> annos)
    ; not(<extend-property-declare(|x_class)> prop) //for example used in typechecker/property-events, ends in fail for extensibility
    ; !prop

  create-prop-required-rule(|class,propname) =
    ?annos
    ; not([] := <collect(?ValidationAnnoNotNull() + ?ValidationAnnoNotEmpty())> annos)
    ; rules(
        PropertyIsRequired : (class, propname) -> True()
      )
    
  declare-property(|x_class) =
    ?DerivedProperty(x, k, srt, annos, e)
    ; <declare-property(|x_class)> Property(x, k, srt, [])
    ; rules(
        IsDerivedProperty : (x_class, x) //use in constraint to prevent assignment to derived prop
      )

  declare-property(|x_class) =
    ?DerivedPropertyNoAnno(x, k, srt, e)
    ; <declare-property(|x_class)> DerivedProperty(x, k, srt, [], e)

  declare-property(|x_class) =
    ?PropertyNoAnno(x, k, srt)
    ; <declare-property(|x_class)> Property(x, k, srt, [])

rules

declare-list-property(|x_class) =
    ?Property(x, k, GenericSort(coll, [s@SimpleSort(_)]), annos)
    ; where(
             y := <concat-strings>[x, "List"]
           ; t := GenericSort("List", [s])
           )
        ; rules(
            TypeOfProperty : (x_class, y) -> t
          )

rules

  is-derived-property =
    ?(x_class, x)
    ; (IsDerivedProperty <+ <is-derived-property> (<Extends> x_class, x))
    
  is-property =
    ?(x_class, x)
    ; (IsProperty <+ <is-property> (<Extends> x_class, x))

  type-of-property =
    ?(x_class, x)
    ; (TypeOfProperty <+ <type-of-property> (<Extends> x_class, x))

  property-annos =
    ?(x_class, x)
    ; (PropertyAnnos <+ <property-annos> (<Extends> x_class, x))

  built-in-template-rule-setup = 
    <map(declare-property(|"Entity"));fail> [VersionProperty(), IdProperty(), NameProperty()]
    
