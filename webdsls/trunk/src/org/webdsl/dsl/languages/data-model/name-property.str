module org/webdsl/dsl/languages/data-model/name-property

strategies

  extend-property-declare(|x_class) = declare-name-property(|x_class); fail
  
rules

  declare-name-property(|x_class) :
    prop{anno*} -> <fail>
    where not(<fetch(?IsGeneratedProperty())> anno*)
        ; x := <get-property-name> prop // cope with different property constructors
        ; if <?"name"> x then rules ( HasNameProperty := x_class ) end
        ; if <is-namefield> prop then rules ( HasNamePropertyOrAnnotation := x_class ) end

strategies

  /**
   *  Determine whether the entity or its supers has a 'name' property or property with 'name' annotation
   */ 
  has-name-property-or-annotation =
    ?x_class
    ; (HasNamePropertyOrAnnotation <+ <has-name-property-or-annotation> <Extends> x_class)
    
  /**
   *  Determine whether the entity or its supers has a 'name' property
   */ 
  has-name-property =
    ?x_class
    ; (HasNameProperty <+ <has-name-property> <Extends> x_class)
    
strategies

  get-namefield =
    (   oncetd(\ Property(name, k, type, annos) -> name where <fetch(?SimpleAnno("name"))> annos \; ?name ) 
     <+ oncetd(\ DerivedProperty(name, k, type, annos, e) -> name where <fetch(?SimpleAnno("name"))> annos \; ?name ))
    ; !name
    <+ !"id"

  is-namefield =
    ?Property(name, k, type, annos)
    ; where( <fetch(?SimpleAnno("name"))> annos)

  is-namefield =
    ?DerivedProperty(name, k, type, annos, e)
    ; where( <fetch(?SimpleAnno("name"))> annos)