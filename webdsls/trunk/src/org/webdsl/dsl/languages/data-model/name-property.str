module org/webdsl/dsl/languages/data-model/name-property

imports
	libwebdsl-front
	org/webdsl/dsl/languages/data-model/-

strategies

  extend-property-declare(|x_class) = declare-name-property(|x_class); fail
  
rules

  declare-name-property(|x_class) :
    prop{anno*} -> <fail>
    where not(<fetch(?IsGeneratedProperty())> anno*)
        ; x := <get-property-name> prop // cope with different property constructors
        ; if <?"name"> x then rules ( HasNameProperty : x_class ) end
        ; if <is-namefield> prop then rules ( NameAnnotationProp :+ x_class -> <get-property-name> prop ) end

strategies

  /**
   *  Determine whether the entity or its supers has a 'name' property
   */ 
  has-name-property =
    ?x_class
    ; (HasNameProperty <+ <has-name-property> <Extends> x_class)
    
strategies

	// get name of property with name annotation, or return "id"
  get-namefield = NameAnnotationProp <+ !"id"

	// succeed if property has name annotation
  is-namefield = 
    ?Property(name, k, type, annos)
    ; where( <fetch(?SimpleAnno("name"))> annos)

  is-namefield =
    ?DerivedProperty(name, k, type, annos, e)
    ; where( <fetch(?SimpleAnno("name"))> annos)
    
rules // entity name property annotation for entities without a property 'name'
  
  // entity with super: generate custom getter if *this class* has a property with name anno, otherwise inherit from super
  add-backend-annotation =
		  ?Entity(class,_,_)
	   ; where(namefield := <NameAnnotationProp> class)
	   ; add-new-anno(|NamePropertyAnno(namefield))
  
  // entity without super: generate custom getter if this class does not have a name property
	add-backend-annotation: ent -> <add-new-anno(|NamePropertyAnno(namefield))>
		   where (x_class := <?SessionEntity(<capitalize-string>,_) <+ ?EntityNoSuper(<id>,_)>)
		 ; where (<not(HasNameProperty)> x_class)
	   ; with (namefield := <get-namefield>)			// either a property with name anno, or "id"
		 
rules	// constraint: name property and property with name anno

	constraint-error-data = 
			(classname, body) := <get-entity-def>
		; allprops := <bagof-Properties; flatten-list> classname		// includes extend entity, but no superclasses 
		; nameprop := <fetch-elem(where(get-property-name; ?"name"))> allprops
	  ; annoprop := <fetch-elem(where(is-namefield))> allprops
	  ; not(<eq> (nameprop, annoprop))
		; <map(
				add-error(|["Entity ",classname," has both a name property and a property with name annotation."])
			)> [nameprop, annoprop]
		; fail
