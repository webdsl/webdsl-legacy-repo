module org/webdsl/dsl/languages/data-model/string-property-functions

imports
  libstrategolib

imports
  libwebdsl-front

rules

  extend-entity-declare-body(|x_class) = string-property-addition(|x_class)

  string-property-addition(|x_class) = 
    (?Property(x, k, srt, annos) <+ ?PropertyNoAnno(x, k, srt)) //derivedproperty will need special handling
    ; <type-compatible> (srt, SimpleSort("String"))
    ; with(
        // find entity by string property function
          x_funname := <concat-strings> ["find",x_class,"By",<capitalize-string> x]
        ; x_funname_static := <concat-strings> ["findBy",<capitalize-string> x]
        ; <register-reserved-function> (x_funname,1)
        ; <declare-static-function(|x_class, x_funname_static)> fun |[ function x_funname(prop:srt):List<x_class> {} ]|

        // find entity by string property like function
        ; x_funname2 := <concat-strings> ["find",x_class,"By",<capitalize-string> x,"Like"]
        ; x_funname2_static := <concat-strings> ["findBy",<capitalize-string> x,"Like"]
        ; <register-reserved-function> (x_funname2,1)
        ; <declare-static-function(|x_class, x_funname2_static)> fun |[ function x_funname2(prop:srt):List<x_class> {} ]|
      )
      
rules //emit functions for string properties, these are implemented entirely in WebDSL code

  desugar-data :
    EntityNoSuper(name, entbodydecs1) -> EntityNoSuper(name, entbodydecs2)
    where entbodydecs2 := <oncetd(desugar-data-string-property(|name))> entbodydecs1

  desugar-data :
    Entity(name, sup, entbodydecs1) -> Entity(name, sup, entbodydecs2)
    where entbodydecs2 := <oncetd(desugar-data-string-property(|name))> entbodydecs1

signature
  constructors
    StringPropertyFunctionDesugarDone : Term
   
rules

  desugar-data-string-property(|x_class) :
    Property(x, k, srt, annos) -> Property(x, k, srt, [StringPropertyFunctionDesugarDone()|annos]) //only matches this type of property, others such as derivedproperty cannot have id anno
    where <type-compatible> (srt, SimpleSort("String"))
        ; not(<fetch(?StringPropertyFunctionDesugarDone())> annos)
    with  x_staticname := <concat-strings> ["findBy", <capitalize-string> x]
        ; <emit-static-function(|x_class)> fun |[ 
            function x_staticname(prop:srt):List<x_class> {
              return select g from x_class as g where g.x = ~prop;
            } 
          ]|
    with  x_staticname2 := <concat-strings> ["findBy", <capitalize-string> x, "Like"]
        ; <emit-static-function(|x_class)> fun |[ 
            function x_staticname2(prop:srt):List<x_class> {
              var s := "%" + prop + "%";
              return select g from x_class as g where g.x like ~s;
            }
          ]|
