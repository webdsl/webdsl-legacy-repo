module org/webdsl/dsl/languages/data-model/default-annotation

/**
 *  default=exp property annotation
 */
rules
  
  extend-property-declare(|x_class) = declare-default-property(|x_class); fail
  
  declare-default-property(|x_class) :
    Property(_, _, _, annos) -> <fail>
    where <fetch(?DefaultAnno(_))> annos
        ; <declare-extend-function(|x_class)> |[ extend function x_class() {} ]|

strategies

  desugar-ui :
    Entity(x_class,super, entbodydecs1){anno*} -> <rename> Entity(x_class,super, entbodydecs2){anno*} 
    where <oncetd(not-translated-default-anno)> entbodydecs1
    with  entbodydecs2 := <get-all-function-default-annotation(|x_class)> entbodydecs1
    
  desugar-ui : 
    EntityNoSuper(x_class, entbodydecs1){anno*} -> <rename> EntityNoSuper(x_class, entbodydecs2){anno*}
    where <oncetd(not-translated-default-anno)> entbodydecs1
    with  entbodydecs2 := <get-all-function-default-annotation(|x_class)> entbodydecs1
    
  desugar-ui :
    SessionEntity(x_class, entbodydecs1){anno*} -> <rename> SessionEntity(x_class, entbodydecs2){anno*} 
    where <oncetd(not-translated-default-anno)> entbodydecs1
    with  entbodydecs2 := <get-all-function-default-annotation(|x_class)> entbodydecs1
   
signature
  constructors 
    DefaultAnnotationFunctionGenerated: Term //-> Term
  
rules 

  not-translated-default-anno : 
    prop@Property(x, k, srt, annos) -> prop
    where <fetch(?DefaultAnno(e1))> annos
        ; <not(fetch(DefaultAnnotationFunctionGenerated))> annos

  get-all-function-default-annotation(|x_class):
    entbodydecs1 -> entbodydecs2
    with  tuples := <map(get-function-default-annotation(|x_class) <+ !(<id>,[]) )> entbodydecs1
        ; (props2,funcs1) := <unzip> tuples
        ; funcs2 := <flatten-list> funcs1
        ; entbodydecs2 := <concat> [props2,funcs2]

  get-function-default-annotation(|x_class) :  
     Property(x, k, srt, annos){anno*} -> 
    (Property(x, k, srt, [DefaultAnnotationFunctionGenerated()|annos]){anno*}
    ,result)
    where not-translated-default-anno
    with  <fetch(?DefaultAnno(e1))> annos
        ; x_name := <capitalize-string> x_class // re-using ExtendFunction for constructor
        ; srt_typeof := <type-of> e1
        ; result := 
            |[ 
              extend function x_name() { x := e1; } 
            ]|
     
  //default-collection-function-name : x -> <concat-strings> ["defaultForProperty",<capitalize-string> x]   
  