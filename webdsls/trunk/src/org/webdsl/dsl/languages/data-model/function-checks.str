module org/webdsl/dsl/languages/data-model/function-checks

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/languages/data-model/property-checks

rules 
  
 constraint-error-global-nondouble-entities =
      ?x_class
    ; bagof-Functions; concat
    ; constraint-double-decls(
          extract-function-sig; sig-to-lower
        ,{prettysig:  
            Snd; extract-function-sig; pp-func-sig => prettysig
          ; <concat-strings> ["Function with signature ",prettysig," of entity '",x_class,"' is defined multiple times."]
         }
      )
           
  extract-function-sig = 
     \Function(x,farg,_,_) -> (x, <map(farg-to-type)> farg)\
  <+ \FunctionNoReturn(x,farg,_) -> (x, <map(farg-to-type)> farg)\
  <+ \NativeFunction(x,farg,_) -> (x, <map(farg-to-type)> farg)\
  
  farg-to-type = ?Arg(_,<id>)

  sig-to-lower: (name,args) -> (<lower-case> name, args)
   
  pp-func-sig = ?(x,argtypes); <concat-strings> [x,"(",<map(pp-webdsl-to-string);separate-by(|", ");concat-strings> argtypes,")"]
  
rules // generic check entity function traversal

  constraint-error-data =
      where(get-entity-def)
    ; transform-entity-body(check-entity-functions)
  
rules // extend function
  
  check-entity-functions(|entityname):
    decls -> <fail>
    with <filter(check-entity-function(|entityname))> decls
       ; sigs := <filter(is-function-cons; extract-function-sig)> decls
       ; efuncs := <filter(?ExtendFunction(_))> decls
       ; <filter(match-extend-function-to-entity-function(|entityname))> efuncs 
         
  match-extend-function-to-entity-function(|entityname):
    ExtendFunction(f) -> <add-error(|["Extend function with signature ",prettysig," in ",entityname," extends a non-existing function."])>
    where sig@(name,argtypes) := <extract-function-sig> f
        ; <not(CheckFunctionSignature)> (SimpleSort(entityname),name,argtypes)
        ; prettysig := <pp-func-sig> sig 
     
rules // built-in function signature check
  
  check-entity-function(|entityname):
    decl -> <fail>
    where is-function-cons
      ; sig := <extract-function-sig> decl
	    ; msg := <is-builtin-ent-func-signature(|entityname)> sig
	    ; prettysig := <pp-func-sig> sig
	    ; <add-error(|
	            ["Function with signature ", prettysig, " for entity ", entityname,
	             " ", msg ] )> decl

rules
  
  is-builtin-ent-func-signature(|entname):
    (name, params) -> msg
    where fargs := <EntityFunctionNoOverloading> (entname, name)
        ; not(params := fargs)
        ; msg := <concat-strings> ["overloads a builtin function."]
  