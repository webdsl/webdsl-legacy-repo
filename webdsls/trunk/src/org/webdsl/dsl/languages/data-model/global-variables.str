module org/webdsl/dsl/languages/data-model/global-variables

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
          
rules

  //fix for old syntax of global variables and functions
  desugar-data :
    GlobalsDefinition(defs) -> RemoveMe()
    where <map(emit-webdsl-code-no-rename<+debug(!"old globals syntax fix failed"))> defs

rules //initial declare
  
  declare-global-var: (vardecl, x, srt) -> <id>
    with rules ( TypeOf : x -> srt )
       ; rules ( IsGlobal : x )
       ; rules ( VarDecl :+ x -> vardecl )
  
  declare-action : v@VarDeclInit(x, srt, e) -> v
    with <declare-global-var> (v, x, srt)
  
  declare-action : v@VarDeclInitInferred(x, e) -> v
         // compute type on demand, when everything is declared
    with rules ( TypeOf : x -> <get-inferred-type <+ !"unknown"> (x,e)) 
       ; rules ( IsGlobal : x )
       ; rules ( VarDecl :+ x -> v )
  
  get-inferred-type: (x,e) -> t
    where not(<InferringExpressionType> e) <+ <add-error(|"Circular variable definition detected.")> e; fail  
    with  {| InferringExpressionType: 
              rules(InferringExpressionType : e)
            ; t := <type-of> e
            ; rules(TypeOf : x -> t)    // avoid re-computation
          |}
  
  //global var without init
  declare-action : v@VarDecl(x, _) -> <add-error(|["Global variable '", x, "' must be initialized."])> v

rules //constraints

  //duplicate global var names
  constraint-error-global =
      <concat; uniq> [<all-keys-VarDecl>, <all-keys-IsRequestScopedVarDecl>]
    ; constraint-double-names(
        bagof-VarDecl
      , \(name,decl) -> ["Global variable with name '", name, "' is defined multiple times."]\
      )
    ; fail

rules 

  desugar-data:
    Var(x) -> GlobalVar(x)
    where <IsGlobal> x 
  
  type-of-data :
    GlobalVar(x) -> <TypeOf> x
    
rules

  global-var-assign-message : x -> ["Assignment to global variable '",x,"' is not allowed, the global variable must remain the same instance (however, changing its properties is allowed)."]

  constraint-error-data :
    Stat(Assignment(Var(x), _)) -> <add-error(|<global-var-assign-message> x)>
    where <IsGlobal> x

  constraint-error-data :
    Stat(Assignment(GlobalVar(x), _)) -> <add-error(|<global-var-assign-message> x)>
   
rules

  global-var-delete-message : x -> ["Global variable '",x,"' may not be deleted, the global variable must remain the same instance (however, changing its properties is allowed)."]

  constraint-error-data :
    Call(Var(x), "delete",_) -> <add-error(|<global-var-delete-message> x)>
    where <IsGlobal> x

  constraint-error-data :
    Call(GlobalVar(x), "delete",_) -> <add-error(|<global-var-delete-message> x)>

  /**
   *  input(GlobalVar) is not allowed, see test/fail/globalvar-input.app
   */
  constraint-error-data =
    find-template-with-name(|"input")
  ; ?t
  ; get-tc-args
  ; ( ?[GlobalVar(x)] <+ ?[Var(<?x;IsGlobal>)] )
  ; <add-error(|["Global variable ",x," is not allowed in inputs, only the properties of a global variable may be changed."])> t
       
  //TODO constraint on using globals with other built-in input-like templates, perhaps not necessary after
  // converting built-ins to library and using the check below.

  /**
   * constraint on Ref arg called with global variable
   */
  constraint-error-data =
    ?t
  ; is-defined-tc-get-called-def
  ; ?Define(_,_,fargs,_,_)
  ; args := <get-tc-args> t
  ; <zip(try(constraint-error-ref-arg-global))> (fargs, args)  
  ; fail //result doesn't matter here, errors are inserted in DR
    
  constraint-error-ref-arg-global:
    (Arg(_,RefSort(_)),e) -> <add-error(|["Global variable ",x," is not allowed as Ref argument, only the properties of a global variable may be changed."])> e
    where <?Var(<?x;IsGlobal>)> e <+ <?GlobalVar(x)> e
    

  //TODO check for cascade delete, can occur when there is a '<>' reference to a global. 
  // maybe as a dynamic check that throws an exception in the delete event of hibernate
  