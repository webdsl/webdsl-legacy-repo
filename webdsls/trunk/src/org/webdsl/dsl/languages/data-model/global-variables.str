module org/webdsl/dsl/languages/data-model/global-variables

imports
  libstrategolib
  Java-15
  libjava-front

imports
  libwebdsl-front
          
rules

  //fix for old syntax of global variables and functions
  desugar-data :
    GlobalsDefinition(defs) -> RemoveMe()
    where <map(emit-webdsl-code-no-rename<+debug(!"old globals syntax fix failed"))> defs

rules //constraints

  //duplicate global var names
  constraint-error-data :
    Application(nm, sections) -> <fail>
    where globalvars := <collect(?VarDeclInit(_{}, _, _))> sections //global var names do not get an annotation during rename
        ; doublevarnames := <map(?VarDeclInit(<id>, _, _));find-doubles> globalvars
        ; not([] := doublevarnames)
    with <map(try(constraint-error-global-var-names(|doublevarnames)))> globalvars
    
  constraint-error-global-var-names(|doublevarnames):
    VarDeclInit(name,_,_) -> <add-error(|["Global variable with name '", namestripped, "' is defined multiple times."])> 
    where namestripped := <strip-annos> name
       ; <fetch(?namestripped)> doublevarnames
       
rules //constraints

  //global var without init
  constraint-error-data :
    Application(nm, sections) -> <fail>
    where globalvarsnoinit := <collect(?VarDecl(_{}, _))> sections //global var names do not get an annotation during rename, vardecl without init is not renamed at all
    with <filter(constraint-error-global-var-no-init)> globalvarsnoinit
    
  constraint-error-global-var-no-init:
    VarDecl(name,_) -> <add-error(|["Global variable '", name, "' must be initialized."])> 
       
rules 

  desugar-data:
    Var(x) -> GlobalVar(x)
    where <IsGlobal> x 
  
  type-of-data :
    GlobalVar(x) -> <TypeOf> x
    
rules

  global-var-assign-message : x -> ["Assignment to global variable '",x,"' is not allowed, the global variable must remain the same instance (however, changing its properties is allowed)."]

  constraint-error-data :
    Stat(Assignment(Var(x), _)) -> <add-error(|<global-var-assign-message> x)>
    where <IsGlobal> x

  constraint-error-data :
    Stat(Assignment(GlobalVar(x), _)) -> <add-error(|<global-var-assign-message> x)>
   
rules

  global-var-delete-message : x -> ["Global variable '",x,"' may not be deleted, the global variable must remain the same instance (however, changing its properties is allowed)."]

  constraint-error-data :
    Call(Var(x), "delete",_) -> <add-error(|<global-var-delete-message> x)>
    where <IsGlobal> x

  constraint-error-data :
    Call(GlobalVar(x), "delete",_) -> <add-error(|<global-var-delete-message> x)>
       
  //TODO check for cascade delete, can occur when there is a '<>' reference to a global. maybe as a dynamic check that throws an exception in the delete event of hibernate
  
  //TODO constraint on input(global)