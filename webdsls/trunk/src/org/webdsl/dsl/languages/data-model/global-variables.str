module org/webdsl/dsl/languages/data-model/global-variables

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
          
rules

  //fix for old syntax of global variables and functions
  desugar-data :
    GlobalsDefinition(defs) -> RemoveMe()
    where <map(emit-webdsl-code-no-rename<+debug(!"old globals syntax fix failed"))> defs

rules //initial declare
  
  declare-action : v@VarDeclInit(x, srt, e) -> v
    with rules ( TypeOf : x -> srt )
       ; rules ( IsGlobal : x )
       ; rules ( VarDecl :+ x -> v )
         
  declare-action : v@VarDeclInitInferred(x, e) -> v
    with  srt := <type-of <+ !"unknown"> e  // type-of can fail if the expression cannot be typed, in that case the var will not be declared and constraint error triggers
        ; rules ( TypeOf : x -> srt )
        ; rules ( IsGlobal : x )
        ; rules ( VarDecl :+ x -> v)

  //global var without init
  declare-action : v@VarDecl(name, _) -> <add-error(|["Global variable '", name, "' must be initialized."])> v
  
rules //constraints

  //duplicate global var names
	constraint-error-global =
			all-keys-VarDecl
	  ; constraint-double-names(
		    bagof-VarDecl
		  , \(name,decl) -> ["Global variable with name '", name, "' is defined multiple times."]\
		  )
		; fail

rules 

  desugar-data:
    Var(x) -> GlobalVar(x)
    where <IsGlobal> x 
  
  type-of-data :
    GlobalVar(x) -> <TypeOf> x
    
rules

  global-var-assign-message : x -> ["Assignment to global variable '",x,"' is not allowed, the global variable must remain the same instance (however, changing its properties is allowed)."]

  constraint-error-data :
    Stat(Assignment(Var(x), _)) -> <add-error(|<global-var-assign-message> x)>
    where <IsGlobal> x

  constraint-error-data :
    Stat(Assignment(GlobalVar(x), _)) -> <add-error(|<global-var-assign-message> x)>
   
rules

  global-var-delete-message : x -> ["Global variable '",x,"' may not be deleted, the global variable must remain the same instance (however, changing its properties is allowed)."]

  constraint-error-data :
    Call(Var(x), "delete",_) -> <add-error(|<global-var-delete-message> x)>
    where <IsGlobal> x

  constraint-error-data :
    Call(GlobalVar(x), "delete",_) -> <add-error(|<global-var-delete-message> x)>
       
  //TODO check for cascade delete, can occur when there is a '<>' reference to a global. maybe as a dynamic check that throws an exception in the delete event of hibernate
  
  //TODO constraint on input(global)