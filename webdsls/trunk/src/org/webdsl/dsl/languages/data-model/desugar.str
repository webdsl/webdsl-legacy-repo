module org/webdsl/dsl/languages/data-model/desugar

imports
  libstratego-lib
imports
  libwebdsl-front

rules
  desugar-data :
    SessionEntity(x_class, entbodydecs1) -> SessionEntity(x_class, entbodydecs2)
    where entbodydecs2 := <desugar-extend-entity-functions-create-dr> (x_class,entbodydecs1)
  desugar-data :
    Entity(x_class, sup, entbodydecs1) -> Entity(x_class, sup, entbodydecs2)
    where entbodydecs2 := <desugar-extend-entity-functions-create-dr> (x_class,entbodydecs1)
  desugar-data :
    EntityNoSuper(x_class, entbodydecs1) -> EntityNoSuper(x_class, entbodydecs2)
    where entbodydecs2 := <desugar-extend-entity-functions-create-dr> (x_class,entbodydecs1)
        
  desugar-extend-entity-functions-create-dr :
    (x_class, entbodydecs1) -> entbodydecs2
    where extendfunctions := <filter(?ExtendFunction(_))> entbodydecs1
        ; not(?[])
    with  <map(extend-entity-function-dr(|x_class))> extendfunctions
        ; entbodydecs2 := <remove-all(?ExtendFunction(_))> entbodydecs1

  extend-entity-function-dr(|x_class) =
    ?ExtendFunction(Function(fun, fargs, _, Block(stats)))
    ; with(
          rules (
            ExtendEntityFunction :+
              (x_class,Function(fun, fargs2, SimpleSort("Void"), Block(stats2))) -> Function(fun, fargs2, SimpleSort("Void"), Block(newstats))
              with  newstats := <rename-vars-in-added-stmts-with-fargs> (fargs,fargs2,stats,stats2)
            )
          )
          
  rename-vars-in-added-stmts-with-fargs :
    (currentfargs,otherfargs,currentstmts,otherstmts) -> newstmts
    with  renamepairs := <zip> (<map(?Arg(<id>,_))> currentfargs, <map(?Arg(<id>,_))> otherfargs)
        ; (stats3, []) := <rename-all-vars> (currentstmts, renamepairs)
        ; newstmts := <concat> [otherstmts, stats3]


rules //apply extend entity functions

  desugar-data :
    SessionEntity(x_class, entbodydecs1) -> SessionEntity(x_class, entbodydecs2)
    where entbodydecs2 := <desugar-extend-entity-functions-apply-dr> (x_class, entbodydecs1)
  desugar-data :
    Entity(x_class, sup, entbodydecs1) -> Entity(x_class, sup, entbodydecs2)
    where entbodydecs2 := <desugar-extend-entity-functions-apply-dr> (x_class, entbodydecs1)
  desugar-data :
    EntityNoSuper(x_class, entbodydecs1) -> EntityNoSuper(x_class, entbodydecs2)
    where entbodydecs2 := <desugar-extend-entity-functions-apply-dr> (x_class, entbodydecs1)
 
  desugar-extend-entity-functions-apply-dr :
    (x_class,entbodydecs1) -> entbodydecs2
    where entbodydecs2 := <map(try(<once-ExtendEntityFunction;where(applied:=True())> (x_class,<id>)))> entbodydecs1
        ; !applied

  desugar-data = once-ExtendEntity
  
  desugar-data :
    ExtendEntity(ident, entbodydecs1) -> RemoveMe()
    with rules (
        ExtendEntity :+
          EntityNoSuper(ident, entbodydecs2) -> EntityNoSuper(ident, <concat> [entbodydecs1,entbodydecs2])
          with rules ( ExtendEntity :- Entity(ident, s, entbodydecs2)
                       ExtendEntity :- SessionEntity(ident, entbodydecs2) ) // Remove the other two
                       
        // @TODO: normalize EntityNoSuper to Entity extends Object
        
        ExtendEntity :+
          Entity(ident, s, entbodydecs2) -> Entity(ident, s, <concat> [entbodydecs1,entbodydecs2])
          with rules ( ExtendEntity :- EntityNoSuper(ident, entbodydecs2)
                       ExtendEntity :- SessionEntity(ident, entbodydecs2) )

        ExtendEntity :+
          SessionEntity(ident, entbodydecs2) -> SessionEntity(ident, <concat> [entbodydecs1,entbodydecs2])
          with rules ( ExtendEntity :- Entity(ident, s, entbodydecs2)
                       ExtendEntity :- EntityNoSuper(ident, entbodydecs2) )
                       
          // @TODO: move to extend session entity case below
      )
      // this approach causes rules to be created which will not be used
      // invariant should be to consume all rules applied with once- (?)
      
      // desugar all entities to inherit from Object?
rules

  desugar-data =
    ?ent
    ; create-inverse-anno
    ; not(?ent)

  create-inverse-anno :
    Entity(x_class,superclass, entbodydecs1) -> Entity(x_class,superclass, entbodydecs2)
    where entbodydecs2 := <map(try(desugar-inverse-property(|x_class)))> entbodydecs1

  create-inverse-anno :
    EntityNoSuper(x_class, entbodydecs1) -> EntityNoSuper(x_class, entbodydecs2)
    where entbodydecs2 := <map(try(desugar-inverse-property(|x_class)))> entbodydecs1

  desugar-inverse-property(|x_class) :
    Property(x, k, s, anno*) -> Property(x, k, s, anno2*)
    where <map(try(declare-inverse-anno(|x_class, x)))> anno*
        ; anno2* := <create-inverse-slave-anno(|x_class,x)> anno*

  create-inverse-slave-anno(|x_class,p) :
    xs -> [slaveanno|xs]
    where [] := <collect(?InverseSlaveAnno(_, _))> xs
        ; (ent, fld) := <once-CreateInverseSlaveAnno> (x_class, p)
        ; slaveanno := InverseSlaveAnno(ent, fld)

  declare-inverse-anno(|x_class, p) =
    ?InverseAnno(ent, fld)
    ; rules(
        CreateInverseSlaveAnno : (ent, fld) -> (x_class, p)
      )
      
rules //add length anno if not specified

  desugar-data :
    Property(x, k, s, anno*) -> Property(x, k, s, anno2*)
    where not(<fetch(?SingleParamAnno("length",_))> anno*)
        ; anno2* := [SingleParamAnno("length",<type-default-length> s)|anno*]
        
  type-default-length : SimpleSort("String") -> "255"
  type-default-length : SimpleSort("URL") -> "255"
  type-default-length : SimpleSort("Secret") -> "255"
  type-default-length : SimpleSort("Email") -> "255"
  type-default-length : SimpleSort("Patch") -> "1000000"
  type-default-length : SimpleSort("WikiText") -> "1000000"
  type-default-length : SimpleSort("Text") -> "1000000"
  
  rules // entity name property annotation
  
  	add-backend-annotation =
  	   ( ?ent@Entity(_,_,props) <+ ?ent@SessionEntity(_,props) <+ ?ent@EntityNoSuper(_,props) )
  	  ; where(has-no-anno(?NamePropertyAnno(_)))
  	  ; where(not(<fetch(  ?Property             ("name",_,_,_  )
                        <+ ?PropertyNoAnno       ("name",_,_    )
                        <+ ?DerivedProperty      ("name",_,_,_,_)
                        <+ ?DerivedPropertyNoAnno("name",_,_,_  ))> props))
      ; add-anno(|NamePropertyAnno(<get-namefield> props))
