module org/webdsl/dsl/languages/data-model/desugar

imports
  libstratego-lib
imports
  libwebdsl-front
  org/webdsl/dsl/languages/-

rules
  desugar-data :
    SessionEntity(x_class, entbodydecs1){anno*} -> SessionEntity(x_class, entbodydecs2){anno*}
    where entbodydecs2 := <desugar-extend-entity-functions-create-dr> (x_class,entbodydecs1)
  desugar-data :
    Entity(x_class, sup, entbodydecs1){anno*} -> Entity(x_class, sup, entbodydecs2){anno*}
    where entbodydecs2 := <desugar-extend-entity-functions-create-dr> (x_class,entbodydecs1)
  desugar-data :
    EntityNoSuper(x_class, entbodydecs1){anno*} -> EntityNoSuper(x_class, entbodydecs2){anno*}
    where entbodydecs2 := <desugar-extend-entity-functions-create-dr> (x_class,entbodydecs1)
        
  desugar-extend-entity-functions-create-dr :
    (x_class, entbodydecs1) -> entbodydecs2
    where extendfunctions := <filter(?ExtendFunction(_))> entbodydecs1
        ; not(?[])
    with  <map(extend-entity-function-dr(|x_class))> extendfunctions
        ; entbodydecs2 := <remove-all(?ExtendFunction(_))> entbodydecs1

  extend-entity-function-dr(|x_class) =
    ?ExtendFunction(Function(fun, fargs, _, Block(stats)))
    ; with(
          rules (
            ExtendEntityFunction :+
              (x_class,Function(fun, fargs2, SimpleSort("Void"), Block(stats2))) -> Function(fun, fargs2, SimpleSort("Void"), Block(newstats))
              where <eq> (<map(?Arg(_,<strip-annos>))> fargs, <map(?Arg(_,<strip-annos>))> fargs2)
              with  newstats := <rename-vars-in-added-stmts-with-fargs> (fargs,fargs2,stats,stats2)
            )
          )
          
  rename-vars-in-added-stmts-with-fargs :
    (currentfargs,otherfargs,currentstmts,otherstmts) -> newstmts
    with  renamepairs := <zip> (<map(?Arg(<id>,_))> currentfargs, <map(?Arg(<id>,_))> otherfargs)
        ; (stats3, []) := <rename-all-vars> (currentstmts, renamepairs)
        ; newstmts := <concat> [otherstmts, stats3]


rules //apply extend entity functions

  desugar-data :
    SessionEntity(x_class, entbodydecs1){anno*} -> SessionEntity(x_class, entbodydecs2){anno*}
    where entbodydecs2 := <desugar-extend-entity-functions-apply-dr> (x_class, entbodydecs1)
  desugar-data :
    Entity(x_class, sup, entbodydecs1){anno*} -> Entity(x_class, sup, entbodydecs2){anno*}
    where entbodydecs2 := <desugar-extend-entity-functions-apply-dr> (x_class, entbodydecs1)
  desugar-data :
    EntityNoSuper(x_class, entbodydecs1){anno*} -> EntityNoSuper(x_class, entbodydecs2){anno*}
    where entbodydecs2 := <desugar-extend-entity-functions-apply-dr> (x_class, entbodydecs1)
 
  desugar-extend-entity-functions-apply-dr :
    (x_class,entbodydecs1) -> entbodydecs2
    where entbodydecs2 := <map(try(<once-ExtendEntityFunction;where(applied:=True())> (x_class,<id>)))> entbodydecs1
        ; !applied
  
  desugar-data = once-ExtendEntity
  
  desugar-data :
    ExtendEntity(ident, entbodydecs1) -> RemoveMe()
    with rules (
        ExtendEntity :+
          EntityNoSuper(ident, entbodydecs2){anno*} -> EntityNoSuper(ident, <concat> [entbodydecs1,entbodydecs2]){anno*}
          with rules ( ExtendEntity :- Entity(ident, s, entbodydecs2)
                       ExtendEntity :- SessionEntity(ident, entbodydecs2) ) // Remove the other two
                       
        // @TODO: normalize EntityNoSuper to Entity extends Object
        
        ExtendEntity :+
          Entity(ident, s, entbodydecs2){anno*} -> Entity(ident, s, <concat> [entbodydecs1,entbodydecs2]){anno*}
          with rules ( ExtendEntity :- EntityNoSuper(ident, entbodydecs2)
                       ExtendEntity :- SessionEntity(ident, entbodydecs2) )

        ExtendEntity :+
          SessionEntity(ident, entbodydecs2){anno*} -> SessionEntity(ident, <concat> [entbodydecs1,entbodydecs2]){anno*}
          with rules ( ExtendEntity :- Entity(ident, s, entbodydecs2)
                       ExtendEntity :- EntityNoSuper(ident, entbodydecs2) )
                       
          // @TODO: move to extend session entity case below
      )
      // this approach causes rules to be created which will not be used
      // invariant should be to consume all rules applied with once- (?)
  
      
rules //add length anno if not specified

  desugar-data :
    Property(x, k, s, anno*) -> Property(x, k, s, anno2*)
    where not(<fetch(?LengthAnno(_))> anno*)
        ; anno2* := [LengthAnno(<type-default-length> s)|anno*]
        
  type-default-length : SimpleSort("String") -> "255"
  type-default-length : SimpleSort("URL") -> "255"
  type-default-length : SimpleSort("Secret") -> "255"
  type-default-length : SimpleSort("Email") -> "255"
  type-default-length : SimpleSort("Patch") -> "1000000"
  type-default-length : SimpleSort("WikiText") -> "1000000"
  type-default-length : SimpleSort("Text") -> "1000000"
  
  
rules //PredicateInEntity to Function
  
  desugar-data :
    PredicateInEntity(x_name,farg*,exp) -> fun 
    with e := <add-not-null-checks> exp
       ; fun := def |[
           function x_name ( farg* ) : Bool {
             return e;
           }
         ]|
		   
rules
		
	add-backend-annotation =
      ?p@Property(name, _, _, annos)
    ;where(<fetch(?InverseSlaveAnno(x_c, x_p) <+ ?InverseAnno(x_c, x_p))> annos
    ; <IsSearchableProp>(x_c, x_p))
	;<add-new-anno(|InverseOfSearchable())> p
    
    