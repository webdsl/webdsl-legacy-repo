module org/webdsl/dsl/languages/data-model/static-functions

imports
  libstrategolib

imports
  libwebdsl-front

/**
 *  Global function generated as static entity function to optimize code generator cache
 */
rules

  static-function-name: f -> $[_static_[f]]

  // x_class 			classname of entity to declare function in
  // x_funcname 	name of static function in entity
  // This declares the given global function, but calls to it are desugared to x_class.x_funcname() 
  declare-static-function(|x_class, x_funcname) =
      ?f@Function(globalname,args,retsrt,body){anno*}
    ; with (
          // Declare global version
          <declare> f
          // Store static version to rewrite calls
        ; argtypes := <map(\Arg(_,srt) -> srt\)> args
          // Rename the function to avoid collision with user-defined functions
          // (there is no way to declare or reserve static functions yet)
        ; x_funcname2 := <static-function-name> x_funcname
        ; rules(
            StaticSignatures :+ globalname -> (x_class, x_funcname2, argtypes)
          )
     )
          
  declare-emit-static-function(|x_class, x_funcname) =
      ?f@Function(globalname,args,retsrt,body){anno*}
    ; with (
          declare-static-function(|x_class, x_funcname)
        ; anno2* := <concat> [anno*, [StaticFunctionAnno()]]
        ; fun2 := Function(<static-function-name> x_funcname,args,retsrt,body){NoRenameOnFunctionName(),anno2*}
        ; <emit-webdsl-code-no-declare> def|[
            extend entity x_class {
              fun2
            }
          ]|
    )
    
rules

  add-backend-annotation =
      ?ThisCall(name_annos, args)
    ; where(name := <strip-annos> name_annos)
    ; has-no-anno(?StaticFunctionCallAnno(_,_))
    ; where(
        argtypes := <map(type-of)> args 
      ; sigs := <bagof-StaticSignatures> name
      ; anno := <filter(signature-to-static-anno(|argtypes)); Hd> sigs
    )
    ; add-anno(|anno)
  
  signature-to-static-anno(|args):
    (entname, funcname, fargs) -> StaticFunctionCallAnno(entname, funcname)
    where(<zip(type-compatible)> (fargs,args))
    
    
/**
 * static entity methods
 * @TODO the code above can be made obsolete by moving global functions (like findUserByName) to static entity functions (User.findByName) 
 */
rules
  
  eq-type-of :
    Var(e) -> EntitySort(e)
    where <IsEntity> e
  
rules 
  
  normalize-declare : 
  	StaticEntityFunction(f, args, ReturnType(r), body){anno*} -> Function(f, args, r, body){anno*}
  
  declare-function(|x_class): f@StaticEntityFunction(_,_,_,_) -> f
    with  f2 := <with-origin(normalize-declare)> f
        ; <declare-function(|x_class)> f2
        ; <declare-static-function(|x_class)> f2
        
  declare-static-function(|x_class) =
    ?def@Function(f, args, sort, _)
    ; with(id
      ; t1* := <map(?Arg(_,<id>))> args
      ; rules( CheckFunctionSignatureArgumentTypesStatic :+
                    (EntitySort(x_class), f, t2*) -> t1*
                       where <zip(type-compatible)> (t1*, t2*)
               EntityFunctionDeclStatic :+ (x_class, f, t1*) -> def
             )
      ) 

  rename-action :
    StaticEntityFunction(x, farg1*, srt, b1){anno*} -> StaticEntityFunction(x, farg2*, srt, b2){anno*}
    with {| Rename, InDef, FunctionArg, VarInContext
          : rules ( InDef := True() )
          ; farg2* := <map(rename)> farg1*
          ; rules ( FunctionArg := farg2* )
          ; <declare-args-in-context> farg2*
          ; b2 := <rename-all> b1
          |}

  constraint-error-action = 
  	?StaticEntityFunction(_, _, _, _)
  ; normalize-declare
  ; constraint-error-action
