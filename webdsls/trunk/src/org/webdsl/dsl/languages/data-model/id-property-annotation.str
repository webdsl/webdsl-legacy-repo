module org/webdsl/dsl/languages/data-model/id-property-annotation

imports
  libstrategolib
  libwebdsl-front
  org/webdsl/dsl/languages/data-model/static-functions
  org/webdsl/dsl/languages/data-model/declare
  org/webdsl/dsl/languages/action/typechecker/function
  org/webdsl/dsl/transformation/emit
  org/webdsl/dsl/typechecker/error
  org/webdsl/dsl/typechecker/utils

rules // check for invalid id property annotations

  constraint-error-data :
    EntityNoSuper(name, _) -> <add-error(|["Only one id annotation allowed in an entity"])>
    where <collect(?SimpleAnno("id"));length;not(?0<+?1)> <bagof-Properties;uniq> name // use dr to cope with extend entity
    
  constraint-error-data :
    Entity(name, _, _) -> <add-error(|["Id annotation not allowed in subtypes, place it in the extended entity"])>
    where <collect(?SimpleAnno("id"));length;not(?0)> <bagof-Properties;uniq> name
    
  constraint-error-data :
    SessionEntity(name, _) -> <add-error(|["Id annotation not allowed in session entities"])>
    where <collect(?SimpleAnno("id"));length;not(?0)> <bagof-Properties;uniq> name

  constraint-error-data :
    Property(_,_,srt,annos) -> <add-error(|["Id property must be a string type."])>
    where <fetch(?SimpleAnno("id"))> annos
        ; not(<type-compatible> (SimpleSort("String"), srt))

rules

  handle-entity-id(|x_class) :
    props -> props
    with  <entity-declare-id-property> (x_class,"id",SimpleSort("UUID"))  
        ; <filter(extract-entity-id(|x_class))> props //possibly overrides default

  entity-declare-id-property :
    (x_class,name,srt) -> (x_class,name,srt) 
    where rules(
            EntityIdType : x_class -> srt
            EntityIdName : x_class -> name
          )

  extract-entity-id(|x_class) =
    ?Property(x, k, srt, annos) //only matches this type of property, others such as derivedproperty cannot have id anno
    ; with(
        if <fetch(?SimpleAnno("id"))> annos then
          <entity-declare-id-property> (x_class,x,srt)
        ; rules(HasNaturalId : x_class)
        // get unique object function
        ; x_funname_static := "getUnique"
        ; x_funname := <concat-strings> [x_funname_static,x_class]
        ; <register-reserved-function> (x_funname,1)
        ; srt2 := SimpleSort(x_class)
        ; <declare-static-function(|x_class, x_funname_static)> fun |[ function x_funname(name:srt):srt2 {} ]|
        
        // is unique object function
        ; x_funname2_static := "isUnique"
        ; x_funname2 := <concat-strings> [x_funname2_static,x_class]
        ; <register-reserved-function> (x_funname2,1)
        ; <declare-static-function(|x_class, x_funname2_static)> fun |[ function x_funname2(object:srt2):Bool {} ]|
        
        // is unique id function
        ; x_funname3_static := "isUniqueId"
        ; x_funname3 := <concat-strings> ["isUnique",x_class,"Id"]
        ; <register-reserved-function> (x_funname3,1)
        ; <declare-static-function(|x_class, x_funname3_static)> fun |[ function x_funname3(name:srt):Bool {} ]|
        
        // is unique id function variant, pass the object as well, that way the old id value is not seen as non-unique
        ; x_funname4_static := "isUniqueId"
        ; x_funname4 := <concat-strings> ["isUnique",x_class,"Id"]
        ; <register-reserved-function> (x_funname4,2)
        ; <declare-static-function(|x_class, x_funname4_static)> fun |[ function x_funname4(name:srt,object:srt2):Bool {} ]|
        
        // 'find' function which retrieves the object given the id property or returns null if it does not exist
        ; x_funname5_static := "find"
        ; x_funname5 := <concat-strings> [x_funname5_static,x_class]
        ; <register-reserved-function> (x_funname5,1)
        ; <declare-emit-static-function(|x_class, x_funname5_static)> fun |[ 
            function x_funname5(theid : srt) : x_class {
              var list : List<x_class> := select g from x_class as g where g.x = ~theid;
              if(list.length > 0) {
                return list.get(0);
              } else {
                return null;
              }
            } 
          ]|
        end
      )
      
      
  natural-id-name-include-superclass = natural-id-name-include-superclass(|[])
  
  natural-id-name-include-superclass(|alreadychecked) :
    x_class -> []
    where <fetch(?x_class)> alreadychecked //prevent loop on invalid input 'entity Xyz:Xyz'
  
  natural-id-name-include-superclass(|alreadychecked):
    x_class -> name 
    where not(<fetch(?x_class)> alreadychecked)
    where name := <HasNaturalId;EntityIdName> x_class 
       <+ name := <natural-id-name-include-superclass(|[x_class|alreadychecked])> <Extends> x_class
            
  natural-id-type-include-superclass = natural-id-name-include-superclass(|[])
  
  natural-id-type-include-superclass(|alreadychecked) :
    x_class -> []
    where <fetch(?x_class)> alreadychecked //prevent loop on invalid input 'entity Xyz:Xyz'
   
  natural-id-type-include-superclass(|alreadychecked) :
    x_class -> name 
    where not(<fetch(?x_class)> alreadychecked)
    where name := <HasNaturalId;EntityIdType> x_class 
       <+ name := <natural-id-type-include-superclass(|[x_class|alreadychecked])> <Extends> x_class
       
rules //automatically generate validate rule to check uniqueness

  extend-property-declare(|x_class) = 
  	?prop@Property(x, k, s, annos)
  ; <fetch(?SimpleAnno("id"))> annos
  // generate validate to prevent duplicate id property
  ; x_funname4 := <concat-strings> ["isUnique",x_class,"Id"]
  ; <register-reserved-function> (x_funname4,2)
  ; if <fetch(?IdErrorAnno(newerror))> annos
    then e_errormessage := newerror
    else e_errormessage := String("Identity is already used.") end
  ; <emit-webdsl-code> def|[ extend entity x_class { validate(x_funname4(this.x,this),e_errormessage) } ]| //by using x in the check, the validation is placed on the id property
  // generate validate to prevent empty id property
  ; if <fetch(?IdEmptyErrorAnno(newerrorempty))> annos
    then e_errormessageempty := newerrorempty
    else e_errormessageempty := String("Identity may not be empty.") end
  ; <emit-webdsl-code> def|[ extend entity x_class { validate(this.x.length() > 0, e_errormessageempty) } ]|
  ; fail
