module org/webdsl/dsl/languages/data-model/property-events

imports
  libstratego-lib
imports
  libwebdsl-front

rules

  desugar-data = desugar-property-events

  desugar-property-events :
    SessionEntity(nm, props, functions) -> SessionEntity(nm, props, functions)
    where <filter(desugar-property-events-session(|nm))> props
        ; not(?[]) 

  desugar-property-events :
    Entity(x_class,superclass, props, functions) -> Entity(x_class,superclass, props, functions)
    where <filter(desugar-property-events(|x_class))> props
        ; not(?[]) 
        
  desugar-property-events :
    EntityNoSuper(x_class, props, functions) -> EntityNoSuper(x_class, props, functions)
    where <filter(desugar-property-events(|x_class))> props
        ; not(?[])    

  desugar-property-events(|x_class) :
    p@Property(x, k, s, anno*) -> Property(x, k, s, anno*)
    where not(<PropertyEventFunctionsGenerated> (x_class,x) )
        ; fun* := <get-extensible-functions-for-property-events(|x_class)> p
        ; not(?[])
    with  <emit-webdsl-code> def |[
            extend entity x_class {
              fun*
            }         
          ]|
        ; rules ( PropertyEventFunctionsGenerated : (x_class,x) )
        
  desugar-property-events-session(|x_nm) :
    p@Property(x, k, s, anno*) -> Property(x, k, s, anno*)
    where x_class := <capitalize-string> x_nm
        ; not(<PropertyEventFunctionsGenerated> (x_class,x) )
        ; fun* := <get-extensible-functions-for-property-events(|x_class)> p
        ; not(?[])
    with  <emit-webdsl-code> def |[
            extend session x_nm {
              fun*
            }         
          ]|
        ; rules ( PropertyEventFunctionsGenerated : (x_class,x) )

strategies //declare

  extend-property-declare(|x_class) = get-extensible-functions-for-property-events(|x_class);map(declare-function(|x_class));fail
  
rules  // also used in transformation/property-events

  get-extensible-functions-for-property-events(|x_class) :  
    prop@Property(x, k, srt@SimpleSort(ss), annos) -> result
    with  //x_nameget := <concat-strings> ["get",<capitalize-string> x]
          x_nameset := <concat-strings> ["set",<capitalize-string> x]
        ; result := [
            fun |[ 
              //function x_nameget() {} //doesn't need to return anything, this gets called by the real accessor 
              function x_nameset(value:srt):Void {} 
            ]|
          ]
        ; rules ( HasPropertyEvent : (x_class,x,"set") )
          
  get-extensible-functions-for-property-events(|x_class) :  
    prop@Property(x, k, srt@GenericSort(_,[srt2@SimpleSort(_)]), annos) -> result
    with  x_nameadd := <concat-strings> ["addTo",<capitalize-string> x]
        ; x_nameremove := <concat-strings> ["removeFrom",<capitalize-string> x]
        ; result :=
          fun* |[ 
            function x_nameadd(value:srt2):Void {} 
            function x_nameremove(value:srt2):Void {} 
          ]|
        ; rules ( HasPropertyEvent : (x_class,x,"addTo") )
        ; rules ( HasPropertyEvent : (x_class,x,"removeFrom") )
        
