module org/webdsl/dsl/languages/data-model/property-events

imports
  libstratego-lib
imports
  libwebdsl-front

rules

  desugar-data = desugar-property-events

  desugar-property-events :
    se@SessionEntity(nm, entbodydecs) -> se
    where entbodydecs_with_extras := [CreatedProperty(), ModifiedProperty() | entbodydecs]
        ; <filter(desugar-property-events-session(|nm))> entbodydecs_with_extras
        ; not(?[]) 

  desugar-property-events :
    en@Entity(x_class,superclass, entbodydecs) -> en
    where <filter(desugar-property-events(|x_class))> entbodydecs
        ; not(?[]) 
        
  desugar-property-events :
    en@EntityNoSuper(x_class, entbodydecs) -> en
    where entbodydecs_with_extras := [CreatedProperty(), ModifiedProperty() | entbodydecs] 
        ; <filter(desugar-property-events(|x_class))> entbodydecs_with_extras
        ; not(?[])    

  desugar-property-events(|x_class) :
    p@Property(x, k, s, anno*) -> p
    where not(<PropertyEventFunctionsGenerated> (x_class,x) )
        ; ebd* := <get-extensible-functions-for-property-events(|x_class)> p
        ; not(?[])
    with  <emit-webdsl-code> def |[
            extend entity x_class {
              ebd*
            }         
          ]|
        ; rules ( PropertyEventFunctionsGenerated : (x_class,x) )
        
  desugar-property-events-session(|x_nm) :
    p@Property(x, k, s, annos){anno*} -> Property(x, k, s, annos){anno*}
    where x_class := <capitalize-string> x_nm
        ; not(<PropertyEventFunctionsGenerated> (x_class,x) )
        ; ebd* := <get-extensible-functions-for-property-events(|x_class)> p
        ; not(?[])
    with  <emit-webdsl-code> def |[
            extend session x_nm {
              ebd*
            }         
          ]|
        ; rules ( PropertyEventFunctionsGenerated : (x_class,x) )

strategies //declare

  extend-property-declare(|x_class) =
    funcs := <get-extensible-functions-for-property-events(|x_class)>  
  ; <map(declare-no-overloading(|x_class))> funcs
  ; <map(declare-function(|x_class))> funcs
  ; fail

rules  // also used in transformation/property-events

  get-extensible-functions-for-property-events(|x_class) :  
    prop@Property(x, k, srt@SimpleSort(ss), annos) -> result
    with  //x_nameget := <concat-strings> ["get",<capitalize-string> x]
          x_nameset := <concat-strings> ["set",<capitalize-string> x]
        ; result := 
            fun* |[ 
              //function x_nameget() {} //doesn't need to return anything, this gets called by the real accessor 
              function x_nameset(value:srt):Void {} 
            ]|
        ; rules ( PropertyEvents :+ (prop,x) -> "set")

  get-extensible-functions-for-property-events(|x_class) :  
    prop@Property(x, k, srt@GenericSort(_,[srt2@SimpleSort(_)]), annos) -> result
    with  x_nameadd := <concat-strings> ["addTo",<capitalize-string> x]
        ; x_nameremove := <concat-strings> ["removeFrom",<capitalize-string> x]
        ; result :=
          fun* |[ 
            function x_nameadd(value:srt2):Void {} 
            function x_nameremove(value:srt2):Void {} 
          ]|
        ; rules ( PropertyEvents :+ (prop,x) -> "addTo")
        ; rules ( PropertyEvents :+ (prop,x) -> "removeFrom")

strategies //declare

  extend-property-declare(|x_class) =
    fun := <get-setter-function-for-property(|x_class)>  
  ; <declare-no-overloading(|x_class)> fun
  ; <declare-function(|x_class)> fun
  ; fail

rules  // also used in transformation/property-events

  get-setter-function-for-property(|x_class) :  
    prop@Property(x, k, srt, annos) -> result
    with  x_namesetter := <get-fluent-setter-name(|x)>
        ; result := 
            fun |[ 
              function x_namesetter(value:srt):x_class {} // only declared, calls are mapped to the regular setProperty method in the back-end
            ]|
         
   get-fluent-setter-name(|x_field) = <concat-strings> [<property-setter-prefix-internal>,x_field]
