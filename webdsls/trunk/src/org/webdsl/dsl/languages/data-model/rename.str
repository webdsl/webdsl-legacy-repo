module org/webdsl/dsl/languages/data-model/rename

imports
  libstratego-lib
  libwebdsl-front
  org/webdsl/dsl/languages/data-model/declare
  org/webdsl/dsl/typechecker/-

rules

  rename-data :
    Entity(x_class, s, entbodydecs1){anno*} -> Entity(x_class, s, entbodydecs2){anno*}
    with  entbodydecs2 := <rename-entity-common(|x_class)> entbodydecs1

  rename-data :
    EntityNoSuper(x_class, entbodydecs1){anno*} -> EntityNoSuper(x_class, entbodydecs2){anno*}
    with  entbodydecs2 := <rename-entity-common(|x_class)> entbodydecs1

  rename-data :
    SessionEntity(nm, entbodydecs1){anno*} -> SessionEntity(nm, entbodydecs2){anno*}
    with  x_class := <capitalize-string> nm
        ; entbodydecs2 := <rename-entity-common(|x_class)> entbodydecs1
          
  rename-data :         
    ExtendSessionEntity(nm, entbodydecs1){anno*} -> ExtendSessionEntity(nm, entbodydecs2){anno*} 
    with  x_class := <capitalize-string> nm
        ; entbodydecs2 := <rename-entity-common(|x_class)> entbodydecs1

  rename-data :
    ExtendEntity(x_class, entbodydecs1){anno*} -> ExtendEntity(x_class, entbodydecs2){anno*} 
    with  entbodydecs2 := <rename-entity-common(|x_class)> entbodydecs1
          
  rename-entity-common(|x_class) :
    entbodydecs1 -> entbodydecs2
    with  {| Rename, InEntity, VarInTemplateContext:
            rules ( InEntity := x_class ) 
          ; y := <rename-bound-immutable(|SimpleSort(x_class))> "this"
          ; <declare-vars-in-entity-context> y
            // Get the rename rules for all properties in scope before renaming the entity functions, 
            // which can use the properties
          ; <all-entity-properties-tuples //assumes ordering from least specific to most specific entity, to correctly handle property override (currently only used for 'name')
             ; map(
                 (id,get-property-name)
               ; rename-property
               ; declare-vars-in-entity-context
               )> x_class
          ; entbodydecs2 := <rename-all> entbodydecs1
          ; <filter(store-property-annos)> entbodydecs2
         |}

  rename-property: (x_class, x) -> y
    with  y := <PropertyNameToUniqueName <+ !x{<prefix-rename(|x_class)> x}>
        ; sort := <PropertyDecl; get-property-type> (x_class, x)
        ; sort1 := <add-anno(|IsPropertyType())> sort
        ; xsa := <strip-annos> x
        ; rules(
            PropertyNameToUniqueName : (x_class, x) -> y
            Rename : Var(x) -> Var(y)
            Rename : Qualified(x, z) -> Qualified(y, z)
            TypeOf : y -> sort1
            IsEntPropGetEntName : y -> x_class
          )
        ; escapedname := <concat-strings> ["_",x]
        ; y1 := escapedname{y}
        ; rules( //don't add the new name in the generated code
             ExcludeFromVarRenaming : Var(y){anno*} -> Var(y1){anno*}
             ExcludeFromVarRenaming : Qualified(y, z){anno*} -> Qualified(y1, z){anno*}
           )
        
  // Store annos when they are renamed
  store-property-annos: prop -> prop
    where <?Property(x,_,_,annos) <+ ?DerivedProperty(x,_,_,annos,_)> prop
        ; InEntity => x_class
        ; rules(PropertyAnnos : (x_class, x) -> annos)
  