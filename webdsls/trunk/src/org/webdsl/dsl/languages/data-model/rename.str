module org/webdsl/dsl/languages/data-model/rename

rules

  rename-data :
    Entity(x_class, s, props1, funcs1) -> <declare-entity> Entity(x_class, s, props2, funcs2)
    with  (props2,funcs2) := <rename-entity-common(|x_class)> (props1,funcs1)

  rename-data :
    EntityNoSuper(x_class, props1, funcs1) -> <declare-entity> EntityNoSuper(x_class, props2, funcs2)
    with  (props2,funcs2) := <rename-entity-common(|x_class)> (props1,funcs1)

  rename-data :
    SessionEntity(nm, props1, funcs1) -> <declare-entity> SessionEntity(nm, props2, funcs2)
    with  x_class := <capitalize-string> nm
        ; (props2,funcs2) := <rename-entity-common(|x_class)> (props1,funcs1)
          
  rename-data :         
    ExtendSessionEntity(nm, props1, funcs1) -> <declare-extend-entity> ExtendSessionEntity(nm, props2, funcs2) 
    with  x_class := <capitalize-string> nm
        ; (props2,funcs2) := <rename-entity-common(|x_class)> (props1,funcs1)

  rename-data :
    ExtendEntity(x_class, props1, funcs1) ->  <declare-extend-entity> ExtendEntity(x_class, props2, funcs2) 
    with  (props2,funcs2) := <rename-entity-common(|x_class)> (props1,funcs1)
          
  rename-entity-common(|x_class) :
    (props1,funcs1) -> (props2,funcs2)
    with  {| Rename, InEntity, VarInTemplateContext:
            rules ( InEntity := x_class ) 
          ; y := <rename-bound(|SimpleSort(x_class))> "this"
          ; <declare-vars-in-entity-context> y
          ; <all-properties
             ; map(
                 get-property-name
               ; (PropertyNameToUniqueName <+ debug(!"error: undeclared property encountered");fail)
               ; declare-vars-in-entity-context
               )> x_class
          ; props2 := <rename-all> props1
          ; funcs2 := <rename-all> funcs1
         |}
