module org/webdsl/dsl/languages/data-model/rename

rules

  rename-data :
    Entity(x_class, s, entbodydecs1) -> <declare-entity> Entity(x_class, s, entbodydecs2)
    with  entbodydecs2 := <rename-entity-common(|x_class)> entbodydecs1

  rename-data :
    EntityNoSuper(x_class, entbodydecs1) -> <declare-entity> EntityNoSuper(x_class, entbodydecs2)
    with  entbodydecs2 := <rename-entity-common(|x_class)> entbodydecs1

  rename-data :
    SessionEntity(nm, entbodydecs1) -> <declare-entity> SessionEntity(nm, entbodydecs2)
    with  x_class := <capitalize-string> nm
        ; entbodydecs2 := <rename-entity-common(|x_class)> entbodydecs1
          
  rename-data :         
    ExtendSessionEntity(nm, entbodydecs1) -> <declare-extend-entity> ExtendSessionEntity(nm, entbodydecs2) 
    with  x_class := <capitalize-string> nm
        ; entbodydecs2 := <rename-entity-common(|x_class)> entbodydecs1

  rename-data :
    ExtendEntity(x_class, entbodydecs1) ->  <declare-extend-entity> ExtendEntity(x_class, entbodydecs2) 
    with  entbodydecs2 := <rename-entity-common(|x_class)> entbodydecs1
          
  rename-entity-common(|x_class) :
    entbodydecs1 -> entbodydecs2
    with  {| Rename, InEntity, VarInTemplateContext:
            rules ( InEntity := x_class ) 
          ; y := <rename-bound(|SimpleSort(x_class))> "this"
          ; <declare-vars-in-entity-context> y
          ; <all-entity-properties-tuples
             ; map(
                 (id,get-property-name)
               ; (PropertyNameToUniqueName <+ debug(!"error: undeclared property encountered");fail)
               ; declare-vars-in-entity-context
               )> x_class
          ; entbodydecs2 := <rename-all> entbodydecs1
         |}
