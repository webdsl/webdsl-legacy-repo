module org/webdsl/dsl/languages/ajax/desugar
   
imports
  libstrategolib  
  libwebdsl-front

rules //desugar InlineAction

  find-lifting-params =
    ?v@Var(x)
    ; not(<IgnoreVars> v)
    ; not("Component" := <type-of> v)
    ; rules( Param :+= v )
    ; rules( IgnoreVars : v )

  desugar-ajax : 
    Define(mods, name, args, targs, elems) -> Define(mods, name, args, targs, <rename-all> elems1)
    where not(<RemovedInlineTemplateCalls> name)
    with rules( RemovedInlineTemplateCalls : name )
       ; {| InsertedTemplates
          : elems1 := <alltd(desugar-inline-template-call)> elems
         |}

  desugar-inline-template-call :
    InlineTemplateCall(e1) -> TemplateCall(template, params,[], TemplateBody([
      TemplateCallNoArgs("elements")//,[],[],TemplateBody([])) //make elements() usable in inline templates
    ])) //add bound variables? 
    where (action := "replace" <+ theaction := "append") 
    with  template := <newname> "inline_template" 
        ; {| Param, IgnoreVars
           : <alltd(find-lifting-params)> e1
           ; params := <bagof-Param>
          |}
        ; farg* := <map(lifting-param-to-farg)> params
        ; <emit-webdsl-code> Define([], template, farg*, None(), e1)
        
  desugar-ajax :
    Placeholder(name, elems) -> TemplateCall("container", [], [PropertyAssignment("id",name)], TemplateBody(elems))
    
  //desugar event templatcall to rawoutput of eventcall expression
  desugar-ajax :
    EventCallElement(x1,e2*) -> 
      TemplateCallBody("rawoutput",TemplateBody([TemplateCallNoBody("output",[EventCall(x1,e2*)])]))
      
