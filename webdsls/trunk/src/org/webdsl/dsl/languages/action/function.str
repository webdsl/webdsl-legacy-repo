module org/webdsl/dsl/languages/action/function

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/generation/webdsl-generator

strategies

  /*
    Care has to be taken to rename all cases: global function calls can be inside entity functions,
      and entity function calls can be inside global functions.
    Also, entity functions and global functions can have the same name, but not all may have to be renamed.
  */ 

  // @TODO: Rename this strategy
  aggregate-and-combine-functions =
    ?app@Application(qid, sections)
    ; globalfuncs := <collect(\ Section(_,defs) -> <filter(?Function(_, _, _, _))> defs \) ;concat> sections
    ; overloadedentityfuncs := <collect(find-entity-functions);concat> sections
    ; rules ( RenamedEntityFunctions := overloadedentityfuncs )
    ; overloadedglobalfuncs := <map(\ Function(nm, _, _, _) -> nm \); find-doubles; make-set> globalfuncs
    ; sections2 := <rename-all-overloaded-functions(|overloadedglobalfuncs,overloadedentityfuncs)> sections
    ; !Application(qid, sections2)
      
  rename-all-overloaded-functions(|globalnames,entitynames) =
      alltd(rename-overloaded-global-function(|globalnames,entitynames) <+ rename-overloaded-entity-function(|globalnames,entitynames)) 

  
  find-entity-root = find-entity-root(|[])
  
  find-entity-root(|alreadychecked) :
    srt -> srt
    where <fetch(?srt)> alreadychecked //prevent loop on invalid input 'entity Xyz:Xyz'
  
  find-entity-root(|alreadychecked) =
    ?srt
    ; Extends
    ; where(not(<fetch(?srt)> alreadychecked))
    ; if ?"Entity" then
        !srt
      else
        find-entity-root(|[srt|alreadychecked])
      end

  find-entity-root(|alreadychecked) =
    ?srt
    ; not(Extends)


  find-entity-functions :
    Entity(ent, _, entbodydecs) -> result
    with result := <filter(\ Function(nm, _, _, _) -> (<find-entity-root> ent, nm) \); find-doubles> entbodydecs

  find-entity-functions :
    EntityNoSuper(ent, entbodydecs) -> result
    with result := <filter(\ Function(nm, _, _, _) -> (ent, nm) \); find-doubles> entbodydecs

rules // resolving
  
  resolve-function-call-to-decl: p@(None(), fname, t*) -> f
    where targ-resolved* := <resolve-function-call(bagof-CheckGlobalFunctionSignatureArgumentTypes | t*, fname)> p
        ; f := <FunctionDecl> (fname, targ-resolved*)
  
  resolve-function-call-to-decl: p@(SimpleSort(x_class), fname, t*) -> f
    where targ-resolved* := <resolve-function-call(bagof-CheckFunctionSignatureArgumentTypes | t*, fname)> p
        ; f := <EntityFunctionDecl> (x_class, fname, targ-resolved*)
  
  resolve-function-call(get-all-fargs | t_target, fname): sig -> targ_result*
    where listof-t_arg* := <get-all-fargs> sig
        ; not(?[])  // fail if no results (could be built-in function)
        ; n := <length> listof-t_arg*
        ; if 1 := n then
              // This also resolves the case in which the formal arg types and passed arg types are 'compatible' but not in the same type hierarchy;
              // like String and WikiText
              targ_result* := <Hd> listof-t_arg*
          else
              targ_result* := <find-most-specific-signature(|t_target, fname)> listof-t_arg*
            <+
              // multiple possible arg types which are related, but no particular one chosen by find-most-specific-signature
              <error-in-overload-resolution-multiple> (fname,listof-t_arg*)
            ; targ_result := <Hd> listof-t_arg*
         end

rules	// rename entity functions (keep looking for global calls inside the entity and its functions)

  rename-overloaded-entity-function(|torename_global,torename_entity) :
    Entity(ent, s, entbodydecs){anno*} -> Entity(ent, s, [prop1*,fun2*]){anno*}
    with  fun1*  := <filter(is-function-cons)> entbodydecs
        ; prop1* := <filter(is-property-cons)> entbodydecs
        ; {| ThisEntity
          : rules( ThisEntity := ent )
          ; fun2* := <with-toplevel-name(rename-all-overloaded-functions(|torename_global,torename_entity) | ent)> fun1*
          |}

  rename-overloaded-entity-function(|torename_global,torename_entity) :
    EntityNoSuper(ent, entbodydecs){anno*} -> EntityNoSuper(ent, [prop1*,fun2*]){anno*}
    with  fun1*  := <filter(is-function-cons)> entbodydecs
        ; prop1* := <filter(is-property-cons)> entbodydecs
        ; {| ThisEntity
          : rules( ThisEntity := ent )
          ; fun2* := <with-toplevel-name(rename-all-overloaded-functions(|torename_global,torename_entity) | ent)> fun1*
          |}

  rename-overloaded-entity-function(|torename_global,torename_entity) :
    Function(nm, farg*, rt, b){anno*} -> fun
    where <elem> ((<ThisEntity; find-entity-root>, nm), torename_entity)
    with nm2 := <new-function-name> (nm, <map(\ Arg(_, srt) -> srt \)> farg*)
       ; b2 := <rename-all-overloaded-functions(|torename_global,torename_entity)> b
       ; fun := Function(nm2, farg*, rt, b2){anno*}
       ; <declare-function(|<ThisEntity>)> fun

  rename-overloaded-entity-function(|torename_global,torename_entity) :
    Call(e, nm, arg*){anno*} -> Call(e, nm2, arg*){anno*}
    where SimpleSort(ent) := <type-of> e
        ; <elem> ((<find-entity-root> ent, nm), torename_entity)
    with  nm2 := <resolve-entity-call; function-decl-to-newname> (ent, nm, <map(type-of)> arg*)
        
  rename-overloaded-entity-function(|torename_global,torename_entity) :
    ThisCall(nm, arg*) -> result
    where ent := <ThisEntity>
        ; <CheckFunctionSignature> (SimpleSort(ent), nm, <map(type-of)> arg*) // is call to member function of this entity
        ; <elem> ((<find-entity-root> ent, nm), torename_entity)
    with  nm2 := <resolve-entity-call; function-decl-to-newname> (ent, nm, <map(type-of)> arg*)
        ; {| Rename:
            <rename-bound(|SimpleSort(ent))> "this"
          ; result := Call(<rename-all> Var("this"),nm2,arg*)
          |}

  function-decl-to-newname: Function(nm,farg*,_,_) -> <new-function-name> (nm, <map(farg-to-type)> farg*)

  // Resolve entity function by traversing supertypes
  resolve-entity-call: (ent, nm, targ*) -> f
    with f := <resolve-function-call-to-decl> (SimpleSort(ent), nm, targ*)
      <+ f := <resolve-entity-call> (<Extends> ent, nm, targ*)
  
rules // rename overloaded global functions

  rename-overloaded-global-function(|torename_global,torename_entity) :
    Function(nm, farg*, rt, b){anno*} -> fun
    where <elem> (nm, torename_global)
        ; not(ThisEntity)		// don't rename entity function, even when global variant is overloaded 
    with nm2 := <new-function-name> (nm, <map(\ Arg(_, srt) -> srt \)> farg*)
       ; b2 := <rename-all-overloaded-functions(|torename_global,torename_entity)> b
       ; fun := Function(nm2, farg*, rt, b2){anno*}
       ; <declare-global-func> fun

  rename-overloaded-global-function(|torename_global,torename_entity) :
    tc@ThisCall(nm, arg*){anno*} -> ThisCall(nm2, arg*){anno*}
    where <elem> (nm, torename_global)
          // is not an entity function call
        ; not(<CheckFunctionSignature> (SimpleSort(<ThisEntity>), nm, <map(type-of)> arg*))
    with  nm2 := <resolve-function-call-to-decl; function-decl-to-newname> (None(), nm, <map(type-of)> arg*)

rules // renaming

  new-function-name :
    (nm, argtypes) -> nm2
    with extra := <map(sort-to-string)> argtypes
         ; nm2 := <concat-strings> [nm, <separate-by(|"_"); concat-strings> extra]

  // also allow new-function-name on formal arguments
  sort-to-string :
    Arg(_, srt) -> <sort-to-string> srt

  sort-to-string :
    SimpleSort(x) -> x

  sort-to-string :
    GenericSort(t, [t2]) -> <concat-strings> [t, "_", <sort-to-string> t2]

rules

  get-toplevel-name = ?Function(<id>, _, _, _)
  get-toplevel-name = ?FunctionNoReturn(<id>, _, _)
