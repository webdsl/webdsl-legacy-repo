module org/webdsl/dsl/languages/action/for-stmt

imports
  libstrategolib

imports
  libwebdsl-front

rules

  rename-action :
    fs@ForStmt(x, srt, e1, f1, b1){anno*} -> ForStmt(y, srt2, e2, f2, b2){anno*}
    with e2 := <rename-all> e1
       ; {| Rename, VarInTemplateContext
          : srt2 := <rename-all> srt
          ; y := <rename-bound-immutable(|srt2)> x
          ; rules(VarDecl : y -> fs)
          ; <declare-vars-in-entity-context> y
          ; f2 := <rename-all> f1
          ; b2 := <rename-all> b1
          |}
          
  rename-action :
    fs@ForStmtInferred(x, e1, f1, b1){anno*} -> ForStmtInferred(y, e2, f2, b2){anno*}
    with e2 := <rename-all> e1
       ; {| Rename, VarInTemplateContext
          : ((GenericSort(_,[srt]) := <type-of;add-immutable-anno> e2) <+ srt := "unknown")
            // type-of can fail if the expression cannot be typed, in that case the for loop var will not be declared and constraint error triggers
            // add ImmutableReference annotation, because x will not be assignable even if e was
          ; y := <rename-bound-immutable(|srt)> x
          ; rules(VarDecl : y -> fs)
          ; <declare-vars-in-entity-context> y
          ; f2 := <rename-all> f1
          ; b2 := <rename-all> b1
          |}

  desugar-action :
    fs@ForStmtInferred(x, e, f, b){anno*} -> ForStmt(x, srt, e, f, b){anno*}
    with GenericSort(_,[srt]) := <type-of; add-immutable-anno> e //add ImmutableReference annotation, because x will not be assignable even if e was

  rename-action :
    fs@ForAllStmt(x, srt, f1, b1){anno*} -> ForAllStmt(y, srt2, f2, b2){anno*}
    with {| Rename, VarInTemplateContext
          : srt2 := <rename-all> srt
          ; y := <rename-bound-immutable(|srt2)> x
          ; rules(VarDecl : y -> fs)
          ; <declare-vars-in-entity-context> y
          ; f2 := <rename-all> f1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    fs@ForCountStmt(x, e1, e2, b1){anno*} -> ForCountStmt(y, e3, e4, b2){anno*}
    with e3 := <rename-all> e1
       ; e4 := <rename-all> e2
       ; {| Rename, VarInTemplateContext
          : y := <rename-bound-immutable(|SimpleSort("Int"))> x
          ; rules(VarDecl : y -> fs)
          ; <declare-vars-in-entity-context> y
          ; b2 := <rename-all> b1
          |}

  add-backend-annotation :
    def@ForAllStmt(_, SimpleSort(x_class), _, _){anno*} -> def{CachedEntity(), anno*}
    where not(<fetch-elem(?CachedEntity())> anno*)
    ; <is-cached-entity> x_class

rules

  constraint-error-action : ForCountStmt(x, e1, e2, b) -> <expression-type-constraint(|SimpleSort("Int"))> e1
  constraint-error-action : ForCountStmt(x, e1, e2, b) -> <expression-type-constraint(|SimpleSort("Int"))> e2

  expression-type-constraint(|type) :
    e -> <add-error(|["Expression should be of type ",typename])>
    with  SimpleSort(typename) := type
    where not(<type-compatible> (type, <type-of> e))

  constraint-error-action : ForStmt(_, srt, e, _, _)      -> <for-constraint-error(|srt, e)>
