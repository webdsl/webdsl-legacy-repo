module org/webdsl/dsl/languages/action/object-creation-exp

imports
  libstrategolib
  libwebdsl-front
  org/webdsl/dsl/transformation/emit
  org/webdsl/dsl/typechecker/error
  org/webdsl/dsl/typechecker/utils
  org/webdsl/dsl/languages/data-model/declare

rules

  constraint-error-action =
     constraint-error-action-object-creation-genericsort
  <+ constraint-error-action-object-creation-built-in
  <+ constraint-error-action-object-creation-generic
  
  constraint-error-action-object-creation-genericsort :
    oc@ObjectCreation(s@GenericSort(_,_),[propassign*]) -> 
      <add-error(|["Object creation syntax is not allowed for generic types, use Set<type>() or List<type>() instead."])>
    
  constraint-error-action-object-creation-built-in :
    oc@ObjectCreation(s@SimpleSort(x_class),[propassign*]) -> 
      <add-error(|["Cannot instantiate built-in type '",x_class,"'"])>
    where <is-builtin-type> s
    
  constraint-error-action-object-creation-generic :
    oc@ObjectCreation(s,[propassign*]) -> 
      <add-error(|["Entity object instantiation syntax is only supported for entity types, found type: '",<pp-type> s,"'"])>
    where not(<is-entity-type> s)
       
rules

  constraint-error-action :
    oc@ObjectCreation(SimpleSort(x_class),[propassign*]) -> oc //<add-error(|["Error in object creation of class '",x_class,"'"])> 
    where <fetch(check-object-creation-property-assignment-1(|x_class))> propassign*
       <+ <fetch(check-object-creation-property-assignment-2(|x_class))> propassign*

  check-object-creation-property-assignment-1(|x_class) :
    ObjectPropertyAssignment(ident,exp) -> <add-error(|["Entity '",x_class,"' does not contain a property '",ident,"'"])> 
    where not(<type-of-property> (x_class,ident))

  check-object-creation-property-assignment-2(|x_class) :
    ObjectPropertyAssignment(ident,exp) -> <add-error(|["Type of expression '",srt_exp,"' is incompatible with type of entity property '",srt_prop,"'"])> 
    where srt_prop := <type-of-property> (x_class,ident)
        ; srt_exp := <type-of> exp
        ; not(<type-compatible> (srt_prop,srt_exp))

rules        

  eq-type-of-action :
    ObjectPropertyAssignment(y, e) -> SimpleSort("Void") //<type-of> y
    
  eq-type-of-action :
    ObjectCreation(s, assign*) -> s

rules

  constraint-error-action:
    Stat(ObjectCreation(_,_)) -> <add-error(|["Not a valid statement."])> 

rules
        
  rename-action : 
    ObjectCreation(srt, assigns){anno*} 
  ->ObjectCreation(srt, assigns1){anno1*} 
    with {| ObjectCreationType: 
           (SimpleSort(entname) := srt; rules(ObjectCreationType := entname) <+ rules(ObjectCreationType := "Unknown") )
         ; anno1* := <put-closure-in-anno> anno*
         ; assigns1 := <rename-all> assigns
         |}

  rename-action: 
    ObjectPropertyAssignment(x,y){anno*} -> ObjectPropertyAssignment(x,y1){ObjectCreationTypeAnno(<ObjectCreationType>),anno*}
    with  y1 := <rename-all> y
  // fallback rule needed for code completion:
  rename-action: 
    IncompleteObjectPropertyAssignment(x){anno*} -> IncompleteObjectPropertyAssignment(x){ObjectCreationTypeAnno(<ObjectCreationType>),anno*}
    
  signature constructors ObjectCreationTypeAnno : Term -> Term

signature
  constructors
    ObjectCreationSecretTypesNeedDigests : Term

rules

  desugar-action = ?ObjectCreation(_,_); desugar-object-cr-exp
  
  desugar-object-cr-exp :
    ObjectCreation(srt@SimpleSort(x_class), assigns){anno*} -> result
    where <not([])> assigns <+ <does-object-cr-have-constructor-extensions> x_class   // if there are no property assignments or constructor extensions, use simpler rule below instead
    where <not(fetch(ObjectCreationSecretTypesNeedDigests))> anno*
    with  x_fun := <toplevel-rename> "objCr"
        ; (arg*,farg*) := <get-args-fargs-from-closure-in-anno-filtered> (anno*, assigns)
        ; farg2* := <map(\ Arg(x, srt{srtanno*}){anno*} -> Arg(x, srt{<remove-all(?IsPropertyType())>srtanno*}){anno*} \)> farg*
        ; x_empty := $[createEmpty[<capitalize-string> x_class]]
        ; e_start := <desugar-object-cr-constructorcalls-exp(|x_class, ThisCall(x_empty,[]))>
        ; e_setters :=  <desugar-object-cr-prop-assign-exp(|x_class,assigns,e_start)>
        ; result := <rename-all> e_setters

  desugar-object-cr-exp :
    ObjectCreation(srt@SimpleSort(x_class), []) -> result
    where not(<does-object-cr-have-constructor-extensions> x_class)
    with  x_empty := $[createEmpty[<capitalize-string> x_class]]
        ; result := <rename-all> ThisCall(x_empty, [])
    
  desugar-object-cr-prop-assign-exp(|x_class,assigns,e_start) :
    _ -> e_result
    with e_result := <foldr(!e_start, setter-fold-helper(|x_class))> assigns
    
  setter-fold-helper(|x_class) :
    (ObjectPropertyAssignment(x_field, e1),e) -> exp|[ e.x_namesetter(e1) as x_class ]|
    where srt := <type-of-property> (x_class, x_field)
        ; <not(is-generic-sort)> srt
    with  x_namesetter := <get-fluent-setter-name(|x_field)>
    
  setter-fold-helper(|x_class) :
    (ObjectPropertyAssignment(x_field, e1),e) -> exp|[ e.x_namesetter(e1) as x_class ]|
    where srt := <type-of-property> (x_class, x_field)
        ; <is-generic-sort> srt
    with  x_namesetter := <get-fluent-collection-replace-name(|x_field)>

  desugar-object-cr-constructorcalls-exp(|x_class, e_start) :
    _ -> e_result
    with  ent* := <defined-superclasses> x_class
        ; allent* := [x_class|ent*]
        ; e_result := <foldr(!e_start, obj-creation-constructor-hook-fold-helper(|x_class))> allent*
   
  obj-creation-constructor-hook-fold-helper(|x_class) : 
    (y,e) -> exp|[ e.x_nameconsfluent() as x_class ]|
    with  x_nameconsfluent := <get-constructor-event-fluent-fun-name(|y)>
    
  does-object-cr-have-constructor-extensions:
    x -> <id>
    with  ent* := <defined-superclasses> x
        ; allent* := <reverse> [x|ent*]
    where <fetch(where(!(<id>,<id>);IsExtendedEntityFunction))> allent*

rules 

  keep-position-anno = ?ObjectCreation(_,_) 

rules
  // desugaring for secret type in global var property init, digest is called on these properties

  desugar-action :
    ObjectCreation(srt@SimpleSort(x_class), assigns){anno*} -> result
    where <fetch(ObjectCreationSecretTypesNeedDigests)> anno*
    with  assigns1 := <map(try(desugar-object-cr-global-var-secret-prop(|x_class)))> assigns
        ; anno1* := <remove-all(ObjectCreationSecretTypesNeedDigests)> anno*
        ; result := ObjectCreation(srt, assigns1){anno1*}
            
  desugar-object-cr-global-var-secret-prop(|x_class):
    ObjectPropertyAssignment(x_field, e1) -> result
    where SimpleSort("Secret") := <TypeOfProperty> (x_class,x_field)
    with  result := ObjectPropertyAssignment(x_field, Call(Cast(e1,SimpleSort("Secret")),"digest",[]))
    