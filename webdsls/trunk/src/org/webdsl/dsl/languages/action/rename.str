module org/webdsl/dsl/languages/action/rename

rules

  rename-action :
    VarDecl(x, srt) -> VarDecl(y, srt2)
    with  srt2 := <rename-all> srt 
        ; y := <rename-bound(|srt2)> x

  rename-action :
    v@VarDeclInit(x, srt, e) -> VarDeclInit(y, srt2, e')
    where InDef
    with  srt2 := <rename-all> srt
        ; e' := <rename-all> e
        ; y := <rename-bound(|srt2)> x
        
  rename-action :
    v@VarDeclInitInferred(x, e) -> VarDeclInitInferred(y, e')
    where InDef
    with  e' := <rename-all> e
        ; srt := <type-of> e'
        ; y := <rename-bound(|srt)> x

  rename-action :
    v@VarDeclInit(x, srt, e) -> VarDeclInit(x, srt, e')
    where not(InDef)//needed for inital rename
        ; not(IsGlobal)//needed for rename from model-to-model innermost without context
    with e' := <rename-all> e
       ; rules ( TypeOf : x -> srt )
       ; rules ( IsGlobal : x )
       
  rename-action :
    v@VarDeclInitInferred(x, e) -> VarDeclInitInferred(x, e')
    where not(InDef)//needed for inital rename
        ; not(IsGlobal)//needed for rename from model-to-model innermost without context
    with e' := <rename-all> e
       ; srt := <type-of> e'
       ; rules ( TypeOf : x -> srt )
       ; rules ( IsGlobal : x )
  
   rename-action :
     s@SimpleSort(_) -> s2
     with  s3 := <rename-type> s
         ; s2 := <rename-sort-for-generic> s3
         
   rename-action :
     GenericSort(g, types) -> GenericSort(g, types2)
     where not( g := "SDFInput")
     with  types2 := <rename-all> types

   rename-action :
    Block(stat1*) -> Block(stat2*)
    with {| Rename
          : stat2* := <rename-all> stat1*
          |}
  rename-action :
    Function(x, args1, srt, b1) -> <declare-global-func <+ debug> Function(x, args2, srt, b2)
    where not(InEntity)
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    FunctionNoReturn(x, args1, b1) -> <declare-global-func <+ debug> FunctionNoReturn(x, args2, b2)
    where not(InEntity)
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    Function(x, args1, srt, b1) -> Function(x, args2, srt, b2)
    where InEntity
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    FunctionNoReturn(x, args1, b1) -> FunctionNoReturn(x, args2, b2)
    where InEntity
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}
  rename-action :
    ForStmt(x, srt, e1, f1, b1) -> ForStmt(y, srt2, e2, f2, b2)
    with e2 := <rename-all> e1
       ; {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; f2 := <rename-all> f1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    ForStmtNoFilter(x, srt, e1, b1) -> ForStmtNoFilter(y, srt2, e2, b2)
    with e2 := <rename-all> e1
       ; {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; b2 := <rename-all> b1
          |}

  rename-action :
    ForAllStmt(x, srt, f1, b1) -> ForAllStmt(y, srt2, f2, b2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; f2 := <rename-all> f1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    ForAllStmtNoFilter(x, srt, b1) -> ForAllStmtNoFilter(y, srt2, b2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; b2 := <rename-all> b1
          |}

  rename-action :
    ForExp(oe1, x, srt, ie1, f1) -> ForExp(oe2, y, srt2, ie2, f2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; oe2 := <rename-all> oe1
          ; f2 := <rename-all> f1
          |}
       ; ie2 := <rename-all> ie1

  rename-action :
    ForExpNoFilter(oe1, x, srt, ie1) -> ForExpNoFilter(oe2, y, srt2, ie2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; oe2 := <rename-all> oe1
          |}
       ; ie2 := <rename-all> ie1

  rename-action :
    ForCountStmt(x, e1, e2, b1) -> ForCountStmt(y, e3, e4, b2)
    with e3 := <rename-all> e1
       ; e4 := <rename-all> e2
       ; {| Rename
          : y := <rename-bound(|SimpleSort("Int"))> x
          ; b2 := <rename-all> b1
          |}

  rename-action :
    Arg(x, srt) -> Arg(y, srt2)
    with srt2 := <rename-type> srt
       ; y := <rename-bound(|srt2)> x
