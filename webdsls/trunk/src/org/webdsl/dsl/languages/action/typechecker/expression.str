module org/webdsl/dsl/languages/action/typechecker/expression

imports
  libstrategolib

imports
  libwebdsl-front

signature
  constructors
    Op : String -> Annotation
 
rules // typechecking expressions

  constraint-error-action :
    Var(x) -> <add-error(|["Variable '", x, "' not defined"])>
    where not(type-of)

  eq-type-of-action :
    Var(x) -> <TypeOf> x
  eq-type-of-action :
    ExternalScopeVar(x) -> <TypeOf> x
  
  eq-type-of-action = is-string; <TypeOf> Var(<id>)
  
  constraint-error-action : 
    Cast(e, s) -> <add-error(|["Cannot cast ", <pp-webdsl> e, " to type ", <pp-webdsl> s])>
    where not(type-of)
        ; not(<?HqlQuery(_)> e) //disabled cast check on queries to allow working around current lack of type analysis in queries
        ; <type-of> e // don't report cascaded error, e should have valid type

  eq-type-of-action:
    Cast(e, s) -> s
    where <type-compatible> (s, <type-of> e) //cast up
       <+ <type-compatible> (<type-of> e, s) //cast down
       <+ <generic-cast-compatible> (s, <type-of> e) //fix for entity generics

  eq-type-of-action :
    Assignment(y, e) -> SimpleSort("Void") //<type-of> y
    
  eq-type-of-action :
    PropertyAssignment(y, e) -> SimpleSort("Void") //<type-of> y
    
  eq-type-of-action = type-of-qualified
  
  type-of-qualified :
    Qualified(x,y) -> <type-of-property> (<type-of-qualified> x, y)
    where <?Qualified(_,_)> x

  type-of-qualified :
    Qualified(x,y) ->  <type-of-property> (<TypeOf;?SimpleSort(<id>)> x, y)
    where not(<?Qualified(_,_)> x)
    
  constraint-error-action :
    FieldAccess(e, f) -> <add-error(|["No property ", f, " defined for ",<type-of<+!"type unknown"> e])>
    where not(type-of)
        ; <type-of> e // don't report cascaded error, e should have valid type

  eq-type-of-action :
    FieldAccess(e, f) -> <type-of-property> (x_class, f)
    where SimpleSort(x_class) := <type-of> e
    
  eq-type-of-action :
    FieldAccess(e, f) -> <type-of> Var(f)
    where "Component" := <type-of> e

  eq-type-of-action :
    InColl(e1, e2) -> SimpleSort("Bool")
    where t := <type-of> e1
        ; GenericSort(_, [lt]) := <type-of> e2
        ; <type-compatible> (lt, t)

  constraint-error-action :
    InColl(e1, e2) -> <add-error(|["Expression ", <pp-webdsl> e1, " has wrong type"])>
    where not(type-of)
        ; <type-of> e1 ; <type-of> e2 // don't report cascaded errors, e1 and e2 should have valid types

  typecheck-binop :
    (op, [e1, e2]) -> t
    where t := <check-signature> (None(), op, [e1, e2])
        
  check-operator-signature : (None(), Op("Add"), [t1, t2]) -> t3 where <type-compatible> (t1, t2); t3 := t1
                                                                    <+ <type-compatible> (SimpleSort("String"),t1); t3 := SimpleSort("String") //all types can be converted to strings implicitly
                                                                    <+ <type-compatible> (SimpleSort("String"),t2); t3 := SimpleSort("String")
  check-operator-signature : (None(), Op("Sub"), [SimpleSort("Int"), SimpleSort("Int")]) -> SimpleSort("Int")
  check-operator-signature : (None(), Op("Sub"), [SimpleSort("Float"), SimpleSort("Float")]) -> SimpleSort("Float")
  check-operator-signature : (None(), Op("Sub"), [SimpleSort("Long"), SimpleSort("Long")]) -> SimpleSort("Long")
  check-operator-signature : (None(), Op("Mul"), [SimpleSort("Int"), SimpleSort("Int")]) -> SimpleSort("Int")
  check-operator-signature : (None(), Op("Mul"), [SimpleSort("Float"), SimpleSort("Float")]) -> SimpleSort("Float")
  check-operator-signature : (None(), Op("Mul"), [SimpleSort("Long"), SimpleSort("Long")]) -> SimpleSort("Long")
  check-operator-signature : (None(), Op("Div"), [SimpleSort("Int"), SimpleSort("Int")]) -> SimpleSort("Int")
  check-operator-signature : (None(), Op("Div"), [SimpleSort("Float"), SimpleSort("Float")]) -> SimpleSort("Float")
  check-operator-signature : (None(), Op("Div"), [SimpleSort("Long"), SimpleSort("Long")]) -> SimpleSort("Long")
  check-operator-signature : (None(), Op("Mod"), [SimpleSort("Int"), SimpleSort("Int")]) -> SimpleSort("Int")
  check-operator-signature : (None(), Op("Mod"), [SimpleSort("Long"), SimpleSort("Long")]) -> SimpleSort("Long")
  check-operator-signature : (None(), Op("Eq"), [t, t2]) -> SimpleSort("Bool") where <type-compatible> (t, t2)
  check-operator-signature : (None(), Op("NotEq"), [t, t2]) -> SimpleSort("Bool") where <type-compatible> (t, t2)
  check-operator-signature : (None(), Op("SmallerThan"), [t, t2]) -> SimpleSort("Bool") where <type-compatible> (t, t2)

  check-operator-signature : (None(), Op("SmallerThanOrEqual"), [t, t2]) -> SimpleSort("Bool") where <type-compatible> (t, t2)

  check-operator-signature : (None(), Op("LargerThan"), [t, t2]) -> SimpleSort("Bool") where <type-compatible> (t, t2)

  check-operator-signature : (None(), Op("LargerThanOrEqual"), [t, t2]) -> SimpleSort("Bool") where <type-compatible> (t, t2)

  check-operator-signature : (None(), Op("And"), [SimpleSort("Bool"), SimpleSort("Bool")]) -> SimpleSort("Bool")
  check-operator-signature : (None(), Op("Or"), [SimpleSort("Bool"), SimpleSort("Bool")]) -> SimpleSort("Bool")
  
  constraint-error-action :
    x@c#([e1, e2]) -> <add-error(|["Wrong operand types for operator ", c, ": ", <pp-webdsl> e1, " has type ",<type-of<+!"type unknown"> e1, ",", <pp-webdsl> e2, " has type ",<type-of<+!"type unknown"> e2])>
    where <elem> (c, ["Add", "Sub", "Mul", "Div", "Mod", "Eq", "NotEq", "SmallerThan", "SmallerThanOrEqual", "LargerThan", "LargerThanOrEqual", "And", "Or"])
        ; not(<type-of> x)
        ; <type-of> e1 ; <type-of> e2 // don't report cascaded errors, e1 and e2 should have valid types
        
  eq-type-of-action :
    c#([e1, e2]) -> t
    where not("IsA" := c)
        ; t := <typecheck-binop> (Op(c), [e1, e2])
  
  constraint-error-action :
    Not(e) -> <add-error(|[<pp-webdsl> e, " is not of type Bool"])>
    where not(type-of)
        ; <type-of> e // don't report when sub-expression was already wrong

  eq-type-of-action :
    Not(e) -> SimpleSort("Bool")
    where SimpleSort("Bool") := <type-of> e

  eq-type-of-action :
    IsA(e, s) -> SimpleSort("Bool")
    where <is-webdsl-type> s
        ; <type-of> e

  constraint-error-action :
    HqlQuery(q) -> <add-error(|["Type error in query ", <pp-webdsl> q])>
    where not(type-of)

  eq-type-of-action :
    HqlQuery(q) -> <type-of-query> q

  eq-type-of-action :
    HqlQueryLimit(q, l) -> <type-of-query> q

  eq-type-of-action :
    HqlQueryLimitOffset(q, o, l) -> <type-of-query> q

rules // signature

  check-signature :
    (t3, f, e*) -> t
    where t* := <map(type-of; strip-annos)> e* //strip-annos needed, e.g. IsRefSort() anno could cause match to fail
        ; t := <check-signature-aux> (t3, f, t*)

  check-signature-aux =
    CheckActionSignature
    <+ check-operator-signature
    <+ check-function-signature
    <+ CheckPageSignature
    <+ CheckGlobalFunctionSignature
    <+ CheckGeneratedGlobalFunctionSignature
    <+ check-builtin-signature
    <+ check-ref-argument-entity-access-sig

  check-function-signature = strip-annos; CheckFunctionSignature

  check-function-signature :
    (SimpleSort(s), f, args) -> <check-function-signature> (SimpleSort(<Extends> s), f, args)
