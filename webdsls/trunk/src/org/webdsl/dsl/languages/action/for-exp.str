module org/webdsl/dsl/languages/action/for-exp

imports
  libstrategolib

imports
  libwebdsl-front

signature
  constructors
    ClosureInAnno : List(Exp) -> Annotation

rules

  normalize-action :
    ForExpNoFilter(oe, x, s, ie){anno*} -> ForExp(oe, x, s, ie, Filter(True(), OrderAscending(Null()), Limit(Int("1000"), Int("0")))){anno*}

rules

  rename-action :
    ForExp(oe1, x, srt, ie1, f1){anno*} -> ForExp(oe2, y, srt2, ie2, f2){anno1*}
    with  anno1* := <put-closure-in-anno> anno*
        ; {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; oe2 := <rename-all> oe1
          ; f2 := <rename-all> f1
          |}
        ; ie2 := <rename-all> ie1

  rename-action :
    ForExpNoFilter(oe1, x, srt, ie1){anno*} -> ForExpNoFilter(oe2, y, srt2, ie2){anno1*}
    with  anno1* := <put-closure-in-anno> anno*
        ; {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; oe2 := <rename-all> oe1
          |}
        ; ie2 := <rename-all> ie1
        
  rename-action :
    AndForExp(e1){anno*} -> AndForExp(e2){anno1*}
    with  anno1* := <put-closure-in-anno> anno*
        ; e2 := <rename-all> e1

  rename-action :
    OrForExp(e1){anno*} -> OrForExp(e2){anno1*}
    with  anno1* := <put-closure-in-anno> anno*
        ; e2 := <rename-all> e1

rules

  put-closure-in-anno :
    anno* -> anno1*
    with  // collect variables for for expression closure, similar to elements/with templatecall ui/templatecall.str
          oldvars := <fetch-elem(?ClosureInAnno(<id>)) <+ ![]> anno*
        ; if InTemplate <+ InPage 
          then vars := <bigbagof-VarInTemplateContext> //whole def renamed, collect environment
          else vars := <rename-all> oldvars //only this part renamed, only apply rename
          end
        ; anno1* := [ClosureInAnno(vars)|anno*]
        
  get-closure-from-anno :
    anno* -> params
    with  params := <fetch-elem(?ClosureInAnno(<id>)) <+ ![]> anno*
          //if not renamed/no closure in annotation, assume nothing in scope/empty closure (<+ ![])
          
  get-args-fargs-from-closure-in-anno :
    anno* -> (arg*,farg*)
    with  arg* := <get-closure-from-anno> anno*
        ; farg* := <map(lifting-param-to-farg)> arg*
        
rules

  eq-type-of-action :
    AndForExp(fe) -> SimpleSort("Bool")
    where GenericSort(_, [SimpleSort("Bool")]) := <type-of> fe
    
  eq-type-of-action :
    OrForExp(fe) -> SimpleSort("Bool")
    where GenericSort(_, [SimpleSort("Bool")]) := <type-of> fe
    
  eq-type-of-action :
    ForExp(oe, x, s, ie, Filter(we, obe, l)) -> t
    where tie := <type-of> ie
        ; toe := <type-of> oe
        ; twe := <type-of> we
        ; tobe := <type-of> obe
        ; if <?GenericSort("List", _)> tie then
            t := GenericSort("List", [toe])
          else
            t := GenericSort("Set", [toe])
          end
        ; SimpleSort("Bool") := twe

  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoOrderByNoLimit(we)) -> <eq-type-of> ForExp(oe, x, s, ie, Filter(we, OrderNonSpecific(Null()), Limit(Int("1000"), Int("0"))))
  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoWhereNoLimit(obe))  -> <eq-type-of> ForExp(oe, x, s, ie, Filter(True(), obe, Limit(Int("1000"), Int("0"))))
  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoLimit(we,obe))      -> <eq-type-of> ForExp(oe, x, s, ie, Filter(we, obe, Limit(Int("1000"), Int("0"))))
  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoOrderBy(we, l))     -> <eq-type-of> ForExp(oe, x, s, ie, Filter(we, OrderNonSpecific(Null()), l))
  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoWhere(obe, l))      -> <eq-type-of> ForExp(oe, x, s, ie, Filter(True(), obe, l))
  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoWhereNoOrderBy(l))  -> <eq-type-of> ForExp(oe, x, s, ie, Filter(True(), OrderNonSpecific(Null()), l))
    
  eq-type-of-action :
    ForExpNoFilter(oe, x, s, ie) -> <eq-type-of> ForExp(oe, x, s, ie, Filter(True(), OrderNonSpecific(Var(x)), Limit(1000, 0)))

rules

  constraint-error-action :
    AndForExp(fe) -> <add-error(|["And-for-expression should contain a collection of Bool type"])>
    where not(SimpleSort("Bool") := <type-of>)

  constraint-error-action :
    OrForExp(fe) -> <add-error(|["Or-for-expression should contain a collection of Bool type"])>
    where not(SimpleSort("Bool") := <type-of>)

  constraint-error-action : ForExp(_, _, srt, col, _)      -> <forexp-constraint-error(|srt,col)>
  constraint-error-action : ForExpNoFilter(_, _, srt, col) -> <forexp-constraint-error(|srt,col)>

  forexp-constraint-error(|srt,col) :
    fe -> <add-error(|["collection in for-expression does not contain declared type ",<pp-webdsl> srt])>
    where not(GenericSort(<?"Set"<+?"List">, [srt]) := <type-of> col)

rules

  desugar-action :
    fe@ForExp(oe, x, s, ie, fltr){anno*} -> ThisCall($fun, arg*)
    with  $fun := <newname> "listCompr"
        ; (arg*,farg*) := <get-args-fargs-from-closure-in-anno> anno*
        ; srt2 := <type-of> ie
        ; GenericSort(_, [srt]) := srt2
        ; srt3 := <type-of> oe
        ; e3 := ie                                                 // alias
        ; e4 := oe                                                 // alias
        ; if <?GenericSort("List",_)> srt2 then  
            srt4 := GenericSort("List", [srt3])  
            ; e5 := |[ List<srt3>() ]|           
          else // Set
            srt4 := GenericSort("Set", [srt3])   
            ; e5 := |[ Set<srt3>() ]|            
          end
        ; if <?FieldAccess(Var("this"),_)> e3 then e7 := True() else e7 := <add-not-null-checks> NotEq(e3,Null()) end
        ; <rename-this-var;emit-webdsl-code> def|[
            globals { 
              function $fun (farg*) : srt4 {
                var l : srt4;
                l := e5;
                if(e7) {
                  for(x : srt in e3 fltr) {
                    l.add(e4);
                  }
                } else {}
                return l;
              }
            }
          ]|

  desugar-action :
    AndForExp(e){anno*} -> ThisCall(x_fun, arg*)
    with  x := <newname> "x"
        ; x_fun := <newname> "andForExp"
        ; (arg*,farg*) := <get-args-fargs-from-closure-in-anno> anno*
        ; <rename-this-var;emit-webdsl-code> def|[
            function x_fun (farg*) : Bool {
              for(x : Bool in e) {
                if(!x) {
                  return false;
                } 
              }
              return true;
            }
          ]|

  desugar-action :
    OrForExp(e){anno*} -> ThisCall(x_fun, arg*)
    with  x := <newname> "x"
        ; x_fun := <newname> "orForExp"
        ; (arg*,farg*) := <get-args-fargs-from-closure-in-anno> anno*
        ; <rename-this-var;emit-webdsl-code> def|[
            function x_fun (farg*) : Bool {
              for(x : Bool in e) {
                if(x) {
                  return true;
                } 
              }
              return false;
            }
          ]|

rules

  /**
   *  'this' is normally not renamed, but in this case it should, because 'this' as farg name is not allowed
   */
  rename-this-var =
    where( varname := <newname> "this" )
  ; alltd(\Var("this"{anno*}) -> Var(varname)\)
  ; alltd(\Arg("this"{anno*},srt) -> Arg(varname,srt)\)
    