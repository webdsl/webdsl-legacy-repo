module org/webdsl/dsl/languages/action/for-exp

imports
  libstrategolib

imports
  libwebdsl-front

rules

  rename-action :
    ForExp(oe1, x, srt, ie1, f1) -> ForExp(oe2, y, srt2, ie2, f2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; oe2 := <rename-all> oe1
          ; f2 := <rename-all> f1
          |}
       ; ie2 := <rename-all> ie1

  rename-action :
    ForExpNoFilter(oe1, x, srt, ie1) -> ForExpNoFilter(oe2, y, srt2, ie2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; oe2 := <rename-all> oe1
          |}
       ; ie2 := <rename-all> ie1

rules

  eq-type-of-action :
    AndForExp(fe) -> SimpleSort("Bool")
    where GenericSort(_, [SimpleSort("Bool")]) := <type-of> fe
    
  eq-type-of-action :
    OrForExp(fe) -> SimpleSort("Bool")
    where GenericSort(_, [SimpleSort("Bool")]) := <type-of> fe
    
  eq-type-of-action :
    ForExp(oe, x, s, ie, Filter(we, obe, l)) -> t
    where tie := <type-of> ie
        ; toe := <type-of> oe
        ; twe := <type-of> we
        ; tobe := <type-of> obe
        ; if <?GenericSort("List", _)> tie then
            t := GenericSort("List", [toe])
          else
            t := GenericSort("Set", [toe])
          end
        ; SimpleSort("Bool") := twe

  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoOrderByNoLimit(we)) -> <eq-type-of> ForExp(oe, x, s, ie, Filter(we, OrderNonSpecific(Null()), Limit(Int("1000"), Int("0"))))
  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoWhereNoLimit(obe))  -> <eq-type-of> ForExp(oe, x, s, ie, Filter(True(), obe, Limit(Int("1000"), Int("0"))))
  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoLimit(we,obe))      -> <eq-type-of> ForExp(oe, x, s, ie, Filter(we, obe, Limit(Int("1000"), Int("0"))))
  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoOrderBy(we, l))     -> <eq-type-of> ForExp(oe, x, s, ie, Filter(we, OrderNonSpecific(Null()), l))
  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoWhere(obe, l))      -> <eq-type-of> ForExp(oe, x, s, ie, Filter(True(), obe, l))
  eq-type-of-action :
    ForExp(oe, x, s, ie, FilterNoWhereNoOrderBy(l))  -> <eq-type-of> ForExp(oe, x, s, ie, Filter(True(), OrderNonSpecific(Null()), l))
    
  eq-type-of-action :
    ForExpNoFilter(oe, x, s, ie) -> <eq-type-of> ForExp(oe, x, s, ie, Filter(True(), OrderNonSpecific(Var(x)), Limit(1000, 0)))

rules

  constraint-error-action :
    AndForExp(fe) -> <add-error(|["And-for-expression should contain a collection of Bool type"])>
    where not(SimpleSort("Bool") := <type-of>)

  constraint-error-action :
    OrForExp(fe) -> <add-error(|["Or-for-expression should contain a collection of Bool type"])>
    where not(SimpleSort("Bool") := <type-of>)

  constraint-error-action : ForExp(_, _, srt, col, _)      -> <forexp-constraint-error(|srt,col)>
  constraint-error-action : ForExpNoFilter(_, _, srt, col) -> <forexp-constraint-error(|srt,col)>

  forexp-constraint-error(|srt,col) :
    fe -> <add-error(|["collection in for-expression does not contain declared type ",<pp-webdsl> srt])>
    where not(GenericSort(<?"Set"<+?"List">, [srt]) := <type-of> col)

rules

  desugar-action :
    fe@ForExp(oe, x, s, ie, fltr) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> fe
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        // finding parameters = finding free variables?
        // @TODO: turn into reusable strategy; with built-in scope; should not be part of caller
        
        ; srt2 := <type-of> ie
        ; GenericSort(_, [srt]) := srt2
        ; srt3 := <type-of> oe
        ; e3 := ie                                                 // alias
        ; e4 := oe                                                 // alias
        //; newnm := <new-forexp-name>
        ; if <?GenericSort("List",_)> srt2 then  
            srt4 := GenericSort("List", [srt3])  
            ; e5 := |[ List<srt3>() ]|           
          else // Set
            srt4 := GenericSort("Set", [srt3])   
            ; e5 := |[ Set<srt3>() ]|            
          end
        ; if <?FieldAccess(Var("this"),_)> e3 then e7 := True() else e7 := <add-not-null-checks> NotEq(e3,Null()) end
        ; <fix-forexp-in-entity-function;emit-webdsl-code> def|[
            globals { 
              function $fun (farg*) : srt4 {
                var l : srt4;
                l := e5;
                if(e7) {
                  for(x : srt in e3 fltr) {
                    l.add(e4);
                  }
                } else {}
                return l;
              }
            }
          ]|

  /* @REFACTOR: This must be turned into AndForExp(oe, x, s, ie, fltr) ... */
  desugar-action :
    AndForExp(fe@ForExp(oe, x, s, ie, fltr)) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> fe
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        //
        ; GenericSort(_, [srt]) := <type-of> ie
        ; e3 := ie
        ; e4 := oe
        ; if <?FieldAccess(Var("this"),_)> e3 then e7 := True() else e7 := <add-not-null-checks> NotEq(e3,Null()) end
        ; <fix-forexp-in-entity-function;emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : Bool {
                if(e7) {
                  for(x : srt in e3 fltr) {
                    if(!e4) {
                      return false;
                    } else {}
                  }
                } else {}
                return true;
              }
            }
          ]|

  /* @REFACTOR: This must be turned into OrForExp(oe, x, s, ie, fltr) ... */
  desugar-action :
    OrForExp(fe@ForExp(oe, x, s, ie, fltr)) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> fe
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        //
        ; GenericSort(_, [srt]) := <type-of> ie
        ; e3 := ie
        ; e4 := oe
        ; if <?FieldAccess(Var("this"),_)> e3 then e7 := True() else e7 := <add-not-null-checks> NotEq(e3,Null()) end
        ; <fix-forexp-in-entity-function;emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : Bool {
                if(e7) {
                  for(x : srt in e3 fltr) {
                    if(e4) {
                      return true;
                    } else {}
                  }
                } else {}
                return false;
              }
            }
          ]|

rules

  find-expression-params =
    ?fa@FieldAccess(v, _)
    ; not(<IgnoreVars> v)
    ; rules( Param :+= fa )
    ; rules( IgnoreVars : v )

  find-expression-params =
    ?v@Var(x)
    ; not(<IgnoreVars> v)
    ; not("Component" := <type-of> v)
    ; rules( Param :+= v )
    ; rules( IgnoreVars : v )

  find-expression-params = // Have to filter this one out later, but point is to ignore everything inside for-exps
    ?ForExp(oe, x, srt, ie, Filter(we, obe, l))
    ; {| IgnoreVars
       : rules ( IgnoreVars : Var(x) )
       ; <alltd(find-expression-params)> we
       ; <alltd(find-expression-params)> oe
       ; <alltd(find-expression-params)> l
       |}
    ; <try(sometd(find-expression-params))> ie

  forexp-function-param-to-farg :
     f@FieldAccess(_, x) -> farg|[ x : srt ]|
     where srt := <type-of> f
     ; rules( RewriteFieldAccessToFarg : f -> Var(x) ) //we need a rewrite rule that rebinds f  to  x, because the context is away due to lifting

  forexp-function-param-to-farg :
    Var(x) -> farg|[ x : srt ]|
    where srt := <type-of> Var(x)

  find-params =
    ?fa@FieldAccess(v, _)
    ; not(<IgnoreVars> fa) // v
    ; rules( Param :+= fa )
    ; rules( IgnoreVars :  fa) // v

  find-params =
    ?v@Var(x)
    ; not(<IgnoreVars> v)
    ; not("Component" := <type-of> v)
    ; rules( Param :+= v )
    ; rules( IgnoreVars : v )

  find-params = //ignore the identifier of the for-exp iteration in the param lookup
    ?ForExp(oe, x, srt, ie, Filter(we, obe, l))
    ; {| IgnoreVars
       : rules ( IgnoreVars : Var(x) 
                 IgnoreVars : FieldAccess(Var(x), _) )
       ; <alltd(find-params)> we
       ; <alltd(find-params)> oe
       ; <alltd(find-params)> l
       |}
    ; <alltd(find-params)> ie

  fix-forexp-in-entity-function=
    alltd({\FieldAccess(Var("this"{anno*}),rest) -> Var(rest)\})
    