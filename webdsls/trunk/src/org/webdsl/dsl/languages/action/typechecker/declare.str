module org/webdsl/dsl/languages/action/typechecker/declare

imports
  libwebdsl-front
  org/webdsl/dsl/generation/webdsl-generator

strategies

  declare-function(|x_class) =
    ?ExtendFunction(_)

  declare-extend-function(|x_class):
  	ExtendFunction(Function(nm,_,_,_)) -> <id>
  	where rules( IsExtendedEntityFunction : (x_class,nm) ) // keep track of extend function to determine whether the hooks need to be generated

  // callee can be a SimpleSort(x_entity) or ClassSort(x_native_class)
  CheckFunctionSignature: p@(callee, f, t*) -> s
    where resolve-function-call-to-decl; ?Function(_,_, s, _)

  declare-function(|x_class) =
    ?Function(f, fargs, sort, _)
    ; with(
        sigonly := Function(f, fargs, sort,[])
      ; (n,t*) := <normalize-signature> (f,fargs)
      ; x_class_stripped := <strip-annos> x_class
      ; rules( CheckFunctionSignatureArgumentTypes :+
                    (SimpleSort(x_class_stripped), n, t2*) -> t*
                       where <zip(type-compatible)> (t*, t2*)
               // EntityFunctionSig :+ (x_class_stripped, n, t*) -> sigonly //not used?
               EntityFunctionDecl : (x_class_stripped, n, t*) -> sigonly{FunctionEntity(x_class)} //for built-in functions that are generated in the back-end (also likely to be used as the decl for CallToEntityFunctionGetDecl)
             )
      )

  normalize-declare: PredicateInEntity(name,args,body) -> Function(name,args,SimpleSort("Bool"),[])

  declare-function(|x_class) :
    p@PredicateInEntity(name,args,body) -> p
    with f := <with-origin(normalize-declare)> p
       ; <declare-function(|x_class)> f

  declare-action = declare-global-func

  CheckGlobalFunctionSignature: p@(None(), fname, t*) -> s
    where resolve-function-call-to-decl; ?Function(_,_, s, _)

  declare-global-func =
    ?Function(f, fargs, s, b){anno*}
  ; with(
      sigonly := Function(f, fargs, s,[]){anno*}
    ; sig@(n,t*) := <normalize-signature> (f,fargs)
    ; rules(FunctionSig :+ sig -> sigonly
            FunctionDecl : (n, t*) -> sigonly //for built-in functions that are generated in the back-end
      )
    ; rules (
              CheckGlobalFunctionSignatureArgumentTypes :+ (None(), n, t2*) -> t* // TODO: Mapping of FunctionCall() to Function using this info
                       where <zip(type-compatible)> (t*, t2*)
              IsGlobalFunctionSignature : (n, t*)
              IsGlobalFunction : (n, fargs, s)
              IsGlobalFunction : n
              GlobalFunctionArgs :+ n -> fargs //currently used to suggest correction when function name is known, but arguments types are not correct, see constraint-error-this-call

      )
    )

  declare-global-func = ?ef@ExtendFunction(_)
      // no declare, but save for constraints
    ; rules(ExtendGlobalFunctions :+= ef)

  // Do not go into an init action; otherwise the definitions will be declared globally
  declare-action = ?InitAction(_)
  declare-action = ?DataBindAction(_)
  declare-action = ?ValidateAction(_)
  declare-action = ?RenderAction(_)
