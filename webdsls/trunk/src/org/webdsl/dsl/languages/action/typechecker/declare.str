module org/webdsl/dsl/languages/action/typechecker/declare

imports
	libwebdsl-front
	org/webdsl/dsl/generation/webdsl-generator

strategies

// TODO: function resolving is now done for each type-of call and again in aggregate-and-combine-functions.
//        Result can be stored (annotation?).

  declare-function(|x_class) =
    ?ExtendFunction(_)

  declare-function(|x_class) =
    ?def@FunctionNoReturn(f, args, body)
    ; with(<with-origin(declare-function(|x_class) | def)> Function(f, args, SimpleSort("Void"), body))

  CheckFunctionSignature: p@(SimpleSort(x_class), f, t*) -> s
    where resolve-function-call-to-decl; ?Function(_,_, s, _)
        
  declare-function(|x_class) =
    ?def@Function(f, args, sort, body1)
    ; with(id
      ; t1* := <map(?Arg(_,<id>))> args
      ; rules( CheckFunctionSignatureArgumentTypes :+
                    (SimpleSort(x_class), f, t2*) -> t1*
                       where <zip(type-compatible)> (t1*, t2*)
               EntityFunctionDecl :+ (x_class, f, t1*) -> def
             )
      )

  declare-action = declare-global-func

  CheckGlobalFunctionSignature: p@(None(), fname, t*) -> s
    where resolve-function-call-to-decl; ?Function(_,_, s, _)
        
	declare-global-func = where (
    ?decl@Function(f, args, s, b)
    ; t1* := <map(?Arg(_,<id>))> args
    ; rules(FunctionDecl :+ (f, t1*) -> decl) 
    ; f2 := f
    ; rules ( 
              CheckGlobalFunctionSignatureArgumentTypes :+ (None(), f2, t2*) -> t1* // TODO: Mapping of FunctionCall() to Function using this info
                       where <zip(type-compatible)> (t1*, t2*)
              IsGlobalFunctionSignature : (f, t1*)
              IsGlobalFunction : (f, args, s)
              IsGlobalFunction : f
              GlobalFunctionArgs : f -> args
      )
    ; if None() := b then
        rules ( IsNativeFunction : f )
      end
    )

  declare-global-func = ?ef@ExtendFunction(_)
      // no declare, but save for constraints
    ; rules(ExtendGlobalFunctions :+= ef)

	declare-global-func =
    	?f@FunctionNoReturn(fname, args, b)
    ; where(<with-origin(declare-global-func | f)> Function(fname, args, SimpleSort("Void"), b))
    
  declare-global-func =
    	?f@NativeFunction(fname, args, s)
    ; where(<with-origin(declare-global-func | f)> Function(fname, args, s, None()))

  // Do not go into an init action; otherwise the definitions will be declared globally
  declare-action = ?InitAction(_)
  