module org/webdsl/dsl/languages/action/desugar

rules

  desugar-action :
    ExtendFunction(Function(fun, fargs, _, Block(stats))) -> RemoveMe()
    where <IsGlobalFunctionSignature> (fun,<map(?Arg(_,<id>))> fargs)
    with rules (
           ExtendFunction :+
             Function(fun, fargs2, SimpleSort("Void"), Block(stats2)) -> Function(fun, fargs2, SimpleSort("Void"), Block(newstats))
             with  newstats := <rename-vars-in-added-stmts-with-fargs> (fargs,fargs2,stats,stats2)
         )

  desugar-action = once-ExtendFunction

  //nice bunch of code duplication below....
  desugar-action :
    TypedListCreation(srt1, e1*) -> ThisCall($fun, params)
    where not([] := e1*)
        ; $fun := <newname> "typedlistCr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> e1*
           ; params := <bagof-Param>
           |}
        ; debug(!"TYPED LIST CREATEION")   
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        ; <debug(!" PARAMS, FARG ")> [ params, " ---- ", farg* ]
        ; srt2 := GenericSort("List", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> e1*
        ; debug(!"statements")
        ; <emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : srt2 {
                var l : srt2 := List<srt1>();
                stat*
                return l;
              }
            }
          ]|

  desugar-action :
    TypedSetCreation(srt1, e1*) -> ThisCall($fun, params)
    where not([] := e1*)
        ; $fun := <newname> "typedsetCr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> e1*
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        ; srt2 := GenericSort("Set", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> e1*
        ; <emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : srt2 {
                var l : srt2 := Set<srt1>();
                stat*
                return l;
              }
            }
          ]|

  desugar-action :
    ListCreation([e1|e1*]) -> ThisCall($fun, params)
    where $fun := <newname> "listCr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> [e1|e1*]
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("List", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> [e1|e1*]
        ; <emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : srt2 {
                var l : srt2 := List<srt1>();
                stat*
                return l;
              }
            }
          ]|

  desugar-action :
    SetCreation([e1|e1*]) -> ThisCall($fun, params)
    where $fun := <newname> "setCr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> [e1|e1*]
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("Set", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> [e1|e1*]
        ; <emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : srt2 {
                var l : srt2 := Set<srt1>();
                stat*
                return l;
              }
            }
          ]|

  desugar-action :
    VarDeclInitInferred(x, e) -> VarDeclInit(x, <type-of> e, e)

rules

  desugar-action :
    |[ e.list() ]| -> |[ List<srt>().addAll(e) ]| //assumes addAll returns the collection
    where GenericSort("Set", [srt]) := <type-of> e

  desugar-action :
    |[ e.set() ]| -> |[ Set<srt>().addAll(e) ]| //assumes addAll returns the collection
    where GenericSort("List", [srt]) := <type-of> e
    
