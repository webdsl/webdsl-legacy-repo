module org/webdsl/dsl/languages/action/for-filter

imports
  libstrategolib

imports
  libwebdsl-front

rules

  normalize-action :
    FilterNoLimit(we, obe) -> Filter(we, obe, Limit(Int("-1"), Int("0")))

  normalize-action :
    FilterNoOrderByNoLimit(we) -> FilterNoOrderBy(we, Limit(Int("-1"), Int("0")))

  normalize-action :
    FilterNoWhereNoLimit(obe) -> FilterNoWhere(obe, Limit(Int("-1"), Int("0")))
    
  normalize-action :
    FilterNoWhere(obe, l) -> Filter(True(), obe, l)
  
  normalize-action :
    FilterNoOrderBy(we, l) -> Filter(we, OrderAscending(Null()), l)

  normalize-action :
    LimitNoLimit(e) -> Limit(Int("-1"), e)

  normalize-action :
    LimitNoOffset(e) -> Limit(e, Int("0"))
    
  normalize-action :
    OrderNonSpecific(x) -> OrderAscending(x)

rules

  // check where-expression in filter
  constraint-error-action : Filter(we, _, _)           -> <for-filter-constraint-error(|we)>
  constraint-error-action : FilterNoLimit(we, _)       -> <for-filter-constraint-error(|we)>
  constraint-error-action : FilterNoOrderBy(we, _)     -> <for-filter-constraint-error(|we)>
  constraint-error-action : FilterNoOrderByNoLimit(we) -> <for-filter-constraint-error(|we)>
      
  for-filter-constraint-error(|we):
    f -> <add-error(|["where clause should return a boolean: "])> 
    where not(SimpleSort("Bool") := <type-of> we)

rules

  //check whether limit contains ints
  constraint-error-action : Limit(lim,off)     -> <expression-type-constraint(|SimpleSort("Int"))> lim
  constraint-error-action : Limit(lim,off)     -> <expression-type-constraint(|SimpleSort("Int"))> off
  constraint-error-action : LimitNoOffset(lim) -> <expression-type-constraint(|SimpleSort("Int"))> lim
  constraint-error-action : LimitNoLimit(off)  -> <expression-type-constraint(|SimpleSort("Int"))> off
