module org/webdsl/dsl/languages/action/for-filter

imports
  libstrategolib

imports
  libwebdsl-front

rules

  normalize-action :
    FilterNoLimit(we, obe) -> Filter(we, obe, Limit(Int("1000"), Int("0")))

  normalize-action :
    FilterNoOrderByNoLimit(we) -> FilterNoOrderBy(we, Limit(Int("1000"), Int("0")))

  normalize-action :
    FilterNoWhereNoLimit(obe) -> FilterNoWhere(obe, Limit(Int("1000"), Int("0")))
    
  normalize-action :
    FilterNoWhere(obe, l) -> Filter(True(), obe, l)
  
  normalize-action :
    FilterNoOrderBy(we, l) -> Filter(we, OrderAscending(Null()), l)

  normalize-action :
    LimitNoLimit(e) -> Limit(Int("1000"), e)

  normalize-action :
    LimitNoOffset(e) -> Limit(e, Int("0"))
    
  normalize-action :
    OrderNonSpecific(x) -> OrderAscending(x)

rules

  // check where-expression in filter
  constraint-error-action : Filter(we, _, _)           -> <for-filter-constraint-error(|we)>
  constraint-error-action : FilterNoLimit(we, _)       -> <for-filter-constraint-error(|we)>
  constraint-error-action : FilterNoOrderBy(we, _)     -> <for-filter-constraint-error(|we)>
  constraint-error-action : FilterNoOrderByNoLimit(we) -> <for-filter-constraint-error(|we)>
      
  for-filter-constraint-error(|we):
    f -> <add-error(|["where clause should return a boolean: "])> 
    where not(SimpleSort("Bool") := <type-of> we)

rules
//add rule to check whether limit contains ints
//add rule to check whether order mentions the exp
/*
    "where" Exp                              -> Filter {cons("FilterNoOrderByNoLimit")}
    "order" "by" OrderExp                    -> Filter {cons("FilterNoWhereNoLimit")}
    "where" Exp "order" "by" OrderExp        -> Filter {cons("FilterNoLimit")}
    "where" Exp Limit                        -> Filter {cons("FilterNoOrderBy")}
    "order" "by" OrderExp Limit              -> Filter {cons("FilterNoWhere")}
    Limit                                    -> Filter {cons("FilterNoWhereNoOrderBy")}
    "where" Exp "order" "by" OrderExp Limit  -> Filter {cons("Filter")}
    Exp                                      -> OrderExp {cons("OrderNonSpecific")}
    Exp "asc"                                -> OrderExp {cons("OrderAscending")}
    Exp "desc"                               -> OrderExp {cons("OrderDescending")}
    "limit" Exp "offset" Exp                 -> Limit {cons("Limit")}
    "limit" Exp                              -> Limit {cons("LimitNoOffset")}
    "offset" Exp                             -> Limit {cons("LimitNoLimit")}
*/