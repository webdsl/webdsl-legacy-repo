module org/webdsl/dsl/languages/access-control/login

imports
  libwebdsl-front

rules
  get-login-template  = !<IsPage; TemplateDefinition> "login" <+ <TemplateSignature> ("login",[])
  get-logout-template = !<IsPage; TemplateDefinition> "logout" <+ <TemplateSignature> ("logout",[])
  get-auth-template   = !<IsPage; TemplateDefinition> "authentication" <+ <TemplateSignature> ("authentication",[])

  declare-override-login :
    acp@AccessControlPrincipal(x_ident,props) -> acp
          // generate auth template because it checks whether login- and logout templates exist
    with  create-auth-template-if-not-defined(|x_ident,props)
        ; create-login-template-if-not-defined(|x_ident,props)
        ; create-logout-template-if-not-defined(|x_ident,props)
          // declare function now the principal entity is declared
        ; declare-authenticate-function(|x_ident,props)
         
  declare-login : 
    acp@AccessControlPrincipal(x_ident,props) -> acp
    with  len := <length> props
        ; <register-reserved-function> ("authenticate",len)
        ; <register-reserved-function> ("logout",0)
        ; create-logout-function(|x_ident,props)
          
  create-farg-for-login-fun(|x_ident) :
    x -> result
    with  type := <entity-prop-to-type(|x_ident)> x
        ; result := Arg(<credential-to-var-name> x, type) 
      
  credential-to-var-name = <concat-strings> ["cred",<id>]     
          
  entity-prop-to-type(|x_ident) :
    x -> result
    with result := <TypeOfProperty <+ !"Undefined"> (x_ident,x) 
    //Undefined when the principal declaration was incorrect, e.g. principal type or credential property doesn't exist
    //doesn't overlap with an entity name Undefined, since that would be type SimpleSort("Undefined")

  create-login-template-if-not-defined(|x_ident,props) = 
    try(where(not(get-login-template)); default-login-template(|x_ident,props))
  
  
  default-login-template(|x_ident,props) =
    with(
      e_loginfunarg* := <map(!Var(<credential-to-var-name>))> props
    ; elem_loginvar* := <map(create-vars-for-login-tpl(|x_ident))> props
    ; elem_logininput* := <map(create-inputs-for-login-tpl(|x_ident))> props
    ; <emit-webdsl-code> def|[
      define login() {
      
        elem_loginvar*
      
        form { 
          group("Login") {
            table {
              elem_logininput*
            }
            action("Login", signinAction())
          }
        }
        
        action signinAction() {
          validate(authenticate(e_loginfunarg*), "The login credentials are not valid.");
          message("You are now logged in.");
          return root();
        }
      }
      ]|
    ; <add-builtin-rule> acrule |[ 
        rule template login(){
          true
        }
      ]|
    )
  
  declare-authenticate-function(|x_ident,props) =
    with(
      farg_loginfun* := <map(create-farg-for-login-fun(|x_ident))> props
      // we can't emit yet, need a renamed SecurityContext to infer checks
    ; <declare> def |[ function authenticate(farg_loginfun*) : Bool {} ]|
    )
  
  emit-ac-defs: AccessControlPrincipal(x_ident, props) -> <fail>
    with emit-authenticate-function(|x_ident,props)
    
  emit-authenticate-function(|x_ident,props) =
    with(
      farg_loginfun* := <map(create-farg-for-login-fun(|x_ident))> props 
    ; x_firstprop := <Hd> props
    ; x_firstpropvarname := <credential-to-var-name> x_firstprop
    ; x_findfun := <concat-strings> ["find",x_ident,"By",<capitalize-string> x_firstprop]
    ; srt_ent := SimpleSort(x_ident)
    ; stat_auth* := <Tl; map(cred-prop-to-auth-stat(|x_ident))> props 
    ; <emit-webdsl-code-no-declare> def|[
      function authenticate(farg_loginfun*) : Bool {
        var tmpentitylist : List<srt_ent> := x_findfun(x_firstpropvarname);
        if(tmpentitylist.length > 0) {
          for(tmpentity : srt_ent in tmpentitylist){
            var allow : Bool := true;
            
            stat_auth*
            
            if(allow){
              securityContext.principal := tmpentity;
              return true;
            }
          }
        }
        securityContext.principal := null;
        return false;
      }
      ]|
    )
    
  cred-prop-to-auth-stat(|x_ident) =
     cred-prop-to-auth-stat-secret(|x_ident)
  <+ cred-prop-to-auth-stat-stringcomp(|x_ident)
  
  cred-prop-to-auth-stat-secret(|x_ident) :
    x -> stat*
    where SimpleSort("Secret") := <entity-prop-to-type(|x_ident)> x
    with  x_varname := <credential-to-var-name> x
        ; stat* := webdsl |[
            if(!tmpentity.x.check(x_varname)) {
              allow := false;
            }
          ]|
          
  cred-prop-to-auth-stat-stringcomp(|x_ident) :
    x -> stat*
    where <type-compatible> (<entity-prop-to-type(|x_ident)> x, SimpleSort("String"))
    with  x_varname := <credential-to-var-name> x
        ; stat* := webdsl |[
            if(tmpentity.x != x_varname){
              allow := false;
            }
          ]|
 
  create-vars-for-login-tpl(|x_ident) :
    x -> result
    with  type := <entity-prop-to-type(|x_ident)> x
        ; result := VarDecl(<credential-to-var-name> x,type) 
 
  create-inputs-for-login-tpl(|x_ident) :
    x -> result
    with  x1 := <credential-to-var-name> x
        ; str := <concat-strings> [<make-human-readable> x , ": "]
        ; result := elem |[ groupitem{ labelcolumns(str){input(x1)} } ]|
    
  create-logout-template-if-not-defined(|x_ident,props) = 
    try(where(not(get-logout-template)); default-logout-template(|x_ident,props))

  default-logout-template(|x_ident,props) =
    with(
      x := <Hd> props
    ; <emit-webdsl-code> def|[
        define logout() {
          "Logged in as: " output(securityContext.principal.x)
          form{ 
            actionLink("Logout", signoffAction())
            action signoffAction() { logout(); }
          }
        }
      ]|
    ; <add-builtin-rule> acrule |[ 
          rule template logout(){
            true
          }
      ]|
    )
    
  create-logout-function(|x_ident,props) =
    with(
      <emit-webdsl-code> def|[
        function logout() {
          securityContext.principal := null;
        }
      ]|
    )
    
  create-auth-template-if-not-defined(|x_ident,props) = 
    try(where(
        // Only generate if no custom auth/login/logout template
        not(get-auth-template); not(get-login-template); not(get-logout-template)
      ; default-auth-template(|x_ident,props))
    )
  
  default-auth-template(|x_ident,props) =
    <emit-webdsl-code> def|[
      define authentication() {
        if(loggedIn()){
          logout()
        }
        else{
          login()
        }
      }
    ]|
  ; <add-builtin-rule> acrule |[ 
      rule template authentication(){
        true
      }
    ]|
  
    