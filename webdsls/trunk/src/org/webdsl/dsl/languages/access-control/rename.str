module org/webdsl/dsl/languages/access-control/rename

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/languages/access-control/-

rules 

  rename-ac :
    AccessControlRule(checktype,matchstring,fargs1,check1,acrules1) -> AccessControlRule(checktype,matchstring,fargs2,check2,acrules2) 
    with  {| Rename
           : check3 := <alltd(rename-security-context-properties)> check1
           ; fargs2 := <rename-all> fargs1
           ; check2 := <rename-all> check3
           ; acrules2 := <rename-all> acrules1
           |}
           
  rename-security-context-properties :
    Var(x) -> Var(y)
    where srt := <TypeOfProperty> ("SecurityContext",x) //relies on declaration of securitycontext, problem with current typechecker
        ; y := x{<newname> x}
        ; rules ( TypeOf : y -> srt 
                  SecurityContextProperty : Var(y) -> |[ securityContext.x ]|)
  
  rename-ac :
    Predicate(x, args1, b1) -> <declare-global-pred> Predicate(x, args2, b3)
    with  {| Rename
           : b2 := <alltd(rename-security-context-properties)> b1
           ; args2 := <map(rename)> args1
           ; b3 := <rename-all> b2
           |}
  declare-global-pred =
    ?Predicate(f, args, b)
    ; with(<declare> Function(f, args, SimpleSort("Bool"), b))
    ; where(t1* := <map(?Arg(_,<id>))> args
          ; fname := <strip-annos> f 
          ; rules (IsPredicate : (fname,t1*))
      )
    
    
  rename-ac : 
    AccessControlPrincipal(x_ident,props) -> <declare-ac-principal> AccessControlPrincipal(x_ident,props)

  declare-ac = declare-ac-principal
    
  declare-ac-principal : 
    AccessControlPrincipal(x_ident,props) -> AccessControlPrincipal(x_ident,props)
    with <declare> def |[
            session securityContext {
              principal   -> x_ident
              loggedIn    :: Bool //for backwards comp
            }
          ]|
        ; <declare-global-pred> def |[
            predicate loggedIn()
            {
              securityContext.principal != null
            }
          ]|
        ; <declare> def |[
            define page accessDenied()
            {
              title("Access Denied")
              text("Access Denied: ")
              navigate(home()) { "return to home page" }
            }
          ]|
        ; rules (
            AccessControlEnabled := True()
          )



  rename-ac =
    ?webdsl|[ access control policy pexp ]|
  ; rules(AC-Policy-Expression := pexp)

  ///declare-definition:
   // AccessControlDefinition(name,defs) -> AccessControlDefinition(name,defs)
   // where <alltd(declare-definition)> defs // declare-definition is done with alltd, which doesn't go into the tree after a match, explicitly search deeper
        
  // declare-ac-principal :
  //  AccessControlPrincipal(ident,props) -> AccessControlPrincipal(ident,props)
  //nothing to declare, gets translated to securityContext which should be declared
 
 // declare-ac-rule = 
 //   ?AccessControlRule(_,_,_,_,_)
    
 
  rename-ac :
    AccessControlPointcut(pname,args1,b1) -> <declare-ac-pointcut> AccessControlPointcut(pname,args2,b2)
    with  {| Rename
           : args2 := <map(rename)> args1
           ; b2 := <alltd(rename-pc-elem-idents)> b1
           //; b2 := <rename-all> b1
          |}

  rename-pc-elem-idents :
    x -> y
    where Var(y) := <Rename> Var(x)
    
  declare-ac-pointcut:
    AccessControlPointcut(pname,fa,elems) -> AccessControlPointcut(pname,fa,elems) 
    with 
         {| pointcut-formal-argument :
             <filter(\ ar@Arg(ident,thesort)->ar with rules (pointcut-formal-argument : ident -> ar) \)> fa
           ; t1* := <map(?Arg(_,<id>))> fa
           ; <filter(declare-ac-pointcut-element(|pname,t1*))> elems
           ; rules(  MatchesAccessControlPointcut : (x_ident, t1*) 
                     PointcutArguments : (x_ident, t1*) -> fa
           )
         |}  
   
  declare-ac-pointcut-element(|pname,fa):
    AccessControlPointcutElement(ident,matchident,faidents,wc) -> AccessControlPointcutElement(ident,matchident,faidents,wc)
    with  faidentsargs := MatchArgs(<map(pointcut-formal-argument)> faidents,wc)
        ; newPointcutList := <concat> [<AccessControlPointcuts<+![]> (pname,fa),[(ident,matchident,faidentsargs)]]
        ; rules(
            AccessControlPointcuts: (pname,fa) -> newPointcutList
          ) 
/*
          
  // uses: declare-global-funcs = ?fu@Function(f, args, s, b) ...
  declare-definition:
    p@Predicate(f,args,b) -> p//<declare-global-funcs> Function(f, args, SimpleSort("Bool"), b)
    where rules (IsPredicate : (f,args)
                 IsPredicate : f ) //TODO remove need for this one
  */        
