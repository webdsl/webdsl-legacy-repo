/**

 Security rules for WebDSL

*/

module org/webdsl/dsl/languages/access-control/weaving

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/languages/access-control/-
  org/webdsl/dsl/typechecker/-
rules


  process-access-control-checks =
    topdown(try(process-page-checks))
                //<+ process-action-checks//TODOcontext sensitive when inferring visibility may need to apply right away in templates and wait for pages
               /* <+ process-function-checks//TODO can be done earlier as well, doesn't need typechecker fix   */
 // ; alltd( let f(s) = foldl(s <+ Snd) in fold-AccessControlFunctionToAction(f) end)
 // ; alltd(   process-action-checks )
  ; alltd( let f(s) = foldl(s <+ Snd) in fold-WeaveAccessControlInferred(f) end)
  ; warn-for-unused-rules
  
  //separated from page and template accheck processing for clarity
  process-page-actions:
    def@def|[ define mod* x_ident(farg*)  req* { elem*  } ]| ->
        def|[ define mod* x_ident(farg*)  req* { elem2* } ]|
    where <fetch(Page)> mod*
        ; not(<fetch(IgnoreAccessControl)> mod*)
    with  name := <get-toplevel-name> def
        ; elem1* := <alltd(process-action-checks(|name,farg*))> elem*
        ; elem2* := <alltd( let f(s) = foldl(s <+ Snd) in fold-WeaveAccessControlInferredAction(f) end) > elem1*
  
  process-template-actions: // TODO cope with template var/ template action var name clash PageVar->externalscope
    def@def|[ define mod* x_ident(farg*)  req* { elem* }  ]| -> def|[ define mod* x_ident(farg*){ elem3* } ]|
    where not(<fetch(?Page())> mod*)
    with  {| IsInTemplate: rules(IsInTemplate := True())
             ; name := <get-toplevel-name> def
             ; elem1* := <alltd(process-action-checks(|name,farg*))> elem*
             ; elem3* := < alltd( let f(s) = foldl(s <+ Snd) in fold-WeaveAccessControlInferredAction(f) end) > elem1*
            // ; elem3* := <alltd(AddTemplateArgToActionArg)> elem2*
          |}
  
  substitute-parent-vars-1:
    (farg1*,e1) -> (farg2*,e2)
    with  {| subst-vars:
               farg2* := <map({(Arg(nm,srt) -> Arg(varname,srt) 
                          with  varname := <newname> "genuniquevar" 
                              ; rules(//subst-vars: PageVar(nm)->Var(varname)
                                     TypeOf : varname -> srt
                                     subst-vars: Var(nm)->Var(varname)
                              ))})> farg1*
           ; e2 := <alltd(subst-vars)> e1
           |}
  substitute-parent-vars-2: //special because it is expanded in webdsl
    (farg1*,e1) -> (farg2*,e2)
    with  {| subst-vars:
               farg2* := <map({(Arg(nm,srt) -> Arg(varname,srt) 
                          with  varname := <newname> "genuniquevar" 
                              ; rules(
                                     TypeOf : varname -> srt
                                     subst-vars: ExternalScopeVar(nm)->Var(varname)
                                     //subst-vars: Var(nm)->Var(varname)
                              ))}<+info(|["map failed",<id>]))> farg1*
           ; e2 := <alltd(subst-vars)> e1
            |}
  
  dummy-pred-name = !"dummy"
  is-dummy-pred = ?x; x := <dummy-pred-name>
  is-true-check = ?(_,ThisCall(<is-dummy-pred>,_),_)

  // Given a list of checks, return the name and arguments of an optimized predicate
  // Returns:
  // - combined predicate (if needed)
  // - existing predicate (if just one check)
  // - dummy predicate (if unconditionally true)
  combine-checks-smart(substitute-expr | farg_match*, farg_extra*, x_name, predtype):
    listofchecks -> (x_predname, nargs)
    with  
      //register which rules are used, in order to produce warnings
      <map(Third;{x:?x;rules(AccessControlRuleUsed :+= x)})> listofchecks 
    ; nontrue_checks := <remove-all(is-true-check)> listofchecks
    ; if not([] := listofchecks); [] := nontrue_checks then
          // There are checks, but they are all True: do not insert checks
            x_predname := <dummy-pred-name>
          ; nargs := 0
       else
         if <eq> (<length> nontrue_checks, 1) then
            // Just one non-true predicate. Do not create a combined predicate, but call directly.
            ThisCall(x_predname, e_allargs_pred*) := <Hd; ?(_,<id>,_)> nontrue_checks
          ; nargs := <length> e_allargs_pred*
        else
            // Multiple checks. Emit a combined predicate.
            e_check := <combine-checks> nontrue_checks
          ; (farg_extra_renamed*, e_checkrenamed) := <substitute-expr> (farg_extra*,e_check)
          ; x_predname := <concat-strings; newname-i> ["gen",predtype,"combined_",x_name]
          ; farg_combined* := [farg_extra_renamed*, farg_match*]
          ; <emit-webdsl-code> def |[ predicate x_predname(farg_combined*) { e_checkrenamed } ]|
            // Since no constant folding is done, this will only warn if no rules have been defined.
          ; <warn-for-blocked-elements> (e_check,predtype,x_name,farg_match*)
          ; nargs := <length> farg_combined*
        end
      end

  process-page-checks://TODO substpagevars
  d@def|[ define mod* x_ident(farg*)  req* { elem* }       ]| -> 
    def|[ define mod* x_ident(farg*)  req* { elem0 elem1* } ]|
    where <fetch(Page)> mod*
        ; not(<fetch(IgnoreAccessControl)> mod*)
    with  // don't go into local template defines in the page definition
          localtemplatedefine* := <collect-om(?Define(_,_,_,_,_))> elem*
        ; elemwithoutdefines* := <topdown(try(remove-all(?Define(_,_,_,_,_))))> elem*
        ; stat* := <collect(\ elem|[ init{stat*} ]| -> stat* \);concat> elemwithoutdefines*
        ; elem0* := <topdown(try(remove-all(   {stat*: ?elem|[ init{stat*}        ]| }
                                            <+ {x,e  : ?elem|[ acpagecheck(x,e)[]{} ]| } )))> elemwithoutdefines*
        ; elem1* := [elem0*,localtemplatedefine*]
        // collect takes care of duplicates
        ; listofchecks := <collect(\TemplateCall("acpagecheck",[Var(x),e],[],TemplateBody([])){r}-> (x,e,r) \)> elem*
        ; (x_predname, nargs) := <combine-checks-smart(id | farg*, [], x_ident, "page")> listofchecks
        ; if <is-dummy-pred> x_predname then
              elem0 := elem |[ init { stat* } ]|
          else
              //take other page definition's args if checks were imported and only one check (no combined check generated)
              // the ThisCall matched here contains either the imported args or the regular args (when only one check but no import of ac rules)
              if [(_,ThisCall(_,importedargs),_)] := <remove-all(is-true-check)> listofchecks
              then e_args* := importedargs
              else e_args* := <take(|nargs)> (<map(get-varname-from-formarg)> farg*) end
            ;	elem0 := elem |[ init { if ( x_predname(e_args*) ) { stat* } else { goto accessDenied(); } } ]|
            ; rules( WeaveAccessControlInferred :+
                   TemplateCall("navigate", [PageCall(x_ident,e*)], passign*, TemplateBody(elem2*)) ->
                   IfTempl(ThisCall(x_predname,e_predargs*),[TemplateCall("navigate", [PageCall(x_ident,e*)], passign*, TemplateBody(elem2*))],[])
                   with e_predargs* := <take(|nargs)> e* 
     //todo match argument types although not really necessary since overloading is not possible for pages
               )
         end 
        
         //problem with nested checks;
  process-action-checks(|toplevel-name,farg_page*): //page farg
  d@elem|[ action x_ident(farg*){ stat*  } ]| -> 
    elem|[ action x_ident(farg*){ stat_check* } ]|
    with	listofchecks := <collect(\ThisCall("acactioncheck",[Var(x),e]){r} -> (x,e,r) \)> stat*
        ; e := <combine-checks> listofchecks
        //remove ac calls
        ; stat_allow* := <topdown(try(remove-all({x,e:?webdsl|[ acactioncheck(x,e); ]|} )))> stat*
        //determine whether it returns to the same or a different page, to either redirect with goto or return
        ; returnstat := <collect(?Return(_))> stat_allow*
        ; if returnstat := [] 
          then stat_denied* := [webdsl |[ goto(accessDenied()); ]|] 
          else 
              // hack: concrete syntax would give ThisCall("accessDenied") 
              stat_denied* := [Return(PageCall("accessDenied", []))]
          end
        ; x_predbasename := x_ident // do not prefix with toplevel-name: the action is already renamed
        ; (x_predname, nargs) := <combine-checks-smart(substitute-parent-vars-2 | farg*, farg_page*, x_predbasename, "action")> listofchecks
        ; if <is-dummy-pred> x_predname then
              stat_check* := stat_allow*
          else
              n_pageargs := <ActionRulePageArgs <+ <length> farg_page*> x_predname
            ; n_actionargs := <subt> (nargs, n_pageargs)
              //take other definition's args if checks were imported and only one check (no combined check generated)
              // the ThisCall matched here contains either the imported args or the regular args (when only one check but no import of ac rules)
            ; if [(_,ThisCall(_,importedargs){ExtraArgsForImportAC(pageargs*)},_)] := <remove-all(is-true-check)> listofchecks
              then 
                e_allargs* := importedargs
              else 
                pageargs* := <take(|n_pageargs); map(get-varname-from-formarg)> farg_page* 
              ; actionargs* := <take(|n_actionargs); map(get-varname-from-formarg)> farg*
              ; e_allargs* := [pageargs*, actionargs*]
              end
             ; stat_check* := [webdsl |[ if ( x_predname(e_allargs*) ) { stat_allow* } else { stat_denied* } ]|]
             ; rules( WeaveAccessControlInferredAction :+
                 a@                                           SubmitElem(ActionCall(x_ident,callargs*){anno_action_call*}, passign*, submitelem*) ->
                   IfTempl(ThisCall(x_predname,e_checkargs*),[SubmitElem(ActionCall(x_ident,callargs*){anno_action_call*}, passign*, submitelem*)],[])
                   with e_checkargs* := <take(|nargs)> [pageargs*,callargs*] //in a call the action args are specified, the page/template definition args need to be added to call the check
                 WeaveAccessControlInferredAction :+
                 a@                                           SubmitLinkElem(ActionCall(x_ident,callargs*){anno_action_call*}, passign*, submitelem*) ->
                   IfTempl(ThisCall(x_predname,e_checkargs*),[SubmitLinkElem(ActionCall(x_ident,callargs*){anno_action_call*}, passign*, submitelem*)],[])
                   with e_checkargs* := <take(|nargs)> [pageargs*,callargs*]
               )
           end
        // fix use of template arg in nested action check, template arg needs to be explicitly transferred otherwise action can't 
        // reach it, eg in the case of a for loop var in the page passed as argument to a template
        /*; if IsInTemplate then
            farg2* := [farg_page*,farg*]
          ; e8* := <map(get-varname-from-formarg)> farg_page*
          ; rules (AddTemplateArgToActionArg: 
                       elem|[  x ( e7, x_ident(e3*) )[passign*] { elem* }  ]| ->
                       elem|[  x ( e7, x_ident(e9*) )[passign*] { elem* }  ]|
                       with  e9* := [e8*,e3*] // can simply concat these, because rename phase made the identifiers unique
            )  
          else*/
         // end
      
  process-template-checks:
    d@def|[ define mod* x_ident(farg*) req* { elem* }  ]| -> 
      def|[ define mod* x_ident(farg*) req* { elem2* } ]|
    where not(<fetch(?Page())> mod*)
        ; not(<fetch(?Email())> mod*)
        ; not(<fetch(?IgnoreAccessControl())> mod*)
    with  listofchecks := <collect(\TemplateCall("actemplatecheck",[Var(x),e],[],TemplateBody([])){r} -> (x,e,r) \)> elem*
        ; type := <fetch(AjaxTemplate); !"ajaxtemplate" <+ !"template"> mod*
        ; (x_predname, nargs) := <combine-checks-smart(id | farg*, [], x_ident, type)> listofchecks
        ; elem1* := <topdown(try(remove-all({x,e:?elem|[ actemplatecheck(x,e)[]{} ]|} )))> elem*
        ; if <is-dummy-pred> x_predname then
            elem2* := elem1*
          else
              //take other template definition's args if checks were imported and only one check (no combined check generated)
              // the ThisCall matched here contains either the imported args or the regular args (when only one check but no import of ac rules)
              if [(_,ThisCall(_,importedargs),_)] := <remove-all(is-true-check)> listofchecks
              then e_args* := importedargs
              else e_args* := <take(|nargs)> (<map(get-varname-from-formarg)> farg*) end
            ; e_check := ThisCall(x_predname, e_args*)
            ; if <fetch(AjaxTemplate)> mod* then
                elem2* := elem* |[ if ( e_check ) { elem1* } else { "Access denied to this ajax template call" }  ]|
              else
                elem2* := elem* |[ if ( e_check ) { elem1* } ]|
              end
          end
          
 /* 
  process-function-checks://TODO add external scope vars and subst
    a@|[ acfunctioncheck(x_group,e) e1 ]| -> 
      |[ x_funcname(e*) ]|
    where listofchecks := <collect-all(\ |[acfunctioncheck(x_group,e) e1]| -> (x_group,e) \)> a
        ; e2 := <combine-checks> listofchecks
        ; thecall := <collect(\ |[acfunctioncheck(x_group3,e3) x_name3(e3*)]| -> |[x_name3(e3*)]| \);Hd> a
        ; |[ x_fname(e*) ]| := thecall
        ; farg* := <GlobalFunctionArgs> x_fname  //TODO fix overloading,search using name and arg types instead, make sure typechecker adds types to the expressions
        ; srt := <GlobalFunctionReturn> x_fname
        ; e1* := <map(get-varname-from-formarg)> farg*
        ; {| subst-vars:     
               <zip({\ tup@(exp,Arg(nm,srt)) -> tup
                        where exp1 := exp{}  // scoped with { } because exp1 is not scoped by \ \ 
                            ; rules( subst-vars: exp1 -> Var(nm) )
                    \})> (e*,farg*)
             ; e3 := <alltd(subst-vars)> e2
           |}
        ; x_funcname := <newname> "genfunction"
        ; <emit-webdsl-code> def|[ globals {  function x_funcname(farg*) :srt
                                              { 
                                                if (e3) { var temp : srt := x_fname(e1*); return temp; } else { goto(accessDenied()); return null; } 
                                              }
                                            } ]|
        */
        
        
  //strategy that takes list of (groupname,check) tuples and creates the combination
  combine-checks=
    ?checks
  ; with (final-check := <AC-Policy-Expression<+!Name("anonymous")>
          ; groupnames := <collect(\Name(x)->x\)> final-check
          ; groupchecks := <map({x:?x;<filter(?(x,_,_));map(Snd)> checks;try(generate-conjunction-exp)})> groupnames)  //error here
  ; if <map(?[])> groupchecks
    then !False()
    else
      with (
            {| groupresult:
                 <zip(\(thename,thecheck) -> None() 
                        with rules(groupresult : Name(thename) -> thecheck)\)> (groupnames,groupchecks)
               ; subst-final-check := <topdown(try(groupresult))> final-check
               ; substituted-final-check := <bottomup(try(  \PolicyAnd([],[])-> []\
                                                         <+ \PolicyOr([],[])-> []\
                                                         
                                                         <+ \PolicyAnd([],x)-> x\
                                                         <+ \PolicyAnd(x,[])-> x\
                                                         <+ \PolicyOr([],x)-> x\
                                                         <+ \PolicyOr(x,[])-> x\
                                                         
                                                         <+ \PolicyAnd(True(),True())-> True()\
                                                         <+ \PolicyAnd(False(),False())-> False()\
                                                         //<+ \And(False(),_)-> False()\
                                                         //<+ \And(_,False())-> False()\ 
                                                         <+ \PolicyOr(False(),False())-> False()\
                                                         <+ \PolicyOr(True(),True())-> True()\
                                                         //<+ \Or(True(),_)-> True()\
                                                         //<+ \Or(_,True())-> True()\ 
                                                          ))> subst-final-check
             |})
    ; !substituted-final-check
    ; alltd(\PolicyAnd(x,y)->And(x,y)\<+\PolicyOr(x,y)->Or(x,y)\)
    end
      
