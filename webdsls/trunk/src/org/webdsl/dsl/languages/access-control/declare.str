module org/webdsl/dsl/languages/access-control/declare

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/languages/access-control/-

rules

  normalize-declare: Predicate(f, args, b) -> Function(f, args, SimpleSort("Bool"), b)

  declare: pred@Predicate(f, args, b) -> pred
    with  declare-normalized
        ; fname := <strip-annos> f 
        ; targ* := <map(farg-to-type)> args
        ; rules (IsPredicate : (fname, targ*))
      
  declare-ac = declare-ac-principal
  
  //declaration of principal
  // there can be only one of these
  declare-ac-principal : 
    acp@AccessControlPrincipal(x_ident,props){anno*} -> acp
    with <emit-webdsl-code> def |[
            session securityContext {
              principal   -> x_ident
              loggedIn    :: Bool //for backwards comp
            }
          ]|
        ; x_loginfun := "loggedIn"
        ; <emit-webdsl-code> def |[
            predicate x_loginfun()
            {
              securityContext.principal != null
            }
          ]|
        ; <register-reserved-function> (x_loginfun,0)
        ; rules (
            PrincipalDecl :+= acp
          )
        ; <declare-login> acp
  
  declare-override = 
      PrincipalDecl => acp@AccessControlPrincipal(x_ident, props)
    ; with( <add-builtin-rule> AccessDeniedPageRule()   // add always
          ; <declare-override-login> acp
          ; try(add-ac-denied-page)
      )
    ; fail
  
  // only if not custom defined  
  add-ac-denied-page =
      not(<IsPage> "accessDenied")
    ; <emit-webdsl-code> DefaultAccessDeniedPage()
    