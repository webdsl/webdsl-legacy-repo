module org/webdsl/dsl/languages/access-control/declare

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/languages/access-control/-

rules

  normalize-declare: Predicate(f, args, e) -> Function(f, args, SimpleSort("Bool"), Block(Return(e)))

  declare: pred@Predicate(f, args, b) -> pred
    with  declare-normalized
      
  declare-ac = declare-ac-principal
  
  //declaration of principal
  // there can be only one of these
  declare-ac-principal : 
    acp@AccessControlPrincipal(x_ident,props){anno*} -> acp
    with <emit-webdsl-code> def |[
            session securityContext {
              principal   -> x_ident
              loggedIn    :: Bool := this.principal != null //for backwards comp
            }
          ]|
        ; x_loginfun := "loggedIn"
        ; <emit-webdsl-code> def |[
            predicate x_loginfun()
            {
              securityContext.principal != null
            }
          ]|
        ; <register-reserved-function> (x_loginfun,0)
        ; rules (
            PrincipalDecl :+= acp
          )
  
  get-ac-principal-type = PrincipalDecl; ?AccessControlPrincipal(<!SimpleSort(<id>)>,_)
    
  keep-position-anno = ?AccessControlDefinition(_,_)
  
  declare-ac :
    acr@AccessControlRule(ruletype,x_pagematchname,margs@MatchArgs(farg1,_),e,acrule*) -> acr
    with rules( AccessControlRule :+ ruletype -> acr )
  
  constraint-error = <AccessControlRule> "" //dummy use, AccessControlRule DR only used in plugin but DR cache will only look at rules called in front-end
         