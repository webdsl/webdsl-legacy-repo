module org/webdsl/dsl/languages/styling/transformation/rename

imports 
  libstrategolib
  
imports 
  libwebdsl-front

rules

  rename-all-layout =
    {| RenameSelector
     : alltd(gather-rename-rules)
     ; rename-layout
     |}
  
  rename-layout =
    RenameSelector
    <+ rename-layout-section
    <+ rename-layout-definition
    <+ rename-named-layout-expression
    <+ rename-style-section
    <+ rename-style-definition
    <+ rename-style-decl
    <+ rename-style-var-decl
    <+ rename-style-var-decl-init
    <+ rename-selector
    <+ rename-simple-selector
    <+ all(rename-layout)
  
  gather-rename-rules =
    ?NamedLayoutExpression(name, expr*)
    ; with (
        x := <newname> name
        ; rules ( RenameSelector : name -> x )        
      )
           
  rename-layout-section :
    LayoutSection(def1*) -> LayoutSection(def2*)
    with {| InSection
           : rules ( InSection := True() )
           ; def2* := <rename-layout> def1*
           |}
           
  rename-layout-definition :
    LayoutDefinition(type, matchdef1, stat1*) -> <declare-layout-definition> LayoutDefinition(type, matchdef2, stat2*)
    with {| InDef
           : MatchDefinition(name1, arg*) := matchdef1
           ; t1* := <map(?Arg(_,<id>))> arg*
           ; if <is-call-to-overloaded-template> name1 then
               name2 := <OverloadedTemplateSignature> (name1, t1*)
               ; matchdef2 := MatchDefinition(name2, arg*)
             else
               name2 := name1
               ; matchdef2 := matchdef1
             end
           ; rules ( InDef := (name2, t1*) )
           ; stat2* := <rename-layout> stat1*
           |}

  rename-layout-definition :
    LayoutDefinition(matchdef1, stat1*) -> <declare-layout-definition> LayoutDefinition(matchdef2, stat2*)
    with {| InDef
           : MatchDefinition(name1, arg*) := matchdef1
           ; t1* := <map(?Arg(_,<id>))> arg*
           ; if <is-call-to-overloaded-template> name1 then
               name2 := <OverloadedTemplateSignature> (name1, t1*)
               ; matchdef2 := MatchDefinition(name2, arg*)
             else
               name2 := name1
               ; matchdef2 := matchdef1
             end
           ; rules ( InDef := (name2, t1*) )
           ; stat2* := <rename-layout> stat1*
           |}

  rename-named-layout-expression :
    NamedLayoutExpression(n1, expr*) -> <declare-layout-expression> NamedLayoutExpression(n2, expr*)
    with n2 := <rename-layout> n1
  
  rename-style-section :
    StyleSection(name, def1*) -> StyleSection(name, def2*)
    with def2* := <rename-layout> def1*

           
  rename-style-definition :
    StyleDefinition(sel1, stat*) -> <declare-style-definition> StyleDefinition(sel2, stat*)
    with sel2 := <rename-layout> sel1

  rename-style-decl :
    StyleDeclaration(prop1, val1) -> StyleDeclaration(prop1, val1)   

  rename-style-var-decl :
    StyleVarDecl(x, srt) -> StyleVarDecl(x, srt)

  rename-style-var-decl-init :
    StyleVarDeclInit(x, srt, e) -> StyleVarDeclInit(x, srt, e)
        
  rename-selector :
    Selector(s1, s1*) -> Selector(s2, s2*)
    with s2 := <rename-layout> s1
        ; s2* := <map(rename-layout)> s1*
  
  rename-selector :
    (c, selector1) -> (c, selector2)
    where  selector2 := <rename-layout> selector1
  
  rename-simple-selector :
    SimpleSelector(type, matchdef1) -> SimpleSelector(type, matchdef2)
    with MatchDefinition(name1, arg*) := matchdef1
        ; t1* := <map(?Arg(_,<id>))> arg*
        ; if <is-call-to-overloaded-template> name1 then
            name2 := <OverloadedTemplateSignature> (name1, t1*)
            ; matchdef2 := MatchDefinition(name2, arg*)
          else
            matchdef2 := matchdef1
          end

  rename-simple-selector :
    SimpleSelector(n1) -> SimpleSelector(n2)
    with n2 := <rename-layout> n1

