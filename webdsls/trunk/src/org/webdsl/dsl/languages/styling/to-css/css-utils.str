module org/webdsl/dsl/languages/styling/to-css/css-utils

imports 
  libstrategolib  
  libjava-front 
  libwebdsl-front

rules

  add-simple-selectors :
    (CSSSimpleSelector(s1), CSSSimpleSelector(s2)) -> CSSSelector(CSSSimpleSelector(s1), [CSSDescendantCombinator, CSSSimpleSelector(s2)])

  selector-to-class :
    SimpleSelector(type, MatchDefinition(n, farg*)) -> CSSSimpleSelector(Class(name))
    with name := <match-definition-to-string> (n, farg*)

  match-definition-to-class :
    MatchDefinition(n, farg*) -> CSSSimpleSelector(Class(name))
    where not ( <is-xhtml-element> n )
        ; name := <match-definition-to-string> (n, farg*)

  match-definition-to-class :
    MatchDefinition(n, farg*) -> CSSSimpleSelector(ElementName(n))
    where <is-xhtml-element> n

  match-definition-to-string :
    (n, farg*) -> name
    with types := <map(arg-to-identification-string <+ !"")> farg*
        ; arg-string := <list-to-separated-string(|"_") <+ ![]> types
        ; if <?[]> arg-string then
            name := n
          else
            name := <concat-strings> [n, "_", arg-string]
          end

  arg-to-identification-string :
    Arg(_, GenericSort(t, [SimpleSort(s)])) -> <concat-strings> [<lower-case> s, "_", <lower-case> t]

  arg-to-identification-string :
    Arg(_, SimpleSort(s)) -> <lower-case> s

rules

  name-to-css-id:
    name -> <concat-strings> ["#", name] 

  name-to-css-class:
    name -> <concat-strings> [".", name]
  
rules

  value-to-color:
    val1 -> expr |( val2 )|
    where val2 := Hash(val1)
    
  color-to-css :
    StyleValue(Hash(val1)) -> <value-to-color> val1
  
  color-to-css :
    StyleValue(StyleSort("Color"), [StyleValueExtension(val1)]) -> expr |( val1 )|
   
  
  value-to-negative-value:
    val -> <concat-strings> ["-", val]

rules

//  style-selector-to-css =
    

rules

  set-background-color :
    (sel, val) -> <emit-css-rules> rule* |( sel { background-color: val; } )|
    
    
strategies
  output-generated-file-styling =
    css-file-to-file

signature
  constructors
    CssFile : String * String * Document -> File

strategies

  css-file-to-file =
    css-file-to-text-file
    ; try(text-file-to-file)

  css-file-to-text-file :
    CssFile(pkg, name, doc) -> TextFile(filename, text)
    with path := <create-dirs> pkg
            ; filename := <concat-strings> [path, "/", name]
            ; text := <pp-css-to-string <+ write-to-string> doc
   
