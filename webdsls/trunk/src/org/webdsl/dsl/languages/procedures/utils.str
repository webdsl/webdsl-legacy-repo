module org/webdsl/dsl/languages/procedures/utils

imports
  libstrategolib
  libwebdsl-front
  
rules

  procedure-who-exp =
    ?def|[ procedure x_id (x_o : srt) { procelem* } ]|; !<filter(procedure-who-exp); Hd> procelem*
    <+ ?procelem|[ who { e } ]|; !e
    <+ !True()
    
  procedure-view-elems :
    def|[ procedure x_id (x_o : srt) { procelem* } ]| -> 
    <filter(procedure-view-elems); concat> procelem*
    
  procedure-view-elems :
    procelem|[ view { elem* } ]| -> elem*

  get-procedure-do-statements(|x_o, x_id) =
    stat_all* := <filter(procedure-do-statements); concat; add-procedure-done(|x_o, x_id)> // get do statements and add call to done()
    ; stat_do* := <filter(not({e: ?webdsl|[ return e; ]| <+ ?webdsl|[ goto e; ]|}))> stat_all* // no returns or goto's in do

  procedure-do-statements :
    def|[ procedure x_id (x_o : srt) { procelem* } ]| -> 
    <filter(procedure-do-statements); concat> procelem*
  
  procedure-do-statements :
    procelem|[ do { stat* } ]| -> stat*

  procedure-enabled-statements :
    procelem|[ enabled { stat* } ]| -> stat*

  procedure-disabled-statements :
    procelem|[ disabled { stat* } ]| -> stat*

  procedure-done-statements :
    procelem|[ done { stat* } ]| -> stat*

  procedure-processed-statements :
    procelem|[ processed { stat* } ]| -> stat*

  procedure-get-access-exp(|x_o, x_id) =
    filter(procedure-who-when-exp)
    ; foldr(!exp|[ x_o.x_id.isEnabled ]|, exp-and)
    
  procedure-get-self-access-exp =
    filter(procedure-who-when-exp)
    ; foldr(!exp|[ this.isEnabled ]|, exp-and)

  procedure-when-exp =
    ?def|[ procedure x_id (x_o : srt) { procelem* } ]|; !<filter(procedure-when-exp); Hd> procelem* 
    <+ ?procelem|[ when { e } ]|; !e 
    <+ !True()
  
  procedure-who-when-exp =
    procedure-who-exp 
    <+ procedure-when-exp
    
rules // Utilities

  add-view-page-return(|x_viewpage, e) :
    stats -> stats2
    where if [] := <collect(?Return(_) <+ ?GoTo(_))> stats then
            stats2 := <concat> [stats, [ webdsl|[ return x_viewpage(e); ]| ]]
          else
            stats2 := stats
          end

  add-view-page-goto(|x_viewpage, e) :
    stats -> stats2
    where if [] := <collect(?Return(_) <+ ?GoTo(_))> stats then
            stats2 := <concat> [stats, [ webdsl|[ goto x_viewpage(e); ]| ]]
          else
            stats2 := stats
          end

  exp-and : (e1, e2) -> And(e1, e2)
  exp-or : (e1, e2) -> Or(e1, e2)

rules // translating object parameters for use within ProcedureStatus entities

  translate-object-param(|x_o) =
    ?ProcedureWho(_) <+ ?ProcedureWhen(_) <+ ?ProcedureView(_)

  translate-object-param(|x_o) :
    Var(x_o) -> FieldAccess(Var("this"), <strip-annos> x_o)

  translate-object-param(|x_o) :
    Qualified(x_o, f) -> Qualified(Qualified("this", <strip-annos> x_o), <strip-annos> f)

/* Future music ;)
rules // renaming procedure names to property names in entities

  translate-procedure-to-property : x_id -> <concat-strings> ["_proc_", x_id]
  */
