module org/webdsl/dsl/languages/procedures/rename

imports
  libstrategolib
  libwebdsl-front

rules // Renaming

  rename-procedures :
    def@def|[ procedure x_id (x_o1 : srt) { procelem1* }  ]| -> 
      <declare-procedure <+ debug(!"Could not declare procedure: ")> def|[ procedure x_id (x_o2 : srt) { procelem2* }  ]| 
    with {| Rename, InDef, InPage, InProcedure
          : rules ( InDef := True() )
          ; rules ( InProcedure := True() )
          ; rules ( InPage := x_id )
          ; x_o2 := <rename-bound(|srt)> x_o1
          ; <rename-bound(|SimpleSort(<concat-strings; capitalize-string> [x_id, "ProcedureStatus"]))> "this"
          ; <rename-actions> elem|[ action do() { } ]|
          ; procelem2* := <rename-all> procelem1*
          ; declare-procedure-status
//          ; <declare-entity-constructor> srt
          |}
  
  rename-procedures :
    def@def|[ auto procedure x_id (x_o1 : srt) { procelem1* }  ]| -> 
      <declare-procedure <+ debug(!"Could not declare procedure: ")> def|[ auto procedure x_id (x_o2 : srt) { procelem2* }  ]| 
    with {| Rename, InDef, InPage
          : rules ( InDef := True() )
          ; rules ( InProcedure := True() )
          ; rules ( InPage := x_id )
          ; x_o2 := <rename-bound(|srt)> x_o1
          ; <rename-bound(|SimpleSort(<concat-strings; capitalize-string> [x_id, "ProcedureStatus"]))> "this"
          ; <rename-actions> elem|[ action do() { } ]|
          ; procelem2* := <rename-all> procelem1*
          ; declare-procedure-status
//          ; <declare-entity-constructor> srt
          |}

  rename-procedures :
    def@def|[ extend procedure x_id (x_o1 : srt) { procelem1* }  ]| -> 
      def|[ extend procedure x_id (x_o2 : srt) { procelem2* }  ]| 
    with {| Rename, InDef, InPage
          : rules ( InDef := True() )
          ; rules ( InProcedure := True() )
          ; rules ( InPage := x_id )
          ; x_o2 := <rename-bound(|srt)> x_o1
          ; <rename-bound(|SimpleSort(<concat-strings; capitalize-string> [x_id, "ProcedureStatus"]))> "this"
          ; procelem2* := <rename-all> procelem1*
          |}

strategies // Declaring
/*
  declare-entity-constructor = try(do-once(
    ?SimpleSort(x)
    ; x_create := <concat-strings> ["new", x]
    ; <declare-global-func> def|[ function x_create() : x { } ]|
   | "declare-entity-constructor"))
*/

  declare-procedure-status = try(<do-once(
     with(id
      ; <declare-entity> def|[
        entity ProcedureStatus {
          name        :: String
          isEnabled   :: Bool
          isProcessed :: Bool
          date        :: DateTime
          caller      -> ProcedureStatus
          returnstate :: Int
          branch      :: Int
          
          function notifyOfActivity(branch : Int) {
            this.cascadeNotification();
          }
          
          function cascadeNotification() {
            if(this.caller != null && this.branch != null) {
              this.caller.notifyOfActivity(this.branch);
            }
          }

          function disable() { }
          function disabled() { }
          function enable() { }
          function enable(c : ProcedureStatus, r : Int, b : Int) { }
          function enabled() { }
          function do() { }
          function done() { }
          function next(state : Int) { }
          function processed() { }
        }
      ]|
     ; <declare-page-definition> def|[ define page procedureStatus(s : ProcedureStatus) { } ]|)
    | "declare-procedure-status")> None())


  declare-procedure =
    (  ?def@def|[ procedure x_id (x_o : srt) { procelem* }]|
    <+ ?def@def|[ auto procedure x_id (x_o : srt) { procelem* }]|
    )
    ; with (id
      ; who-exp := <procedure-who-exp> def
      ; when-exp := <procedure-when-exp> def
      ; e_when := when-exp
      ; SimpleSort(s) := srt
      ; hasopfun := <concat-strings> [<decapitalize-string> s, "HasProcedures"]
      ; procstatus := x_id
      ; rules ( 
          IsProcedure      : x_id 
          ProcedureWho     : x_id -> who-exp
          ProcedureWhen    : x_id -> exp|[
                               x_o.x_id != null && x_o.x_id.isEnabled && e_when
                             ]|
          ProcedureArg     : x_id -> x_o
          ProcedureArgSort : x_id -> srt
          Procedures       :+ srt -> x_id 
          CheckGeneratedGlobalFunctionSignature : 
            (None(), hasopfun, [srt]) -> SimpleSort("Bool")
          ProcedureEntities :+= srt 
        )
      ; if [] := <procedure-view-elems> def then
          rules ( IsDoProcedure : x_id )
        end
        
      // for typechecking, these declares are executed early (and overwritten later)
      ; <declare-page-definition> def|[ define page x_id (x_o : srt) { } ]|
      ; <declare-function(|s)> Function(<concat-strings> ["prepare", <capitalize-string> x_id], [], SimpleSort("Void"), []) 
      ; <declare-function(|s)> Function(<concat-strings> ["start", <capitalize-string> x_id], [], SimpleSort("Void"), []) 
      ; p := <concat-strings> [<capitalize-string> x_id, "ProcedureStatus"]
      ; <declare-function(|p)> Function("canPerform", [], SimpleSort("Bool"), []) 
      ; <temp-declare-entity-template> def
      ; temp-declare-all-tasks-page
      ; <temp-declare-entity-task-page> def
      ; <temp-declare-entity-status-page> def
      ; <temp-procedure-to-page> def
    )
  
  temp-declare-entity-template =
    (  ?def@def|[ procedure x_id (x_o : srt) { procelem* }]|
    <+ ?def@def|[ auto procedure x_id (x_o : srt) { procelem* }]|
    )
    ; SimpleSort(ent) := srt
    ; x1     := <concat-strings> [<decapitalize-string> ent, "Procedures"]
    ; x2     := <concat-strings> [<decapitalize-string> ent, "ProceduresList"]
    ; x_arg  := <decapitalize-string> ent
    ; srt    := SimpleSort(ent)
    ; <declare-template-definition> def|[ define x2(x_arg : srt) {} ]|
    ; <declare-template-definition> def|[ define x1(x_arg : srt) {} ]|
  
  temp-declare-entity-task-page =
    (  ?def@def|[ procedure x_id (x_o : srt) { procelem* }]|
    <+ ?def@def|[ auto procedure x_id (x_o : srt) { procelem* }]|
    )
    ; SimpleSort(ent) := srt
    ; x_page := <concat-strings> [<decapitalize-string> ent, "Tasks"]
    ; x_ent := <decapitalize-string> ent
    ; e := Var(x_ent)
    ; x2 := <concat-strings> [<decapitalize-string> x_ent, "TaskList"]
    ; x3 := <concat-strings> [<decapitalize-string> x_ent, "HasProcedures"]
    ; <declare-global-func> def|[ function x3(x_ent : srt) : Bool { } ]|
    ; <declare-template-definition> def|[ define x2() {} ]|
    ; <declare-page-definition> def|[ define page x_page() {} ]|
  
  temp-declare-all-tasks-page =
    <declare-page-definition> def|[ define page allTasks() {} ]|
      
  temp-declare-entity-status-page =
    (  ?def@def|[ procedure x_id (x_o : srt) { procelem* }]|
    <+ ?def@def|[ auto procedure x_id (x_o : srt) { procelem* }]|
    )
    ; SimpleSort(ent) := srt
    ; x_page := <concat-strings> [<decapitalize-string> ent, "Status"]
    ; x_ent := <decapitalize-string> ent
    ; x2 := <concat-strings> [<decapitalize-string> x_ent, "StatusList"]
    ; <declare-template-definition> def|[ define x2() {} ]|
    ; <declare-page-definition> def|[ define page x_page() {} ]|
  
  temp-procedure-to-page =
    (  ?def@def|[ procedure x_id (x_o : srt) { procelem* }]|
    <+ ?def@def|[ auto procedure x_id (x_o : srt) { procelem* }]|
    )
    ; with(id
      ; x_Status := <concat-strings> [<capitalize-string> x_id, "ProcedureStatus"]
      ; x_status := <decapitalize-string> x_Status
      ; x_obj := <strip-annos> x_o
      ; <declare-entity> def|[
          entity x_Status : ProcedureStatus {
            x_obj -> srt
            function enabled() { }
            function disabled() { }
            function do() { }
            function done() { }
            function processed() { }
          }
        ]|
      ; SimpleSort(x_ent) := srt
      ; <declare-extend-entity> def|[
          extend entity x_ent {
            x_id <> x_Status ()
          }
        ]|
      ; <declare-page-definition> def|[ define page x_status(s : x_Status) { action do() {}} ]|
    )
