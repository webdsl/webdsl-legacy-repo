module org/webdsl/dsl/languages/native/declare-class

strategies

  declare-native = declare-native-class  

  IsNativeClass = where(?SimpleSort(<id>); NativeClassDecl)
  NativeClassQualifiedName = NativeClassDecl; ?NativeClass(<id>, _, _, _) 
  Extends = NativeClassDecl; ?NativeClass(_,_,NativeClassSuper(<id>),_)
  // native class without super extends 'Object'
  Extends = NativeClassDecl; ?NativeClass(_,_,None(),_); !"Object"

  declare-native-class :
    def@NativeClass(class,as,super,elems) -> def
    with  props := <filter(?NativeClassProperty(_,_))> elems
        ; funcs := <filter(?NativeClassFunction(_,_,_,_)<+?NativeClassFunctionFromStatic(_,_))> elems
        ; cons  := <filter(?NativeClassConstructor(_))> elems
        ; if alias := <?NativeClassAlias(<id>)> as
          then name := alias
          else name := class end 
        ; rules( NativeClassDecl : name -> def )
        ; declare-native-class-static-functions(|name, class)
        ; <map(\prop -> <rules(Properties :+ name -> prop); declare-native-class-prop(|name)> \)> props
        ; <map(\func -> <rules(Functions :+ name -> func); declare-native-class-func(|name)> \)> funcs
        ; <map(normalize-native-constructor(|name); declare-global-func)> cons
       
  normalize-declare: NativeClass(class,as,super,elems) -> NativeClass(class,as,super,newelems)
    with  elems1* := <remove-all(?NativeClassConstructor(_))> elems
        ; realname := <try(?NativeClassAlias(<id>))> as
        ; elems2* := <filter(?NativeClassConstructor(_); normalize-native-constructor(|realname))> elems
        ; newelems := [elems1*, elems2*]
    where not([] := elems2*)    // avoid infinite loop
    
  normalize-native-constructor(|class): ncf@NativeClassConstructor(args) -> Function(class, farg*, SimpleSort(class), None())
    with  farg* := <map(native-type-to-webdsl-type; !Arg("dummy", <id>))> args

  declare-native-class-static-functions(|name,class) =
    rules(
      TypeOf : name -> ClassSort(name){NativeClassAnno(name,class)}
      TypeOf : Var(name) -> ClassSort(name){NativeClassAnno(name,class)}
    )

  normalize-declare: NativeClassProperty(name,type) -> Property(name, Simple(), <native-type-to-webdsl-type> type, [])
        
  declare-native-class-prop(|class):
    ncp@NativeClassProperty(name,type) -> ncp
    with  webdsltype := <native-type-to-webdsl-type> type
        ; prop := <with-origin(normalize-declare)> ncp
        ; rules( //use same DRs as entity for now, might need specialized DRs 
            TypeOfProperty : (class,name) -> webdsltype
            IsProperty     : (class,name)
            PropertyDecl   : (class,name) -> prop
          )
          
  native-type-to-webdsl-type :
    NativeSimpleType(a) -> SimpleSort(a)
  native-type-to-webdsl-type :
    NativeGenericType(a,b) -> GenericSort(a,<map(native-type-to-webdsl-type)> b)
  
  normalize-declare: NativeClassFunction(static,name,args1,ret1){anno*} -> Function(name, args2, ret2, None()){anno*}
    with  args2 := <map(native-type-to-webdsl-type; !Arg("dummy", <id>))> args1
        ; ret2 := <?NativeClassFunctionReturn(<native-type-to-webdsl-type>) <+ !SimpleSort("Void")> ret1
  
  declare-native-class-func(|class):
    NativeClassFunctionFromStatic(staticfuncqid,ncf) -> <declare-type-def-native-class-func-helper(|class, staticfuncqid)> ncf
  
  declare-native-class-func(|class):
    ncf@NativeClassFunction(static,name,args,return) -> ncf
    with  t1* := <map(native-type-to-webdsl-type)> args
        ; if staticfunction := <?NativeClassFunctionStatic()> static
          then  callee := ClassSort(class)
          else  callee := SimpleSort(class) 
          end
        ; f := <with-origin(normalize-declare)> ncf
        ; rules( 
            CheckNativeFunctionSignatureArgumentTypes :+
              (callee, name, t2*) -> t1* where <zip(type-compatible)> (t1*, t2*)
            
            NativeFunctionDecl : (callee, name, t1*) -> f
          )

  resolve-function-call-to-decl: 
    p@(callee, fname, t*) -> f
    where targ-resolved* := <resolve-function-call(bagof-CheckNativeFunctionSignatureArgumentTypes | t*, fname)> p
        ; f := <NativeFunctionDecl> (<strip-annos> callee, <strip-annos> fname, targ-resolved*)

  type-exists-native = IsNativeClass
  
  type-default-value = 
     IsNativeClass
    ; !exp |[ null ]|
