module org/webdsl/dsl/languages/native/declare-class

strategies

  declare-native = declare-native-class  

  declare-native-class :
    NativeClass(class,as,super,elems) -> []
    with  props := <filter(?NativeClassProperty(_,_))> elems
        ; funcs := <filter(?NativeClassFunction(_,_,_))> elems
        ; cons  := <filter(?NativeClassConstructor(_))> elems
        ; if alias := <?NativeClassAlias(<id>)> as
          then name := alias
          else name := class end         
        ; rules( 
            IsNativeClass : SimpleSort(name) 
            Properties :
              name -> props
            Functions :
              name -> funcs
            NativeClassName : SimpleSort(name) -> class
          )
        ; if sup := <?NativeClassSuper(<id>)> super
          then rules( Extends : name -> sup ) end
        ; <map(declare-native-class-prop(|name))> props
        ; <map(declare-native-class-func(|name))> funcs
        ; <map(declare-native-class-cons(|name,class))> cons
        
  declare-native-class-prop(|class):
    ncp@NativeClassProperty(name,type) -> ncp
    with  rules( //use same DRs as entity for now, might need specialized DRs 
            TypeOfProperty : (class,name) -> SimpleSort(type) 
            IsProperty     : (class,name)
          )
  
  declare-native-class-func(|class):
    ncf@NativeClassFunction(name,args,returntype) -> ncf
    with  t1* := <map(!SimpleSort(<id>))> args
        ; if rettypename := <?NativeClassFunctionReturn(<id>)> returntype
          then  ret := rettypename
          else  ret := "Void" 
          end 
        ; rules( CheckFunctionSignature :+
                    (SimpleSort(class), name, t2*) -> SimpleSort(ret)
                        where <zip(type-compatible)> (t1*, t2*)
                 
          )
          
  declare-native-class-cons(|class,fullyqualified):
    ncf@NativeClassConstructor(args) -> ncf
    with  t1* := <map(!SimpleSort(<id>))> args
        ; rules( CheckFunctionSignature :+
                    (None(), class, t2*) -> SimpleSort(class)
                        where <zip(type-compatible)> (t1*, t2*)
                 NativeClassConstructorQualifiedName : class -> fullyqualified
                 
          )

  type-exists-native = IsNativeClass
  
  native-class-type-default-value = !exp |[ null ]|
    
  