module org/webdsl/dsl/languages/native/declare-class

strategies

  declare-native = declare-native-class  

  IsNativeClass = where(?SimpleSort(<id>); NativeClassDecl)
  NativeClassQualifiedName = NativeClassDecl; ?NativeClass(<id>, _, _, _) 
  Extends = NativeClassDecl; ?NativeClass(_,_,NativeClassSuper(<id>),_)

  declare-native-class :
    def@NativeClass(class,as,super,elems) -> []
    with  props := <filter(?NativeClassProperty(_,_))> elems
        ; funcs := <filter(?NativeClassFunction(_,_,_,_))> elems
        ; cons  := <filter(?NativeClassConstructor(_))> elems
        ; if alias := <?NativeClassAlias(<id>)> as
          then name := alias
          else name := class end 
        ; rules( 
            NativeClassDecl : name -> def
            Properties :
              name -> props
            Functions :
              name -> funcs
            //static functions
            TypeOf : name -> ClassSort(name){NativeClassAnno(name,class)}
            TypeOf : Var(name) -> ClassSort(name){NativeClassAnno(name,class)}
          )
        ; <map(declare-native-class-prop(|name))> props
        ; <map(declare-native-class-func(|name))> funcs
        ; <map(declare-native-class-cons(|name,class))> cons
        
  declare-native-class-prop(|class):
    ncp@NativeClassProperty(name,type) -> ncp
    with  webdsltype := <native-type-to-webdsl-type> type
        ; rules( //use same DRs as entity for now, might need specialized DRs 
            TypeOfProperty : (class,name) -> webdsltype
            IsProperty     : (class,name)
          )
          
  native-type-to-webdsl-type :
    NativeSimpleType(a) -> SimpleSort(a)
  native-type-to-webdsl-type :
    NativeGenericType(a,b) -> GenericSort(a,<map(native-type-to-webdsl-type)> b)
  
  declare-native-class-func(|class):
    ncf@NativeClassFunction(static,name,args,return) -> ncf
    with  t1* := <map(native-type-to-webdsl-type)> args
        ; if rettype := <?NativeClassFunctionReturn(<id>)> return
          then  ret := <native-type-to-webdsl-type> rettype
          else  ret := SimpleSort("Void") 
          end 
        ; if staticfunction := <?NativeClassFunctionStatic()> static
          then  callee := ClassSort(class)
          else  callee := SimpleSort(class) 
          end 
        ; rules( CheckFunctionSignature :+
                    (callee, name, t2*) -> ret
                        where <zip(type-compatible)> (t1*, t2*)
                 
          )
          
  declare-native-class-cons(|class,fullyqualified):
    ncf@NativeClassConstructor(args) -> ncf
    with  t1* := <map(native-type-to-webdsl-type)> args
        ; rules( CheckFunctionSignature :+
                    (None(), class, t2*) -> SimpleSort(class)
                        where <zip(type-compatible)> (t1*, t2*)
          )

  type-exists-native = IsNativeClass
  
  type-default-value = 
     IsNativeClass
    ; !exp |[ null ]|
   
signature
  constructors
    ClassSort : Id -> Sort
    
  