module org/webdsl/dsl/languages/search/declare

imports
  libstrategolib

imports
  libwebdsl-front
  libjava-front
  org/webdsl/dsl/languages/search/-
  org/webdsl/dsl/modules/search
  org/webdsl/dsl/languages/data-model/declare

rules //rename FieldsConstraint for list creations
  rename-search:
      FieldsConstraint(fields){anno*} -> FieldsConstraint(fields1){anno1*}
        with  anno1* := <put-closure-in-anno> anno*
      ; fields1 := <rename-all> fields

rules

declare-search:
    s@SearchMapping(x_class, mappings) -> s
    with <map(declare-search-mapping(|x_class))> mappings
       ; rules( IndexedEntity : x_class )

declare-search:
    f@FullTextAnalyzer(is-default, analyzer-name, body) -> f
    with if (<?DualFullTextAnalyzerBodyDef(_,_,_,_)> body)
         then rules( IsDualAnalyzer : analyzer-name)
         end
       ; rules( AnalyzerDefFromName :+ analyzer-name -> f)
       ; if (<?Some(kw)> is-default)
         then rules ( AnalyzerDefFromName :+ kw -> f )
         end

declare-search-mapping(|x_class):
    s@SearchFieldMapping(_, propname, parts) -> s
    with rules ( SearchMappingForProp :+ (x_class, propname) -> s)
       ; <declare-search-field(|x_class)> s
       

declare-search-mapping(|x_class):
    s@SearchNamespaceMapping(propname) -> s
    with rules ( SearchNamespaceForProp: (x_class, propname) -> s
                 SearchNamespaceForEnt : x_class -> propname)
                 
declare-search-field(|x_class):
    s@SearchFieldMapping(_, propname, parts) -> s
    with fieldname := < (fetch(?FieldName(n)); !n)  <+ !propname> parts
       ; rules( SearchFieldToPropName : (x_class, fieldname) -> propname )
       ; <map(try(declare-search-mapping-part(|x_class, fieldname)))> parts
         
declare-search-mapping-part(|x_class, fieldname):
    m@AnalyzerName(analyzer-name) -> m
    with if(<not(?"no" <+ ?"null"<+ ?"none")> analyzer-name)
         then rules (AnalyzerInUse :+= analyzer-name) end
    
declare-search-mapping-part(|x_class, fieldname):
    s@EmbeddedDepth(depth) -> s
    with rules (SearchFieldOverriddenEmbeddedDepth : (x_class, fieldname) -> <string-to-int> depth )

declare-search-mapping-part(|x_class, fieldname):
    s@TargetEntity(subType) -> s
    with rules (SearchFieldOverriddenType : (x_class, fieldname) -> subType )

         
declare-searchable-anno(|x_class, propname) = (?SearchableAnno() <+ ?SimpleAnno("searchable") ); rules( SearchFieldToPropName : (x_class, propname) -> propname)

declare-searchable-anno(|x_class, propname) = 
  (?SearchableAnno(args) <+ ?SearchableAnnoBoost(args, _))
  ; fieldname := <fetch(?SA-Argument("name", <id>)) <+ !propname> args
  ; rules( SearchFieldToPropName : (x_class, fieldname) -> propname)
  ; <map(try(declare-searchable-anno-arg(|x_class, fieldname)))> args

declare-searchable-anno-arg(|x_class, fieldname):
    s@SA-Argument("analyzer", analyzer-name) -> s
    with if(<not(?"no" <+ ?"null"<+ ?"none")> analyzer-name)
         then rules (AnalyzerInUse :+= analyzer-name) end
    
declare-searchable-anno-arg(|x_class, fieldname):
    s@SA-Argument("depth", depth) -> s
    with rules( SearchFieldOverriddenEmbeddedDepth : (x_class, fieldname) -> <string-to-int>depth)
    
declare-searchable-anno-arg(|x_class, fieldname):
    s@SA-Argument("subclass", subType) -> s
    with rules( SearchFieldOverriddenType : (x_class, fieldname) -> subType )
         

after-tc-declare-hook = emit-and-declare-dummy-entity; fail

   //The dummy_webdsl_entity is used to hold hibernate search annotations in the generated java code that
   //need to be defined once, like full text filters and analyzers.
   emit-and-declare-dummy-entity =
     with(result :=
           EntityNoSuper("dummy_webdsl_entity",
             [Property("text",Simple(),SimpleSort("String"), [SearchableAnno()])]
           )
     ; <emit-webdsl-code> result)

declare-native-search-query-class:
    x_class -> x_class
    with query_class_name := <concat-strings> [x_class, "Searcher"]
        ; rules(SearcherTargetType : query_class_name -> SimpleSort(x_class))
        ; <declare>
        NativeClass(
            Qualified(Qualified(Qualified("webdsl","generated"),"search"),query_class_name),
            NativeClassAlias(query_class_name),
            NativeClassSuper("Searcher"),
            [
               NativeClassConstructor([]),
               NativeClassFunction(NativeClassFunctionStatic(),"escapeQuery",[NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType("String"))),
               NativeClassFunction(NativeClassFunctionStatic(),"autoCompleteSuggest",[NativeSimpleType("String"),NativeSimpleType("String"),NativeSimpleType("String"),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeGenericType("List",[NativeSimpleType("String")]))),
               NativeClassFunction(NativeClassFunctionStatic(),"autoCompleteSuggest",[NativeSimpleType("String"),NativeSimpleType("String"),NativeGenericType("List",[NativeSimpleType("String")]),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeGenericType("List",[NativeSimpleType("String")]))),
               NativeClassFunction(NativeClassFunctionStatic(),"autoCompleteSuggest",[NativeSimpleType("String"),NativeSimpleType("String"),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeGenericType("List",[NativeSimpleType("String")]))),
               NativeClassFunction(NativeClassFunctionStatic(),"autoCompleteSuggest",[NativeSimpleType("String"),NativeGenericType("List",[NativeSimpleType("String")]),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeGenericType("List",[NativeSimpleType("String")]))),
               NativeClassFunction(NativeClassFunctionStatic(),"spellSuggest",[NativeSimpleType("String"),NativeSimpleType("String"),NativeGenericType("List",[NativeSimpleType("String")]),NativeSimpleType("Float"),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeGenericType("List",[NativeSimpleType("String")]))),
               NativeClassFunction(NativeClassFunctionStatic(),"spellSuggest",[NativeSimpleType("String"),NativeSimpleType("String"),NativeSimpleType("String"),NativeSimpleType("Float"),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeGenericType("List",[NativeSimpleType("String")]))),
               NativeClassFunction(NativeClassFunctionStatic(),"spellSuggest",[NativeSimpleType("String"),NativeGenericType("List",[NativeSimpleType("String")]),NativeSimpleType("Float"),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeGenericType("List",[NativeSimpleType("String")]))),
               NativeClassFunction(NativeClassFunctionStatic(),"spellSuggest",[NativeSimpleType("String"),NativeSimpleType("String"),NativeSimpleType("Float"),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeGenericType("List",[NativeSimpleType("String")]))),
               NativeClassFunction(NativeClassFunctionStatic(),"fromString",[NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"allowLuceneSyntax",[NativeSimpleType("Bool")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"addFieldFilter",[NativeSimpleType("String"),NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"removeFieldFilter",[NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"clearFieldFilters",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"setNamespace",[NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"getNamespace",[],NativeClassFunctionReturn(NativeSimpleType("String"))),
               NativeClassFunction(None(),"removeNamespace",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"boost",[NativeSimpleType("String"),NativeSimpleType("Float")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"defaultAnd",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"defaultOr",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"enableFaceting",[NativeSimpleType("String"),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"enableFaceting",[NativeSimpleType("String"),NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"addFacetSelection",[NativeSimpleType("Facet")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"addFacetSelection",[NativeGenericType("List",[NativeSimpleType("Facet")])],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"removeFacetSelection",[NativeSimpleType("Facet")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"clearFacetSelection",[NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"clearFacetSelection",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"defaultFields",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"field",[NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"fields",[NativeGenericType("List",[NativeSimpleType("String")])],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"setOffset",[NativeSimpleType("Int")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"setLimit",[NativeSimpleType("Int")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"moreLikeThis",[NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"moreLikeThis",[NativeSimpleType("String"),NativeSimpleType("Int"),NativeSimpleType("Int"),NativeSimpleType("Int"),NativeSimpleType("Int"),NativeSimpleType("Int"),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"must",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"mustNot",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"should",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"startMustClause",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"startMustNotClause",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"startShouldClause",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"endClause",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"query",[NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"phraseQuery",[NativeSimpleType("String"),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"regexQuery",[NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"sortDesc",[NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"sortAsc",[NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"clearSorting",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"rangeQuery",[NativeSimpleType("Int"),NativeSimpleType("Int"),NativeSimpleType("Bool"),NativeSimpleType("Bool")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"rangeQuery",[NativeSimpleType("Float"),NativeSimpleType("Float"),NativeSimpleType("Bool"),NativeSimpleType("Bool")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"rangeQuery",[NativeSimpleType("Date"),NativeSimpleType("Date"),NativeSimpleType("Bool"),NativeSimpleType("Bool")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"rangeQuery",[NativeSimpleType("String"),NativeSimpleType("String"),NativeSimpleType("Bool"),NativeSimpleType("Bool")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"rangeQuery",[NativeSimpleType("Int"),NativeSimpleType("Int")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"rangeQuery",[NativeSimpleType("Float"),NativeSimpleType("Float")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"rangeQuery",[NativeSimpleType("Date"),NativeSimpleType("Date")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"rangeQuery",[NativeSimpleType("String"),NativeSimpleType("String")],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"matchAllQuery",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name))),
               NativeClassFunction(None(),"results",[],NativeClassFunctionReturn(NativeGenericType("List",[NativeSimpleType(x_class)]))),
               NativeClassFunction(None(),"reset",[],NativeClassFunctionReturn(NativeSimpleType(query_class_name)))
            ]
        )


rules 
  
  // get-simple-search-fields = bagof-SearchFields; flatten-list
  // get-ref-search-fields = bagof-SearchFieldsRef; flatten-list; map(get-ref-search-fields-recursive)
  // 
  // get-ref-search-fields-recursive:
  //   (targetType, 0, prefix ) -> []   
  //   
  // get-ref-search-fields-recursive:
  //   (targetType, depth, prefix ) -> result
  //   where <gt>(depth, 0)
  //   ; fields := <get-simple-search-fields; map(embedded-name(|prefix))> targetType
  //   ; if ( <gt>(depth, 1) )
  //     then embeddedFields := <bagof-SearchFieldsRef; flatten-list; map( upgrade-prefix(|prefix); get-ref-search-fields-recursive ); flatten-list> targetType
  //     end
  //   ; result := <concat>[ fields, embeddedFields]
  //     
  // upgrade-prefix(|headPrefix) = ?(t, d, prefix); !(t,d, <concat>[headPrefix, ".",prefix])
  
  
  
  has-search-field(|x_class) = ?SearchFieldPlain(_); ( has-search-field-no-super(|x_class) <+ has-search-field-super(|x_class) )
  	
  has-search-field-super(|x_class):
    s@SearchFieldPlain(_) -> s
    where super := <Extends; not( ?"Entity" )> x_class
        ; <has-search-field(|super)> s
    
  has-search-field-no-super(|x_class):
    s@SearchFieldPlain( fld ) -> s
  	where propname:= <SearchFieldToPropName <+ !fld > (x_class, fld)
  	    ; <is-simple-prop <+ ?(_, "_id") > (x_class, propname)
          
  is-simple-prop= ?(x_class, propname); PropertyDecl; is-simple-prop
      
    
    
    
  
  
  