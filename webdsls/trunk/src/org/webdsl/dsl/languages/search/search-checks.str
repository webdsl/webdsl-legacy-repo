module org/webdsl/dsl/languages/search/search-checks

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/languages/data-model/declare
  org/webdsl/dsl/languages/search/declare
  org/webdsl/dsl/typechecker/error

rules

  constraint-error-search:
    SearchMapping(x_ent, content) -> <id>
    where if ( <IsEntity> x_ent )
          then errors := <filter( constraint-error-searchmapping-content(|x_ent) )> content
             ; not(<?[]> errors)
          else add-error(|["unkown entity : ", x_ent])
          end

  constraint-error-searchmapping-content(|x_ent) =
      ?SearchNamespaceMapping(propname); not(<TypeOfProperty; ?SimpleSort(_)> (x_ent, propname)); add-error(|["only simple properties owned by ", x_ent , " can be used as namespace identifier"])

  constraint-error-searchmapping-content(|x_ent):
      s@SearchFieldMapping(_, propname, mappingparts) -> s
      where prop := <PropertyDecl <+ ![]> (x_ent, propname)
        ; if (<?[]> prop)
          then <add-error(|[propname, " is no property owned by ", x_ent])> propname
          else <filter(constraint-error-mapping-part(|prop)); not(?[])> mappingparts
          end


  constraint-error-searchmapping-content(|x_ent) =
      ?SearchFieldMapping(_, propname, mappingparts); not(<TypeOfProperty> (x_ent, propname) ); add-error(|[propname, " is no property owned by ", x_ent])

  constraint-error-mapping-part(|prop):
      t@AnalyzerName(name) -> t
      where if (<is-entity-or-collection-prop> prop)
            then <add-error(|["an analyzer can only be specified in a mapping for simple properties. For reference/composite properties, the analyzers should be specified in the search mapping of the embedded type"])> t
            else not (<AnalyzerDefFromName <+ ?"none" <+ ?"no" <+ ?"null"> name)
               ; <add-error(|["no analyzer defined with name: ", name])> name
            end

  constraint-error-mapping-part(|prop):
      t@EmbeddedDepth(_) -> t
      where <not (is-entity-or-collection-prop)> prop
          ; <add-error(|["depth of embedding can only be specified on a reference (->) or composite (<>) type property"])> t

  constraint-error-mapping-part(|prop):
      t@Boost(_) -> t
      where <is-entity-or-collection-prop> prop
          ; <add-error(|["a boost value can only be specified in a mapping for simple properties. For reference/composite properties, boost values should be specified in the search mapping of the embedded type"])> t

  constraint-error-mapping-part(|prop):
      t@TargetEntity(name) -> t
      where type := <get-property-type; try-strip-generic-sort> prop
          ; if (not (<is-entity-or-collection-prop> prop))
            then <add-error(|["a subclass can only be targeted on a reference (->) or composite (<>) type property"])> t
            else targetentity := <EntDecl <+ ![]> name
               ; if (<?[]> targetentity)
                 then <add-error(|["unknown entity: ", name])> name
                 else if (not ( <type-compatible> ( type, SimpleSort(name) ) ))
                      then <?SimpleSort(propertyClass)> type
                         ; <add-error(|[name, " is not a subclass of ", propertyClass])> name
                      else fail
                      end
                 end
            end

//Search language

  constraint-error-search:
      s@SearcherInit(x_ent, searcherparts) -> s
      where if not(<IndexedEntity> x_ent)
            then <add-error(|["Entity : ", x_ent , " is not searchable"])> x_ent
            else <alltd(constraint-error-searcher-part(|x_ent)); not(?[])> searcherparts
            end
           ; fail

  constraint-error-search:
      s@SearcherRefMod(x_searcher, searcherparts) -> s
      where t := <type-of; ?SimpleSort(<id>)> x_searcher
          ; targetentityname := < (SearcherTargetType; ?SimpleSort(ent); !ent ) <+ (?"Searcher"; !"Searcher") <+ ![]> t
          ; if (<?[]> targetentityname)
            then <add-error(|["expression '", <pp-webdsl> x_searcher, "' should be a searcher type, while type is ", t])> x_searcher
            else <alltd(constraint-error-searcher-part(|targetentityname)); flatten-list; not(?[])> searcherparts
            end
          ; fail

  constraint-error-searcher-part(|targetEnt):
      FieldFilterConstraint(field, _) -> []
      where <constraint-error-search-field> (targetEnt, field)

  constraint-error-searcher-part(|targetEnt):
      q@QuerySearchField(field, boost) -> []
      where <try(constraint-error-search-field)> (targetEnt, field)
        ; if (<?Some(QueryBoost(e_boost))> boost)
          then tp := <type-of> e_boost
             ; not(<type-compatible> (SimpleSort("Float") , tp))
             ; <add-error(|["A boost value should be type of 'Float', but is: ", <pp-type> tp])> e_boost
          end
          
            
  constraint-error-search-field:
      (targetEnt, fld@SearchFieldPlain( x )) -> []
      where <not(has-search-field(|targetEnt))> fld
          ; <add-error(|["'", x , "' is not a search field for ", targetEnt])> fld
          ; fail
            
  constraint-error-search-field = ?(targetEnt, SearchFieldPlain( x, _ )); constraint-error-search-field(| <embedded-depth-for-search-field> (targetEnt, x))
      
      
  constraint-error-search-field(|level) = ?(targetEnt, SearchFieldPlain( x )); constraint-error-search-field
      
  constraint-error-search-field(|level):
      (targetEnt, fld@SearchFieldPlain( name, rest )) -> []
	    where propname := <propname-from-search-field(|targetEnt)> (targetEnt, name)
	        ; prop := <get-property> (targetEnt, propname)
	        ; if ( <is-simple-prop> prop ) then
              <add-error(|["'", name , "' has no nested fields, since it refers to a simple type property '", propname, "' in entity '", targetEnt, "' or its super types"  ])> name
            else
              if( <gt> (level, 0) ) then
                targetType := <SearchFieldOverriddenType <+ (!prop; get-property-type; get-inner-type-name)> (targetEnt, name)
              ; <constraint-error-search-field(| <dec>level)> (targetType, rest)
              else
                <add-error(|[ "search field '",  name, "' cannot be resolved as embedded search field, you might want to increase the depth of embedding in the search mapping of (e.g. '", name , " with depth 2')", targetEnt ])> name            
            end        
        end
    
  propname-from-search-field(|origEnt) :
    t@(targetEnt, fieldname) -> result
    where if (propname := <SearchFieldToPropName> t) then
            result := propname
          else 
            super := <Extends> targetEnt
          ; if( not( <?"Entity"> super ) ) then
              result:= <propname-from-search-field(|origEnt)> (super, fieldname)
            else
              <add-error(|["'", fieldname , "' cannot be resolved as search field in entity '", origEnt, "' or its super types" ])> fieldname
            ; fail
            end
          end
          
  embedded-depth-for-search-field= SearchFieldOverriddenEmbeddedDepth <+ !1
      
     
  
    



