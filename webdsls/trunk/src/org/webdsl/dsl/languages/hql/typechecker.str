module org/webdsl/dsl/languages/hql/typechecker

rules

  type-of-query :
    QueryRule(SelectFrom(selection, FromClause(ranges)), _, _, _) -> GenericSort("List", [t])
    where not(<is-aggregate-function-selection> selection)
        ; t := <fetch-elem(get-type-from-range)> ranges

  is-aggregate-function-selection = ?Some(Select(None(),[AliasedExpression(CountStar(),_)]))
  is-aggregate-function-selection = ?Some(Select(None(),[AliasedExpression(Count(_),_)]))
  is-aggregate-function-selection = ?Some(Select(None(),[AliasedExpression(Max(_),_)]))
  is-aggregate-function-selection = ?Some(Select(None(),[AliasedExpression(Min(_),_)]))
  is-aggregate-function-selection = ?Some(Select(None(),[AliasedExpression(Avg(_),_)]))
  is-aggregate-function-selection = ?Some(Select(None(),[AliasedExpression(Sum(_),_)]))

  type-of-query : QueryRule(SelectFrom(Some(Select(None(),[AliasedExpression(CountStar(),_)])),_), _, _, _) -> SimpleSort("Int")
  type-of-query : QueryRule(SelectFrom(Some(Select(None(),[AliasedExpression(Count(_) ,_)])),_), _, _, _) -> SimpleSort("Int")
    
  type-of-query : QueryRule(SelectFrom(Some(Select(None(),[AliasedExpression(Max(Path([entalias,prop])), _)])),FromClause(ranges)), _, _, _) -> <type-of-hql-maxminsum> (prop,ranges)
  type-of-query : QueryRule(SelectFrom(Some(Select(None(),[AliasedExpression(Min(Path([entalias,prop])), _)])),FromClause(ranges)), _, _, _) -> <type-of-hql-maxminsum> (prop,ranges)
  type-of-query : QueryRule(SelectFrom(Some(Select(None(),[AliasedExpression(Sum(Path([entalias,prop])), _)])),FromClause(ranges)), _, _, _) -> <type-of-hql-maxminsum> (prop,ranges)
  type-of-hql-maxminsum : 
    (prop,ranges) -> t1
    where SimpleSort(t) := <fetch-elem(get-type-from-range)> ranges
        ; t1 := <type-of-property> (t, <remove-leading-underscore> prop)

  type-of-query : QueryRule(SelectFrom(Some(Select(None(),[AliasedExpression(Avg(_) ,_)])),_), _, _, _) -> SimpleSort("Float")
  
rules //util

  get-type-from-range :
    //FromRangeJoin(FromClass(Path([x_Class]),Some(AsAlias(Alias(_))),_),_) -> SimpleSort(x_Class)
    FromRangeJoin(FromClass(Path([x_Class]),_,_),_) -> SimpleSort(x_Class)

rules
  
  type-to-annotation =
    where(type := <get-type-from-range>)
    ; add-anno(|TypeAnno(type))
    