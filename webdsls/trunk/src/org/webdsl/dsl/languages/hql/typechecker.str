module org/webdsl/dsl/languages/hql/typechecker

imports
  org/webdsl/dsl/generation/webdsl-generator

rules

  type-of-query :
    QueryRule(SelectFrom(selection, FromClause(ranges)), _, _, _) -> GenericSort("List", [t])
    where not(<is-aggregate-function-selection> selection)
    where not(<is-new-expression-selection> selection)
    with  t := <fetch-elem(get-type-from-range); try(type-of-property-selection(|selection))> ranges

  type-of-query :
    QueryRule(SelectFrom(selection, _), _, _, _) -> GenericSort("List", [t])
    where <is-new-expression-selection> selection
    with  t := <get-new-expression-type> selection
    //@TODO check that confirms the type actually exists
    
  is-new-expression-selection = ?Some(Select(None(),NewExpression(_,_)))
  get-new-expression-type = ?Some(Select(None(),NewExpression(Path([<!SimpleSort(<id>)>]),_))) //assumes Path with only one part

  is-aggregate-function-selection = ?Some(Select(None(),SelectedPropertiesList([AliasedExpression(CountStar(),_)])))
  is-aggregate-function-selection = ?Some(Select(None(),SelectedPropertiesList([AliasedExpression(Count(_),_)])))
  is-aggregate-function-selection = ?Some(Select(None(),SelectedPropertiesList([AliasedExpression(Max(_),_)])))
  is-aggregate-function-selection = ?Some(Select(None(),SelectedPropertiesList([AliasedExpression(Min(_),_)])))
  is-aggregate-function-selection = ?Some(Select(None(),SelectedPropertiesList([AliasedExpression(Avg(_),_)])))
  is-aggregate-function-selection = ?Some(Select(None(),SelectedPropertiesList([AliasedExpression(Sum(_),_)])))

  type-of-property-selection(|selection) :
    SimpleSort(t) -> t1
    where path := <?Some(Select(distinct,SelectedPropertiesList([AliasedExpression(Path(<id>),_)])))> selection
    ; <?None() <+ ?Some(Distinct())> distinct
    ; prop := <?[_,<id>] <+ ?[<id>]> path
    ; t1 := <type-of-property> (t, <remove-leading-underscore> prop)

  type-of-query : QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(CountStar(),_)]))),_), _, _, _) -> SimpleSort("Int")
  type-of-query : QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(Count(_) ,_)]))),_), _, _, _) -> SimpleSort("Int")
    
  type-of-query : QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(Max(Path(path)), _)]))),FromClause(ranges)), _, _, _) -> <type-of-hql-maxminsum> (prop,ranges)
    where prop := <?[_,<id>] <+ ?[<id>]> path
  type-of-query : QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(Min(Path(path)), _)]))),FromClause(ranges)), _, _, _) -> <type-of-hql-maxminsum> (prop,ranges)
    where prop := <?[_,<id>] <+ ?[<id>]> path
  type-of-query : QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(Sum(Path(path)), _)]))),FromClause(ranges)), _, _, _) -> <type-of-hql-maxminsum> (prop,ranges)
    where prop := <?[_,<id>] <+ ?[<id>]> path
  type-of-hql-maxminsum : 
    (prop,ranges) -> t1
    where SimpleSort(t) := <fetch-elem(get-type-from-range)> ranges
        ; t1 := <type-of-property> (t, <remove-leading-underscore> prop)

  type-of-query : QueryRule(SelectFrom(Some(Select(None(),SelectedPropertiesList([AliasedExpression(Avg(_) ,_)]))),_), _, _, _) -> SimpleSort("Float")
  
rules //util

  get-type-from-range :
    FromRangeJoin(FromClass(Path([x_Class]),_,_),_) -> SimpleSort(x_Class)
