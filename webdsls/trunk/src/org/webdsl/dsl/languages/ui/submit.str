module org/webdsl/dsl/languages/ui/submit

rules

  rename-ui :
    t@ActionCall(origname, e1*){annoorig*} -> result
    with if t2@ActionCall(renamedname, e2*){anno*} := <RenameActionCall> t
         then
           parent := <fetch-elem(?DirectEnclosingDefine(<id>))> anno*
         ; result := ActionCall(renamedname, e2*){ThisCallParent(parent),anno*}
         else //the action call is being renamed, but the outer definition is not.
              // in this case RenameActionCall fails, the action is not visible, and only the expression
              // arguments are renamed
           e3* := <rename-all> e1* 
         ; t3 := ThisCall(origname, e3*){annoorig*}
         end

rules

  constraint-error-ui :
    tc@ActionCall(f, e2*) -> <add-error(|["Cannot find action with signature ", sig, "."])>
    where not(type-of)
        ; argtypes := <map(type-of)> e2* // don't report when sub-expression was already wrong
    with  sig := <pretty-print-call(|f,argtypes)>

  eq-type-of-ui :
    ActionCall(f,e*){anno*} -> <eq-type-of-this-call-local> ThisCall(f,e*){anno*}

rules
 
  //inline action is already transformed to ThisCall here
  desugar-in-define-context : //after desugaring, this rule calls rename on the whole define
    Submit(e,ThisCall(x,arg*){anno*},passign*) -> 
    TemplateCall("action", [e, ThisCall(x,arg*){anno*}], passign*,TemplateBody([])) 

  //inline action is already transformed to ThisCall here 
  desugar-in-define-context : //after desugaring, this rule calls rename on the whole define
    SubmitLink(e,ThisCall(x,arg*){anno*},passign*) -> 
    TemplateCall("actionLink", [e, ThisCall(x,arg*){anno*}], passign*,TemplateBody([]))
    
  desugar : ActionCall(x,arg){anno*} -> ThisCall(x,arg){anno*} //TODO remove ThisCall for action calls entirely
  
  desugar-in-define-context :     
    SubmitElem(call, passign*, [TemplateCall("output", [e], _, _)]) -> 
    TemplateCall("action", [e, call], passign*, TemplateBody([]))
    where debug
  
  desugar-in-define-context :
    SubmitLinkElem(call, passign*, [TemplateCall("output", [e], _, _)]) -> 
    TemplateCall("actionLink", [e, call], passign*, TemplateBody([]))
    where debug
    
    