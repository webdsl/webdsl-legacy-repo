module org/webdsl/dsl/languages/ui/rename

rules

  rename-ui :
    def |[ define mod* x(farg1*) { elem1* } ]| -> <declare-page-definition> def |[ define mod* x(farg2*) { elem2* } ]|
    where   <fetch(?Page())> mod*
    with {| Rename, InDef, InPage, RenameActionCall, VarInTemplateContext, TemplateArg
          : rules ( InDef := True() )
          ; rules ( InPage := x )
          ; rules ( TemplateArg := farg1* ) //used in template-call.str
          ; farg2* := <map(rename);declare-generic-template-args(|x)> farg1*
          //; empty-args-in-context
          ; <declare-args-in-context> farg2*
          ; elem2* := <alltd(rename-actions); rename-all> elem1*
          ; rules ( TypeOf : x -> "Component" )
          |}

  rename-ui :
    def |[ define mod* x(farg1*) { elem1* } ]| -> <declare-toplevel-template-definition> def |[ define mod* y(farg2*) { elem2* } ]|
    where not(InPage <+ InTemplate)
        ; not(<fetch(?Page())> mod*)
        //; not(<elem> (Email(), mod*))
        ; not(<fetch(?Email())> mod*)
    with {| Rename, InDef, InTemplate, RenameActionCall, VarInTemplateContext, TemplateArg
          : rules ( InDef := True() )
          ; y := x{<newname> x}
          ; rules ( InTemplate := y )
          ; rules ( TemplateArg := farg1* )
          ; genargs := <get-generictype-args> farg1*
          ; farg2* := <map(rename);declare-generic-template-args(|x)> farg1*
          //; empty-args-in-context
          ; <declare-args-in-context> farg2*
          ; elem2* := <alltd(rename-actions); rename-all> elem1*
          |}
        
  rename-ui :
    def |[ define mod* x(farg1*) { elem1* } ]| -> <declare-local-template-definition> def |[ define mod* y(farg2*) { elem2* } ]|
    where (InPage <+ InTemplate)
        ; not(<fetch(?Page())> mod*)
        ; not(<fetch(?Email())> mod*)
    with {| Rename, InDef, InTemplate, RenameActionCall, VarInTemplateContext, TemplateArg
         : rules ( InDef := True() )
         ; y := x{<newname> x}
         ; rules ( InTemplate := y )
         ; rules ( TemplateArg := farg1* )
         ; farg2* := <map(rename);declare-generic-template-args(|x)> farg1*
         ; <declare-args-in-context> farg2*
         ; elem2* := <alltd(rename-actions); rename-all> elem1*
         |}

  empty-args-in-context =
    repeat(once-VarInTemplateContext)

  declare-args-in-context =
    map(\Arg(name,_) -> name with rules( VarInTemplateContext :+= Var(name) )\)

  rename-ui :
    t@ThisCall(fname, _) -> t3
    where not(fname := "email")
    with (t2@ThisCall(f, e2*){anno*} := <RenameActionCall> t //try to invoke renameActionCall first...
         <+ t2@ThisCall(f,e2*){anno*} := t)
       ; e3* := <rename-all> e2*       
       ;  (   //try to find a parent, and put it in the annotations
           ( ( parent := SimpleSort(<InEntity>)
               <+ parent:= <InPage> 
               <+ parent:= <InTemplate> )
             ; t3 := ThisCall(f, e3*){ThisCallParent(parent),anno*} // might add multiple annos, TODO check whether parent declared and/or changed.
           )
          <+ //no parent found
            t3 := ThisCall(f, e3*){anno*}
         )

  rename-actions = ?Define(_, _, _, _) // End of scope

  rename-ui :  // don't go into actions without proper scopes; actions are sometimes renamed without going through the whole template rename rule, in that case the action rule below is not used
  Action(nm1, args1, b1) -> Action(nm1, args2, b2)
  with {| Rename, VarInTemplateContext
        : args2 := <map(rename)> args1
        ; b2 := <rename-all> b1
       |}
          
  rename-actions :
    Action(nm1, args1, b1) -> Action(nm2, args2, b2)
    with {| Rename, VarInTemplateContext
          : args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}
       ; nm2 := nm1{<newname> nm1}
       ; rules ( RenameActionCall :
                  ThisCall(nm1, a1*){anno*} -> ThisCall(nm2, a2*){anno*}
                  with  a2* := <rename-all> a1* )
       ; <declare-page-action> Action(nm2, args2, b1)

//  rename = RenameActionCall

  rename-ui :
    InitAction(bl) -> InitAction(bl2)
    where not(InDef) //global init
    with {| InDef, Rename, VarInTemplateContext
          : rules (InDef := True())
          ; bl2 := <rename-all> bl
          |}
          
  rename-ui :
    InitAction(bl) -> InitAction(bl2)
    where InDef //in template
    with {| Rename, VarInTemplateContext
          : bl2 := <rename-all> bl
          |}
  