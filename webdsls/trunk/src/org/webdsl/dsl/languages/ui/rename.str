module org/webdsl/dsl/languages/ui/rename

imports
  libwebdsl-front
  libstratego-lib
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/languages/ui/-
  org/webdsl/dsl/languages/action/-
  org/webdsl/dsl/languages/action/typechecker/-
  org/webdsl/dsl/languages/data-model/-

signature
  constructors
    IsTemplateArg : Term

rules
  
  add-is-template-arg-anno :
    a{anno*} -> a{IsTemplateArg(),anno*}
    
  //pass to rename-all so vardecl is handled first
  is-var-decl-cons = ?VarDecl(_,_) <+ ?VarDeclInit(_,_,_) <+ ?VarDeclInitInferred(_,_)
  //pass to rename-all so local defines are ignored
  is-define-cons = ?Define(_, _, _, _, _)
  
  rename-ui :
    Define(mod*, x,farg1*, req*, elem1*){anno*} -> <store-renamed-actions-reqs> def
    where   <fetch(Page)> mod*
    with {| Rename, InDef, InPage, RenameActionCall, VarInContext, TemplateArg, ReqTemplateFargTypes
          : rules ( InDef := True() )
          ; x1 := <if <fetch(TemplateModOverride)> mod* then !x{<newname-webdsl> x} else !x end>
          ; rules ( InPage := x1 )
          ; farg2* := <map(rename; add-is-template-arg-anno)> farg1*
          ; rules ( TemplateArg := farg2* //used in template-call.str
                    TemplateModList := mod* ) 
          //; empty-args-in-context
          ; <declare-args-in-context> farg2*
          ; <declare-require-sig> req*
          ; elem2* := <alltd(rename-actions-find-action(|x1)); rename-all(is-var-decl-cons); alltd(rename-actions(|x1))> elem1*
          ; genname := <generate-template-name-fargs>(x1, farg2*, mod*)
          ; newanno* := <rename-query-optimization-annos> anno*
          ; def := Define(mod*, x1, farg2*, req*, elem2*){newanno*}
          ; rules ( CurrentTemplateDecl : genname -> def) //replace with DR of separate compilation branch
          |}

  rename-ui :
    Define(mod*, x,farg1*, req*, elem1*){anno*} -> <store-renamed-actions-reqs> def
    where not(InPage <+ InTemplate)
        ; not(<fetch(Page)> mod*)
        ; not(<fetch(Email)> mod*)
    with {| Rename, InDef, InTemplate, RenameActionCall, VarInContext, TemplateArg, ReqTemplateFargTypes
          : rules ( InDef := True() )
          ; y := x{<newname-webdsl> x}
          ; rules ( InTemplate := y )
          ; farg2* := <map(rename; add-is-template-arg-anno)> farg1*
          ; rules ( TemplateArg := farg2* 
                    TemplateModList := mod* )
          //; empty-args-in-context
          ; <declare-args-in-context> farg2*
          ; <declare-require-sig> req*
          ; elem2* := <alltd(rename-actions-find-action(|y)); rename-all(is-var-decl-cons); alltd(rename-actions(|y))> elem1*
          ; genname := <generate-template-name-fargs>(y, farg2*, mod*)
          ; newanno* := <rename-query-optimization-annos> anno*
          ; def := Define(mod*, y, farg2*, req*, elem2*){newanno*}
          ; if not(<fetch(Local)> mod*) then // Needed, because when rename is called from a desugar rule then InPage and InTemplate are not set correctly
              rules ( CurrentTemplateDecl : genname -> def)
            end
          |}
       
  get-enclosing-define-from-context :     
    _ -> EnclosingDefine(templatekey, page-or-template-name, template-arg, in-email, mod*)
    where not(InsideArgDefine)
        ; page-or-template-name := <InTemplate <+ InPage <+ InEmail>
        ; template-arg := <TemplateArg>
      <+ (page-or-template-name,template-arg) := <InsideArgDefine>
    with if InEmail then in-email := True() else in-email := False() end
    with templatekey := (page-or-template-name, <!template-arg;map(?Arg(_,<id>))>) //need name,type* tuple of enclosing template, to retrieve actions during desugar
    with mod* := <TemplateModList>
    	    
  rename-ui :
    Define(mod*, x,farg1*, req*, elem1*){anno*} -> <declare-local-template-definition; store-renamed-actions-reqs> def
    where (InPage <+ InTemplate)
        ; not(<fetch(Page)> mod*)
        ; not(<fetch(Email)> mod*)
    with  newanno* := <put-closure-in-anno> anno* //need closure for lifting the definition to top-level
        ; mod2* := <fetch(Local()) <+ ![Local() | <id>]> mod* // add if not present
    with  newanno2* := [ <get-enclosing-define-from-context> | newanno*]   
    with {| Rename, InDef, InTemplate, RenameActionCall, VarInContext, TemplateArg, ReqTemplateFargTypes
         : rules ( InDef := True() )
         ; y := x{<toplevel-rename> x}
         ; rules ( InTemplate := y )
         ; farg2* := <map(rename; add-is-template-arg-anno)> farg1*
         ; rules ( TemplateArg := farg2* 
                   TemplateModList := mod* )
         ; <declare-args-in-context> farg2*
         ; <declare-require-sig> req*
         ; elem2* := <mark-too-deeply-nested-defines; alltd(rename-actions-find-action(|y)); rename-all(is-var-decl-cons); alltd(rename-actions(|y))> elem1*
         ; genname := <generate-template-name-fargs>(y, farg2*, mod*)
         ; newanno3* := <rename-query-optimization-annos> newanno2*
         ; def := Define(mod2*, y, farg2*, req*, elem2*){newanno3*}
         // Updating CurrentTemplateDecl here will overwrite the top level decl with the local one, because their genname is still the same
         |}

  mark-too-deeply-nested-defines =
    topdown(try({\ d@Define(_,_,_,_,_){anno*} -> d{TooDeeplyNestedDefine(),anno*} \}))

  signature constructors TooDeeplyNestedDefine : Term 
  rules

  store-renamed-actions-reqs: def@Define(mod*, name, farg*, req*, elem*) -> def
    with  // do not collect inside nested templates or template calls
          // remove position annos for better cache hit ratio
          actions := <collect(?Action(_,_,_,_)<+?Define(_,_,_,_,_)<+get-tc-elements);remove-all(not(?Action(_,_,_,_))); remove-position-annos> elem*
          //store under name; unique because of annotations, even for local redefinitions which have the same signature as a top-level def
        ; rules( TemplateActions : name -> actions )
          //requires foo(), bar(String)
        ; rules( TemplateRequiresList : name -> req* )
          //apply ac rules foo(bar)
        ; acimports := <collect(?AccessControlImportRules(_,_)<+?Define(_,_,_,_,_));remove-all(not(?AccessControlImportRules(_,_)))> elem*
        ; rules( TemplateACImports : name -> acimports )
        ; if <fetch(IgnoreAccessControl)> mod* then rules( TemplateMods : name -> [IgnoreAccessControl()] ) end

  get-requires :
  [] -> []
  
  get-requires :
  None() -> []
  
  get-requires :
  TemplateArgs(args) -> args
  
  //get-requires :
  //[x | xs ] -> [x | xs]
  
  declare-require-sig =
    get-requires
  ; map(declare-require-sig-internal)
    
  declare-require-sig-internal =
    ?d@TemplateArg(name, fargtypes)
  ; xsa := <strip-annos> name
  ; rules (ReqTemplateFargTypes : xsa -> fargtypes)

  rename-ui :  
  // don't go into actions without proper scopes; actions are sometimes renamed without going 
  // through the whole template rename rule, in that case this rule is used and the action itself is not renamed
  a@Action(amod*, nm1, args1, b1) -> Action(amod*, nm1, args2, b2)
  with {| Rename, VarInContext, InActionContext
        : rules( InActionContext := a)
        ; args2 := <map(rename)> args1
        ; <declare-args-in-context> args2
        ; b2 := <rename-all> b1
       |}
          
signature
  constructors

    DirectEnclosingDefine : String -> Anno
 
rules

  rename-actions-find-action(|direct-enclosing-define-name) = ?Define(_, _, _, _, _) // End of scope, don't enter nested defines

  rename-actions-find-action(|direct-enclosing-define-name) :
    a@Action(amod*, nm1, args1, b1) -> Action(amod*, nm2, args1, b1)
    with nm2 := nm1{<toplevel-rename> nm1{}}
       ; rules ( RenameActionCall :
                  ActionCall(nm1, a1*){anno*} -> ActionCall(nm2, a2*){DirectEnclosingDefine(direct-enclosing-define-name),anno*}
                  with  a2* := <rename-all> a1*
               )

  rename-actions(|direct-enclosing-define-name) = ?Define(_, _, _, _, _) // End of scope, don't enter nested defines

  rename-actions(|direct-enclosing-define-name) :
    a@Action(amod*, nm2, args1, b1) -> Action(amod*, nm2, args2, b2)
    with {| Rename, VarInContext, InActionContext
          : rules( InActionContext := a)
          ; args2 := <map(rename)> args1
          ; <declare-args-in-context> args2
          ; b2 := <rename-all> b1
          |}
       ; <with-origin(declare-page-action(|direct-enclosing-define-name) | a)> Action(amod*, nm2, args2, b1)

//  rename = RenameActionCall

  rename-ui :
    a@InitAction(bl) -> InitAction(bl2)
    where not(InDef) //global init
    with {| InDef, Rename, VarInContext, InActionContext:
          rules (
              InDef := True()
              InActionContext := a
          )
          ; bl2 := <rename-all> bl
          |}
          
  rename-ui :
    a@InitAction(bl) -> InitAction(bl2)
    where InDef //in template
    with {| Rename, VarInContext, InActionContext:
          rules(InActionContext := a)
          ; bl2 := <rename-all> bl
          |}
          
  rename-ui :
    Return(tc){anno*} -> <rename-all> Return(<this-call-to-page-call> tc){anno*}
    where InActionContext
 