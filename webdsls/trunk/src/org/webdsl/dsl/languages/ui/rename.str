module org/webdsl/dsl/languages/ui/rename

imports
	libwebdsl-front
	org/webdsl/dsl/generation/webdsl-generator

rules

  rename-ui :
    Define(mod*, x,farg1*, req*, elem1*){anno*} -> <store-renamed-actions> Define(mod*, x, farg2*, req*, elem2*){anno*}
    where   <fetch(?Page())> mod*
    with {| Rename, InDef, InPage, RenameActionCall, VarInTemplateContext, TemplateArg, ReqTemplateSig
          : rules ( InDef := True() )
          ; rules ( InPage := x )
          ; rules ( TemplateArg := farg1* ) //used in template-call.str
          ; farg2* := <map(rename)/*;declare-generic-template-args(|x)*/> farg1*
          //; empty-args-in-context
          ; <declare-args-in-context> farg2*
          ; <declare-require-sig> req*
          ; elem2* := <alltd(rename-actions(|x)); rename-all> elem1*
          ; rules ( TypeOf : x -> "Component" )
          |}

  rename-ui :
    Define(mod*, x,farg1*, req*, elem1*){anno*} -> <store-renamed-actions> Define(mod*, y, farg2*, req*, elem2*){anno*}
    where not(InPage <+ InTemplate)
        ; not(<fetch(?Page())> mod*)
        //; not(<elem> (Email(), mod*))
        ; not(<fetch(?Email())> mod*)
    with {| Rename, InDef, InTemplate, RenameActionCall, VarInTemplateContext, TemplateArg, ReqTemplateSig
          : rules ( InDef := True() )
          ; y := x{<newname> x}
          ; rules ( InTemplate := y )
          ; rules ( TemplateArg := farg1* )
          ; genargs := <get-generictype-args> farg1*
          ; farg2* := <map(rename)/*;declare-generic-template-args(|x)*/> farg1*
          //; empty-args-in-context
          ; <declare-args-in-context> farg2*
          ; <declare-require-sig> req*
          ; elem2* := <alltd(rename-actions(|y)); rename-all> elem1*
          |}
        
  rename-ui :
    Define(mod*, x,farg1*, req*, elem1*){anno*} -> <declare-local-template-definition; store-renamed-actions> Define(mod*, y, farg2*, req*, elem2*){anno*}
    where (InPage <+ InTemplate)
        ; not(<fetch(?Page())> mod*)
        ; not(<fetch(?Email())> mod*)
    with {| Rename, InDef, InTemplate, RenameActionCall, VarInTemplateContext, TemplateArg, ReqTemplateSig
         : rules ( InDef := True() )
         ; y := x{<toplevel-rename> x}
         ; rules ( InTemplate := y )
         ; rules ( TemplateArg := farg1* )
         ; farg2* := <map(rename)/*;declare-generic-template-args(|x)*/> farg1*
         ; <declare-args-in-context> farg2*
         ; <declare-require-sig> req*
         ; elem2* := <alltd(rename-actions(|y)); rename-all> elem1*
         |}

  store-renamed-actions: def@Define(_, name, farg*, _, elem*) -> def
    with  n := <strip-annos> name
        ; t* := <map(farg-to-type)> farg*
          // do not collect inside nested templates or template calls
          // remove position annos for better cache hit ratio
        ; actions := <collect(?Action(_,_,_)<+?Define(_,_,_,_,_)<+get-tc-elements);remove-all(not(?Action(_,_,_))); remove-position-annos> elem*
        ; rules( TemplateActions : (n, t*) -> actions )

  get-requires :
  [] -> []
  
  get-requires :
  None() -> []
  
  get-requires :
  TemplateArgs(args) -> args
  
  //get-requires :
  //[x | xs ] -> [x | xs]
  
  declare-require-sig =
    get-requires
  ; map(declare-require-sig-internal)
    
  declare-require-sig-internal =
    ?d@TemplateArg(name, _)
  ; xsa := <strip-annos> name
  ; rules (ReqTemplateSig : xsa )
    
  /**
   *  ThisCall constructor is overloaded for function calls, page calls (refactor to different constructors to simplify rules)
   */
  rename-ui :
    t@ThisCall(fname,e2*){origanno*} -> t3
    where not(fname := "email")
    with  //try to find a parent, and put it in the annotations. fails if already defined above
               if parent:= SimpleSort(<InEntity>)
               then newanno* := [ThisCallParent(parent)|origanno*]
               else newanno* := origanno*
               end          
             ; e3* := <rename-all> e2*       
             ; t3 := ThisCall(fname, e3*){newanno*}
         

  rename-ui :  
  // don't go into actions without proper scopes; actions are sometimes renamed without going 
  // through the whole template rename rule, in that case this rule is used and the action itself is not renamed
  a@Action(nm1, args1, b1) -> Action(nm1, args2, b2)
  with {| Rename, VarInTemplateContext, InActionContext
        : rules( InActionContext := a)
        ; args2 := <map(rename)> args1
        ; <declare-args-in-context> args2
        ; b2 := <rename-all> b1
       |}
          
signature
  constructors

    DirectEnclosingDefine : String -> Anno
 
rules

  rename-actions(|direct-enclosing-define-name) = ?Define(_, _, _, _, _) // End of scope

  rename-actions(|direct-enclosing-define-name) :
    a@Action(nm1, args1, b1) -> Action(nm2, args2, b2)
    with {| Rename, VarInTemplateContext, InActionContext
          : rules( InActionContext := a)
          ; args2 := <map(rename)> args1
          ; <declare-args-in-context> args2
          ; b2 := <rename-all> b1
          |}
       ; nm2 := nm1{<toplevel-rename> nm1}
       ; rules ( RenameActionCall :
                  ActionCall(nm1, a1*){anno*} -> ActionCall(nm2, a2*){DirectEnclosingDefine(direct-enclosing-define-name),anno*}
                  with  a2* := <rename-all> a1*
               )
       ; <declare-page-action(|direct-enclosing-define-name)> Action(nm2, args2, b1)

//  rename = RenameActionCall

  rename-ui :
    InitAction(bl) -> InitAction(bl2)
    where not(InDef) //global init
    with {| InDef, Rename, VarInTemplateContext
          : rules (InDef := True())
          ; bl2 := <rename-all> bl
          |}
          
  rename-ui :
    InitAction(bl) -> InitAction(bl2)
    where InDef //in template
    with {| Rename, VarInTemplateContext
          : bl2 := <rename-all> bl
          |}
          
  rename-ui :
    Return(tc{annocall*}){anno*} -> Return(tc1{IsReturnInAction(),annocall*}){anno*}
    where InActionContext
    where not(<fetch(IsReturnInAction)> annocall*)
    with  tc1 := <rename-all> tc
    
signature 
  constructors
    IsReturnInAction : Term
          