module org/webdsl/dsl/languages/ui/rename

imports
  libwebdsl-front
  org/webdsl/dsl/generation/webdsl-generator

signature
  constructors
    IsTemplateArg : Term

rules
  
  add-is-template-arg-anno :
    a{anno*} -> a{IsTemplateArg(),anno*}

  rename-ui :
    Define(mod*, x,farg1*, req*, elem1*){anno*} -> <store-renamed-actions> Define(mod*, x, farg2*, req*, elem2*){anno*}
    where   <fetch(Page)> mod*
    with {| Rename, InDef, InPage, RenameActionCall, VarInTemplateContext, TemplateArg, ReqTemplateSig
          : rules ( InDef := True() )
          ; rules ( InPage := x )
          ; rules ( TemplateArg := farg1* ) //used in template-call.str
          ; farg2* := <map(rename; add-is-template-arg-anno)> farg1*
          //; empty-args-in-context
          ; <declare-args-in-context> farg2*
          ; <declare-require-sig> req*
          ; elem2* := <alltd(rename-actions(|x)); rename-all> elem1*
          ; rules ( TypeOf : x -> "Component" )
          |}

  rename-ui :
    Define(mod*, x,farg1*, req*, elem1*){anno*} -> <store-renamed-actions> Define(mod*, y, farg2*, req*, elem2*){anno*}
    where not(InPage <+ InTemplate)
        ; not(<fetch(Page)> mod*)
        ; not(<fetch(Email)> mod*)
    with {| Rename, InDef, InTemplate, RenameActionCall, VarInTemplateContext, TemplateArg, ReqTemplateSig
          : rules ( InDef := True() )
          ; y := x{<newname> x}
          ; rules ( InTemplate := y )
          ; rules ( TemplateArg := farg1* )
          ; genargs := <get-generictype-args> farg1*
          ; farg2* := <map(rename; add-is-template-arg-anno)> farg1*
          //; empty-args-in-context
          ; <declare-args-in-context> farg2*
          ; <declare-require-sig> req*
          ; elem2* := <alltd(rename-actions(|y)); rename-all> elem1*
          |}
        
  rename-ui :
    Define(mod*, x,farg1*, req*, elem1*){anno*} -> <declare-local-template-definition; store-renamed-actions> Define(mod*, y, farg2*, req*, elem2*){newanno*}
    where (InPage <+ InTemplate)
        ; not(<fetch(Page)> mod*)
        ; not(<fetch(Email)> mod*)
    with  newanno* := <put-closure-in-anno> anno* //need closure for lifting the definition to top-level
    with {| Rename, InDef, InTemplate, RenameActionCall, VarInTemplateContext, TemplateArg, ReqTemplateSig
         : rules ( InDef := True() )
         ; y := x{<toplevel-rename> x}
         ; rules ( InTemplate := y )
         ; rules ( TemplateArg := farg1* )
         ; farg2* := <map(rename; add-is-template-arg-anno)> farg1*
         ; <declare-args-in-context> farg2*
         ; <declare-require-sig> req*
         ; elem2* := <alltd(rename-actions(|y)); rename-all> elem1*
         |}

  store-renamed-actions: def@Define(_, name, farg*, _, elem*) -> def
    with  n := <strip-annos> name
        ; t* := <map(farg-to-type)> farg*
          // do not collect inside nested templates or template calls
          // remove position annos for better cache hit ratio
        ; actions := <collect(?Action(_,_,_)<+?Define(_,_,_,_,_)<+get-tc-elements);remove-all(not(?Action(_,_,_))); remove-position-annos> elem*
        ; rules( TemplateActions : (n, t*) -> actions )

  get-requires :
  [] -> []
  
  get-requires :
  None() -> []
  
  get-requires :
  TemplateArgs(args) -> args
  
  //get-requires :
  //[x | xs ] -> [x | xs]
  
  declare-require-sig =
    get-requires
  ; map(declare-require-sig-internal)
    
  declare-require-sig-internal =
    ?d@TemplateArg(name, _)
  ; xsa := <strip-annos> name
  ; rules (ReqTemplateSig : xsa )
    
  /**
   *  ThisCall constructor is overloaded for function calls
   */
  rename-ui :
    t@ThisCall(fname,_) -> t3
    where not("email" := fname)
    with  // Replace ThisCall(pagename) arguments with PageCall for built-ins like navigatebutton
          ThisCall(fname, e*){origanno*} := <try(thiscall-replace-page-arguments)> t
          //try to find a parent, and put it in the annotations. fails if already defined above
        ; if parent:= SimpleSort(<InEntity>)
          then newanno* := [ThisCallParent(parent)|origanno*]
          else newanno* := origanno*
          end          
        ; e3* := <rename-all> e*
        ; t3 := ThisCall(fname, e3*){newanno*}

  rename-ui :  
  // don't go into actions without proper scopes; actions are sometimes renamed without going 
  // through the whole template rename rule, in that case this rule is used and the action itself is not renamed
  a@Action(nm1, args1, b1) -> Action(nm1, args2, b2)
  with {| Rename, VarInTemplateContext, InActionContext
        : rules( InActionContext := a)
        ; args2 := <map(rename)> args1
        ; <declare-args-in-context> args2
        ; b2 := <rename-all> b1
       |}
          
signature
  constructors

    DirectEnclosingDefine : String -> Anno
 
rules

  rename-actions(|direct-enclosing-define-name) = ?Define(_, _, _, _, _) // End of scope

  rename-actions(|direct-enclosing-define-name) :
    a@Action(nm1, args1, b1) -> Action(nm2, args2, b2)
    with {| Rename, VarInTemplateContext, InActionContext
          : rules( InActionContext := a)
          ; args2 := <map(rename)> args1
          ; <declare-args-in-context> args2
          ; b2 := <rename-all> b1
          |}
       ; nm2 := nm1{<toplevel-rename> nm1}
       ; rules ( RenameActionCall :
                  ActionCall(nm1, a1*){anno*} -> ActionCall(nm2, a2*){DirectEnclosingDefine(direct-enclosing-define-name),anno*}
                  with  a2* := <rename-all> a1*
               )
       ; <with-origin(declare-page-action(|direct-enclosing-define-name) | a)> Action(nm2, args2, b1)

//  rename = RenameActionCall

  rename-ui :
    a@InitAction(bl) -> InitAction(bl2)
    where not(InDef) //global init
    with {| InDef, Rename, VarInTemplateContext, InActionContext:
          rules (
              InDef := True()
              InActionContext := a
          )
          ; bl2 := <rename-all> bl
          |}
          
  rename-ui :
    a@InitAction(bl) -> InitAction(bl2)
    where InDef //in template
    with {| Rename, VarInTemplateContext, InActionContext:
          rules(InActionContext := a)
          ; bl2 := <rename-all> bl
          |}
          
  rename-ui :
    Return(tc){anno*} -> <rename-all> Return(<this-call-to-page-call> tc){anno*}
    where InActionContext
 