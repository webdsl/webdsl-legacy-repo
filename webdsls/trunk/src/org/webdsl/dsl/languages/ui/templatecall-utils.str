module org/webdsl/dsl/languages/ui/templatecall-utils

rules

  is-defined-template-call : t@TemplateCallNoBody(n,args){anno*}       -> t where <CallToDefinedTemplate> n
  is-defined-template-call : t@TemplateCallNoArgs(n){anno*}            -> t where <CallToDefinedTemplate> n
  is-defined-template-call : t@TemplateCallNoAssigns(n,args,b){anno*}  -> t where <CallToDefinedTemplate> n
  is-defined-template-call : t@TemplateCallPropsNoBody(n,args,p){anno*}-> t where <CallToDefinedTemplate> n
  is-defined-template-call : t@TemplateCallProps(n,p){anno*}           -> t where <CallToDefinedTemplate> n
  is-defined-template-call : t@TemplateCallPropsNoArgs(n,p,b){anno*}   -> t where <CallToDefinedTemplate> n
  is-defined-template-call : t@TemplateCallBody(n,b){anno*}            -> t where <CallToDefinedTemplate> n
  is-defined-template-call : t@TemplateCall(n,args,p,b){anno*}         -> t where <CallToDefinedTemplate> n
  
rules  
  
  is-defined-tc-get-called-tc : TemplateCallNoBody(n,args){anno*}        -> <CallToDefinedTemplate> n
  is-defined-tc-get-called-tc : TemplateCallNoArgs(n){anno*}             -> <CallToDefinedTemplate> n
  is-defined-tc-get-called-tc : TemplateCallNoAssigns(n,args,b){anno*}   -> <CallToDefinedTemplate> n
  is-defined-tc-get-called-tc : TemplateCallPropsNoBody(n,args,p){anno*} -> <CallToDefinedTemplate> n
  is-defined-tc-get-called-tc : TemplateCallProps(n,p){anno*}            -> <CallToDefinedTemplate> n
  is-defined-tc-get-called-tc : TemplateCallPropsNoArgs(n,p,b){anno*}    -> <CallToDefinedTemplate> n
  is-defined-tc-get-called-tc : TemplateCallBody(n,b){anno*}             -> <CallToDefinedTemplate> n
  is-defined-tc-get-called-tc : TemplateCall(n,args,p,b){anno*}          -> <CallToDefinedTemplate> n
  
  is-defined-tc-get-called-def = is-defined-tc-get-called-tc; TemplateDecl
  
rules
  
  get-tc-name : TemplateCallNoBody(n,args){anno*}        -> n
  get-tc-name : TemplateCallNoArgs(n){anno*}             -> n
  get-tc-name : TemplateCallNoAssigns(n,args,b){anno*}   -> n
  get-tc-name : TemplateCallPropsNoBody(n,args,p){anno*} -> n
  get-tc-name : TemplateCallProps(n,p){anno*}            -> n
  get-tc-name : TemplateCallPropsNoArgs(n,p,b){anno*}    -> n
  get-tc-name : TemplateCallBody(n,b){anno*}             -> n
  get-tc-name : TemplateCall(n,args,p,b){anno*}          -> n
  
rules
  
  get-tc-args : TemplateCallNoBody(n,args){anno*}        -> args
  get-tc-args : TemplateCallNoArgs(n){anno*}             -> []
  get-tc-args : TemplateCallNoAssigns(n,args,b){anno*}   -> args
  get-tc-args : TemplateCallPropsNoBody(n,args,p){anno*} -> args
  get-tc-args : TemplateCallProps(n,p){anno*}            -> []
  get-tc-args : TemplateCallPropsNoArgs(n,p,b){anno*}    -> []
  get-tc-args : TemplateCallBody(n,b){anno*}             -> []
  get-tc-args : TemplateCall(n,args,p,b){anno*}          -> args

rules
  
  get-tc-props : TemplateCallNoBody(n,args){anno*}        -> []
  get-tc-props : TemplateCallNoArgs(n){anno*}             -> []
  get-tc-props : TemplateCallNoAssigns(n,args,b){anno*}   -> []
  get-tc-props : TemplateCallPropsNoBody(n,args,p){anno*} -> p
  get-tc-props : TemplateCallProps(n,p){anno*}            -> p
  get-tc-props : TemplateCallPropsNoArgs(n,p,b){anno*}    -> p
  get-tc-props : TemplateCallBody(n,b){anno*}             -> []
  get-tc-props : TemplateCall(n,args,p,b){anno*}          -> p

rules
  
  get-tc-components : TemplateCallNoBody(n,args)        -> (n, args, [], [])
  get-tc-components : TemplateCallNoArgs(n)             -> (n, [], [], [])
  get-tc-components : TemplateCallNoAssigns(n,args,b)   -> (n, args, [], b)
  get-tc-components : TemplateCallPropsNoBody(n,args,p) -> (n, args, p, [])
  get-tc-components : TemplateCallProps(n,p)            -> (n, [], p, [])
  get-tc-components : TemplateCallPropsNoArgs(n,p,b)    -> (n, [], p, b)
  get-tc-components : TemplateCallBody(n,b)             -> (n, [], [], b)
  get-tc-components : TemplateCall(n,args,p,b)          -> (n, args, p, b)
  
rules //for each defined template call with elements, get the elements part
  
  get-tc-elements : TemplateCallNoAssigns(n,args,b){anno*}   -> b where <CallToDefinedTemplate> n
  get-tc-elements : TemplateCallPropsNoArgs(n,p,b){anno*}    -> b where <CallToDefinedTemplate> n
  get-tc-elements : TemplateCallBody(n,b){anno*}             -> b where <CallToDefinedTemplate> n
  get-tc-elements : TemplateCall(n,args,p,b){anno*}          -> b where <CallToDefinedTemplate> n

/*
rules //for each defined template call with named template arguments, get the template arguments
  
  get-tc-argdefs : TemplateCallNoAssigns(n,args,TemplateWith(argdef*)) -> argdef* where <CallToDefinedTemplate> n
  get-tc-argdefs : TemplateCallPropsNoArgs(n,p,TemplateWith(argdef*)) -> argdef* where <CallToDefinedTemplate> n
  get-tc-argdefs : TemplateCallBody(n,TemplateWith(argdef*)) -> argdef* where <CallToDefinedTemplate> n
  get-tc-argdefs : TemplateCall(n,args,p,TemplateWith(argdef*)) -> argdef* where <CallToDefinedTemplate> n
*/

rules
  
  match-template-with-name(|name) = // check for each template call syntactic variant
  //?TemplateCallNoBody(name,_)  doesn't match when there is an annotation on name,
  // apparently matching vars is annotation-sensitive
  // using workaround
    ?TemplateCallNoBody(x,_)       ;where(eq-vars-annos-stripped(|x,name))
  <+?TemplateCallNoArgs(x)         ;where(eq-vars-annos-stripped(|x,name))       
  <+?TemplateCallNoAssigns(x,_,_)  ;where(eq-vars-annos-stripped(|x,name))  
  <+?TemplateCallPropsNoBody(x,_,_);where(eq-vars-annos-stripped(|x,name)) 
  <+?TemplateCallProps(x,_)        ;where(eq-vars-annos-stripped(|x,name))
  <+?TemplateCallPropsNoArgs(x,_,_);where(eq-vars-annos-stripped(|x,name))
  <+?TemplateCallBody(x,_)         ;where(eq-vars-annos-stripped(|x,name))
  <+?TemplateCall(x,_,_,_)         ;where(eq-vars-annos-stripped(|x,name))
  
// for a recursive strip-annos see
// https://svn.strategoxt.org/repos/StrategoXT/aster/trunk/runtime/aster/lang/annotations.str
//, not needed here atm
  eq-vars-annos-stripped(|v1,v2) = <eq> (<strip-annos> v1, <strip-annos> v2)
  
  //match template with name using strategy that must succeed on the name
  match-template-with-name(sname) = 
    where(
    ?TemplateCallNoBody(<sname>,_)       
  <+?TemplateCallNoArgs(<sname>)                
  <+?TemplateCallNoAssigns(<sname>,_,_)    
  <+?TemplateCallPropsNoBody(<sname>,_,_) 
  <+?TemplateCallProps(<sname>,_)        
  <+?TemplateCallPropsNoArgs(<sname>,_,_)
  <+?TemplateCallBody(<sname>,_)         
  <+?TemplateCall(<sname>,_,_,_)
    ) 
  
/*
rules
  add-annotation-to-template-call(|name,anno) : TemplateCallNoBody(n@name,args){anno*} -> TemplateCallNoBody(n,args){[anno|anno*]}
  add-annotation-to-template-call(|name,anno) : TemplateCallNoArgs(n@name){anno*}      -> TemplateCallNoArgs(n){[anno|anno*]}
  add-annotation-to-template-call(|name,anno) : TemplateCallNoAssigns(n@name,args,b){anno*} -> TemplateCallNoAssigns(n,args,b){[anno|anno*]}
  add-annotation-to-template-call(|name,anno) : TemplateCallPropsNoBody(n@name,args,p){anno*} -> TemplateCallPropsNoBody(n,args,p){[anno|anno*]}
  add-annotation-to-template-call(|name,anno) : TemplateCallProps(n@name,p){anno*} -> TemplateCallProps(n,p){[anno|anno*]}
  add-annotation-to-template-call(|name,anno) : TemplateCallPropsNoArgs(n@name,p,b){anno*} -> TemplateCallPropsNoArgs(n,p,b){[anno|anno*]}
  add-annotation-to-template-call(|name,anno) : TemplateCallBody(n@name,b){anno*} -> TemplateCallBody(n,b){[anno|anno*]}
  add-annotation-to-template-call(|name,anno) : TemplateCall(n@name,args,p,b){anno*} -> TemplateCall(n,args,p,b){[anno|anno*]}
  
  add-annotation-to-defined-template-call(|anno) : TemplateCallNoBody(n,args){anno*} -> TemplateCallNoBody(n,args){[anno|anno*]} where <CallToDefinedTemplate> n
  add-annotation-to-defined-template-call(|anno) : TemplateCallNoArgs(n){anno*}      -> TemplateCallNoArgs(n){[anno|anno*]} where <CallToDefinedTemplate> n
  add-annotation-to-defined-template-call(|anno) : TemplateCallNoAssigns(n,args,b){anno*} -> TemplateCallNoAssigns(n,args,b){[anno|anno*]} where <CallToDefinedTemplate> n
  add-annotation-to-defined-template-call(|anno) : TemplateCallPropsNoBody(n,args,p){anno*} -> TemplateCallPropsNoBody(n,args,p){[anno|anno*]} where <CallToDefinedTemplate> n
  add-annotation-to-defined-template-call(|anno) : TemplateCallProps(n,p){anno*} -> TemplateCallProps(n,p){[anno|anno*]} where <CallToDefinedTemplate> n
  add-annotation-to-defined-template-call(|anno) : TemplateCallPropsNoArgs(n,p,b){anno*} -> TemplateCallPropsNoArgs(n,p,b){[anno|anno*]} where <CallToDefinedTemplate> n
  add-annotation-to-defined-template-call(|anno) : TemplateCallBody(n,b){anno*} -> TemplateCallBody(n,b){[anno|anno*]} where <CallToDefinedTemplate> n
  add-annotation-to-defined-template-call(|anno) : TemplateCall(n,args,p,b){anno*} -> TemplateCall(n,args,p,b){[anno|anno*]} where <CallToDefinedTemplate> n
*/
