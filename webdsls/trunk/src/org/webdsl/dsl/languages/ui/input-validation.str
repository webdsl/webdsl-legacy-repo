module org/webdsl/dsl/languages/ui/input-validation
// @TODO rewrite to new type-checking style

imports
  libstrategolib
  libwebdsl-front

//declare
rules

/* MW: disabled, in combination with the disabled syntax
  declare-definition =
    ?v@Validator(x_ident,farg*,valstat*,str)
    ; t1* := <map(?Arg(_,<id>))> farg*
    ; uniqname := <InputValidatorFuncName <+ !"geninputvalidation";newname-webdsl> (x_ident,t1*)
    ; rules ( CheckInputValidatorSignature : tup@(x_ident, t2*) -> tup
                       where <zip(type-compatible)> (t1*, t2*)
              IsInputValidator : (x_ident,t1*)
              InputValidator : (x_ident,t1*) -> v
              InputValidatorFuncName : (x_ident,t1*) -> uniqname
            )

rules
*/
/* @REFACTOR
  typecheck-input-validation :
    //a@|[ validate x_id ( e* ) ]| -> a
    a@ValidateCall(x_ident,e*) -> ValidateCall(x_ident,e1*)
    where in-tc-context(id
            ; e1* := <map(typecheck-expression)> e*
            ; <CheckInputValidatorSignature <+ typecheck-error(|["Validator not defined ", <id>])> (x_ident,<map(?_{Type(<id>)})> e1*)
          | [x_ident, "/"])

    //check whether the validator is defined

  typecheck-definition :
    a@Validator(x_ident,farg*,valstat*,e) -> Validator(x_ident,farg*,valstat1*,e1)
    //a@|[validator x_id (farg*) { valstat* } : str]|->a
    //declare typeof for farg* and do a typecheck statements on valstat
    where {| TypeOf//, ReturnType
            : in-tc-context(
               //rules( ReturnType := sort )
               <map(declare-typeof-arg)> farg*
               ; valstat1* := <typecheck-block> valstat*
               ; e1 := <typecheck-expression> e
               ; (_{Type(SimpleSort("String"))} := e1 <+ typecheck-error(|["Type of message must be String", <id>]) )
             |["validator ", x_ident, "/"])
           |}

  typecheck-input-validation-fail = ?|[ fail; ]|

*/
