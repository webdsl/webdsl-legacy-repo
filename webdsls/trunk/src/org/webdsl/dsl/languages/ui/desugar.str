module org/webdsl/dsl/languages/ui/desugar

strategies

  //desugar-ui = DeriveInput
  desugar-ui = DeriveOutput

rules //desugar dummy templatecall

  desugar-ui :
    Define(mods, name, args, targs, elems){anno*} -> result
    where <oncetd(?TemplateCall("dummy",_,_,TemplateBody(_)))> elems
    with  elems2 := <inline-dummy-contents> elems
        ; not(<oncetd(?TemplateCall("dummy",_,_,TemplateBody(_)))> elems2; debug(!"Internal error: dummy templates should have been removed."))
        ; result := Define(mods, name, args, targs, elems2){anno*}

  inline-dummy-contents =
  	topdown(try(repeat(inline-dummy-contents-list)))
  		
  inline-dummy-contents-list =		
    is-list
  ; fetch(?TemplateCall("dummy",_,_,TemplateBody(_)))
  ; map(try(?TemplateCall("dummy",_,_,TemplateBody(<id>))))
  ; flatten-list

  desugar-query-analysis :
    inp@Define(mod*, x,farg1*, req*, elem1*){anno*} -> def{newanno*}
    where not(<fetch-elem(is-query-analysis)> anno*)
        ; genname := <generate-template-name-fargs>(x, farg1*, mod*)
        ; not(<fetch(Local)> mod*) // We analyze local redefines after they have been lifted
        ; <template-body-ready> elem1*
		    ; {| CurrentTemplateName
		      : rules(CurrentTemplateName := genname )
		      ; (elem2*, newanno*) := <perform-query-analysis(|("Define", genname), farg1*,True(), None(), None())> (elem1*, anno*)
		    |}
        ; def := Define(mod*, x, farg1*, req*, elem2*){newanno*}
        ; rules ( CurrentTemplateDecl : genname -> def) // We need the argument annotations in other desugar rules, so do not wait for rename to update

  add-query-optimization :
    def@Define(mod*, x,farg1*, req*, elem1*){anno*} -> Define(mod*, x,farg1*, req*, elem2*){IsOptimized(),tokeep*}
    where <not(fetch-elem(IsOptimized()))> anno*
    with qa := <fetch-elem(is-query-analysis) <+ (try(where(NotOptimizedWarnings); <debug(!"NotOptimized:")> ("Define", <generate-template-name-fargs>(x, farg1*,mod*), <is-not-analyzed; Snd> def)); get-empty-query-analysis)> anno*
      ; tokeep* := <remove-all(is-query-analysis)> anno*
      ; bindableargs := <filter(query-optimization-bindable-argument)> farg1*
      ; elem2* := <foldr(!elem1*,add-query-optimization-to-argument(|qa,bindableargs)); try(add-session-var-optimizations(|qa,mod*,x))> farg1*

  add-session-var-optimizations(|qa,mod*,x) :
    elem1* -> elem2*
    where <fetch(Page)> mod*
    with elem2* := <get-session-args; filter(has-traversals-on(|qa)); foldr(!elem1*,add-query-optimization-to-argument(|qa,[]))>

  has-traversals-on(|qa) :
    arg@Arg(x, srt) -> arg
    where {|RootVar
      : rules( RootVar : Var(x) -> srt )
      ; QueryAnalysis(analysis, _, _, _, _) := qa
      ; not([] := <filter-traversal-summary> analysis)
      |}
