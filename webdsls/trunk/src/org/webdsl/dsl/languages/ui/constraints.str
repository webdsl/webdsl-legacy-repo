module org/webdsl/dsl/languages/ui/constraints

imports
  libstrategolib

imports
  libwebdsl-front

rules // constraints

  //duplicate page names
  constraint-error-ui :
    Application(nm, sections) -> <add-error(|["Pages ", <separate-by(|",")> page*, " are defined multiple times"])> 
    where pages := <collect(?Define([Page()], _, _, _, _)); map(\ Define([Page()], nm, _, _, _) -> nm \)> sections
        ; page* := <find-doubles> pages
        ; not([] := page*)

// @todo: check for multiple definitions of templates
/*  constraint-error-ui :
    Application(nm, sections) -> <add-error(|["Pages ", templates*, " are defined multiple times"])>
    where templates := <collect(?Define([Template()], _, _, _)); map(\ Define([Page()], nm, _, _) -> nm \)> sections
        ; templates* := <find-doubles> templates
        ; not([] := templates*)

  constraint-error-ui :
    Define([Template()], name, args, body) -> <add-error(|["Template ", name, " with arguments ", args, " is defined multiple times"])>
    where <TemplateSignature> (name, <map(?Arg(_,<id>))> args)
*/

  constraint-error-ui :
    IfTempl(e, _, _) -> <add-error(|["Expression ", <pp-webdsl> e, " should be of type Bool"])>
    where not(SimpleSort("Bool") := <type-of> e)

  constraint-error-ui :
    IfNoElseTempl(e, _) -> <add-error(|["Expression ", <pp-webdsl> e, " should be of type Bool"])>
    where not(SimpleSort("Bool") := <type-of> e)



  constraint-error-ui :
    TemplateCase(e, talt*) -> <add-error(|["case expression should have value type instead of ", t])>
    where t := <type-of> e
  ; not(<is-constant-type> t)

  constraint-error-ui :
    s@TemplateCase(e, talt*) -> s
    where t := <type-of> e
  ; not(<filter(constraint-error-case-alt(|t))> talt* => [])

  constraint-error-ui(|t1) :
    s@TemplateCaseAlt(e, elem*) -> <add-error(|["constant in case alternative ", e, 
                         " should have same type as case expression ", t1])>
    where t2 := <type-of> e
        ; not(<type-compatible>(t1,t2))
/*        
rules
   
  constraint-error-ui : 
    d@Define(mod*,x,farg*,elem*) -> <fail>
    where <remove-all(top-definition);alltd(constraint-error-page-var-init-action)> elem*
  
  //top-definition = ?Action(_,_,_)
  top-definition = ?InitAction(_)
  top-definition = ?VarDecl(_,_)
  top-definition = ?VarDeclInit(_,_,_)
  top-definition = ?VarDeclInitInferred(_,_)
  
  constraint-error-page-var-init-action :  
    x -> <constraint-error-page-var-init-action-error>
    where top-definition
    
  // this element should not be nested, since it does not take part in the regular template element request handling lifecycle:
  // should be an error, warning for now (legacy and acceptance reasons)
  constraint-error-page-var-init-action-error = add-warning(|["nesting this element has no meaning, it is handled separately from other template elements: "])
*/