module org/webdsl/dsl/languages/ui/constraints

imports
  libstrategolib

imports
  libwebdsl-front

rules

  constraint-error-ui :
    IfTempl(e, _, _) -> <add-error(|["Expression ", <pp-webdsl> e, " should be of type Bool"])>
    where not(SimpleSort("Bool") := <type-of> e)

  constraint-error-ui :
    IfNoElseTempl(e, _) -> <add-error(|["Expression ", <pp-webdsl> e, " should be of type Bool"])>
    where not(SimpleSort("Bool") := <type-of> e)

  constraint-error-ui :
    IfElseIfTempl(e, _, _, _) -> <add-error(|["Expression ", <pp-webdsl> e, " should be of type Bool"])>
    where not(SimpleSort("Bool") := <type-of> e)

  constraint-error-ui :
    ElseIfTempl(e, _) -> <add-error(|["Expression ", <pp-webdsl> e, " should be of type Bool"])>
    where not(SimpleSort("Bool") := <type-of> e)

rules

  constraint-error-ui :
    TemplateCase(e*, talt*) -> <add-error(|["case expression should have value type instead of ", t*])>
    where t* := <map(type-of)> e*
        ; not([] := <filter(not(is-constant-type))> t*)

  constraint-error-ui :
    s@TemplateCase(e*, talt*) -> s
    where t* := <map(type-of)> e*
        ; not(<filter(constraint-error-case-alt(|t*))> talt* => [])

  constraint-error-ui(|t1*) :
    s@TemplateCaseAlt(e*, elem*) -> 
    <add-error(|["constant in case alternative ", e*, 
                 " should have same type as case expression ", t1*])>
    where t2* := <map(type-of)> e*
        ; not(<zip(type-compatible)>(t1*,t2*))
