module org/webdsl/dsl/languages/ui/select

rules

  rename-ui :
    Select(x, s, lab1, e1, props1, elems1){anno*} -> Select(y, s, lab2, e2, props2, elems2){anno*} 
    with  (y, s, lab2, e2, props2, elems2) := <rename-select> (x, s, lab1, e1, props1, elems1)
 
  rename-ui :
    SelectNoProps(x, s, lab1, e1, elems1){anno*} -> SelectNoProps(y, s, lab2, e2,elems2){anno*}
    with  (y, s, lab2, e2, [], elems2) := <rename-select> (x, s, lab1, e1, [], elems1)
  rename-ui :
    SelectNoPropsNoElems(x, s, lab1, e1){anno*} -> SelectNoPropsNoElems(y, s, lab2, e2){anno*} 
    with  (y, s, lab2, e2, [], []) := <rename-select> (x, s, lab1, e1, [], [])
  rename-ui :
    SelectNoElems(x, s, lab1, e1, props1){anno*} -> SelectNoElems(y, s, lab2, e2, props2){anno*} 
    with  (y, s, lab2, e2, props2, []) := <rename-select> (x, s, lab1, e1, props1, [])
        
  rename-select :
    (x, s, lab1, e1, props1, elems1) -> (y, s, lab2, e2, props2, elems2) 
    with {| Rename
            : y := <rename-bound(|s)> x
            ; e2 := <rename-all> e1
            ; lab2 := <rename-all> lab1
            ; props2 := <rename-all> props1
            ; elems2 := <rename-all> elems1
          |}
         
rules

  normalize-ui : 
    SelectNoProps(a,b,c,d,e){anno*} -> Select(a,b,c,d,[],e){anno*}
  normalize-ui : 
    SelectNoPropsNoElems(a,b,c,d){anno*} -> Select(a,b,c,d,[],[]){anno*}
  normalize-ui : 
    SelectNoElems(a,b,c,d,e){anno*} -> Select(a,b,c,d,e,[]){anno*}
 
  normalize-ui : 
    SelectFromListNoProps(a,b,c){anno*} -> SelectFromList(a,b,[],c){anno*}
  normalize-ui : 
    SelectFromListNoPropsNoElems(a,b){anno*} -> SelectFromList(a,b,[],[]){anno*}
  normalize-ui : 
    SelectFromListNoElems(a,b,c){anno*} -> SelectFromList(a,b,c,[]){anno*}
    
rules

  constraint-error-ui :
    sel@SelectFromListNoProps(e1, e2, elems)    -> <constraint-error-ui-selectfrom> (e1,e2,sel)
  constraint-error-ui :
    sel@SelectFromList(e1, e2, passign*, elems) -> <constraint-error-ui-selectfrom> (e1,e2,sel)
  constraint-error-ui :
    sel@SelectFromListNoPropsNoElems(e1, e2)    -> <constraint-error-ui-selectfrom> (e1,e2,sel)
  constraint-error-ui :
    sel@SelectFromListNoElems(e1, e2, passign*) -> <constraint-error-ui-selectfrom> (e1,e2,sel)
    
  constraint-error-ui-selectfrom :
    (e1,e2,sel)  -> <add-error(|[e2pp," must be of collection type 'Set<",e1typepp,">' or 'List<",e1typepp,">', but is of type '", e2typepp,"'"])> sel
    where e1type := <type-of> e1 // don't give error when type of e1 is invalid
        ; e1typepp := <pp-webdsl-to-string> e1type
        ; e2type := <type-of> e2 // don't give error when type of e2 is invalid
        ; e2typepp := <pp-webdsl-to-string> e2type
        ; e2pp := <pp-webdsl-to-string> e2
        ; not(GenericSort("List", _) := e2type <+ GenericSort("Set", _) := e2type)

  constraint-error-ui-selectfrom :
    (e1,e2,sel) -> <add-error(|["type of ",<pp-webdsl> e1, " (",<pp-webdsl> srt2,") should be compatible with type in collection ",<pp-webdsl> e2," (",<pp-webdsl> srt,")"])> sel
    where not(
            srt3 := <type-of> e2
          ; GenericSort(_, [srt]) := srt3
          ; srt2 := <type-of> e1
          ; (<type-compatible> (srt2, srt) <+ <type-compatible> (srt2, srt3) )
          )

/**
 *  'allowed=exp' annotation
 */
rules

  desugar-ui :
    tc@Select(x, srt, label, FieldAccess(var,x_prop), passign*, elem*){anno*} ->
    result
    where SimpleSort(x_vartypename) := <type-of> var
        ; propannos := <property-annos> (x_vartypename,x_prop) 
        ; <fetch(?AllowedAnno(e1))> propannos
    with  t_typeofcol := <type-of> e1
        ; x_name := <allowed-collection-function-name> x_prop
        ; e_col := Call(var,x_name,[])
        ; result := SelectFromList(FieldAccess(var,x_prop), e_col, passign*, elem*){anno*}

// TODO constraint: 'allowed=' collection must be Set or List of property type
// constraint: only 1 'allowed'
// constraint: overlap with generated function below

strategies

  desugar-ui :
    Entity(x_class,super, entbodydecs1){anno*} -> <rename> Entity(x_class,super, entbodydecs2){anno*} 
    where <oncetd(not-translated-allowed-anno)> entbodydecs1
    with  entbodydecs2 := <get-all-function-allowed-annotation(|x_class)> entbodydecs1
    
  desugar-ui : 
    EntityNoSuper(x_class, entbodydecs1){anno*} -> <rename> EntityNoSuper(x_class, entbodydecs2){anno*} 
    where <oncetd(not-translated-allowed-anno)> entbodydecs1
    with  entbodydecs2 := <get-all-function-allowed-annotation(|x_class)> entbodydecs1
    
  desugar-ui :
    SessionEntity(x_class, entbodydecs1){anno*} -> <rename> SessionEntity(x_class, entbodydecs2){anno*} 
    where <oncetd(not-translated-allowed-anno)> entbodydecs1
    with  entbodydecs2 := <get-all-function-allowed-annotation(|x_class)> entbodydecs1
   
signature
  constructors 
    AllowedAnnotationFunctionGenerated: Term
  
rules 

  not-translated-allowed-anno : 
    prop@Property(x, k, srt, annos) -> prop
    where <fetch(?AllowedAnno(e1))> annos
        ; <not(fetch(AllowedAnnotationFunctionGenerated))> annos

  get-all-function-allowed-annotation(|x_class):
    entbodydecs1 -> entbodydecs2
    with  tuples := <map(get-function-allowed-annotation(|x_class) <+ !(<id>,[]) )> entbodydecs1
        ; (props2,funcs1) := <unzip> tuples
        ; funcs2 := <flatten-list> funcs1
        ; rest := <remove-all(?Property(_,_,_,_))> entbodydecs1
        ; entbodydecs2 := <concat> [props2,funcs2,rest]

  get-function-allowed-annotation(|x_class) :  
    prop@Property(x, k, srt, annos) -> 
    (Property(x, k, srt, [AllowedAnnotationFunctionGenerated()|annos])
    ,result)
    where not-translated-allowed-anno
    with  <fetch(?AllowedAnno(e1))> annos
        ; x_name := <allowed-collection-function-name> x
        ; srt_typeofcol := <type-of> e1
        ; result := 
            fun |[ 
              function x_name():srt_typeofcol { return e1; } 
            ]|
     
  allowed-collection-function-name : x -> <concat-strings> ["allowedCollectionForProperty",<capitalize-string> x]   
  

/**
 *  'not null' annotation
 */
 rules
 
  desugar-ui :
    Select(x, srt, label, FieldAccess(var,x_prop), passign*, elem*){anno*} ->
    Select(x, srt, label, FieldAccess(var,x_prop), passign1*, elem*){anno*}
    where passign1* := <desugar-not-null-anno(|passign*, var, x_prop)>
    
  desugar-ui :
    SelectFromList(FieldAccess(var,x_prop), e, passign*, elem*){anno*} ->
    SelectFromList(FieldAccess(var,x_prop), e, passign1*, elem*){anno*}
    where passign1* := <desugar-not-null-anno(|passign*, var, x_prop)>
       
  desugar-not-null-anno(|passign*, var, x_prop) :
    _ -> passign1*
    where not(<fetch(TemplateCallPropertyNotNull)> passign*)
        ; SimpleSort(x_vartypename) := <type-of> var
        ; propannos := <property-annos> (x_vartypename,x_prop) 
        ; <fetch(?NotNullAnno())> propannos
    with  passign1* := [TemplateCallPropertyNotNull() | passign*]
        