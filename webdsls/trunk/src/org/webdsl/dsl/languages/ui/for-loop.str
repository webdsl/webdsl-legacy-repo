module org/webdsl/dsl/languages/ui/for-loop

rules

  rename-ui :
    def@For(x, srt, e1, f1, elems1, elems3){anno*} -> For(y, srt2, e2, f2, elems2, elems4){anno*}
    with e2 := <rename-all> e1
       ; {| Rename, VarInTemplateContext
          : srt2   := <rename-all> srt
          ; y      := <rename-bound-immutable(|srt2)> x
          ; rules(VarDecl : y -> def)
          ; <declare-vars-in-context> y
          ; f2     := <rename-all> f1
          ; elems2 := <rename-all> elems1
          |}
       ; elems4 := <rename-all> elems3 // separator cannot refer to loop index

  rename-ui :
    def@ForInferred(x, e1, f1, elems1, elems3){anno*} -> ForInferred(y, e2, f2, elems2, elems4){anno*}
    with e2 := <rename-all> e1
       ; {| Rename, VarInTemplateContext
          : ((GenericSort(_,[srt]) := <type-of;add-immutable-anno> e2) <+ srt := "unknown") 
            // type-of can fail if the expression cannot be typed, in that case the for loop var will not be declared and constraint error triggers
            // add ImmutableReference annotation, because x will not be assignable even if e was
          ; y      := <rename-bound-immutable(|srt)> x
          ; rules(VarDecl : y -> def)
          ; <declare-vars-in-context> y
          ; f2     := <rename-all> f1
          ; elems2 := <rename-all> elems1
          |}
       ; elems4 := <rename-all> elems3 // separator cannot refer to loop index         

  desugar-action :
    ForInferred(x, e, f, elems1, elems2){anno*} -> For(x, srt, e, f, elems1, elems2){anno*}
    with GenericSort(_,[srt]) := <type-of; add-immutable-anno> e //add ImmutableReference annotation, because x will not be assignable even if e was

  rename-ui :
    def@ForAll(x, srt, f1, elems1, elems3){anno*} -> ForAll(y, srt2, f2, elems2, elems4){anno*}
    with {| Rename, VarInTemplateContext
          : srt2   := <rename-all> srt
          ; y      := <rename-bound-immutable(|srt2)> x
          ; rules(VarDecl : y -> def)
          ; <declare-vars-in-context> y
          ; f2     := <rename-all> f1
          ; elems2 := <rename-all> elems1
          |}
        ; elems4 := <rename-all> elems3 // separator cannot refer to loop index

  rename-ui :
    def@ForCount(x, e1, e2, elems1, elems3){anno*} -> ForCount(y, e3, e4, elems2, elems4){anno*}
    with  e3 := <rename-all> e1
        ; e4 := <rename-all> e2 
        ; {| Rename, VarInTemplateContext
          : y := <rename-bound-immutable(|SimpleSort("Int"))> x
          ; rules(VarDecl : y -> def)
          ; <declare-vars-in-context> y
          ; elems2 := <rename-all> elems1
          |}  
        ; elems4 := <rename-all> elems3 // separator cannot refer to loop index

  add-backend-annotation :
    def@ForAll(_, SimpleSort(x_class), _, _, _){anno*} -> def{CachedEntity(), anno*}
    where not(<fetch-elem(?CachedEntity())> anno*)
    ; <is-cached-entity> x_class
          
rules // ForAll only declared entity types
  
  constraint-error-ui: ForAll(_, srt, _, _, _) -> <forall-constraint-error(|srt)>

  forall-constraint-error(|srt) :
    x -> <add-error(|["'for' without 'in' can only iterate over a defined entity type, incorrect type used: ", <pp-type> srt])>
    where not(<is-entity-type> srt) <+ <?SimpleSort("Entity")> srt

rules

  constraint-error-ui : For(_, srt, e, _, _, _)            -> <for-constraint-error(|srt, e)>
     
  for-constraint-error(|srt, e) :
    x -> <add-error(|[<pp-webdsl> e, " should be a collection of type ", <pp-type> srt])>
    where not(GenericSort(_, [srt]) := <type-of> e)  
    
rules    

  constraint-error-ui : ForCount(x, e1, e2, elems1, sep) -> <expression-type-constraint(|SimpleSort("Int"))> e1
  constraint-error-ui : ForCount(x, e1, e2, elems1, sep) -> <expression-type-constraint(|SimpleSort("Int"))> e2
    