module org/webdsl/dsl/languages/ui/declare

imports
  libwebdsl-front
  org/webdsl/dsl/languages/-

strategies

  declare-ui = initial-declare-template-definition 
  declare-ui = initial-declare-page-definition 

strategies // inital declare for globally visible pages/templates

  initial-declare-page-definition :
    def@Define(mod*, _, _, _, _) -> <with(<declare-page-definition> def)>
    where <fetch(?Page())> mod*

  initial-declare-template-definition :
    def@Define(mod*, _, _, _, _) -> <with(<declare-toplevel-template-definition> def )>
    where not(<fetch(?Page())> mod*)
        ; not(<fetch(?Email())> mod*)

   /* no local declares here
  declare-template-definition :
    def |[ define mod* x(farg1*) { elem1* } ]| -> <declare-local-template-definition> def |[ define mod* x(farg1*) { elem1* } ]| 
    where (InPage <+ InTemplate)
        ; not(<fetch(?Page())> mod*)
        ; not(<fetch(?Email())> mod*)
    with {| InTemplate
          : <debug(!"local")> x;rules ( InTemplate := x )
          ; <alltd(declare-template-definition)> elem1*
          |}*/
          
rules

  IsPage = where(PageDecl)
  PageNames = all-keys-PageDecl

  declare-page-definition =
    ?def@Define(mod*, name, fargs, targs, body)
    ; where(<fetch(?Page())> mod*)
    ; with(common-declare-template-rules)
    ; where(with (
      t1* := <template-formal-arguments-to-types> fargs
      ; rules (
          CheckPageSignature : (Page(), name, t1*) -> SimpleSort("Page")
          PageDecl :+ name -> def
        )
    ))
    
  AllTopLevelTemplateNames =
      all-keys-TopLevelTemplateDefinitions
  AllTopLevelTemplateArguments =
      bagof-TopLevelTemplateDefinitions
    ; map(TopLevelTemplateDecl; ?Define(_,_,<template-formal-arguments-to-types>,_,_))
    
  declare-toplevel-template-definition =
    ?def@Define(mod*, name, fargs, targs, body)
    ; where(not(<fetch(?Page())> mod*))
    ; where(not(<fetch(?Email())> mod*))
    ; with(common-declare-template-rules)
    ; where(with(
        t* := <template-formal-arguments-to-types> fargs
      ; n := <strip-annos> name
      ; y := <newname> n
      ; rules (
        TopLevelTemplateDefinitions :+ n -> (n, t*)
        OverloadedTemplateSignature : (n, t*) -> y    // not used
        TopLevelTemplateDecl :+ (n, t*) -> def
        CheckPageSignature : (Page(), n, t*) -> SimpleSort("Page") // for ajax
       )
    ))
    
  template-formal-arguments-to-types =
    map(?Arg(_,<id>); try(?RefSort(<id>)))

  declare-local-template-definition =
    ?def@Define(mod*, name, fargs, targs, body)
    ; where(not(<fetch(?Page())> mod*))
    ; where(not(<fetch(?Email())> mod*))
    ; with(common-declare-template-rules)
    ; where(with( 
        page := <InPage <+ InTemplate>
        ; t1* := <template-formal-arguments-to-types> fargs
        ; n := <strip-annos> name
        ; rules (
            LocalTemplateNames :+ page -> name
            LocalTemplateSignature : (n, t1*) -> def
            EnclosingDefinition : name -> page
          )
      ))
  
  common-declare-template-rules :
    def@Define(mods, name, fargs, targs, body){anno*} -> def
    with  t* := <template-formal-arguments-to-types> fargs
        ; n := <strip-annos> name
        ; genname := <generate-template-name> (n,t*)
        ; rules( TemplateSignature  : (n, t*) -> def
                 TemplateNewName : (n, t*) -> genname //used in overload resolution
                 TemplateDefinition : n // mainly used to check whether generated templates are defined manually
                 TemplateArguments  : genname -> fargs //used for determining which args in call are ref args
                 TemplateRequires   : (n, t*) -> targs
               )
        // use only the first declaration of each template
        // there will be multiple definitions, and the last will no longer have origin info
        ; try(not(<TemplateDecl> genname); rules(TemplateDecl : genname -> def))
        ; if <oncetd( // check for each variant of elements for robustness
            ?TemplateCallNoBody("elements",_)
            <+?TemplateCallNoArgs("elements")            
            <+?TemplateCallNoAssigns("elements",_,_)  
            <+?TemplateCallPropsNoBody("elements",_,_)
            <+?TemplateCallProps("elements",_)        
            <+?TemplateCallPropsNoArgs("elements",_,_)
            <+?TemplateCallBody("elements",_)   
            <+?TemplateCall("elements",_,_,_) 
            )> body then rules( TemplateContainsElementsCall : genname ) end
        // generics    TODO: simplified lookup for generics
        ; if <oncetd(?SimpleSort("EntityType"))> fargs then rules (TemplateWithGenerics : name) end

  IsDefinedAsAjaxTemplate =
    where(TemplateDecl; ?Define(<id>, _, _, _, _); fetch(?AjaxTemplate()))

rules //utility rules to get the unique name generated for a template

  generate-template-name :
    (n,t*) -> name
    with arg_part := <map(generate-template-name-helper)> t*
       ; name := <concat-strings> [n | arg_part]
       
  generate-template-name-helper:
    SimpleSort(s) -> s
    
  generate-template-name-helper:
    GenericSort(x,[SimpleSort(s)]) -> <concat-strings> [x,s]
        
strategies

  declare-page-action(|direct-enclosing-define-name) =
    ?def@Action(name, fargs, body)
    ; with( 
        t1* := <map(?Arg(_,<id>))> fargs 
      )
      ; rules(
          ActionDefinition  : name -> def
          
          CheckActionSignature :
            (direct-enclosing-define-name, name, t2*) -> SimpleSort("Void")
            where <zip(type-compatible)> (t1*, t2*)
        )

rules

  // TODO: needs refactoring: dynamic rule should match signature
  add-backend-annotation =
      ?ActionCall(action, fargs)
    ; where(<OriginalNonUniqueName; ActionDefinition> action)
    ; add-new-anno(|ActionCallArgsAnno(fargs))

rules

  get-toplevel-name = ?Define(_, <id>, _, _, _)
   