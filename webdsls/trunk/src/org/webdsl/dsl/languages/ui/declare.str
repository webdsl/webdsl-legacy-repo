module org/webdsl/dsl/languages/ui/declare

imports
  libwebdsl-front
  org/webdsl/dsl/languages/-
  org/webdsl/dsl/languages/ui/-
  org/webdsl/dsl/languages/ajax/-
  org/webdsl/dsl/languages/data-model/-

strategies

  declare-ui = initial-declare-template-definition 
  declare-ui = initial-declare-page-definition 

strategies // inital declare for globally visible pages/templates

  initial-declare-page-definition :
    def@Define(mod*, _, _, _, _) -> <with(<declare-page-definition> def)>
    where <fetch(?Page())> mod*

  initial-declare-template-definition :
    def@Define(mod*, _, _, _, _) -> <with(<declare-toplevel-template-definition> def )>
    where not(<fetch(?Page())> mod*)
        ; not(<fetch(?Email())> mod*)

   /* no local declares here
  declare-template-definition :
    def |[ define mod* x(farg1*) { elem1* } ]| -> <declare-local-template-definition> def |[ define mod* x(farg1*) { elem1* } ]| 
    where (InPage <+ InTemplate)
        ; not(<fetch(?Page())> mod*)
        ; not(<fetch(?Email())> mod*)
    with {| InTemplate
          : <debug(!"local")> x;rules ( InTemplate := x )
          ; <alltd(declare-template-definition)> elem1*
          |}*/
          
rules

  IsPage = where(PageDecl)
  PageNames = all-keys-PageDecl

  declare-page-definition =
    ?def@Define(mod*, name, fargs, targs, body)
    ; where(<fetch(?Page())> mod*)
    ; with(common-declare-template-rules)
    ; with (
        (n,t*) := <normalize-signature> (name,fargs)
      ; if not(<CheckPageSignature>(Page(), n, t*)) //don't override
           <+ <fetch(TemplateModOverride)> mod* //unless this is the override 
        then rules( CheckPageSignature : (Page(), n, t*) -> InternalSort("Page") ) end 
      ; if <fetch(TemplateModOverride)> mod* 
        then rules( PageDeclOverride :+ n -> n  )
        else rules( PageDecl :+ n -> def ) //@TODO probably not necessary to produce def in this rule
        end
      )   
    
  AllTopLevelTemplateNames =
      all-keys-TopLevelTemplateDefinitions
  AllTopLevelTemplateArguments =
      bagof-TopLevelTemplateDefinitions
    ; map(TopLevelTemplateDecl; ?Define(_,_,<formal-arguments-to-types>,_,_))
    
  declare-toplevel-template-definition =
    ?def@Define(mod*, name, fargs, targs, body)
    ; where(not(<fetch(?Page())> mod*))
    ; where(not(<fetch(?Email())> mod*))
    ; with(common-declare-template-rules)
    ; with(
        sig@(n,t*) := <normalize-signature> (name,fargs)
      ; rules (
        TopLevelTemplateDefinitions :+ n -> sig
        )
      ; if not(<CheckPageSignature>(Page(), n, t*)) //don't override
           <+ <fetch(TemplateModOverride)> mod* //unless this is the override 
        then rules( CheckPageSignature : (Page(), n, t*) -> InternalSort("Template") ) end// for ajax
      ; if <fetch(TemplateModOverride)> mod* 
        then rules( TopLevelTemplateDeclOverride :+ sig -> sig )
        else rules( TopLevelTemplateDecl :+ sig -> def ) //@TODO probably not necessary to produce def in this rule
        end
      )
    
  //only finds exact match for types, no overloading
  get-exact-definition-from-sig(|name,argtypes) : 
    _ -> def
    where def := <TemplateSignature> <get-define-sig(|name,argtypes)>
  get-define-sig(|name,argtypes) : 
    _ -> (n,type*)
    with  n := <strip-annos> name
    with  type* := <strip-all-annos> argtypes
  get-exact-definition-from-sig-farg(|name,fargs) :
    _ -> def
    where def := <TemplateSignature> <get-define-sig-farg(|name,fargs)>
  get-define-sig-farg(|name,fargs) : 
    _ -> result
    with  t* := <formal-arguments-to-types> fargs
       ; result := <get-define-sig(|name,t*)>

  declare-local-template-definition =
    ?def@Define(mod*, name, fargs, targs, body)
    ; where(not(<fetch(?Page())> mod*))
    ; where(not(<fetch(?Email())> mod*))
    ; with(common-declare-template-rules)
    ; where(with( 
        page := <InPage <+ InTemplate>
        ; sig@(n,t*) := <normalize-signature> (name,fargs)
        ; genname := <generate-template-name> sig
        ; pagegenname := <normalize-signature; generate-template-name>(page, <TemplateArg>)
        ; rules (
            LocalTemplateNames :+ page -> name
            LocalTemplateSignature : (n, t*) -> def
            EnclosingDefinition : name -> page
            TemplateRedefinitions :+ genname -> pagegenname
          )
      ))
   
  is-local-template-def = where(?def@Define(mod*, name, fargs, targs, body); <fetch(Local())> mod*)
  
  common-declare-template-rules :
    def@Define(mods, name, fargs, targs, body){anno*} -> def
    with  sig@(n,t*) := <normalize-signature> (name,fargs)
        ; genname := <generate-template-name> sig
        ; rules( TemplateSignature  :+ (n, t*) -> def // :+ so overrides (with the same key) will also be retrievable with bagof-TemplateSignature
                 TemplateNewName : (n, t*) -> genname //used in overload resolution
                 TemplateDefinition : n // mainly used to check whether generated templates are defined manually
                 TemplateArguments  : genname -> fargs //used for determining which args in call are ref args
                 TemplateRequires   : (n, t*) -> targs
               )
        // use only the first declaration of each template
        // there will be multiple definitions, and the last will no longer have origin info
        ; try(not(<TemplateDecl> genname); rules(TemplateDecl : genname -> def))
        // generics    TODO: simplified lookup for generics
        ; if <oncetd(?SimpleSort("EntityType"))> fargs then rules (TemplateWithGenerics : name) end
        ; if <fetch(TemplateDeprecated)> mods then rules(IsTemplatedDeprecated : name ) end
        ; if <fetch(TemplateModInline)> mods then rules(IsInlineTemplate : genname ) end
        ; <declare-built-in-template-rules> (QualifiedElementsCall(name),[])
        ; <topdown(try(declare-placeholder-in-template))> body
        ; alltd(declare-in-template; fatal-err(|"declare-in-template succeeded"))
  
  // hook
  declare-in-template = fail

  IsDefinedAsAjaxTemplate =
    where(TemplateDecl; ?Define(<id>, _, _, _, _); fetch(?AjaxTemplate()))

strategies

  declare-page-action(|direct-enclosing-define-name) =
    ?def@Action(amod*, name, fargs, body)
    ; with(sig@(n,t*) := <normalize-signature> (name,fargs))
    ; with(
        rules(
          ActionDefinition  : name -> def
          
          CheckActionSignature :
            (direct-enclosing-define-name, n, t2*) -> fargs
            where <zip(type-compatible)> (t*, t2*)
        )
      )

rules

signature constructors
  PageArgNumbersAdded : Term
  
rules

  add-backend-annotation :
    def@Define(mod*, name, fargs, targs, body){defanno*} -> Define(mod*, name, fargs1, targs, body){PageArgNumbersAdded(),defanno*}
    where <fetch(Page <+ AjaxTemplate)> mod*
        ; not(<fetch(PageArgNumbersAdded)> defanno*)
    with  fargs1 := <add-farg-numbers> fargs

  add-backend-annotation =
      ?def@Define(_,_,_,_,_)
    ; add-new-anno(|SessionEntities(<bagof-SessionEntityNames>))

rules // mark templates in built-in.app as precompiled
  
  add-backend-annotation :
    def@Define(mod*, name, fargs, targs, body){anno*} -> Define(mod*, name, fargs, targs, body){Precompiled(),anno*}
    where not(<fetch(Precompiled)> anno*)
    where defined-in-built-in-app-file
    
  defined-in-built-in-app-file :
    t@_{anno*} -> t
    where <fetch(?PositionAnno(<string-starts-with(|"../.servletapp/src-webdsl-template/built-in.app")>))> anno*
       <+ <fetch(?At(<string-starts-with(|"../.servletapp/src-webdsl-template/built-in.app")>,_,_))> anno*
       
  keep-position-anno = ?Define(_,name,_,_,_){anno*}

rules

  get-toplevel-name = ?Define(mod*, x, farg, _, _); <generate-template-name-fargs> (x,farg,mod*)
   