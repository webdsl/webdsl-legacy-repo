module org/webdsl/dsl/languages/ui/normalize

//rules // literals

  //normalize-ui :
   // Text(x) -> Text(<un-double-quote> x)
 
rules // else if 

  normalize-ui :
    IfElseIfTempl(e1, elem1*, [ElseIfTempl(e2, elem2*)], None()){anno*} -> IfTempl(e1, elem1*, [IfTempl(e2, elem2*, [])]){anno*}
    
  normalize-ui :
    IfElseIfTempl(e1, elem1*, [], None()){anno*} -> IfTempl(e1, elem1*, []){anno*}

  normalize-ui :
    IfElseIfTempl(e1, elem1*, [ElseIfTempl(e2, elem2*)], Some(ElseTempl(elem3*))){anno*} -> IfTempl(e1, elem1*, [IfTempl(e2, elem2*, elem3*)]){anno*}

  normalize-ui :
    IfElseIfTempl(e1, elem1*, [], Some(ElseTempl(elem3*))){anno*} -> IfTempl(e1, elem1*, elem3*){anno*}

  normalize-ui :
    IfElseIfTempl(e1, elem1*, [ElseIfTempl(e2, elem2*)|elseif*@[_|_]], elem){anno*}-> 
    IfTempl(e1, elem1*, [IfElseIfTempl(e2, elem2*, elseif*, elem)]){anno*}
    
rules // case template element

  desugar-in-define-context: //after desugaring, this rule calls rename on the whole define. Otherwise the var is seen as global var.
    elem|[ case(e*) { talt* } ]| -> elem|[ dummy(){ elem* elem0 } ]|
    with (
          (x*, elem*) := <map(template-case-vardecl); unzip> e*
        ; elem0 := <template-case-to-if(|x*)> talt*
    )

  template-case-vardecl :
    e -> (x, <add-immutable-anno>elem|[ var x : srt := e; ]|) // The immutable anno on the vardecl is used by the query analysis, so `x` becomes a synonym for `e`
    where srt := <type-of; strip-ref-sort> e //strip ref sort to simplify, this var is only used for comparison
        ; x := <toplevel-rename> "caseval"
    
  template-case-to-if(|x*) :
    [] -> elem|[ dummy(){ } ]|

  template-case-to-if(|x*) :
    [ TemplateCaseAlt(const*, elem1*), talt* ] -> elem|[ if(e) { elem1* } else { elem2 } ]|
    where elem2 := <template-case-to-if(|x*)> talt*
        ; e := <zip(\ (x, const) -> |[ x == const]|\ ); foldr(!|[ true ]|, \ (e1,e2) -> |[ e1 && e2]|\ )> (x*, const*)

  template-case-to-if(|x*) :
    [ TemplateCaseAltDefault(elem1*), talt* ] -> elem|[ dummy(){ elem1* } ]|

rules // template call variants

  normalize-ui :
    TemplateCallNoArgs(x){anno*} -> TemplateCall(x,[],[],TemplateBody([])){anno*}

  normalize-ui :
    TemplateCallNoBody(x, e*){anno*} -> TemplateCall(x,e*,[],TemplateBody([])){anno*}

  normalize-ui :
    TemplateCallPropsNoBody(x,e*,passign*){anno*} -> TemplateCall(x,e*,passign*,TemplateBody([])){anno*}
 
  normalize-ui :
    TemplateCallNoAssigns(x,e*,body){anno*} -> TemplateCall(x,e*,[],body){anno*}
    
  normalize-ui :
    TemplateCallProps(x,passign*){anno*} -> TemplateCall(x,[],passign*,TemplateBody([])){anno*}

  normalize-ui :
    TemplateCallPropsNoArgs(x,passign*,body){anno*} -> TemplateCall(x,[],passign*,body){anno*}

  normalize-ui :
    TemplateCallBody(x,body){anno*} -> TemplateCall(x,[],[],body){anno*}
