module org/webdsl/dsl/languages/ui/normalize

//rules // literals

  //normalize-ui :
   // Text(x) -> Text(<un-double-quote> x)

rules // else if 

  normalize-ui :
    IfElseIfTempl(e1, elem1*, [ElseIfTempl(e2, elem2*)], None()) -> IfTempl(e1, elem1*, [IfTempl(e2, elem2*, [])])

  normalize-ui :
    IfElseIfTempl(e1, elem1*, [ElseIfTempl(e2, elem2*)], Some(ElseTempl(elem3*))) -> IfTempl(e1, elem1*, [IfTempl(e2, elem2*, elem3*)])

  normalize-ui :
    IfElseIfTempl(e1, elem1*, [ElseIfTempl(e2, elem2*)|elseif*@[_|_]], elem) -> 
    IfTempl(e1, elem1*, IfElseIfTempl(e2, elem2*, elseif*, elem))
    
rules // case template element

  desugar-in-define-context: //after desugaring, this rule calls rename on the whole define. Otherwise the var is seen as global var.
    elem|[ case(e*) { talt* } ]| -> elem|[ dummy(){ elem* elem0 } ]|
    with (
          (x*, elem*) := <map(template-case-vardecl); unzip> e*
        ; elem0 := <template-case-to-if(|x*)> talt*
    )

  template-case-vardecl :
    e -> (x, elem|[ var x : srt := e; ]|)
    where srt := <type-of; strip-ref-sort> e //strip ref sort to simplify, this var is only used for comparison
        ; x := <toplevel-rename> "caseval"
    
  template-case-to-if(|x*) :
    [] -> elem|[ dummy(){ } ]|

  template-case-to-if(|x*) :
    [ TemplateCaseAlt(const*, elem1*), talt* ] -> elem|[ if(e) { elem1* } else { elem2 } ]|
    where elem2 := <template-case-to-if(|x*)> talt*
        ; e := <zip(\ (x, const) -> |[ x == const]|\ ); foldr(!|[ true ]|, \ (e1,e2) -> |[ e1 && e2]|\ )> (x*, const*)

  template-case-to-if(|x*) :
    [ TemplateCaseAltDefault(elem1*), talt* ] -> elem|[ dummy(){ elem1* } ]|

rules // template elements

  // section("Header") {...} => section() { header{"Header"} }
  // Works only for strings. Making generic is difficult, because argument to a 
  // TemplateCall are Exp* and the body of a TemplateCall is TemplateElement*
  normalize-ui :
    elem|[ section(e){elem*} ]| -> elem|[ section()[]{ header{output(e)} elem* } ]|

  normalize-ui :
    elem|[ x ]| -> elem|[ x()[]{} ]|

  normalize-ui :
    elem|[ x(e*) ]| -> elem|[ x(e*)[]{} ]|

  normalize-ui :
    elem|[ x(e*)[passign*] ]| -> elem|[ x(e*)[passign*]{} ]|
 
  normalize-ui :
    elem|[ x(e*)template-body ]| -> elem|[x(e*)[]template-body]|
    
 normalize-ui :
    elem|[ x[passign*] ]| -> elem|[ x()[passign*]{} ]|

 normalize-ui :
    elem|[ x[passign*]template-body ]| -> elem|[ x()[passign*]template-body ]|

  normalize-ui :
    elem|[ x template-body ]| -> elem|[ x()[]template-body ]|

  normalize-ui :
    elem|[ text(x) ]| -> elem|[ text(y)[]{} ]| 
    with y := <un-double-quote> x
    
  normalize-ui :
    elem*|[ text(e1,e2,e*){} elem* ]| -> elem*|[ text(e1)[]{} text(e2,e*)[]{ } elem* ]|

  normalize-ui :
    elem|[ from(e1){} ]| -> elem|[ from(e1,e1){} ]|
