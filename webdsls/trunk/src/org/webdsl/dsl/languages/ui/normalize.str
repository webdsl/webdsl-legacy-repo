module org/webdsl/dsl/languages/ui/normalize

rules // literals

  normalize-ui :
    Text(x) -> Text(<un-double-quote> x)

rules // case template element

  // TODO: Try rename-all here?
  normalize-ui :
    elem|[ case(e) { talt* } ]| -> <rename-closed> elem|[ dummy(){ var x : srt := e; elem } ]|
    where srt  := <type-of> e
        ; x    := <newname> "caseval"
        ; elem := <template-case-to-if(|x)> talt*

  template-case-to-if(|x) :
    [] -> elem|[ dummy(){ } ]|

  template-case-to-if(|x) :
    [ TemplateCaseAlt(const, elem1*), talt* ] -> elem|[ if(x == const) { elem1* } else { elem2 } ]|
    where elem2 := <template-case-to-if(|x)> talt*

  template-case-to-if(|x) :
    [ TemplateCaseAltDefault(elem1*), talt* ] -> elem|[ dummy(){ elem1* } ]|

rules // templates

  normalize-ui :
    def |[ define x(farg*) { elem* } ]| -> def |[ define template x(farg*) { elem* } ]|
    where not(<EnclosingDefinition> x)        

  normalize-ui :
    def |[ define x(farg*) { elem* } ]| -> def |[ define local x(farg*) { elem* } ]|
    where <EnclosingDefinition> x

rules // template elements

  normalize-ui :
    elem|[ navigate(url(e))[passign*]{} ]| -> elem|[ navigate(url(e))[passign*]{url(e)} ]|

//MW: those two should be necessary?
  normalize-ui :
    elem|[ navigate(url(e))[] ]| -> elem|[ navigate(url(e))[]{url(e)} ]|

  normalize-ui :
    elem|[ navigate(url(e)) ]| -> elem|[ navigate(url(e))[]{url(e)} ]|

  normalize-ui :
    elem|[ navigate(e1, e2)[passign*]{} ]| -> elem|[ navigate(e2)[passign*]{text(e1)} ]|

  normalize-ui :
    elem|[ select( x : srt, str1, e) ]| -> elem|[ select( x : srt, str2, e ) ]|
    where str2 := <un-double-quote> str1

  // section("Header") {...} => section() { header{"Header"} }
  // Works only for strings. Making generic is difficult, because argument to a 
  // TemplateCall are Exp* and the body of a TemplateCall is TemplateElement*
  normalize-ui :
    elem|[ section(e){elem*} ]| -> elem|[ section()[]{ header{output(e)} elem* } ]|

  normalize-ui :
    elem|[ x ]| -> elem|[ x()[]{} ]|

  normalize-ui :
    elem|[ x(e*) ]| -> elem|[ x(e*)[]{} ]|

  normalize-ui :
    elem|[ x(e*)[passign*] ]| -> elem|[ x(e*)[passign*]{} ]|
 
  normalize-ui :
    elem|[ x(e*){elem*} ]| -> elem|[x(e*)[]{elem*}]|
    
 normalize-ui :
    elem|[ x[passign*] ]| -> elem|[ x()[passign*]{} ]|

 normalize-ui :
    elem|[ x[passign*]{elem*} ]| -> elem|[ x()[passign*]{elem*} ]|

  normalize-ui :
    elem|[ x{elem*} ]| -> elem|[ x()[]{elem*} ]|

  normalize-ui :
    elem|[ text(x) ]| -> elem|[ text(y)[]{} ]| 
    with y := <un-double-quote> x
    
  normalize-ui :
    elem*|[ text(e1,e2,e*){} elem* ]| -> elem*|[ text(e1)[]{} text(e2,e*)[]{ } elem* ]|

  normalize-ui :
    elem|[ menubar()[passign*]{ elem* } ]| -> elem|[ menubar("horizontal")[passign*]{ elem* } ]|

  normalize-ui :
    elem|[ from(e1){} ]| -> elem|[ from(e1,e1){} ]|
