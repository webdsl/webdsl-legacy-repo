module org/webdsl/dsl/languages/ui/inline-template

  rules
    
  desugar-in-define-context: //does rename on complete template afterwards to fix references
    TemplateCall(name,args,passigns,elems) 
    -> TemplateCall("templateContext",[e_tname],[],TemplateBody([elem_extra*,elem1*])){}
    with  genname := <generate-template-name-call-args>(name, args)
    where <IsInlineTemplate> genname
    with  Define(mod*, x, farg*, req*, elem*){anno*} := <CurrentTemplateDecl> genname
        ; e_tname:= String(genname)
        ; {| RenameForInlining:
          elem_extra* := <zip(inline-template-var-helper); flatten-list> (args,farg*)
        ; elem1* := <alltd(RenameForInlining)> elem*
          |}
   
  inline-template-var-helper :
    (e,Arg(nm{x},srt)) -> result
    with if not(<is-ref-type> srt)
         then
           type := <type-of> e
         ; nm1 := <newname-webdsl> x
         ; rules ( RenameForInlining : Var(nm) -> Var(nm1) )
         ; result := LocalScopeTemplateVarDeclInit(nm1,type,e) 
         else
           rules ( RenameForInlining : Var(nm) -> e )
         ; result := []
         end

  generate-template-name-call-args :
    (n,args) -> name
    with t* := <map(type-of)> args
       ; name := <generate-template-name> (n,t*) 