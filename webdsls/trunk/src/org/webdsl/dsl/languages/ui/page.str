module org/webdsl/dsl/languages/ui/page

imports
  libstrategolib

imports
  libwebdsl-front

rules // constraints
        
  //duplicate page names
  constraint-error-ui :
    Application(nm, sections) -> <fail>
    where defines := <collect-om(?Define(_, _, _, _, _))> sections 
        ; pagedefines := <filter(\d@Define(mod*, _, _, _, _)->d where <fetch(?Page())> mod*\)> defines
        ; doublepagenames := <map(?Define(_, <strip-annos>, _, _, _));find-doubles> pagedefines
        ; not([] := doublepagenames)
    with <map(try(constraint-error-page-names(|doublepagenames)))> pagedefines
    
  constraint-error-page-names(|doublepagenames):
    Define(_,name,_,_,_) -> <add-error(|["Page with name ", namestripped, " is defined multiple times."])> 
    where namestripped := <strip-annos> name
       ; <fetch(?namestripped)> doublepagenames
    
rules     

  constraint-error-ui :
    Define(mods, name, args, body, requires) -> <add-error(|["type \"Object\" not allowed in page arguments "])>
    where <fetch(?Page())> mods
        ; <oncetd(?SimpleSort("Object"))> args

rules

  constraint-error-ui :
    Application(nm, sections) -> <add-error(|["no root page root() defined."])> ""
    where not(oncetd(?Define([Page()], "root", [], _, _)))

// @todo: check for multiple definitions of templates
/*  constraint-error-ui :
    Application(nm, sections) -> <add-error(|["Pages ", templates*, " are defined multiple times"])>
    where templates := <collect(?Define([Template()], _, _, _)); map(\ Define([Page()], nm, _, _) -> nm \)> sections
        ; templates* := <find-doubles> templates
        ; not([] := templates*)

  constraint-error-ui :
    Define([Template()], name, args, body) -> <add-error(|["Template ", name, " with arguments ", args, " is defined multiple times"])>
    where <TemplateSignature> (name, <map(?Arg(_,<id>))> args)
*/

/*        
rules
   
  constraint-error-ui : 
    d@Define(mod*,x,farg*,elem*) -> <fail>
    where <remove-all(top-definition);alltd(constraint-error-page-var-init-action)> elem*
  
  //top-definition = ?Action(_,_,_)
  top-definition = ?InitAction(_)
  top-definition = ?VarDecl(_,_)
  top-definition = ?VarDeclInit(_,_,_)
  top-definition = ?VarDeclInitInferred(_,_)
  
  constraint-error-page-var-init-action :  
    x -> <constraint-error-page-var-init-action-error>
    where top-definition
    
  // this element should not be nested, since it does not take part in the regular template element request handling lifecycle:
  // should be an error, warning for now (legacy and acceptance reasons)
  constraint-error-page-var-init-action-error = add-warning(|["nesting this element has no meaning, it is handled separately from other template elements: "])
*/
