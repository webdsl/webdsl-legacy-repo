module org/webdsl/dsl/typechecker/page

imports
  libstrategolib

imports
  libwebdsl-front

rules // constraints

  //duplicate page names
  constraint-error :
    Define([Page()], name, args, body) -> <add-error(|["Page ", name, " is defined multiple times."])>
    where <bagof-IsPage;length;not(?1)> name

  constraint-error :
    If(e, _, _) -> <add-error(|["Expression ", <pp-webdsl> e, " should be of type Bool"])>
    where not(SimpleSort("Bool") := <type-of> e)

  constraint-error :
    For(_, srt, e, _) -> <add-error(|[<pp-webdsl> e, " should be of list type of ", <pp-webdsl> srt])>
    where not(GenericSort(_, srt) := <type-of> e)

rules // typechecking template definitions


   /* @TODO: what to do with this?
   typecheck-variable =
     ?ExternalScopeVar(_) // is already checked at this point
   typecheck-page-variable :
     ExternalScopeVar(x) -> ExternalScopeVar(x){Type(t)}
     where if not(t := <TypeOf> x) then
             typecheck-error(|["variable ", x, " has no declared type",111111])
             ; t := "Error"
           end
           
      */

rules // typechecking page elements

  constraint-error :
    TemplateCall("navigate", [e], []) -> <add-error(|["Not a valid link: ", <pp-webdsl> e])>
    where not(<check-link> e)


  constraint-error :
    TemplateCall("navigate", [e], elems) -> <add-error(|["Not a valid link: ", <pp-webdsl> e])>
    where not(<check-link> e)


  constraint-error :
    TemplateCall("navigatebutton", [e], elems) -> <add-error(|["Not a valid link: ", <pp-webdsl> e])>
    where not(<check-link> e)

  check-link :
    ThisCall("url", [e]) -> ThisCall("url", [e])
    where <type-of> e

  check-link :
    ThisCall(p, args) -> ThisCall(p, args)
    where not("url" := p)
        ; if not(<IsPage> p) then
            add-error(|["link to undefined page ", p])
          end

   subtype-of =
     eq

   subtype-of =
     ?(SimpleSort(t1), SimpleSort(t2))
     ; where( <extends>(t1, t2) )

   extends =
     while-not(eq, (Extends, id))

rules // typechecking for inits

  constraint-error : 
    InitAction(body) -> <add-error(|["An init block can not contain a return statement."])>
    where not([] := <collect(?Return(_))> body)
