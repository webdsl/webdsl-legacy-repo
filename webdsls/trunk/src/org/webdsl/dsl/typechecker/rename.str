module org/webdsl/dsl/typechecker/rename

imports
  libstrategolib

imports
  libwebdsl-front

rules 

  rename-all = alltd(rename)

  rename = RenameVar

  rename-bound(|srt) :
    x -> y
    where y := x{<newname> x}
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )

  rename :
    VarDecl(x, srt) -> VarDecl(y, srt)
    where y := <rename-bound(|srt)> x

  rename :
    VarDeclInit(x, srt, e) -> VarDeclInit(y, srt, e')
    where e' := <rename-all> e
        ; y := <rename-bound(|srt)> x

  rename :
    Define(mods, f, args, elems1) -> <declare-template-definition> Define(mods, f, args, elems2)
    where {| RenameVar
           : <map(rename)> args
           ; elems2 := <rename-all> elems1
           |}

  rename :
    Entity(x_class, s, props1, functions1) -> <declare-entity> Entity(x_class, s, props2, functions2)
    where {| RenameVar
           : y := <rename-bound(|SimpleSort(x_class))> "this"
           ; props2 := <rename-all> props1
           ; functions2 := <rename-all> functions1
           |}

  rename :
    EntityNoSuper(x_class, props1, functions1) -> <declare-entity> EntityNoSuper(x_class, props2, functions2)
    where {| RenameVar
           : y := <rename-bound(|SimpleSort(x_class))> "this"
           ; props2 := <rename-all> props1
           ; functions2 := <rename-all> functions1
           |}

  rename :
    SessionEntity(nm, props1, functions1) -> <declare-entity> SessionEntity(nm, props2, functions2)
    where {| RenameVar
           : x_class := <capitalize-string> nm
           ; y := <rename-bound(|SimpleSort(x_class))> "this"
           ; props2 := <rename-all> props1
           ; functions2 := <rename-all> functions1
           |}

  rename :
    Action(nm1, args, b1) -> Action(nm2, args, b2)
    where nm2 := <rename-bound(|"Action")> nm1
        ; {| RenameVar
           : <map(rename)> args
           ; b2 := <rename-all> b1
           |}
        ; <declare-action> Action(nm2, args, b1)

  /*rename :
    Property(x, k, srt, annos) -> Property(y, k, srt, annos)
    where y := <rename-bound(|srt)> x

  rename :
    DerivedProperty(x, k, srt, annos, e1) -> DerivedProperty(y, k, srt, annos, e2)
    where e2 := <rename-all> e1
        ; y := <rename-bound(|srt)> x

  rename :
    PropertyNoAnno(x, k, srt) -> PropertyNoAnno(y, k, srt)
    where y := <rename-bound(|srt)> x

  rename :
    DerivedPropertyNoAnno(x, k, srt, e1) -> DerivedPropertyNoAnno(y, k, srt, e2)
    where e2 := <rename-all> e1
        ; y := <rename-bound(|srt)> x
*/
  rename :
    For(x, srt, e1, f1, elems1) -> For(y, srt, e2, f2, elems2)
    where {| RenameVar
           : y := <rename-bound(|srt)> x
           ; e2 := <rename-all> e1
           ; f2 := <rename-all> f1
           ; elems2 := <rename-all> elems1
           |}

  rename :
    ForNoFilter(x, srt, e1, elems1) -> ForNoFilter(y, srt, e2, elems2)
    where {| RenameVar
           : y := <rename-bound(|srt)> x
           ; e2 := <rename-all> e1
           ; elems2 := <rename-all> elems1
           |}

  rename :
    ForAll(x, srt, f1, elems1) -> ForAll(y, srt, f2, elems2)
    where {| RenameVar
           : y := <rename-bound(|srt)> x
           ; f2 := <rename-all> f1
           ; elems2 := <rename-all> elems1
           |}


  rename :
    ForAllNoFilter(x, srt, elems1) -> ForAllNoFilter(y, srt, elems2)
    where {| RenameVar
           : y := <rename-bound(|srt)> x
           ; elems2 := <rename-all> elems1
           |}

  rename :
    ForStmt(x, srt, e1, f1, b1) -> ForStmt(y, srt, e2, f2, b2)
    where {| RenameVar
           : y := <rename-bound(|srt)> x
           ; e2 := <rename-all> e1
           ; f2 := <rename-all> f1
           ; b2 := <rename-all> b1
           |}

  rename :
    ForStmtNoFilter(x, srt, e1, b1) -> ForStmtNoFilter(y, srt, e2, b2)
    where {| RenameVar
           : y := <rename-bound(|srt)> x
           ; e2 := <rename-all> e1
           ; b2 := <rename-all> b1
           |}

  rename :
    ForExp(oe1, x, s, ie1, f1) -> ForExp(oe2, x, s, ie2, f2)
    where  {| RenameVar
            : y := <rename-bound(|s)> x
            ; oe2 := <rename-all> oe1
            ; f2 := <rename-all> f1
            |}
           ; ie2 := <rename-all> ie1

  rename :
    ForExpNoFilter(oe1, x, s, ie1) -> ForExpNoFilter(oe2, x, s, ie2)
    where  {| RenameVar
            : y := <rename-bound(|s)> x
            ; oe2 := <rename-all> oe1
            |}
           ; ie2 := <rename-all> ie1

  rename :
    Arg(x, srt) -> Arg(x, srt)
    where y := <rename-bound(|srt)> x
