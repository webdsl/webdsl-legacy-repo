module org/webdsl/dsl/typechecker/rename

/**
 * Renaming
 * --
 * At the start of the rewriting process, all variables are renamed by annotating them, to make them unique.
 * Declaring is part of the renaming process
 */

imports
  libstrategolib

imports
  libwebdsl-front

signature constructors
	
	TopLevelName : Term -> Term

rules 

	rename-top = map-toplevel(rename, rename-toplevel)
	rename-toplevel = with-toplevel-name(rename-all)

rules

  rename-all = alltd(rename)

  rename-closed = 
    {| Rename:
       rename-all 
     |}

  rename = Rename

  /**
   * rename-bound does the actual renaming. The other rules guide the application of rename-bound
   */
  rename-bound(|srt) :
    x -> y
    with  y := x{<toplevel-rename> x}
        ; rename-bound-rules(|x,y,srt)

  rename-bound-rules(|x,y,srt) =
    rules ( 
      Rename : Var(x) -> Var(y)
      RenameType : GenericSort("EntityTypeNamed",[x]) -> GenericSort("EntityTypeNamed",[y])
      RenameType : SimpleSort(x) -> GenericSort("EntityTypeNamed",[y])
      Rename : Qualified(x, z) -> Qualified(y, z)
      TypeOf : y -> srt
    )
  //; try(rename-bound-hook(|x,y))
    
  rename-type = ?s; (RenameType <+ !s)
  
rules

  /**
   * Use this rule to get a stack trace upon failure in rename, in the rhs of a rewrite rule.
   * Since 'with' is like 'where', in the sense that it restores the old term, 
   * <with(rename-all)> in front of the rhs will prevent the actual renaming.
   * Usage: 
   *   desugar: a -> <with-rename-all> b
   */
  with-rename-all :
    a -> b
    with b := <rename-all> a  
  
rules  
  
  /**
   *  The difference with VarInTemplateContext rule and Rename is that 
   *  VarInTemplateContext is only defined when a whole definition is renamed.
   *  This makes it suitable for doing a bigbagof-VarInTemplateContext to determine closures.
   *  The Rename dynamic rule does not contain the complete closure at all times, 
   *  e.g. when rename-all is called on only a part of a definition.
   *  TODO rename this dynamic rule
   */
  declare-vars-in-entity-context =
    try(
      ?name
    ; rules( VarInTemplateContext :+= Var(name)) 
    )
    
  declare-vars-in-context =
    try(
      ?name
    ; where(context := <InDef>) //important, this makes sure that vars are only added when a complete definition is visible, otherwise the closure would be incomplete
    ; rules( VarInTemplateContext :+= Var(name)) 
    )

//  empty-args-in-context =
//    repeat(once-VarInTemplateContext)

  declare-args-in-context =
    map(\Arg(name,_) -> name with rules( VarInTemplateContext :+= Var(name) )\)

rules // backend annotations

	add-backend-annotation =
		  where(name := <OriginalNonUniqueName>)
		; add-new-anno(|OriginalNameAnno(name))

rules

	// prefix with given prefix, if prefix not already present
	prefix-rename(|prefix) =
		try(
				where(prefix' := <concat-strings> [prefix, "_"])
			; where(not(string-starts-with(|prefix')))
			; <concat-strings; newname> [prefix', <id>]
	)
	
rules // toplevel-rename: return name prefixed with toplevel definition

	toplevel-rename = prefix-rename(|<TopLevelDefineName>)
	