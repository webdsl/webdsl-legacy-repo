module org/webdsl/dsl/typechecker/rename

imports
  libstrategolib

imports
  libwebdsl-front

rules 

  rename-and-declare-decl = RenameVar

  //rename-and-declare-decl = declare-definition

  rename-and-declare-decl :
    VarDecl(x, srt) -> VarDecl(y, srt)
    where y := x{<newname> x}
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )

  rename-and-declare-decl :
    VarDeclInit(x, srt, e) -> VarDeclInit(y, srt, e')
    where y := x{<newname> x}
        ; e' := <alltd(RenameVar)> e
        ; rules ( RenameVar : Var(x) -> Var(y) 
                  TypeOf    : y -> srt )

  rename-and-declare-decl :
    Define(mods, f, args, elems1) -> Define(mods, f, args, elems2)
    where declare-template-definition
        ; {| RenameVar
           : <map(rename-and-declare-decl)> args
           ; elems2 := <alltd(rename-and-declare-decl)> elems1
           |}

  rename-and-declare-decl :
    Entity(x_class, s, props1, functions1) -> Entity(x_class, s, props2, functions2)
    where declare-entity
        ; {| RenameVar
           : y := "this"{<newname> "this"}
           ; rules( RenameVar : Var("this") -> Var(y)
                    TypeOf    : y -> SimpleSort(x_class) )
           ; props2 := <alltd(rename-and-declare-decl)> props1
           ; functions2 := <alltd(rename-and-declare-decl)> functions1
           |}

  rename-and-declare-decl :
    EntityNoSuper(x_class, props1, functions1) -> EntityNoSuper(x_class, props2, functions2)
    where declare-entity
        ; {| RenameVar
           : y := "this"{<newname> "this"}
           ; rules( RenameVar : Var("this") -> Var(y)
                    TypeOf    : y -> SimpleSort(x_class) )
           ; props2 := <alltd(rename-and-declare-decl)> props1
           ; functions2 := <alltd(rename-and-declare-decl)> functions1
           |}

  rename-and-declare-decl :
    SessionEntity(nm, props1, functions1) -> SessionEntity(nm, props2, functions2)
    where declare-entity
        ; {| RenameVar
           : y := "this"{<newname> "this"}
           ; rules( RenameVar : Var("this") -> Var(y)
                    TypeOf    : y -> SimpleSort(x_class) )
           ; props2 := <alltd(rename-and-declare-decl)> props1
           ; functions2 := <alltd(rename-and-declare-decl)> functions1
           |}

  rename-and-declare-decl :
    Property(x, k, srt, annos) -> Property(y, k, srt, annos)
    where y := x{<newname> x}
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )

  rename-and-declare-decl :
    DerivedProperty(x, k, srt, annos, e1) -> DerivedProperty(y, k, srt, annos, e2)
    where y := x{<newname> x}
        ; e2 := <alltd(rename-and-declare-decl)> e1
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )

  rename-and-declare-decl :
    PropertyNoAnno(x, k, srt) -> PropertyNoAnno(y, k, srt)
    where y := x{<newname> x}
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )

  rename-and-declare-decl :
    DerivedPropertyNoAnno(x, k, srt, e1) -> DerivedPropertyNoAnno(y, k, srt, e2)
    where y := x{<newname> x}
        ; e2 := <alltd(rename-and-declare-decl)> e1
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )

  rename-and-declare-decl :
    For(x, srt, e1, f1, elems1) -> For(y, srt, e2, f2, elems2)
    where {| RenameVar
           : y := x{<newname> x}
           ; rules ( RenameVar : Var(x) -> Var(y) 
                     TypeOf    : y -> srt )
           ; e2 := <alltd(RenameVar)> e1
           ; f2 := <alltd(RenameVar)> f1
           ; elems2 := <alltd(rename-and-declare-decl)> elems1
           |}

  rename-and-declare-decl :
    ForAll(x, srt, f1, elems1) -> ForAll(y, srt, f2, elems2)
    where {| RenameVar
           : y := x{<newname> x}
           ; rules ( RenameVar : Var(x) -> Var(y)
                     TypeOf    : y -> srt )
           ; f2 := <alltd(RenameVar)> f1
           ; elems2 := <alltd(rename-and-declare-decl)> elems1
           |}

  rename-and-declare-decl :
    ForStmt(x, srt, e1, f1, b1) -> ForStmt(y, srt, e2, f2, b2)
    where {| RenameVar
           : y := x{<newname> x}
           ; rules ( RenameVar : Var(x) -> Var(y)
                     TypeOf    : y -> srt )
           ; e2 := <alltd(RenameVar)> e1
           ; f2 := <alltd(RenameVar)> f1
           ; b2 := <alltd(rename-and-declare-decl)> b1
           |}

  rename-and-declare-decl :
    ForExp(oe1, x, s, ie1, f1) -> ForExp(oe2, x, s, ie2, f2)
    where  {| RenameVar
            : y := x{<newname> x}
            ; rules ( RenameVar : Var(x) -> Var(y)
                      TypeOf    : y -> srt )
            ; oe2 := <alltd(RenameVar)> oe1
            ; f2 := <alltd(RenameVar)> f1
            |}
           ; ie2 := <alltd(rename-and-declare-decl)> ie1

  rename-and-declare-decl :
    Arg(x, srt) -> Arg(x, srt)
    where y := x{<newname> x}
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )
