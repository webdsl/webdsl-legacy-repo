module org/webdsl/dsl/typechecker/rename

imports
  libstrategolib

imports
  libwebdsl-front

rules 

  // the rename-all invocation for expressions seems wrong, since it would
  // miss local variable declarations in expressions (e.g. bound variables in
  // list comprehensions)
  // 
  // a shorter name is probably a good idea, since this strategy may be called
  // all over the place, I'd say just 'rename'
  //
  // the pattern
  //
  //         y := x{<newname> x}
  //         ; rules ( RenameVar : Var(x) -> Var(y)
  //                   TypeOf    : y -> srt )
  //
  // should probably be factored out
  //
  // -- EelcoVisser

  rename = RenameVar

  rename-all = alltd(rename)

  //rename = declare-definition

  rename :
    VarDecl(x, srt) -> VarDecl(y, srt)
    where y := x{<newname> x}
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )

  rename :
    VarDeclInit(x, srt, e) -> VarDeclInit(y, srt, e')
    where y := x{<newname> x}
        ; e' := <rename-all> e
        ; rules ( RenameVar : Var(x) -> Var(y) 
                  TypeOf    : y -> srt )

  rename :
    Define(mods, f, args, elems1) -> Define(mods, f, args, elems2)
    where declare-template-definition
        ; {| RenameVar
           : <map(rename)> args
           ; elems2 := <rename-all> elems1
           |}

  rename :
    Entity(x_class, s, props1, functions1) -> Entity(x_class, s, props2, functions2)
    where declare-entity
        ; {| RenameVar
           : y := "this"{<newname> "this"}
           ; rules( RenameVar : Var("this") -> Var(y)
                    TypeOf    : y -> SimpleSort(x_class) )
           ; props2 := <map(rename)> props1
           ; functions2 := <rename-all> functions1
           |}

  rename :
    EntityNoSuper(x_class, props1, functions1) -> EntityNoSuper(x_class, props2, functions2)
    where declare-entity
        ; {| RenameVar
           : y := "this"{<newname> "this"}
           ; rules( RenameVar : Var("this") -> Var(y)
                    TypeOf    : y -> SimpleSort(x_class) )
           ; props2 := <map(rename)> props1
           ; functions2 := <rename-all> functions1
           |}

  rename :
    SessionEntity(nm, props1, functions1) -> SessionEntity(nm, props2, functions2)
    where declare-entity
        ; {| RenameVar
           : y := "this"{<newname> "this"}
           ; rules( RenameVar : Var("this") -> Var(y)
                    TypeOf    : y -> SimpleSort(x_class) )
           ; props2 := <rename-all> props1
           ; functions2 := <rename-all> functions1
           |}

  rename :
    Property(x, k, srt, annos) -> Property(y, k, srt, annos)
    where y := x{<newname> x}
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )

  rename :
    DerivedProperty(x, k, srt, annos, e1) -> DerivedProperty(y, k, srt, annos, e2)
    where y := x{<newname> x}
        ; e2 := <rename-all> e1
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )

  rename :
    PropertyNoAnno(x, k, srt) -> PropertyNoAnno(y, k, srt)
    where y := x{<newname> x}
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )

  rename :
    DerivedPropertyNoAnno(x, k, srt, e1) -> DerivedPropertyNoAnno(y, k, srt, e2)
    where y := x{<newname> x}
        ; e2 := <rename-all> e1
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )

  rename :
    For(x, srt, e1, f1, elems1) -> For(y, srt, e2, f2, elems2)
    where {| RenameVar
           : y := x{<newname> x}
           ; rules ( RenameVar : Var(x) -> Var(y) 
                     TypeOf    : y -> srt )
           ; e2 := <rename-all> e1
           ; f2 := <rename-all> f1
           ; elems2 := <rename-all> elems1
           |}

  rename :
    ForAll(x, srt, f1, elems1) -> ForAll(y, srt, f2, elems2)
    where {| RenameVar
           : y := x{<newname> x}
           ; rules ( RenameVar : Var(x) -> Var(y)
                     TypeOf    : y -> srt )
           ; f2 := <rename-all> f1
           ; elems2 := <rename-all> elems1
           |}

  rename :
    ForStmt(x, srt, e1, f1, b1) -> ForStmt(y, srt, e2, f2, b2)
    where {| RenameVar
           : y := x{<newname> x}
           ; rules ( RenameVar : Var(x) -> Var(y)
                     TypeOf    : y -> srt )
           ; e2 := <rename-all> e1
           ; f2 := <rename-all> f1
           ; b2 := <rename-all> b1
           |}

  rename :
    ForExp(oe1, x, s, ie1, f1) -> ForExp(oe2, x, s, ie2, f2)
    where  {| RenameVar
            : y := x{<newname> x}
            ; rules ( RenameVar : Var(x) -> Var(y)
                      TypeOf    : y -> srt )
            ; oe2 := <rename-all> oe1
            ; f2 := <rename-all> f1
            |}
           ; ie2 := <rename-all> ie1

  rename :
    Arg(x, srt) -> Arg(x, srt)
    where y := x{<newname> x}
        ; rules ( RenameVar : Var(x) -> Var(y)
                  TypeOf    : y -> srt )
