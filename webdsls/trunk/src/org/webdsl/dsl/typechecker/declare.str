module org/webdsl/dsl/typechecker/declare

imports
  libstrategolib

imports
  libwebdsl-front

strategies // register all declared entities

  inherit-object :
    EntityNoSuper(x_class, props, functions) -> Entity(x_class, "Object", props, functions)

  all-properties =
    ?x_class
    ; props := <bagof-Properties; concat> x_class
    ; if not("Object" := <Extends> x_class) then
        !<concat> [props, <Extends; all-properties> x_class]
      end

  all-functions =
    ?x_class
    ; functions := <bagof-Functions; concat> x_class
    ; if not("Object" := <Extends> x_class) then
        !<concat> [functions, <Extends; all-functions> x_class]
      end

  is-function =
    ?(x_class, fun)
    ; (IsFunction <+ <is-function> (<Extends> x_class, fun))

  declare-entity = 
    where ( try(inherit-object)
        ; ?Entity(x_class, x_super, props, funcs) )
    ; with (id
      ; rules(
          Entities :+= x_class

          IsEntity :+
            x_class -> x_class

          Properties :+
            x_class -> props

          Functions :+
            x_class -> funcs

          Extends :
            x_class -> x_super

          SubClasses :+
            l -> [(x_super, x_class)|l] where not(<elem> ((x_super, x_class), l))

          SubClass :+
            x_super -> x_class

          DefinedJavaType :
            SimpleSort(x_class) -> type|[ x_class ]|

          DefinedJavaTypeString :
            SimpleSort(x_class) -> <concat-strings> [<packagename-to-string> <DomainPackage>, ".", x_class]
        )
      ; <map(declare-property(|x_class))> [NameProperty() | props]
      ; <map(declare-function(|x_class))> funcs
      ; <filter(extract-entity-id(|x_class))> props
    )

  declare-entity = 
    ?SessionEntity(nm, props, functions)
    ; with (id
      ; x_class := <capitalize-string> nm
      ; rules(
          TypeOf : nm -> SimpleSort(x_class)
          IsSessionVariable : nm 
          SessionVariable :+= nm
        )
      ; <declare-entity> Entity(x_class, "Object", props, functions)
    )
    
  declare-extend-entity :
    ExtendSessionEntity(x_class, props, funcs) -> ExtendSessionEntity(x_class, props, funcs)
    with <declare-extend-entity> ExtendEntity(<capitalize-string> x_class, props, funcs)
    
  declare-extend-entity :
    ExtendEntity(x_class, props, funcs) -> ExtendEntity(x_class, props, funcs)
    with rules( Properties :+
                  x_class -> props

                Functions :+
                  x_class -> funcs
         )
       ; <map(declare-property(|x_class) <+ debug(!"declare extend entity property"))> props
       ; <map(declare-function(|x_class) <+ debug(!"declare extend entity function"))> funcs

  extract-entity-id(|x_Class) =
    ?Property(x, k, s, annos)
    ; with(
        if <fetch(?SimpleAnno("id"))> annos then
          rules (
            EntityIdType : x_Class -> s
            EntityIdName : x_Class -> x
          )
        end
      )

  extract-entity-id(|x_Class) =
    ?DerivedProperty(_, _, _, _, _)

  declare-property(|x_class) =
    ?Property(x, k, s, annos)
    ; rules( TypeOfProperty : (x_class, x) -> s 
             IsProperty : (x_class, x) )
    ; if <fetch(?SimpleAnno("inline"))> annos; SimpleSort(_) := s then
        rules ( InlineProperties :+ x_class -> x )
      end
    ; try(declare-list-property(|x_class))
    ; try(<create-prop-required-rule(|x_class,x)> annos)
    
  declare-property(|x_class) =
    ?PropertyNoAnno(x, k, s)
    ; <declare-property(|x_class)> Property(x, k, s, [])

  create-prop-required-rule(|class,propname) =
    ?annos
    ; not([] := <collect(?ValidationAnnoNotNull() + ?ValidationAnnoNotEmpty())> annos)
    ; rules(
        PropertyIsRequired : (class, propname) -> True()
      )

  declare-list-property(|x_class) =
    ?Property(x, k, GenericSort(coll, [s@SimpleSort(_)]), annos)
    ; where(
             y := <concat-strings>[x, "List"]
           ; t := GenericSort("List", [s])
           )
        ; rules(
            TypeOfProperty : (x_class, y) -> t
          )
    
  declare-property(|x_class) =
    ?DerivedProperty(x, k, s, annos, e)
    ; rules(
        TypeOfProperty : (x_class, x) -> s
        IsProperty : (x_class, x)
        IsDerivedProperty : (x_class, x)
      )
    ; where(try(declare-list-property(|x_class)))

  declare-property(|x_class) =
    ?DerivedPropertyNoAnno(x, k, s, e)
    ; <declare-property(|x_class)> DerivedProperty(x, k, s, [], e)


  declare-property(|x_class) =
    ?DerivedPropertyNoAnno(x, k, srt, e)
    ; <declare-property(|x_class)> DerivedProperty(x, k, srt, [], e)

  declare-property(|x_class) =
    ?PropertyNoAnno(x, k, srt)
    ; <declare-property(|x_class)> Property(x, k, srt, [])

  declare-list-property(|x_class) =
    ?DerivedProperty(x, k, GenericSort(coll, [s@SimpleSort(_)]), annos, e)
    ; where(
        y := <concat-strings>[x, "List"]
      ; t := GenericSort("List", [s])
      )
    ; rules(
        TypeOfProperty : (x_class, y) -> t
      )

  declare-function(|x_class) =
    ?ExtendFunction(_)

  declare-function(|x_class) =
    ?FunctionNoReturn(f, args, body)
    ; where(<declare-function(|x_class)> Function(f, args, SimpleSort("Void"), body))

  declare-function(|x_class) =
    ?Function(f, args, sort, body1)
    ; where(id
      ; t1* := <map(?Arg(_,<id>))> args
      ; rules( CheckFunctionSignature :+
                    (SimpleSort(x_class), f, t2*) -> sort
                        where <zip(type-compatible)> (t1*, t2*)
             )
      ; rules( CheckFunctionSignature :+ // For after desugar
                    (None(), f, t3*) -> sort
                        where [SimpleSort(x_class)|t2*] := t3*
                            ; <zip(type-compatible)> (t1*, t2*)
             )
      ; rules( CheckFunctionSignature :+
                    (None(), f, t2*) -> sort
                        where <zip(type-compatible)> (t1*, t2*)
               IsFunction : (x_class, f)
             )
      )

overlays

  NameProperty =
    Property("name", Simple(), SimpleSort("String"), [])

strategies // register definitions

  declare-page-definition =
    ?def@Define([Page()], name, args, body)
    ; where (
      t1* := <map(?Arg(_,<id>))> args
      ; rules (
          TemplateDefinition : name -> def
          TemplateArguments  : name -> args
          IsPage :+ name -> name
          PageNames :+= name
          CheckPageSignature : (None(), name, t1*) -> SimpleSort("Page")
          TemplateSignature : (name, t1*) -> def
        )
    )

  declare-template-definition =
    ?def@Define(mods, name, fargs, body)
    ; with ( 
        t1* := <map(?Arg(_,<id>))> fargs
      ; n := <strip-annos> name
      ; rules (
          TemplateSignature  : (n, t1*) -> def
          TemplateDefinition : name -> def
          TemplateArguments  : name -> args
          
        )
    )

  declare-toplevel-template-definition =
    ?Define(mods, name, fargs, body)
    ; where (
      t* := <map(?Arg(_,<id>))> fargs
      ; n := <strip-annos> name
      ; if not(<elem> ((n, t*), <bagof-TopLevelTemplateDefinitions> n)) then
          y := <newname> n
          ; rules (
            TopLevelTemplateNames :+= n
            TopLevelTemplateDefinitions :+ n -> (n, t*)
            OverloadedTemplateSignature : (n, t*) -> y
          )
        end
    )
    ; declare-template-definition

  declare-local-template-definition =
    ?def@Define(mods, name, fargs, body)
    ; where ( 
        page := <InPage>
    ; t1* := <map(?Arg(_,<id>))> fargs
    ; n := <strip-annos> name
    ; rules ( LocalTemplateNames :+ page -> name )
    ; rules ( LocalTemplateSignature : (n, t1*) -> def )
    ; rules ( EnclosingDefinition : name -> page )
      )

  declare-template-arg :
    Arg(x, s) -> Arg(x, s)
    where template := <InTemplate>
//        ; <debug> [".........", Arg(x,s), template]
        ; rules ( TemplateArguments :+ template -> Arg(x, s) )

strategies

  declare-action =
    ?def@Action(name, fargs, body)
    ; where( t1* := <map(?Arg(_,<id>))> fargs )
    ; rules(
        ActionDefinition  : name -> def
        ActionArguments  : name -> fargs

        CheckActionSignature :
          (None(), name, t2*) -> SimpleSort("void")
          where <zip(type-compatible)> (t1*, t2*)
      )

strategies

  /*
  declare-globals =
    ?gd@GlobalsDefinition(decls)
    ; <map(declare-global-vars <+ declare-global-funcs)> decls
    ; !gd

  declare-global-vars =
    ?VarDeclInit(ident,sort,_)
    ; rules (
        TypeOf : ident -> sort
        IsGlobal : ident )

*/
  declare-global-func = where (
    ?fu@Function(f, args, s, b)
    ; t1* := <map(?Arg(_,<id>))> args
    ; f2 := f
    ; rules ( CheckGlobalFunctionSignature :+ (None(), f2, t2*) -> s
                       where <zip(type-compatible)> (t1*, t2*)
              IsGlobalFunction : (f, args, s)
              IsGlobalFunction : f
              GlobalFunctionArgs : f -> args
              GlobalFunctionBlock : f -> b
            )
    )

  declare-global-func =
    ?FunctionNoReturn(f, args, b)
    ; where(<declare-global-func> Function(f, args, SimpleSort("Void"), b))

rules // typechecking

  constraint-error : 
    GoTo(ThisCall(p, args)) -> <add-error(|["page ", <pp-webdsl> p, " does not exist."])>
    where not(<IsPage> p)
