module org/webdsl/dsl/typechecker/collection

imports
  libstrategolib

imports
  libwebdsl-front

rules

   eq-type-of :
     SetCreation(e*) -> GenericSort("Set", [t])
     where t := <Hd; type-of> e*
         
   /*
   typecheck-set-creation :
     SetCreation(e1*) -> SetCreation(e2*){Type(GenericSort("Set", [t]))}
     where dbg(|"typecheck-set-creation a: ")
         ; e2* := <map(typecheck-expression)> e1*
         ; dbg(|"typecheck-set-creation b: ")
         ; [_{Type(t)},e3*] := e2*
         ; dbg(|"typecheck-set-creation c: ")
         ; if not(<map(?_{Type(<id>)}; <eq>(<id>, t))> e3*) then
             typecheck-error(|["arguments of set creation should have same type"])
           end
         ; dbg(|"typecheck-set-creation d: ")
         */

   eq-type-of :
     TypedSetCreation(s, e*) -> GenericSort("Set", [s])
     where <map(<type-compatible>(s, <type-of>))> e*
 
   /*
   typecheck-typed-set-creation :
     TypedSetCreation(s, e1*) -> TypedSetCreation(s, e2*) {Type(GenericSort("Set", [s]))}
     where e2* := <map(typecheck-expression)> e1*
         ; if not(<map(?_{Type(<id>)}; <type-compatible>(s, <id>))> e2*) then
             typecheck-error(|["arguments of set creation should have same type."])
           end
           */
           
   eq-type-of :
     TypedListCreation(s, e*) -> GenericSort("List", [s])
     where <map(<type-compatible>(s, <type-of>))> e*
         
   /*
   typecheck-typed-list-creation :
     TypedListCreation(s, e1*) -> TypedListCreation(s, e2*) {Type(GenericSort("List", [s]))}
     where e2* := <map(typecheck-expression)> e1*
         ; if not(<map(?_{Type(<id>)}; <type-compatible>(<id>, s))> e2*) then
             typecheck-error(|["arguments of list creation should have same type"])
           end
           */
           
   eq-type-of :
     ListCreation(e*) -> GenericSort("List", [t])
     where t := <Hd; type-of> e*

   /*
   typecheck-list-creation :
     ListCreation(e1*) -> ListCreation(e2*){Type(GenericSort("List", [t]))}
     where dbg(|["typecheck-set-creation a: ", <id>])
         ; e2* := <map(typecheck-expression)> e1*
         ; dbg(|"typecheck-set-creation b: ")
         ; [_{Type(t)},e3*] := e2*
         ; dbg(|"typecheck-set-creation c: ")
         ; if not(<map(?_{Type(<id>)}; <eq>(<id>, t))> e3*) then
             typecheck-error(|["arguments of set creation should have same type"])
           end
         ; dbg(|"typecheck-set-creation d: ")
         */

rules // fields, operations

   eq-type-of :
     FieldAccess(e1, "length") -> SimpleSort("Int")
     where GenericSort(t,_) := <type-of> e1
         ; ("List" := t <+ "Set" := t)
     
   check-builtin-signature :
     (GenericSort("List", [s]), "add", [s]) -> SimpleSort("void")

   check-builtin-signature :
     (GenericSort("List", [s]), "remove", [s]) -> SimpleSort("void")

   check-builtin-signature :
     (GenericSort("List", [s]), name, [s]) -> SimpleSort("void")
     where <is-substring("remove")> name

   check-builtin-signature :
     (GenericSort("Set", [s]), "add", [s]) -> SimpleSort("void")

   check-builtin-signature :
     (GenericSort("Set", [s]), "remove", [s]) -> SimpleSort("void")

   check-builtin-signature :
     (_, name, [s]) -> SimpleSort("void")
     where <is-substring("remove")> name

   check-builtin-signature :
     (_, name, [s]) -> SimpleSort("void")
     where <is-substring("add")> name
         
