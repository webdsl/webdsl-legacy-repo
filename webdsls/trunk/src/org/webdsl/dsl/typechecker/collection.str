module org/webdsl/dsl/typechecker/collection

imports
  libstrategolib

imports
  libwebdsl-front

signature
  constructors
    Op : String -> Annotation
 
rules

   type-annotate :
     SetCreation(e*) -> SetCreation(e*){Type(GenericSort("Set", [t]))}
     where not(type-of)
         ; t := <Hd; type-of>e*
         
   typecheck-set-creation :
     SetCreation(e1*) -> SetCreation(e2*){Type(GenericSort("Set", [t]))}
     where dbg(|"typecheck-set-creation a: ")
         ; e2* := <map(typecheck-expression)> e1*
         ; dbg(|"typecheck-set-creation b: ")
         ; [_{Type(t)},e3*] := e2*
         ; dbg(|"typecheck-set-creation c: ")
         ; if not(<map(?_{Type(<id>)}; <eq>(<id>, t))> e3*) then
             typecheck-error(|["arguments of set creation should have same type"])
           end
         ; dbg(|"typecheck-set-creation d: ")

   type-annotate :
     TypedSetCreation(s, e*) -> TypedSetCreation(s, e*){Type(GenericSort("Set", [s]))}
     where not(type-of)
         ; <map(<type-compatible>(s, <type-of>))> e*
 
   typecheck-typed-set-creation :
     TypedSetCreation(s, e1*) -> TypedSetCreation(s, e2*) {Type(GenericSort("Set", [s]))}
     where e2* := <map(typecheck-expression)> e1*
         ; if not(<map(?_{Type(<id>)}; <type-compatible>(s, <id>))> e2*) then
             typecheck-error(|["arguments of set creation should have same type."])
           end
           
   type-annotate :
     TypedListCreation(s, e*) -> TypedListCreation(s, e*){Type(GenericSort("List", [s]))}
     where not(type-of)
         ; <map(<type-compatible>(s, <type-of>))> e*
         
   typecheck-typed-list-creation :
     TypedListCreation(s, e1*) -> TypedListCreation(s, e2*) {Type(GenericSort("List", [s]))}
     where e2* := <map(typecheck-expression)> e1*
         ; if not(<map(?_{Type(<id>)}; <type-compatible>(<id>, s))> e2*) then
             typecheck-error(|["arguments of list creation should have same type"])
           end
           
   type-annotate :
     ListCreation(e*) -> ListCreation(e*){Type(GenericSort("List", [t]))}
     where not(type-of)
         ; t := <Hd; type-of>e*

   typecheck-list-creation :
     ListCreation(e1*) -> ListCreation(e2*){Type(GenericSort("List", [t]))}
     where dbg(|["typecheck-set-creation a: ", <id>])
         ; e2* := <map(typecheck-expression)> e1*
         ; dbg(|"typecheck-set-creation b: ")
         ; [_{Type(t)},e3*] := e2*
         ; dbg(|"typecheck-set-creation c: ")
         ; if not(<map(?_{Type(<id>)}; <eq>(<id>, t))> e3*) then
             typecheck-error(|["arguments of set creation should have same type"])
           end
         ; dbg(|"typecheck-set-creation d: ")

rules // fields, operations

   typecheck-length-field :
     FieldAccess(e1, "length") -> FieldAccess(e2, "length"){Type(SimpleSort("Int"))}
     where e2{Type(GenericSort(_,_))} := <typecheck-expression> e1
     
   type-annotate :
     FieldAccess(e, "length") -> FieldAccess(e, "length"){Type(SimpleSort("Int"))}
     where not(type-of)
         ; GenericSort(t,_) := <type-of>e
         ; ("List" := t <+ "Set" := t)
     
   check-builtin-signature :
     (GenericSort("List", [s]), "add", [s]) -> SimpleSort("void")

   check-builtin-signature :
     (GenericSort("List", [s]), "remove", [s]) -> SimpleSort("void")

   check-builtin-signature :
     (GenericSort("List", [s]), name, [s]) -> SimpleSort("void")
     where <is-substring("remove")> name

   check-builtin-signature :
     (GenericSort("Set", [s]), "add", [s]) -> SimpleSort("void")

   check-builtin-signature :
     (GenericSort("Set", [s]), "remove", [s]) -> SimpleSort("void")

   check-builtin-signature :
     (_, name, [s]) -> SimpleSort("void")
     where <is-substring("remove")> name

   check-builtin-signature :
     (_, name, [s]) -> SimpleSort("void")
     where <is-substring("add")> name
         