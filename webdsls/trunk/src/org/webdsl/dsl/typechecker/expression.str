module org/webdsl/dsl/typechecker/expression

imports
  libstrategolib

imports
  libwebdsl-front

rules // typechecking expressions

   typecheck-order-expression :
     OrderAscending(e1) -> OrderAscending(e2)
     where e2 := <typecheck-expression> e1

   typecheck-order-expression :
     OrderDescending(e1) -> OrderDescending(e2)
     where e2 := <typecheck-expression> e1

   typecheck-order-expression :
     OrderNonSpecific(e1) -> OrderNonSpecific(e2)
     where e2 := <typecheck-expression> e1

   typecheck-expression = dbg(|"tc expression: "); (
     typecheck-variable
     <+ typecheck-literal
     <+ typecheck-length-field
     <+ typecheck-fieldaccess
     <+ typecheck-cast
     <+ typecheck-in-coll
     <+ typecheck-object-creation
     <+ typecheck-set-creation
     <+ typecheck-list-creation
     <+ typecheck-typed-set-creation
     <+ typecheck-typed-list-creation
     <+ typecheck-call
     <+ typecheck-for-expr
     <+ typecheck-query
     <+ typecheck-operator
     <+ typecheck-expression-error
   )

   typecheck-variable :
     Var(x) -> Var(x){Type(t)}
     where if not(t := <TypeOf> x) then
             typecheck-error(|["variable ", x, " has no declared type"])
             ; t := "Error"
           end

   typecheck-in-coll :
     InColl(e1, e2) -> InColl(e3, e4) {Type(SimpleSort("Bool"))}
     where e3 := <typecheck-expression> e1
         ; e4 := <typecheck-expression> e2
         ; <?_{Type(t)}> e3
         ; <?_{Type(GenericSort(_, [lt]))}> e4
         ; if not(<type-compatible> (lt, t)) then // Or other way around?
             typecheck-error(|["Expression ", e3, " should be of type ", lt])
           end

   typecheck-cast :
     Cast(e1, s) -> Cast(e2, s) { Type(s) }
     where e2 := <typecheck-expression> e1
         ; <?_{Type(e2t)}> e2
         ; if not(<type-compatible> (e2t, s)) ;  not(<type-compatible> (s, e2t)) then
              typecheck-error(|["You cannot cast something of type ", e2t, " to ", s])
           end

   typecheck-set-creation :
     SetCreation(e1*) -> SetCreation(e2*){Type(GenericSort("Set", [t]))}
     where dbg(|"typecheck-set-creation a: ")
         ; e2* := <map(typecheck-expression)> e1*
         ; dbg(|"typecheck-set-creation b: ")
         ; [_{Type(t)},e3*] := e2*
         ; dbg(|"typecheck-set-creation c: ")
         ; if not(<map(?_{Type(<id>)}; <eq>(<id>, t))> e3*) then
             typecheck-error(|["arguments of set creation should have same type"])
           end
         ; dbg(|"typecheck-set-creation d: ")

   typecheck-typed-set-creation :
     TypedSetCreation(s, e1*) -> TypedSetCreation(s, e2*) {Type(GenericSort("Set", [s]))}
     where e2* := <map(typecheck-expression)> e1*
         ; if not(<map(?_{Type(<id>)}; <type-compatible>(s, <id>))> e2*) then
             typecheck-error(|["arguments of set creation should have same type."])
           end

   typecheck-typed-list-creation :
     TypedListCreation(s, e1*) -> TypedListCreation(s, e2*) {Type(GenericSort("List", [s]))}
     where e2* := <map(typecheck-expression)> e1*
         ; if not(<map(?_{Type(<id>)}; <type-compatible>(<id>, s))> e2*) then
             typecheck-error(|["arguments of list creation should have same type"])
           end

   typecheck-list-creation :
     ListCreation(e1*) -> ListCreation(e2*){Type(GenericSort("List", [t]))}
     where dbg(|["typecheck-set-creation a: ", <id>])
         ; e2* := <map(typecheck-expression)> e1*
         ; dbg(|"typecheck-set-creation b: ")
         ; [_{Type(t)},e3*] := e2*
         ; dbg(|"typecheck-set-creation c: ")
         ; if not(<map(?_{Type(<id>)}; <eq>(<id>, t))> e3*) then
             typecheck-error(|["arguments of set creation should have same type"])
           end
         ; dbg(|"typecheck-set-creation d: ")

   typecheck-object-creation :
     ObjectCreation(x_Class, assign1*) -> ObjectCreation(x_Class, assign2*){Type(SimpleSort(x_Class))}
     where dbg(|"typecheck-object creation a: ")
         ; in-tc-context(
             if not(<IsEntity> x_Class) then
               typecheck-error(|["object creation for undeclared entity ", x_Class])
             end
             ; dbg(|"typecheck-object creation b: ")
             ; assign2* := <map(typecheck-field-initialization(|x_Class))> assign1*
             ; dbg(|"typecheck-object creation c: ")
           |["create ", x_Class, "/"])

   typecheck-field-initialization(|x_Class) :
     Assignment(y, e1) -> Assignment(y, e2)
     where dbg(|"typecheck-assign a: ");
           e2{Type(t2)} := <typecheck-expression> e1
           // @todo
         ; dbg(|"typecheck-assign b: ")
         ; if not(t1 := <TypeOfProperty> (x_Class, y)) then
             typecheck-error(|["entity ", x_Class, " has no field ", y])
             ; t1 := SimpleSort("void")
           end
         ; dbg(|"typecheck-assign c: ")
         ; if not(<type-compatible>(t1,t2)) then
             typecheck-error(|["assignment to field ", y, " of ", x_Class, " with type ", t2, " should be ", t1])
           end
         ; dbg(|"typecheck-assign d: ")

   typecheck-fieldaccess :
     FieldAccess(e1, f) -> FieldAccess(e2, f){Type(t1)}
     where e2{Type(t2@SimpleSort(s))} := <typecheck-expression> e1
         ; if not(t1 := <TypeOfProperty> (s, f)) then
             typecheck-error(|["entity '", s, "' has no property '", f, "'"])
         ; t1 := "Error"
      end

   typecheck-length-field :
     FieldAccess(e1, "length") -> FieldAccess(e2, "length"){Type(SimpleSort("Int"))}
     where e2{Type(GenericSort(_,_))} := <typecheck-expression> e1

   typecheck-for-expr :
     ForExp(oe1, x, s, ie1, Filter(we1, obe1)) -> ForExp(oe2, x, s, ie2, Filter(we2, obe2)) {Type(t)}
     where ie2 := <typecheck-expression> ie1
         ; {| TypeOf
            : rules(TypeOf : x -> s)
              ; oe2 := <typecheck-expression> oe1
              ; we2 := <typecheck-expression> we1
              ; obe2 := <typecheck-order-expression> obe1
            |}
         ; if <?_{Type(GenericSort("List", _))}> ie2 then
             t := GenericSort("List", [<?_{Type(<id>)}> oe2])
           else
             t := GenericSort("Set", [<?_{Type(<id>)}> oe2])
           end
//         ; if not(<type-compatible>(<?_{Type(<id>)}> oe2, s)) then
//             typecheck-error(|["expression ", oe2, " is not of type ", s])
//           end
         ; if not(<?_{Type(SimpleSort("Bool"))}> we2) then
             typecheck-error(|["expression ", we2, " is not a Bool."])
           end
// TODO: A check needs to be done checking s with the type of items in ie2
//         ; if not(<type-compatible>(<?_{Type(<id>)}> oe2, s)) then
//             typecheck-error(|["expression ", oe2, " is not of type ", s])
//           end

   typecheck-call :
     Call(e1, f, e2*) -> Call(e3, f, e4*){Type(t)}
     where e3{Type(t3)} := <typecheck-expression> e1
         ; e4* := <map(typecheck-expression)> e2*
         ; t := <check-signature> (t3, f, e4*)

   typecheck-call :
     ThisCall(f, e1*) -> ThisCall(f, e2*){Type(t)}
     where e2* := <map(typecheck-expression)> e1*
         ; t := <check-signature> (None(), f, e2*)
         
   typecheck-binop :
     (op, [e1, e2]) -> (t, [e1', e2'])
     where e1' := <typecheck-expression> e1
         ; e2' := <typecheck-expression> e2
         ; t := <check-signature> (None(), op, [e1', e2'])
         
   check-operator-signature : (None(), "+", [t, t]) -> t
   check-operator-signature : (None(), "-", [SimpleSort("Int"), SimpleSort("Int")]) -> SimpleSort("Int")
   check-operator-signature : (None(), "-", [SimpleSort("Float"), SimpleSort("Float")]) -> SimpleSort("Float")
   check-operator-signature : (None(), "*", [SimpleSort("Int"), SimpleSort("Int")]) -> SimpleSort("Int")
   check-operator-signature : (None(), "*", [SimpleSort("Float"), SimpleSort("Float")]) -> SimpleSort("Float")
   check-operator-signature : (None(), "/", [SimpleSort("Int"), SimpleSort("Int")]) -> SimpleSort("Int")
   check-operator-signature : (None(), "/", [SimpleSort("Float"), SimpleSort("Float")]) -> SimpleSort("Float")
   check-operator-signature : (None(), "%", [SimpleSort("Int"), SimpleSort("Int")]) -> SimpleSort("Int")
   check-operator-signature : (None(), "=", [t, t2]) -> SimpleSort("Bool") where <type-compatible> (t, t2)
   check-operator-signature : (None(), "!=", [t, t2]) -> SimpleSort("Bool") where <type-compatible> (t, t2)
   check-operator-signature : (None(), "<", [t, t]) -> SimpleSort("Bool")
   check-operator-signature : (None(), "<=", [t, t]) -> SimpleSort("Bool")
   check-operator-signature : (None(), ">", [t, t]) -> SimpleSort("Bool")
   check-operator-signature : (None(), ">=", [t, t]) -> SimpleSort("Bool")
   check-operator-signature : (None(), "&&", [SimpleSort("Bool"), SimpleSort("Bool")]) -> SimpleSort("Bool")
   check-operator-signature : (None(), "||", [SimpleSort("Bool"), SimpleSort("Bool")]) -> SimpleSort("Bool")
   check-operator-signature : (None(), "is a", [t, t2]) -> SimpleSort("Bool")
   
 // Exp operators, can this be done in a shorter way?
 // TODO: Make sure these are numeric types (in case of mul, div and sub)
   typecheck-operator :
     Add(e1, e2) -> Add(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("+", [e1, e2])

   typecheck-operator :
     Sub(e1, e2) -> Sub(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("-", [e1, e2])

   typecheck-operator :
     Mul(e1, e2) -> Mul(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("*", [e1, e2])

   typecheck-operator :
     Div(e1, e2) -> Div(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("/", [e1, e2])

   typecheck-operator :
     Mod(e1, e2) -> Mod(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("%", [e1, e2])

   typecheck-operator :
     Eq(e1, e2) -> Eq(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("=", [e1, e2])

   typecheck-operator :
     NotEq(e1, e2) -> NotEq(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("!=", [e1, e2])

   typecheck-operator :
     LargerThan(e1, e2) -> LargerThan(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> (">", [e1, e2])

   typecheck-operator :
     LargerThanOrEqual(e1, e2) -> LargerThanOrEqual(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> (">=", [e1, e2])

   typecheck-operator :
     SmallerThan(e1, e2) -> SmallerThan(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("<", [e1, e2])

   typecheck-operator :
     SmallerThanOrEqual(e1, e2) -> SmallerThanOrEqual(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("<=", [e1, e2])

   typecheck-operator :
     And(e1, e2) -> And(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("&&", [e1, e2])

   typecheck-operator :
     Or(e1, e2) -> Or(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("||", [e1, e2])

   typecheck-operator :
     IsA(e1, e2) -> IsA(e1', e2') { Type(t) }
     where (t, [e1', e2']) := <typecheck-binop> ("is a", [e1, e2])

    typecheck-operator :
     Not(x) -> Not(x2) { Type(SimpleSort("Bool")) }
     where x2 := <typecheck-expression> x
         ; xt := <?_{Type(<id>)}> x2
         ; if not(<eq>(xt, SimpleSort("Bool"))) then
             typecheck-error(|[x, " should be an expression of type Bool, but is of type ", xt])
           end

    typecheck-query :
     HqlQuery(q) -> HqlQuery(q){Type(t)}
     where t := <type-of-query> q
         ; dbg(|"type of query: ")

   typecheck-expression-error =
     ?e
     ; typecheck-error(|["expression ", e, " has type error"])

rules // signature

  check-signature :
    (t3, f, e*) -> t
    where t* := <map(?_{Type(<id>)})> e*
        ; t := <check-signature-aux> (t3, f, t*)

  check-signature-aux =
    ?sig
    ; (CheckActionSignature
       <+ check-operator-signature
       <+ CheckFunctionSignature
       <+ CheckGlobalFunctionSignature
       <+ CheckEmailActionSignature
       <+ CheckEmailDefinitionSignature
       <+ check-builtin-signature
       <+ typecheck-error(|["type error in call ", sig]))

  check-builtin-signature :
    (GenericSort("List", [s]), "add", [s]) -> SimpleSort("void")

  check-builtin-signature :
    (GenericSort("List", [s]), "remove", [s]) -> SimpleSort("void")

  check-builtin-signature :
    (GenericSort("List", [s]), name, [s]) -> SimpleSort("void")
    where <is-substring("remove")> name

  check-builtin-signature :
    (GenericSort("Set", [s]), "add", [s]) -> SimpleSort("void")

  check-builtin-signature :
    (GenericSort("Set", [s]), "remove", [s]) -> SimpleSort("void")

  check-builtin-signature :
    (_, name, [s]) -> SimpleSort("void")
    where <is-substring("remove")> name

  check-builtin-signature :
    (_, name, [s]) -> SimpleSort("void")
    where <is-substring("add")> name

  check-builtin-signature :
    (s@SimpleSort(_), "delete", []) -> SimpleSort("void")
    where <defined-java-type> s

  check-builtin-signature :
    (s@SimpleSort(_), "save", []) -> SimpleSort("void")
    where <defined-java-type> s

  check-builtin-signature :
    (s@SimpleSort(_), "persist", []) -> SimpleSort("void")
    where <defined-java-type> s

  check-builtin-signature :
    (GenericSort(Z, [s@SimpleSort(_)]), "persist", []) -> SimpleSort("void")
    where <defined-java-type> s
        ; <?"List" <+ ?"Set"> Z
