module org/webdsl/dsl/to-py-gae/main

imports
  libstrategolib
  libwebdsl-front

imports 
  org/webdsl/dsl/to-py-gae/-
  org/webdsl/dsl/to-py-gae/types/-
  
strategies

  core-to-python = 
    info(|"Generating Python code")
    ; py-generate-code
    ; py-generate-default-template-bindings
    ; <map({
        ?type
        ; get-python-stats
        ; py-merge-classes
        ; !Application(<concat> [<py-header> type, <id>])
        //; optimize-python
        ; topdown(try(py-remove-pass))
        ; output-python-to-file(|<concat-strings> [type, ".py"])
        })> ["data", "template", "function", "global_variable", "template_bindings"]
    ; !<get-css-artifacts>

  py-header =
    ?type
    ; !python*|[
      from google.appengine.ext import db;
      import logging;
      import md5;
      import datetime;
      import webdsl;
      import webdsl.querylist;
      import webdsl.db;
      import webdsl.polymodel;
      import webdsl.markdown;
      import data;
      import function;
    ]|
    ; if "template" := type then
        <concat> [<id>, python*|[
          import cgi;
          import urllib;
          from webdsl.utils import new_line;
          import global_variable;
        ]| ]
      end

  py-remove-pass :
    [a|[b|k]] -> k2
    where k2 := <remove-all(?python|[ pass; ]|)> [a|[b|k]]
        ; not([a|[b|k]] := k2)

strategies // Generate template bindings

  py-generate-default-template-bindings =
    with(id
    ; stm* := <collect({name, e, x : 
                         \ Define([Template()], name, _, _) -> python|[ tb[e] = template.x; ]|
                             with e := <concat-strings> ["'", name, "'"]
                                ; x := <capitalize-string> name \
                       })>
    ; e* := <map(\ x -> <concat-strings> ["'", x, "'"] \)> <bagof-SessionVariable; make-set>
    ; <emit-python(|"template_bindings")> python*|[
        class ParentTemplate(object): {
            def __init__(self): {
                self.scope = webdsl.utils.Scope(None, [e*]);
            };

            @property
            def template_bindings(self): {
                import template;
                
                tb = dict();
                stm*
                return tb;
            };
        };
      ]|
    )


strategies
   py-generate-code =
     if ?Define(mods, name, args, elems); is-page-or-template then
       {| Parameter, ThisPage
        : rules ( ThisPage := name )
        ; not(PyGenerateCode)
        ; all(py-generate-code)
        |}
     else
       if ?Action(_, _, _) then
         {| InAction
          : rules ( InAction := True() )
          ; not(PyGenerateCode)
	        ; all(py-generate-code)
	        |}
       else
         if ?Entity(nm, _, _, _) <+ ?EntityNoSuper(nm, _, _) then
           {| ThisEntity
            : rules ( ThisEntity := nm )
            ; not(PyGenerateCode)
            ; all(py-generate-code)
            |}
         else
           not(PyGenerateCode)
           ; all(py-generate-code)
         end
       end
     end

strategies // styling

  PyGenerateCode = generate-layout-css; fail
  PyGenerateCode = stylesection-to-css; fail
