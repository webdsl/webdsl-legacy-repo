module org/webdsl/dsl/to-py-gae/merge

imports
  libstratego-lib
  libjava-front
  libstratego-sglr
  libstratego-tool-doc

rules

  py-merge-add-unique :
    ([], items) -> items

  py-merge-add-unique :
    ([i|k], items) -> new-items
    where if [] := <filter(?i)> items then // Not in list yet
            new-items := <py-merge-add-unique> (k, [i|items])
          else
            new-items := <py-merge-add-unique> (k, items)
          end
  
  py-merge-add-unique :
    (somedec, items) -> new-items
    where if [] := <filter(?somedec)> items then // Not in list yet
            new-items := <py-merge-add-unique> ([], [somedec|items])
          else
            new-items := <py-merge-add-unique> ([], items)
          end
  
  /*
  py-merge-add-unique-method :
    ([], items) -> items

  py-merge-add-unique-method :
    ([i|k], items) -> new-items
    where if [] := <filter(merge-is-same-method(|i))> items then // Not in list yet
            new-items := <merge-add-unique> (k, [i|items])
          else
            new-items := <merge-add-unique> (k, items)
          end

  py-merge-is-same-method(|md) = // compare name, return type and params, but not the rest
    ?MethodDec(MethodDecHead(_, _, rt, name, params, _), _)
    ; where( <?MethodDec(MethodDecHead(_, _, rt, name, params, _), _)> md )

  py-merge-is-same-method(|md) = // compare name, return type and params, but not the rest
    ?AbstractMethodDec(_, _, rt, name, params, _)
    ; where( <?AbstractMethodDec(_, _, rt, name, params, _)> md )

  py-merge-remove-unnecessary-annos :
    MethodDecHead(annos1, b, c, d, e, f) -> MethodDecHead(annos2, b, c, d, e, f)
    where annos2 := <remove-all(?MarkerAnno(TypeName(Id("Partial"))))> annos1
    */

  py-merge-remove-unnecessary-annos :
    Statement(ClassDef(decs, nm, sups, stm*))-> Statement(ClassDef(decs2, nm, sups, stm*))
    where decs2 := <remove-all(Decorator(?py-exp|[ partial ]|))> decs

  py-merge-add-body-decs :
    ([], k) -> k

  /*
  py-merge-add-body-decs :
    ([fd@FieldDec(_, _, _)|k],
     k2) ->
    <merge-add-unique> ([fd], <merge-add-body-decs> (k, k2))

  py-merge-add-body-decs :
    ([AbstractMethodDec(a, b, c, d, e, f)|k], k2) ->
    <merge-add-unique-method> ([AbstractMethodDec(a, b, c, d, e, f)], <merge-add-body-decs> (k, k2))

  py-merge-add-body-decs : // non-partial method
    ([MethodDec(h, b)|k], k2) ->
    <merge-add-unique> ([MethodDec(h, b)], <merge-add-body-decs> (k, k2))
    where [] := <collect(?MarkerAnno(TypeName(Id("Partial"))))> h

  py-merge-add-body-decs : // partial method
    ([MethodDec(h@MethodDecHead(annos1, b, c, d, e, f), Block(stmts1))|k], k2) ->
    <merge-add-unique-method> ([MethodDec(MethodDecHead(annos2, b, c, d, e, f), Block(stmts2))], <merge-add-body-decs> (k, k3))
    where not([] := <collect(?MarkerAnno(TypeName(Id("Partial"))))> h)
        ; old-body := <collect(merge-retrieve-method-stmts(|h)); concat> k2
//        ; annos2 := <remove-partial-anno> annos1
        ; annos2 := annos1
        ; k3 := <remove-all(merge-is-same-method(|MethodDec(h, [])))> k2 //<merge-remove-method(|h)> k2
        ; stmts2 := <concat> [stmts1, old-body]

  py-merge-add-body-decs :
    ([ClassDec(h, b)|k],
     k2) ->
    <merge-add-unique-method> ([ClassDec(h, b)], <merge-add-body-decs> (k, k2))
*/
  py-merge-add-body-decs =
    ?([a|k], k2)
    /*; not(<?MethodDec(_, _)> a)
    ; not(<?FieldDec(_, _, _)> a)
    ; not(<?ClassDec(_, _)> a)
    ; not(<?AbstractMethodDec(_, _, _, _, _, _)> a)
    */
    //; <debug> ["Found an unknown body declaration: ", a]
    ; !<py-merge-add-unique> (a, <py-merge-add-body-decs> (k, k2))

  /*
  merge-retrieve-method-stmts(|mdh) :
    MethodDec(mdh, Block(stmts)) -> stmts //mdh@MethodDecHead(_, _, _, _, _, _)

  // input: list of class body declarations
  merge-remove-method(|mdh) :
    [MethodDec(mdh, Block(stmts))|k] -> k

  merge-remove-method(|mdh) :
    [MethodDec(mdh2, Block(stmts))|k] -> <merge-remove-method(|mdh)> k
    where not(mdh := mdh2)

  merge-remove-method(|mdh) :
    [a|k] -> [a|<merge-remove-method(|mdh)> k]
    where not(<?MethodDec(_, _)> a)
*/

  py-merge-classes :
    (Statement(ClassDef(decs1, classname, superclasses, Block(body1))),
     Statement(ClassDef(decs2, classname, superclasses, Block(body2)))) ->
     Statement(ClassDef(decs3, classname, superclasses, Block(body3))) 
    where decs3 := <py-merge-add-unique> (decs1, decs2)
        ; body3 := <py-merge-add-body-decs> (body1, body2)

  py-merge-many-classes :
    [a] -> a

  py-merge-many-classes :
    [a|[b|k]] -> <py-merge-classes> (a, <py-merge-many-classes> [b|k])

  py-merge-group-classes :
    [] -> []

  py-merge-group-classes :
    [cls|k] -> [group|<py-merge-group-classes> k2]
    where Statement(ClassDef(_, classname, _, _)) := cls
        ; group := [cls|<filter(?Statement(ClassDef(_, classname, _, _)))> k]
        ; k2 := <remove-all(?Statement(ClassDef(_, classname, _, _)))> k

strategies

  py-merge-classes =
    ?classes
    ; non-classes := <filter(not(?Statement(ClassDef(_, _, _, _))))>
    ; <filter(?Statement(ClassDef(_, _, _, _)))> classes
    ; py-merge-group-classes
    ; map(py-merge-many-classes)
    ; topdown(try(py-merge-remove-unnecessary-annos))
    ; !<concat> [<id>, non-classes]
