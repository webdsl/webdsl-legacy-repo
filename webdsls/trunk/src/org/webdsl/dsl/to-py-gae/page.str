module org/webdsl/dsl/to-py-gae/page

imports
  libstrategolib
  libwebdsl-front

imports 
  org/webdsl/dsl/to-py-gae/-
  
strategies

  PyGenerateCode = py-page-to-code; fail
  PyGenerateCode = py-template-to-code; fail

  py-page-to-code =
    ?Define([Page()], x, args, elem*)
    ; with(
        info(|["Got page: ", x])
        ; x_cls := <capitalize-string> x
        ; if "home" := x then
            path := "'/"
          else
            path := <concat-strings> ["'/", x]
          end
        ; e_pattern := String(<concat-strings> [path, <map(\ _ -> "/([^/]+)" \); concat-strings> args, "'"])
        ; e_lst := ListLiteral(<map(py-argument-to-register-tuple)> args)
        ; <emit-python(|"template")> python*|[ webdsl.utils.register(e_pattern, x_cls, e_lst); ]|
        // Find all local templates
        ; localtemplates := <collect(\ Define([Local()], x, _, _) -> x \)> elem*
        ; debug(!"Locally defined templates: ")
        ; stm* := <map(\ x -> python|[ self.template_bindings[e_ltmp] = x_up; ]| 
                           with e_ltmp := <concat-strings> ["'", x, "'"]
                              ; x_up := <concat-strings> [x_cls, "_", x] \)> localtemplates
        ; info(|"Here")
        ; <emit-python(|"template")> python*|[
            @partial
            class x_cls(webdsl.utils.RequestHandler): {
              def prepare_templates(self): {
                stm*
                pass;
              };
            };
          ]|
      )

  py-argument-to-register-tuple :
    Arg(nm, SimpleSort(x_s)) -> 
    TupleLiteral(<concat-strings> ["'", nm, "'"], [idname, <EntityIdType; python-type <+ !"long"> x_s, py-exp|[ data.x_s ]| ])
    where idname := String(<concat-strings> ["'", <EntityIdName <+ !"">, "'"])

  py-template-to-code =
    ?Define(mods, x, args, elem*)
    ; not(<fetch(?Local())> mods)
    ; with(
        info(|["Got template: ", x])
        ; x_cls := <capitalize-string> x
        ; if "home" := x then
            e_path := String("'/'")
          else
            e_path := String(<concat-strings> ["'/", x, "'"])
          end
        ; {| ThisTemplate, IsScoped, CurrentActionId
           : rules ( ThisTemplate := x )
           ; <map(\ Arg(x, _) -> <rules( IsScoped : x )> \)> args
           ; stm* := <map(py-page-elem-to-code <+ py-skipped-element)> elem*
           |}
        ; <emit-python(|"template")> python*|[
            @partial
            class x_cls(webdsl.utils.RequestHandler): {
              def render(self): {
                out = self.out;
                stm*
              };
            };
          ]|
      )

  py-page-elems-to-code =
    map( py-page-elem-to-code; ![<id>|python*|[ out.write(new_line()); ]| ]
      <+ py-skipped-element)
    ; flatten-list

  py-page-elems-to-code(wrap) =
    map( py-page-elem-to-code; wrap; ![<id>|python*|[ out.write(new_line()); ]| ]
      <+ py-skipped-element)
    ; flatten-list

rules
  py-skipped-element =
   debug(!"Skipped element: ")
   ; e := <concat-strings> ["'", <write-to-string> <id>, "'"]
   ; !python |[ out.write('Skipped element: ' + e); ]|

rules // Local templates

  py-page-elem-to-code :
    Define([Local()], x, args, elem*) -> []
    with info(|["Got local template: ", x])
       ; name := <concat-strings> [<ThisTemplate>, "_", x]
       ; x_cls := <capitalize-string> name
       ; e_path := String(<concat-strings> ["'/", x, "'"])
       ; {| ThisTemplate, IsScoped, CurrentActionId
          : rules ( ThisTemplate := name )
          ; <map(\ Arg(x, _) -> <rules( IsScoped : x )> \)> args
          ; stm* := <map(py-page-elem-to-code <+ py-skipped-element)> elem*
          |}
       ; x_pagecls := <ThisTemplate; capitalize-string>
       ; <emit-python(|"template")> python*|[
           @partial
           class x_cls(webdsl.utils.RequestHandler): {
             def render(self): {
                out = self.out;
                stm*
             };
           };
        ]|
      
rules

  py-page-elem-to-code :
    Text(e) -> python*|[ out.write(e2); ]|
    where e2 := <expression-to-python> e

  py-page-elem-to-code :
    TemplateCall("text", [e], []) -> python*|[ out.write(cgi.escape(e2, True)); ]|
    where e2 := <expression-to-python> e

  py-page-elem-to-code :
    TemplateCall("title", [], elems) -> 
    python*|[ 
      from StringIO import StringIO;
      old_out = out;
      out = StringIO();
      stm*
      self.title = out.getvalue();
      out = old_out;
    ]|
    where stm* := <py-page-elems-to-code> elems

  py-page-elem-to-code :
    elem|[ form() { elem* }]| -> python*|[
      out.write('<form method="POST">');
      form_id = webdsl.utils.generateFormHash(self.scope, self);
      is_submitted_form = self.rh.request.get('form_id') == form_id;
      out.write('<input type="hidden" name="form_id" value="%s"/>' % form_id);
      stm*
      out.write('</form>');
    ]|
    where stm* := <map(py-page-elem-to-code <+ py-skipped-element)> elem*

  py-get-data-object =
    ?e
    ; if FieldAccess(obj, _) := e then
        !<expression-to-python> obj
      else
        !<expression-to-python> e
      end

  py-page-elem-to-code :
    elem|[ inputString(e){} ]| -> python*|[
          field_id = webdsl.utils.generateUniqueFieldName(e_data, e_fld, self);
          if is_submitted_form: {
              e_target = self.rh.request.get(field_id);
          };
          out.write('<input type="text" name="' + field_id + '" value="');
          out.write(cgi.escape(e_target, True));
          out.write('"/>');
    
    ]|
    with e_target := <expression-to-python> e
       ; e_fld := <concat-strings> ["'", <pp-webdsl> e, "'"]
       ; e_data := <py-get-data-object> e

  py-page-elem-to-code :
    elem|[ outputString(e){} ]| -> python*|[
          out.write(cgi.escape(e_target, True));
    ]|
    with e_target := <expression-to-python> e

  py-page-elem-to-code :
    elem|[ inputText(e){} ]| -> python*|[
          field_id = webdsl.utils.generateUniqueFieldName(e_data, e_fld, self);
          if is_submitted_form: {
              e_target = self.rh.request.get(field_id);
          };
          out.write('<textarea name="' + field_id + '">');
          out.write(cgi.escape(e_target, True));
          out.write('</textarea>');
    
    ]|
    with e_target := <expression-to-python> e
       ; e_fld := <concat-strings> ["'", <pp-webdsl> e, "'"]
       ; e_data := <py-get-data-object> e

  py-page-elem-to-code :
    elem|[ outputText(e){} ]| -> python*|[
          out.write(cgi.escape(e_target, True));
    ]|
    with e_target := <expression-to-python> e

  py-page-elem-to-code :
    elem|[ inputBool(e){} ]| -> python*|[
          if is_submitted_form: {
              e_target = bool(self.rh.request.get(e_fld));
          };
          out.write('<input type="checkbox" name="' + e_fld + '" ');
          if e_target: {
            out.write('checked="checked"');
          };
          out.write('/>');
    
    ]|
    with e_target := <expression-to-python> e
       ; e_fld := <concat-strings> ["'", <pp-webdsl> e, "'"]

  py-page-elem-to-code :
    elem|[ outputBool(e){} ]| -> python*|[
          if e_target: {
            out.write('Yes');
          }
          else: {
            out.write('No');
          };
    ]|
    with e_target := <expression-to-python> e

  py-page-elem-to-code :
    elem|[ inputEmail(e){} ]| -> python*|[
          if is_submitted_form: {
              e_target = self.rh.request.get(e_fld);
          };
          out.write('<input type="text" name="' + e_fld + '" value="');
          out.write(cgi.escape(e_target, True));
          out.write('"/>');
    
    ]|
    with e_target := <expression-to-python> e
       ; e_fld := <concat-strings> ["'", <pp-webdsl> e, "'"]

  py-page-elem-to-code :
    elem|[ outputEmail(e){} ]| -> python*|[
          out.write('<a href="mailto:' + cgi.escape(e_target, True) + '">' + cgi.escape(e_target, True) + '</a>');
    ]|
    with e_target := <expression-to-python> e

  py-page-elem-to-code :
    elem|[ action(e1, e2){} ]| -> python*|[
          out.write('<input type="submit" name="action-' + e_actionr + '" value="' + cgi.escape(e_txt, True) + '"/>');
          if self.rh.request.get('action-' + e_actionr) and is_submitted_form: {
              e_call;
          };
    ]|
    with actionr := <CurrentActionId <+ !1>
       ; rules ( CurrentActionId := <inc> actionr )
       ; e_actionr := <concat-strings> ["'", <int-to-string> actionr, "'"]
       ; e_txt := <expression-to-python> e1
       ; ThisCall(x, arg*) := e2
       ; x_action := <concat-strings> ["do_", x]
       ; e_call := Call(py-exp|[ self.x_action ]|, <map(expression-to-python)> arg*)

  py-page-elem-to-code :
    a@elem|[ action x_action(farg*) { stat* } ]| ->
    []
    with x_class := <ThisTemplate; capitalize-string>
       ; stm_action := <action-to-python> a
       ; <emit-python(|"template")> python*|[ @partial class x_class(webdsl.utils.RequestHandler): { stm_action }; ]|

  action-to-python :
    elem|[ action x_action(farg*) { stat* } ]| ->
    python*|[ def x_action2(self, e*): { stm* stm2* }; ]|
    with x_action2 := <concat-strings> ["do_", x_action]
       ; e* := <map(\ Arg(x, _) -> x \)> farg*
       ; {| InAction
          : rules ( InAction := True() )
          ; stm* := <statements-to-python> stat*
          |}
       ; if [] := <collect(?Return(_))> stat* then
           stm2* := python*|[ self.redirect_to_self(); ]|
         else
           stm2* := []
         end

rules
  py-page-elem-to-code :
    TemplateCall("dummy", [], elems) -> <py-page-elems-to-code> elems

rules // block

  // @obsolete; use block{ ... } instead of div{ ... }
  py-page-elem-to-code :
    TemplateCall("div", [String(str)], elems) ->
    python*|[ 
      out.write('<div class="' + e_str + '">');
      stm*
      out.write('</div>');
      ]|
    with stm* := <py-page-elems-to-code> elems
       ; e_str := <concat-strings> ["'", str, "'"]

  py-page-elem-to-code :
    TemplateCall("block", [], elems) ->
    python*|[ 
      out.write('<div>');
      stm*
      out.write('</div>');
      ]|
    where stm* := <py-page-elems-to-code> elems

  py-page-elem-to-code :
    TemplateCall("block", [String(str)], elems) ->
    python*|[ 
      out.write('<div class="' + e_str + '">');
      stm*
      out.write('</div>');
      ]|
    with stm* := <py-page-elems-to-code> elems
       ; e_str := <concat-strings> ["'", str, "'"]

  py-page-elem-to-code :
    ForAll(x, s, Filter(we, obe), elems) ->
    python*|[
      for x in webdsl.querylist.AllDbQuerySet(e_type): {
        stm*
      };
    ]|
    where True() := we
    with e_type := <python-type> s
       ; stm* := <py-page-elems-to-code> elems

rules // spacers

  /*
  py-page-elem-to-code :
    TemplateCall("spacer", [], []) ->
    python*|[ out.write('<hr id="' + e_id + "/>'); ]|
    %> <rich:spacer id="<%= spacer-id %>" /> <%
    where e_id := <concat-strings> ["'", <newname> "spacer", "'"]
    */

  py-page-elem-to-code :
    TemplateCall("horizontalspacer", [], []) ->
    python*|[ out.write('<hr/>'); ]|

rules // images

  py-page-elem-to-code :
    TemplateCall("image",[e],[]) -> 
    python*|[ out.write('<img src="' + e2 + '"/>'); ]|
    where e2 := <expression-to-python> e

rules // lists

  py-page-elem-to-code :
    TemplateCall("list", [], elems) ->
    python*|[
      out.write('<ul>');
      stm*
      out.write('</ul>');
    ]|
    where stm* := <py-page-elems-to-code> elems

  py-page-elem-to-code :
    TemplateCall("listitem", [], elems) ->
    python*|[
      out.write('<li>');
      stm*
      out.write('</li>');
    ]|
    where stm* := <py-page-elems-to-code> elems

rules // sections and headers

  py-page-elem-to-code :
    TemplateCall("header", [], elems) ->
    python*|[
      out.write('<' + e_h + '>');
      stm*
      out.write('</' + e_h + '>');
    ]|
    where not(DataTable) ; not(TableScope)
    with n := <SectionDepth <+ !1>
       ; e_h := <concat-strings> ["'h", <int-to-string> n, "'"]
       ; stm* := <py-page-elems-to-code> elems

  py-page-elem-to-code :
    TemplateCall("section", [], elems) ->
    python*|[
      out.write('<div class="' + e_level + '">');
      stm*
      out.write('</div>');
    ]|
    with {| SectionDepth
           : rules( SectionDepth := <(SectionDepth <+ !0); inc> )
           ; e_level := <concat-strings> ["'section", <SectionDepth; int-to-string>, "'"]
           ; stm* := <py-page-elems-to-code> elems
           |}

  py-page-elem-to-code :
    TemplateCall("par", [], elems) ->
    python*|[
      out.write('<p>');
      stm*
      out.write('</p>');
    ]|
    where stm* := <py-page-elems-to-code> elems

  py-page-elem-to-code :
    TemplateCall("container", [], elems) ->
    python*|[
      out.write('<span>');
      stm*
      out.write('</span>');
    ]|
    where stm* := <py-page-elems-to-code> elems

rules // tables

  py-page-elem-to-code :
    TemplateCall("table", [], elems) ->
    python*|[
      out.write('<table>');
      stm*
      out.write('</table>');
    ]|
    where {| TableScope
           : rules ( TableScope := 1 )
           ; stm* := <py-page-elems-to-code> elems
           |}

  py-page-elem-to-code :
    TemplateCall("header", [], elems) ->
    python*|[
      out.write('<tr>');
      stm*
      out.write('</tr>');
    ]|
    where TableScope
    with stm* := <py-page-elems-to-code(py-table-header-wrap)> elems

  py-page-elem-to-code :
    TemplateCall("row", [], elems) ->
    python*|[
      out.write('<tr>');
      stm*
      out.write('</tr>');
    ]|
    with stm* := <py-page-elems-to-code(py-table-cell-wrap)> elems

  py-table-cell-wrap :
    stm* -> python*|[
      out.write('<td>');
      stm*
      out.write('</td>');
    ]|

  py-table-header-wrap :
    stm* -> python*|[
      out.write('<th>');
      stm*
      out.write('</th>');
    ]|

rules // if

  py-page-elem-to-code :
    IfTempl(e, elems) ->
    python*|[
      if(e2): {
        stm*
      };
    ]|
    with stm* := <py-page-elems-to-code> elems
       ; e2 := <expression-to-python> e
    
rules // links

  // link to a url, maybe constant, or obtained from an entity field

  py-page-elem-to-code :
    TemplateCall("navigate", [ThisCall("url",[e])], elems) ->
    python*|[
      out.write('<a href="' + e_link + '">');
      stm*
      out.write('</a>');
    ]|
    where not(ThisCall(p,args) := e)
    with stm* := <py-page-elems-to-code> elems
       ; e_link := <expression-to-python> e

  py-page-elem-to-code :
    TemplateCall("navigate",[call@ThisCall(p,args)],elems) ->
    python*|[
      out.write('<a href="' + e_link + '">');
      stm*
      out.write('</a>');
    ]|
    where <IsPage> p
        ; stm* := <py-page-elems-to-code> elems
        ; e_link := <py-call-to-view-string> call

  /*
  py-page-elem-to-code :
    TemplateCall("navigatebutton", [ThisCall("url",[e]), txt], []) ->
    python*|[
      out.write('<input type="button" onclick="location=\'' + e_link + '\';" value="' + e_txt + '"/>');
    ]|
    where not(ThisCall(p,args) := e)
    with e_txt := <expression-to-python> txt
       ; e_link := <expression-to-python> e

  py-page-elem-to-code :
    TemplateCall("navigatebutton",[call@ThisCall(p,args), txt],[]) ->
    python*|[
      out.write('<input type="button" onclick="location=\'' + e_link + '\';" value="' + e_txt + '"/>');
    ]|
    where <IsPage> p
    with e_txt := <expression-to-python> txt
       ; e_link := <py-call-to-view-string> call
       */

rules // Template call
  py-page-elem-to-code :
    TemplateCall(name, args, _) ->
    python*|[ 
        e_tmplobj.render();
        ]|
    where t* := <map(type-of)> args
        ; Define(mods, n, fargs, body) := <TemplateSignature> (name, t*)
    with e_namestr := <concat-strings> ["'", name, "'"]
       ; info(|"Going to translate a templat call")
       ; e_tmplclass := py-exp|[ self.template_bindings[e_namestr] ]|
       ; info(|"Step 1")
       ; scopedparams := <zip(\ (Arg(x, _), e) -> NamedParam(x, <expression-to-python> e) \)> (fargs, args)
       ; info(|"Step 2")
       ; e_tmplobj := Call(e_tmplclass, <concat> [[Param(py-exp|[ self ]|), Param(py-exp|[ self.rh ]|), Param(py-exp|[ out ]|)], scopedparams])
       ; info(|"Step 3")
  /*
  py-page-elem-to-code :
    TemplateCall("url",[e],[]) ->
    %> <h:outputText value="<%= url %>" /> <%
    where not(ThisCall(p,args) := e)
        ; url := <arg-to-value-string> e

  py-page-elem-to-code :
    TemplateCall("url",[ThisCall(p,args)],[]) ->
//    %> <h:outputText value="http://#{<%= <ThisPage> %>.facesContext.externalContext.getRequestHeaderMap("host")}<%= url %>" /> <%
    %> <h:outputText value="#{<%= <ThisPage> %>.hostName}<%= url %>" /> <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)

*/

rules // Select

  py-page-elem-to-code :
    Select(x, SimpleSort(x_type), label, e) ->
    python*|[
        field_id = webdsl.utils.generateUniqueFieldName( e_data,  e_fld ,  self );
        if is_submitted_form: {
            e_target = data.x_type.fetch_by_id(self.rh.request.get( field_id ));
        };
        out.write('<select name="' + field_id + '">');
        for item in webdsl.querylist.AllDbQuerySet(data.x_type): {
            if e_target == item: {
                out.write('<option selected="selected" ');
            } else: {
                out.write('<option ');
            };
            out.write('value="' + cgi.escape(item.id, True) + '">');
            out.write(cgi.escape(item.id, True));
            out.write('</option>');
        };
        out.write('</select>');
    ]|    
    where SimpleSort(_) := <type-of> e
    with e_target := <expression-to-python> e
       ; e_fld := <concat-strings> ["'", <pp-webdsl> e, "'"]
       ; e_data := <py-get-data-object> e

rules // vardecl

  py-page-elem-to-code :
    VarDeclInit(x, s, expr) ->
    python*|[ 
        self.scope[e_x] = e;
        ]|
    with rules ( IsScoped : x )
       ; e_x := <concat-strings> ["'", x, "'"]
       ; e := <expression-to-python> expr

 /*

rules // iteration

  // @todo: other For expressions
  py-page-elem-to-code : //@todo: lifting!
    For(x, s, e, Filter(True(), obe), elems) -> // No "where" clause
    %>
      <c:forEach var="<%= x %>" items="<%= <arg-to-el-string> e %>">
        <%= <elems-to-xhtml> elems ::*%>
      </c:forEach>
    <%
    where InToplevelTemplate
        ; <contains-template-call> elems

  py-page-elem-to-code :
    For(x, s, e, Filter(we, obe), elems1) ->
    %>
      <ui:repeat var="<%= x %>" value="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>">
        <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<ThisPage>, we) %>">
          <%= elems2 ::*%>
        </h:panelGroup>
      </ui:repeat>
    <%
    where not(True() := we)
        //; el := <arg-to-value-string> e
        ; elems2  := <elems-to-xhtml> elems1

  py-page-elem-to-code :
    For(x, s, e, Filter(True(), obe), elems1) -> // No "where" clause
    %>
      <ui:repeat var="<%= x %>" value="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>">
        <%= elems2 ::*%>
      </ui:repeat>
    <%
    where elems2  := <elems-to-xhtml> elems1

rules // select from

  py-page-elem-to-code :
    SelectFromList(e1, e2) ->
    %>
       <h:selectManyListbox value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" />
          <s:convertEntity />
        </h:selectManyListbox>
    <%
    where GenericSort(_, _) := <type-of> e1
        ; x_prop    := <concat-strings> [<arg-to-el> e1, "List"]
        ; x_List    := <concat-strings> [<arg-to-el> e2, "List"]
        ; x         := <newname> "selectvar"

  py-page-elem-to-code :
    SelectFromList(e1, e2) ->
    %>
       <h:selectOneMenu value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" noSelectionLabel="" />
          <s:convertEntity />
        </h:selectOneMenu>
    <%
    where SimpleSort(_) := <type-of> e1
        ; x_prop    := <concat-strings> [<arg-to-el> e1]
        ; x_List    := <concat-strings> [<arg-to-el> e2, "List"]
        ; x         := <newname> "selectvar"

rules // select

  py-page-elem-to-code :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectManyListbox value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= <ThisPage> %>.<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" />
          <s:convertEntity />
        </h:selectManyListbox>
    <%
    where GenericSort(_, _) := <type-of> e
        ; X         := <capitalize-string> x
        ; x_List    := <concat-strings>[x, "List"]
        ; x_prop    := <concat-strings> [<arg-to-el> e, "List"]

  py-page-elem-to-code :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectOneMenu value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= <ThisPage> %>.<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" noSelectionLabel="" />
          <s:convertEntity />
        </h:selectOneMenu>
    <%
    where SimpleSort(_) := <type-of> e
        ; X         := <capitalize-string> x
        ; x_List    := <concat-strings>[x, "List"]
        ; x_prop    := <arg-to-el> e

rules // template

  py-page-elem-to-code :
    def |[ define local x(farg*) { elem* } ]| ->
    %>
    
    <ui:define name="<%= x %>">
	  <div id="<%= x %>">
	    <%= elems ::* %>
	  </div>
	</ui:define>
    <%
    with {| InLocalTemplate
          : rules ( InLocalTemplate := x )
          ; elems := <elems-to-xhtml> elem*
          |}
          
rules // template call

  py-page-elem-to-code :
    TemplateCall(name, args, _) ->
    %>
      <ui:insert name="<%= name %>">
         <%= include::* %>
	  </ui:insert>
    <%
    where ( not(<IsPage> <ThisPage>) <+ InLocalTemplate )
//        ; <debug> [">>>>", <IsPage> <ThisPage>, <InLocalTemplate>]
//        ; <debug> ["+++++++++tc: ", name, args]
        ; t* := <map(type-of)> args
//        ; <debug> ["________t*", t*]
        ; if Define(mods, n, fargs, body) := <TemplateSignature> (name, t*) then
            target := <concat-strings> [name, ".xhtml"]
//            ; <debug> ["________", n, fargs]
            ; params := <try(zip(templatecall-args-to-facelets); concat)> (args, fargs)
            ; include := 
              %>
	            <ui:include src="<%= target %>">
    	            <%= params::* %>
		        </ui:include>
		      <%
		  else
		    if Define(mods, n, fargs, body) := <LocalTemplateSignature> (name, t*) then
   		      include := []
   		    end
          end
//        ; <debug> ["_____", n, fargs]

  py-page-elem-to-code :
    TemplateCall(name, args, _) ->
    %>
      <ui:include src="<%= target %>">
        <%= params::* %>
      </ui:include>
    <%
    where is-call-to-toplevel-template ; <IsPage> <ThisPage>
    with target := <concat-strings> [name, ".xhtml"]
       ; Define([Template()], n, fargs, body) := <TemplateSignature> (name, <map(type-of)> args)
       ; params := <try(zip(templatecall-args-to-facelets); concat)> (args, fargs)
    
rules // forms

  py-page-elem-to-code :  // the <f:facet> puts validation errors behind their inputs
    tc@TemplateCall("form", [], elems) ->
    %>
      <h:form enctype="multipart/form-data" att0>
        <%= hidden-ids ::*%>
        <f:facet name="afterInvalidField"><s:message/></f:facet>
        <%= <elems-to-xhtml> elems ::*%>
      </h:form>
    <%
    where if InToplevelTemplate then
            hidden-ids := <mapconcat(arg-to-xhtml)> <bagof-TemplateArguments> <ThisPage>
          else
            hidden-ids := <mapconcat(arg-to-xhtml)> <TemplateArguments> <ThisPage>
          end
        ; if <get-jsf-component-id-1> tc then 
            att0 := @>  id="<%= <get-jsf-component-id-1> tc %>" <@
          else att0:= [] end

  arg-to-xhtml :
    Arg(e, s) -> %> <input type="hidden" name="<%= e %>" value="#{<%= <ThisPage>%>.<%= e%>}" /> <%
    where <builtin-java-type> s

  arg-to-xhtml :
    Arg(i, s) -> %> <input type="hidden" name="<%= e1 %>" value="#{<%= <ThisPage>%>.<%= i%>.id}" /> <%
    where <defined-java-type> s
        ; e1 := <concat-strings>[i, "_id"]

  py-page-elem-to-code :
    TemplateCall("action",[e1,e2],[]) ->
    %>
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

  py-page-elem-to-code :
    TemplateCall("action",[e1,e2,e3],[]) ->
    %>
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

  py-page-elem-to-code :
    TemplateCall("action",[e1,e2,e3],[]) ->
    %>
       <s:button type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <is-cancel-action> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

    // @todo this is a big hack! the s:button component invokes the
    // corresponding action, but does not send the form information, does
    // canceling the form edits; however, this should NOT be expressed in the
    // name of the action method

  py-page-elem-to-code :
    TemplateCall("actionLink",[e1,e2],[]) ->
    %>
       <h:commandLink type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

   is-cancel-action =
     ?Call(Var(component), "cancel", [])

   py-page-elem-to-code :
    TemplateCall("action",[e1,e2],[]) ->
    %>
       <h:commandButton value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

   py-page-elem-to-code :
     Action(name, args, body) -> []

rules // captcha

  py-page-elem-to-code :
    TemplateCall("captcha", [], []) ->
    %>
      <div class="captcha">
        <div>
          <h:graphicImage value="/seam/resource/captcha?#{captcha.id}"/>
        </div>
        <div>
          <h:outputLabel for="verifyCaptcha">Enter the above letters</h:outputLabel>
          <h:inputText id="verifyCaptcha" value="#{captcha.response}" required="true">
            <s:validate />
          </h:inputText>
          <div class="validationError"><h:message for="verifyCaptcha"/></div>
        </div>
      </div>
    <%

rules // helper rules for input

  input-of-required-property(|e)=
    if <page-var-access-to-class-prop-tuple;PropertyIsRequired> e
    then
      !"true"
    else
      !"false"
    end

  get-type-of-right-side-field-access:
    fa@FieldAccess(e, f) -> thetype
    where SimpleSort(thetype) := <type-of> fa

  page-var-access-to-class-prop-tuple :
    FieldAccess(e, f) -> (<get-type-of-right-side-field-access> e,f)


rules // output

  py-page-elem-to-code :
    TemplateCall("output",[e],[]) ->
    %>
      <h:outputText styleClass="output" value="<%= estring %>"/>
    <%
    where warn(|["underived output element"])
        ; estring := <arg-to-value-string> e

*/         
