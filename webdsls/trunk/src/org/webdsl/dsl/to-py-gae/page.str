module org/webdsl/dsl/to-py-gae/page

imports
  libstrategolib
  libwebdsl-front

imports 
  org/webdsl/dsl/to-py-gae/-
  
strategies

  PyGenerateCode = py-page-to-code; fail
  PyGenerateCode = py-template-to-code; fail

  py-page-to-code =
    ?Define([Page()], x, args, elem*)
    ; with(
        info(|["Got page: ", x])
        ; x_cls := <capitalize-string> x
        ; if "home" := x then
            path := "'/"
          else
            path := <concat-strings> ["'/", x]
          end
        ; e_pattern := String(<concat-strings> [path, <map(\ _ -> "/([^/]+)" \); concat-strings> args, "'"])
        ; e_lst := ListLiteral(<map(py-argument-to-register-tuple)> args)
        ; <emit-python(|"template")> python*|[ webdsl.utils.register(e_pattern, x_cls, e_lst); ]|
      )

  py-argument-to-register-tuple :
    Arg(nm, SimpleSort(x_s)) -> 
    TupleLiteral(<concat-strings> ["'", nm, "'"], [idname, <EntityIdType <+ !"long"> x_s, py-exp|[ data.x_s ]| ])
    where idname := String(<concat-strings> ["'", <EntityIdName <+ !"">, "'"])

  py-template-to-code =
    ?Define(mods, x, args, elem*)
    ; with(
        info(|["Got template: ", x])
        ; x_cls := <capitalize-string> x
        ; if "home" := x then
            e_path := String("'/'")
          else
            e_path := String(<concat-strings> ["'/", x, "'"])
          end
        ; {| ThisTemplate, IsScoped, CurrentActionId
           : rules ( ThisTemplate := x )
           ; <map(\ Arg(x, _) -> <rules( IsScoped : x )> \)> args
           ; stm* := <map(py-page-elem-to-code <+ py-skipped-element)> elem*
           |}
        ; <emit-python(|"template")> python*|[
            @partial
            class x_cls(webdsl.utils.RequestHandler): {
              def render(self): {
                out = self.rh.response.out;
                stm*
              };
            };
          ]|
      )

  py-page-elems-to-code =
    map(py-page-elem-to-code <+ py-skipped-element)
rules
  py-skipped-element =
   debug(!"Skipped element: ")
   ; !python |[ out.write('Skipped element.'); ]|

rules

  py-page-elem-to-code :
    Text(str) -> python|[ out.write(e); ]|
    where e := <concat-strings> ["'", str, "'"]

  py-page-elem-to-code :
    elem|[ form() { elem* }]| -> Block(python*|[
      out.write('<form method="POST">');
      form_id = webdsl.utils.generateFormHash(self.scope, self);
      is_submitted_form = self.rh.request.get('form_id') == form_id;
      out.write('<input type="hidden" name="form_id" value="%s"/>' % form_id);
      stm*
      out.write('</form>');
    ]|)
    where stm* := <map(py-page-elem-to-code <+ py-skipped-element)> elem*

  py-page-elem-to-code :
    elem|[ inputString(e){} ]| -> Block(python*|[
          if is_submitted_form: {
              e_target = self.rh.request.get(e_fld);
          };
          out.write('<input type="text" name="' + e_fld + '" value="');
          out.write(cgi.escape(e_target, True));
          out.write('"/>');
    
    ]|)
    with e_target := <expression-to-python> e
       ; e_fld := <concat-strings> ["'", <pp-webdsl> e, "'"]

  py-page-elem-to-code :
    elem|[ outputString(e){} ]| -> python|[
          out.write(cgi.escape(e_target, True));
    ]|
    with e_target := <expression-to-python> e

  py-page-elem-to-code :
    elem|[ inputText(e){} ]| -> Block(python*|[
          if is_submitted_form: {
              e_target = self.rh.request.get(e_fld);
          };
          out.write('<textarea name="' + e_fld + '">');
          out.write(cgi.escape(e_target, True));
          out.write('</textarea>');
    
    ]|)
    with e_target := <expression-to-python> e
       ; e_fld := <concat-strings> ["'", <pp-webdsl> e, "'"]

  py-page-elem-to-code :
    elem|[ outputText(e){} ]| -> python|[
          out.write(cgi.escape(e_target, True));
    ]|
    with e_target := <expression-to-python> e

  py-page-elem-to-code :
    elem|[ action(e1, e2){} ]| -> Block(python*|[
          out.write('<input type="submit" name="action-' + e_actionr + '" value="' + cgi.escape(e_txt, True) + '"/>');
          if self.rh.request.get('action-' + e_actionr) and is_submitted_form: {
              e_call;
          };
    ]|)
    with actionr := <CurrentActionId <+ !1>
       ; rules ( CurrentActionId := <inc> actionr )
       ; e_actionr := <concat-strings> ["'", <int-to-string> actionr, "'"]
       ; e_txt := <expression-to-python> e1
       ; ThisCall(x, arg*) := e2
       ; x_action := <concat-strings> ["do_", x]
       ; e_call := Call(py-exp|[ self.x_action ]|, <map(expression-to-python)> arg*)

  py-page-elem-to-code :
    a@elem|[ action x_action(farg*) { stat* } ]| ->
    Block([])
    with x_class := <ThisTemplate; capitalize-string>
       ; stm_action := <action-to-python> a
       ; <emit-python(|"template")> python*|[ @partial class x_class(webdsl.utils.RequestHandler): { stm_action }; ]|

  action-to-python :
    elem|[ action x_action(farg*) { stat* } ]| ->
    python|[ def x_action2(self, e*): { stm* stm2* }; ]|
    with x_action2 := <concat-strings> ["do_", x_action]
       ; e* := <map(\ Arg(x, _) -> x \)> farg*
       ; {| InAction
          : rules ( InAction := True() )
          ; stm* := <statements-to-python> stat*
          |}
       ; if [] := <collect(?Return(_))> stat* then
           stm2* := python*|[ self.redirect_to_self(); ]|
         else
           stm2* := []
         end

rules
  py-page-elem-to-code :
    TemplateCall("dummy", [], elems) -> Block(<py-page-elems-to-code> elems)

rules // block

  // @obsolete; use block{ ... } instead of div{ ... }
  py-page-elem-to-code :
    TemplateCall("div", [e_str], elems) ->
    Block(python*|[ 
      out.write('<div class="' + e_str + '">');
      stm*
      out.write('</div>');
      ]|)
    where stm* := <py-page-elems-to-code> elems

  py-page-elem-to-code :
    TemplateCall("block", [], elems) ->
    Block(python*|[ 
      out.write('<div>');
      stm*
      out.write('</div>');
      ]|)
    where stm* := <py-page-elems-to-code> elems

  py-page-elem-to-code :
    TemplateCall("block", [e_str], elems) ->
    Block(python*|[ 
      out.write('<div class="' + e_str + '">');
      stm*
      out.write('</div>');
      ]|)
    where stm* := <py-page-elems-to-code> elems

  py-page-elem-to-code :
    ForAll(x, s, Filter(we, obe), elems) ->
    Block(python*|[
      for x in webdsl.querylist.AllDbQuerySet(e_type): {
        stm*
      };
    ]|)
    where True() := we
    with e_type := <python-type> s
       ; stm* := <py-page-elems-to-code> elems
 /*
rules // text

  py-page-elem-to-code :
    Text(x) -> %> <h:outputText value="<%=x%>"/> <%

rules // text

  // convert an expression to text (string value of the expression)

  py-page-elem-to-code :
    TemplateCall("text", [arg], []) ->
    %> <h:outputText value="<%= val-string %>"/> <%
    where val-string := <arg-to-value-string> arg

  py-page-elem-to-code :
    TemplateCall("text", [e], []) ->
    %> <h:outputText value="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>"/> <%
    where info(|["text(", e, "): ", <ThisPage>, ", ", e])

rules // spacers

  py-page-elem-to-code :
    TemplateCall("spacer", [], []) ->
    %> <rich:spacer id="<%= spacer-id %>" /> <%
    where spacer-id := <newname> "spacer"

  py-page-elem-to-code :
    TemplateCall("horizontalspacer", [], []) -> %> <hr /> <%

rules // images

  py-page-elem-to-code :
    TemplateCall("image",[e],[]) -> %> <h:graphicImage value="<%=x%>"/> <%
    where x := <arg-to-value-string> e

rules // lists

  py-page-elem-to-code :
    TemplateCall("list", [], elems) ->
    %>
      <ul>
        <%= <elems-to-xhtml> elems ::*%>
      </ul>
    <%

  py-page-elem-to-code :
    TemplateCall("listitem", [], elems) ->
    %>
      <li>
        <%= <elems-to-xhtml> elems ::*%>
      </li>
    <%

rules // sections and headers

  py-page-elem-to-code :
    TemplateCall("header", [], elems) ->
    %>
      <~n:tag><%= <elems-to-xhtml> elems ::*%></~n:tag>
    <%
    where not(DataTable) ; not(TableScope)
        ; n := <SectionDepth <+ !1>
        ; tag := <concat-strings>["h", <int-to-string> n]

  py-page-elem-to-code :
    TemplateCall("section", [], elems1) ->
    %>
      <div class="<%= sectionlevel %>"><%= elems2 ::*%></div>
    <%
    where {| SectionDepth
           : rules( SectionDepth := <(SectionDepth <+ !0); inc> )
           ; sectionlevel := <concat-strings>["section", <SectionDepth; int-to-string>]
           ; elems2 := <elems-to-xhtml> elems1
           |}

  py-page-elem-to-code :
    TemplateCall("par", [], elems1) ->
    %>
      <p><%= elems2 ::*%></p>
    <%
    where elems2 := <elems-to-xhtml> elems1

  py-page-elem-to-code :
    TemplateCall("container", [], elems1) ->
    %>
      <span><%= elems2 ::*%></span>
    <%
    where elems2 := <elems-to-xhtml> elems1

rules // tables

  py-page-elem-to-code :
    TemplateCall("table", [], elems) ->
    %>
      <table><%= e* ::*%></table>
    <%
    where {| TableScope
           : rules ( TableScope := 1 )
           ; e* := <elems-to-xhtml> elems
           |}

  py-page-elem-to-code :
    TemplateCall("header", [], elems) ->
    %>
      <tr><%= <elems-to-xhtml(table-header-wrap)> elems ::*%></tr>
    <%
    where TableScope

  py-page-elem-to-code :
    TemplateCall("row", [], elems) ->
    %>
      <tr><%= <elems-to-xhtml(table-cell-wrap)> elems ::*%></tr>
    <%

   table-cell-wrap :
     elems -> %> <td><%= elems ::*%></td> <%

   table-header-wrap :
     elems -> %> <th><%= elems ::*%></th> <%

rules // iteration

  // @todo: other For expressions
  py-page-elem-to-code : //@todo: lifting!
    For(x, s, e, Filter(True(), obe), elems) -> // No "where" clause
    %>
      <c:forEach var="<%= x %>" items="<%= <arg-to-el-string> e %>">
        <%= <elems-to-xhtml> elems ::*%>
      </c:forEach>
    <%
    where InToplevelTemplate
        ; <contains-template-call> elems

  py-page-elem-to-code :
    For(x, s, e, Filter(we, obe), elems1) ->
    %>
      <ui:repeat var="<%= x %>" value="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>">
        <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<ThisPage>, we) %>">
          <%= elems2 ::*%>
        </h:panelGroup>
      </ui:repeat>
    <%
    where not(True() := we)
        //; el := <arg-to-value-string> e
        ; elems2  := <elems-to-xhtml> elems1

  py-page-elem-to-code :
    For(x, s, e, Filter(True(), obe), elems1) -> // No "where" clause
    %>
      <ui:repeat var="<%= x %>" value="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>">
        <%= elems2 ::*%>
      </ui:repeat>
    <%
    where elems2  := <elems-to-xhtml> elems1

  py-page-elem-to-code :
    ForAll(x, s, Filter(we, obe), elems) ->
    %>
      <ui:repeat var="<%= x %>" value="#{<%= <ThisPage> %>.<%= x %>List}">
        <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<ThisPage>, we) %>">
          <%= columns ::*%>
        </h:panelGroup>
      </ui:repeat>
    <%
    where not(True() := we)
        ; columns := <elems-to-xhtml(wrap-column)> elems

  py-page-elem-to-code :
    ForAll(x, s, Filter(True(), obe), elems) ->
    %>
      <ui:repeat var="<%= x %>" value="#{<%= <ThisPage> %>.<%= x %>List}">
        <%= columns ::*%>
      </ui:repeat>
    <%
    where columns := <elems-to-xhtml(wrap-column)> elems

  wrap-column :
    elems ->
    %>
      <h:column><%= elems ::*%></h:column>
    <%

rules // select from

  py-page-elem-to-code :
    SelectFromList(e1, e2) ->
    %>
       <h:selectManyListbox value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" />
          <s:convertEntity />
        </h:selectManyListbox>
    <%
    where GenericSort(_, _) := <type-of> e1
        ; x_prop    := <concat-strings> [<arg-to-el> e1, "List"]
        ; x_List    := <concat-strings> [<arg-to-el> e2, "List"]
        ; x         := <newname> "selectvar"

  py-page-elem-to-code :
    SelectFromList(e1, e2) ->
    %>
       <h:selectOneMenu value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" noSelectionLabel="" />
          <s:convertEntity />
        </h:selectOneMenu>
    <%
    where SimpleSort(_) := <type-of> e1
        ; x_prop    := <concat-strings> [<arg-to-el> e1]
        ; x_List    := <concat-strings> [<arg-to-el> e2, "List"]
        ; x         := <newname> "selectvar"

rules // select

  py-page-elem-to-code :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectManyListbox value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= <ThisPage> %>.<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" />
          <s:convertEntity />
        </h:selectManyListbox>
    <%
    where GenericSort(_, _) := <type-of> e
        ; X         := <capitalize-string> x
        ; x_List    := <concat-strings>[x, "List"]
        ; x_prop    := <concat-strings> [<arg-to-el> e, "List"]

  py-page-elem-to-code :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectOneMenu value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= <ThisPage> %>.<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" noSelectionLabel="" />
          <s:convertEntity />
        </h:selectOneMenu>
    <%
    where SimpleSort(_) := <type-of> e
        ; X         := <capitalize-string> x
        ; x_List    := <concat-strings>[x, "List"]
        ; x_prop    := <arg-to-el> e

rules // if

  py-page-elem-to-code :
    IfTempl(e, elems) ->
    %>
      <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>"><%= elems2 ::*%></h:panelGroup>
    <%
    where not(<contains-template-call> elems)
        ; elems2 := <elems-to-xhtml> elems
    
  py-page-elem-to-code : //@todo: lifting!
    IfTempl(e, elems) ->
    %>
      <c:if test="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>">
        <%= <elems-to-xhtml> elems ::*%>
      </c:if>
    <%
    where InToplevelTemplate
        ; <contains-template-call> elems

rules // template

  py-page-elem-to-code :
    def |[ define local x(farg*) { elem* } ]| ->
    %>
    
    <ui:define name="<%= x %>">
	  <div id="<%= x %>">
	    <%= elems ::* %>
	  </div>
	</ui:define>
    <%
    with {| InLocalTemplate
          : rules ( InLocalTemplate := x )
          ; elems := <elems-to-xhtml> elem*
          |}
          
rules // template call

  py-page-elem-to-code :
    TemplateCall(name, args, _) ->
    %>
      <ui:insert name="<%= name %>">
         <%= include::* %>
	  </ui:insert>
    <%
    where ( not(<IsPage> <ThisPage>) <+ InLocalTemplate )
//        ; <debug> [">>>>", <IsPage> <ThisPage>, <InLocalTemplate>]
//        ; <debug> ["+++++++++tc: ", name, args]
        ; t* := <map(type-of)> args
//        ; <debug> ["________t*", t*]
        ; if Define(mods, n, fargs, body) := <TemplateSignature> (name, t*) then
            target := <concat-strings> [name, ".xhtml"]
//            ; <debug> ["________", n, fargs]
            ; params := <try(zip(templatecall-args-to-facelets); concat)> (args, fargs)
            ; include := 
              %>
	            <ui:include src="<%= target %>">
    	            <%= params::* %>
		        </ui:include>
		      <%
		  else
		    if Define(mods, n, fargs, body) := <LocalTemplateSignature> (name, t*) then
   		      include := []
   		    end
          end
//        ; <debug> ["_____", n, fargs]

  py-page-elem-to-code :
    TemplateCall(name, args, _) ->
    %>
      <ui:include src="<%= target %>">
        <%= params::* %>
      </ui:include>
    <%
    where is-call-to-toplevel-template ; <IsPage> <ThisPage>
    with target := <concat-strings> [name, ".xhtml"]
       ; Define([Template()], n, fargs, body) := <TemplateSignature> (name, <map(type-of)> args)
       ; params := <try(zip(templatecall-args-to-facelets); concat)> (args, fargs)
    
rules // vardecl

  py-page-elem-to-code :
    VarDeclInit(a, s, expr) ->
    %>
      <h:inputHidden value="<%= val %>" />
    <%
    where x_set := <concat-strings> [<ThisPage>, ".", <property-setter> a]
        ; val := <concat-strings> ["#{", x_set, "(", <ConditionExpressionToString> (<ThisPage>, expr), ")}"]

rules // links

  // link to a url, maybe constant, or obtained from an entity field

  py-page-elem-to-code :
    TemplateCall("navigate", [ThisCall("url",[e])], elems) ->
    %> <h:outputLink value="<%=x%>"><%=
        <elems-to-xhtml> elems ::*
    %></h:outputLink> <%
    where not(ThisCall(p,args) := e)
        ; x := <arg-to-value-string> e

  py-page-elem-to-code :
    t@TemplateCall("navigate", [ThisCall("url",[e@ThisCall(p,args)])], elems) ->
    %>
      <h:outputLink value="#{<%= <ThisPage> %>.hostName}<%=url%>">
        <%= <elems-to-xhtml> elems ::* %>
      </h:outputLink>
    <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)

  py-page-elem-to-code :
    TemplateCall("navigate",[ThisCall(p,args)],elems) ->
    %> <h:outputLink value="<%= url %>"><%=
        <elems-to-xhtml> elems ::*
    %></h:outputLink> <%
    where <IsPage> p
        ; def |[ define mod* x(farg*) { elem* } ]| := <TemplateSignature> (p, <map(type-of)> args)
        ; params := <zip(bind-param)> (farg*, args)
        ; url := <page-call-to-url> (p, params)

  bind-param :
    (Arg(x, _), e) -> (x, el)
    where el := <arg-to-value-string> FieldAccess(e, "id")

  py-page-elem-to-code :
    TemplateCall("navigatebutton",[ThisCall(p,args), e],[]) ->
    %> <input type="button" onclick="location = '<%= url %>';" value="<%= txt %>"/> <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)
        ; txt := <arg-to-value-string> e

  py-page-elem-to-code :
    TemplateCall("url",[e],[]) ->
    %> <h:outputText value="<%= url %>" /> <%
    where not(ThisCall(p,args) := e)
        ; url := <arg-to-value-string> e

  py-page-elem-to-code :
    TemplateCall("url",[ThisCall(p,args)],[]) ->
//    %> <h:outputText value="http://#{<%= <ThisPage> %>.facesContext.externalContext.getRequestHeaderMap("host")}<%= url %>" /> <%
    %> <h:outputText value="#{<%= <ThisPage> %>.hostName}<%= url %>" /> <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)


//  bind-param :
//    (Arg(x, s@SimpleSort(x_Class)), e) ->
//    %><f:param name="<%= x %>" value="<%= el %>" /><%
//    where <defined-java-type> s
//        //; x_class := <decapitalize-string> x_Class
//        ; el := <arg-to-value-string> FieldAccess(e, "id")
//
  // constraint: only pass parameters of entity types (simple sorts)

rules // forms

  py-page-elem-to-code :  // the <f:facet> puts validation errors behind their inputs
    tc@TemplateCall("form", [], elems) ->
    %>
      <h:form enctype="multipart/form-data" att0>
        <%= hidden-ids ::*%>
        <f:facet name="afterInvalidField"><s:message/></f:facet>
        <%= <elems-to-xhtml> elems ::*%>
      </h:form>
    <%
    where if InToplevelTemplate then
            hidden-ids := <mapconcat(arg-to-xhtml)> <bagof-TemplateArguments> <ThisPage>
          else
            hidden-ids := <mapconcat(arg-to-xhtml)> <TemplateArguments> <ThisPage>
          end
        ; if <get-jsf-component-id-1> tc then 
            att0 := @>  id="<%= <get-jsf-component-id-1> tc %>" <@
          else att0:= [] end

  arg-to-xhtml :
    Arg(e, s) -> %> <input type="hidden" name="<%= e %>" value="#{<%= <ThisPage>%>.<%= e%>}" /> <%
    where <builtin-java-type> s

  arg-to-xhtml :
    Arg(i, s) -> %> <input type="hidden" name="<%= e1 %>" value="#{<%= <ThisPage>%>.<%= i%>.id}" /> <%
    where <defined-java-type> s
        ; e1 := <concat-strings>[i, "_id"]

  py-page-elem-to-code :
    TemplateCall("action",[e1,e2],[]) ->
    %>
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

  py-page-elem-to-code :
    TemplateCall("action",[e1,e2,e3],[]) ->
    %>
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

  py-page-elem-to-code :
    TemplateCall("action",[e1,e2,e3],[]) ->
    %>
       <s:button type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <is-cancel-action> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

    // @todo this is a big hack! the s:button component invokes the
    // corresponding action, but does not send the form information, does
    // canceling the form edits; however, this should NOT be expressed in the
    // name of the action method

  py-page-elem-to-code :
    TemplateCall("actionLink",[e1,e2],[]) ->
    %>
       <h:commandLink type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

   is-cancel-action =
     ?Call(Var(component), "cancel", [])

   py-page-elem-to-code :
    TemplateCall("action",[e1,e2],[]) ->
    %>
       <h:commandButton value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

   py-page-elem-to-code :
     Action(name, args, body) -> []

rules // captcha

  py-page-elem-to-code :
    TemplateCall("captcha", [], []) ->
    %>
      <div class="captcha">
        <div>
          <h:graphicImage value="/seam/resource/captcha?#{captcha.id}"/>
        </div>
        <div>
          <h:outputLabel for="verifyCaptcha">Enter the above letters</h:outputLabel>
          <h:inputText id="verifyCaptcha" value="#{captcha.response}" required="true">
            <s:validate />
          </h:inputText>
          <div class="validationError"><h:message for="verifyCaptcha"/></div>
        </div>
      </div>
    <%

rules // helper rules for input

  input-of-required-property(|e)=
    if <page-var-access-to-class-prop-tuple;PropertyIsRequired> e
    then
      !"true"
    else
      !"false"
    end

  get-type-of-right-side-field-access:
    fa@FieldAccess(e, f) -> thetype
    where SimpleSort(thetype) := <type-of> fa

  page-var-access-to-class-prop-tuple :
    FieldAccess(e, f) -> (<get-type-of-right-side-field-access> e,f)


rules // output

  py-page-elem-to-code :
    TemplateCall("output",[e],[]) ->
    %>
      <h:outputText styleClass="output" value="<%= estring %>"/>
    <%
    where warn(|["underived output element"])
        ; estring := <arg-to-value-string> e

*/         
