module org/webdsl/dsl/to-py-gae/entity

imports
  libstrategolib
  libwebdsl-front

imports 
  org/webdsl/dsl/to-py-gae/-
  
strategies
  PyGenerateCode = py-entity-to-code; fail

  py-entity-to-code =
    ?EntityNoSuper(x, props, funcs)
    ; x_proxy := <concat-strings> [x, "Proxy"]
    ; if not(<SubClass> x) then
        e_super := py-exp|[ webdsl.db.Model ]|
      else
        e_super := py-exp|[ webdsl.polymodel.PolyModel ]|
      end
    ; <emit-python(|"data")> python*|[
        @partial class x(e_super): {
          pass;
        };
        x_proxy = webdsl.db.create_proxy_model(x);
      ]|
    ; <map(py-property-to-code(|x) <+ debug(!"Could not generate for property: "))> props
    ; <map(py-entity-function-to-code(|x) <+ debug(!"Could not generate for entity function: "))> funcs

  py-entity-to-code =
    ?Entity(x, super, props, funcs)
    ; with(id
      ; x_proxy := <concat-strings> [x, "Proxy"]
      ; e_super := <python-type> SimpleSort(super)
      ; <emit-python(|"data")> python*|[
          @partial class x(e_super): {
            pass;
          };
          x_proxy = webdsl.db.create_proxy_model(x);
        ]|
      ; <map(py-property-to-code(|x) <+ debug(!"Could not generate for property: "))> props
      ; <map(py-entity-function-to-code(|x) <+ debug(!"Could not generate for entity function: "))> funcs
      )

  py-entity-to-code =
    ?SessionEntity(x, props, funcs)
    ; X := <capitalize-string> x
    ; <py-entity-to-code> EntityNoSuper(X, props, funcs)

  py-property-to-code(|x_class) = // Simple property
    ?Property(x_prop, knd, srt@SimpleSort(_), annos)
    ; not(<fetch(?InverseAnno(_, _) <+ ?InverseSlaveAnno(_, _))> annos)
    ; not(<defined-java-type> srt)
    ; with(id
      ; if <elem> (SimpleAnno("id"), annos) then
          e_idprop := <concat-strings> ["'", x_prop, "'"]
          ; <emit-python(|"data")> python*|[ @partial class x_class(): { id_property = e_idprop; }; ]|
        end
      ; if <elem> (SimpleAnno("name"), annos) then
          <emit-python(|"data")> python*|[ 
            @partial
            class x_class(): { 
              @property
              def name(self): {
                return self.x_prop;
              };
            };
          ]|
        end
      ; e := <python-property-type> srt
      ; <emit-python(|"data")> python*|[ @partial class x_class(): { x_prop = e; }; ]|
      )

  py-property-to-code(|x_class) = // Simple reference property
    ?Property(x_prop, knd, srt@SimpleSort(s), annos)
    ; not(<fetch(?InverseAnno(_, _) <+ ?InverseSlaveAnno(_, _))> annos)
    ; <defined-java-type> srt
    ; with(id
      ; e_type := <concat-strings> ["'", s, "'"]
      ; if <InlineProperties> s then
          e := ListLiteral(<concat> [["'id'", "'name'"],
                           <map(\ str -> <concat-strings> ["'", str, "'"] \)> <bagof-InlineProperties> s])
        else
          e := py-exp|[ ['name', 'id'] ]|
        end
      ; e_propinline := <concat-strings> ["'", x_prop, "_inline'"]
      ; x_propid := <concat-strings> [x_prop, "_id"]
      ; e_prop := <concat-strings> ["'", x_prop, "'"]
      //; e_propcol := <concat-strings> ["'", x_prop, "_id_set'"]
      ; <emit-python(|"data")> python*|[ 
          @partial class x_class(): {
            x_prop = webdsl.db.PartiallyOneInlinedReferenceProperty(e_type ,  e, name=e_propinline);
            x_propid = webdsl.db.SimpleReferenceProperty(name=e_prop);
          };
        ]|
      )

  py-property-to-code(|x_class) = // many-to-one back reference
    ?Property(x_prop, knd, srt@SimpleSort(_), annos)
    ; <fetch(?InverseAnno(inverseent, inversefld) <+ ?InverseSlaveAnno(inverseent, inversefld))> annos
    ; with(id
      ; e := <python-property-type> srt
      ; stm* := <py-generate-backreference-property(|x_class, x_prop, inverseent, inversefld)>
      ; <emit-python(|"data")> python*|[ @partial class x_class(): { stm* }; ]|
      )

  py-property-to-code(|x_class) = // One-to-many with inverse
    ?prop@Property(x_prop, knd, GenericSort("Set", [SimpleSort(s)]), annos)
    ; <fetch(?InverseAnno(inverseent, inversefld) <+ ?InverseSlaveAnno(inverseent, inversefld))> annos
    ; SimpleSort(inverse_sort) := <TypeOfProperty> (inverseent, inversefld)
    ; with(id
      ; <emit-python(|"data")> <py-generate-many-property(|x_class, x_prop, s, "OneToManyDbQuerySet", "")>
      ; <py-generate-inverse-prop(|s, "")> prop
      )

  py-property-to-code(|x_class) = // Many-to-many no inverse
    ?prop@Property(x_prop, knd, GenericSort("Set", [SimpleSort(s)]), annos)
    ; not(<fetch(?InverseAnno(_, _) <+ ?InverseSlaveAnno(_, _))> annos)
    ; with(id
        ; <emit-python(|"data")> <py-generate-many-property(|x_class, x_prop, s, "ManyToManyDbQuerySet", "")>
        ; <py-generate-inverse-prop(|s, "Set")> prop
      )

  py-property-to-code(|x_class) = // Many-to-many with inverse
    ?prop@Property(x_prop, knd, GenericSort("Set", [SimpleSort(s)]), annos)
    ; <fetch(?InverseAnno(inverseent, inversefld) <+ ?InverseSlaveAnno(inverseent, inversefld))> annos
    ; GenericSort(_, _) := <TypeOfProperty> (inverseent, inversefld)
    ; with(id
        ; <emit-python(|"data")> <py-generate-many-property(|x_class, x_prop, s, "ManyToManyDbQuerySet", inversefld)>
        ; <py-generate-inverse-prop(|s, "Set")> prop
      )

  py-property-to-code(|x_class) =
    ?DerivedProperty(x_prop, knd, srt, annos, e)
    ; with(id
        ; e2 := <expression-to-python> e
        ; <emit-python(|"data")> python*|[
            @partial 
            class x_class(): { 
                @property
                def x_prop(self): {
                  return e2;
                };
            };
          ]|
      )

  py-generate-backreference-property(|x_class, x_prop, x_inverseent, x_inversefld) =
    x_inversepropinl := <concat-strings> ["inverse__", x_inverseent, "_", x_inversefld, "_inline"]
    ; x_inverseprop := <concat-strings> ["inverse__", x_inverseent, "_", x_inversefld]
    ; x_get := <concat-strings> ["get_", x_prop]
    ; x_set := <concat-strings> ["set_", x_prop]
    ; !python*|[
        def x_get(self): {
            return self.x_inversepropinl;
        };
        def x_set(self, value): {
            self.x_inversepropinl = value;
            self.x_inverseprop = value.id;
        };
        x_prop = property(x_get, x_set);
      ]|
/*
  py-generate-backreference-property(|x_class, x_prop, x_inverseent, x_inversefld) =
    x_inverseprop := <concat-strings> ["inverse__", x_inverseent, "_", x_inversefld]
    ; x_internalprop := <concat-strings> ["_", x_prop]
    ; x_countprop := <concat-strings> [x_prop, "_count"]
    ; x_get := <concat-strings> ["get_", x_prop]
    ; x_set := <concat-strings> ["set_", x_prop]
    ; !python*|[
        x_internalprop = None;
        def x_get(self): {
            if self.x_internalprop == None and self.x_inverseprop: {
                self.x_internalprop = x_inverseent.fetch_by_id(self.x_inverseprop);
            } else: {
                if self.x_internalprop == None: {
                  self.x_internalprop = x_inverseent();
                };
            };
            return self.x_internalprop;
        };
        def x_set(self, value): {
            self.x_inverseprop = value.id;
            self.x_internalprop = value;
        };
        x_prop = property(x_get, x_set);
      ]|
      */

  py-generate-many-property(|x_class, x_prop, sort, x_manyclass, x_declinvprop) =
    x_inverseprop := <concat-strings> ["'inverse__", x_class, "_", x_prop, "'"]
    ; x_internalprop := <concat-strings> ["_", x_prop]
    ; x_countprop := <concat-strings> [x_prop, "_count"]
    ; x_get := <concat-strings> ["get_", x_prop]
    ; x_set := <concat-strings> ["set_", x_prop]
    ; e_propstr := <concat-strings> ["'", x_prop, "'"]
    ; e_typestr := <concat-strings> ["'", sort, "'"]
    ; if "" := x_declinvprop then
        e_declinvprop := py-exp|[ None ]|
      else
        e_declinvprop := String(<concat-strings> ["'", x_declinvprop, "'"])
      end
    ; !python*|[ @partial class x_class(): {
        x_internalprop = None;

        def x_get(self): {
            if self.x_internalprop == None: {
                self._post_process_props.append(e_propstr);
                self.x_internalprop = webdsl.querylist.x_manyclass(self, e_typestr, x_inverseprop, self.id, self.x_countprop, e_declinvprop);
            };
            return self.x_internalprop;
        };
        def x_set(self, value): {
            for item in self.x_prop: {
                self.x_prop.remove(item);
            };
            for item in value: {
                self.x_prop.append(item);
            };
        };
        x_prop = property(x_get, x_set);
        x_countprop = db.IntegerProperty(default=0);
      }; ]|

  py-generate-inverse-prop(|x_ent, lst) =
    ?Property(x, knd, GenericSort("Set", [SimpleSort(invers_ent)]), annos)
    ; with(id
        ; x_prop := <concat-strings> ["inverse__", <ThisEntity>, "_", x]
        ; if <EntityIdType> <ThisEntity> then
            type2 := <EntityIdType> <ThisEntity>
          else
            type2 := SimpleSort("Int")
          end
        ; if "Set" := lst then
            type := GenericSort("Set", [type2])
          else // Not a collection, also add an inline property
            type := type2
            ; x_propinline := <concat-strings> [x_prop, "_inline"]
            ; e_inlinetype := <python-property-type> SimpleSort(<ThisEntity>)
            ; <emit-python(|"data")> python*|[ @partial class x_ent(): { x_propinline = e_inlinetype; }; ]|
          end
        ; e_type := <python-property-type> type
        ; <emit-python(|"data")> python*|[ @partial class x_ent(): { x_prop = e_type; }; ]|
        )

  py-entity-function-to-code(|x_ent) =
    ?Function(x_fun, farg*, _, Block(stat*)) 
    ; e* := [py-exp|[ self ]| | <map(\ Arg(x, _) -> py-exp|[ x ]| \)> farg*]
    ; {| InFunction
       : rules ( InFunction := True() )
       ; stm* := <statements-to-python> stat*
       |}
    ; <emit-python(|"data")> python*|[
        @partial 
        class x_ent(): { 
          def x_fun(e*): {
            import global_variable;
            stm*
          };
        }; ]|

