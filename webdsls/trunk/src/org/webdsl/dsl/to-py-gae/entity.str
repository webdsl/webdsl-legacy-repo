module org/webdsl/dsl/to-py-gae/entity

imports
  libstrategolib
  libwebdsl-front

imports 
  org/webdsl/dsl/to-py-gae/-
  

/*
strategies

  py-define-all-additional-props =
    alltd(py-define-additional-props)

  py-define-additional-props =
    (?Entity(x, sup, props, funcs) <+ ?EntityNoSuper(x, props, funcs))
    ; with({| ThisEntity
             : rules ( ThisEntity := x )
             ; <map(try(py-define-additional-props))> props
             |})

*/
rules

  py-emit-inverse-prop(|x_ent, lst) =
    ?Property(x, knd, GenericSort("Set", [SimpleSort(invers_ent)]), annos)
    ; with(id
        ; x_prop := <concat-strings> ["inverse__", <ThisEntity>, "_", x]
        ; <debug> <dr-all-keys(|"EntityIdType")>
        ; if <EntityIdType> <ThisEntity> then
            type2 := <EntityIdType> <ThisEntity>
          else
            type2 := SimpleSort("Int")
          end
        ; if "Set" := lst then
            type := GenericSort("Set", [type2])
          else
            type := type2
          end
        ; e_type := <python-property-type> type
        ; <emit-python(|"data")> python*|[ @partial class x_ent(webdsl.db.Model): { x_prop = e_type; }; ]|
        )

  py-remove-pass :
    [a|[b|k]] -> k2
    where k2 := <remove-all(?python|[ pass; ]|)> [a|[b|k]]
        ; not([a|[b|k]] := k2)

strategies
  PyGenerateCode = py-entity-to-code; fail

  py-entity-to-code =
    ?EntityNoSuper(x, props, _)
    ; <emit-python(|"data")> python*|[ @partial class x(webdsl.db.Model): { pass; }; ]|
    ; <map(py-property-to-code(|x) <+ debug(!"Could not generate for property: "))> props

  py-property-to-code(|x_class) =
    ?Property(x_prop, knd, srt@SimpleSort(_), annos)
    ; not(<fetch(?InverseAnno(_, _) <+ ?InverseSlaveAnno(_, _))> annos)
    ; with(id
      ; if <elem> (SimpleAnno("id"), annos) then
          e_idprop := <concat-strings> ["'", x_prop, "'"]
          ; <emit-python(|"data")> python*|[ @partial class x_class(webdsl.db.Model): { id_property = e_idprop; }; ]|
        end
      ; e := <python-property-type> srt
      ; <emit-python(|"data")> python*|[ @partial class x_class(webdsl.db.Model): { x_prop = e; }; ]|
      )

  py-property-to-code(|x_class) = // many-to-one back reference
    ?Property(x_prop, knd, srt@SimpleSort(_), annos)
    ; <fetch(?InverseAnno(inverseent, inversefld) <+ ?InverseSlaveAnno(inverseent, inversefld))> annos
    ; with(id
      ; debug(!"Translating property inverse: ")
      ; e := <python-property-type> srt
      ; stm* := <py-generate-backreference-property(|x_class, x_prop, inverseent, inversefld)>
      ; <emit-python(|"data")> python*|[ @partial class x_class(webdsl.db.Model): { stm* }; ]|
      )

  py-property-to-code(|x_class) = // One-to-many with inverse
    ?prop@Property(x_prop, knd, GenericSort("Set", [SimpleSort(s)]), annos)
    ; <fetch(?InverseAnno(inverseent, inversefld) <+ ?InverseSlaveAnno(inverseent, inversefld))> annos
    ; SimpleSort(inverse_sort) := <TypeOfProperty> (inverseent, inversefld)
    ; with(id
      ; info(|["Translating one-to-many no inverse property: ", x_class, ".", x_prop])
      ; <emit-python(|"data")> <py-generate-many-property(|x_class, x_prop, s, "OneToManyDbQuerySet", "")>
      ; <py-emit-inverse-prop(|s, "")> prop
      )

  py-property-to-code(|x_class) = // Many-to-many no inverse
    ?prop@Property(x_prop, knd, GenericSort("Set", [SimpleSort(s)]), annos)
    ; not(<fetch(?InverseAnno(_, _) <+ ?InverseSlaveAnno(_, _))> annos)
    ; with(id
        ; info(|["Translating many-to-many no inverse property: ", x_class, ".", x_prop])
        ; <emit-python(|"data")> <py-generate-many-property(|x_class, x_prop, s, "ManyToManyDbQuerySet", "")>
        ; <py-emit-inverse-prop(|s, "Set")> prop
      )

  py-property-to-code(|x_class) = // Many-to-many with inverse
    ?prop@Property(x_prop, knd, GenericSort("Set", [SimpleSort(s)]), annos)
    ; <fetch(?InverseAnno(inverseent, inversefld) <+ ?InverseSlaveAnno(inverseent, inversefld))> annos
    ; GenericSort(_, _) := <TypeOfProperty> (inverseent, inversefld)
    ; with(id
        ; info(|["Translating many-to-many with inverse property: ", x_class, ".", x_prop])
        ; <emit-python(|"data")> <py-generate-many-property(|x_class, x_prop, s, "ManyToManyDbQuerySet", inversefld)>
        ; <py-emit-inverse-prop(|s, "Set")> prop
      )


  py-generate-backreference-property(|x_class, x_prop, x_inverseent, x_inversefld) =
    x_inverseprop := <concat-strings> ["inverse__", x_inverseent, "_", x_inversefld]
    ; x_internalprop := <concat-strings> ["_", x_prop]
    ; x_countprop := <concat-strings> [x_prop, "_count"]
    ; x_get := <concat-strings> ["get_", x_prop]
    ; x_set := <concat-strings> ["set_", x_prop]
    ; !python*|[
        x_internalprop = None;
        def x_get(self): {
            if self.x_internalprop == None: {
                self.x_internalprop = x_inverseent.fetch_by_id(self.x_inverseprop);
            };
            return self.x_internalprop;
        };
        def x_set(self, value): {
            self.x_inverseprop = value.id;
            self.x_internalprop = value;
        };
        x_prop = property(x_get, x_set);
      ]|

  py-generate-many-property(|x_class, x_prop, sort, x_manyclass, x_declinvprop) =
    x_inverseprop := <concat-strings> ["'inverse__", x_class, "_", x_prop, "'"]
    ; x_internalprop := <concat-strings> ["_", x_prop]
    ; x_countprop := <concat-strings> [x_prop, "_count"]
    ; x_get := <concat-strings> ["get_", x_prop]
    ; x_set := <concat-strings> ["set_", x_prop]
    ; e_propstr := <concat-strings> ["'", x_prop, "'"]
    ; e_typestr := <concat-strings> ["'", sort, "'"]
    ; if "" := x_declinvprop then
        e_declinvprop := py-exp|[ None ]|
      else
        e_declinvprop := String(<concat-strings> ["'", x_declinvprop, "'"])
      end
    ; !python*|[ @partial class x_class(webdsl.db.Model): {
        x_internalprop = None;

        def x_get(self): {
            if self.x_internalprop == None: {
                self._post_process_props.append(e_propstr);
                self.x_internalprop = webdsl.querylist.x_manyclass(self, e_typestr, x_inverseprop, self.id, self.x_countprop, e_declinvprop);
            };
            return self.x_internalprop;
        };
        def x_set(self, value): {
            # TODO: Remove old items
            for item in value: {
                self.x_prop.append(item);
            };
        };
        x_prop = property(x_get, x_set);
        x_countprop = db.IntegerProperty(default=0);
      }; ]|
