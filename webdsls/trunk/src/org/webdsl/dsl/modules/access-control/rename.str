module org/webdsl/dsl/modules/access-control/rename

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/modules/access-control/-

rules 

  rename :
    AccessControlRule(checktype,matchstring,fargs1,check1,acrules1) -> AccessControlRule(checktype,matchstring,fargs2,check2,acrules2) 
    where {| RenameVar
           : fargs2 := <map(rename)> fargs1
           ; check2 := <rename-all> check1
           ; acrules2 := <rename-all> acrules1
           |}
  
  rename :
    Predicate(x, args1, b1) -> <declare-global-pred> Predicate(x, args2, b2)
    where {| RenameVar
           : args2 := <map(rename)> args1
           ; b2 := <rename-all> b1
           |}
  declare-global-pred =
    ?Predicate(f, args, b)
    ; where(<declare-global-func> Function(f, args, SimpleSort("Bool"), b))
    ; rules (IsPredicate : (f,args) //should use types of args
             IsPredicate : f       )//remove
    
    
  rename : 
    AccessControlPrincipal(x_ident,props) -> AccessControlPrincipal(x_ident,props)
    where <declare-entity> def |[
            session securityContext {
              principal   -> x_ident 
            }
          ]|
        ; <declare-global-pred> def |[
            predicate loggedIn()
            {
              securityContext.principal != null
            }
          ]|
        ; rules (
            AccessControlEnabled := True()
          )



  rename =
    ?webdsl|[ access control policy pexp ]|
  ; rules(AC-Policy-Expression := pexp)

  ///declare-definition:
   // AccessControlDefinition(name,defs) -> AccessControlDefinition(name,defs)
   // where <alltd(declare-definition)> defs // declare-definition is done with alltd, which doesn't go into the tree after a match, explicitly search deeper
        
  // declare-ac-principal :
  //  AccessControlPrincipal(ident,props) -> AccessControlPrincipal(ident,props)
  //nothing to declare, gets translated to securityContext which should be declared
 
 // declare-ac-rule = 
 //   ?AccessControlRule(_,_,_,_,_)
    
 
  rename :
    AccessControlPointcut(pname,args1,b1) -> <declare-ac-pointcut> AccessControlPointcut(pname,args2,b2)
    where {| RenameVar
           : args2 := <map(rename)> args1
           ; b2 := <alltd(rename-pc-elem-idents)> b1
          |}
  rename-pc-elem-idents :
    x -> y
    where Var(y) := <RenameVar> Var(x)    
    
  declare-ac-pointcut:
    AccessControlPointcut(pname,fa,elems) -> AccessControlPointcut(pname,fa,elems) 
    where 
         {| pointcut-formal-argument :
             <filter(\ ar@Arg(ident,thesort)->ar where rules (pointcut-formal-argument : ident -> ar) \)> fa
           ; t1* := <map(?Arg(_,<id>))> fa
           ; <filter(declare-ac-pointcut-element(|pname,t1*))> elems
           ; rules(  MatchesAccessControlPointcut : (x_ident, t1*) )
         |}  
   
  declare-ac-pointcut-element(|pname,fa):
    AccessControlPointcutElement(ident,matchident,faidents,wc) -> AccessControlPointcutElement(ident,matchident,faidents,wc)
    where faidentsargs := MatchArgs(<map(pointcut-formal-argument)> faidents,wc)
        ; newPointcutList := <concat> [<AccessControlPointcuts<+![]> (pname,fa),[(ident,matchident,faidentsargs)]]
        ; rules(
            AccessControlPointcuts: (pname,fa) -> newPointcutList
          )  
/*
          
  // uses: declare-global-funcs = ?fu@Function(f, args, s, b) ...
  declare-definition:
    p@Predicate(f,args,b) -> p//<declare-global-funcs> Function(f, args, SimpleSort("Bool"), b)
    where rules (IsPredicate : (f,args)
                 IsPredicate : f ) //TODO remove need for this one
  */        