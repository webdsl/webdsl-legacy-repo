/**

 Security rules for WebDSL

*/

module org/webdsl/dsl/modules/access-control/access-control

imports
  libstrategolib
  //Java-15
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/modules/access-control/-

rules
  process-access-control=
    if AccessControlEnabled then
      add-access-denied-page
      ; desugar-top
    
      ; alltd(new-generate-access-control-rules-checks)

      //topdown that does all the global checks, nested checks are handled when normal checks are applied
      ; alltd( let f(s) = foldl(s <+ Snd) in fold-WeaveAccessControlPageOrTemplate(f) end) //doesn't apply to templates in page definitions
      ; alltd( let f(s) = foldl(s <+ Snd) in fold-WeaveAccessControlAction(f) end)
        //hack to cope with multiple function rules matching same functioncall, otherwise only first will be applied because of transformation
         /*;  alltd({| func-check-group, func-check-exp:
            let f(s) = foldl(s <+ Snd)
             in fold-WeaveAccessControlFunction(f) end
                  ; repeat({x:?x;!ACFunctionCheck(<once-func-check-group>,<once-func-check-exp>,x)}) 
                  |} )
           */
         
      //should be done at least before template expansion
      ; alltd(   \page@def|[ define page x_ident(farg*){ elem* } ]| ->page  \//ignore the defs inside pages
              <+ process-template-checks)  //TODO embed proces actions in order to get inference
              
      //problem: template actions are handled earlier and this removes the acactioncheck, after template expansion the page actions are handled (which the template action has become) and since there is no longer an acactioncheck it becomes a false check around the earlier added template check
      //solution: do the page actions before template expansion too
      ; alltd(process-page-actions<+process-template-actions)
      

      
      
      ; alltd(remove-all(   {x_name,acdef*: ?webdsl|[ access control rules x_name acdef* ]| }
                         <+ {pexp:          ?webdsl|[ access control policy pexp         ]| } ))
      
      //TODO ; where(warn-for-unused-rules)
    end
    
  new-generate-access-control-rules-checks=
    ?webdsl|[ access control rules x_groupname acdef* ]|
  ; where( <map(   create-page-rule(|x_groupname) 
                <+ create-template-rule(|x_groupname)
                <+ create-action-rule(|x_groupname,[],[])
              //  <+ create-function-rule(|x_groupname)
                <+ ?AccessControlPointcut(_,_,_)
                <+ {x:?x; !["error: access control definition unknown: ",x];debug}
                   )> acdef*
    )
                  
  get-formarg-from-matcharg:
    MatchArgs(formarg,wc)->formarg
  
  get-varname-from-formarg:
    Arg(ident,srt) -> Var(ident)
  
  match-arguments=
    ?(fargrule,farg*)
    ; newfargs := <?MatchArgs(args,wc);!args> fargrule
    ; getWC := <?MatchArgs(args,wc);!wc> fargrule
    ; if getWC := None() 
      then newfarg* := farg*
      else newfarg* := <take(<length> newfargs)> farg* end
    ; <zip(extract-sorts;eq)> (newfargs,newfarg*)
  
  extract-sorts:
    (Arg(ident1,thesort1),Arg(ident2,thesort2)) -> (thesort1,thesort2)
    
  match-names:
    tup@(matchstring,name) -> tup
    where
    if not(matchstring := "*")
    then
        leftmatcher := <explode-string;reverse;drop-until(?'*');drop-while(?'*');reverse> matchstring
        ; if leftmatcher := [] 
          then // no * in the name, explicit match
               matchstring := name
          else //left-match: Succeeds if the first list of terms starts with the second list of terms.
               //            Returns the suffix of the first list that is not matched.
               <left-match> (<explode-string> name,leftmatcher)
          end
    end    
    
    
  create-page-rule(|x_rulegroup):
    r@acrule|[ rule page x_pagematchname(margs) { e acrule* } ]| -> r
    where x_predname := <newname> "genpagepredicate"
        ; farg2* := <get-formarg-from-matcharg> margs
        ; specifiedargcount := <length> farg2*
        //null checks are added to predicates automatically
        ; <emit-webdsl-code> def|[ predicate x_predname(farg2*) { e } ]|
        //bind for more efficient dr retrieval, doesn't seem to work like this
        //; if <explode-string;not(elem('*'))> x_pagematchname then x_pagename:=x_pagematchname end
        ; rules( WeaveAccessControlPageOrTemplate :+
                   def|[ define page x_pagename(farg*) { elem* } ]| -> 
                   def|[ define page x_pagename(farg*) { acpagecheck (x_rulegroup,x_predname(e*))
                                                         elem1* } ]|
                   where <match-names> (x_pagematchname,x_pagename)
                       ; <match-arguments> (margs,farg*)
                       ; e* := <map(get-varname-from-formarg);take(|specifiedargcount)> farg*
                       //nested actions
                       ; {| WeaveAccessControlAction:
                            <map(create-action-rule(|x_rulegroup,farg2*,<map(try(\Var(nm)->ExternalScopeVar(nm)\))>e*))> acrule*
                            // alltd is enough because global checks are handled already in
                            // the normal traversal, and deeper nested checks are handled in
                            // the parent checks again
                            ; elem1* := <alltd( let f(s) = foldl(s <+ Snd) in fold-WeaveAccessControlAction(f) end)> elem*
                          |}  
               )
          
  create-action-rule(|x_rulegroup,farg7*,nestingvars):
    r@acrule|[ rule action x_actionmatchname(margs) { e acrule* } ]| -> r
    where x_predname := <newname> "genactionpredicate"
        ; farg1* := <get-formarg-from-matcharg> margs
        ; specifiedargcount := <length> farg1*
        ; (farg8*,e1) := <substitute-parent-vars-1> (farg7*,e)
        ; farg2* := [farg8*,farg1*] //special: * at end of name inlines contents in list
        ; <emit-webdsl-code> def|[ predicate x_predname(farg2*) { e1 } ]|
        ; rules(   
            WeaveAccessControlAction :+
              elem|[ action x_actionname(farg*) { stat* } ]| -> 
              elem|[ action x_actionname(farg*) { acactioncheck(x_rulegroup,x_predname(e*));
                                                  stat* } ]|
              where <match-names> (x_actionmatchname,x_actionname)
                  ; <match-arguments> (margs,farg*)
                  //take length of specified arguments, these became the predicates formal arguments
                  ; e* := <concat> [nestingvars,<map(get-varname-from-formarg);take(|specifiedargcount)> farg*]
          )
           
  create-template-rule(|x_rulegroup):
    r@acrule|[ rule template x_templatematchname(margs) { e acrule* } ]| -> r
    where x_predname := <newname> "gentemplatepredicate"
        ; farg2* := <get-formarg-from-matcharg> margs
        ; specifiedargcount := <length> farg2*
        //null checks are added to predicates automatically
        ; <emit-webdsl-code> def|[ predicate x_predname(farg2*) { e } ]|
        //bind for more efficient dr retrieval, doesn't seem to work like this
        //; if <explode-string;not(elem('*'))> x_templatematchname then x_templatename:=x_templatematchname end
        ; rules( WeaveAccessControlPageOrTemplate :+
                   def|[ define x_templatename(farg*) { elem*  } ]| -> 
                   def|[ define x_templatename(farg*) { actemplatecheck (x_rulegroup,x_predname(e*))
                                                        elem1* } ]|
                   where <match-names> (x_templatematchname,x_templatename)
                       ; <match-arguments> (margs,farg*)
                       ; e* := <map(get-varname-from-formarg);take(|specifiedargcount)> farg*
                       //nested actions
                       ; {| WeaveAccessControlAction:
                            <map(create-action-rule(|x_rulegroup,farg2*,<map(try(\Var(nm)->ExternalScopeVar(nm)\))>e*))> acrule*
                            // alltd is enough because global checks are handled already in
                            // the normal traversal, and deeper nested checks are handled in
                            // the parent checks again
                            ; elem1* := <alltd( let f(s) = foldl(s <+ Snd) in fold-WeaveAccessControlAction(f) end)> elem*
                          |}
               )
 /*
  create-function-rule(|x_rulegroup):
    r@acrule|[ rule function x_functionmatchname(margs) { e acrule* } ]| -> r
    where x_predname := <newname> "genfunctionpredicate"
        ; farg2* := <get-formarg-from-matcharg> margs
        ; specifiedargcount := <length> farg2*
        //null checks are added to predicates automatically
        ; <Desugar;emit-webdsl-code> def|[ predicate x_predname(farg2*) { e } ]|
        //bind for more efficient dr retrieval, doesn't seem to work like this
        //; if <explode-string;not(elem('*'))> x_templatematchname then x_templatename:=x_templatematchname end
        ; rules( WeaveAccessControlFunction :+
                   |[  x_functionname( e1* )  ]| -> 
                   |[  x_functionname( e1* )  ]|
                   where <IsGlobalFunction;not(IsPredicate)> x_functionname//TODO fix overloading
                       ; <match-names> (x_functionmatchname,x_functionname)
                       ; farg* := <GlobalFunctionArgs> x_functionname
                       ; <match-arguments> (margs,farg*)
                       ; e2* := <map(get-varname-from-formarg);take(|specifiedargcount)> farg*
                       ; rules (func-check-group :+= x_rulegroup
                                func-check-exp   :+= |[x_predname(e2*)]| )
                       ; <debug> ["function rule applied",x_functionmatchname, x_functionname]
               )
        ; <debug> ["function rule created: ",x_functionmatchname," predicate: ",x_predname]    
  */
  add-access-denied-page=
    ?webdsl |[ application qid sec* ]| 
    ; where(
      <emit-webdsl-section> webdsl |[ 
                              access control rules anonymous
                                rule page accessDenied()
                                {
                                  true
                                }
                            ]|
    ; <emit-webdsl-section> webdsl |[ 
                              section access denied page.
                                define page accessDenied()
                                {
                                  title("Access Denied")
                                  text("Access Denied: ")
                                  navigate(home()) { "return to home page" }
                                }

                            ]|)

  
//---------------------------------------------------------------------------  


//  warn-for-unused-rules=
//    !<All-AC-Rules<+![]>
//    ; map(try(check-usage-of-rule))
//  check-usage-of-rule=
//    ?acr@AccessControlRule(checktype,matchstring,fargs,check,acrules)
//    ; !(acr,<Used-AC-Rules<+![]>)
//    ; not(elem)
//   ; !AccessControlRule(checktype,matchstring,fargs,check,[])//don't show nested rules, that gives too much information
//    ; pp-webdsl-to-string
//    ; warn(|["warning: in access control rules: rule not used: "])
 /////////////////// 
 

//  generate-security-checks-from-target-var:
//    Arg($ident,_) -> |[ acdecision.$ident := $ident; ]|
