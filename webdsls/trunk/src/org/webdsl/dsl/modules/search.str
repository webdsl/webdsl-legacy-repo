module org/webdsl/dsl/modules/search

imports
  libstrategolib
  libwebdsl-front

strategies

  extend-entity-declare = 
    ?Entity(x_class, x_super, entbodydecs)
    ; where(<IndexedEntity> x_class)
    ; x_fun := <concat-strings> ["search", x_class]
    ; <declare-static-function(|x_class,x_fun)> fun |[ function x_fun(query : String) : List<x_class> {} ]|
    ; <declare-static-function(|x_class,x_fun)> fun |[ function x_fun(query : String, limit : Int) : List<x_class> {} ]|
    ; <declare-static-function(|x_class,x_fun)> fun |[ function x_fun(query : String, limit : Int, offset : Int) : List<x_class> {} ]|
    ; fail

rules

	add-backend-annotation =
			?ent
		; where(
					(x_class, body) := <get-entity-def> ent
				; <has-no-anno(?IndexedAnno(_))> ent
				;	props := <all-properties> x_class
				; searchable := <filter(searchable-property-to-name); uniq> props
				; not([] := searchable)
			)
		; add-anno(|IndexedAnno(searchable))
		
	searchable-property-to-name :
    Property(name, _, _, anno*) -> name
    where not([] := <filter(?SimpleAnno("searchable"))> anno*)

  searchable-property-to-name :
    DerivedProperty(name, _, _, anno*, _) -> name
    where not([] := <filter(?SimpleAnno("searchable"))> anno*)
