module org/webdsl/dsl/modules/search

imports
  libstrategolib
  libwebdsl-front
  org/webdsl/dsl/languages/search/desugar
  org/webdsl/dsl/languages/search/declare

strategies

  // Do after normal declare; we now know whether there is a searchable property is an extend entity
  declare-override = all-keys-EntDecl; filter(declare-search-functions); fail

  declare-search-functions: x_class -> x_class
    where <IndexedEntity> x_class
    with  x_fun := <concat-strings> ["search", x_class]
        ; <declare-static-function(|x_class,x_fun)> fun |[ function x_fun(query : String) : List<x_class> {} ]|
        ; <declare-static-function(|x_class,x_fun)> fun |[ function x_fun(query : String, limit : Int) : List<x_class> {} ]|
        ; <declare-static-function(|x_class,x_fun)> fun |[ function x_fun(query : String, limit : Int, offset : Int) : List<x_class> {} ]|
        ; <declare-native-search-query-class> x_class


rules

    add-backend-annotation =
            ?ent
        ; where(
                  (x_class, body) := <get-entity-def> ent
                ; <has-no-anno(?IndexedAnno(_,_,_,_,_,_,_))> ent
                   ; props := <get-searchable-props> x_class
                ; searchfields := <filter(searchable-property-to-name(|x_class)); flatten-list; uniq> props
                ; not([] := searchfields)
                ; untokenizedfields := <bagof-UntokenizedFields;uniq> x_class
                ; spellcheckfields := <bagof-SpellCheckFields;uniq> x_class
                ; autocompletefields := <bagof-AutoCompleteFields;uniq> x_class
                ; lucenesorttypes := <map(fieldname-to-java-type-name(|x_class))> untokenizedfields
                  //if no default search fields are defined, search on all search fields by default
                ; defaultsearchfields_bydef := <bagof-DefaultSearchFields; uniq> x_class
                ; if(<?[]>defaultsearchfields_bydef)
                  then defaultsearchfields := searchfields
                  else defaultsearchfields := defaultsearchfields_bydef end
                ; dualanalyzerfields := <bagof-DualAnalyzerFields;uniq> x_class
            )
        ; add-anno(|IndexedAnno(searchfields, untokenizedfields, lucenesorttypes, spellcheckfields, autocompletefields, defaultsearchfields, dualanalyzerfields))
        ; if (<SearchNamespaceForEnt> x_class) then
              add-anno(|SearchNamespaceAnno(<SearchNamespaceForEnt> x_class)) end
        ; if (<?x_class> "dummy_webdsl_entity") then
          add-anno(|AnalyzersInUseAnno(
                <uniq> ["default" | <bagof-AnalyzerInUse>[]]
                ))
          end


    get-searchable-props:
      entityName -> result
      where myProps := <bagof-EntityNameToSearchableProps; flatten-list> entityName
      ; if (not("Entity" := <Extends> entityName))
        then result := <concat> [<Extends; get-searchable-props> entityName, myProps]
        else result := myProps end


    fieldname-to-java-type-name(|x_class):
        fieldname -> lst
        with lst := <fieldNameToType; to-java-type-name <+ to-default-java-type-name> (x_class, fieldname)

    record-untokenized-fields(|x_class):
        s@SearchableAnno(sa-args) -> field-name
        where <fetch(?SA-Argument("analyzer", analyzer-name))> sa-args
        ; <?"no" <+ ?"null" <+ ?"none"> analyzer-name
        ; field-name := <name-from-searchable-anno> s
        ; <record-untokenized-field>(x_class, field-name)

    record-untokenized-field:
        a@(x_class, field-name) -> a
        with rules(UntokenizedFields :+ x_class -> field-name)

    record-dual-analyzer-fields(|x_class):
        s@SearchableAnno(sa-args) -> s
        where <fetch(?SA-Argument("analyzer", analyzer-name))> sa-args
        ; <IsDualAnalyzer> analyzer-name
        ; field-name := <name-from-searchable-anno> s
        ; <record-dual-analyzer-field>(x_class, (field-name, analyzer-name))

    record-dual-analyzer-field:
        a@(x_class, (field-name, analyzer-name)) -> a
        with rules(DualAnalyzerFields :+ x_class -> (field-name, analyzer-name))

    record-default-search-fields(|x_class):
        s@SearchableAnno(sa-args) -> s
        where <fetch(?DefaultSF-Argument())> sa-args
        ; field-name := <name-from-searchable-anno> s
        ; <record-default-search-field>(x_class, field-name)

    record-default-search-field:
        a@(x_class, field-name) -> a
        with rules(DefaultSearchFields :+ x_class -> field-name)

    record-spellcheck-fields(|x_class):
        s@SearchableAnno(sa-args) -> s
        where <fetch(?Spellcheck-Argument())> sa-args
        ; field-name := <name-from-searchable-anno> s
        ; <record-spellcheck-field>(x_class, field-name)

    record-spellcheck-field:
        a@(x_class, field-name) -> a
        with rules(SpellCheckFields :+ x_class -> field-name)

    record-autocomplete-fields(|x_class):
        s@SearchableAnno(sa-args) -> s
        where <fetch(?Autocomplete-Argument())> sa-args
        ; field-name := <name-from-searchable-anno> s
        ; <record-autocomplete-field>(x_class, field-name)

    record-autocomplete-field:
        a@(x_class, field-name) -> a
        with rules(AutoCompleteFields :+ x_class -> field-name)

    record-field-name-to-type-embedded(|x_class, embedded_type):
        q@(fieldName, embedded_fieldName) -> q
        with type := <fieldNameToType> (embedded_type, fieldName)
        ; <record-field-name-to-type(|x_class,type)> embedded_fieldName

    searchable-property-to-name(|x_class) :
        Property(name, propkind, srt, anno*) -> names
        where not (<?Ref()<+?Comp() > propkind)
        ; searchable-annos := <filter(?SearchableAnno(_))> anno*
        ; not(?[])
        with names := <map(name-from-searchable-anno)> searchable-annos
        ; untokenizedFields := <filter(record-untokenized-fields(|x_class))> searchable-annos
        ; tp := <srt-to-type> srt
        ; <map(record-field-name-to-type(|x_class, tp))> untokenizedFields
        ; <map(
              try(record-spellcheck-fields(|x_class));
              try(record-autocomplete-fields(|x_class));
              try(record-default-search-fields(|x_class));
              try(record-dual-analyzer-fields(|x_class))
          )> searchable-annos

    record-field-name-to-type(|x_class,type) :
        fieldName -> []
        with rules( fieldNameToType :+ (x_class, fieldName) -> type)

    searchable-property-to-name(|x_class) :
        p@Property(_, propkind, srt, anno*) -> embeddedNames
        where (<?Ref()<+?Comp() > propkind
        ; searchable-annos := <property-to-searchable-annos> p
        ; not(?[]))
        with  embeddedNames := <searchable-embedded-property-to-name(|x_class); flatten-list> p

    searchable-embedded-property-to-name(|x_class, level) :
        prop -> embeddedNames
        where searchable-annos := <property-to-searchable-annos> prop
        ; embeddedNames := <map(searchable-anno-to-embedded-names(|x_class, level))> searchable-annos

    searchable-embedded-property-to-name(|x_class) :
        prop -> embeddedNames
        where searchable-annos := <property-to-searchable-annos> prop
        ; embeddedNames := <map(?sa@SearchableAnno(args); level:= <embedded-depth> args; !sa; searchable-anno-to-embedded-names(|x_class, level) )> searchable-annos

    property-to-searchable-annos:    Property(_,_,_,anno*) -> <filter(?SearchableAnno(_))> anno*
    property-to-searchable-annos:    DerivedProperty(_,_,_, anno*, _) -> <filter(?SearchableAnno(_))> anno*
    embedded-depth = fetch(?SA-Argument("depth", depth)); !depth; string-to-int

    searchable-anno-to-embedded-names(|x_class, lvl):
        s@SearchableAnno(args) -> embeddedNames
        with
          <fetch(?SA-Argument("subclass", embeddedType))> args
        ; <fetch(?SA-Argument("name", name))> args
        ; embeddedSearchableProps := <get-searchable-props> embeddedType
        ; embeddedSimple := <filter(is-simple-prop); filter(searchable-property-to-name(|embeddedType)); flatten-list; uniq> embeddedSearchableProps
        ; level := <dec> lvl
        ; if(<gt>(level, 0)) then
              embeddedMultiLevel := <filter(not(is-simple-prop); searchable-embedded-property-to-name(|embeddedType, level)); flatten-list; uniq> embeddedSearchableProps
            ; embeddedSearchable := <concat> [embeddedSimple, embeddedMultiLevel]
          else
              embeddedSearchable := embeddedSimple
          end
        ; embeddedNames := <map(embedded-name(|name))> embeddedSearchable
        ; embeddedUntokenizedFields := <bagof-UntokenizedFields; map(embedded-name(|name))> embeddedType
        ; <map(<record-untokenized-field>(x_class, <id>))> embeddedUntokenizedFields
        ; embeddedSpellcheckFields := <bagof-SpellCheckFields; map(embedded-name(|name))> embeddedType
        ; <map(<record-spellcheck-field>(x_class, <id>))> embeddedSpellcheckFields
        ; embeddedAutocompleteFields := <bagof-AutoCompleteFields; map(embedded-name(|name))> embeddedType
        ; <map(<record-autocomplete-field>(x_class, <id>))> embeddedAutocompleteFields
        ; embeddedDualAnalyzerFields := <bagof-DualAnalyzerFields; map(embedded-name-dual-analyzer(|name))> embeddedType
        ; <map(<record-dual-analyzer-field>(x_class, <id>))> embeddedDualAnalyzerFields
        ; <zip(record-field-name-to-type-embedded(|x_class,embeddedType))> ( <bagof-UntokenizedFields> embeddedType , embeddedUntokenizedFields )
        ; if(<fetch(?DefaultSF-Argument())> args) then
           embeddedDefaultSearchFields := <bagof-DefaultSearchFields; uniq; map(embedded-name(|name))> embeddedType
         ; <map(<record-default-search-field>(x_class, <id>))> embeddedDefaultSearchFields
          end



      searchable-property-to-name(|x_class) :
        DerivedProperty(name, propkind, srt, anno*, _) -> names
        where not (<?Ref()<+?Comp() > propkind)
        ; searchable-annos := <filter(?SearchableAnno(_))> anno*
        ; not(?[])
        with names := <map(name-from-searchable-anno)> searchable-annos
        ; untokenizedFields := <filter(record-untokenized-fields(|x_class))> searchable-annos
        ; tp := <srt-to-type> srt
        ; <map(record-field-name-to-type(|x_class,tp))> untokenizedFields
        ; <map(
              try(record-spellcheck-fields(|x_class));
              try(record-autocomplete-fields(|x_class));
              try(record-default-search-fields(|x_class));
              try(record-dual-analyzer-fields(|x_class))
          )> searchable-annos

      searchable-property-to-name(|x_class) :
        p@DerivedProperty(name, propkind, srt, anno*, _) -> embeddedNames
        where (<?Ref()<+?Comp() > propkind
        ; searchable-annos := <property-to-searchable-annos> p
        ; not(?[]))
        with  embeddedNames := <searchable-embedded-property-to-name(|x_class); flatten-list> p

    name-from-searchable-anno :
        SearchableAnno(sa-args) -> field-name
        with <fetch(?SA-Argument("name", field-name))> sa-args

  to-java-type-name: "Int" -> "Integer"
  to-java-type-name: "Float" -> "Float"
  to-java-type-name: "WikiText" -> "String"
  to-java-type-name: "Date" -> "Date"
  to-java-type-name: "DateTime" -> "Date"
  to-java-type-name: "Time" -> "Date"
  to-default-java-type-name: _ -> "String"


  is-simple-prop :
      p@Property(_, propkind, _, _) -> p
      where <?Simple()> propkind

  is-simple-prop :
      p@PropertyNoAnno(_, propkind, _) -> p
      where <?Simple()> propkind

  is-simple-prop :
      p@DerivedProperty(_, propkind, _, _, _) -> p
      where <?Simple()> propkind

  is-simple-prop :
      p@DerivedPropertyNoAnno(_, propkind, _, _) -> p
      where <?Simple()> propkind

  srt-to-type:
      GenericSort(_,[SimpleSort(type)]) -> type

  srt-to-type:
      SimpleSort(type) -> type


  embedded-name(|prefix) :
  fieldName -> <concat-strings> [prefix, ".", fieldName]

  embedded-name-dual-analyzer(|prefix) :
  (fieldName, analyzer-name) -> (<concat-strings> [prefix, ".", fieldName], analyzer-name)
