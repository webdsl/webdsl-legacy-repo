/**
 * Derive
 * 
 * Derive a page from an entity and a list of properties - only for the given properties, form fields are generated
 *
 * derive editPage for p (name, comment)
 *   => Derive(EditPage(), p, [name, comment])
 * derive editPage for p
 *   => Derive(EditRows(), p, [])
 */

module org/webdsl/dsl/modules/derive

imports
  libstrategolib
  libwebdsl-front

rules // desugaring

  // add to Desugaring step
  Desugar = (derive-page <+ derive-edit-rows <+ derive-view-rows)
  Desugar = desugar-derive
  
  // if no properties given, add all properties
  desugar-derive :
    elem|[ derive x_deriveType from e ]| -> 
    elem|[ derive x_deriveType from e for (dprop*) ]|
    // Derive(deriveType, e) -> Derive(deriveType, e, dprop*)
    where SimpleSort(t) := <type-of> e
        ; dprop* := <Properties; filter(\Property(name,_,_,_) -> DeriveDefault(name)\)> t

rules // typechecking

  /**
   * Typechecking: annotate x and check that dprop* are all properties of x
   */
  typecheck-page-element = typecheck-derive

  typecheck-derive :
    elem|[ derive x from e1 ]| -> elem|[ derive x from e2 ]|
    //Derive(deriveType, e) -> Derive(deriveType, e')
    where e2 := <typecheck-expression> e1
        ; SimpleSort(u) := <type-of> e2

  typecheck-derive :
    Derive(deriveType, e, dprop*) -> Derive(deriveType, e', dprop*)
    where e' := <typecheck-expression> e
        ; SimpleSort(u) := <type-of> e'
        ; <map(typecheck-derive-property(|u))> dprop*
      
  typecheck-derive-property(|u) : 
    DeriveDefault(f) -> DeriveDefault(f)
    where if not(<TypeOfProperty> (u, f)) then
            typecheck-error(|["entity '", u, "' has no property '", f, "'"])
          end
          
  typecheck-derive-property(|u) : 
    DeriveMode(m, f) -> DeriveMode(m, f)
    where if not(<TypeOfProperty> (u, f)) then
            typecheck-error(|["entity '", u, "' has no property '", f, "'"])
          end

rules // deriving pages

  /**
   * Generate core WebDSL for: derive editPage from e for (property1, property2)
   */
  derive-page : 
    elem|[ derive editPage from e for (dprop*) ]| -> 
    elem|[ 
      dummy() {
        main()
        define body() {
          header{"Edit " text(e.name) } 
          form { 
            table { elem } 
            action("Save", save()) 
          }
          action save() { 
            return x_view (e ); 
          }
        }
      } 
    ]| 
    where t := <type-of> e
        ; SimpleSort(srt) := t
        ; x_view := <decapitalize-string> srt 
        ; elem := <derive-edit-rows> Derive("editRows", e{Type(t)}, dprop*)

  derive-page : 
    elem|[ derive createPage from e for (dprop*) ]| ->
    elem|[ 
      dummy() {
        main()
        define body() {
          header{"Create " text(e.name) } 
          form { 
            table { elem } 
            action("Save", save()) 
          }
          action save() { 
            e.save(); 
            return x_view (e ); 
          }
        }
      } 
    ]| 
    where t := <type-of> e
        ; SimpleSort(srt) := t
        ; x_view := <decapitalize-string> srt 
        ; elem := <derive-edit-rows> Derive("editRows", e{Type(t)}, dprop*)

  /**
   * Generate core WebDSL for: derive viewPage from e for (property1, property2)
   */
  derive-page : 
    elem|[ derive viewPage from e for (dprop*) ]| ->
    elem|[ 
      dummy() {
        main()
        define body() {
          header{text(e.name) } 
          table { elem } 
        } 
      }
    ]| 
    where t := <type-of> e
        ; SimpleSort(srt) := t
        ; x_view := <decapitalize-string> srt 
        ; elem := <derive-view-rows> Derive("viewRows", e{Type(t)}, dprop*)

rules // derives edit rows for specified properties

  derive-edit-rows :
    elem|[ derive editRows from e for (dprop*) ]| -> elem|[dummy(){elem*}]| 
    where elem* := <filter-warn(derive-edit-row(|e )|"not a valid mode for edit row")> dprop*

  derive-edit-row(|e) : 
    DeriveDefault(y) -> <derive-edit-row(|e)> DeriveMode("edit", y)
    
  derive-edit-row(|e ) : 
    DeriveMode("edit", y) -> elem|[row{str input(e.y )}]| 
    where str := <concat-strings> [<make-human-readable> y , ": "]
    
  derive-edit-row(|e ) : 
    DeriveMode("view", y) -> elem|[row{str output(e.y )}]| 
    where str := <concat-strings> [<make-human-readable> y , ": "]

rules // derives view rows for specified properties

  derive-view-rows :
    elem|[ derive viewRows from e for (dprop*) ]| -> elem|[ dummy(){elem*} ]| 
    where elem* := <filter-warn(derive-view-row(|e )|"not a valid mode for view row")> dprop*

  derive-view-row(|e) : 
    DeriveDefault(y) -> <derive-view-row(|e)> DeriveMode("view", y)
    
  derive-view-row(|e ) : 
    DeriveMode("view", y) -> elem|[ row{ str output(e.y) } ]| 
    where str := <concat-strings> [<make-human-readable> y , ": "]
    
    
    
  
