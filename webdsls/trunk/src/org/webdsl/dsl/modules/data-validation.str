module org/webdsl/dsl/modules/data-validation

imports 
  libstrategolib 
  libjava-front 
  libwebdsl-front

rules //validate template call

  built-in-template-rule-setup = <declare-built-in-template-rules> ("validate",[SimpleSort("Bool"),SimpleSort("String")]);fail
 
rules //desugar entity validation
     
  desugar : 
    EntityNoSuper(name,entbodydecs){anno*} -> EntityNoSuper(name,entbodydecs2){anno*}
    where entbodydecs2 := <desugar-entity-validation> entbodydecs
  desugar : 
    Entity(name,super,entbodydecs){anno*} -> Entity(name,super,entbodydecs2){anno*}
    where entbodydecs2 := <desugar-entity-validation> entbodydecs
  desugar : 
    SessionEntity(name, entbodydecs){anno*} -> SessionEntity(name, entbodydecs2){anno*}
    where entbodydecs2 := <desugar-entity-validation> entbodydecs

  desugar-entity-validation : 
    entbodydecs -> entbodydecs2
    where <oncetd(?ValidateEntity(_,_))> entbodydecs //must have validations left to desugar
    with  (props1,functions,validations) := <split-entity-body> entbodydecs
        ; props2 := <try(desugar-entity-validation(|validations))> props1
        ; entbodydecs2 := <concat> [props2,functions] 
        
  split-entity-body :
    entbodydecs -> (props,functions,validations)
    with  props := <filter(is-property-cons)> entbodydecs
        ; validations := <filter(?ValidateEntity(_,_))> entbodydecs
        ; functions := <filter(is-function-cons)> entbodydecs  
     
  desugar-entity-validation(|validationrules):
    props -> props3
    where <?[ValidateEntity(echeck,emessage)|rest]> validationrules
    with  varnames := <collect(?Var(<strip-annos>) <+ ?FieldAccess(Var("this"),<strip-annos>))> echeck
        ; props2 := <map(try(desugar-entity-validation-helper(|varnames, echeck, emessage)))> props
        ; props3 := <try(desugar-entity-validation(|rest))> props2
          
  desugar-entity-validation-helper(|varnames,echeck,emessage):
    Property(name,kind,type,anno) -> //properties are normalized due to innermost
    Property(name,kind,type,[ValidateAnno(echeck,emessage)|anno])
    where <fetch(?name)> varnames
 
rules //declare and generate validate property functions 
   
  rules //declare generated functions

  extend-property-declare(|x_class) :
    prop -> <fail> //each extend must fail so they all get evaluated
    with get-property-name
       ; ?x
       ; x_name := <get-internal-validate-func-name(|x)>
       ; x_name1 := <get-internal-validate-func-name-int(|x)>
       ; funcs := fun* |[ 
                    function x_name() : ValidationExceptionMultiple {     } 
                    function x_name1(v:ValidationExceptionMultiple){    } 
                  ]|
       ; <map(declare-function(|x_class))> funcs
   
  rules //utility strategies for adding location information to generated webdsl code fragments
    
  //pass location info to generated functions
  with-current-location(s) =
    {| CurrentLocation: 
      with(get-anno(?At(_,_,_)); ?loc; rules( CurrentLocation := loc ))
    ; s
    |}
    
  add-current-location =
    topdown(try(keep-position-anno; {\x{anno*} -> x{<CurrentLocation>,anno*}\}))
   
  rules 
  //generate validate functions
  //for each property generate a validate function
  //for each validation extend the property validate function
  
  desugar-ui :
    Entity(x_class,super, entbodydecs1){anno*} -> <rename> Entity(x_class,super, entbodydecs2){anno*}
    where <oncetd(not-translated-validate-anno <+ not-translated-prop-validate-anno)> entbodydecs1
    with  with-current-location(entbodydecs2 := <get-all-function-validate-annotation(|x_class)> entbodydecs1)
    
  desugar-ui : 
    EntityNoSuper(x_class, entbodydecs1){anno*} -> <rename> EntityNoSuper(x_class, entbodydecs2){anno*} 
    where <oncetd(not-translated-validate-anno <+ not-translated-prop-validate-anno)> entbodydecs1
    with  with-current-location(entbodydecs2 := <get-all-function-validate-annotation(|x_class)> entbodydecs1)
    
  desugar-ui :
    SessionEntity(x_class, entbodydecs1){anno*} -> <rename> SessionEntity(x_class, entbodydecs2){anno*} 
    where <oncetd(not-translated-validate-anno <+ not-translated-prop-validate-anno)> entbodydecs1
    with  with-current-location(entbodydecs2 := <get-all-function-validate-annotation(|x_class)> entbodydecs1)
    
  signature
  constructors 
    PropertyValidateFunctionGenerated: Term 
    ValidateAnnotationFunctionGenerated: Term 
  rules 

  not-translated-prop-validate-anno : 
    prop@Property(x, k, srt, annos) -> prop
    where <not(fetch(PropertyValidateFunctionGenerated))> annos
          
  not-translated-validate-anno : 
    v@ValidateAnno(_,_){anno*} -> v 
    where <not(fetch(ValidateAnnotationFunctionGenerated))> anno*
    
  not-translated-validate-anno : 
    v@LengthAnno(_){anno*} -> v 
    where <not(fetch(ValidateAnnotationFunctionGenerated))> anno*
    
  not-translated-validate-anno : 
    v@NotEmptyAnno(){anno*} -> v 
    where <not(fetch(ValidateAnnotationFunctionGenerated))> anno*

  get-all-function-validate-annotation(|x_class):
    entbodydecs1 -> entbodydecs2
    with  tuples  := <map(get-function-prop-validate-annotation(|x_class) <+ !(<id>,[]) )> entbodydecs1
        ; tuples2 := <map(get-function-validate-annotation(|x_class) <+ id )> tuples
        ; (props2,funcs1) := <unzip> tuples2
        ; funcs2 := <flatten-list> funcs1
        ; entbodydecs2 := <concat> [props2,funcs2]

  //for each property generate a validate function
  get-function-prop-validate-annotation(|x_class) :  
    prop@Property(x, k, srt, annos) -> 
    (Property(x, k, srt, [PropertyValidateFunctionGenerated()|annos])
    ,result)
    where not-translated-prop-validate-anno
    with  x_name := <get-internal-validate-func-name(|x)>
        ; x_name1 := <get-internal-validate-func-name-int(|x)>
        ; result := <add-current-location>
            fun* |[ 
              function x_name() : ValidationExceptionMultiple { 
                var v := ValidationExceptionMultiple{};
                x_name1(v);
                return v;
              } 
              function x_name1(v:ValidationExceptionMultiple){ } 
            ]|
  
  //for each validation extend the property validate function       
  get-function-validate-annotation(|x_class) :  
    (prop@Property(x, k, srt, annos1),funcs1) ->
    (Property(x, k, srt, annos2),funcs3)
    with  tuples := <map(get-function-validate-annotation-helper(|x) <+ !(<id>,[]) )> annos1
        ; (annos2,funcs2) := <unzip> tuples
        ; funcs3 := <flatten-list> [funcs1,funcs2]
    
  get-function-validate-annotation-helper(|x) :
    v@ValidateAnno(e_check,e_message){anno*} -> (ValidateAnno(e_check,e_message){anno1*},result)
    where not-translated-validate-anno
    with  anno1* := [ValidateAnnotationFunctionGenerated()|anno*]
        ; x_name := <get-internal-validate-func-name-int(|x)>
        ; e_checknotnull := <add-not-null-checks> e_check
        ; result := <add-current-location>
            fun |[ 
              extend function x_name(v:ValidationExceptionMultiple){
                if(!e_checknotnull){
                  v.exceptions.add(ValidationException{ message := e_message });
                }
              } 
            ]|
            
  //length annotation
  get-function-validate-annotation-helper(|x) :
    v@LengthAnno(x_length){anno*} -> (LengthAnno(x_length){anno1*},result)
    where not-translated-validate-anno
    with  anno1* := [ValidateAnnotationFunctionGenerated()|anno*]
        ; x_name := <get-internal-validate-func-name-int(|x)>
        ; result := <add-current-location>
            fun |[ 
              extend function x_name(v:ValidationExceptionMultiple){
                if(this.x.length() > x_length){
                  v.exceptions.add(ValidationException{ message := "Value exceeds maximum length ("+x_length+")" });
                }
              } 
            ]|
            
  //not empty annotation
  get-function-validate-annotation-helper(|x) :
    v@NotEmptyAnno(){anno*} -> (NotEmptyAnno(){anno1*},result)
    where not-translated-validate-anno
    with  anno1* := [ValidateAnnotationFunctionGenerated()|anno*]
        ; x_name := <get-internal-validate-func-name-int(|x)>
        ; result := <add-current-location>
            fun |[ 
              extend function x_name(v:ValidationExceptionMultiple){
                if(this.x.length() == 0){
                  v.exceptions.add(ValidationException{ message := "Value is required" });
                }
              } 
            ]|  
          
rules //add not-null checks to validatestatement and to TemplateCall("validate",...)
  
  signature constructors NotNullChecksAdded : Term
  rules
    
  desugar-action :
    v@ValidateStatement(_,_) -> v1
    where ValidateStatement(e1,e2){anno*} := <add-new-anno(|NotNullChecksAdded())> v
    with  v1 := ValidateStatement(<add-not-null-checks> e1,e2){anno*}
  desugar-action :
    v@NamedValidateStatement(_,_,_) -> v1
    where NamedValidateStatement(name,e1,e2){anno*} := <add-new-anno(|NotNullChecksAdded())> v
    with  v1 := NamedValidateStatement(name,<add-not-null-checks> e1,e2){anno*}
  
  desugar-ui:            
    t@TemplateCall("validate",[_,_],_,_) -> t1
    where TemplateCall("validate",[e1,e2],passign*,body){anno*} := <add-new-anno(|NotNullChecksAdded())> t
    with  t1 := TemplateCall("validate",[<add-not-null-checks>e1,e2],passign*,body){anno*}
              
rules //declare and generate one validateSave() function per entity, which checks each property's validate function (including properties of superclass)
     
  rules //declare generated validateSave() function

  extend-entity-declare :
    Entity(x_class, x_super, entbodydecs) -> <fail> //each extend must fail so they all get evaluated
    with func := fun |[ 
                   function validateSave() : ValidationExceptionMultiple {     } 
                 ]|
       ; <declare-function(|x_class)> func     
     
  rules // generate entity function validateSave() once   
     
  desugar-ui :
    Entity(x_class,super, entbodydecs1){anno*} -> result
    where not(validate-save-function-has-been-added)
    with  with-current-location(entbodydecs2 := <add-validate-save-function-to-entity(|x_class)> entbodydecs1
        ; result := <rename> Entity(x_class,super, entbodydecs2){EntityValidateSaveFunctionGenerated(),anno*}) 
    
  desugar-ui : 
    EntityNoSuper(x_class, entbodydecs1){anno*} -> result
    where not(validate-save-function-has-been-added)
    with  with-current-location(entbodydecs2 := <add-validate-save-function-to-entity(|x_class)> entbodydecs1
        ; result := <rename> EntityNoSuper(x_class, entbodydecs2){EntityValidateSaveFunctionGenerated(),anno*})
    
  desugar-ui :
    SessionEntity(x_class, entbodydecs1){anno*} -> result 
    where not(validate-save-function-has-been-added)
    with  with-current-location(entbodydecs2 := <add-validate-save-function-to-entity(|x_class)> entbodydecs1
        ; result := <rename> SessionEntity(x_class, entbodydecs2){EntityValidateSaveFunctionGenerated(),anno*})
    
  signature constructors 
    EntityValidateSaveFunctionGenerated: Term 
  rules
    
  validate-save-function-has-been-added : 
    a@_{anno*} -> a
    where <fetch(EntityValidateSaveFunctionGenerated)> anno*
    
  add-validate-save-function-to-entity(|x_class) :
    entbodydecs1 -> entbodydecs2
    with  props := <all-properties> x_class
        ; stat* := <props-to-validate-save-funcs> props 
        ; function := <add-current-location>
            webdsl|[ 
              function validateSave() : ValidationExceptionMultiple { 
                var v := ValidationExceptionMultiple{};
                stat*                
                return v;
              }  
            ]|
        ; entbodydecs2 := [ function |  entbodydecs1 ]
  
  props-to-validate-save-funcs =
      map(get-non-derived-prop-name)
    ; remove-all(?None())
    ; string-sort
    ; map(property-to-validate-save-function-stmt <+ debug(!"INTERNAL ERROR: failed to translate to validate property to validate statement");fail)
    
  rules 
    property-to-validate-save-function-stmt :
      x -> stat|[ x_name(v); ]|
      where not(<None> x)
      with x_name := <get-internal-validate-func-name-int(|x)> 
       
    property-to-validate-save-function-stmt :
      None() -> None()
     
rules //error template

  after-tc-declare-hook = setup-message-templates ;fail //used internally to represent input with validations, declared as wrapper to reuse back-end code for each different input type

  setup-message-templates = 
    (get-error-template-input  <+ default-error-template-input)
  ; (get-error-template-form   <+ default-error-template-form)
  ; (get-error-template-action <+ default-error-template-action)
  ; (get-template-success      <+ default-template-success)
  
  get-error-template-input  = !<TemplateSignature> ("errorTemplateInput", [GenericSort("List",[SimpleSort("String")])])
  get-error-template-form   = !<TemplateSignature> ("errorTemplateForm",  [GenericSort("List",[SimpleSort("String")])])
  get-error-template-action = !<TemplateSignature> ("errorTemplateAction",[GenericSort("List",[SimpleSort("String")])])

  default-error-template-input =
    <emit-webdsl-code> def|[
      define ignore-access-control errorTemplateInput(messages : List<String>){
        block()[style := "clear:left; float:left; border: 1px solid #FF0000; margin-left: -5px; margin-top: 5px; margin-bottom: 5px; padding: 4px"]{
          elements()
          for(ve: String in messages){
            block()[style := "width:100%; clear:left; float:left; color: #FF0000; margin-top: 5px;"]{
              text(ve)
            }     
          }
        }
      } 
    ]|
    
  default-error-template-form =
    <emit-webdsl-code> def|[    
      define ignore-access-control errorTemplateForm(messages : List<String>){
        block()[style := "clear:left; float:left; border: 1px solid #FF0000; margin-left: -5px; margin-top: 5px; margin-bottom: 5px; padding: 4px"]{
          for(ve: String in messages){
            block()[style := "width:100%; clear:left; float:left; color: #FF0000; margin-top: 5px;"]{
              text(ve)
            }     
          }
        }
      }
    ]|

  default-error-template-action =
    <emit-webdsl-code> def|[    
      define ignore-access-control errorTemplateAction(messages : List<String>){
        block()[style := "clear:left; float:left; border: 1px solid #FF0000; margin-left: -5px; margin-top: 5px; margin-bottom: 5px; padding: 4px"]{
          for(ve: String in messages){
            block()[style := "width:100%; clear:left; float:left; color: #FF0000; margin-top: 5px;"]{
              text(ve)
            }     
          }
          elements()
        }
      }
    ]|

rules
  
  built-in-template-rule-setup = 
    x_funname := "getValidationErrorsByName"
  ; <register-reserved-function> (x_funname,1)
  ; <declare> fun |[ function x_funname(name:String):List<String> {} ]|
  ; fail

