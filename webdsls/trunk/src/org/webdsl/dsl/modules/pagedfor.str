module org/webdsl/dsl/modules/pagedfor

imports
  libstrategolib
  libwebdsl-front

strategies

  rename = rename-pagedfor
  normalize = normalize-pagedfor
  desugar = desugar-pagedfor


rules

  rename-pagedfor :
    PagedForAll(x, srt, f1, per1, elems1) -> PagedForAll(y, srt, f2, per2, elems2)
    with {| Rename
          : y := <rename-bound(|srt)> x
          ; f2 := <rename-all> f1
          ; per2 := <rename-all> per1
          ; elems2 := <rename-all> elems1
          |}

  rename-pagedfor :
    PagedForAllNoFilter(x, srt, per1, elems1) -> PagedForAllNoFilter(y, srt, per2, elems2)
    with {| Rename
          : y := <rename-bound(|srt)> x
          ; per2 := <rename-all> per1
          ; elems2 := <rename-all> elems1
          |}

  rename-pagedfor :
    PagedFor(x, srt, e1, f1, per1, elems1) -> PagedFor(y, srt, e2, f2, per2, elems2)
    with {| Rename
          : y := <rename-bound(|srt)> x
          ; f2 := <rename-all> f1
          ; e2 := <rename-all> e1
          ; per2 := <rename-all> per1
          ; elems2 := <rename-all> elems1
          |}

  rename-pagedfor :
    PagedForNoFilter(x, srt, e1, per1, elems1) -> PagedForNoFilter(y, srt, e2, per2, elems2)
    with {| Rename
          : y := <rename-bound(|srt)> x
          ; e2 := <rename-all> e1
          ; per2 := <rename-all> per1
          ; elems2 := <rename-all> elems1
          |}

rules
  normalize-pagedfor :
    PagedForAllNoFilter(x, s, per, te*) -> PagedForAll(x, s, Filter(True(), OrderAscending(Null()), Limit(Int("1000"), Int("0"))), per, te*)

  normalize-pagedfor :
    PagedForAll(x, s, FilterNoOrderBy(we, l), per, te*) -> PagedForAll(x, s, Filter(we, OrderAscending(Null()), l), per, te*)

  normalize-pagedfor :
    PagedForAll(x, s, FilterNoWhere(obe, l), per, te*) -> PagedForAll(x, s, Filter(True(), obe, l), per, te*)

  normalize-pagedfor :
    PagedForNoFilter(x, s, e, per, te*) -> PagedFor(x, s, e, Filter(True(), OrderAscending(Null()), Limit(Int("1000"), Int("0"))), per, te*)

  normalize-pagedfor :
    PagedFor(x, s, e, FilterNoOrderBy(we, l), per, te*) -> PagedFor(x, s, e, Filter(we, OrderAscending(Null()), l), per, te*)

  normalize-pagedfor :
    PagedFor(x, s, e, FilterNoWhere(obe, l), per, te*) -> PagedFor(x, s, e, Filter(True(), obe, l), per, te*)

rules

	// Not working. inputHidden is not implemented.
	constraint-error-ui =
			(?PagedForAll(_,_,_,_,_) <+ ?PagedForAllNoFilter(_,_,_,_) <+ ?PagedFor(_,_,_,_,_,_) <+ ?PagedForNoFilter(_,_,_,_,_))
		; add-error(|"Paged 'for' not supported in this version.")

  desugar-pagedfor :
    webdsl|[ for(x : srt fltr per e5) { elem* } ]| ->
    <rename-all> webdsl|[ container() {
      var x_page : Int := 0;

      for(x : srt fltr2) {
        elem*
      }
      form {
        inputHidden(x_page)
        if(x_page > 0) {
          action("previous", x_previous())
        }
        action("next", x_next())

        action x_previous() {
          x_page := x_page - 1;
        }
        action x_next() {
          x_page := x_page + 1;
        }
      }
    }
    ]|
    where Filter(we, obe, _) := fltr
    with x_page := <toplevel-rename> "page"
       ; x_previous := <toplevel-rename> "previous"
       ; x_next := <toplevel-rename> "next"
       ; fltr2 := Filter(we, obe, Limit(e5, exp|[ x_page * e5 ]|))

  desugar-pagedfor :
    webdsl|[ for(x : srt in e fltr per e5) { elem* } ]| ->
    <rename-all> webdsl|[ container() {
      var x_page : Int := 0;

      for(x : srt in e fltr2) {
        elem*
      }
      form {
        inputHidden(x_page)
        if(x_page > 0) {
          action("previous", x_previous())
        }
        action("next", x_next())

        action x_previous() {
          x_page := x_page - 1;
        }
        action x_next() {
          x_page := x_page + 1;
        }
      }
    }
    ]|
    where Filter(we, obe, _) := fltr
    with x_page := <toplevel-rename> "page"
       ; x_previous := <toplevel-rename> "previous"
       ; x_next := <toplevel-rename> "next"
       ; fltr2 := Filter(we, obe, Limit(e5, exp|[ x_page * e5 ]|))
