module org/webdsl/dsl/modules/procedures/utils

imports
  libstrategolib
  libwebdsl-front
  
rules

  procedure-who-exp :
    def|[ procedure x_id (x_o : srt) { procelem* } ]| -> 
    <filter(procedure-who-exp); Hd> procelem*

  procedure-who-exp :
    procelem|[ who { e } ]| -> e 
    
  procedure-view-elems :
    def|[ procedure x_id (x_o : srt) { procelem* } ]| -> 
    <filter(procedure-view-elems); concat> procelem*
    
  procedure-view-elems :
    procelem|[ view { elem* } ]| -> elem*

  procedure-get-action-statements :
    procelem|[ do { stat* } ]| -> stat*

  procedure-get-access-exp =
    filter(procedure-who-when-exp)
    ; foldr(!True(), exp-and)

  procedure-when-exp :
    def|[ procedure x_id (x_o : srt) { procelem* } ]| -> 
    <filter(procedure-when-exp); Hd> procelem*
    
  procedure-when-exp :
    procelem|[ when { e } ]| -> e 

  procedure-who-when-exp =
    procedure-who-exp 
    <+ procedure-when-exp
    
rules // Derive procedurePage

  Desugar :
    Derive("procedurePage", e, prop*) -> elem|[ 
      dummy() {
        main()
        define contextSidebar() {
          x(e2)
        }
        define body() {
          header{ text(e3) " " output(e) } 
          form { 
            table { elem }
            action("Submit", do()) 
          }
        } 
      }
    ]| 
    where 
        t := <type-of> e
      ; SimpleSort(srt) := t
      ; x := <concat-strings> [<decapitalize-string> srt, "Procedures"]
      ; elem := <derive-edit-rows> Derive("editRows", e{Type(t)}, prop*)
      ; [Arg(a, _)|_] := <CurrentPageArguments>
      ; e2 := Var(a)
      ; e3 := String(<make-human-readable> <CurrentPage>)

rules // Utilities

  add-view-page-return(|x_viewpage, e) :
    stats -> stats2
    where if [] := <collect(?Return(_) <+ ?GoTo(_))> stats then
            stats2 := <concat> [stats, [ webdsl|[ return x_viewpage(e); ]| ]]
          else
            stats2 := stats
          end

  add-view-page-goto(|x_viewpage, e) :
    stats -> stats2
    where if [] := <collect(?Return(_) <+ ?GoTo(_))> stats then
            stats2 := <concat> [stats, [ webdsl|[ goto x_viewpage(e); ]| ]]
          else
            stats2 := stats
          end

  exp-and : (e1, e2) -> And(e1, e2)
  exp-or : (e1, e2) -> Or(e1, e2)

  procedure-rename-var(|from, to) =
    topdown(try(procedure-rename(|from, to)))

  procedure-rename(|from, to) :
    Var(from) -> Var(to)

  procedure-rename(|from, to) :
    Qualified(from, f) -> Qualified(to, f)
