module org/webdsl/dsl/modules/procedures/generate/task

imports
  libstrategolib
  libwebdsl-front

rules // Generate tasks pages
  procedure-generate-task-pages = 
    emit-all-tasks-page
    ; <map(procedure-emit-entity-task-page)> <bagof-ProcedureEntities; make-set>

  procedure-emit-entity-task-page =
    ?SimpleSort(ent)
    ; procedures := <bagof-Procedures; make-set> SimpleSort(ent)
    ; x_page := <concat-strings> [<decapitalize-string> ent, "Tasks"]
    ; x_ent := <decapitalize-string> ent
    ; srt := SimpleSort(ent)
    ; str := <make-human-readable> ent
    ; e := Var(x_ent)
    ; x_op := <concat-strings> [<decapitalize-string> x_ent, "ProceduresList"]
    ; x2 := <concat-strings> [<decapitalize-string> x_ent, "TaskList"]
    ; x3 := <concat-strings> [<decapitalize-string> x_ent, "HasProcedures"]
    ; es := <map(\ x_op -> <procedure-rename-var(|<ProcedureArg> x_op, x_ent)> And(<ProcedureWho> x_op, <ProcedureWhen> x_op) \)> procedures
    ; e1 := <foldr(!False(), exp-or)> es
    ; <emit-webdsl-code> def|[
        globals {
          function x3(x_ent : srt) : Bool { // HasProcedures
            return e1;
          }
        }
      ]|
    ; <emit-webdsl-code> def|[
        define x2() { // TaskList
          header{ str }
          list {
            for(x_ent : srt) {
              if(x3(x_ent)) {
                listitem {
                  output(e)
                  x_op(e)
                }
              }
            }
          }
        }
      ]|
    ; <emit-webdsl-code> def|[
        define page x_page() { // Tasks
          title{ str }
          main()
          define local body() {
            header{"Tasks"}
            x2()
          }
        }
      ]|

  emit-all-tasks-page = with(
    elem* := <map({x: \ SimpleSort(ent) -> elem|[ x() ]| where x := <concat-strings> [<decapitalize-string> ent, "TaskList"] \})> <bagof-ProcedureEntities; make-set>
    ; <emit-webdsl-code> def|[
        define page allTasks() {
          title{ "All tasks" }
          main()
          define local body() {
            header{ "All tasks" }
            section {
              elem*
            }
          }
        }
      ]|
      )
