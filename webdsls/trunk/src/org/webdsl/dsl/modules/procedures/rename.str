module org/webdsl/dsl/modules/procedures/rename

imports
  libstrategolib
  libwebdsl-front

rules // Renaming

  rename :
    def@def|[ procedure x_id (x_o1 : srt) { procelem1* }  ]| -> 
      <declare-procedure> def|[ procedure x_id (x_o2 : srt) { procelem2* }  ]| 
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; x_o2 := <rename-bound(|srt)> x_o1
          ; procelem2* := <rename-all> procelem1*
          |}
  
  rename :
    def@def|[ auto procedure x_id (x_o1 : srt) { procelem1* }  ]| -> 
      <declare-procedure> def|[ auto procedure x_id (x_o2 : srt) { procelem2* }  ]| 
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; x_o2 := <rename-bound(|srt)> x_o1
          ; procelem2* := <rename-all> procelem1*
          |}

  rename :
    def@def|[ extend procedure x_id (x_o1 : srt) { procelem1* }  ]| -> 
      def|[ extend procedure x_id (x_o2 : srt) { procelem2* }  ]| 
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; x_o2 := <rename-bound(|srt)> x_o1
          ; procelem2* := <rename-all> procelem1*
          |}

rules // Declaring

  declare-procedure =
    (  ?def@def|[ procedure x_id (x_o : srt) { procelem* }]|
    <+ ?def@def|[ auto procedure x_id (x_o : srt) { procelem* }]|
    )
    ; with (id
      ; who-exp := <procedure-who-exp> def
      ; when-exp := <procedure-when-exp> def
      ; SimpleSort(s) := srt
      ; info(|"Step 0")
      ; hasopfun := <concat-strings> [<decapitalize-string> s, "HasProcedures"]
      ; procstatus := x_id
      ; info(|"Step 1")
      ; rules ( 
          IsProcedure      : x_id 
          ProcedureWho     : x_id -> who-exp
          ProcedureWhen    : x_id -> And(FieldAccess(FieldAccess(Var(x_o), procstatus), "enabled"), when-exp)
          ProcedureArg     : x_id -> x_o
          ProcedureArgSort : x_id -> srt
          Procedures       :+ srt -> x_id 
          CheckGeneratedGlobalFunctionSignature : 
            (None(), hasopfun, [srt]) -> SimpleSort("Bool")
          ProcedureEntities :+= srt 
        )
      ; info(|"Step 1")
      ; if [] := <procedure-view-elems> def then
          rules ( IsDoProcedure : x_id )
        end
        
      ; info(|"Step 1")
      // for typechecking, these declares are executed early (and overwritten later)
      ; <temp-declare-entity-template> def
      ; info(|"Step 1")
      ; temp-declare-all-tasks-page
      ; info(|"Step 1")
      ; <temp-declare-entity-task-page> def
      ; info(|"Step 1")
      ; <temp-declare-entity-status-page> def
      ; info(|"Step 1")
      ; <temp-procedure-to-page> def
      ; info(|"Step last")
    )
  
  temp-declare-entity-template =
    (  ?def@def|[ procedure x_id (x_o : srt) { procelem* }]|
    <+ ?def@def|[ auto procedure x_id (x_o : srt) { procelem* }]|
    )
    ; SimpleSort(ent) := srt
    ; x1     := <concat-strings> [<decapitalize-string> ent, "Procedures"]
    ; x2     := <concat-strings> [<decapitalize-string> ent, "ProceduresList"]
    ; x_arg  := <decapitalize-string> ent
    ; srt    := SimpleSort(ent)
    ; <declare-template-definition> def|[ define x2(x_arg : srt) {} ]|
    ; <declare-template-definition> def|[ define x1(x_arg : srt) {} ]|
  
  temp-declare-entity-task-page =
    (  ?def@def|[ procedure x_id (x_o : srt) { procelem* }]|
    <+ ?def@def|[ auto procedure x_id (x_o : srt) { procelem* }]|
    )
    ; SimpleSort(ent) := srt
    ; x_page := <concat-strings> [<decapitalize-string> ent, "Tasks"]
    ; x_ent := <decapitalize-string> ent
    ; e := Var(x_ent)
    ; x2 := <concat-strings> [<decapitalize-string> x_ent, "TaskList"]
    ; x3 := <concat-strings> [<decapitalize-string> x_ent, "HasProcedures"]
    ; <declare-global-func> def|[ function x3(x_ent : srt) : Bool { } ]|
    ; <declare-template-definition> def|[ define x2() {} ]|
    ; <declare-page-definition> def|[ define page x_page() {} ]|
  
  temp-declare-all-tasks-page =
    <declare-page-definition> def|[ define page allTasks() {} ]|
      
  temp-declare-entity-status-page =
    (  ?def@def|[ procedure x_id (x_o : srt) { procelem* }]|
    <+ ?def@def|[ auto procedure x_id (x_o : srt) { procelem* }]|
    )
    ; SimpleSort(ent) := srt
    ; x_page := <concat-strings> [<decapitalize-string> ent, "Status"]
    ; x_ent := <decapitalize-string> ent
    ; x2 := <concat-strings> [<decapitalize-string> x_ent, "StatusList"]
    ; <declare-template-definition> def|[ define x2() {} ]|
    ; <declare-page-definition> def|[ define page x_page() {} ]|
  
  temp-procedure-to-page =
    (  ?def@def|[ procedure x_id (x_o : srt) { procelem* }]|
    <+ ?def@def|[ auto procedure x_id (x_o : srt) { procelem* }]|
    )
    ; x_status := <concat-strings> [<capitalize-string> x_id, "Status"]
    ; info(|"Here 1")
    ; <declare-entity> def|[
        entity x_status : ProcedureStatus {
          function enabled() { }
          function disabled() { }
          function do() { }
          function done() { }
          function processed() { }
        }
      ]|
    ; info(|"Here 2")
    ; SimpleSort(x_ent) := srt
    ; info(|["Declaring procedure property ", x_id, " on ", x_ent])
    ; info(|"Here 3")
    ; <declare-extend-entity> def|[
        extend entity x_ent {
          x_id <> x_status ()
        }
      ]|
    ; info(|"Here 4")
    // Generate functions
    /*
    ; x_enabled := <concat-strings> [x_id, "Enabled"]
    ; <declare-global-func> def|[ function x_enabled(x_o : srt) {} ]|
    ; x_processed := <concat-strings> [x_id, "Processed"]
    ; <declare-global-func> def|[ function x_processed(x_o : srt) {} ]|
    ; x_done := <concat-strings> [x_id, "Done"]
    ; <declare-global-func> def|[ function x_done(x_o : srt) {} ]|
    ; x_do := <concat-strings> [x_id, "Do"]
    ; <declare-global-func> def|[ function x_do(x_o : srt) {} ]|
    ; x_disabled := <concat-strings> [x_id, "Disabled"]
    ; <declare-global-func> def|[ function x_disabled(x_o : srt) {} ]|
    */
    ; !def|[ define page x_id(x_o : srt) {} ]|
      
