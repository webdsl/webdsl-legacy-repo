module org/webdsl/dsl/modules/procedures/process

imports
  libstrategolib
  libwebdsl-front

  signature
    constructors
      ProcProcessed : ProcedureElement * ProcedureElement -> ProcedureElement

strategies
  
  transform-process-descriptions = 
    info(|"STAGE PROCESS TO EXTEND PROCEDURES")
    ; process-to-extend-procedures
    ; info(|"STAGE ADD PROCESSED CALLS")
    ; add-processed-calls
    ; fail
    
  process-to-extend-procedures = 
    bottomup(try(
      if-to-extend-procedures
      <+ if-no-else-to-extend-procedures
      <+ or-to-extend-procedures
      <+ and-to-extend-procedures
      <+ plus-to-extend-procedures
      <+ while-to-extend-procedures
      <+ sequential-to-extend-procedures
    ))
  
  add-processed-calls =
    bottomup(try(add-processed-call))
    
  add-processed-call =
    ?proc@Procedure(x_current, _, procedureElem*)
    ; x_processed := <concat-strings> [x_current, "Processed"]
    ; x_currento := <ProcedureArg> x_current
    ; srt2 := <ProcedureArgSort> x_current
    ; if <contains-process> procedureElem* then 
          x_id := <get-process-id> <fetch-right-most-td(is-process-call)> proc
        ; x_o := <ProcedureArg> x_id
        ; srt := <ProcedureArgSort> x_id
        ; <emit-webdsl-code> def|[
            extend procedure x_id(x_o : srt) {
              processed {
                x_processed(x_currento);
              }
            }
          ]|
        ; info(|["Met process: ", x_current])
      else
          <emit-webdsl-code> def|[
            extend procedure x_current(x_currento : srt2) {
              done {
                x_processed(x_currento);
              }
            }
          ]|
        ; info(|["Zonder process: ", x_current])
      end
    
  add-processed-call =
    ?AutoProcedure(x_current, arg, procedureElem*)
    ; <add-processed-call> Procedure(x_current, arg, procedureElem*)
    
  contains-process = 
    oncetd(is-process-call)
      
//tijdelijk
strategies

    if-no-else-to-extend-procedures = fail
    or-to-extend-procedures = fail
    and-to-extend-procedures = fail
    plus-to-extend-procedures = fail
    while-to-extend-procedures = fail
      

// transforming to connected sequential parts   
rules

  if-to-extend-procedures :
    ProcIf(e1, ifBranch, elseBranch) -> ProcProcessed(ifSplit, ifJoin)
    where
      // retrieve necessary info for if branch
      firstIf := <fetch-left-most-td(is-process-call)> ifBranch
      ; x_id1 := <get-process-id> firstIf
      ; x_o1 := <ProcedureArg> x_id1
      ; srt1 := <ProcedureArgSort> x_id1
      
      // retrieve necessary info for else branch
      ; firstElse := <fetch-left-most-td(is-process-call)> elseBranch
      ; x_id2 := <get-process-id> firstElse
      ; x_o2 := <ProcedureArg> x_id2
      ; srt2 := <ProcedureArgSort> x_id2
      ; SimpleSort(s2) := srt2

      // generate ifSplit
      ; x_split := <newname> "ifSplit"
      ; <emit-webdsl-code> def|[
          auto procedure x_split(x_o1 : srt1) {
            processed {
              if (e1) {
                x_o1.x_id1.enable();
              } else {
                x_o1.x_id2.enable();
              }
            }
          }
        ]|
      ; ifSplit := ProcCall(x_split, x_o1)
      ; info(|["Emitted auto procedure ", x_split])

      // generate ifJoin
      ; x_join := <newname> "ifJoin"
      ; <emit-webdsl-code> def|[
          auto procedure x_join(x_o2 : srt2) {  }
        ]|
      ;  ifJoin := ProcCall(x_join, x_o2)

/*      // output entity extensions for status
      ; SimpleSort(x_ent1) := srt1
      ; extendSplit := def|[
          extend entity x_ent1 {
            x_split <> ProcedureStatus ()
          }
        ]|
      ; info(|"Extend Entity Split: ")
      ; <debug> extendSplit
      ; <emit-webdsl-code> extendSplit

      ; extendJoin := def|[
          extend entity x_ent1 {
            x_join <> ProcedureStatus ()
          }
        ]|
      ; info(|"Extend Entity Join: ")
      ; <debug> extendJoin
      ; <emit-webdsl-code> extendJoin*/
        
      // connect both branches to the join
      ; lastIf := <fetch-right-most-td(is-process-call)> ifBranch
      ; lastElse := <fetch-right-most-td(is-process-call)> elseBranch
      ; <connect-to(|ifJoin)> lastIf
      ; <connect-to(|ifJoin)> lastElse
      
/* 
  if-no-else-to-extend-procedures :
    ProcIfNoElse(exp, ifBranch) -> ProcProcessed(ifSplit, ifJoin)
    where
        firstIf := <fetch-left-most-td(is-process-call)> ifBranch
      ; lastIf := <fetch-right-most-td(is-process-call)> ifBranch
      ; x_id := <get-process-id> <fetch-left-most-td(is-process-call)> ifBranch
      ; x_o := <ProcedureArg> x_id
      ; srt := <ProcedureArgSort> x_id
      ; x_split := <newname> "ifSplit"
      ; x_join := <newname> "ifJoin"
      ; ifSplit := def|[
          procedure x_split(x_o : srt) {
            processed {
              if (exp) {
                ifBranch.enable();
              }
            }
          }
        ]|
      ; <emit-webdsl-code> ifSplit
      ; ifJoin := def|[
          procedure x_join(x_o : srt) {  }
        ]|
      ; <emit-webdsl-code> ifJoin
      ; <connect-to(|ifJoin)> lastIf
   */   
      

/*  
  or-to-extend-procedures :
    ProcOR(process1, process2) -> ProcGenerated(orSplit, orJoin)
    where
      generatedName := <newname> "generatedProc"
      ; orSplit := def|[
          procedure generatedName {
            enabled {
              process1.enable();
              process2.enable();
            }
          }
        ]|
      ; orJoin := <generate-empty-procedure>
      ; <connect-to(|orJoin)> process1
      ; <connect-to(|orJoin)> process2
*/
/*
  and-to-extend-procedures = 
    id

  plus-to-extend-procedures = 
    id

  while-to-extend-procedures = 
    id
    */


// connecting procedures
rules

  sequential-to-extend-procedures :
    ProcSeq(leftProc, rightProc) ->
      ProcSeq(leftProc, rightProc)
    where 
      <connect-to(|rightProc)> leftProc
      
  connect-to(|rightProc) =  
    ?leftProc
    ; leftProcCall := <fetch-right-most-td(is-process-call)> leftProc
    ; x_id := <get-process-id> leftProcCall
    ; x_o := <ProcedureArg> x_id
    ; srt := <ProcedureArgSort> x_id
    ; x_enable := <get-process-id> <fetch-left-most-td(is-process-call)> rightProc
    ; code := def|[
        extend procedure x_id(x_o : srt) {
          processed {
            x_o.x_enable.enable();
          }
        }
      ]|
    ; <emit-webdsl-code> code
    ; info(|["Connected ", x_id, " with ", x_enable])
    ; !leftProc

// util - fetching left-most and right-most elements
strategies

  get-process-id = 
    get-ProcCall-id
  
  get-ProcCall-id :
    ProcCall(x_id, _) -> x_id
  
  is-process-call =
    ?ProcCall(_, _)
  
  fetch-left-most-td(s) = oncetd(s; ?x); !x

  find-right-most-td(s) = rec x(s <+ where(id#(reverse); one(x)))
  
  fetch-right-most-td(s) = find-right-most-td(s; ?x); !x