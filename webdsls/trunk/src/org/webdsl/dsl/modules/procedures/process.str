/**
 * Process
 *
 * Transforms process descriptions to procedural WebDSL
 *
 * Strategy: every Procedure is checked for ProcedureProcess-descriptions. If they exist, then these process descriptions
 *   are first rewritten so that all complex constructs are replaced by singular procedures. Next, these groups of sequential
 *   procedures are transformed to state machines that handle the sequential enabling.
 * Simplification is done bottom-up. Because of the bottom-up traversal strategy, every process element can safely assume 
 *   its children have already been visited and hence, are in the aforementioned format.
 *
 * NOTE: 'procedure x() { enabled{} }' and
 *       'extend entity xStatus() { enabled{} }' both end up in the entity xStatus
 */

module org/webdsl/dsl/modules/procedures/process

imports
  libstrategolib
  libwebdsl-front

strategies // for testing process translations
  
  do-only-strategy = repeat(innermost-rep(just-process))
    
  just-process = transform-procedure
  just-process = where(<do-once(process-extend-status-entity|"Extend status entity")> None())
  
/*strategies // hooking into rest of the system

  desugar = transform-procedure
  desugar = where(<do-once(process-extend-status-entity|"Extend status entity")> None())
*/  
strategies // extending the status entity

  process-extend-status-entity = 
    <emit-webdsl-code> def|[
        extend entity ProcedureStatus {
          caller -> ProcedureStatus
          returnstate :: Int
          function enable (c: ProcedureStatus, r: Int) {
            this.enabled := true;
            this.caller := c;
            this.returnstate := r;
            this.enabled();
          }
          function disable () {
            this.enabled := false;
            this.disabled();
          }
        }
      ]|
  
rules // actual transformation

  transform-procedure :
    Procedure(x_id, arg, elem1*) -> Procedure(x_id, arg, elem2*)
    where {| ProcedureName : rules(ProcedureName := x_id)
           ; <transform-procedure-process> <fetch-elem(?ProcedureProcess)> elem1*
           ; elem2* := <filter(not(?ProcedureProcess))> elem1*
           |}
  
  transform-procedure :
    AutoProcedure(x_id, arg, elem1*) -> AutoProcedure(x_id, arg, elem2*)
    where {| ProcedureName : rules(ProcedureName := x_id)
           ; <transform-procedure-process> <fetch-elem(?ProcedureProcess)> elem1*
           ; elem2* := <filter(not(?ProcedureProcess))> elem1*
           |}
           
  transform-procedure-process =
    ?ProcedureProcess(e)
    ; !e
    ; bottomup(try(process-simplify))   // transforms complex procedure constructs to singular procedures
    ; process-sequential
    
strategies // handle sequential composition - only to be done after simplification of containing constructs
    
  process-sequential =
    info(|"Doing sequential")
    ; collect-all(?ProcCall(_,_)) 
      // [ProcCall("employeeFillInForm",Var("p")),ProcCall("finalizeReport",Var("p")),ProcCall("approveReport",Var("p"))]
    ; {| State
       : stat1* := <map(get-sequential-proccall)>
       ; x_current := <get-state>
       ; last := |[ if (state = x_current) { this.processed(); } ]|
       ; stat2* := [stat1*, last]
       |}
    ; x_status := <concat-strings> [<ProcedureName>, "Status"]
    ; x_o := <ProcedureArg> <ProcedureName>
    ; srt := <ProcedureArgSort> <ProcedureName>
    ; <emit-webdsl-code> def|[
        extend entity x_status {
          x_o -> srt
          function next(state: Int) {
            stat2*
          }
        }
      ]|
      
strategies // simplification of complex constructs

  process-simplify =
    (process-if
    <+ process-if-no-else
    <+ process-and
    <+ process-xor
    <+ process-plus
    <+ process-while
    <+ process-repeat-until)

  process-if :
    ProcIf(e, ifBranch, elseBranch) -> ProcCall(x_new, x_o)
    where x_id := <ProcedureName>
        ; x_o := <ProcedureArg> x_id
        ; srt := <ProcedureArgSort> x_id
        ; x_status := <concat-strings> [x_id, "Status"]
        ; x_new := <newname> "ifProc"
        ; x_newstatus := <concat-strings> [x_new, "Status"]
                
        // create next function, remembering if and else start states
        ; ifProcCalls := <collect-all(?ProcCall(_,_))> ifBranch
        ; elseProcCalls := <collect-all(?ProcCall(_,_))> elseBranch
        ; {| State
           : x_ifStartState := <get-state>
           ; <debug> ifBranch
           ; statIfTemp* := <map(get-sequential-proccall)> ifProcCalls
           ; x_ifEndState := <get-state>
           ; lastIf := |[ if (state = x_ifEndState) { this.processed(); } ]|
           ; stat1* := [statIfTemp*, lastIf]
           
           ; x_elseStartState := <get-next-state>
           ; statElseTemp* := <map(get-sequential-proccall)> elseProcCalls
           ; x_elseEndState := <get-state>
           ; lastElse := |[ if (state = x_elseEndState) { this.processed(); } ]|
           ; stat2* := [statElseTemp*, lastElse]
           |}
       
        // create disable function; disables all descending ProcCalls
        ; stat3* := <map(get-disable-proccall)> ifProcCalls
        ; stat4* := <map(get-disable-proccall)> elseProcCalls
        
        // create new procedure to replace if-construct
        ; <emit-webdsl-code> def|[
            auto procedure x_new(x_o : srt) {
              enabled {
                if (e) {
                  this.enableIf();
                } else {
                  this.enableElse();
                }
              }
              disabled {
                disableIf();
                disableElse();
              }
            }
          ]|
        
        // output next function
        ; <emit-webdsl-code> def|[
            extend entity x_newstatus {
              x_o -> srt
              function enableIf() {
                this.next(x_ifStartState);
              }
              function enableElse() {
                this.next(x_elseStartState);
              }
              function disableIf() {
                stat3*
              }
              function disableElse() {
                stat4*
              }
              function next(state: Int) {
                stat1*
                stat2*
              }
            }
          ]|          

  process-if-no-else :
    ProcIfNoElse(e, ifBranch) -> ProcCall(x_new, x_o)
    where x_id := <ProcedureName>
        ; x_o := <ProcedureArg> x_id
        ; srt := <ProcedureArgSort> x_id
        ; x_status := <concat-strings> [x_id, "Status"]
        ; x_new := <newname> "ifProc"
        ; x_newstatus := <concat-strings> [x_new, "Status"]

        // create next function, remembering if and else start states
        ; ifProcCalls := <collect-all(?ProcCall(_,_))> ifBranch
        ; {| State
           : x_ifStartState := <get-state>
           ; <debug> ifBranch
           ; statIfTemp* := <map(get-sequential-proccall)> ifProcCalls
           ; x_ifEndState := <get-state>
           ; lastIf := |[ if (state = x_ifEndState) { this.processed(); } ]|
           ; stat1* := [statIfTemp*, lastIf]
           |}

        // create disable function; disables all descending ProcCalls
        ; stat3* := <map(get-disable-proccall)> ifProcCalls

        // create new procedure to replace if-construct
        ; <emit-webdsl-code> def|[
            auto procedure x_new(x_o : srt) {
              enabled {
                if (e) {
                  this.enableIf();
                } else {
                  this.processed();
                }
              }
              disabled {
                disableIf();
              }
            }
          ]|

        // output next function
        ; <emit-webdsl-code> def|[
            extend entity x_newstatus {
              x_o -> srt
              function enableIf() {
                this.next(x_ifStartState);
              }
              function disableIf() {
                stat3*
              }
              function next(state: Int) {
                stat1*
              }
            }
          ]|

  process-and :
    ProcAND(branch1, branch2) -> ProcCall(x_new, x_o)
    where x_id := <ProcedureName>
        ; x_o := <ProcedureArg> x_id
        ; srt := <ProcedureArgSort> x_id
        ; x_status := <concat-strings> [x_id, "Status"]
        ; x_new := <newname> "andProc"
        ; x_newstatus := <concat-strings> [x_new, "Status"]

        // create next function, remembering branch start states
        ; branch1ProcCalls := <collect-all(?ProcCall(_,_))> branch1
        ; branch2ProcCalls := <collect-all(?ProcCall(_,_))> branch2
        ; {| State
           : x_branch1StartState := <get-state>
           ; <debug> branch1
           ; stat1Temp* := <map(get-sequential-proccall)> branch1ProcCalls
           ; x_branch1EndState := <get-state>
           ; lastBranch1 := |[ 
               if (state = x_branch1EndState) { 
                 if (this.otherBranch = 0) {
                   this.otherBranch := 1;
                 } else {
                   this.processed(); 
                 }
               } 
             ]|
           ; stat1* := [stat1Temp*, lastBranch1]

           ; x_branch2StartState := <get-next-state>
           ; stat2Temp* := <map(get-sequential-proccall)> branch2ProcCalls
           ; x_branch2EndState := <get-state>
           ; lastBranch2 := |[ 
               if (state = x_branch2EndState) { 
                 if (this.otherBranch = 0) {
                   this.otherBranch := 1;
                 } else {
                   this.processed(); 
                 }
               } 
             ]|
           ; stat2* := [stat2Temp*, lastBranch2]
           |}
      
        // create disable functions; disables all descending ProcCalls
        ; stat3* := <map(get-disable-proccall)> branch1ProcCalls
        ; stat4* := <map(get-disable-proccall)> branch2ProcCalls
       
        // create new procedure to replace AND-construct
        ; <emit-webdsl-code> def|[
            auto procedure x_new(x_o : srt) {
              enabled {
                this.enable1();
                this.enable2();
              }
              disabled {
                disable1();
                disable2();
              }
            }
          ]|
        ; <emit-webdsl-code> def|[
            extend entity x_newstatus {
              x_o -> srt
              otherBranch :: Int := 0
              function enable1() {
                this.next(x_branch1StartState);
              }
              function enable2() {
                this.next(x_branch2StartState);
              }
              function disable1() {
                stat3*
              }
              function disable2() {
                stat4*
              }
              function next(state: Int) {
                stat1*
                stat2*
              }
            }
          ]|
                    
  process-xor :
    ProcOR(branch1, branch2) -> ProcCall(x_new, x_o)
    where x_id := <ProcedureName>
        ; x_o := <ProcedureArg> x_id
        ; srt := <ProcedureArgSort> x_id
        ; x_status := <concat-strings> [x_id, "Status"]
        ; x_new := <newname> "xorProc"
        ; x_newstatus := <concat-strings> [x_new, "Status"]

        // create next function, remembering branch start states
        ; branch1ProcCalls := <collect-all(?ProcCall(_,_))> branch1
        ; branch2ProcCalls := <collect-all(?ProcCall(_,_))> branch2
        ; {| State
           : x_branch1StartState := <get-state>
           ; <debug> branch1
           ; stat1Temp* := <map(get-sequential-proccall)> branch1ProcCalls
           ; x_branch1EndState := <get-state>
           ; lastBranch1 := |[ if (state = x_branch1EndState) { this.disable2(); this.processed(); } ]|
           ; stat1* := [stat1Temp*, lastBranch1]

           ; x_branch2StartState := <get-next-state>
           ; stat2Temp* := <map(get-sequential-proccall)> branch2ProcCalls
           ; x_branch2EndState := <get-state>
           ; lastBranch2 := |[ if (state = x_branch2EndState) { this.disable1(); this.processed(); } ]|
           ; stat2* := [stat2Temp*, lastBranch2]
           |}

        // create disable function; disables all descending ProcCalls
        ; stat3* := <map(get-disable-proccall)> branch1ProcCalls
        ; stat4* := <map(get-disable-proccall)> branch2ProcCalls

        // create new procedure to replace XOR-construct
        ; <emit-webdsl-code> def|[
            auto procedure x_new(x_o : srt) {
              enabled {
                this.enable1();
                this.enable2();
              }
              disabled {
                disable1();
                disable2();
              }
            }
          ]|
        ; <emit-webdsl-code> def|[
            extend entity x_newstatus {
              x_o -> srt
              function enable1() {
                this.next(x_branch1StartState);
              }
              function enable2() {
                this.next(x_branch2StartState);
              }
              function disable1() {
                stat3*
              }
              function disable2() {
                stat4*
              }
              function next(state: Int) {
                stat1*
                stat2*
              }
            }
          ]|  
              
  // deferred choice; disables other branch when first event within branch has been completed
  process-plus = fail
  /*:
      ProcPLUS(branch1, branch2) -> ProcCall(x_new, x_o)
      where x_id := <ProcedureName>
          ; x_o := <ProcedureArg> x_id
          ; srt := <ProcedureArgSort> x_id
          ; x_status := <concat-strings> [x_id, "Status"]
          ; x_new := <newname> "plusProc"
          ; x_newstatus := <concat-strings> [x_new, "Status"]

          // create next function, remembering branch start states
          ; branch1ProcCalls := <collect-all(?ProcCall(_,_))> branch1
          ; branch2ProcCalls := <collect-all(?ProcCall(_,_))> branch2
          ; {| State
             : x_branch1StartState := <get-state>
             ; <debug> branch1
             ; stat1Temp* := <map(get-sequential-proccall)> branch1ProcCalls
             ; x_branch1EndState := <get-state>
             ; lastBranch1 := |[ if (state = x_branch1EndState) { this.disable2(); this.processed(); } ]|
             ; stat1* := [stat1Temp*, lastBranch1]

             ; x_branch2StartState := <get-next-state>
             ; stat2Temp* := <map(get-sequential-proccall)> branch2ProcCalls
             ; x_branch2EndState := <get-state>
             ; lastBranch2 := |[ if (state = x_branch2EndState) { this.disable1(); this.processed(); } ]|
             ; stat2* := [stat2Temp*, lastBranch2]
             |}

          // create disable function; disables all descending ProcCalls
          ; stat3* := <map(get-disable-proccall)> branch1ProcCalls
          ; stat4* := <map(get-disable-proccall)> branch2ProcCalls

          // create new procedure to replace XOR-construct
          ; <emit-webdsl-code> def|[
              auto procedure x_new(x_o : srt) {
                enabled {
                  this.enable1();
                  this.enable2();
                }
                disabled {
                  disable1();
                  disable2();
                }
              }
            ]|
          ; <emit-webdsl-code> def|[
              extend entity x_newstatus {
                x_o -> srt
                function enable1() {
                  this.next(x_branch1StartState);
                }
                function enable2() {
                  this.next(x_branch2StartState);
                }
                function disable1() {
                  stat3*
                }
                function disable2() {
                  stat4*
                }
                function next(state: Int) {
                  stat1*
                  stat2*
                }
              }
            ]|*/
  
  process-while :
    ProcWhile(e, loopBody) -> ProcCall(x_new, x_o)
    where x_id := <ProcedureName>
        ; x_o := <ProcedureArg> x_id
        ; srt := <ProcedureArgSort> x_id
        ; x_status := <concat-strings> [x_id, "Status"]
        ; x_new := <newname> "whileProc"
        ; x_newstatus := <concat-strings> [x_new, "Status"]

        // create next function, remembering start states
        ; loopProcCalls := <collect-all(?ProcCall(_,_))> loopBody
        ; {| State
           : x_loopStartState := <get-state>
           ; <debug> loopBody
           ; statLoopTemp* := <map(get-sequential-proccall)> loopProcCalls
           ; x_loopEndState := <get-state>
           ; lastLoop := |[ 
               if (state = x_loopEndState) { 
                 if (e) {
                   this.enableLoopBody();
                 } else {
                   this.processed(); 
                 }
               } 
             ]|
           ; stat1* := [statLoopTemp*, lastLoop]
           |}

        // create disable function; disables all descending ProcCalls
        ; stat3* := <map(get-disable-proccall)> loopProcCalls

        // create new procedure to replace while-construct
        ; <emit-webdsl-code> def|[
            auto procedure x_new(x_o : srt) {
              enabled {
                if (e) {
                  this.enableLoopBody();
                } else {
                  this.processed();
                }
              }
              disabled {
                disableLoopBody();
              }
            }
          ]|
        ; <emit-webdsl-code> def|[
            extend entity x_newstatus {
              x_o -> srt
              function enableLoopBody() {
                this.next(x_loopStartState);
              }
              function disableLoopBody() {
                stat3*
              }
              function next(state: Int) {
                stat1*
              }
            }
          ]|
    
  process-repeat-until :
    ProcRepeatUntil(branch1, branch2) -> ProcCall(x_new, x_o)
    where x_id := <ProcedureName>
        ; x_o := <ProcedureArg> x_id
        ; srt := <ProcedureArgSort> x_id
        ; x_status := <concat-strings> [x_id, "Status"]
        ; x_new := <newname> "repeatUntilProc"
        ; x_newstatus := <concat-strings> [x_new, "Status"]

        // create next function, remembering branch start states
        ; branch1ProcCalls := <collect-all(?ProcCall(_,_))> branch1
        ; branch2ProcCalls := <collect-all(?ProcCall(_,_))> branch2
        ; {| State
           : x_branch1StartState := <get-state>
           ; <debug> branch1
           ; stat1Temp* := <map(get-sequential-proccall)> branch1ProcCalls
           ; x_branch1EndState := <get-state>
           ; lastBranch1 := |[ 
               if (state = x_branch1EndState) { 
                 this.enable1(); 
               } 
             ]|
           ; stat1* := [stat1Temp*, lastBranch1]

           ; x_branch2StartState := <get-next-state>
           ; stat2Temp* := <map(get-sequential-proccall)> branch2ProcCalls
           ; x_branch2EndState := <get-state>
           ; lastBranch2 := |[ 
               if (state = x_branch2EndState) { 
                 this.disable1();
                 this.processed(); 
               } 
             ]|
           ; stat2* := [stat2Temp*, lastBranch2]
           |}

        // create disable function; disables all descending ProcCalls
        ; stat3* := <map(get-disable-proccall)> branch1ProcCalls
        ; stat4* := <map(get-disable-proccall)> branch2ProcCalls

        // create new procedure to replace XOR-construct
        ; <emit-webdsl-code> def|[
            auto procedure x_new(x_o : srt) {
              enabled {
                this.enable1();
                this.enable2();
              }
              disabled {
                disable1();
                disable2();
              }
            }
          ]|
        ; <emit-webdsl-code> def|[
            extend entity x_newstatus {
              x_o -> srt
              function enable1() {
                this.next(x_branch1StartState);
              }
              function enable2() {
                this.next(x_branch2StartState);
              }
              function disable1() {
                stat3*
              }
              function disable2() {
                stat4*
              }
              function next(state: Int) {
                stat1*
                stat2*
              }
            }
          ]|

strategies  // Helper strategies

  get-sequential-proccall =
    ?ProcCall(x1, x_id)
    ; x_current := <get-state>
    ; x_next := <get-next-state>
    ; !webdsl|[ if (state = x_current) { x_id.x1.enable(this, x_next); } ]|

  get-disable-proccall =
    ?ProcCall(x1, x_id)
    ; !webdsl|[ x_id.x1.disable(); ]|

  get-state =
    State <+ !0

  get-next-state =
    n := <get-state; inc>
    ; rules ( State := n )

strategies // Utility strategies
  
  fetch-left-most-td(s) = oncetd(s; ?x); !x

  find-right-most-td(s) = rec x(s <+ where(id#(reverse); one(x)))
  
  fetch-right-most-td(s) = find-right-most-td(s; ?x); !x

