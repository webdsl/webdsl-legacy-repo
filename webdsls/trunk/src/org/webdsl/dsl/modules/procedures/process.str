module org/webdsl/dsl/modules/procedures/process

imports
  libstrategolib
  libwebdsl-front

  signature
    constructors
      ProcProcessed : ProcedureElement * ProcedureElement -> ProcedureElement

strategies
  
  before-template-expansion = 
    process-to-extend-procedures
    ; fail
    
  process-to-extend-procedures = 
    bottomup(try(
      if-to-extend-procedures
      <+ if-no-else-to-extend-procedures
      <+ or-to-extend-procedures
      <+ and-to-extend-procedures
      <+ plus-to-extend-procedures
      <+ while-to-extend-procedures
      <+ sequential-to-extend-procedures
    ))
      
//tijdelijk
strategies

    if-to-extend-procedures = fail
    if-no-else-to-extend-procedures = fail
    or-to-extend-procedures = fail
    and-to-extend-procedures = fail
    plus-to-extend-procedures = fail
    while-to-extend-procedures = fail
      

// transforming to connected sequential parts   
rules
/*
  if-to-extend-procedures :
    ProcIf(exp, ifBranch, elseBranch) -> ProcProcessed(ifSplit, ifJoin)
    where
        firstIf := <fetch-left-most-td(is-process-call)> ifBranch
      ; lastIf := <fetch-right-most-td(is-process-call)> ifBranch
      ; firstElse := <fetch-left-most-td(is-process-call)> elseBranch
      ; lastElse := <fetch-right-most-td(is-process-call)> elseBranch
      ; x_id := <get-process-id> <fetch-left-most-td(is-process-call)> ifBranch
      ; x_o := <ProcedureArg> x_id
      ; srt := <ProcedureArgSort> x_id
      ; x_split := <newname> "ifSplit"
      ; x_join := <newname> "ifJoin"
      ; ifSplit := def|[
          procedure x_split(x_o : srt) {
            enabled {
              if (exp) {
                ifBranch.enable();
              } else {
                elseBranch.enable();
              }
            }
          }
        ]|
      ; <emit-webdsl-code> ifSplit
      ; ifJoin := def|[
          procedure x_join(x_o : srt) {  }
        ]|
      ; <emit-webdsl-code> ifJoin
      ; <connect-to(|ifJoin)> lastIf
      ; <connect-to(|ifJoin)> lastElse
 
  if-no-else-to-extend-procedures :
    ProcIfNoElse(exp, ifBranch) -> ProcProcessed(ifSplit, ifJoin)
    where
        firstIf := <fetch-left-most-td(is-process-call)> ifBranch
      ; lastIf := <fetch-right-most-td(is-process-call)> ifBranch
      ; x_id := <get-process-id> <fetch-left-most-td(is-process-call)> ifBranch
      ; x_o := <ProcedureArg> x_id
      ; srt := <ProcedureArgSort> x_id
      ; x_split := <newname> "ifSplit"
      ; x_join := <newname> "ifJoin"
      ; ifSplit := def|[
          procedure x_split(x_o : srt) {
            enabled {
              if (exp) {
                ifBranch.enable();
              }
            }
          }
        ]|
      ; <emit-webdsl-code> ifSplit
      ; ifJoin := def|[
          procedure x_join(x_o : srt) {  }
        ]|
      ; <emit-webdsl-code> ifJoin
      ; <connect-to(|ifJoin)> lastIf
      */
      
/*
  
  or-to-extend-procedures :
    ProcOR(process1, process2) -> ProcGenerated(orSplit, orJoin)
    where
      generatedName := <newname> "generatedProc"
      ; orSplit := def|[
          procedure generatedName {
            enabled {
              process1.enable();
              process2.enable();
            }
          }
        ]|
      ; orJoin := <generate-empty-procedure>
      ; <connect-to(|orJoin)> process1
      ; <connect-to(|orJoin)> process2

  and-to-extend-procedures = 
    id

  plus-to-extend-procedures = 
    id

  while-to-extend-procedures = 
    id
    
strategies

  generate-empty-procedure =
    generatedName := <newname> "generatedProc"
    ; <emit-webdsl-code> def|[
        procedure generatedName { }
      ]|
*/

// connecting procedures
rules

  sequential-to-extend-procedures :
    ProcSeq(leftProc, rightProc) ->
      ProcSeq(leftProc, rightProc)
    where 
      info(|"Connecting sequential procedures: ")
      ; debug
      ; <connect-to(|rightProc)> leftProc
      ; info(|"Connecting finished")
      
  connect-to(|rightProc) =  
    ?leftProc
    ; x_id := <get-process-id> <fetch-right-most-td(is-process-call)> leftProc
    ; x_o := <ProcedureArg> x_id
    ; srt := <ProcedureArgSort> x_id
    ; x_enable := <get-process-id> <fetch-left-most-td(is-process-call)> rightProc
    ; <emit-webdsl-code> def|[
        extend procedure x_id(x_o : srt) {
          enabled {
            x_o.x_enable.enable();
          }
        }
      ]|
    ; info(|["Connected ", x_id, " with ", x_enable])
    ; !leftProc

/*
  connect-to(|rightProc) = 
    ?leftProc
    ; x_id := <get-process-id> <fetch-right-most-td(is-proccall)> leftProc
    ; x_o := <ProcedureArg> x_id
    ; srt := <ProcedureArgSort> x_id
    ; x_enable := <get-process-id> <fetch-left-most-td(is-process-element)> rightProc
    ; <emit-webdsl-code> def|[
        extend procedure x_id(x_o : srt) {
          processed {
            x_o.x_enable.enable();
          }
        }
      ]|
    ; !leftProc  
    ; info(|"connect-to done")
*/
// util - fetching left-most and right-most elements
strategies

  get-process-id = 
    get-ProcCall-id
/*    <+ get-ProcSeq-id
    <+ get-ProcWhile-id
    <+ get-ProcIf-id
    <+ get-ProcIfNoElse-id
    <+ get-ProcOR-id
    <+ get-ProcAND-id
    <+ get-ProcPLUS-id
    <+ get-ProcGenerated-id*/
  
  get-ProcCall-id :
    ProcCall(x_id, _) -> x_id
/*    
  get-ProcSeq-id :
    ProcSeq(x_id, _) -> x_id

  get-ProcWhile-id :
    ProcWhile(x_id, _) -> x_id
    
  get-ProcIf-id :
    ProcIf(x_id, _, _) -> x_id
    
  get-ProcIfNoElse-id :
    ProcIfNoElse(x_id, _) -> x_id
    
  get-ProcOR-id :
    ProcOR(x_id, _) -> x_id
    
  get-ProcAND-id :
    ProcAND(x_id, _) -> x_id
  
  get-ProcPLUS-id :
    ProcPLUS(x_id, _) -> x_id*/
  
  is-process-call =
    ?ProcCall(_, _)
  
/*  is-process-element = 
    ?ProcCall(_, _)
    <+ ?ProcSeq(_, _)
    <+ ?ProcWhile(_, _)
    <+ ?ProcIf(_, _, _)
    <+ ?ProcIfNoElse(_, _)
    <+ ?ProcOR(_, _)
    <+ ?ProcAND(_, _)
    <+ ?ProcPLUS(_, _)
    <+ ?ProcGenerated(_, _)
*/  
  fetch-left-most-td(s) = oncetd(s; ?x); !x

  find-right-most-td(s) = rec x(s <+ where(id#(reverse); one(x)))
  
  fetch-right-most-td(s) = find-right-most-td(s; ?x); !x