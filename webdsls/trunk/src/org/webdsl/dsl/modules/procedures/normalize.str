module org/webdsl/dsl/modules/procedures/normalize

imports
  libstrategolib
  libwebdsl-front

rules // Normalization

  Desugar :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where [] := <filter(?procelem|[ who { e } ]|)> procelem*
        ; procelem2* := [procelem|[ who { true } ]| | procelem*]

  Desugar :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where [] := <filter(?procelem|[ when { e } ]|)> procelem*
        ; procelem2* := [procelem|[ when { true } ]| | procelem*]

  Desugar :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where [] := <filter(?procelem|[ do { stat* } ]|)> procelem*
        ; procelem2* := [procelem|[ do {} ]| | procelem*]
/*
  Desugar :
    def|[ workflow x_id (x_o : srt) { procelem* }]| -> def|[ workflow x_id(x_o : srt) { procelem2* } ]|
    where [] := <filter(?procelem|[ who { e } ]|)> procelem*
        ; procelem2* := [procelem|[ who { true } ]| | procelem*]

  Desugar :
    def|[ workflow x_id (x_o : srt) { procelem* }]| -> def|[ workflow x_id(x_o : srt) { procelem2* } ]|
    where [] := <filter(?procelem|[ when { e } ]|)> procelem*
        ; procelem2* := [procelem|[ when { true } ]| | procelem*]

  Desugar :
    def|[ workflow x_id (x_o : srt) { procelem* }]| -> def|[ workflow x_id(x_o : srt) { procelem2* } ]|
    where [] := <filter(?procelem|[ init { stat* } ]| <+ ?procelem|[ init(farg*) { stat* } ]|)> procelem*
        ; procelem2* := [procelem|[ init {} ]| | procelem*]

  Desugar :
    procelem|[ init { stat* } ]| -> procelem|[ init() { stat* } ]|
*/
rules // Further desugarings

  Desugar :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where {| OpArg
           : rules ( OpArg := x_o )
           ; procelem2* := <manytd(desugar-status)> procelem*
           |}

  desugar-status :
    Var("status") -> Var(oparg)
    where oparg := <OpArg>

  desugar-status :
    Qualified("status", f) -> Qualified(oparg, f)
    where oparg := <OpArg>

  Desugar :
    def|[ status x_id { prop* fun* } ]| -> def|[ extend entity x_id { prop* fun* } ]|

  Desugar : // make the doAction() callable as do()
    exp|[ do() ]| -> exp|[ doAction() ]|

  Desugar :
    exp|[ e.start(e*) ]| -> exp|[ x(e1, e*) ]|
    where SimpleSort("WorkflowStatus") := <type-of> e
        ; FieldAccess(e1, wf) := e
        ; x := <concat-strings> ["new", <capitalize-string> wf]
