module org/webdsl/dsl/modules/procedures/normalize

imports
  libstrategolib
  libwebdsl-front

rules // Normalization

  desugar = normalize
  
rules // Normalize: add missing blocks

  // add missing enabled block
  normalize :
    def|[ auto procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]| 
    where [] := <filter(?procelem|[ enabled { stat* } ]|)> procelem* 
        ; [] := <filter(?procelem|[ process { processexp } ]|)> procelem* 
    with  procelem2* := [procelem|[ enabled { this.do(); } ]| | procelem*]

  normalize :
    def|[ auto procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]| 
    where [] := <filter(?procelem|[ enabled { stat* } ]|)> procelem* 
        ; not([] := <filter(?procelem|[ process { processexp } ]|)> procelem*)
    with  procelem2* := [procelem|[ enabled { this.next(0); } ]| | procelem*]
    
  // ... enabled
  normalize : 
    def|[ auto procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where [el] := <filter(?procelem|[ enabled { stat* } ]|)> procelem*
        ; [] := <filter(?procelem|[ process { processexp } ]|)> procelem* 
    with  procelem2* := [procelem|[ enabled { stat* this.do(); } ]| | <remove-all(?procelem|[ enabled { stat* } ]|)> procelem*]

  normalize : 
    def|[ auto procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where [el] := <filter(?procelem|[ enabled { stat* } ]|)> procelem*
        ; not([] := <filter(?procelem|[ process { processexp } ]|)> procelem*)
    with procelem2* := [procelem|[ enabled { stat* this.next(0); } ]| | <remove-all(?procelem|[ enabled { stat* } ]|)> procelem*]
  // ... who
  normalize :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where [] := <filter(?procelem|[ who { e } ]|)> procelem*
        ; procelem2* := [procelem|[ who { true } ]| | procelem*]

  // ... when
  normalize :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where [] := <filter(?procelem|[ when { e } ]|)> procelem*
        ; procelem2* := [procelem|[ when { true } ]| | procelem*]

  // ... do
  normalize :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where [] := <filter(?procelem|[ do { stat* } ]|)> procelem*
        ; procelem2* := [procelem|[ do {} ]| | procelem*]

rules // Further normalizing

  /*
  normalize :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> <rename-all> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where procelem2* := <manytd(normalize-object-param(|<strip-annos> x_o))> procelem*

  */

  normalize : // make the doAction() callable as do()
    exp|[ do() ]| -> exp|[ doAction() ]|

  normalize :
    exp|[ e.start(e*) ]| -> exp|[ x(e1, e*) ]|
    where SimpleSort("WorkflowStatus") := <type-of> e
        ; FieldAccess(e1, wf) := e
        ; x := <concat-strings> ["new", <capitalize-string> wf]

  /*
  normalize :
    exp|[ e.enable() ]| -> exp|[ x(e1) ]|
    where SimpleSort("ProcedureStatus") := <type-of> e
        ; FieldAccess(e1, ps) := e
        ; x := <concat-strings> [ps, "Enabled"]

  normalize :
    exp|[ e.disable() ]| -> exp|[ x(e1) ]|
    where SimpleSort("ProcedureStatus") := <type-of> e
        ; FieldAccess(e1, ps) := e
        ; x := <concat-strings> [ps, "Disabled"]

  normalize :
    exp|[ e.do() ]| -> exp|[ x(e1) ]|
    where SimpleSort("ProcedureStatus") := <type-of> e
        ; FieldAccess(e1, ps) := e
        ; x := <concat-strings> [ps, "Do"]
        */
