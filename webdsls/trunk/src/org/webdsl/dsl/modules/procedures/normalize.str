module org/webdsl/dsl/modules/procedures/normalize

imports
  libstrategolib
  libwebdsl-front

rules // Normalization

  normalize = normalize-procedures
  
rules // Normalize: add missing blocks

  // an auto procedure is rewritten to a normal procedure which is 'done' automatically when enabled (for non-generated procs)
  normalize-procedures : 
    def|[ auto procedure x_id (x_o : srt) { procelem_before* }]| -> def|[ procedure x_id(x_o : srt) { procelem_after* } ]|
    with ([el] := <filter(?procelem|[ enabled { stat* } ]|)> procelem_before* <+ stat* := [])
       ; if <IsGeneratedProcedure> x_id then
           stat2* := stat*
         else 
           stat_do* := <get-procedure-do-statements(|x_o, x_id)> procelem_before*
           ; stat2* := webdsl |[
               stat*
               stat_do*
             ]|
         end
       ; procelem_after* := [procelem|[ enabled { stat2* } ]| | <remove-all(?procelem|[ enabled { stat* } ]|)> procelem_before*]
       
/*   add-procedure-do :
     stat* -> webdsl|[
                stat*
                this.do();
              ]|*/

/*  // add missing enabled block
  normalize-procedures :
    def|[ auto procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]| 
    where [] := <filter(?procelem|[ enabled { stat* } ]|)> procelem* 
        ; [] := <filter(?procelem|[ process { processexp } ]|)> procelem* 
        ; not(<ProcedureHasProcess> x_id)
    with if <IsGeneratedProcedure> x_id then
           procelem2* := procelem*
         else
           procelem2* := [procelem|[ enabled { this.do(); } ]| | procelem*]
         end

  normalize-procedures :
    def|[ auto procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]| 
    where [] := <filter(?procelem|[ enabled { stat* } ]|)> procelem* 
        ; not([] := <filter(?procelem|[ process { processexp } ]|)> procelem*)
        ; <ProcedureHasProcess> x_id
    with  procelem2* := [procelem|[ enabled { this.next(0); } ]| | procelem*]
    
  // ... enabled
  normalize-procedures : 
    def|[ auto procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where [el] := <filter(?procelem|[ enabled { stat* } ]|)> procelem*
        ; [] := <filter(?procelem|[ process { processexp } ]|)> procelem* 
    with if <IsGeneratedProcedure> x_id then
           procelem2* := procelem*
         else
           procelem2* := [procelem|[ enabled { stat* this.do(); } ]| | <remove-all(?procelem|[ enabled { stat* } ]|)> procelem*]
         end

  normalize-procedures : 
    def|[ auto procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where [el] := <filter(?procelem|[ enabled { stat* } ]|)> procelem*
        ; not([] := <filter(?procelem|[ process { processexp } ]|)> procelem*)
    with procelem2* := [procelem|[ enabled { stat* this.next(0); } ]| | <remove-all(?procelem|[ enabled { stat* } ]|)> procelem*]
*/
    
  // ... who
  normalize-procedures :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { who { true } procelem* } ]|
    where 
      not(<fetch(?procelem|[ who { e } ]|)> procelem*)

  // ... when
  normalize-procedures :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { when { true } procelem* } ]|
    where 
      not(<fetch(?procelem|[ when { e } ]|)> procelem*)

  // ... do
  normalize-procedures :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> def|[ procedure x_id(x_o : srt) { do {} procelem* } ]|
    where 
      not(<fetch(?procelem|[ do { stat* } ]|)> procelem*)

rules // Further normalizing

/*
  normalize-procedures :
    def|[ procedure x_id (x_o : srt) { procelem* }]| -> <rename-all> def|[ procedure x_id(x_o : srt) { procelem2* } ]|
    where procelem2* := <manytd(normalize-object-param(|<strip-annos> x_o))> procelem*

*/

  normalize-procedures : // make the doAction() callable as do()
    exp|[ do() ]| -> exp|[ doAction() ]|

  normalize-procedures :
    exp|[ e.start(e*) ]| -> exp|[ x(e1, e*) ]|
    where SimpleSort("WorkflowStatus") := <type-of> e
        ; FieldAccess(e1, wf) := e
        ; x := <concat-strings> ["new", <capitalize-string> wf]

/*
  normalize-procedures :
    exp|[ e.enable() ]| -> exp|[ x(e1) ]|
    where SimpleSort("ProcedureStatus") := <type-of> e
        ; FieldAccess(e1, ps) := e
        ; x := <concat-strings> [ps, "Enabled"]

  normalize-procedures :
    exp|[ e.disable() ]| -> exp|[ x(e1) ]|
    where SimpleSort("ProcedureStatus") := <type-of> e
        ; FieldAccess(e1, ps) := e
        ; x := <concat-strings> [ps, "Disabled"]

  normalize-procedures :
    exp|[ e.do() ]| -> exp|[ x(e1) ]|
    where SimpleSort("ProcedureStatus") := <type-of> e
        ; FieldAccess(e1, ps) := e
        ; x := <concat-strings> [ps, "Do"]
*/
