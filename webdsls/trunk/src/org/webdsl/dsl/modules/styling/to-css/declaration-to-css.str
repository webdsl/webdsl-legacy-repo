module org/webdsl/dsl/modules/styling/to-css/declaration-to-css

imports 
  libstrategolib  
  libjava-front 
  libwebdsl-front
  
rules
  /**
   * Generate css declarations based on style declarations
   */

  styledeclaration-to-css :
    StyleDeclaration(StyleProperty("font"), StyleValue(sort, val*)) -> decl |( font-family : val; )|
    where v := StyleValue(<construct-font-names> val*)
        ; val := <style-values-to-css> v
    
  construct-font-names =
    ?[s|s*]
    ; !<concat-strings> ["'", <construct-font-name> s, " ", <construct-font-names> s*, "'"]

  construct-font-names :
    [s] -> <construct-font-name> s

  construct-font-name :
    StyleValueExtension(stval0) -> stval0
        

  styledeclaration-to-css :
    StyleDeclaration(StyleProperty("orientation"), StyleValue(sort, [StyleValueExtension("horizontal")])) ->
      decl* |(
        list-style : none;
        padding-left : 0;
      )|
      where ssel0 := <selector-to-css> <ThisSelector>
          ; <emit-css-rule>
              rule |(
		        ssel0 > li {
		          float: left;
		        }
		      )|
  
  styledeclaration-to-css :
    StyleDeclaration(StyleProperty("separator"), StyleValue(sort, [StyleValueExtension("pipe")])) -> []
    where ssel0 := <selector-to-css> <ThisSelector>
        ; <emit-css-rules>
            rule* |(
		      ssel0 > li:before {
		        content: '|';
		      }
		      ssel0 > li:first-child:before {
		        content: '';
		        margin-right: 0;
		      }
		    )|

  styledeclaration-to-css :// @todo: rename to spacing and set on listitem()
    StyleDeclaration(StyleProperty("separator-space"), StyleValue(value, unit)) -> []
    where ssel0 := <selector-to-css> <ThisSelector>
        ; i := <string-to-int> value
        ; val := <div> (i, 2)
        ; <emit-css-rules>
            rule* |(
		      ssel0 > li:before {
		        margin-right: val unit;
		        margin-left: val unit;
		      }
		    )|

      
