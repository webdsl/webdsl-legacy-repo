module org/webdsl/dsl/modules/styling/default-style/form

imports
  libstrategolib

imports
  libwebdsl-front

rules

  default-style =
    ?call |[ form()[passign*] { elem* } ]|
    ; where ( 
      {| ThisSelector
       : stsel0 := stsel |[ form() ]|
       ; stsel1 := stsel |[ group() ]|
       ; stsel2 := <add-simple-selector> (stsel1, |[ > groupitem() ]| )
       ; stsel3 := <add-simple-selector> (stsel2, |[ >> label() ]| )
       ; stsel4 := <add-simple-selector> (stsel2, |[ >> input ]| )
       ; rules ( ThisSelector := stsel0 )

       ; <alltd(default-style)> elem*
       ; not( <elem> ("form", <bagof-ProcessedElements> ) )
       
       ; ststat0* := <map(set-style-property); flatten-list>
                     [ ststat |[ margin-top := 0; ]|,
				       ststat |[ padding-top := 0; ]|,
				       ststat |[ width := (stsel1).padding-left +
		                                  (stsel1).padding-right +
		                                  (stsel3).margin-right +
		                                  (stsel3).width +
		                                  (stsel4).width * (stsel4).font-size +
		                                  (stsel4).border-right-width +
		                                  (stsel4).border-left-width; ]| ]
       ; <declare-style-definition; emit-style-definition> |[ stsel0 { ststat0* } ]|

       
       ; stsel5 := <add-simple-selector> (stsel0, |[ >> .fieldset_action_ ]| )
       ; stsel6 := <add-simple-selector> (stsel5, |[ >> action() ]| )
       ; stsel8 := <add-simple-selector> (stsel0, |[ > ol ]| )
       
       ; rules ( ThisSelector := stsel5 )
       ; ststat1* := <map(set-style-property); flatten-list>
                     [ ststat |[ padding-left := (stsel1).padding-left - (stsel6).margin-left; ]|,
                       ststat |[ padding-right := (stsel1).padding-right; ]|,
                       ststat |[ padding-top := 0.2em; ]|,
                       ststat |[ padding-bottom := 0.2em; ]|,
                       ststat |[ float := none; ]|,
                       ststat |[ border-style := BorderStyle.none; ]|,
                       ststat |[ border-color := Color.white; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel5 { ststat1* } ]|
       
       ; rules ( ThisSelector := stsel6 )
       ; ststat2* := <flatten-list>
                     [ <set-style-property> ststat |[ margin-left := 0.3em; ]|,
                       <set-style-property> ststat |[ align := Align.right; ]|,
                       <set-style-property> ststat |[ border-style := BorderStyle.solid; ]|,
                       <set-style-property> ststat |[ border-width := 1px; ]|,
                       <set-style-property> ststat |[ border-color := Color.grey; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel6 { ststat2* } ]|
       
       ; rules ( ThisSelector := stsel8 )
       ; ststat4* := <flatten-list>
                     [ <set-style-property> ststat |[ width := 100%; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel8 { ststat4* } ]|
       
       ; stsel7 := <add-simple-selector> (stsel2, |[ > div ]| )
       ; rules ( ThisSelector := stsel7 )
       ; ststat3* := <flatten-list>
                     [ <set-style-property> ststat |[ display := inline; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel7 { ststat3* } ]|
       
       ; rules ( ProcessedElements :+= "form" )
       |} )
  
  

  
  default-style =
    ?call |[ group(e*)[passign*] { elem* } ]|
    ; where (
      {| ThisSelector
       : stsel0 := stsel |[ group() ]|
       ; rules ( ThisSelector := stsel0 )
        
       ; <alltd(default-style)> elem*
       ; not( <elem> ("group", <bagof-ProcessedElements> ) )
       
       ; ststat0* := <map(set-style-property); flatten-list>
                     [ ststat |[ padding-top := 0.5em; ]|,
				       ststat |[ padding-right := 1em; ]|,
				       ststat |[ padding-bottom := 0.5em; ]|,
				       ststat |[ padding-left := 1em; ]|,
				       ststat |[ margin-bottom := 1em; ]|,
				       ststat |[ margin-left := 0; ]|,
				       ststat |[ margin-right := 0; ]|,
                       ststat |[ border-style := none; ]|,
				       ststat |[ border-top-style := solid; ]|,
				       ststat |[ border-bottom-style := solid; ]|,
				       ststat |[ border-top-width := 1px; ]|,
				       ststat |[ border-bottom-width := 1px; ]|,
				       ststat |[ border-top-color := Color.black; ]|,
				       ststat |[ border-bottom-color := Color.black; ]|,
                       ststat |[ background-color := Color.white; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel0 { ststat0* } ]|

       ; stsel1 := <add-simple-selector> (stsel0, |[ >> legend ]| )
       ; rules ( ThisSelector := stsel1 )
       ; ststat1* := <map(set-style-property); flatten-list>
                     [ ststat |[ background-color := Color.white; ]|,
                       ststat |[ font-weight := Weight.bold; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel1 { ststat1* } ]|

       ; stsel2 := <add-simple-selector> (stsel0, |[ > ol > li ]| )
       ; stsel3 := <add-simple-selector> (stsel2, |[ > ul ]| )
       
       ; rules ( ThisSelector := stsel2 )
       ; ststat2* := <map(set-style-property); flatten-list>
                     [ ststat |[ width := 100%; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel2 { ststat2* } ]|
       
       ; rules ( ThisSelector := stsel3 )
       ; ststat3* := <map(set-style-property); flatten-list>
                     [ ststat |[ padding-left := 0; ]|,
                       ststat |[ display := inline-block; ]|,
                       ststat |[ list-style-type := none; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel3 { ststat3* } ]|

       ; rules ( ProcessedElements :+= "group" )
       |}
      )

  default-style =
    ?call |[ label(e)[passign*] { elem* } ]|
    ; where (
      <alltd(default-style)> elem*
      ; not( <elem> ("label", <bagof-ProcessedElements> ) )
      ; {| ThisSelector
         : stsel0 := <add-simple-selector> (<ThisSelector>, |[ >> label() ]| )
         ; rules ( ThisSelector := stsel0 )
         ; ststat0* := <map(set-style-property); flatten-list>
                       [ ststat |[ width := 8em; ]|,
                         ststat |[ align := Align.right; ]|,
			             ststat |[ margin-right := 1em; ]| ]
         ; <declare-style-definition; emit-style-definition> stdef |[ stsel0 { ststat0* } ]|
         ; rules ( ProcessedElements :+= "label" )
         |}
      )
