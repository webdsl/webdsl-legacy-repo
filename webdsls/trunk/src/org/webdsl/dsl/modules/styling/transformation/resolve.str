module org/webdsl/dsl/modules/styling/transformation/resolve

imports
  libstrategolib
  libwebdsl-front

strategies

  resolve-style-properties =
    alltd(resolve-style)
  
  translate-style-properties =
    alltd(translate-style)
    
rules

  resolve-style :
    StyleDefinition(selector, stat1*) -> StyleDefinition(selector, stat2*)
    where {| ThisSelector
           : rules ( ThisSelector := selector )
           ; <debug> <pp-webdsl> selector
           ; stat2* := <desugar-top> stat1*
//           ; <pp-aterm(!"___stat2*: ")> stat2*
           ; <declare-style-definition> StyleDefinition(selector, stat2*)
           ; <debug> ""
           |}

  translate-style :
    StyleDefinition(selector, stat1*) -> StyleDefinition(selector, stat2*)
    where {| ThisSelector
           : rules ( ThisSelector := selector )
           ; stat2* := <filter(not(translate-style-decl))> stat1*
           ; <declare-style-definition> StyleDefinition(selector, stat2*)
           |}
           
rules

  desugar = resolve

rules

  resolve :
    SimpleSelector(MatchDefinition("form", _)) -> ElemSimpleSelector("form")
    where AfterProcessStyle
  
  resolve :
    SimpleSelector(MatchDefinition("fieldset", _)) -> ElemSimpleSelector("fieldset")
    where AfterProcessStyle
  
  resolve :
    SimpleSelector(MatchDefinition("group", _)) -> ElemSimpleSelector("fieldset")
    where AfterProcessStyle
  
  resolve :
    SimpleSelector(MatchDefinition("action", _)) -> ElemSimpleSelector("input")
    where AfterProcessStyle
  
  resolve :
    SimpleSelector(MatchDefinition("menubar", _)) -> ClassSimpleSelector("menubar")
    where AfterProcessStyle
      
  resolve :
    SimpleSelector(MatchDefinition("menu", _)) -> ElemSimpleSelector("ul")
    where AfterProcessStyle

  resolve :
    SimpleSelector(MatchDefinition("menuheader", _)) -> ElemSimpleSelector("li")
    where AfterProcessStyle
  
  resolve :
    SimpleSelector(MatchDefinition("list", _)) -> ElemSimpleSelector("ul")
    where AfterProcessStyle
  
  resolve :
    SimpleSelector(MatchDefinition("listitem", _)) -> ElemSimpleSelector("li")
    where AfterProcessStyle
  
  resolve :
    SimpleSelector(MatchDefinition("navigate", _)) -> ElemSimpleSelector("a")
    where AfterProcessStyle
    
  resolve :
    SimpleSelector(MatchDefinition("table", _)) -> ElemSimpleSelector("table")
    where AfterProcessStyle
  
  resolve :
    SimpleSelector(MatchDefinition("section", _)) -> ClassSimpleSelector("section")
    where AfterProcessStyle

  resolve :
    SimpleSelector(MatchDefinition("block", _)) -> ClassSimpleSelector("block")
    where AfterProcessStyle

  resolve :
    SimpleSelector(MatchDefinition("text", _)) -> ClassSimpleSelector("text")
    where AfterProcessStyle

  resolve :
    Selector(SimpleSelector(MatchDefinition("groupitem", _)), s*) -> Selector(ElemSimpleSelector("ol"), [(ChildCombinator, ElemSimpleSelector("li"), None)|s*])
    where AfterProcessStyle

  resolve :
    Selector(SimpleSelector(MatchDefinition("header", _)), l1) -> Selector(ElemSimpleSelector("h1"), l1)
    where AfterProcessStyle

  resolve :
    Selector(s, l1) -> Selector(s, l2)
    where AfterProcessStyle
        ; not( <?SimpleSelector(MatchDefinition("table", _))> s <+ <?ElemSimpleSelector("table")> s )
        ; l2 := <sometd(
                  {\ (c, SimpleSelector(MatchDefinition("header", _)), p)
                      -> (c, ElemSimpleSelector("h1"), p) \})> l1
      
  resolve :
    Selector(s, l1) -> Selector(s, l2)
    where AfterProcessStyle
        ; <sometd(?(_, SimpleSelector(MatchDefinition("table", _))))> l1
        ; l2 := <sometd(
                  {\ (c, SimpleSelector(MatchDefinition("header", _)), p)
                      -> (c, ElemSimpleSelector("th"), p) \})> l1
  
  resolve :
    Selector(s, l1) -> Selector(s, l2)
    where AfterProcessStyle
        ; ( <?SimpleSelector(MatchDefinition("table", _))> s <+ <?ElemSimpleSelector("table")> s )
        ; l2 := <sometd(
                  {\ (c, SimpleSelector(MatchDefinition("header", _)), p)
                      -> (c, ElemSimpleSelector("th"), p) \})> l1
  
  resolve :
    Selector(s, l1) -> Selector(s, l2)
    where AfterProcessStyle
        ; ( <?SimpleSelector(MatchDefinition("header", _))> s <+ <?ElemSimpleSelector("table")> s )
        ; <sometd(?(_, SimpleSelector(MatchDefinition("table", _))))> l1
        ; l2 := <sometd(
                  {\ (c, SimpleSelector(MatchDefinition("header", _)), p)
                      -> (c, ElemSimpleSelector("th"), p) \})> l1
                      
  resolve :
    Selector(s, l1) -> Selector(s, l2)
    where AfterProcessStyle
        ; l2 := <sometd(
                  {\ (c, SimpleSelector(MatchDefinition("groupitem", _)), p)
                      -> [(c, ElemSimpleSelector("ol"), None),
                          (ChildCombinator, ElemSimpleSelector("li"), p)]
                   \}); flatten-list> l1
/*    
  resolve :
    SimpleSelector(MatchDefinition("groupitem", _)) -> ElemSimpleSelector("li")
    where AfterProcessStyle
*/  
  resolve :
    SimpleSelector(MatchDefinition("label", _)) -> ElemSimpleSelector("label")
    where AfterProcessStyle

rules

  resolve :
    StylePropertyValue(MatchDefinition(name, farg*), prop) -> val
    where ThisSelector
        ; t* := <map(?Arg(_,<id>))> farg*
	    ; s := <construct-selector> ("template", name, t*)
	    ; val := <get-style-value> (s, prop)
	    ; <debug(!"___")> (<pp-webdsl> prop, <pp-webdsl> val)
//        ; <declare-style-value> (prop, val)
  
  resolve :
    StyleValueExpression(selector, prop) -> val
    where ThisSelector
/*        ; if <sometd(?"createOwner")> <ThisSelector> then
            <debug(!"__valex: ")> StyleValueExpression(selector, prop)
            ; <debug(!"ThisSelector1: ")> <ThisSelector>
          end */
        ; val := <get-style-value> (selector, prop)
        ; <debug(!"___")> (<pp-webdsl> prop, <pp-webdsl> val)
//        ; <declare-style-value> (prop, val)

  resolve :
    StyleAdd(StyleValue(v1, u1), StyleValue(v2, u2)) -> value
    where ThisSelector
     with value := <add-values> (StyleValue(v1, u1), StyleValue(v2, u2))

  resolve :
    StyleSub(StyleValue(v1, u1), StyleValue(v2, u2)) -> value
    where ThisSelector
     with value := <subtract-values> (StyleValue(v1, u1), StyleValue(v2, u2))
     
  resolve :
    StyleMul(StyleValue(v1, u1), StyleValue(v2, u2)) -> value
    where ThisSelector
     with value := <multiply-values> (StyleValue(v1, u1), StyleValue(v2, u2))
   
  resolve :
    StyleDiv(StyleValue(v1, u1), StyleValue(v2, u2)) -> value
    where ThisSelector
     with value := <divide-values> (StyleValue(v1, u1), StyleValue(v2, u2)) 
      
  resolve :
    StyleDeclaration(prop, Var(x)) -> <declare-style-declaration> StyleDeclaration(prop, val)
    where ThisSelector
        ; val := <StyleVariable> x

  resolve :
    Var(x) -> <StyleVariable> x
    where ThisSelector

rules
/*    
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("align"), StyleValue(sort, [StyleValueExtension("left")]))
    ; is-for-named-layout-identifier
    ; <emit-style-declaration> |[ margin-right := auto; ]|

  translate-style-decl =
    ?StyleDeclaration(StyleProperty("align"), StyleValue(sort, [StyleValueExtension("right")]))
    ; is-for-named-layout-identifier
    ; <emit-style-declaration> |[ margin-left := auto; ]|
  
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("align"), StyleValue(sort, [StyleValueExtension("center")]))
    ; is-for-named-layout-identifier
    ; <emit-style-declarations> |[ margin-left := auto; margin-right := auto; ]|

  translate-style-decl =
    ?StyleDeclaration(StyleProperty("align"), StyleValue(sort, [StyleValueExtension("left")]))
    ; <emit-style-declaration> |[ float := left; ]|

  translate-style-decl =
    ?StyleDeclaration(StyleProperty("align"), StyleValue(sort, [StyleValueExtension("right")]))
    ; <emit-style-declaration> |[ float := right; ]|

  translate-style-decl =
    ?StyleDeclaration(StyleProperty("align"), StyleValue(sort, [StyleValueExtension("center")]))
    ; <has-property> StyleProperty("width")
    ; <emit-style-declarations> |[ margin-left := auto; margin-right := auto; ]|
    
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("image-repeat"), StyleValue(sort, [StyleValueExtension("horizontal")]))
    ; <emit-style-declaration> |[ background-repeat := repeat-x; ]|
  
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("image-repeat"), StyleValue(sort, [StyleValueExtension("vertical")]))
    ; <emit-style-declaration> |[ background-repeat := repeat-y; ]|
    
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("image-repeat"), StyleValue(sort, [StyleValueExtension("both")]))
    ; <emit-style-declaration> |[ background-repeat := repeat; ]|
  
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("image-repeat"), StyleValue(sort, [StyleValueExtension("none")]))
    ; <emit-style-declaration> |[ background-repeat := no-repeat; ]|
  
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("border-color"), stval1)
    ; <emit-style-declarations> |[ border-top-color := stval1; border-right-color := stval1; border-bottom-color := stval1; border-left-color := stval1; ]|
  
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("border-width"), stval1)
    ; <emit-style-declarations> |[ border-top-width := stval1; border-right-width := stval1; border-bottom-width := stval1; border-left-width := stval1; ]|
  
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("border-style"), StyleValue(sort, [StyleValueExtension(stval0)]))
    ; where ( stval1 := StyleValue(stval0) )
    ; <emit-style-declarations> |[ border-top-style := stval1; border-right-style := stval1; border-bottom-style := stval1; border-left-style := stval1; ]|

  translate-style-decl =
    ?StyleDeclaration(stprop@StyleProperty(prop), StyleValue(sort, [StyleValueExtension(stval0)]))
    ; where ( 
        <elem> (prop, ["border-top-style", "border-right-style", "border-bottom-style", "border-left-style"])
        ; stval1 := StyleValue(stval0)
      )
    ; <emit-style-declaration> |[ stprop := stval1; ]|

  translate-style-decl =
    ?StyleDeclaration(StyleProperty("font-line"), StyleValue(sort, [StyleValueExtension("none")]))
    ; <emit-style-declaration> |[ text-decoration := none; ]|
  
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("font-line"), StyleValue(sort, [StyleValueExtension("under")]))
    ; <emit-style-declaration> |[ text-decoration := underline; ]|

  translate-style-decl =
    ?StyleDeclaration(StyleProperty("font-line"), StyleValue(sort, [StyleValueExtension("over")]))
    ; <emit-style-declaration> |[ text-decoration := overline; ]|
  
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("font-line"), StyleValue(sort, [StyleValueExtension("through")]))
    ; <emit-style-declaration> |[ text-decoration := line-through; ]|

  translate-style-decl =
    ?StyleDeclaration(StyleProperty("font-color"), StyleValue(sort, [StyleValueExtension(val0)]))
    ; where ( stval1 := StyleValue(val0) )
    ; <emit-style-declaration> |[ color := stval1; ]|

  translate-style-decl =
    ?StyleDeclaration(StyleProperty("font"), StyleValue(sort, val*))
    ; stval0 := StyleValue(<construct-font-names> val*)
    ; <emit-style-declaration> |[ font-family := stval0; ]|
    
  construct-font-names =
    ?[s|s*]
    ; !<concat-strings> ["'", <construct-font-name> s, " ", <construct-font-names> s*, "'"]

  construct-font-names :
    [s] -> <construct-font-name> s

  construct-font-name :
    StyleValueExtension(stval0) -> stval0
        
          
  translate-style-decl =
    ?StyleDeclaration(stprop, StyleValue(StyleSort("Color"), [StyleValueExtension(stval0)]))
    ; where ( stval1 := StyleValue(stval0) )
    ; <emit-style-declaration> |[ stprop := stval1; ]|
  
  translate-style-decl =
    ?StyleDeclaration(StyleProperty("orientation"), StyleValue(sort, [StyleValueExtension("horizontal")]))
    ; where (
	    <emit-style-declarations> |[ list-style := none; padding-left := 0px; ]|
	    ; Selector(s, s*) := <ThisSelector>
	    ; s' := (ChildCombinator, ElemSimpleSelector("li"), None)
	    ; stsel0 := Selector(s, <reverse> [s'| <reverse> s*])
	    ; <emit-style-definition> stdef |[ stsel0 { float := left; } ]|
      )

  translate-style-decl =
    ?StyleDeclaration(StyleProperty("separator"), StyleValue(sort, [StyleValueExtension("pipe")]))
    ; where (
        debug (!"===========")
    ; s := <ThisSelector>
    ; sel0 := <selector-to-css> s
    ; <debug> ["........", sel0]
//    ; s' := (ChildCombinator, ElemSimpleSelector("li"), SelectorAttribute("before"))
//    ; <debug> ["........", s']
//    ; stsel0 := Selector(s, <reverse> [s'| <reverse> s*])
//    ; <debug> ["........", sel0]
//    ; <emit-style-definition; debug (!"--------")> stdef |[ stsel0 { content := '|'; } ]|
    ; <emit-css-rule> rule |(
        sel0 {
          clear: both;
          float: left;
        }
      )|
      )
  */    

    
  resolve :
    ststat |[ image-repeat := Repeat.horizontal; ]| -> ststat |[ background-repeat := repeat-x; ]|
    where ThisSelector
  
  resolve :
    ststat |[ image-repeat := Repeat.vertical; ]| -> ststat |[ background-repeat := repeat-y; ]|
    where ThisSelector
  
  resolve :
    ststat |[ image-repeat := Repeat.both; ]| -> ststat |[ background-repeat := repeat; ]|
    where ThisSelector
  
  resolve :
    ststat |[ image-repeat := Repeat.none; ]| -> ststat |[ background-repeat := no-repeat; ]|
    where ThisSelector 

  resolve :
    ststat |[ spacing := stval0; ]| -> ststat |[ padding-bottom := stval0; ]|
    where ThisSelector

  resolve :
    ststat |[ align := Align.left; ]| -> ststat |[ margin-right := auto; ]|
    where ThisSelector ; is-for-named-layout-identifier
  
  resolve :
    ststat |[ align := Align.right; ]| -> ststat |[ margin-left := auto; ]|
    where ThisSelector ; is-for-named-layout-identifier

  resolve :
    ststat |[ align := Align.left; ]| -> ststat |[ float := left; ]|
    where ThisSelector ; not( <selector-contains> "label" )

  resolve :
    ststat |[ align := Align.right; ]| -> ststat |[ float := right; ]|
    where ThisSelector ; not( <selector-contains> "label" )

rules

  translate-style-decl =
    ?ststat |[ align := Align.center; ]|
    ; where (
        ( is-for-named-layout-identifier <+ <has-property> StyleProperty("width") )
        ; <declare-style-declarations; emit-style-declarations> |[
            margin-left := auto;
            margin-right := auto;
          ]| 
      )

  translate-style-decl =
    ?ststat |[ border-color := stval0; ]|
    ; with (
        <declare-style-declarations; emit-style-declarations> |[
            border-top-color := stval0;
            border-right-color := stval0;
            border-bottom-color := stval0;
            border-left-color := stval0;
          ]| 
      )

  translate-style-decl =
    ?ststat |[ border-width := stval0; ]|
    ; with (
        <declare-style-declarations; emit-style-declarations> |[
            border-top-width := stval0;
            border-right-width := stval0;
            border-bottom-width := stval0;
            border-left-width := stval0;
          ]| 
      )

  translate-style-decl =
    ?ststat |[ border-style := stval0; ]|
    ; with (
        <declare-style-declarations; emit-style-declarations> |[
            border-top-style := stval0;
            border-right-style := stval0;
            border-bottom-style := stval0;
            border-left-style := stval0;
          ]| 
      )
  
  translate-style-decl =
    ?ststat |[ align := Align.right; ]|
    ; where (
        <selector-contains> "label"
        ; <declare-style-declarations; emit-style-declarations> |[
            float := left;
            text-align := right;
          ]| 
      )

  translate-style-decl =
    ?ststat |[ align := Align.left; ]|
    ; where (
        <selector-contains> "label"
        ; <declare-style-declarations; emit-style-declarations> |[
            float := left;
          ]|
      )
