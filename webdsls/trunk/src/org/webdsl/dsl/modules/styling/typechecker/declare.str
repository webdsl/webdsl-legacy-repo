module org/webdsl/dsl/modules/styling/typechecker/declare

imports
  libstrategolib

imports
  libwebdsl-front

strategies

  declare-style-definition =
    ?def@StyleDefinition(selector, stat1*)
    ; where (
	    s := <remove-position-annos> selector
	    ; x := <InSection>
	    ; rules ( StyleDefinition :+ s -> def )
	    ; if Selector(SimpleSelector(checktype, MatchDefinition(name, arg*)), s*) := selector then
	        <add-stylesheet> (x, name)
	      end
	  )
  
  declare-style-declaration =
    ?decl@StyleDeclaration(prop, val)
    ; where (
        selector := <ThisSelector>
        ; p := <remove-position-anno> prop
        ; v := <remove-position-anno> val
        ; rules (
            StyleDeclarations :+ selector -> (p, v)
            StyleProperties :+ selector -> p
          )
//        ; <declare-style-value> (name, t*, p, v)
        ; <declare-style-value> (p, v)
//        ; <debug> ["____styledecl: ", (name, t*, p), v]
//        ; <debug> ["_____selector: ", <ThisSelector>, v]
//        ; <debug> ""
      )

  declare-style-value =
    ?(p, v)
    ; where (
        selector := <ThisSelector>
        ; rules ( StyleValue : (selector, p) -> v )
//        ; <debug> ["____stylevalue decl: ", selector, p, v]
      )

  declare-style-var-decl =
    ?StyleVarDeclInit(x, srt, e)
    ; where (
        e' := <strip-annos> e
        ; rules ( StyleVariable : x -> e' )
      )

strategies

  declare-layout-definition =
    ?def@LayoutDefinition(type, matchdef, stat*)
    ; where (
        MatchDefinition(n, arg*) := matchdef
        ; t* := <map(?Arg(_,<id>))> arg*
        ; name := <concat-strings> [n, "Layout"]
        ; <add-stylesheet> (name, n)
        ; rules (
            LayoutDefinition : (n, t*) -> def
          )
      )
  
  declare-layout-expression =
    ?NamedLayoutExpression(name, expr*)
    ; where ( 
        rules ( LayoutIdentifiers :+= name )
        ; <map(declare-layout-expression)> expr*
      )

  declare-layout-expression =
    ?LayoutExpression(MatchDefinition(x, farg*))
    ; where (
        t1* := <map(?Arg(_,<id>))> farg*
        ; (name, t2*) := <InDef>
        ; rules (
            NamedLayoutExpression : (x, t*) -> (name, t2*)
          )
      )
