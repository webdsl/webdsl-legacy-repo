module org/webdsl/dsl/modules/styling/typechecker/declare

imports
  libstrategolib

imports
  libwebdsl-front

strategies

  declare-style-definition =
    ?def@StyleDefinition(type, MatchDefinition(name, arg*), decl*)
    ; where (
	    t* := <map(?Arg(_,<id>))> arg*
	    ; x := <InSection>
	    ; rules (
	        StyleSignature : (name, t*) -> def
	        StylesheetIncludes :+ name -> x
	      )
	  )

  declare-style-declaration =
    ?decl@StyleDeclaration(prop, val)
    ; where (
        (name, t*) := <InDef>
        ; p := <remove-position-anno> prop
        ; v := <remove-position-anno> val
        ; rules (
            StyleDeclarations :+ (name, t*) -> (p, v)
            StyleProperties :+ (name, t*) -> p
          )
        ; <declare-style-value> (name, t*, p, v)
//        ; <debug> ["____styledecl: ", (name, t*, p), v]
      )

  declare-style-value =
    ?(name, t*, p, v)
    ; where (
        rules ( StyleValue : (name, t*, p) -> v )
//        ; <debug> ["____stylevalue decl: ", name, t*, p, v]
      )

  declare-style-var-decl =
    ?StyleVarDeclInit(x, srt, e)
    ; where (
        e' := <strip-annos> e
        ; rules ( StyleVariable : x -> e' )
      )

strategies

  declare-layout-definition =
    ?def@LayoutDefinition(type, matchdef, stat*)
    ; where (
        MatchDefinition(n, arg*) := matchdef
        ; t* := <map(?Arg(_,<id>))> arg*
        ; name := <concat-strings> [n, "Layout"]
        ; rules (
            StylesheetIncludes :+ n -> name
            LayoutDefinition : (n, t*) -> def
          )
      )
  
  declare-layout-expression =
    ?NamedLayoutExpression(name, expr*)
    ; where ( <map(declare-layout-expression)> expr* )

  declare-layout-expression =
    ?LayoutExpression(MatchDefinition(x, farg*))
    ; where (
        t1* := <map(?Arg(_,<id>))> farg*
        ; (name, t2*) := <InDef>
        ; rules (
            NamedLayoutExpression : (x, t*) -> (name, t2*)
          )
      )
