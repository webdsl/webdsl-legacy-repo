module org/webdsl/dsl/modules/styling/to-css/css-utils

imports 
  libstrategolib  
  libjava-front 
  libwebdsl-front

rules

  name-to-css-id:
    name -> <concat-strings> ["#", name] 

  name-to-css-class:
    name -> <concat-strings> [".", name]
  
rules

  value-to-color:
    val1 -> expr |( val2 )|
    where val2 := Hash(val1)
    
  color-to-css :
    StyleValue(Hash(val1)) -> <value-to-color> val1
  
  color-to-css :
    StyleValue(StyleSort("Color"), [StyleValueExtension(val1)]) -> expr |( val1 )|
   
  
  value-to-negative-value:
    val -> <concat-strings> ["-", val]

rules

//  style-selector-to-css =
    

rules

  set-background-color :
    (sel, val) -> <emit-css-rules> rule* |( sel { background-color: val; } )|
    
    
strategies
  output-generated-file =
    css-file-to-file

signature
  constructors
    CssFile : String * String * Document -> File

strategies

  css-file-to-file =
    css-file-to-text-file
    ; try(text-file-to-file)

  css-file-to-text-file :
    CssFile(pkg, name, doc) -> TextFile(filename, text)
    where path := <create-dirs> pkg
            ; filename := <concat-strings> [path, "/", name]
            ; text := <pp-css-to-string <+ write-to-string> doc
   