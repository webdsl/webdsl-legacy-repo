module org/webdsl/dsl/modules/styling/to-css/layout-to-css

imports 
  libstrategolib  
  libjava-front 
  libwebdsl-front

rules
  /**
   * Generate css for layout definition
   */
  GenerateCode = generate-layout-css; fail
  
  generate-layout-css =
    ?LayoutDefinition(type, MatchDefinition(n, arg*), stat*)
    ; {| ThisPage
       : name := <concat-strings> [n, "Layout"]
       ; rules ( ThisPage := name )
       ; <emit-css> Stylesheet(<mapconcat(layout-to-css)> stat*)
       |}


  layout-to-css :
    LayoutStatement(expr) -> <layout-to-css> expr

  layout-to-css :
    NamedLayoutExpression(name, expr*) -> []

//  layout-to-css :
//    NamedLayoutExpression(name, expr*) -> <map(layout-to-css)> expr*
//    where <debug> [".......named: ", name, expr]

/*  
  layout-to-css :
    LayoutExpressions([s1]) -> <layout-to-css> s1
//    where <debug> [".......s1: ", [s1]]
            
  layout-to-css :
    LayoutExpressions([LayoutExpression(m1), LayoutExpression(m2)]) ->
      rule* |(
        sel0 {
          float: left;
        }
        sel1 {
          float: right;
        }
      )|
    where MatchDefinition(n1, _) := m1
        ; MatchDefinition(n2, _) := m2
        ; sel0 := <name-to-css-id> n1
        ; sel1 := <name-to-css-id> n2
*/  
  layout-to-css :
    LayoutExpression(MatchDefinition(name, arg*)) ->
      rule* |(
        sel0 {
          clear: both;
          float: left;
        }
      )|
    where sel0 := <name-to-css-id> name

