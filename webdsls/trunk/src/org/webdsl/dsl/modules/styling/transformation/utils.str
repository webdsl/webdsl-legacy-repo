module org/webdsl/dsl/modules/styling/transformation/utils

imports
  libstrategolib
  libwebdsl-front


rules

  add-stylesheet =
    ?(name, page)
    ; where (
        if not ( <elem> (name, <bagof-StylesheetIncludes> page) ) then
          rules ( StylesheetIncludes :+ page -> name )
        end
      )

rules

  construct-selector :
    (type, x, t*) -> Selector(SimpleSelector(type, MatchDefinition(x, t*)), [])

  construct-simple-selector :
    (type, x, t*) -> SimpleSelector(type, MatchDefinition(x, t*))

//  construct-selector :
//    (template, name) -> Selector(IdSelector(type, MatchDefinition(x, t*)), [])

  construct-descendant-selector :
    (template, t*, name) -> Selector(s1, [ (DescendantCombinator, IdSimpleSelector(name), None) ])
    where s1 := <construct-simple-selector> ("template", template, t*)
  
rules

  is-for-named-layout-identifier =
    where (
        s := <ThisSelector> 
        ; [IdSimpleSelector(name)] := <collect(?IdSimpleSelector(_))> s
        ; <elem> ( name, <bagof-LayoutIdentifiers> )
    )
    
rules

  has-property =
    ?StyleProperty(prop)
    ; where (
        s := <ThisSelector> 
        ; <StyleValue> (s, StyleProperty(prop))
      )

  has-property =
    ?(Selector(s, s*), StyleProperty(prop))
    ; where (
        <StyleValue> (Selector(s, s*), StyleProperty(prop))
      )