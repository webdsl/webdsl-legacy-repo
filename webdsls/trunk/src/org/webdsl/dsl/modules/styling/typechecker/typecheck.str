/**

 Styling typechecker

*/

module org/webdsl/dsl/modules/styling/typechecker/typecheck

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/transformation/-


rules

  matches-definition =
    ?MatchDefinition(matchstring, farg*)
    ; <TemplateSignature> (matchstring, <map(?Arg(_,<id>))> farg*)
  
  matches-template-definition =
    ?MatchDefinition(matchstring, farg*)
    ; where (
        matches-definition
        ; <is-toplevel-template> matchstring
      )
      
  matches-page-definition =
    ?MatchDefinition(matchstring, farg*)
    ; where (
        <CheckPageSignature> (None(), matchstring, <map(?Arg(_,<id>))> farg*)
      )
      
  match-webdsl-element =
    ?MatchDefinition(matchstring, farg*)
    ; where (
        <is-xhtml-element> matchstring
      )

rules // StyleDefinitions

  constraint-error : 
    s@SimpleSelector(checktype, matchdef) -> <add-error(|["unknown style definition type: ", <pp-webdsl> s])>
    where <?MatchDefinition(_,_)> matchdef
        ; <not(?"page")> checktype

  constraint-error : 
    s@SimpleSelector("page", matchdef) -> <add-error(|["page does not exist: ", <pp-webdsl> s])>
    where not( <matches-page-definition> matchdef )
  
  constraint-error : 
    s@SimpleSelector(m@MatchDefinition(matchstring, farg*)) -> <add-error(|["template element does not exist: ", <pp-webdsl> s])>
    where not ( <is-xhtml-element> matchstring <+ <matches-template-definition> m )

rules // StyleStatements

  constraint-error : 
    StyleDeclaration(prop, val) -> <add-error(|["style property unknown or not supported: ", <pp-webdsl> prop])>
    where StyleSort("Error") := <type-of> prop

  constraint-error : 
    StyleDeclaration(prop, val) -> <add-error(|["illegal style value: ", <pp-webdsl> val])>
    where StyleSort("Error") := <type-of> val

  constraint-error : 
    s@StyleDeclaration(prop, val) -> <add-error(|["style types not compatible: ", <pp-webdsl> s])>
    where not( <style-types-compatible> (<type-of> prop, <type-of> val) ) ; <debug> ["_____", s] ; <debug> ["...", <type-of> prop, <type-of> val]

rules // StyleExpressions

//  constraint-error :
//    StylePropertyValue(MatchDefinition(matchid, farg*), prop) -> <add-error(|["unknown style definition: ", <pp-webdsl> matchid])>
//    where not ( <StyleSignature> (matchid, <map(?Arg(_,<id>))> farg*) )

/*  constraint-error :
    StyleValueExpression(selector, prop) -> <add-error(|["style property not defined: ", <pp-webdsl> prop, " in definition: ", <pp-webdsl> selector])>
    where 
*/
  constraint-error :
    StylePropertyValue(MatchDefinition(matchid, farg*), prop) -> <add-error(|["unknown property ", <pp-webdsl> prop ," in style definition: ", <pp-webdsl> matchid])>
    where s := <construct-selector> (matchid, <map(?Arg(_,<id>))> farg*)
        ; not ( <elem> ( <strip-annos> prop, <bagof-StyleProperties> s ) )

  constraint-error : 
    StyleValue(sort@StyleSort(s), val*) -> <add-error(|["unknown value: ", <pp-webdsl> val*, ", of sort ", <pp-webdsl> sort])>
    where not( <is-values-of-sort> (sort, val*) )

  constraint-error :
    StyleVar(x) -> <add-error(|["Style constant ", <pp-webdsl> x, " not defined"])>
    where not ( <StyleVariable> x )

  // find duplicate global variables
  constraint-error :
    Application(nm, sections) -> <add-error(|["Style constants ", <list-to-separated-string(|", ")> var*, " are declared multiple times"])> ""
    where vars := <collect(?StyleVarDecl(_, _) <+ ?StyleVarDeclInit(_, _, _));
                    map({\ StyleVarDecl(x, s) -> <strip-annos> x \} <+ {\ StyleVarDeclInit(x, s, e) -> <strip-annos> x \})> sections
        ; var* := <find-doubles> vars
        ; not([] := var*)
    

rules // Layout

  constraint-error : 
    d@LayoutDefinition(checktype, matchdef, stat*) -> <add-error(|["unknown layout definition type: ", <pp-webdsl> d])>
    where <?MatchDefinition(_,_)> matchdef
        ; <not(?"page")> checktype

  constraint-error : 
    d@LayoutDefinition("page", matchdef, decl*) -> <add-error(|["layout definition target does not exist: ", <pp-webdsl> d])>
    where not( <matches-page-definition> matchdef )

  constraint-error : 
    d@LayoutDefinition(m@MatchDefinition(_,_), decl*) -> <add-error(|["layout definition target does not exist: ", <pp-webdsl> d])>
    where not( <matches-template-definition> m )
    
  constraint-error : 
    d@FloatStatement(def*) -> <add-error(|["float target does not exist: ", <pp-webdsl> d])>
    where not( <map(matches-template-definition <+ match-webdsl-element)> def* )
    

  //@todo: check layout statments

//  constraint-error :
//    LayoutStatement()

/*
  constraint-error :
    d@LayoutDefinition(checktype, matchdef, stat*) -> <add-error(|["layout definition does not include all template calls: ", <pp-webdsl> d])>
    where def := <matches-definition> matchdef
        ; <debug> ["______def:", def]
        ; calls := <filter(filter-template-calls)> def
        ; <debug> ["=====calls:", calls]
        ; <debug> ["=====stat*:", stat*]
  
  filter-template-calls :
    TemplateCall(t, arg*, elem*) -> TemplateCall(t, arg*, elem*)
    where <TemplateSignature> (t, <map(type-of)> arg*)
*/        
