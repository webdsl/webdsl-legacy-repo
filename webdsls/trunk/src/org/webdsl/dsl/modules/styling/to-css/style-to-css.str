module org/webdsl/dsl/modules/styling/to-css/style-to-css

imports 
  libstrategolib  
  libjava-front 
  libwebdsl-front
  
rules
  /**
   * Generate css based on style definition
   */
  GenerateCode = stylesection-to-css; fail
  
  stylesection-to-css:
    StyleSection(name, definitions) -> s
    where {| ThisPage
           : rules ( ThisPage := name )
           ; s := <emit-css> Stylesheet(<collect(styledefinition-to-css); flatten-list> definitions)
           |}
     
  styledefinition-to-css:
    StyleDefinition(type, MatchDefinition(name, args), declarations) -> 
      rule |(
         sel0 {
           decl0*
         }
      )|
    where <?"page" <+ ?"template"> type
        ; sel0 := <name-to-css-id> name
        ; decl0* := <map(styledeclaration-to-css)> declarations

        
  styledeclaration-to-css:
    StyleDeclaration(property, value) ->
      decl |(
        prop: val;
      )|
    where StyleProperty(prop) := property
//        ; <debug> ["____styledecl:", value]
        ; val := <style-expression-to-css> value
//        ; <debug> [".....:", val]



  style-expression-to-css =
    style-value-to-css

/*  style-property-value-to-css :
    StylePropertyValue(name, farg*, prop) -> |( val )|
    where value := <StyleValue> (name, <map(?Arg(_,<id>))> farg*, prop)
        ; val := <style-expression-to-css> value
*/      

  style-value-to-css :
    StyleValue(val, unit) -> |( val unit )|
//    StyleValue(value, unit) -> Expr([Term(value), Term(unit)])
  
/*  style-value-to-css :
    StyleValue(Hash(hex)) -> 
  
  style-value-to-css :
    StyleValue(Uri(uri)) -> 
 
  style-value-to-css :
    StyleValue(val) -> |( val )|*/ 

  style-value-to-css :
    StyleValue(Hash(color)) -> |( val )|
    where val := <concat-strings> ["#", color]
    