module org/webdsl/dsl/modules/procedures

imports
  libstrategolib
  libwebdsl-front

imports
  org/webdsl/dsl/modules/procedures/-
  org/webdsl/dsl/modules/procedures/generate/-
  
rules

  desugar = procedures-to-pages

/* @TODO: Idea to do staging
  desugar = TranslateProceduresToPage

  desugar =
    ?Application(_, _)
    ; not(TranslateProceduresToPage)
    ; rules ( TranslateProceduresToPage : _ -> result where result := <procedures-to-pages> )
    */

  desugar = procedure-extend-procelems
  desugar = derive-procedure-page

rules // Generation of templates and pages 

  // is only done once, registered by a dynamic rule ProcedureGeneratedBase
  desugar = 
    where(ProcedureEntities
          ; <do-once(procedure-generate-base|"procedure-generate-base")> None()
    )
  //        ; try(procedure-generate) // try may be unnecessary
  
  procedure-generate-base = 
    with(id
      ; where(procedure-emit-status-entity)
      ; where(procedure-generate-templates)
      ; where(procedure-generate-constructor-functions)
      ; where(procedure-generate-task-pages)
      ; where(procedure-generate-status-pages)
      ; where(procedure-emit-status-view-page)
    )

  procedure-emit-status-entity =
    <emit-webdsl-code> def|[
      entity ProcedureStatus {
        name        :: String := "Procedure status"
        isEnabled     :: Bool
        date        :: DateTime
        caller      -> ProcedureStatus
        returnstate :: Int

        function enabled() { }
        function disabled() { }
        function do() { }
        function done() { }
        function processed() { }

        function enable() {
          this.isEnabled := true;
          this.persist();
          this.enabled();
        }

        function enable(c : ProcedureStatus, r : Int) {
          this.isEnabled := true;
          this.caller := c;
          this.returnstate := r;
          this.persist();
          this.enabled();
        }

        function disable() {
          this.isEnabled := false;
          this.disabled();
        }

        function next(state : Int) { }
      }
    ]|

  procedure-emit-status-view-page =
    <emit-webdsl-code> def|[
      define page procedureStatus(s : ProcedureStatus) {
        derive viewPage from s
      }
    ]|

strategies

  procedure-generate-constructor-functions =
    with(<map(procedure-emit-constructor-function)> <bagof-ProcedureEntities; make-set>)


  procedure-emit-constructor-function =
    ?SimpleSort(x_ent)
    ; with(id
      ; procedures := <bagof-Procedures; make-set> SimpleSort(x_ent)
      ; stat* := <mapconcat({x_procstatus, x, x_o: 
                  \ x -> webdsl|[ 
                           o.x := x_procstatus{}; 
                           o.x.x_o := o;
                           o.x.persist();
                         ]| 
                     where x_procstatus := <concat-strings; capitalize-string> [x, "ProcedureStatus"] 
                         ; x_o := <ProcedureArg; strip-annos> x
                  \}
                     <+ debug(!"Couldn't map: "))> procedures
      ; x_cons := <concat-strings> ["new", x_ent]
      ; <emit-webdsl-code> def|[ 
            function x_cons() : x_ent {
               var o : x_ent := x_ent{};
               o.persist();
               stat*
               return o;
            }
        ]|
      )
