/**

 Styling rules for WebDSL

*/

module org/webdsl/dsl/modules/styling

imports
  libstrategolib

imports
//  org/webdsl/dsl/modules/styling/-

rules

/*  process-style:
    Application(qid, sections) -> files'
    where files' := <collect(style-to-css)> sections*/

//  process-theme:


strategies

  contains-template-call =
    sometd(?TemplateCall(name, args, _))
    ; <TemplateSignature> (name, <map(type-of)> args)
    

rules



rules


    
/*  typecheck-style-definition:
    StyleSection(name, definitions) -> StyleSection(name, definitions) */


strategies

  gather-overloaded-templates =
    alltd(gather-overloaded-template)

  gather-overloaded-template =
    ?def@Define([Template()], name, fargs, body)
    ; if not(<elem> (def, <bagof-TopLevelTemplateDefinitions> name)) then
        rules (
          TopLevelTemplateDefinitions :+ name -> def
        )
      end


rules
  output-generated-file =
    css-file-to-file

signature
  constructors
    CssFile : String * String * Document -> File

strategies

  css-file-to-file =
    css-file-to-text-file
    ; try(text-file-to-file)

  css-file-to-text-file :
    CssFile(pkg, name, doc) -> TextFile(filename, text)
    where path := <create-dirs> pkg
            ; filename := <concat-strings> [path, "/", name]
            ; text := <pp-css-to-string <+ write-to-string> doc

