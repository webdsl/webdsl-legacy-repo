module org/webdsl/dsl/modules/exceptions
 
strategies
/*
TryStatement(
  Block(
    [Stat(ThisCall("ghghd", [])), Stat(ThisCall("ertertert", []))]
  )
, [ Catch(
      "v"
    , SimpleSort("ValidationException")
    , Block([Stat(ThisCall("jdfgkjdgjkdf", [Var("v")]))])
    )
  ]
)

ThrowStatement([String("43t")])


TryTemplate(
  Block(
    [ Stat(ThisCall("log", [String("1")]))
    , ThrowStatement(
        [ObjectCreation(SimpleSort("SomethingHappened"), [ObjectPropertyAssignment("whatHappened", String("an exception"))])]
      )
    , Stat(ThisCall("log", [String("2")]))
    , Return(String("error"))
    ]
  )
, [ Catch(
      "sh"
    , SimpleSort("SomethingHappened")
    , Block(
        [Return(Add(String("ok "), FieldAccess(Var("sh"), "whatHappened")))]
      )
    )
  ]
)

*/

  built-in-template-rule-setup = declare-exception-type;fail
  declare-exception-type = 
    <declare> def |[
      entity Exception {
        entity -> Entity
      }
    ]|

  rename :
    Catch(ident1,srt,blck1) -> Catch(ident2,srt,blck2)
    with {| Rename, VarInContext:    
            ident2 := <rename-bound(|srt)> ident1
          ; <declare-vars-in-context> ident2
          ; blck2 := <rename-all> blck1
          |}

signature
  constructors
    CatchDesugarDone : Term

rules

  desugar-in-define-context :
    TryStatement(blck,catch1*){anno*} -> TryStatement(blck,catch2*){anno1*}
    where <not(fetch(?CatchDesugarDone()))> anno*
    with  catch2* := <desugar-catches> catch1*
        ; anno1* := [CatchDesugarDone()|anno*]
    
  desugar-in-define-context :
    TryTemplate(blck,catch1*){anno*} ->  TryTemplate(blck,catch2*){anno1*}
    where <not(fetch(?CatchDesugarDone()))> anno*
    with  catch2* := <desugar-catches> catch1*
        ; anno1* := [CatchDesugarDone()|anno*]
    
  desugar-catches:
    catch* -> [Catch(x_name,SimpleSort("Exception"),Block(stat*))]
    with  x_name := <toplevel-rename> "ident"
        ; stat* := <map(desugar-catch(|x_name))> catch*

  desugar-catch(|x_name):
    Catch(x_ident,srt,Block(stat*)) -> stat
    with  stat := webdsl|[ if(x_name.entity is a srt) { var x_ident : srt := x_name.entity as srt; stat* } ]|
        