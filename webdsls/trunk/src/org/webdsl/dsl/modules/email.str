module org/webdsl/dsl/modules/email

imports 
  libstrategolib 
  libjava-front 
  libwebdsl-front
 	org/webdsl/dsl/generation/webdsl-generator
 
rules // should only be allowed in email, this makes them available as general template calls
  built-in-template-rule-setup = <declare-built-in-template-rules> ("to",[SimpleSort("String")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("cc",[SimpleSort("String")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("bcc",[SimpleSort("String")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("replyTo",[SimpleSort("String")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("from",[SimpleSort("String")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("subject",[SimpleSort("String")]);fail 
 
signature
  constructors
    EmailCallAnno : Annotation

rules
    
  is-email-call :
    _{anno*} -> True()
    where <collect(?EmailCallAnno(){});Hd> anno*  
  
strategies

  declare = declare-email-definition
  rename = rename-email
  constraint-error = constraint-error-email

rules

  rename-email :
    def |[ define mod* x(farg1*) { elem1* } ]| -> def |[ define mod* y(farg2*) { elem2* } ]|
    where <fetch(Email)> mod*
    with {| Rename, VarInTemplateContext, InEmail:
            rules ( InEmail := x )
          ; y := x{<newname> x}
          ; farg2* := <map(rename)> farg1*
          ; elem2* := <rename-all> elem1*
          |}
          
  rename-email : 
    tc@ThisCall("email", [e@ThisCall(name, args)]) -> ThisCall("email", [e2])  
    with  e1 := <rename-all> e
        //add annotation once, used to differentiate between normal call and email call during constraint checking
        ; if <is-email-call> e then e2 := e1 else e2 := <annotate-email-call> e1 end
          
  annotate-email-call :
    ThisCall(name, args){anno*} -> ThisCall(name, args){EmailCallAnno(),anno*} 

/*
  create-email-argument-list:
   Define(mods, name, args, targs, body1) -> Define(mods, name, args, targs, body1)
   where try (if <oncetd(?ThisCall("email", [_]))> body1 then
           if not(<GetEmailArgumentsList> name) then
             x := <toplevel-rename> "email_arguments"
             ; rules ( GetEmailArgumentsList : name -> x )
           end
         end )
*/

rules

  declare-email-definition =
    ?def@Define(mod*, name, fargs, targs, body)
    ; where (<fetch(Email)> mod*)  
    ; with ( 
        t1* := <map(?Arg(_,<id>))> fargs
      ; n := <strip-annos> name
      ; rules (
          EmailDefinition : (n, t1*) -> def
          EmailArguments  : (n, t1*) -> fargs
          CheckEmailSignature : (None(), n, t2*) -> SimpleSort("Void") where <zip(type-compatible)> (t1*, <map(type-of)> t2*)
        )
     //; fetch(?elem|[ to(e){} ]|)
    )
    
    
//email calls    
    
rules //constraints

  constraint-error-email :
    ThisCall("email", [e@ThisCall(name, args)]) -> <add-error(|["No email definition for ", <pp-webdsl> e, "."])>
    where not(type-of)
    
  constraint-error-email =
  	?def@Define(mod*, name, fargs, targs, body)
  	; where(<fetch(Email)> mod*)
  	; <map(try(check-required-email-element(|def,body)))> (<required-email-elements>)
  	; fail
  	
 	check-required-email-element(|def,body) :
 		elem -> err
 			where([] := <collect(?TemplateCallNoBody(<strip-annos;?elem>,_))> body)
 		; err := <add-error(|["Element '",elem,"' is required for an email template."])> def
  
  required-email-elements = !["to", "from", "subject"]

rules //typechecker

  eq-type-of :
    ThisCall("email", [e@ThisCall(name, args)]) -> t
    where n := <strip-annos> name
        ; t := <CheckEmailSignature> (None(), n, args)
