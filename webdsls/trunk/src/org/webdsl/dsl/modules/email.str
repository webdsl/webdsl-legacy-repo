module org/webdsl/dsl/modules/email

imports 
  libstrategolib 
  libjava-front 
  libwebdsl-front
   org/webdsl/dsl/generation/webdsl-generator
 
rules // should only be allowed in email, this makes them available as general template calls
  built-in-template-rule-setup = <declare-built-in-template-rules> ("to",[SimpleSort("String")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("cc",[SimpleSort("String")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("bcc",[SimpleSort("String")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("replyTo",[SimpleSort("String")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("from",[SimpleSort("String")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("subject",[SimpleSort("String")]);fail 
  built-in-template-rule-setup = <declare-built-in-template-rules> ("unsubscribeAddress",[SimpleSort("String")]);fail
  
strategies

  declare = declare-email-definition
  rename = rename-email
  constraint-error = constraint-error-email

rules

  rename-email :
    def |[ define mod* x(farg1*) { elem1* } ]| -> def |[ define mod* y(farg2*) { elem2* } ]|
    where <fetch(Email)> mod*
    with {| Rename, InDef, VarInContext, InEmail, TemplateArg, TemplateModList:
            rules ( InDef := True() )
          ; y := x{<newname-webdsl> x}
          ; rules ( InEmail := y )
          ; farg2* := <map(rename)> farg1*
          ; rules ( TemplateArg := farg2*
                    TemplateModList := mod* ) 
          ; <declare-args-in-context> farg2*
          ; elem2* := <rename-template-elements(|y)> elem1*
          ; rules( BodyForUsedTemplatesAnalysis :+= elem2*)
          |}

rules

  declare-email-definition =
    ?def@Define(mod*, name, fargs, targs, body)
    ; where (<fetch(Email)> mod*)  
    ; with ( 
        t1* := <map(?Arg(_,<id>))> fargs
      ; n := <strip-annos> name
      ; rules (
          EmailDefinition :+ n -> def   // :+ for constraint on re-defined emails
          EmailArguments  : n -> fargs
          CheckEmailSignature : (None(), n, t2*) -> InternalSort("Email") where <zip(type-compatible)> (t1*, <map(type-of)> t2*)
        )
     //; fetch(?elem|[ to(e){} ]|)
    )
    
rules //constraints

  constraint-error-email :
    e@EmailCall(name, args) -> <add-error(|["No email definition for ", <pp-webdsl> e, "."])>
    where not(type-of)
    
  constraint-error-email =
    ?def@Define(mod*, name, fargs, targs, body)
    ; where(<fetch(Email)> mod*)
    ; <map(try(check-required-email-element(|def,body)))> (<required-email-elements>)
    ; fail
    
   check-required-email-element(|def,body) :
     elem -> err
       where([] := <collect(?TemplateCallNoBody(<strip-annos;?elem>,_))> body)
     ; err := <add-error(|["Element '",elem,"' is required for an email template."])> def
  
  required-email-elements = !["to", "from", "subject"]

  constraint-error-global =
      all-keys-EmailDefinition
    ; constraint-double-names(
        bagof-EmailDefinition
      , \(name, decl) -> <concat-strings> ["Email '",name,"' is defined multiple times."]\
      )
    ; fail

rules //typechecker

  eq-type-of : 
    EmailCall(name, args) -> t
    where t := <CheckEmailSignature> (None(), <strip-annos> name, args)
    
rules 
  
  desugar-in-define-context : // 'email bla() -> renderemail(bla()).save()' actual sending handled in built-in.app
    EmailFunctionCall(emailcall) -> Call(RenderEmailFunctionCall(emailcall),"save",[])
          
rules //email functions

  eq-type-of : 
    RenderEmailFunctionCall(emailcall) -> SimpleSort("QueuedEmail")
    
  eq-type-of : 
    EmailFunctionCall(emailcall) -> SimpleSort("Void")
    
  eq-type-of : 
    SendEmailFunctionCall(emailcall) -> SimpleSort("Bool")

  built-in-template-rule-setup = 
    x_funname := "renderemail"
  ; <register-reserved-function> (x_funname,1)
  ; fail

  built-in-template-rule-setup = 
    x_funname := "email"
  ; <register-reserved-function> (x_funname,1)
  ; fail

  built-in-template-rule-setup = 
    x_funname := "sendemail"
  ; <register-reserved-function> (x_funname,1)
  ; fail
  
  