module org/webdsl/dsl/modules/uicomponents/menu-style

imports
  libstrategolib

imports
  libwebdsl-front

rules

  default-style =
    ?call |[ menubar(e) { elem* } ]|
    ; where (
      not( <elem> ("menubar", <bagof-ProcessedElements> ) )
      ; stsel00 := <ThisSelector> ;
      {| ThisSelector
       : stsel0 := <add-simple-selector> (stsel00, |[ >> .menubar ]| )
       
       ; rules ( ThisSelector := stsel0 )
       ; ststat0* := <flatten-list>
                     [ <set-style-property> ststat |[ background-color := Color.white; ]|,
                       <set-style-property> ststat |[ width := 100%; ]|,
                       <set-style-property> ststat |[ border-color := (stsel00).border-color; ]|,
                       <set-style-property> ststat |[ border-width := (stsel00).border-width; ]|,
                       <set-style-property> ststat |[ border-style := BorderStyle.none; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel0 { ststat0* } ]|

       ; <alltd(default-style)> elem*
       
       ; stsel1 := <add-simple-selector> (stsel0, |[ >> li ]| )
       ; stsel2 := <add-simple-selector> (stsel1, |[ >> ul ]| )
       ; rules ( ThisSelector := stsel2 )
       ; ststat1* := <flatten-list>
                     [ <set-style-property> ststat |[ border-color := (stsel0).border-color; ]|,
                       <set-style-property> ststat |[ border-width := (stsel0).border-width; ]|,
                       <set-style-property> ststat |[ border-style := BorderStyle.solid; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel2 { ststat1* } ]|
       
       ; rules ( ProcessedElements :+= "menubar" )
       |}
      )

  default-style =
    ?call |[ menu() { elem* } ]|
    ; where (
      not( <elem> ("menu", <bagof-ProcessedElements> ) ) ;
      {| ThisSelector
       : stsel00 := <ThisSelector>
       ; stsel0 := <add-simple-selector> (stsel00, |[ > menu() ]| )
       ; rules ( ThisSelector := stsel0 )
       ; ststat0* := <flatten-list>
                     [ <set-style-property> ststat |[ border-color := (stsel00).border-color; ]|,
                       <set-style-property> ststat |[ border-width := (stsel00).border-width; ]|,
                       <set-style-property> ststat |[ border-style := BorderStyle.none; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel0 { ststat0* } ]|
       ; <alltd(default-style)> elem*
       ; rules ( ProcessedElements :+= "menu" )
       |}
      )

  default-style =
    ?call |[ menuheader() { elem* } ]|
    ; where (
      not( <elem> ("menuheader", <bagof-ProcessedElements> ) ) ;
      {| ThisSelector
       : stsel00 := <ThisSelector>
       ; stsel0 := <add-simple-selector> (stsel00, |[ > menuheader() ]| )
       ; rules ( ThisSelector := stsel0 )
       ; ststat0* := <flatten-list>
                     [ <set-style-property> ststat |[ border-right-color := (stsel00).border-color; ]|,
                       <set-style-property> ststat |[ border-right-width := (stsel00).border-width; ]|,
                       <set-style-property> ststat |[ border-right-style := BorderStyle.solid; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel0 { ststat0* } ]|

       ; <alltd(default-style)> elem*
       
       ; stsel2 := <add-simple-selector> (stsel00, |[ > menuheader().first-child ]| )
       ; rules ( ThisSelector := stsel2 )
       ; ststat1* := <flatten-list>
                     [ <set-style-property> ststat |[ border-left-color := (stsel0).border-right-color; ]|,
                       <set-style-property> ststat |[ border-left-width := (stsel0).border-right-width; ]|,
                       <set-style-property> ststat |[ border-left-style := (stsel0).border-right-style; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel2 { ststat1* } ]|
       
       ; rules ( ProcessedElements :+= "menuheader" )
       |}
      )

  default-style =
    ?call |[ menuspacer() { elem* } ]|
    ; where (
      not( <elem> ("menuspacer", <bagof-ProcessedElements> ) ) ;
      {| ThisSelector
       : stsel0 := <add-simple-selector> (<ThisSelector>, |[ >> .menuspacer ]| )
       ; stsel1 := <add-simple-selector> (<ThisSelector>, |[ > menuheader() ]| )
       ; rules ( ThisSelector := stsel0 )
       ; ststat0* := <flatten-list>
                     [ <set-style-property> ststat |[ border-top-style := (stsel1).border-right-style; ]|,
                       <set-style-property> ststat |[ border-top-width := (stsel1).border-right-width; ]|,
                       <set-style-property> ststat |[ border-top-color := (stsel1).border-right-color; ]| ]
       ; <declare-style-definition; emit-style-definition> stdef |[ stsel0 { ststat0* } ]|
       ; <alltd(default-style)> elem*
       ; rules ( ProcessedElements :+= "menuspacer" )
       |}
      )

