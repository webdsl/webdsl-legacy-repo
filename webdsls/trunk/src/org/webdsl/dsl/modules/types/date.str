module org/webdsl/dsl/modules/types/date

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  libwebdsl-front

rules
  is-simple-sort = ?SimpleSort("Date")
  is-simple-sort = ?SimpleSort("Time") 
  is-simple-sort = ?SimpleSort("DateTime")   
  extends-builtin : "Date" -> "Object"
  extends-builtin : "Time" -> "Object"
  extends-builtin : "DateTime" -> "Object"
  built-in-template-rule-setup = <declare-built-in-template-rules> ("inputDate",[SimpleSort("Date")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("outputDate",[SimpleSort("Date")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("inputTime",[SimpleSort("Time")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("outputTime",[SimpleSort("Time")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("inputDateTime",[SimpleSort("DateTime")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("outputDateTime",[SimpleSort("DateTime")]);fail
  
rules
  
  type-default-value :
    SimpleSort("Date") -> exp|[ now() ]|

  type-default-value :
    SimpleSort("Time") -> exp|[ now() ]|

  type-default-value :
    SimpleSort("DateTime") -> exp|[ now() ]|  

rules // Desugaring

  DeriveInput :
    elem|[ input(e)[passign*]{elem*} ]| -> elem|[ inputDate(e)[passign*]{elem*} ]|
    where SimpleSort("Date") := <type-of> e
    
  DeriveOutput :
    elem|[ output(e)[passign*]{} ]| -> elem|[ outputDate(e)[passign*]{} ]|
    where SimpleSort("Date") := <type-of> e

  DeriveInput :
    elem|[ input(e)[passign*]{elem*} ]| -> elem|[ inputTime(e)[passign*]{elem*} ]|
    where SimpleSort("Time") := <type-of> e
    
  DeriveOutput :
    elem|[ output(e)[passign*]{} ]| -> elem|[ outputTime(e)[passign*]{} ]|
    where SimpleSort("Time") := <type-of> e

  DeriveInput :
    elem|[ input(e)[passign*]{elem*} ]| -> elem|[ inputDateTime(e)[passign*]{elem*} ]|
    where SimpleSort("DateTime") := <type-of> e
    
  DeriveOutput :
    elem|[ output(e)[passign*]{} ]| -> elem|[ outputDateTime(e)[passign*]{} ]|
    where SimpleSort("DateTime") := <type-of> e
    
rules // Typechecking

  check-builtin-signature :
    (None(), "now", []) -> SimpleSort("DateTime")

  check-builtin-signature :
    (None(), "today", []) -> SimpleSort("Date")

  check-builtin-signature :
    (None(), "Date", [SimpleSort("String"), SimpleSort("String")]) -> SimpleSort("Date")

  check-builtin-signature :
    (None(), "Date", [SimpleSort("String")]) -> SimpleSort("Date")

  check-builtin-signature :
    (None(), "Time", [SimpleSort("String"), SimpleSort("String")]) -> SimpleSort("Time")

  check-builtin-signature :
    (None(), "Time", [SimpleSort("String")]) -> SimpleSort("Time")

  check-builtin-signature :
    (None(), "DateTime", [SimpleSort("String"), SimpleSort("String")]) -> SimpleSort("DateTime")

  check-builtin-signature :
    (None(), "DateTime", [SimpleSort("String")]) -> SimpleSort("DateTime")

  type-compatible =
    ?(SimpleSort("Time"), SimpleSort("DateTime"))

  type-compatible =
    ?(SimpleSort("Date"), SimpleSort("DateTime"))

  check-builtin-signature :
    (SimpleSort("DateTime"), "before", [SimpleSort("DateTime")]) -> SimpleSort("Bool")

  check-builtin-signature :
    (SimpleSort("Date"), "before", [SimpleSort("Date")]) -> SimpleSort("Bool")

  check-builtin-signature :
    (SimpleSort("DateTime"), "after", [SimpleSort("DateTime")]) -> SimpleSort("Bool")

  check-builtin-signature :
    (SimpleSort("Date"), "after", [SimpleSort("Date")]) -> SimpleSort("Bool")