module org/webdsl/dsl/modules/types/entity

imports
  libstrategolib

imports
  libwebdsl-front

rules //built-in Entity type

  is-entity-type = ?SimpleSort("Entity") 
  reserved-entity-name = ?"Entity"
  extends-builtin : "Entity" -> "Object"  
  
rules //defined entities and built-in Entity type

  type-default-value :
    s@SimpleSort(y) -> exp |[ null ]|
    where <is-entity-type> s

rules

  check-builtin-signature :
    (s@SimpleSort(_), "delete", []) -> SimpleSort("Void")
    where <is-entity-type> s
        ; <not(IsSessionEntityType)> s

  check-builtin-signature :
    (s@SimpleSort(_), "save", []) -> SimpleSort("Void")
    where <is-entity-type> s
        ; <not(IsSessionEntityType)> s
  
  desugar-data :
    Entity(x_class, sup, entbodydecs1) -> <rename> Entity(x_class, sup, entbodydecs2)
    where entbodydecs2 := <oncetd(desugar-save-delete-call);alltd(desugar-save-delete-call)> entbodydecs1
  desugar-data :
    EntityNoSuper(x_class, entbodydecs1) -> <rename> EntityNoSuper(x_class, entbodydecs2)
    where entbodydecs2 := <oncetd(desugar-save-delete-call);alltd(desugar-save-delete-call)> entbodydecs1
    
  desugar-save-delete-call : ThisCall("save",[])   -> Call(Var("this"),"save",[])  
  desugar-save-delete-call : ThisCall("delete",[]) -> Call(Var("this"),"delete",[]) 
    
  constraint-error : e@Entity(x, _, entbodydecs)    -> <filter(constraint-error-ent-fun-name);fail> entbodydecs
  constraint-error : e@EntityNoSuper(x,entbodydecs) -> <filter(constraint-error-ent-fun-name);fail> entbodydecs

  constraint-error-ent-fun-name :
    FunctionNoReturn(name,_,_) -> <constraint-error-ent-fun-name-error(|name)>
    where <not-allowed-ent-fun-name> name

  constraint-error-ent-fun-name :  
    Function(name,_,_,_) -> <constraint-error-ent-fun-name-error(|name)>
    where <not-allowed-ent-fun-name> name
    
  constraint-error-ent-fun-name-error(|name) = 
    add-error(|["Entity function with name '", name, "' collides with a built-in function that you are not allowed to overwrite."])

  not-allowed-ent-fun-name = ?"save"
  not-allowed-ent-fun-name = ?"delete"

rules

  desugar-types :
    TemplateCall(x,arg*,passign*,elem*) -> <rename-all> elem|[ 
      dummy() {
        if (e != null) {
          navigate($viewY(e))[passign*]{text(e.name)} 
        } 
        if (e == null) {
          text("null")
        }
      }
    ]|
    where <?"output"> x //"output" string not in lhs because the x with annotations is needed to check whether it is a call to built-in output
        ; <CallToBuiltInTemplate> x
        ; [e] := arg*
        ; SimpleSort($Y) := <type-of> e
        ; <IsEntity> $Y
    with  $viewY := <decapitalize-string> $Y

  desugar-types :
    TemplateCall(x,arg*,passign*,elem*) -> <rename-all> elem|[ list { for(x1 : $X in e){ listitem{ output(e2)[passign*] } } } ]|
    where <?"output"> x
        ; <CallToBuiltInTemplate> x
        ; [e] := arg*
        ; GenericSort(<?"List" <+ ?"Set">,[SimpleSort($X)]) := <type-of> e
    with  x1 := <toplevel-rename> "outputlist"
        ; e2 := Var(x1)
  
  desugar-types :
    elem|[ input(e)[passign*]{elem*} ]| ->
    <rename-all> elem|[
      select( y1 : $Y, "Select", e)[passign*]{elem*}
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <IsEntity> $Y
        ; y      := <decapitalize-string> $Y
        ; y1     := <toplevel-rename> y

  desugar-types :
    elem|[ input(e)[passign*]{elem*} ]| ->
    <rename-all> elem|[
      select(x1 : $X, str, e)[passign*]{elem*}
    ]|
    where GenericSort(coll, [SimpleSort(X)]) := <type-of> e
        ; $X  := X
        ; x1  := <decapitalize-string; toplevel-rename> X
        ; str := <concat-strings>["Add ", X]
