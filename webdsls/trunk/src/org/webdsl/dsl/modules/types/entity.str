module org/webdsl/dsl/modules/types/entity

imports
  libstrategolib

imports
  libwebdsl-front

rules

  type-default-value :
    s@SimpleSort(y) -> exp |[ null ]|
    //s@SimpleSort(x) -> exp |[ x{} ]|
    where <is-entity-type> s

rules

  desugar :
    elem|[ output(e)[passign*]{} ]| -> elem|[ 
      dummy() {
        if (e != null) {
          navigate($viewY(e))[passign*]{text(e.name)} 
        } 
        if (e == null) {
          text("null")
        }
      }
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <IsEntity> $Y
        ; not(<TemplateSignature> ("output", [<type-of> e]))
    with $viewY := <decapitalize-string> $Y
        //; allsubclasses := <AllSubClasses>
        //; not(<fetch(?($Y,_))> allsubclasses)

  desugar :
    elem|[ output(e1)[passign*]{} ]| -> <rename-all> elem|[ list { for(x : $X in e1){ listitem{ output(e2)[passign*] } } } ]|
    where |[ List<$X> ]| := <type-of> e1
        ; not(<TemplateSignature> ("output", [<type-of> e1]))
    with x := <decapitalize-string; newname> $X
       ; e2 := Var(x)

  desugar :
    elem|[ output(e1)[passign*]{} ]| -> <rename-all> elem|[ list { for(x : $X in e2.$yList){ listitem{ output(e3)[passign*] } } } ]|
    where |[ Set<$X> ]| := <type-of> e1
        ; |[ e2.$y ]| := e1
        ; not(<TemplateSignature> ("output", [<type-of> e1]))
    with x := <decapitalize-string; newname> $X
       ; $yList := <concat-strings>[$y, "List"]
       ; e3 := Var(x)
    
  desugar :
    elem|[ input(e)[passign*]{} ]| ->
    <rename-all> elem|[
      block("inputSimpleRefAssociation")[passign*] {
        select( y1 : $Y, "Select", e )
      }
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <IsEntity> $Y
        ; y      := <decapitalize-string> $Y
        ; y1     := <newname> y

  desugar :
    elem|[ input(e)[passign*]{} ]| ->
    <rename-all> elem|[
      block("inputAssociationGenericSort")[passign*]{
        select(x1 : $X, str, e)
      }
    ]|
    where GenericSort(coll, [SimpleSort(X)]) := <type-of> e
        ; $X  := X
        ; x1  := <decapitalize-string; newname> X
        ; str := <concat-strings>["Add ", X]

