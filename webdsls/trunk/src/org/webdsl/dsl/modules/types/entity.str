module org/webdsl/dsl/modules/types/entity

imports
  libstrategolib

imports
  libwebdsl-front

rules

 desugar :
    elem|[ output(e){} ]| -> elem|[ 
      dummy() {
        if (e != null) {
          navigate($viewY(e)){text(e.name)} 
        } 
        if (e = null) {
          text("null")
        }
      }
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; not(<TemplateSignature> ("output", [<type-of> e]))
    with $viewY := <decapitalize-string> $Y
        //; allsubclasses := <AllSubClasses>
        //; not(<fetch(?($Y,_))> allsubclasses)

  /*
  DeriveOutputSimpleRefAssociation :
    elem|[ output(e){} ]| -> elem|[
      container {
        elem*
      }
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; allsubclasses := <AllSubClasses>
        ; subclasses := <retain-all(?($Y, _))> allsubclasses
        ; elem* := <map(DeriveSubclassOutput(|e, subclasses))> [($Y, $Y)|subclasses]

  is-not-subclass(|e) : [(x_super, x_class)] -> Not(IsA(e, SimpleSort(x_class)))
  is-not-subclass(|e) : [(x_super, x_class)|xs] -> And(Not(IsA(e, SimpleSort(x_class))), <is-not-subclass(|e)> xs)
  is-not-subclass(|e) : [] -> True()

  DeriveSubclassOutput(|e, subclasses) :
    (x_super, x_class) -> result
    where $viewY := <decapitalize-string> x_class
        ; srt := SimpleSort(x_class)
        ; result :=     IfTempl(And(IsA(e, SimpleSort(x_class)), <is-not-subclass(|e)> <remove-all(?(_, x_class))> subclasses),
            elem*|[ navigate($viewY(e as srt)){ text(e.name) } ]|)
        */

  desugar :
    elem|[ output(e1){} ]| -> <rename-all> elem|[ list { for(x : $X in e1){ listitem{ output(e2) } } } ]|
    where |[ List<$X> ]| := <type-of> e1
        ; not(<TemplateSignature> ("output", [<type-of> e1]))
    with x := <decapitalize-string; newname> $X
       ; e2 := Var(x)

  desugar :
    elem|[ output(e1){} ]| -> <rename-all> elem|[ list { for(x : $X in e2.$yList){ listitem{ output(e3) } } } ]|
    where |[ Set<$X> ]| := <type-of> e1
        ; |[ e2.$y ]| := e1
        ; not(<TemplateSignature> ("output", [<type-of> e1]))
    with x := <decapitalize-string; newname> $X
       ; $yList := <concat-strings>[$y, "List"]
       ; e3 := Var(x)
    
  desugar :
    elem|[ input(e){} ]| ->
    <rename-all> elem|[
      block("inputSimpleRefAssociation") {
        select( y1 : $Y, "Select", e )
      }
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; y      := <decapitalize-string> $Y
        ; y1     := <newname> y

  desugar :
    elem|[ input(e){} ]| ->
    <rename-all> elem|[
      block("inputAssociationGenericSort"){
        select(x1 : $X, str, e)
      }
    ]|
    where GenericSort(coll, [SimpleSort(X)]) := <type-of> e
        ; $X  := X
        ; x1  := <decapitalize-string; newname> X
        ; str := <concat-strings>["Add ", X]

