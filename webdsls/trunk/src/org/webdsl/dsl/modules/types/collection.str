module org/webdsl/dsl/modules/types/collection

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front

rules 
  /** overloading resolve:
   *  SimpleSort types' extends-builtin simply works on strings in order
   *  to behave similarly to the Extends DR used for entities, however,
   *  GenericSorts are strictly separated by using the whole constructor.
   *  see action/overloading.str
   *  see typechecker/utils.str
   */
  extends-genericsorts :
    GenericSort(x, [SimpleSort(s)]) -> GenericSort(x, [SimpleSort(supertype)])
    where supertype := <extends-check> s 
    with  <?"List"<+?"Set"> x
  
  extends-genericsorts :
    GenericSort(x, [SimpleSort(s)]) -> "Object"
    where not(<extends-check> s)
    with  <?"List"<+?"Set"> x

strategies

  is-generic-sort = ?GenericSort("List", [_])
  is-generic-sort = ?GenericSort("Set", [_])

  subtype-of =
    ?(GenericSort(_,_), SimpleSort("Object"))
    
  type-default-value :
    GenericSort("Set", [srt]) -> exp |[ Set<srt>() ]|
   
  type-default-value :
    GenericSort("List", [srt]) -> exp |[ List<srt>() ]|
    
rules

   type-compatible =
    ?(GenericSort(a,types1), GenericSort(b, types2))
    ; where (  a2 := <strip-annos> a
             ; a2 := <strip-annos> b
             ; <zip; map(type-compatible)>(types1, types2)
            )

   eq-type-of :
     SetCreation(e*) -> GenericSort("Set", [t])
     where t := <Hd; type-of> e*
         
   eq-type-of :
     TypedSetCreation(s, e*) -> GenericSort("Set", [s])
     where <map(<type-compatible>(s, <type-of>))> e*
 
   eq-type-of :
     TypedListCreation(s, e*) -> GenericSort("List", [s])
     where <map(<type-compatible>(s, <type-of>))> e*
         
   eq-type-of :
     ListCreation(e*) -> GenericSort("List", [t])
     where t := <Hd; type-of> e*

rules // fields

   eq-type-of :
     FieldAccess(e1, "length") -> SimpleSort("Int")
     where GenericSort(t,_) := <type-of> e1
         ; <?"List" <+ ?"Set"> t
         
rules
     
   check-builtin-signature :
     (GenericSort(x, [s]), "add", [s1]) -> SimpleSort("Void")
     where <?"List" <+ ?"Set"> x
         ; <type-compatible> (s1,s)

   check-builtin-signature :
     (GenericSort(x, [s]), "remove", [s1]) -> SimpleSort("Void")
     where <?"List" <+ ?"Set"> x
         ; <type-compatible> (s1,s)
     
   check-builtin-signature :
     (GenericSort(x, [s]), "clear", []) -> SimpleSort("Void") 
     where <?"List" <+ ?"Set"> x
     
   check-builtin-signature :                    //_ below because this is meant to convert between collections
     (GenericSort(x, [s]), "addAll", [GenericSort(_, [s1])]) -> GenericSort(x, [s])
     where <?"List" <+ ?"Set"> x
         ; <type-compatible> (s1,s)

rules //set only

  check-builtin-signature :
    (GenericSort("Set", [s]), "list", []) -> GenericSort("List", [s])

rules //list only

  check-builtin-signature :
    (GenericSort("List", [s]), "set", []) -> GenericSort("Set", [s])

  check-builtin-signature :
    (GenericSort("List", [s]), "indexOf", [s1]) -> SimpleSort("Int")
    where <type-compatible> (s1,s)

  check-builtin-signature :
    (GenericSort("List", [s]), "get", [SimpleSort("Int")]) -> s

  check-builtin-signature :
    (GenericSort("List", [s]), "set", [SimpleSort("Int"), s]) -> SimpleSort("Void")
    
  check-builtin-signature :
    (GenericSort("List", [s]), "insert", [SimpleSort("Int"), s]) -> SimpleSort("Void")
  
  //check-builtin-signature :
  //  (GenericSort("List", [s]), "removeAt", [SimpleSort("Int")]) -> SimpleSort("Void")
