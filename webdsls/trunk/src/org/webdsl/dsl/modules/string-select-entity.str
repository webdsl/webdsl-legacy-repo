module org/webdsl/dsl/modules/string-select-entity

imports
  libstrategolib
  libwebdsl-front
  
  /**
   * string-select-entity Example {"Example value 1", "Example value 2", ...}
   * will generate
   * - entity ExampleValue { name :: String }
   * - page allExampleValue
   * - page newExampleValue
   * - page exampleValue
   * - initial data 
   */
   
rules // let the typechecker know of the generated items

  declare-any = declare-string-select
  
  declare-string-select = 
    declare-string-select-entity
    ; declare-string-select-view
    ; declare-string-select-new
    ; declare-string-select-all
  
  declare-string-select-entity = 
    ?StringSelectEntity(x_id, str_args*)
    ; with(
        x := <concat-strings> [x_id, "Value"]
        ; <declare-entity> def|[
            entity x {
              name :: String
            }
          ]|
      )

  declare-string-select-view = 
    ?StringSelectEntity(x_id, str_args*)
    ; with(
        x := <concat-strings> [x_id, "Value"]
        ; <declare-all> <get-string-select-viewpage(|x)>
      )
  
  declare-string-select-new = 
    ?StringSelectEntity(x_id, str_args*)
    ; with(
        x := <concat-strings> [x_id, "Value"]
        ; <declare-all> <get-string-select-newpage(|x)>
      )
  
  declare-string-select-all = 
    ?StringSelectEntity(x_id, str_args*)
    ; with(
        x := <concat-strings> [x_id, "Value"]
        ; <declare-all> <get-string-select-allpage(|x)>
      )
  
rules

  desugar = desugar-string-select-entity
  
  get-string-select-entity(|x) =
    !def|[
       entity x {
         name :: String
       }
     ]|
     
  get-string-select-viewpage(|x) = 
    x_viewpage := <decapitalize-string> x
    ; srt := SimpleSort(x)
    ; !def|[ 
         define page x_viewpage(object : srt) { 
           derive viewPage from object 
         } 
       ]|
  
  get-string-select-newpage(|x) =
    x_newpage := <concat-strings> ["new", x]
    ; x_srt := SimpleSort(x)
    ; !def|[
        define page x_newpage() {
          var object : x := x_srt{};
          derive createPage from object
        }
      ]|
  
  get-string-select-allpage(|x) =
    x_indexpage := <concat-strings> ["all", x]
    ; x_newpage := <concat-strings> ["new", x]
    ; x_viewpage := <decapitalize-string> x
    ; !def|[
         define page x_indexpage() {
           table {
             row { navigate(x_newpage()){ "Add value" } }
             for (object : x) {
               row { navigate(x_viewpage(object)){ text(object.name) } }
             }
           }
         }
       ]|
  
  
  desugar-string-select-entity : 
    //webdsl|[ string-select-entity x_id { str_args* } ]| -> RemoveMe() // problems with parsing str_args*
    StringSelectEntity(x_id, str_args*) -> RemoveMe()
    with ent := <concat-strings> [x_id, "Value"]
       ; <emit-webdsl-code> <get-string-select-entity(|ent)>   // entity definition
       ; <emit-webdsl-code> <get-string-select-viewpage(|ent)> // viewpage ...Value
       ; <emit-webdsl-code> <get-string-select-newpage(|ent)>  // page new...Value
       ; <emit-webdsl-code> <get-string-select-allpage(|ent)>  // page all...Value

       // initial data
       ; stat_init* := <mapconcat(string-select-init(|ent))> str_args*
       ; <emit-webdsl-section> webdsl|[
           section initial string-select values
             init {
               stat_init*
             }
         ]|
         
  string-select-init(|x) : 
    x_value -> webdsl|[ var x_id : x := x_srt { name := str }; x_id.persist(); ]|
    with x_id := <newname> "initValue"
       ; str := x_value
       ; x_srt := SimpleSort(x)
