<project name="webdsl-build" default="help">
  
  <import file="webdsl-build-command.xml"/>
  <import file="webdsl-build-deploy.xml"/>
  <import file="webdsl-build-new.xml"/>
  <import file="webdsl-build-help.xml"/>
  <import file="webdsl-build-check.xml"/>
  <import file="webdsl-build-clean.xml"/>
  <import file="webdsl-build-index.xml"/>
  
  <property name="libdir" value="${templatedir}/template-java-servlet/lib"/>
  <property name="testlibdir" value="${templatedir}/template-java-servlet/lib-test"/>
  <property name="newprojectdir" value="${templatedir}/new_project"/>
  <property name="javatemplatedir" value="${templatedir}/template-java-servlet"/>
  
  
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${testlibdir}/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>
  
  
  <target name="check-servletapp-dir-exists">
    <if>
      <available file="${currentdir}/.servletapp" type="dir"/>
      <then></then>
      <else>
        <property name="servletapp-dir-not-exists" value="y"/>    	
      </else>
    </if>
  </target>
  
  
  <target name="setup-application-template" depends="check-servletapp-dir-exists" if="servletapp-dir-not-exists" unless="stop-because-load-config-failed">
    <if>
      <equals arg1="${sessiontimeout}" arg2="$${sessiontimeout}" />
      <then><property name="sessiontimeoutoption" value=""/></then>
      <else><property name="sessiontimeoutoption" value="--session-timeout ${sessiontimeout}"/></else>
    </if>
    <if>
      <equals arg1="${fastpp}" arg2="true" />
      <then><property name="fastppoption" value="--fast-pp"/></then>
      <else><property name="fastppoption" value=""/></else>
    </if>
    <if>
      <equals arg1="${statistics}" arg2="true" />
      <then><property name="statisticsoption" value="--statistics"/></then>
      <else><property name="statisticsoption" value=""/></else>
    </if>
    <if>
      <equals arg1="${debug}" arg2="true" />
      <then>
        <property name="debugoption" value="--debug"/>
        <property name="debughibernate" value="hibernate.show_sql=true"/>
        <property name="debuglog4j1" value="log4j.rootLogger=info, stdout"/>
        <property name="debuglog4j2" value="log4j.logger.org.hibernate.type=trace"/>
      </then>
      <else>
        <property name="debugoption" value=""/>
        <property name="debughibernate" value=""/>
        <property name="debuglog4j1" value=""/>
        <property name="debuglog4j2" value=""/>
      </else>
    </if>
    <if>
      <equals arg1="${verbose}" arg2="$${verbose}" />
      <then><property name="verboseoption" value=""/></then>
      <else><property name="verboseoption" value="--verbose ${verbose}"/></else>
    </if>
    <if>
      <equals arg1="${extratypecheck}" arg2="true" />
      <then><property name="extratypecheckoption" value="--extra-typecheck"/></then>
      <else><property name="extratypecheckoption" value=""/></else>
    </if>
    <if>
      <equals arg1="${dbstorage}" arg2="myisam" />
      <then><property name="dbstorageoption" value="utils.MySQLMyISAMDialectUTF8"/></then>
      <else><property name="dbstorageoption" value="utils.MySQL5InnoDBDialectUTF8"/></else>
    </if>
    <if>
      <equals arg1="${dbfile}" arg2="$${dbfile}" />
      <then><property name="dbfileoption" value="/dev/null"/></then>
      <else><property name="dbfileoption" value="${dbfile}"/></else>
    </if>
    <if>
      <equals arg1="${tomcatmanager}" arg2="$${tomcatmanager}" />
      <then><property name="tomcatmanager" value="http://localhost:8080/manager"/></then>
    </if>
    <if>
      <equals arg1="${tomcatuser}" arg2="$${tomcatuser}" />
      <then><property name="tomcatuser" value="tomcat"/></then>
    </if>
    <if>
      <equals arg1="${tomcatpassword}" arg2="$${tomcatpassword}" />
      <then><property name="tomcatpassword" value="tomcat"/></then>
    </if>
    
    <fail unless="sessiontimeoutoption"/>
    <fail unless="fastppoption"/>
    <fail unless="statisticsoption"/>
    <fail unless="debugoption"/>
    <fail unless="debughibernate"/>
    <fail unless="debuglog4j1"/>
    <fail unless="debuglog4j2"/>
    <fail unless="verboseoption"/>
    <fail unless="extratypecheckoption"/>
    <fail unless="dbstorageoption"/>
    <fail unless="dbfileoption"/>
    <fail unless="tomcatmanager"/>
    <fail unless="tomcatuser"/>
    <fail unless="tomcatpassword"/>
    <fail unless="appname"/>
    
    <mkdir dir="${currentdir}/.servletapp"/>
    
    <if>
      <equals arg1="${passtestoption}" arg2="--test" />
      <then>
        <echo>Copying template for tests</echo>
        <copy overwrite="true" todir="${currentdir}/.servletapp/lib-test">
          <fileset dir="${javatemplatedir}/lib-test">
            <include name="*.*"/>
          </fileset>
        </copy>
        <copy overwrite="true" todir="${currentdir}/.servletapp/tomcat">
          <fileset dir="${javatemplatedir}/tomcat">
            <include name="*.*"/>
          </fileset>
        </copy>
      </then>
      <else>
        <mkdir dir="${currentdir}/.servletapp/lib-test"/>
      </else>
    </if>
    
    <echo>Copying template for webdsl application</echo>
    <copy overwrite="true" todir="${currentdir}/.servletapp/html">
      <fileset dir="${javatemplatedir}/html">
        <include name="*.*"/>
      </fileset>
    </copy>
    <copy overwrite="true" todir="${currentdir}/.servletapp/images">
      <fileset dir="${javatemplatedir}/images">
        <include name="*.*"/>
      </fileset>
    </copy>
    <copy overwrite="true" todir="${currentdir}/.servletapp/javascript">
      <fileset dir="${javatemplatedir}/javascript">
        <include name="*.*"/>
      </fileset>
    </copy>
    <copy overwrite="true" todir="${currentdir}/.servletapp/lib">
      <fileset dir="${javatemplatedir}/lib">
        <include name="*.*"/>
      </fileset>
    </copy>
    <copy overwrite="true" todir="${currentdir}/.servletapp/src">
      <fileset dir="${javatemplatedir}/src">
        <include name="*.*"/>
      </fileset>
    </copy>
    <copy overwrite="true" todir="${currentdir}/.servletapp/src/utils">
      <fileset dir="${javatemplatedir}/src/utils">
        <include name="*.*"/>
      </fileset>
    </copy>
    <copy overwrite="true" todir="${currentdir}/.servletapp/stylesheets">
      <fileset dir="${javatemplatedir}/stylesheets">
        <include name="*.*"/>
      </fileset>
    </copy>

    <echo>Configuring .servletapp/build.properties</echo>
    <copy overwrite="true" todir="${currentdir}/.servletapp">
      <fileset dir="${javatemplatedir}/">
        <include name="build.properties"/>
        <include name="build.xml"/>
      </fileset>
      <filterchain>
        <replacetokens>
          <token key="APPNAME" value="${appname}"/>
          <token key="TEMPLATEPATH" value="${javatemplatedir}"/>
          <token key="DEBUGLOG4J1" value="${debuglog4j1}"/>
          <token key="DEBUGLOG4J2" value="${debuglog4j2}"/>
          <token key="SMTPHOST" value="${debuglog4j2}"/>
          <token key="SMTPPORT" value="${debuglog4j2}"/>
          <token key="SMTPUSER" value="${debuglog4j2}"/>
          <token key="SMTPPASS" value="${debuglog4j2}"/>
          <token key="DB" value="${db}"/>
          <token key="DBFILEOPTION" value="${dbfileoption}"/>
          <token key="DEBUGHIBERNATE" value="${debughibernate}"/>
          <token key="DBMODE" value="${dbmode}"/>
          <token key="DBSTORAGEOPTION" value="${dbstorageoption}"/>
          <token key="DBSERVER" value="${dbserver}"/>
          <token key="DBNAME" value="${dbname}"/>
          <token key="DBUSER" value="${dbuser}"/>
          <token key="DBPASSWORD" value="${dbpassword}"/>
          <token key="TOMCATMANAGER" value="${tomcatmanager}"/>
          <token key="TOMCATUSER" value="${tomcatuser}"/>
          <token key="TOMCATPASSWORD" value="${tomcatpassword}"/>
          <token key="TOMCATPATH" value="${tomcatpath}"/>
        </replacetokens>
      </filterchain>
    </copy>
    
    <antcall target="extract-archives"/>
        
  </target>
  
  
  <target name="extract-archives">
    <antcall target="extract-archives-in-dir"><param name="dir-of-archives-to-extract" value="javascript"/></antcall>
    <antcall target="extract-archives-in-dir"><param name="dir-of-archives-to-extract" value="stylesheets"/></antcall>
  </target>
  
  
  <target name="extract-archives-in-dir" if="dir-of-archives-to-extract">
    <untar dest="${currentdir}/.servletapp/${dir-of-archives-to-extract}" compression="gzip">
      <fileset dir="${currentdir}/.servletapp/${dir-of-archives-to-extract}">
        <include name="**/*.tar.gz"/>
      </fileset>
    </untar>
  </target>

  
  <target name="invoke-webdslc" unless="stop-because-load-config-failed">
    <echo>Copying your application files</echo>
    
    <copy failonerror="no" overwrite="true" todir="${currentdir}/.servletapp/src/nativejava">
      <fileset dir="${currentdir}/nativejava">
        <include name="*.java"/>
      </fileset>
    </copy>
    <copy failonerror="no" overwrite="true" todir="${currentdir}/.servletapp/lib">
      <fileset dir="${currentdir}/lib">
        <include name="*.jar"/>
      </fileset>
    </copy>
    
    <copy failonerror="no" overwrite="true" todir="${currentdir}/.servletapp/javascript">
      <fileset dir="${currentdir}/javascript">
        <include name="*.*"/>
      </fileset>
    </copy>
    
    <copy failonerror="no" overwrite="true" todir="${currentdir}/.servletapp/images">
      <fileset dir="${currentdir}/images">
        <include name="*.*"/>
      </fileset>
    </copy>
    
    <copy failonerror="no" overwrite="true" todir="${currentdir}/.servletapp/stylesheets">
      <fileset dir="${currentdir}/stylesheets">
        <include name="*.*"/>
      </fileset>
    </copy>
    
    <copy failonerror="no" overwrite="true" todir="${currentdir}/.servletapp/html">
      <fileset dir="${currentdir}/html">
        <include name="*.*"/>
      </fileset>
    </copy>
    
    <copy failonerror="no" overwrite="true" todir="${currentdir}/.servletapp/src">
      <fileset dir="${currentdir}/">
        <include name="*.ctree"/>
      </fileset>
      <fileset dir="${currentdir}/">
        <include name="*.tbl"/>
      </fileset>
    </copy>

    <echo>Building application</echo>

    <fail unless="webdslexec"/>
    <fail unless="appname"/>
    <fail unless="sessiontimeoutoption"/>
    <fail unless="statisticsoption"/>
    <fail unless="fastppoption"/>
    <fail unless="verboseoption"/>
    <fail unless="debugoption"/>
    <fail unless="passtestoption"/>
    <fail unless="extratypecheckoption"/>
    
    <echo>webdslc arguments: </echo>
    <property name="webdslc-args" value="--servlet -i ../${appname}.app ${sessiontimeoutoption} ${statisticsoption} 
      ${fastppoption} ${verboseoption} ${debugoption} ${passtestoption} ${extratypecheckoption}"/>
    <echo>${webdslc-args}</echo>
    
    <!-- determine if java webdsl is being used -->
    <script language="javascript"> <![CDATA[
      execcommand = project.getProperty("webdslexec");
      if(execcommand.startsWith("java")){
        project.setProperty("using-webdsl-java","true");
        project.setProperty("webdsl-java-options",execcommand.substring(4,execcommand.length()));
      }
    ]]></script>
    
    <if>
      <equals arg1="${using-webdsl-java}" arg2="true"/>
      <then>
        <!-- TODO use java ant task -->
        <echo>Java options: ${webdsl-java-options}</echo>
        <exec executable="java" dir="${currentdir}/.servletapp" failonerror="true">
          <arg line="${webdsl-java-options}"/>
          <arg line="${webdslc-args}"/>
        </exec>
      </then>
      <else>
        <exec executable="${webdslexec}" dir="${currentdir}/.servletapp" failonerror="true">
          <arg line="${webdslc-args}"/>
        </exec>
      </else>
    </if>
  </target>
  
  
  <target name="suggest-to-create-application-ini">
    <input
      message="Cannot find application.ini. This file is necessary to build the application for you. Want to create an application.ini now? [y/n]:"
      addproperty="loadconfig.createini"
      defaultvalue="n"
    />
    <if>
      <equals arg1="${loadconfig.createini}" arg2="y" />
      <then>
        <basename property="loadconfig.dirname" file="${currentdir}"/>
        <input
          message="Application name, also the name of the main .app file (without .app extension):"
          addproperty="new.appname"
          defaultvalue="${loadconfig.dirname}"
        />
        <antcall target="create-config">
          <param name="dir-for-application-ini" value="${currentdir}" />
        </antcall>
        <echo>Created application.ini.</echo>
      </then>
      <else>
        <property name="stop-because-load-config-failed" value="y"/>
      </else>
    </if>
  </target>
  
  
  <!-- to be used in the 'depends' property of a target, so you don't have to list all the vars -->
  <target name="load-config">
    <if>
      <available file="${currentdir}/application.ini"/>
      <then>
        <echo>Loading application settings (application.ini)</echo>
        <loadproperties srcFile="${currentdir}/application.ini"/>
        <if>
          <equals arg1="${appname}" arg2="$${appname}"/>
          <then>
            <echo>Updating application.ini to new syntax</echo>  

            <!-- convert old style application.ini to new style application.ini -->
            <script language="javascript"> <![CDATA[
              importClass(java.io.File);
              importClass(java.io.BufferedReader);
              importClass(java.io.FileReader);
              importClass(java.io.BufferedWriter);
              importClass(java.io.FileWriter);
              importClass(java.lang.StringBuilder);
              importClass(java.util.regex.Pattern);
              importClass(java.util.regex.Matcher);

              // Access to Ant-Properties by their names
              currentdir = project.getProperty("currentdir");

              newcontents = new StringBuilder();
              p = Pattern.compile("export (.*)=(.*)");
              ptrailingspaces = Pattern.compile("\\s+$");

              try {
                fr = new FileReader(currentdir+"/application.ini");
                br = new BufferedReader(fr);
                while (( line = br.readLine()) != null && line.startsWith("export")){
                  echo = project.createTask("echo");
                  echo.setMessage("- "+line);
                  echo.perform();
              
                  m = p.matcher(line);
                  m.find();
                  transformedline=m.group(1).toLowerCase()+"="+m.group(2);
                  //remove trailing spaces
                  mspaces = ptrailingspaces.matcher(transformedline);
                  transformedline = mspaces.replaceAll("");
                  newcontents.append(transformedline+"\n");
                
                  echo = project.createTask("echo");
                  echo.setMessage("+ "+transformedline);
                  echo.perform();
                }
                br.close();
                fr.close();
              
                //write result
                fw = new FileWriter(currentdir+"/application.ini");
                bw = new BufferedWriter(fw);
                bw.write(newcontents.toString());
                bw.close();
                fw.close();
              } catch (e) {
                echo = project.createTask("echo");
                echo.setMessage(e);
                echo.perform();
              }
            ]]></script>

            <echo>Retry loading application settings (application.ini)</echo>
            <loadproperties srcFile="${currentdir}/application.ini"/>
            <fail unless="appname"/>
          </then>
        </if>
      </then>
      <else>
        <antcallback target="suggest-to-create-application-ini" return="stop-because-load-config-failed"/>
        <if>
          <equals arg1="${stop-because-load-config-failed}" arg2="$${stop-because-load-config-failed}"/>
          <then>
            <echo>Loading application settings (application.ini)...</echo>
            <loadproperties srcFile="${currentdir}/application.ini"/>
          </then>
        </if>
      </else>
    </if>
  </target>
  
  
  <target name="make-app-code" depends="load-config">
    <echo>appname: ${appname}</echo>
    <antcallback target="setup-application-template" return="sessiontimeoutoption, statisticsoption, fastppoption, verboseoption, debugoption, extratypecheckoption"/>
    <if>
      <equals arg1="${passtestoption}" arg2="$${passtestoption}"/>
      <then>
        <property name="passtestoption" value=""/>
      </then>
    </if>
    <antcall target="invoke-webdslc" />
  </target>	
  
  
  <target name="make-app">
    <antcallback target="make-app-code" return="appname"/>
    <echo>Now compiling generated Java code</echo>
    <ant dir="${currentdir}/.servletapp" antfile="${currentdir}/.servletapp/build.xml" target="war"/>
  </target>
  

  <target name="build">
    <antcall target="clean-app"/>
    <antcall target="make-app"/>
    <echo>Build done. Resulting application (.war file) is in .servletapp/. Run 'webdsl deploy' to deploy.</echo>
  </target>

  
</project>
