#!@bash@

# Author: Zef Hemel (zef@zefhemel.com)

export prefix=`dirname "$(cd ${0%/*}/.. && echo $PWD/${0##*/})"`
export datarootdir=@datarootdir@

SERVLETPROJECTDIR=.servletapp

function load_config {
  echo "Loading application settings (application.ini)..."
  if [ -f "application.ini" ]
  then
    . application.ini
    return 1
  else
    echo -n "Cannot find application.ini. This file is necessary to build the application for you. Want to create an application.ini now? [y/n] "
    read ANSWER
    if [ "$ANSWER" == "y" ]
    then
      APPNAME=`basename \`pwd\``
      echo "Creating application.ini for application with name $APPNAME."
      
      echo -n "Application name, also the name of the main .app file (without .app extension) [$APPNAME] "
      read APP_NAME
      if [ "$APP_NAME" != "" ]
      then
        APPNAME=$APP_NAME
      fi  
      
      create_config $APPNAME
      echo "Created application.ini. Run webdsl again to compile your project."
    fi
    return 0
  fi
}

function create_config {
  BACKEND=servlet

  echo "---- Database information ----"
  echo "You will now be asked for database info such as hostname, username, password and database. Do note that this script will check if this information is valid, if it is not, it will attempt to create the database with the given username and password for you."
  if [ "$DBSERVER" == "" ]; then
     DBSERVER=localhost
  fi
  echo -n "MySQL Host [$DBSERVER]: "
  read DB_SERVER
  if [ "$DB_SERVER" != "" ]
  then
     DBSERVER=$DB_SERVER
  fi

  if [ "$DBUSER" == "" ]; then
     DBUSER=webdsluser
  fi
  echo -n "MySQL Username [$DBUSER]: "
  read DB_USER
  if [ "$DB_USER" != "" ]
  then
     DBUSER=$DB_USER
  fi
  
  if [ "$DBPASSWORD" == "" ]; then
     DBPASSWORD=
  fi
  echo -n "MySQL Password [$DBPASSWORD]: "
  stty -echo
  read DB_PASSWORD
  stty echo
  echo
  if [ "$DB_PASSWORD" != "" ]
  then
     DBPASSWORD=$DB_PASSWORD
  fi

  if [ "$DBNAME" == "" ]; then
     DBNAME=webdsldb
  fi
  echo -n "MySQL Database [$DBNAME]: "
  read DB_NAME
  if [ "$DB_NAME" != "" ]
  then
     DBNAME=$DB_NAME
  fi
  if [ "$DBMODE" == "" ]; then
     DBMODE=create-drop
  fi
  echo -n "Hibernate database mode (create-drop / update / false) [$DBMODE] "
  read DB_MODE
  if [ "$DB_MODE" != "" ]
  then
     DBMODE=$DB_MODE
  fi

  echo "Now checking if database info works."
  echo 'SHOW TABLES;' | mysql -u$DBUSER -p$DBPASSWORD $DBNAME > /dev/null 2> /dev/null
  if [ "$?" == 0 ]
  then
     echo "Succesful!"
  else
     echo "Unsuccessful, will now attempt to create database. For this we need your MySQL's root password (by default this is blank)."
     echo -n "MySQL root password: "
     stty -echo
     read ROOTPW
     stty echo
     echo
     if [ "$ROOTPW" == "" ]
     then
        mysqladmin -uroot create $DBNAME
        echo "GRANT ALL ON $DBNAME.* TO $DBUSER@localhost identified by '$DBPASSWORD';" | mysql -uroot
     else
   mysqladmin -uroot -p$ROOTPW create $DBNAME
   echo "GRANT ALL ON $DBNAME.* TO $DBUSER@localhost identified by '$DBPASSWORD';" | mysql -uroot -p$ROOTPW
     fi
     echo "Now checking if database creation worked..."
     `echo 'SHOW TABLES;' | mysql -u$DBUSER -p$DBPASSWORD $DBNAME`
     if [ "$?" == 0 ]
     then
        echo "Yes!"
     else
  echo "No, unfortunately you'll have to create the database yourself."
     fi
  fi

  echo -n "Do you want to configure your application for sending email? [y/n] "
  read SMTPANSWER
  if [ "$SMTPANSWER" == "y" ]
  then
     echo -n "SMTP host [smtp.gmail.com]: "
     read SMTPHOST
     if [ "$SMTPHOST" == "" ]
     then
       SMTPHOST=smtp.gmail.com
     fi

     echo -n "SMTP port [465]: "
     read SMTPPORT
     if [ "$SMTPPORT" == "" ]
     then
       SMTPPORT=465
     fi

     echo -n "SMTP username []: "
     read SMTPUSER

     echo -n "SMTP password []: "
     stty -echo
     read SMTPPASS
     stty echo
     echo

     echo -n "SMTP use SSL [true]: "
     read SMTPSSL
     if [ "$SMTPSSL" == "" ]
     then
       SMTPSSL=true
     fi

     echo -n "SMTP use TLS [false]: "
     read SMTPTLS
     if [ "$SMTPTLS" == "" ]
     then
       SMTPTLS=false
     fi
  else
     SMTPHOST=localhost
     SMTPPORT=25
     SMTPSSL=false
     SMTPTLS=false
  fi
  
  
  echo "---- Tomcat information ----"
  if [ "$TOMCATPATH" == "" ]; then
    TOMCATPATH=/opt/tomcat
  fi
  echo -n "Tomcat path for deployment [$TOMCATPATH]: "
  read CATPATH
  if [ "$CATPATH" == "" ]
  then
     CATPATH=$TOMCATPATH
  fi
  TOMCATPATH=$CATPATH

  echo "export BACKEND=$BACKEND" >> application.ini
  echo "export TOMCATPATH=$TOMCATPATH" >> application.ini
  echo "export APPNAME=$APPNAME" >> application.ini
  echo "export DBSERVER=$DBSERVER" >> application.ini
  echo "export DBUSER=$DBUSER" >> application.ini
  echo "export DBPASSWORD=$DBPASSWORD" >> application.ini
  echo "export DBNAME=$DBNAME" >> application.ini
  echo "export DBMODE=$DBMODE" >> application.ini
  echo "export SMTPHOST=$SMTPHOST" >> application.ini
  echo "export SMTPPORT=$SMTPPORT" >> application.ini
  echo "export SMTPUSER=$SMTPUSER" >> application.ini
  echo "export SMTPPASS=$SMTPPASS" >> application.ini
  echo "export SMTPSSL=$SMTPSSL" >> application.ini
  echo "export SMTPTLS=$SMTPTLS" >> application.ini
  
  rm -rf $SERVLETPROJECTDIR
}

function extract_archives {
  # param1: dir
  if [ "$1" == "" ]; then return; fi
  if [ ! -d $1 ]; then return; fi
  # run in subshell, so working dir does not change
  (
    cd $1
    for i in *.tar.gz; do
      tar xzf $i
      rm $i
    done
  )
}

function make_app_code {
  load_config
  if [ "$?" == 0 ]
  then
    return 1
  fi
  
  setup_application_template
  invoke_webdslc
  return $?
}

function setup_application_template {
    if [ ! -e "$SERVLETPROJECTDIR" ]
    then
      export WEBDSLPATH=$prefix
      export DSLTOSEAM=$prefix/bin/webdslc
      export TEMPLATEPATH=@datadir@/@PACKAGE@/template-java-servlet
      
      export ESCAPED_DSLTOSEAM=`echo $DSLTOSEAM | sed 's/\\//\\\\\\//g'`
      export ESCAPED_TOMCATPATH=`echo $TOMCATPATH | sed 's/\\//\\\\\\//g'`
      
      if [ "$SESSIONTIMEOUT" ]; then
        #option passed to webdslc
        export SESSIONTIMEOUTOPTION="--session-timeout $SESSIONTIMEOUT"
      fi
      if [ "$FASTPP" == "true" ]; then
        #option passed to webdslc
        export FASTPPOPTION="--fast-pp"
      fi
      if [ "$STATISTICS" == "true" ]; then
        #option passed to webdslc
        export STATISTICSOPTION="--statistics"
      fi
      if [ "$DEBUG" == "true" ]; then
        #option passed to webdslc
        export DEBUGOPTION="--debug"
        export DEBUGHIBERNATE="hibernate.show_sql=true"
        export DEBUGLOG4J1="log4j.rootLogger=info, stdout"
        export DEBUGLOG4J2="log4j.logger.org.hibernate.type=trace"
      fi
      if [ "$VERBOSE" ]; then
        export VERBOSEOPTION="--verbose $VERBOSE"
      fi
      if [ "$EXTRATYPECHECK" == "true" ]; then
        #option passed to webdslc
        export EXTRATYPECHECKOPTION="--extra-typecheck"
      fi
      
      export DBSTORAGEOPTION="utils.MySQL5InnoDBDialectUTF8"
      if [ "$DBSTORAGE" == "myisam" ]; then
        export DBSTORAGEOPTION="utils.MySQLMyISAMDialectUTF8"
      fi
      
      export DBFILEOPTION="/dev/null"
      if [ "$DBFILE" ]; then
        export DBFILEOPTION="$DBFILE"
      fi
      export ESCAPED_DBFILEOPTION=`echo $DBFILEOPTION | sed 's/\\//\\\\\\//g'`
      
      if [ "$TOMCATMANAGER" == "" ]
      then
        export TOMCATMANAGER="http://localhost:8080/manager"
      fi
      export ESCAPED_TOMCATMANAGER=`echo $TOMCATMANAGER | sed 's/\\//\\\\\\//g'`
      if [ "$TOMCATUSER" == "" ]
      then
        export TOMCATUSER="tomcat"
      fi
      if [ "$TOMCATPASSWORD" == "" ]
      then
        export TOMCATPASSWORD="tomcat"
      fi
           
      echo "Creating Java Servlet application in $SERVLETPROJECTDIR..."
      mkdir $SERVLETPROJECTDIR
      cd $SERVLETPROJECTDIR
      
      export ESCAPED_TEMPLATEPATH=`echo $TEMPLATEPATH | sed 's/\\//\\\\\\//g'`
      if [ "$PASSTESTOPTION" == " --test " ]; then
        echo "copying template for compiling tests"
        cp -r $TEMPLATEPATH/* .      
      else
        TEMPLATEFILES="$(find $TEMPLATEPATH -maxdepth 1 -mindepth 1 ! -iname lib-test ! -iname tomcat)"
        cp -r $TEMPLATEFILES .
        mkdir lib-test
      fi
      
      chmod -R u+w .
      find -type d -iname '.svn' -exec rm -rf {} \; 2> /dev/null

    CONFIG_FILE=build.properties
    sed -e "s/@@TEMPLATEPATH@@/$ESCAPED_TEMPLATEPATH/g"  -e "s/@@TOMCATMANAGER@@/$ESCAPED_TOMCATMANAGER/g" -e "s/@@TOMCATUSER@@/$TOMCATUSER/g" -e "s/@@TOMCATPASSWORD@@/$TOMCATPASSWORD/g" -e "s/@@DB@@/$DB/g" -e "s/@@DBSTORAGEOPTION@@/$DBSTORAGEOPTION/g" -e "s/@@DBFILEOPTION@@/$ESCAPED_DBFILEOPTION/g" -e "s/@@DEBUGLOG4J2@@/$DEBUGLOG4J2/g" -e "s/@@DEBUGLOG4J1@@/$DEBUGLOG4J1/g" -e "s/@@DEBUGHIBERNATE@@/$DEBUGHIBERNATE/g" -e "s/@@DEBUGOPTION@@/$DEBUGOPTION/g" -e "s/@@VERBOSEOPTION@@/$VERBOSEOPTION/g" -e "s/@@FASTPPOPTION@@/$FASTPPOPTION/g" -e "s/@@STATISTICSOPTION@@/$STATISTICSOPTION/g" -e "s/@@SESSIONTIMEOUTOPTION@@/$SESSIONTIMEOUTOPTION/g" -e "s/@@TOMCATPATH@@/$ESCAPED_TOMCATPATH/g" -e "s/@@SMTPHOST@@/$SMTPHOST/g" -e "s/@@SMTPPORT@@/$SMTPPORT/g" -e "s/@@SMTPUSER@@/$SMTPUSER/g" -e "s/@@SMTPPASS@@/$SMTPPASS/g" -e "s/@@SMTPSSL@@/$SMTPSSL/g" -e "s/@@SMTPTLS@@/$SMTPTLS/g" -e "s/@@DBPASSWORD@@/$DBPASSWORD/g" -e "s/@@DBUSER@@/$DBUSER/g" -e "s/@@DBNAME@@/$DBNAME/g" -e "s/@@DBSERVER@@/$DBSERVER/g" -e "s/@@DBMODE@@/$DBMODE/g" -e "s/@@APPNAME@@/$APPNAME/g" -e "s/@@DSLTOSEAM@@/$ESCAPED_DSLTOSEAM/g" $CONFIG_FILE > ${CONFIG_FILE}.new && mv $CONFIG_FILE.new $CONFIG_FILE      

      # Nathan: extract javascript frameworks
      extract_archives
      extract_archives javascript
      extract_archives stylesheets

      cd ..
    fi
    
    cp *.tbl *.ctree $SERVLETPROJECTDIR/src/ 2>/dev/null

}

function invoke_webdslc {
    cd $SERVLETPROJECTDIR
    echo "Copying your application files..."

    mkdir src/nativejava
    cp -r ../nativejava/*.java src/nativejava/ &> /dev/null
    cp -r ../lib/*.jar lib/ &> /dev/null

    mkdir src/javascript
    cp -r ../javascript/* javascript/ &> /dev/null

    mkdir src/images
    cp -r ../images/* images/ &> /dev/null

    mkdir src/stylesheets
    cp -r ../stylesheets/* stylesheets/ &> /dev/null

    mkdir src/html
    cp -r ../html/* html/ &> /dev/null

    cp ../*.tbl . &> /dev/null
    cp ../*.ctree . &> /dev/null

    echo "Building application..."
    @WEBDSLC@ --servlet -i ../$APPNAME.app $SESSIONTIMEOUTOPTION $STATISTICSOPTION $FASTPPOPTION $VERBOSEOPTION $DEBUGOPTION $PASSTESTOPTION $EXTRATYPECHECKOPTION || exit 1
    RET="$?"
    cd ..
    bash $prefix/bin/webdsl-plugins || exit 1
    return $RET
}

function make_app {
  make_app_code
  if [ "$?" != 0 ]
  then
    return 1
  fi
  if [ "$BACKEND" == "seam" ]; then
    cd $SEAMPROJECTDIR
    echo "Now compiling generated Java code..."
    ant archive
    RET="$?"  
    cd ..
    if [ ! -e "dist" ]
    then
      mkdir dist
    fi
    cp $SEAMPROJECTDIR/dist/$APPNAME.ear $SEAMPROJECTDIR/resources/$APPNAME-dev-ds.xml dist
    return $RET
  fi
  if [ "$BACKEND" == "servlet" ]; then
    cd $SERVLETPROJECTDIR
    echo "Now compiling generated Java code..."
    ant war
    RET="$?"  
    cd ..
    return $RET
  fi
}

function check_app {
  cd .servletapp
  ant check
  RET="$?"
  cd ..
  if [ "$RET" == 0 ]
  then
    echo "Check succesful."
    return $RET
  fi
  echo "Check failed."
  return $RET
}

function check_web_app {
  cd .servletapp
  ant check-web
  RET="$?"
  cd ..
  if [ "$RET" == 0 ]
  then
    echo "Check succesful."
    return $RET
  fi
  echo "Check failed."
  return $RET
}

function clean_app {
  echo "Removing .servletapp directory."
  rm -rf $SERVLETPROJECTDIR
#  rm -rf $SEAMPROJECTDIR
#  rm -rf $PYTHONPROJECTDIR
}

function clean_parse_cache {
  echo "Removing .webdsl-parsecache directory."
  rm -rf .webdsl-parsecache
}

function show_help {
  echo "Options:"
  echo "     build : Performs 'webdsl clean' and compiles the application using the settings in application.ini."
#  echo "      code : Compile your application to Java or Python code, but do not compile them."
  echo "       new : Creates an example WebDSL application in a subdirectory of the current directory. The application name is also the name of the directory."
  echo "    deploy : Deploys the application to Tomcat. Changing the settings in application.ini requires a new 'webdsl build' first."
#  echo "       run : Runs the application (Python AppEngine backend only)."
#  echo "  analyze : Perform various analyses on the application but do not generate code."
  echo "     clean : Removes the .servletapp directory which contains generated files."
#  echo " cleanall : Removes the created Seam project and dist directory."
  echo "     check : Runs all tests using the database settings in application.ini."
  echo "test [app] : Builds [app] using a generated application.ini and runs all tests on a Sqlite database file."
}


commands="$*"
if [ "$*" == "" ]; then
  commands="help"
fi

if [ "$1" == "test" -o "$1" == "test-web" ]; then
  rm -rf .seamapp
  rm -rf .servletapp
  rm -rf dist
  if [ -f application.ini ]; then mv application.ini application.ini.temp; fi
  if [ "$3" == "" ]; then
    for backend in servlet; do
      echo BACKEND: $backend
      bash $0 $1 $2 $backend || exit 1
    done
    exit 0
  fi
  if [ "$3" == "seam" ]; then
  echo "export BACKEND=seam" >> application.ini
  fi
  if [ "$3" == "servlet" ]; then
  echo "export BACKEND=servlet" >> application.ini
  fi
  if [ "$3" == "python" ]; then
  echo "export BACKEND=python" >> application.ini
  fi
  echo "export TOMCATPATH=/dev/null" >> application.ini
  echo "export JBOSSPATH=/dev/null" >> application.ini
  echo "export APPNAME=$2" >> application.ini  
  echo "export DB=sqlite" >> application.ini
  echo "export DBFILE=`pwd`/temp_test.db" >> application.ini
  #echo "export DBSERVER=localhost" >> application.ini
  #echo "export DBUSER=whatever" >> application.ini
  #echo "export DBPASSWORD=whatever" >> application.ini
  #echo "export DBNAME=whatever" >> application.ini
  echo "export DBMODE=create-drop" >> application.ini
  echo "export SMTPHOST=localhost" >> application.ini
  echo "export SMTPPORT=1" >> application.ini
  echo "export SMTPUSER=naam" >> application.ini
  echo "export SMTPPASS=pass" >> application.ini
  echo "export SMTPSSL=true" >> application.ini
  echo "export SMTPTLS=true" >> application.ini
  echo "" > temp_test.db
  PASSTESTOPTION=" --test "
  make_app
  RET=$?
  if [ $RET == 0 ]
  then
    if [ "$1" == "test-web" ]; then
      check_web_app
    else
      check_app    
    fi
    RET=$?
  fi
  rm -rf .seamapp
  rm -rf dist
  if [ -f application.ini.temp ]; then mv application.ini.temp application.ini; fi
  exit $RET
fi

for i in $commands; do
  case "$i" in
    "deploy" )
       load_config
       if [ "$?" == 0 ]
       then
         return 0
       fi
       if [ "$BACKEND" == "seam" ]; then
         if [ ! -e "$SEAMPROJECTDIR" ]
         then
           make_app
         fi
         echo "Now deploying application..."
         cd $SEAMPROJECTDIR/
         ant deploy
         cd ..
         echo "Application has been deployed. In a minute it should be available on http://localhost:8080/$APPNAME/"
         if [ "$2" == "restart" ]; then
           echo "Will now attempt to restart JBoss. This requires the 'screen' command, make sure it is installed."
           restart_jboss
         fi
       fi
       if [ "$BACKEND" == "servlet" ]; then
         if [ ! -e "$SERVLETPROJECTDIR" ]
         then
           make_app
         fi
         echo "Now deploying application..."
         cd $SERVLETPROJECTDIR/
         ant deploy
         cd ..
         echo "Application has been deployed. In a moment it should be available on http://localhost:8080/$APPNAME/" 
       fi
       if [ "$BACKEND" == "python" ]; then
         if [ ! -e "$PYTHONPROJECTDIR" ]
         then
           make_app
         fi
         echo "Now deploying application..."
         cd $PYTHONPROJECTDIR/
         appcfg.py update .
         cd ..
         echo "Application has been deployed. You can test it at http://$APPNAME.appspot.com"
       fi
       ;;
    "undeploy" )
       load_config
       if [ "$?" == 0 ]
       then
         return 0
       fi
       if [ "$BACKEND" == "servlet" ]; then
         if [ ! -e "$SERVLETPROJECTDIR" ]
         then
           make_app_code
         fi
         echo "Now undeploying application..."
         cd $SERVLETPROJECTDIR/
         ant undeploy
         cd ..
         echo "Application undeployed."
       fi
       ;;
    "tomcatdeploy" )
       load_config
       if [ "$?" == 0 ]
       then
         return 0
       fi
       if [ "$BACKEND" == "servlet" ]; then
         if [ ! -e "$SERVLETPROJECTDIR" ]
         then
           make_app
         fi
         echo "Now deploying application..."
         cd $SERVLETPROJECTDIR/
         ant tomcatdeploy
         cd ..
         echo "Application has been deployed. In a moment it should be available on http://localhost:8080/$APPNAME/" 
       fi
       ;;
    "tomcatundeploy" )
       load_config
       if [ "$?" == 0 ]
       then
         return 0
       fi
       if [ "$BACKEND" == "servlet" ]; then
         if [ ! -e "$SERVLETPROJECTDIR" ]
         then
           make_app_code
         fi
         echo "Now undeploying application..."
         cd $SERVLETPROJECTDIR/
         ant tomcatundeploy
         cd ..
         echo "Application undeployed."
       fi
       ;;
    "run" )
       load_config
       if [ ! -e "$PYTHONPROJECTDIR" ]
       then
         make_app
       fi
       if [ "$DBMODE" == "create-drop" ]; then
         APPSWITCH="-c"
       else
         APPSWITCH=""
       fi
       dev_appserver.py $APPSWITCH $PYTHONPROJECTDIR
       ;;
    "new" )
       echo -n "Application name (one word): "
       read APPNAME
       mkdir $APPNAME
       cd $APPNAME
       create_config $APPNAME
       echo "Now creating bare-bones application in $APPNAME.app..."
       cp @datadir@/@PACKAGE@/new_project/*.app .
       mkdir stylesheets
       cp @datadir@/@PACKAGE@/new_project/stylesheets/*.css ./stylesheets/
       mkdir images
       cp @datadir@/@PACKAGE@/new_project/images/*.* ./images/
       
       sed "s/APPLICATION_NAME/$APPNAME/" APPLICATION_NAME.app > $APPNAME.app
       rm APPLICATION_NAME.app
       echo "Application created in $APPNAME. You can now cd to this directory and call the webdsl script to compile your program."
       ;;
    "clean" )
       clean_app
       ;;
    "cleanall" )
       clean_app
       clean_parse_cache
       ;;
    "code" )
       make_app_code
       if [ "$BACKEND" == "seam" ]; then
         echo "Done, result is in $SEAMPROJECTDIR."
       fi
       ;;
    "analyze" )
       load_config
       $prefix/bin/webdslc -i $APPNAME.app --analysis --no-generation > /dev/null
       ;;
    "build" )
       clean_app
       make_app
       if [ "$?" == 0 ]
       then
         echo "Build done. Resulting application (.war file) is in .servletapp/. Run 'webdsl deploy' to deploy."
       fi
       ;;
    "check" )
       PASSTESTOPTION=" --test "
       clean_app
       make_app
       check_app
       ;;
    "check-web" )
       PASSTESTOPTION=" --test "
       clean_app
       make_app
       check_web_app
       ;;
    "typecheck" )
       load_config
       if [ ! -e "$SERVLETPROJECTDIR" ]
       then
         setup_application_template
       fi
       cd $SERVLETPROJECTDIR
       @WEBDSLC@ --servlet -i ../$APPNAME.app --typecheck || exit 1
       ;;
    "convert-to-unicode" )
       load_config
       echo "note: the specified database username in application.ini needs read permission on the 'information_schema' database in mysql"
       echo "select t.table_name, c.column_name from tables t, columns c where t.table_schema = '$DBNAME' and t.table_schema=c.table_schema and t.table_name=c.table_name and column_type = 'varchar(16)';" \
       | mysql -u$DBUSER -p$DBPASSWORD information_schema > .servletapp/mysqloutput.tmp # 2> /dev/null
       if [ "$?" == 0 ]
       then
         echo "mysql query to retrieve id columns succeeded"
         echo "select t.table_name, c.column_name, c.column_type from tables t, columns c where t.table_schema = '$DBNAME' and t.table_schema=c.table_schema and t.table_name=c.table_name and (data_type = 'varchar' or data_type = 'longtext');" \
         | mysql -u$DBUSER -p$DBPASSWORD information_schema > .servletapp/mysqloutput2.tmp # 2> /dev/null
         if [ "$?" == 0 ]
         then
           echo "mysql query to retrieve string columns succeeded"
           cd .servletapp
           ant convertoldglobals
           echo "finished converting id's"
       fi
       fi
       ;;
    "config" )
       java -ss4m -cp $prefix/bin/strategoxt.jar:$prefix/bin/webdsl-config.jar org.webdsl.webdsl_config.Main
       ;;
    "help" )
       show_help
       ;;
    * )
       show_help
       ;;
  esac
done


