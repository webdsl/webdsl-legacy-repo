#!/bin/bash

# Author: Zef Hemel (zef@zefhemel.com)

export prefix=@prefix@
export datarootdir=@datarootdir@

SEAMPROJECTDIR=.seamapp

function stop_jboss {
  ps a | grep jboss | grep java | grep -oE "^\s*[0-9]+" | xargs kill
  for i in `seq 1 20`;
  do
    if [ `ps a | grep jboss | grep java | wc -l` == 0 ]; then
      echo "JBoss stopped."
      return 0
    else
      echo "JBoss still shutting down. Waiting another 5 seconds."
    fi
    sleep 5
  done
  echo "Gave on waiting."
  return 1
}

function start_jboss {
  echo "Starting JBoss..."
  screen -d -m $JBOSSPATH/bin/run.sh -b 0.0.0.0
   for i in `seq 1 20`;
   do
     sleep 5
     echo "Checking if JBoss is running yet..."
     curl http://localhost:8080 > /dev/null 2> /dev/null
     if [ "$?" == 0 ]; then
       echo "Yep!"
       echo "You can watch the JBoss output by running 'screen -r', to detach the screen press Ctrl-a-d"
       return 0
     else
       echo "Nope, not yet, waiting another 5 seconds..."
     fi
   done  
   echo "Gave up."
   return 1
}

function restart_jboss {
  stop_jboss
  start_jboss
}

function load_config {
  echo "Loading application settings (application.ini)..."
  if [ -f "application.ini" ]
  then
    . application.ini
    NEEDED_SETTINGS="APPNAME, DBSERVER, DBUSER, DBPASSWORD, DBNAME, JBOSSPATH, DBMODE"
    GREP_SET=`echo $NEEDED_SETTINGS | sed "s/, /\|/g"`
    SETTING_COUNT=`echo $NEEDED_SETTINGS | wc -w`
    if [ `export | grep -E "($GREP_SET)" | wc -l` -lt $SETTING_COUNT ]
    then
      echo "application.ini file not complete. It needs to include: $NEEDED_SETTINGS"
      echo -n "Want to adapt your application.ini now? [y/n] "
      read ANSWER
      if [ "$ANSWER" == "y" ]
      then
        APPNAME=`basename \`pwd\``
        create_config $APPNAME
        echo "Adapted application.ini. Run webdsl again to compile your project."
      fi
      return 0
      fi
    return 1
  else
    echo -n "Cannot find application.ini. This file is necessary to build the application for you. Want to create an application.ini now? [y/n] "
    read ANSWER
    if [ "$ANSWER" == "y" ]
    then
      APPNAME=`basename \`pwd\``
      echo "Creating application.ini for application with name $APPNAME."
      create_config $APPNAME
      echo "Created application.ini. Run webdsl again to compile your project."
    fi
    return 0
  fi
}

function create_config {
  echo "---- Database information ----"
  echo "You will now be asked for database info such as hostname, username, password and database. Do note that this script will check if this information is valid, if it is not, it will attempt to create the databse with the given username and password for you."
  if [ "$DBSERVER" == "" ]; then
     DBSERVER=localhost
  fi
  echo -n "MySQL Host [$DBSERVER]: "
  read DB_SERVER
  if [ "$DB_SERVER" != "" ]
  then
     DBSERVER=$DB_SERVER
  fi

  if [ "$DBUSER" == "" ]; then
     DBUSER=webdsluser
  fi
  echo -n "MySQL Username [$DBUSER]: "
  read DB_USER
  if [ "$DB_USER" != "" ]
  then
     DBUSER=$DB_USER
  fi
  
  if [ "$DBPASSWORD" == "" ]; then
     DBPASSWORD=webdslpassword
  fi
  echo -n "MySQL Password [$DBPASSWORD]: "
  stty -echo
  read DB_PASSWORD
  stty echo
  echo
  if [ "$DB_PASSWORD" != "" ]
  then
     DBPASSWORD=$DB_PASSWORD
  fi

  if [ "$DBNAME" == "" ]; then
     DBNAME=webdsldb
  fi
  echo -n "MySQL Database [$DBNAME]: "
  read DB_NAME
  if [ "$DB_NAME" != "" ]
  then
     DBNAME=$DB_NAME
  fi
  if [ "$DBMODE" == "" ]; then
     DBMODE=create-drop
  fi
  echo -n "Hibernate database mode (e.g. 'update' or 'create-drop') [$DBMODE] "
  read DB_MODE
  if [ "$DB_MODE" != "" ]
  then
     DBMODE=$DB_MODE
  fi

  echo "Now checking if database info works."
  echo 'SHOW TABLES;' | mysql -u$DBUSER -p$DBPASSWORD $DBNAME > /dev/null 2> /dev/null
  if [ "$?" == 0 ]
  then
     echo "Succesful!"
  else
     echo "Unsuccessful, will now attempt to create database. For this we need your MySQL's root password (by default this is blank)."
     echo -n "MySQL root password: "
     stty -echo
     read ROOTPW
     stty echo
     echo
     if [ "$ROOTPW" == "" ]
     then
	      mysqladmin -uroot create $DBNAME
	      echo "GRANT ALL ON $DBNAME.* TO $DBUSER@localhost identified by '$DBPASSWORD';" | mysql -uroot
     else
	 mysqladmin -uroot -p$ROOTPW create $DBNAME
	 echo "GRANT ALL ON $DBNAME.* TO $DBUSER@localhost identified by '$DBPASSWORD';" | mysql -uroot -p$ROOTPW
     fi
     echo "Now checking if database creation worked..."
     `echo 'SHOW TABLES;' | mysql -u$DBUSER -p$DBPASSWORD $DBNAME`
     if [ "$?" == 0 ]
     then
        echo "Yes!"
     else
	echo "No, unfortunately you'll have to create the database yourself."
     fi
  fi

  echo -n "Do you want to configure your application for sending email? [y/n] "
  read SMTPANSWER
  if [ "$SMTPANSWER" == "y" ]
  then
     echo -n "SMTP host [smtp-a.tudelft.nl]: "
     read SMTPHOST
     if [ "$SMTPHOST" == "" ]
     then
       SMTPHOST=smtp-a.tudelft.nl
     fi

     echo -n "SMTP port [465]: "
     read SMTPPORT
     if [ "$SMTPPORT" == "" ]
     then
       SMTPPORT=465
     fi

     echo -n "SMTP username []: "
     read SMTPUSER

     echo -n "SMTP password []: "
     stty -echo
     read SMTPPASS
     stty echo
     echo

     echo -n "SMTP use SSL [true]: "
     read SMTPSSL
     if [ "$SMTPSSL" == "" ]
     then
       SMTPSSL=true
     fi

     echo -n "SMTP use TLS [false]: "
     read SMTPTLS
     if [ "$SMTPTLS" == "" ]
     then
       SMTPTLS=false
     fi
  else
     SMTPHOST=localhost
     SMTPPORT=25
     SMTPSSL=false
     SMTPTLS=false
  fi
  
  echo "---- JBoss information ----"
  if [ "$JBOSSPATH" == "" ]; then
    JBOSSPATH=/opt/jboss
  fi
  echo -n "JBoss path for deployment [$JBOSSPATH]: "
  read BOSSPATH
  if [ "$BOSSPATH" == "" ]
  then
     BOSSPATH=$JBOSSPATH
  fi
  JBOSSPATH=$BOSSPATH

  echo "export JBOSSPATH=$JBOSSPATH" > application.ini
  echo "export APPNAME=$APPNAME" >> application.ini
  echo "export DBSERVER=$DBSERVER" >> application.ini
  echo "export DBUSER=$DBUSER" >> application.ini
  echo "export DBPASSWORD=$DBPASSWORD" >> application.ini
  echo "export DBNAME=$DBNAME" >> application.ini
  echo "export DBMODE=$DBMODE" >> application.ini
  echo "export SMTPHOST=$SMTPHOST" >> application.ini
  echo "export SMTPPORT=$SMTPPORT" >> application.ini
  echo "export SMTPUSER=$SMTPUSER" >> application.ini
  echo "export SMTPPASS=$SMTPPASS" >> application.ini
  echo "export SMTPSSL=$SMTPSSL" >> application.ini
  echo "export SMTPTLS=$SMTPTLS" >> application.ini
  rm -rf $SEAMPROJECTDIR
}

function make_java_app {
  load_config
  if [ "$?" == 0 ]
  then
    return 1
  fi
  if [ ! -e "$SEAMPROJECTDIR" ]
  then
    export WEBDSLPATH=@prefix@
    export DSLTOSEAM=@prefix@/bin/dsl-to-seam
    export TEMPLATEPATH=@datadir@/@PACKAGE@/template
    
    export ESCAPED_DSLTOSEAM=`echo $DSLTOSEAM | sed 's/\\//\\\\\\//g'`
    export ESCAPED_JBOSSPATH=`echo $JBOSSPATH | sed 's/\\//\\\\\\//g'`

    echo "Creating Seam application in $SEAMPROJECTDIR..."
    mkdir $SEAMPROJECTDIR
    cd $SEAMPROJECTDIR
    #tar xzf $WEBDSLPATH/src/org/webdsl/dsl/project/template.tar.gz
    cp -r $TEMPLATEPATH/* .
    chmod -R u+w .
    find -type d -iname '.svn' -exec rm -rf {} \; 2> /dev/null
    mv resources/GENERICAPP-prod-ds.xml resources/$APPNAME-prod-ds.xml
    mv resources/GENERICAPP-dev-ds.xml resources/$APPNAME-dev-ds.xml
    find . -type f \! -iname \*.jar -exec sh -c 'sed -e "s/@@JBOSSPATH@@/$ESCAPED_JBOSSPATH/g" -e "s/@@SMTPHOST@@/$SMTPHOST/g" -e "s/@@SMTPPORT@@/$SMTPPORT/g" -e "s/@@SMTPUSER@@/$SMTPUSER/g" -e "s/@@SMTPPASS@@/$SMTPPASS/g" -e "s/@@SMTPSSL@@/$SMTPSSL/g" -e "s/@@SMTPTLS@@/$SMTPTLS/g" -e "s/@@DBPASSWORD@@/$DBPASSWORD/g" -e "s/@@DBUSER@@/$DBUSER/g" -e "s/@@DBNAME@@/$DBNAME/g" -e "s/@@DBSERVER@@/$DBSERVER/g" -e "s/@@DBMODE@@/$DBMODE/g" -e "s/@@APPNAME@@/$APPNAME/g" -e "s/@@DSLTOSEAM@@/$ESCAPED_DSLTOSEAM/g" $0 > $0.new && mv $0.new $0' {} \;
    cd ..
  fi
  cd $SEAMPROJECTDIR
  echo "Copying your application files..."
  tar -cf - `find .. -name "*.app" ! -regex '.*/\..*' -print` 2> /dev/null | ( tar xBf - )
  # Move all non-.app files to the view/ directory (keeping directory structure intact)
  tar -cf - `find .. ! -name "*.app" ! -regex '.*/\..*' ! -regex '\.\./dist/.*' ! -regex '\.\./application\.ini' -type f -print` 2> /dev/null | (cd view; tar xBf - )
  echo "Building application..."
  make
  RET="$?"
  cd ..
  @prefix@/bin/webdsl-plugins
  return $RET
}

function make_app {
  make_java_app
  if [ "$?" != 0 ]
  then
    return 0
  fi
  cd $SEAMPROJECTDIR
  echo "Now compiling generated Java code..."
  ant archive
  cd ..
  if [ ! -e "dist" ]
  then
    mkdir dist
  fi
  cp $SEAMPROJECTDIR/dist/$APPNAME.ear $SEAMPROJECTDIR/resources/$APPNAME-dev-ds.xml dist
  return 1
}

echo "WebDSL script by Zef Hemel"

commands="$*"
if [ "$*" == "" ]; then
  commands="build"
fi

for i in $commands; do
  case "$i" in
    "deploy" )
       load_config
       if [ "$?" == 0 ]
       then
         return 0
       fi
       if [ ! -e "$SEAMPROJECTDIR" ]
       then
         make_app
       fi
       echo "Now deploying application..."
       cd $SEAMPROJECTDIR/
       ant deploy
       cd ..
       echo "Application has been deployed. In a minute it should be available on http://localhost:8080/$APPNAME/"
       if [ "$2" == "restart" ]; then
         echo "Will now attempt to restart JBoss. This requires the 'screen' command, make sure it is installed."
         restart_jboss
       fi
       ;;
    "undeploy" )
       load_config
       if [ "$?" == 0 ]
       then
         return 0
       fi
       if [ ! -e "$SEAMPROJECTDIR" ]
       then
         make_java_app
       fi
       echo "Now undeploying application..."
       cd $SEAMPROJECTDIR/
       ant undeploy
       cd ..
       echo "Application undeployed."
       ;;
    "new" )
       echo -n "Application name (one word): "
       read APPNAME
       mkdir $APPNAME
       cd $APPNAME
       create_config $APPNAME
       echo "Now creating bare-bones application in $APPNAME.app..."
       mkdir stylesheets
       cp @datadir@/@PACKAGE@/new_project/*.app .
       
       sed "s/APPLICATION_NAME/$APPNAME/" hello.app > $APPNAME.app
       rm hello.app
       echo "Application created in $APPNAME. You can now cd to this directory and call the webdsl script to compile your program."
       ;;
    "clean" )
       echo "Removing seam project files"
       rm -rf $SEAMPROJECTDIR
       ;;
    "cleanall" )
       echo "Removing seam project files and dist directory."
       rm -rf $SEAMPROJECTDIR dist
       ;;
    "java" )
       make_java_app
       echo "Done, result is in $SEAMPROJECTDIR."
       ;;
    "build" )
       make_app
       if [ "$?" == 1 ]
       then
         echo "Done. Resulting application (.ear and datasource file) are in dist/. Run 'webdsl deploy' to deploy."
       fi
       ;;
    * )
       echo "Options:"
       echo "   [none] : Compile your application. Takes all your .app and .css files, creates a new Seam project, compiles everything."
       echo "     java : Compile your application to java and JSF code, but do not compile them."
       echo "      new : Create a new, empty WebDSL application."
       echo "   deploy : Deploys your application to JBoss."
       echo "    clean : Removes the created Seam project."
       echo " cleanall : Removes the created Seam project and dist directory."
       ;;
  esac
done

