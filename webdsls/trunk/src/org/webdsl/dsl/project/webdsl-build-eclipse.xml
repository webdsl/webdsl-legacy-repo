<project name="webdsl-build-eclipse" default="eclipse-build">
  
  <target name="eclipse-build">
    <antcall target="build-without-java-compile"/>
    <property name="servletappdir" value="${currentdir}/.servletapp"/>
    <property name="webcontentdir" value="${currentdir}/WebContent"/>
      <copy preservelastmodified="true" todir="${webcontentdir}/WEB-INF/lib">
        <fileset dir="${servletappdir}/bin/WEB-INF/lib">
                <exclude name="javaee.jar" />
        </fileset>
      </copy>
      <copy file="${servletappdir}/web.xml" preservelastmodified="true" todir="${webcontentdir}/WEB-INF"/>
      <copy preservelastmodified="true" todir="${webcontentdir}">
        <fileset dir="${servletappdir}/html"/>
      </copy>
      <copy preservelastmodified="true" todir="${webcontentdir}/images">
        <fileset dir="${servletappdir}/images"/>
      </copy>
      <copy preservelastmodified="true" todir="${webcontentdir}/stylesheets">
        <fileset dir="${servletappdir}/stylesheets"/>
      </copy>
      <copy preservelastmodified="true" todir="${webcontentdir}/javascript">
        <fileset dir="${servletappdir}/javascript"/>
      </copy>
      <copy preservelastmodified="true" todir="${webcontentdir}">
        <fileset dir="${servletappdir}">
          <include name="webdsl-reindex"/>
        <include name="build.reindex.xml"/>
        <include name="build.properties"/>
        <include name="html/index.jsp"/>
        <include name="html/favicon.ico"/>
        <include name="build.properties"/>
        </fileset>
      </copy>
    
      <ant dir="${currentdir}/.servletapp" antfile="${currentdir}/.servletapp/build.xml" target="configure"/>
    <copy overwrite="true" todir="${webcontentdir}/WEB-INF/classes">
          <fileset dir="${servletappdir}/src-template">
            <include name="hibernate.properties"/>
         <include name="email.properties"/>
         <include name="log4j.properties"/>
      </fileset>
    </copy>
    
    <antcall target="fix-classpath"/>
    <antcall target="generate-ant-build-files"/>
    <antcall target="run-eclipse-refresh-build"/>
    
  </target>
  
  
  <target name="run-eclipse-refresh-build">  
    <!-- invoke incremental build of java code in eclipse 
    <basename property="projectname" file="${basedir}"/>
    <eclipse.incrementalBuild project="${projectname}" kind="incremental" builder="org.eclipse.jdt.core.javabuilder"/>
    -->
    
    <!-- invoke javac -->
    <javac destdir="${webcontentdir}/WEB-INF/classes/"
      failonerror="true" 
      classpathref="libraries"
      debug="on"
      fork="true" 
      memoryinitialsize="256m"
      memorymaximumsize="1024m">          
<!-- fork= and memory sizes fix problem with javac throwing outofmemory heap space exception caused by ant 64mb default limit -->
<!--     verbose="yes">
<compilerarg value="-Xlint"/> --> 
      <src path="${servletappdir}/src-generated" />
      <src path="${servletappdir}/src-native" />
      <src path="${servletappdir}/src-template" />
    </javac>
    
    <eclipse.convertPath fileSystemPath="${basedir}" property="resourcePath"/>
    <eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
  </target>
  <path id="libraries">
    <fileset dir="${servletappdir}/bin/WEB-INF/lib/" includes="*.jar"/> 
  </path>
     
  
  <target name="eclipse-build-code-only">
    <antcall target="build-without-java-compile-code-only"/>
    
    <!-- update web.xml, in case of new pages -->
    <property name="webcontentdir" value="${currentdir}/WebContent"/>
    <property name="servletappdir" value="${currentdir}/.servletapp"/>
    <copy file="${servletappdir}/web.xml" preservelastmodified="true" todir="${webcontentdir}/WEB-INF"/>
    
    <antcall target="run-eclipse-refresh-build"/>
  </target>	
  
  
  <target name="fix-classpath">
    <script language="javascript"> <![CDATA[
        importClass(java.io.File);
        importClass(java.io.BufferedReader);
        importClass(java.io.FileReader);
        importClass(java.io.BufferedWriter);
        importClass(java.io.FileWriter);
        importClass(java.lang.StringBuffer);

        // Access to Ant-Properties by their names
        var currentdir = project.getProperty("currentdir");
      
      classpathFile = new StringBuffer();
        classpathFile.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      classpathFile.append("<classpath>\n");
      classpathFile.append("\t<classpathentry kind=\"src\" path=\".servletapp/src-template\"/>\n");
        classpathFile.append("\t<classpathentry kind=\"src\" path=\".servletapp/src-generated\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"src\" path=\".servletapp/src-native\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.web.container\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.module.container\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"output\" path=\"WebContent/WEB-INF/classes\"/>\n");
      
        var appdir = new File(currentdir+"/.servletapp/bin/WEB-INF/lib");
      var libfiles = appdir.listFiles();
      for ( i = 0 ; i < libfiles.length ; i ++ ) {
      if ( libfiles[i].isFile ( ) ){
        classpathFile.append("\t<classpathentry kind=\"lib\" path=\".servletapp/bin/WEB-INF/lib/"+libfiles[i].getName()+"\"/>\n");
        }
        }
      
      classpathFile.append("</classpath>\n");
    
      try {
            //write result
            fw = new FileWriter(currentdir+"/.classpath");
            bw = new BufferedWriter(fw);
            bw.write(classpathFile.toString());
            bw.close();
            fw.close();
          } catch (e) {
            echo = project.createTask("echo");
            echo.setMessage(e);
            echo.perform();
          }	
      ]]></script>
      <echo>generated .classpath</echo>
  </target>
  
  <target name="generate-ant-build-files">
    <script language="javascript"> <![CDATA[
              importClass(java.io.File);
              importClass(java.io.BufferedReader);
              importClass(java.io.FileReader);
              importClass(java.io.BufferedWriter);
              importClass(java.io.FileWriter);
              importClass(java.lang.StringBuffer);
              importClass(org.eclipse.core.resources.ResourcesPlugin);

              // Access to Ant-Properties by their names
              var currentdir = project.getProperty("basedir");
            var projectname = (new File(currentdir)).getName(); //basename

            buildfile = new StringBuffer();
            buildfile.append("<project name=\"clean-project\" default=\"clean-project\">\n");
            buildfile.append("\t<target name=\"clean-project\">\n");
            buildfile.append("\t\t<delete dir=\"${basedir}/.webdsl-parsecache\" />\n");
            buildfile.append("\t\t<delete dir=\"${basedir}/.servletapp\" />\n");
            buildfile.append("\t\t<delete dir=\"${basedir}/.webdsl-fragment-cache\" />\n");
            buildfile.append("\t\t<delete includeemptydirs=\"true\">\n");
            buildfile.append("\t\t\t<fileset dir=\"${basedir}/WebContent\" includes=\"**/*\"/>\n");
            buildfile.append("\t\t</delete>\n");
            buildfile.append("\t\t<eclipse.convertPath fileSystemPath=\"${basedir}\" property=\"resourcePath\" />\n");
            buildfile.append("\t\t<eclipse.refreshLocal resource=\"${resourcePath}\" depth=\"infinite\" />\n");
            buildfile.append("\t</target>\n");
            buildfile.append("</project>\n");

            try {
                  //write result
                  fw = new FileWriter(currentdir+"/clean-project.xml");
                  bw = new BufferedWriter(fw);
                  bw.write(buildfile.toString());
                  bw.close();
                  fw.close();
                } catch (e) {
                  echo = project.createTask("echo");
                  echo.setMessage(e);
                  echo.perform();
                }
               ]]>
    </script>
    <echo>generated clean-project.xml</echo>
      <antcall target="generate-ant-build-file-launcher">
      <param name="buildfilename" value="clean-project"/>
    </antcall>

    <antcall target="generate-ant-build-file-for-invoking-webdsl">
      <param name="taskname" value="eclipse-build"/>
      <param name="buildfilename" value="full-build"/>
    </antcall>

    <antcall target="generate-ant-build-file-for-invoking-webdsl">
      <param name="taskname" value="eclipse-build-code-only"/>
      <param name="buildfilename" value="build-code-only"/>
    </antcall>

    <eclipse.convertPath fileSystemPath="${basedir}" property="resourcePath" />
    <eclipse.refreshLocal resource="${resourcePath}" depth="infinite" />
  </target>

  <target name="generate-ant-build-file-for-invoking-webdsl">
    <fail unless="taskname" />
    <fail unless="buildfilename" />
    <script language="javascript"> <![CDATA[
              importClass(java.io.File);
              importClass(java.io.BufferedReader);
              importClass(java.io.FileReader);
              importClass(java.io.BufferedWriter);
              importClass(java.io.FileWriter);
              importClass(java.lang.StringBuffer);
              importClass(org.eclipse.core.resources.ResourcesPlugin);

              // Access to Ant-Properties by their names
              var buildfilename = project.getProperty("buildfilename");
              var taskname = project.getProperty("taskname");
              var currentdir = project.getProperty("basedir");
            var projectname = (new File(currentdir)).getName(); //basename

            buildfile = new StringBuffer();
            buildfile.append("<project name=\""+buildfilename+"\" default=\""+buildfilename+"\">\n");
            buildfile.append("\t<fail unless=\"plugindir\" message=\"WebDSL plugin is not correctly installed. The 'plugindir' property is not available.\" />\n");
            buildfile.append("\t<property name=\"templatedir\" value=\"${plugindir}/webdsl-template\"/>\n");
            buildfile.append("\t<property name=\"currentdir\" value=\"${basedir}\"/>\n");
            buildfile.append("\t<property name=\"webdsl-java-cp\" value=\"${plugindir}/include/webdsl.jar\"/>\n");
            buildfile.append("\t<property name=\"webdslexec\" value=\"java\"/>\n");
            buildfile.append("\t<import file=\"${plugindir}/webdsl-template/webdsl-build.xml\"/>\n");
            buildfile.append("\t<target name=\""+buildfilename+"\">\n");
            buildfile.append("\t\t<antcall target=\""+taskname+"\"/>\n");
            buildfile.append("\t</target>\n");
            buildfile.append("</project>\n");

            try {
                  //write result
                genfilename = buildfilename+".xml";
                  fw = new FileWriter(currentdir+"/"+genfilename);
                  bw = new BufferedWriter(fw);
                  bw.write(buildfile.toString());
                  bw.close();
                  fw.close();
                  echo = project.createTask("echo");
                  echo.setMessage(genfilename);
                  echo.perform();
                } catch (e) {
                  echo = project.createTask("echo");
                  echo.setMessage(e);
                  echo.perform();
                }
               ]]>
    </script>
    <antcall target="generate-ant-build-file-launcher" />
  </target>
  
  <target name="generate-ant-build-file-launcher">
    <fail unless="buildfilename" />
    <script language="javascript"> <![CDATA[
              importClass(java.io.File);
              importClass(java.io.BufferedReader);
              importClass(java.io.FileReader);
              importClass(java.io.BufferedWriter);
              importClass(java.io.FileWriter);
              importClass(java.lang.StringBuffer);
              importClass(org.eclipse.core.resources.ResourcesPlugin);

              // Access to Ant-Properties by their names
              var buildfilename = project.getProperty("buildfilename");
              var currentdir = project.getProperty("basedir");
            var projectname = (new File(currentdir)).getName(); //basename

            buildfile = new StringBuffer();
            buildfile.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n");
            buildfile.append("<launchConfiguration type=\"org.eclipse.ant.AntLaunchConfigurationType\">\n");
            buildfile.append("<booleanAttribute key=\"org.eclipse.ant.ui.DEFAULT_VM_INSTALL\" value=\"false\"/>\n");
            buildfile.append("<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">\n");
            buildfile.append("<listEntry value=\"/"+projectname+"/clean-project.xml\"/>\n");
            buildfile.append("</listAttribute>\n");
            buildfile.append("<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">\n");
            buildfile.append("<listEntry value=\"1\"/>\n");
            buildfile.append("</listAttribute>\n");
            buildfile.append("<stringAttribute key=\"org.eclipse.jdt.launching.CLASSPATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>\n");
            buildfile.append("<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\""+projectname+"\"/>\n");
            buildfile.append("<stringAttribute key=\"org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>\n");
            buildfile.append("<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${workspace_loc:/"+projectname+"/"+buildfilename+".xml}\"/>\n");
            buildfile.append("<stringAttribute key=\"process_factory_id\" value=\"org.eclipse.ant.ui.remoteAntProcessFactory\"/>\n");
            buildfile.append("</launchConfiguration>\n");

            try {
                  //write result
                genfilename = projectname+" "+buildfilename+".xml.launch";
                  fw = new FileWriter(currentdir+"/"+genfilename);
                  bw = new BufferedWriter(fw);
                  bw.write(buildfile.toString());
                  bw.close();
                  fw.close();
                  echo = project.createTask("echo");
                  echo.setMessage("generated "+genfilename);
                  echo.perform();
                } catch (e) {
                  echo = project.createTask("echo");
                  echo.setMessage(e);
                  echo.perform();
                }
            ]]>
    </script>
  </target>

</project>
