module org/webdsl/dsl/generation/xhtml-editEntity
      

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL

rules    

  entity-to-xhtml-editEntity : 
    EntityNoSuper(x_Class, props) ->
    <entity-to-xhtml-editEntity> Entity(x_Class, "Object", props) 
    // @todo use some kind of forwarding mechanism for these type of definitions
  
  entity-to-xhtml-editEntity : 
    Entity(x_Class, x_super, props) -> XmlFile(["view"], <concat-strings>["edit", x_Class, ".xhtml"], <xml-composition-wrap>
    %><ui:define name="sidebar">
      </ui:define>
      <ui:define name="body">
        <h1>
           <h:outputText rendered="#{<%=x_classEditor%>.new}" value="Create <%=x_Class%>" />
           <h:outputText rendered="#{!<%=x_classEditor%>.new}"  value="Edit <%=x_Class%> #{<%= x_classEditor%>.<%=x_class%>.name}" />
        </h1>
        <h:messages globalOnly="true" styleClass="message"/>
        <h:form id="edit<%= x_Class %>">
          <div class="dialog">
            <s:validateAll><%= tbl %></s:validateAll>
          </div>
          <div class="actionButtons">
            <h:commandButton value="Create" 
                             action="#{<%=x_classEditor%>.create}"
                             rendered="#{<%=x_classEditor%>.new}"/>
            <s:link value="View" view="/view<%= x_Class %>.xhtml" rendered="#{!<%=x_classEditor%>.new}">
                 <f:param name="<%=x_class%>Id" value="#{<%=x_classEditor%>.<%=x_class%>.id}"/>
            </s:link>             
            <h:commandButton value="Save" 
                             action="#{<%=x_classEditor%>.save}"
                             rendered="#{!<%=x_classEditor%>.new}"/>
            <h:commandButton value="Delete" 
                             action="#{<%=x_classEditor%>.delete}"
                             rendered="#{!<%=x_classEditor%>.new}"/>
          </div>
        </h:form>
      </ui:define><% )
    where x_class       := <decapitalize-string> x_Class
        ; x_classEditor := <concat-strings>[x_class, "Editor"]
        ; tbl           := <edit-form-top(|x_classEditor, x_class)> props
                          
rules

  edit-form-top(|x_classEditor, x_class) = 
    where(
      x_component := <concat-strings>[x_classEditor, ".", x_class]
      ; x_id      := <concat-strings>[x_classEditor, "_", x_class]
    )
    ; edit-form(|x_component, x_id)
    
  edit-form(|x_component) = 
    edit-form(|x_component, x_component)
  
  edit-form(|x_component, x_id) :
    props -> 
    %><h:panelGrid columns="2" border="0" cellpadding="5" cellspacing="3"><%= rows ::*%></h:panelGrid><%
    where rows := <edit-form-rows(|x_component, x_id)> props

  // create edit form for an entity; may also be a nested entity
  
  edit-form-rows(|x_component, x_id) =
    filter-concat-warn(row-in-edit-form(|x_component, x_id) | "cannot edit form row for property: ")

  // create a 'row in the edit form
  
  row-in-edit-form(|x_component, x_id)  :
    prop@Property(x_prop, k, s@SimpleSort(y), _) ->
    %><h:outputText value="<%=x_prop%>"/>
      <s:decorate><%= input %></s:decorate><%
    where input := <property-to-edit-component(|x_component, x_id)> prop
    
 rules
	    
  property-to-edit-component(|x_component, x_id) :
    Property(x_prop, Simple(), s@SimpleSort(s0), _) -> 
    %><h:inputText id="<%=x_id%>_<%=x_prop%>" 
                   required="true" 
                   value="#{<%=x_component%>.<%=x_prop%>}"/><%
    where <"String" + "URL" + "Image" + "Email"> s0
   
  property-to-edit-component(|x_component, x_id) :
    Property(x_prop, Simple(), s@SimpleSort("Text"), _) -> 
    %><h:inputTextarea id="<%=x_id%>_<%=x_prop%>" 
                       required="true" 
                       value="#{<%=x_component%>.<%=x_prop%>}"/><%
       
  property-to-edit-component(|x_component, x_id) :
    Property(x_prop, Simple(), s@SimpleSort("Secret"), _) -> 
    %><h:inputSecret id="<%=x_id%>_<%=x_prop%>" 
                     required="true" 
                     value="#{<%=x_component%>.<%=x_prop%>}"/><%
                     
  property-to-edit-component(|x_component, x_id) :
    Property(x_prop, Simple(), s@SimpleSort("Date"), _) -> 
    %><div><h:inputText id="<%=x_id%>_<%=x_prop%>" required="true" 
                   value="#{<%=x_component%>.<%=x_prop%>}">
               <s:convertDateTime pattern="dd/mm/yyyy"/>
           </h:inputText>
           <s:selectDate for="<%=x_id%>_<%=x_prop%>"/>
      </div><%
      
  // composite association with defined type

  row-in-edit-form(|x_component, x_id)  :
    Property(x_prop, Comp(), s0@SimpleSort(s), _) -> 
    %><h:outputText value="<%=x_prop%>"/><h:panelGroup/><%= rows ::*%><%
    where <defined-java-type> s0
        ; debug(!"found a defined type: ")
        ; props := <properties> s
        ; debug(!"properties: ")
        ; x_sub_component := <concat-strings> [x_component, ".", x_prop]
        ; x_sub_id := <concat-strings> [x_id, "_", x_prop]
        ; rows := <edit-form-rows(|x_sub_component, x_sub_id)> props
       
 // done
     
  // todo specialize input component to the type of the property
  // for instance, for type Text a scrollable textarea should be generated
   
  // todo don't put properties for subfields in a subtable
