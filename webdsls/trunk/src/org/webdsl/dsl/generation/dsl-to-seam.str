/*

  @todo input-wrap or xtc-input-wrap

  @todo use sglr library

  @todo derive filename from compilation unit
  
*/ 

module org/webdsl/dsl/generation/dsl-to-seam
 
imports
  libstratego-lib
  libjava-front // implies Java-15 ?
  libstratego-sglr
  libstratego-tool-doc
  libstratego-xtc
  
imports 
  org/webdsl/dsl/generation/generator
  org/webdsl/dsl/syntax/-
  
// inspiration:
// https://svn.cs.uu.nl:12443/repos/StrategoXT/java-front/trunk/tools/parse-java.str
// https://svn.cs.uu.nl:12443/repos/StrategoXT/dryad/trunk/compiler/main/dryad-front.str
// https://svn.cs.uu.nl:12443/repos/StrategoXT/dryad/trunk/tools/class2aterm.str

// ? xtc-multi-io-wrap

strategies 

  dsl-to-seam-main =
    where(set-default-config)
    ; xtc-io-wrap(
        dsl-to-seam-options
      , dsl-to-seam-usage
      , dsl-to-seam-about 
      , ![] // xtc dependencies
      , xtc-dsl-to-seam 
    )
   
  xtc-dsl-to-seam = id
    ; xtc-parse-webdsl
    ; dsl-to-seam
    ; output-generated-files
    
  output-generated-files =
    if-pretty-printing(
      topdown(try(java-file-to-file <+ xml-file-to-file)),
      output(id)
    )
    ; <exit> 0
 
  output-webdsl =
    if-pretty-printing(
      output-webdsl-to-file,
      output(id)
    )
    ; <exit> 0
    
strategies // command-line options

  set-default-config =
    rules(
      OptionDesugar        := True()
      OptionTypecheck      := True()
      OptionExpansion      := True()
      OptionGeneration     := True()
      OptionPrettyPrinting := True()
      Stage                := 0
    )
   
  dsl-to-seam-options =
    desugar-option
    <+ typecheck-option
    <+ expansion-option
    <+ disable-desugar-option
    <+ disable-typecheck-option
    <+ disable-template-expansion-option
    <+ disable-generation-option
    <+ disable-pretty-print-option
    
  // @todo check that verbosity and logging is supported by stratego-lib
  
  // @todo code for option definition is too boilerplate
  
strategies // desugaring

  desugar-option =
    Option("--desugar"
    , disable-typechecking
    , !HelpString("--desugar", "Only desugar")
    )
    
  disable-desugar-option =
    Option("--no-desugaring"
    , disable-desugaring
    , !HelpString("--no-desugaring", "Stop before desugaring")
    )
    
  disable-desugaring = 
    rules( OptionDesugar := False() )
    
  if-desugaring(s1, s2) =
    if OptionDesugar => True() then s1 else s2 end

  stop-before-desugaring =
    if-desugaring(id, output-webdsl)

strategies // typechecking

  typecheck-option =
    Option("--typecheck" 
    , disable-template-expansion
    , !HelpString("--typecheck", "Desugar and typecheck")
    )
       
  disable-typecheck-option =
    Option("--no-typechecking"
    , disable-typechecking
    , !HelpString("--no-typechecking", "Stop before typechecking")
    )
    
  disable-typechecking =
    rules( OptionTypecheck := False() )
    
  if-typechecking(s1, s2) = 
    if OptionTypecheck => True() then s1 else s2 end
    
  stop-before-typechecking =
    if-typechecking(id, output-webdsl)
    
strategies // template expansion

  expansion-option =
    Option("--expand"
    , disable-generation
    , !HelpString("--expand", "Template expansion")
    )
    
  disable-template-expansion-option =
    Option("--no-expansion" 
    , disable-template-expansion
    , !HelpString("--no-expansion", "Stop before template-expansion")
    )
    
  disable-template-expansion =
    rules( OptionExpansion := False() )
    
  if-template-expansion(s1, s2) = 
    if OptionExpansion => True() then s1 else s2 end
    
  stop-before-template-expansion =
    if-template-expansion(id, output-webdsl)
     
strategies

  disable-generation-option =
    Option("--no-generation"
    , disable-generation
    , !HelpString("--no-generation", "Stop before code generation")
    )
 
  disable-generation =
    rules( OptionGeneration := False() )
    
  if-generating(s1, s2) =
    if OptionGeneration => True() then s1 else s2 end
    
  stop-before-generation =
    if-generating(id, output-webdsl)
  
  disable-pretty-print-option =
    Option("--no-pretty-printing" + "--no-pp"
    , disable-pretty-printing
    , !HelpString("--no-pretty-printing | --no-pp", "Do not pretty-print")
    )
    
  disable-pretty-printing =
    rules( OptionPrettyPrinting := False() )
    
  if-pretty-printing(s1, s2) =
    if OptionPrettyPrinting => True() then s1 else s2 end
    
  stage-option =
    Option("--stop-after"
    , ?stage; rules( OptionStage := <int-to-string> stage )
    , !HelpString("--stop-after=n", "Stop after stage n")
    )
       
  stop-after =
    if <geq>(<Stage>, <OptionStage>) then
      output-webdsl
    else 
      rules( Stage := <Stage; inc> )
    end
 
   // @todo pass name to stop-after 
   
strategies // tool documentation

  dsl-to-seam-usage =
    <tool-doc> 
      [ Usage("dsl-to-seam [-i foo.app] [OPTIONS]")
      , Summary("Generates a web application from a WebDSL definition")
      , OptionUsage()
      , AutoReportBugs()
      ]

  dsl-to-seam-about =
    <tool-doc> 
      [ AutoProgram()
      , Program("dsl-to-seam")
      , Author(Person("Eelco Visser", "visser@acm.org"))
      , GNU_LGPL("2007", "Eelco Visser <visser@acm.org>")
      , WebHome("http://www.webdsl.org")
      //, Config([
      //    DefaultXTCRepository()
      //  , CurrentXTCRepository()
      //  ]) 
      ]

