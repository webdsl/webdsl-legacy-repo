/**

  Generate a JPA/Hibernate entity class from an entity declaration

*/

module org/webdsl/dsl/generation/java-Entity

imports 
  libstrategolib  
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/utils/utils
  org/webdsl/dsl/transformation/types

strategies
  
  entity-to-java-Entity : 
    EntityNoSuper(x_Class, props, functions) -> JavaFile(["src"],
    compilation-unit|[
      package pkgname;

      import java.util.*;
      import javax.persistence.*;
      import pkgname.*;

      @Entity
      public class x_Class {
        public x_Class () {}

        @Id @GeneratedValue
        private Long id;
        
        public Long getId() { return id; }

        private void setId(Long id) { this.id = id; }

        ~*cbds
        ~*fcbs
      }
    ]|)
    where cbds := <properties-to-code(|x_Class)> props
        ; fcbs := <functions-to-code(|x_Class)> functions
        ; pkgname := <DomainPackage>

  entity-to-java-Entity : 
    SessionEntity(x_ident, EntityNoSuper(x_Class, props, functions)) -> JavaFile(["src"],
    compilation-unit|[
      package pkgname;

      import java.util.*;
      import javax.persistence.*;
      import pkgname.*;

      @Entity
      @org.jboss.seam.annotations.Scope(org.jboss.seam.ScopeType.SESSION)
      @org.jboss.seam.annotations.Name("~x_ident")
      public class x_Class {
        public x_Class () {}

        @Id @GeneratedValue
        private Long id;
        
        public Long getId() { return id; }

        private void setId(Long id) { this.id = id; }

        ~*cbds
        ~*fcbs
      }
    ]|)
    where cbds := <properties-to-code(|x_Class)> props
        ; fcbs := <functions-to-code(|x_Class)> functions
        ; pkgname := <DomainPackage>
    
  entity-to-java-Entity : 
    Entity(x_Class, x_super, props, functions) -> JavaFile(["src"],
    compilation-unit|[
      package pkgname;

      import java.util.*;
      import javax.persistence.*;
      import pkgname.*;

      @Entity
      public class x_Class extends x_super {
        public x_Class () {}
        ~*cbds
        ~*fcbs
      }
    ]|)
    where cbds := <properties-to-code(|x_Class)> props
        ; fcbs := <functions-to-code(|x_Class)> functions
        ; pkgname := <DomainPackage>
  	    // @note: don't define id on an entity with a super class; it
	    // is inherited from the super class
	  
  entity-to-class-fails =
    (?EntityNoSuper(_, _, _) <+ ?Entity(_,_,_,_))
    ; err(|"cannot generate code for entity")
    
strategies

  properties-to-code(|x_Class) :
    props -> cbds
    where cbds1 := <filter-concat-warn(property-to-property-code(|x_Class) 
                                       | "cannot generate code for property: ")> props
        ; cbds2 := <inherited-properties; name-property(|x_Class) <+ ![]> x_Class
        ; cbds  := <concat>[cbds1, cbds2]
    

  functions-to-code(|x_Class) :
    functions -> fcbs1
    where fcbs1 := <filter-concat-warn(function-to-function-code(|x_Class) 
                                       | "cannot generate code for function: ")> functions
        //; fcbs2 := <inherited-functions <+ ![]> x_Class
        //; fcbs  := <concat>[fcbs1, fcbs2]


strategies

  name-property(|x_Class) :
    props -> class-body-dec* |[
      public String getName() {
        return x_get().toString();
      }
    ]|
    where <not(fetch(?Property("name", _, _, _)))> props
        ; x_prop := <get-namefield> props 
        ; x_get := <concat-strings>["get", <capitalize-string> x_prop]

rules

  /**
   * Property is a private field with a getter and a setter.
   */

  property-to-property-code(|x_Class) :
    prop@Property(x, k, s, annos) -> class-body-dec* |[

      mod1* mod2* private t x_prop = e;

      public t x_get() {
        return x_prop;
      }

      public void x_set(t x_prop) {
        this.x_prop = x_prop;
      }
     
      ~*cbd*
      
    ]|
    where t      := <java-type> s
        ; e      := <initialization-expression> (k, s)
        ; mod1*  := <persistence-annotations> s
        ; mod2*  := <property-to-persistence-annotations(|x_Class)> prop
        ; x_prop := <concat-strings>["_", x]
        ; x_get  := <property-getter> x
        ; x_set  := <property-setter> x 
        ; cbd*   := <property-to-special-getters(|x_Class) <+ ![]> prop
       
  property-to-property-code(|x_Class) :
    prop@DerivedProperty(x, k, s, annos, e) -> class-body-dec* |[

      public t x_get() {
          return ~e:gettercode;
      }

    ]|
    where t      := <java-type> s
        ; x_get  := <property-getter> x
        ; gettercode := <expression-to-java> e    

rules // property initialization

  initialization-expression :
    (Ref(), SimpleSort(y)) -> |[ null ]|
    
  initialization-expression :
    (k, s) -> <java-type-default-value> s
    where not(?(Ref(),SimpleSort(_)))

rules // annotations for properties

  property-to-persistence-annotations(|x_Class) : 
    Property(x_prop, k, s, annos) -> 
    <concat>[
      <association-annotations(|x_Class, x_prop, annos)> s,
      <cascade-annotations> k,
      <inverse-annotations(|x_Class, annos)>
    ]

  inverse-annotations(|class, annos) =
    [InverseAnno(ent, fld) | xs ] := <collect(?InverseAnno(_, _))> annos
    ; x_colname := <concat-strings> ["\"",class,"_",ent,"\""]
    ; x_thisid := <concat-strings> ["\"",class,"_id\""]
    ; x_otherid := <concat-strings> ["\"",ent,"_id\""]
    ; ![anno|[
      @JoinTable(name=x_colname,
        joinColumns={@JoinColumn(name=x_thisid)},
        inverseJoinColumns={@JoinColumn(name=x_otherid)}
      ) ]|]

   inverse-annotations(|class, annos) =
    [] := <collect(?InverseAnno(_, _))> annos
    ; ![]
  
rules // function generation

  function-to-function-code(|x_Class) :
    function@Function(x, args, s, Block(stm*)) -> class-body-dec* |[

      public t x(param*) {
         bstm*
      }
     
    ]|
    where {| InFunction :
             rules( InFunction := <id>)
             ; t      := <java-type> s
             ; param* := <map(action-arg-to-method-arg)> args
             ; bstm* := <statements-to-java> stm*
          |}


rules // association annotations

  // Property with a value type

  association-annotations(|x_Class, x_prop, annos) :
    s@SimpleSort(y) -> []
    where <builtin-java-type> s
    
  // Property with a reference association type
  
  association-annotations(|x_Class, x_prop, annos) :
    s@SimpleSort(y) -> [anno|[ @ManyToOne ]|]
    where t := <defined-java-type> s
    
  // Collection types
    
  association-annotations(|x_Class, x_prop, annos) :
    GenericSort("List", [s]) -> [anno|[ @ManyToMany ]|]
    where t := <defined-java-type> s
    
  association-annotations(|x_Class, x_prop, annos) :
    GenericSort("Set", [s]) -> [anno|[ @ManyToMany ]|]
    where t := <defined-java-type> s 
        ; [] := <collect(?InverseSlaveAnno(_, _))> annos

  association-annotations(|x_Class, x_prop, annos) :
    GenericSort("Set", [s]) -> [anno|[ @ManyToMany(
      mappedBy=x_mappedby,
      targetEntity=x_ent
    ) ]|]
    where t := <defined-java-type> s 
        ; [InverseSlaveAnno(ent, fld)|xs] := <collect(?InverseSlaveAnno(_, _))> annos
        ; x_ent := <concat-strings> [ent, ".class"]
        ; x_mappedby := <concat-strings> ["\"_", fld, "\""] 

  association-annotations(|x_Class, x_prop, annos) :
    GenericSort("Map", [s1, s2]) -> [anno|[ @ManyToMany ]|]
    where t1 := <builtin-java-type> s1
        ; t2 := <defined-java-type> s2
    
  // Set of values.
  
  association-annotations(|x_Class, x_prop, annos) :
    GenericSort("Set", [s@SimpleSort(_)])-> 
    [
      anno|[ 
        @org.hibernate.annotations.CollectionOfElements(targetElement = t.class) 
      ]|,
      
      anno|[ @JoinTable(name = "~tableName") ]|, //, joinColumns = @JoinColumn(name = "~joincolumn")
        
      anno|[ @Column(name = "~x_prop", nullable = false) ]|
    ]
    where t         := <builtin-java-type> s  
        ; x_Prop    := <capitalize-string> x_prop
	    ; tableName := <concat-strings>[x_Class, "_", x_Prop]
	    
  // Property with a composite association type,
  // i.e., to a defined entity that is owned by x_Class.
  // @note might be translated as @Embeddable
	        
  association-annotations(|x_Class, x_prop, annos) :
    s@SimpleSort(y) ->
    [
      anno|[ @ManyToOne ]|,
      anno|[ @JoinColumn(name = "~columnname") ]|
    ]
    where t          := <defined-java-type> s
        ; x_Prop     := <capitalize-string> x_prop
        ; columnname := <concat-strings>[x_Class, x_Prop]
            
rules // cascading annotations

  cascade-annotations :
    Ref() -> [anno|[
      @org.hibernate.annotations.Cascade({
	    org.hibernate.annotations.CascadeType.PERSIST,
        org.hibernate.annotations.CascadeType.SAVE_UPDATE,
        org.hibernate.annotations.CascadeType.MERGE
      })
    ]|]
    
  cascade-annotations :
    Comp() -> [anno|[
      @org.hibernate.annotations.Cascade({
	    org.hibernate.annotations.CascadeType.ALL
      })
    ]|]
    
  cascade-annotations :
    Simple() -> []
   
rules // special methods 
 
   property-to-special-getters(|x_Class) : 
    Property(x_prop, k, s@GenericSort(coll, [SimpleSort(y)]), annos) -> 
    class-body-dec* |[
      public t x_getList() {
        return new ArrayList(x_get());
      }
    ]|
    where <?"Set" <+ ?"List"> coll
        ; t         := <java-type> GenericSort("List", [SimpleSort(y)])
        ; x_Prop    := <capitalize-string> x_prop
        ; x_getList := <concat-strings>["get", x_Prop, "List"]
        ; x_get     := <concat-strings>["get", x_Prop]