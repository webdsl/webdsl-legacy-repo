 /**

   Generate a JPA/Hibernate entity class from an entity declaration

 */

 module org/webdsl/dsl/generation/java-Entity

 imports 
   libstrategolib  
   Java-15 
   libjava-front 

 imports 
   org/webdsl/dsl/syntax/WebDSL
   org/webdsl/dsl/utils/utils
   org/webdsl/dsl/transformation/types

 strategies

   entity-to-java-Entity : 
     EntityNoSuper(x_Class, props, functions) -> JavaFile(["src"],
     compilation-unit|[
       package pkgname;

       import java.util.*;
       import org.jboss.seam.persistence.*;
       import javax.persistence.*;
       import pkgname.*;
       import java.io.Serializable;


       @Entity 
       //@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)
       @javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.SINGLE_TABLE)
       @javax.persistence.DiscriminatorColumn(name = "DISCRIMINATOR", discriminatorType = javax.persistence.DiscriminatorType.STRING, length = 255)
       public class x_Class implements Serializable {
	       public x_Class () {}

         ~*idcodes

	       public boolean equals(Object o) {
	         return o != null && o instanceof x_Class && ((x_Class)o).getId().equals(getId());
	       }

	       ~*cbds
	       ~*fcbs
       }
     ]|)
     where {| ClassName
	    : rules( ClassName := x_Class )
	    ; idcodes := <generate-id-code> x_Class
	    ; cbds := <properties-to-code(|x_Class)> props
	    ; fcbs := <functions-to-code(|x_Class)> functions
	    ; pkgname := <DomainPackage>
	    |}

   entity-to-java-Entity : 
     SessionEntity(x_ident, props, functions) -> JavaFile(["src"],
     compilation-unit|[
       package pkgname;

       import java.util.*;
       import org.jboss.seam.persistence.*;
       import javax.persistence.*;
       import pkgname.*;
       import java.io.Serializable;

       @Entity
       @org.jboss.seam.annotations.Scope(org.jboss.seam.ScopeType.SESSION)
       @org.jboss.seam.annotations.Name("~x_ident")
       public class x_Class implements Serializable {
	       public x_Class () {}

      	 @Id @GeneratedValue
      	 private Long id;

      	 public Long getId() { return id; }

      	 public void setId(Long id) { this.id = id; }

      	 public boolean equals(Object o) {
      	   return o != null && o instanceof x_Class && ((x_Class)o).getId().equals(getId());
      	 }

      	 ~*cbds
      	 ~*fcbs
       }
     ]|)
     where x_Class := <capitalize-string> x_ident
	   ; {| ClassName
	      : rules( ClassName := x_Class )
	      ; cbds := <properties-to-code(|x_Class)> props
	      ; fcbs := <functions-to-code(|x_Class)> functions
	      ; pkgname := <DomainPackage>
	      |}

   entity-to-java-Entity : 
     Entity(x_Class, x_super, props, functions) -> JavaFile(["src"],
     compilation-unit|[
       package pkgname;

       import java.util.*;
       import org.jboss.seam.persistence.*;
       import javax.persistence.*;
       import pkgname.*;
       import java.io.Serializable;

       @Entity
       public class x_Class extends x_super implements Serializable {
	       public x_Class () {}

      	 public boolean equals(Object o) {
      	   return o != null && o instanceof x_Class && ((x_Class)o).getId().equals(getId());
      	 }

      	 ~*cbds
      	 ~*fcbs
       }
     ]|)
     where {| ClassName
	    : rules( ClassName := x_Class )
	    ; cbds := <properties-to-code(|x_Class)> props
	    ; fcbs := <functions-to-code(|x_Class)> functions
	    ; pkgname := <DomainPackage>
	    |}
	     // @note: don't define id on an entity with a super class; it
	     // is inherited from the super class

   entity-to-class-fails =
     (?EntityNoSuper(_, _, _) <+ ?Entity(_,_,_,_))
     ; err(|"cannot generate code for entity")

 strategies
   generate-id-code =
     ?x_Class
     ; if <EntityIdName> x_Class then
         x_idget := <concat-strings> ["get", <capitalize-string> <EntityIdName> x_Class]
         ; x_idset := <concat-strings> ["set", <capitalize-string> <EntityIdName> x_Class]         
         ; t := <java-type> <EntityIdType> x_Class
         ; !class-body-dec* |[
            public t getId() { return x_idget(); }
            public void setId(t val) { x_idset(val); }
          ]|
       else
         !class-body-dec* |[
           @Id @GeneratedValue
           private Long id;

           public Long getId() { return id; }

           public void setId(Long id) { this.id = id; }
         ]|
       end
   
   properties-to-code(|x_Class) :
     props -> cbds
     where cbds1 := <filter-concat-warn(property-to-property-code(|x_Class) 
					| "cannot generate code for property: ")> props
	 ; cbds2 := <inherited-properties; name-property(|x_Class) <+ ![]> x_Class
	 ; cbds  := <concat>[cbds1, cbds2]


   functions-to-code(|x_Class) :
     functions -> fcbs1
     where fcbs1 := <filter-concat-warn(function-to-function-code(|x_Class) 
					| "cannot generate code for function: ")> functions
	 //; fcbs2 := <inherited-functions <+ ![]> x_Class
	 //; fcbs  := <concat>[fcbs1, fcbs2]


 strategies

   name-property(|x_Class) :
     props -> class-body-dec* |[
       public String getName() {
	 return x_get().toString();
       }
     ]|
     where <not(fetch(?Property("name", _, _, _)))> props
	 ; x_prop := <get-namefield> props 
	 ; x_get := <concat-strings>["get", <capitalize-string> x_prop]

 rules

   /**
    * Property is a private field with a getter and a setter.
    */

   property-to-property-code(|x_Class) :
     prop@Property(x, k, s, annos) -> class-body-dec* |[

       mod0* mod1* mod2* private t x_prop = e;

        mod3*
       public t x_get() {
	 return x_prop;
       }

       public void x_set(t x_prop) {
	 this.x_prop = x_prop;
	 ~*bas*
       }

       ~*cbd*

     ]|
     where t      := <java-type> s
      	 ; e      := <initialization-expression> (k, s)
      	 ; if x := <EntityIdName> x_Class then
      	     mod0* := [anno|[ @Id ]|]
      	   else
      	     mod0* := []
      	   end
      	 ; mod1*  := <persistence-annotations> s
      	 ; mod2*  := <property-to-persistence-annotations(|x_Class)> prop
      	 ; mod3*  := <validation-annotations-to-property-code> annos
      	 ; x_prop := <concat-strings>["_", x]
      	 ; x_get  := <property-getter> x
      	 ; x_set  := <property-setter> x 
      	 ; cbd*   := <property-to-special-getters(|x_Class) <+ ![]> prop
      	 ; bas*	 := <bidirectional-association-setter <+ ![]> prop

   property-to-property-code(|x_Class) :
     prop@DerivedProperty(x, k, s, annos, e) -> class-body-dec* |[

       public t x_get() {
	   return ~e:gettercode;
       }

       ~*cbd*
     ]|
     where t      := <java-type> s
	 ; x_get  := <property-getter> x
	 ; gettercode := <expression-to-java> e    
	 ; cbd*   := <property-to-special-getters(|x_Class) <+ ![]> prop

 rules // property initialization

   initialization-expression :
     (Ref(), SimpleSort(y)) -> |[ null ]|

   initialization-expression :
     (k, s) -> <java-type-default-value> s
     where not(?(Ref(),SimpleSort(_)))

 rules // annotations for properties

   property-to-persistence-annotations(|x_Class) : 
     Property(x_prop, k, s, annos) -> 
     <concat>[
       <association-annotations(|x_Class, x_prop, annos)> s,
       <cascade-annotations> k,
       <binary-type-annotations> s
     ]

 rules // function generation

   function-to-function-code(|x_Class) :
     function@Function(x, args, s, Block(stm*)) -> class-body-dec* |[

       public t x(param*) {
	  bstm*
       }

     ]|
     where {| InFunction
            : rules( InFunction := <id> )
            ; t      := <java-type> s
	    ; param* := <map(action-arg-to-method-arg)> args
	    ; bstm* := <statements-to-java> stm*
	    |}


 rules // association annotations

   // Property with a value type

   association-annotations(|x_Class, x_prop, annos) :
     s@SimpleSort(y) -> []
     where <builtin-java-type> s

   // Property with a reference association type

   // Many-to-One associations

   association-annotations(|x_Class, x_prop, annos) :
     s@SimpleSort(y) -> [anno|[ @ManyToOne(fetch=javax.persistence.FetchType.LAZY) ]|]
     where t := <defined-java-type> s
	; [] := <filter(?SimpleAnno(_))> annos
	; [] := <collect(?InverseAnno(_, _))> annos
	; [] := <collect(?InverseSlaveAnno(_, _))> annos

   association-annotations(|x_Class, x_prop, annos) :
     s@SimpleSort(y) -> 
	 [
		 anno|[ @ManyToOne(fetch=javax.persistence.FetchType.LAZY) ]|,
		 anno|[ @JoinColumn(name="~columnname") ]|
		 ]
     where t := <defined-java-type> s
	 ; [InverseAnno(ent, fld) | xs ]       := <collect(?InverseAnno(_, _))> annos
	 ; GenericSort(coll, [SimpleSort(yy)]) := <TypeOfProperty> (ent, fld)
	 ; columnname := <concat-strings>[x_Class, x_prop]


   // Property with a reference one-to-one association type

   association-annotations(|x_Class, x_prop, annos) :
     s@SimpleSort(y) -> 
	 [
			 anno|[ @OneToOne(fetch=javax.persistence.FetchType.LAZY) ]|,
			 anno|[ @PrimaryKeyJoinColumn ]|
		 ]
     where t := <defined-java-type> s
	 ; [InverseAnno(ent, fld) | xs ] := <collect(?InverseAnno(_, _))> annos
	 ; SimpleSort(yy)                := <TypeOfProperty> (ent, fld)

   association-annotations(|x_Class, x_prop, annos) :
     s@SimpleSort(y) -> 
	 [
			 anno|[ @OneToOne(mappedBy="~mappedby",fetch=javax.persistence.FetchType.LAZY) ]|
		 ]
     where t := <defined-java-type> s
	 ; [InverseSlaveAnno(ent, fld)|xs] := <collect(?InverseSlaveAnno(_, _))> annos
	 ; SimpleSort(yy) := <TypeOfProperty> (ent, fld)
	 ; mappedby       := <concat-strings> ["_", fld]

 /*  association-annotations(|x_Class, x_prop, annos) :
     s@SimpleSort(y) -> 
	 [
			 anno|[ @OneToOne(cascade = CascadeType.ALL) ]|,
			 anno|[ @PrimaryKeyJoinColumn ]|
		 ]
     where t := <defined-java-type> s
	 ; [SimpleAnno("unique")] := <filter(?SimpleAnno(_))> annos */


   // Collection types

   // One-to-Many association
   association-annotations(|x_Class, x_prop, annos) :
     GenericSort("Set", [s]) ->
       [
	 anno|[ @OneToMany( mappedBy="~mappedby", targetEntity=x_ent ,fetch=javax.persistence.FetchType.LAZY) ]|
       ]
     where t := <defined-java-type> s 
	 ; [InverseSlaveAnno(ent, fld)|xs] := <collect(?InverseSlaveAnno(_, _))> annos
	 ; SimpleSort(ident) := <TypeOfProperty> (ent, fld)
	 ; x_ent             := <concat-strings> [ent, ".class"]
	 ; mappedby          := <concat-strings> ["_", fld] 

   // Many-to-Many associations

   association-annotations(|x_Class, x_prop, annos) :
     GenericSort("List", [s]) -> [
       anno|[ @ManyToMany(fetch=javax.persistence.FetchType.LAZY) ]|
       ]
     where t := <defined-java-type> s

   association-annotations(|x_Class, x_prop, annos) :
     GenericSort("Set", [s@SimpleSort(ss)]) -> [
       anno|[ @ManyToMany(fetch=javax.persistence.FetchType.LAZY) ]|,
       anno|[ @JoinTable(name = "~tableName") ]|
       ]
     where t := <defined-java-type> s 
	 ; [] := <collect(?InverseSlaveAnno(_, _))> annos
	 ; [] := <collect(?InverseAnno(_, _))> annos
	 ; tableName := <concat-strings> [x_Class, "_", x_prop]

   association-annotations(|x_Class, x_prop, annos) :
      GenericSort("Set", [s@SimpleSort(ss)]) -> 
	 [
		 anno|[ @ManyToMany(fetch=javax.persistence.FetchType.LAZY) ]|,
		 anno|[ @JoinTable( name="~colname",
				 joinColumns={@JoinColumn(name="~thisid")},
				 inverseJoinColumns={@JoinColumn(name="~otherid")} )
			 ]|
		 ]
     where t := <defined-java-type> s
	 ; [InverseAnno(ent, fld) | xs ] := <collect(?InverseAnno(_, _))> annos
	 ; colname   := <concat-strings> [x_Class, "_", x_prop, "_", ss]
	 ; thisid    := <concat-strings> [x_Class, "_id_this"]
	 ; otherid   := <concat-strings> [ent, "_id_other"]

   association-annotations(|x_Class, x_prop, annos) :
     GenericSort("Set", [s@SimpleSort(ss)]) ->
       [
	 anno|[ @ManyToMany( mappedBy="~mappedby", targetEntity=x_ent ,fetch=javax.persistence.FetchType.LAZY) ]|
       ]
     where t := <defined-java-type> s 
	 ; [InverseSlaveAnno(ent, fld)|xs]  := <collect(?InverseSlaveAnno(_, _))> annos
	 ; x_ent                            := <concat-strings> [ent, ".class"]
	 ; mappedby                         := <concat-strings> ["_", fld] 

   association-annotations(|x_Class, x_prop, annos) :
     GenericSort("Map", [s1, s2]) -> [anno|[ @ManyToMany(fetch=javax.persistence.FetchType.LAZY) ]|]
     where t1 := <builtin-java-type> s1
	 ; t2 := <defined-java-type> s2

   // Set of values.

   association-annotations(|x_Class, x_prop, annos) :
     GenericSort("Set", [s@SimpleSort(_)])-> 
     [
       anno|[ 
	 @org.hibernate.annotations.CollectionOfElements(targetElement = t.class) 
       ]|,

       anno|[ @JoinTable(name = "~tableName") ]|, //, joinColumns = @JoinColumn(name = "~joincolumn")

       anno|[ @Column(name = "~x_prop", nullable = false) ]|
     ]
     where t         := <builtin-java-type> s  
	 ; x_Prop    := <capitalize-string> x_prop
	 ; tableName := <concat-strings>[x_Class, "_", x_Prop]
	    
  // Property with a composite association type,
  // i.e., to a defined entity that is owned by x_Class.
  // @note might be translated as @Embeddable
	        
  association-annotations(|x_Class, x_prop, annos) :
    s@SimpleSort(y) ->
    [
      anno|[ @ManyToOne(fetch=javax.persistence.FetchType.LAZY) ]|,
      anno|[ @JoinColumn(name = "~columnname") ]|
    ]
    where t          := <defined-java-type> s
        ; x_Prop     := <capitalize-string> x_prop
        ; columnname := <concat-strings>[x_Class, x_Prop]
            
rules // cascading annotations

  cascade-annotations :
    Ref() -> [anno|[
      @org.hibernate.annotations.Cascade({
	    org.hibernate.annotations.CascadeType.PERSIST,
        org.hibernate.annotations.CascadeType.SAVE_UPDATE,
        org.hibernate.annotations.CascadeType.MERGE
      })
    ]|]
    
  cascade-annotations :
    Comp() -> [anno|[
      @org.hibernate.annotations.Cascade({
	    org.hibernate.annotations.CascadeType.ALL
      })
    ]|]
    
  cascade-annotations :
    Simple() -> []
   
rules // special methods 
 
   property-to-special-getters(|x_Class) : 
    Property(x_prop, k, s@GenericSort(coll, [SimpleSort(y)]), annos) -> 
    class-body-dec* |[
      public t x_getList() {
        return new ArrayList(x_get());
      }

      public int x_getLength() {
        return x_get().size();
      }
      
      public void x_removeFrom(t_y item) {
        x_get().remove(item);
      }
      
      public void x_addTo(t_y item) {
        x_get().add(item);
      }
    ]|
    where <?"Set" <+ ?"List"> coll
        ; t         := <java-type> GenericSort("List", [SimpleSort(y)])
        ; t_y       := <java-type> SimpleSort(y)
        ; <debug> [x_Class, x_prop, annos]
        ; x_Prop    := <capitalize-string> x_prop
        ; x_getList := <concat-strings>["get", x_Prop, "List"]
        ; x_getLength := <concat-strings>["get", x_Prop, "Length"]
        ; x_get     := <concat-strings>["get", x_Prop]
        ; x_addTo   := <concat-strings>["addTo", x_Prop]
        ; x_removeFrom := <concat-strings>["removeFrom", x_Prop]

  property-to-special-getters(|x_Class) : 
    DerivedProperty(x_prop, k, s@GenericSort(coll, [SimpleSort(y)]), annos, expr) -> 
    class-body-dec* |[
      public t x_getList() {
        return new ArrayList(x_get());
      }

      public int x_getLength() {
        return x_get().size();
      }
    ]|
    where <?"Set" <+ ?"List"> coll
        ; t         := <java-type> GenericSort("List", [SimpleSort(y)])
        ; x_Prop    := <capitalize-string> x_prop
        ; x_getList := <concat-strings>["get", x_Prop, "List"]
        ; x_getLength := <concat-strings>["get", x_Prop, "Length"]
        ; x_get     := <concat-strings>["get", x_Prop]
    
  bidirectional-association-setter :
    Property(prop, k, s@GenericSort(coll, [SimpleSort(y)]), annos) ->
      bstm* |[
      	for (t1 var1 : x_prop) {
      		var1.x_set(this);
    	}
      ]|
    where [InverseSlaveAnno(ent, fld) | xs] := <collect(?InverseSlaveAnno(_, _))> annos
        ; SimpleSort(x_Class) := <TypeOfProperty> (ent, fld)
        ; t1					:= <java-type> SimpleSort(y)
        ; x_set  				:= <property-setter> fld
        ; x_prop 				:= <concat-strings>["_", prop]

  bidirectional-association-setter :
    Property(prop, k, s@GenericSort(coll, [SimpleSort(y)]), annos) ->
      bstm* |[
    	  t2 var1;
    	  for (t1 var2 : x_prop) {
    		  var1 = var2.x_get();
        		var1.add(this);
        		var2.x_set(var1);
    	  }
      ]|
    where [InverseSlaveAnno(ent, fld) | xs] := <collect(?InverseSlaveAnno(_, _))> annos
        ; GenericSort("Set", [SimpleSort(x_Class)]) := <TypeOfProperty> (ent, fld)
        ; t1					:= <java-type> SimpleSort(y)
        ; t2					:= <java-type> GenericSort("Set", [SimpleSort(x_Class)])
        ; x_get  				:= <property-getter> fld
        ; x_set  				:= <property-setter> fld
        ; x_prop 				:= <concat-strings>["_", prop]
 
 binary-type-annotations :
   SimpleSort(s) -> [anno|[ @Basic(fetch=FetchType.LAZY) ]|,
                     anno|[ @Column(columnDefinition="LONGBLOB") ]|
                    ]
   where ?(SimpleSort("Binary"))

 binary-type-annotations :
   elem -> []
   where not(?(SimpleSort("Binary")))
   