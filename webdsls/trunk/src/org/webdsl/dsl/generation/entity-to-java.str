/*
  @todo check consistency of entity declarations

  @todo derive filename from compilation unit
*/

module org/webdsl/dsl/generation/entity-to-java

imports 
  libstrategolib  
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/generation/utils


strategies // entities

  entities-to-java :
    Application(qid, sections) -> 
      [<collect(entity-to-java <+ (entity-to-class-fails; fail))> sections]
    where domainpkg := <concat-strings> [ qid, ".domain"]
        ; rules( 
            Package : _ -> qid 
            DomainPackage : _ -> domainpkg
          )
          
strategies

  entity-to-java =
    !(<entity-to-class>, <entity-to-home-class>)

strategies

  entity-to-class : 
    EntityNoSuper(x_class, props) -> JavaFile("src", x_package, x_class,
    compilation-unit|[
      package x_package;

      import java.util.*;
      import javax.persistence.*;

      @Entity
      public class x_class {
        public x_class () {}

        @Id @GeneratedValue
        private Long id;

        ~*cbds
      }
    ]|)
    where cbds := <mapconcat(property-to-code <+ debug(!"cannot generate code for property: "); ![])> props
	    ; x_package := <DomainPackage>
    
  entity-to-class : 
    Entity(x_class, x_super, props) -> JavaFile(x_package, x_class, 
    compilation-unit|[
      package x_package;

      import java.util.*;
      import javax.persistence.*;

      @Entity
      public class x_class extends x_super {
        public x_class () {}

        @Id @GeneratedValue
        private Long id;

        ~*cbds
      }
    ]|)
    where cbds := <mapconcat(property-to-code <+ ![])> props
	    ; x_package := <DomainPackage>
	    
  entity-to-class-fails =
    (?EntityNoSuper(_, _) <+ ?Entity(_,_,_))
    ; err(|"cannot generate code for entity")

strategies // properties

  property-to-code :
    Property(x_prop, SimpleSort(y), []) -> class-body-dec* |[

      private t x_prop;

      public t x_get() {
        return x_prop;
      }

      public void x_set(t x_prop) {
        this.x_prop = x_prop;
      }
  
    ]|
    where t := <java-type> SimpleSort(y)
        ; x_Prop := <capitalize-string> x_prop
        ; x_get := <concat-strings>["get", x_Prop]
        ; x_set := <concat-strings>["set", x_Prop]
	      // @todo: capitalize first letter of property

  property-to-code :
    Property(x_prop, GenericSort("Set", [SimpleSort(y)]), []) -> 
    class-body-dec* |[

      @ManyToMany //(targetEntity=t)
      @org.hibernate.annotations.Cascade({
        org.hibernate.annotations.CascadeType.SAVE_UPDATE,
        org.hibernate.annotations.CascadeType.MERGE
      })
      private Set<t> x_prop = new HashSet<t>();

      public Set<t> x_get() {
        return x_prop;
      }

      public void x_set(Set<t> x_prop) {
        this.x_prop = x_prop;
      }

      public void x_add(t z) {
        this.x_prop.add(z);
      }
  
    ]|
    where t := <java-type> SimpleSort(y)
        ; x_Prop := <capitalize-string> x_prop
        ; x_get := <concat-strings>["get", x_Prop]
        ; x_set := <concat-strings>["set", x_Prop]
        ; x_add := <concat-strings>["add", x_Prop]
	    ; z := <new>"one"
	    // @todo: make singular for add

  property-to-code :
    Property(x_prop, GenericSort("List", [y]), []) -> 
    class-body-dec* |[

      @ManyToMany //(targetEntity=t)
      @org.hibernate.annotations.Cascade({
        org.hibernate.annotations.CascadeType.SAVE_UPDATE,
        org.hibernate.annotations.CascadeType.MERGE
      })
      private List<t> x_prop = new LinkedList<t>();

      public List<t> x_get() {
        return x_prop;
      }

      public void x_set(List<t> x_prop) {
        this.x_prop = x_prop;
      }

      public void x_add(t z) {
        this.x_prop.add(z);
      }
  
    ]|
    where t := <java-type> y
        ; x_Prop := <capitalize-string> x_prop
        ; x_get := <concat-strings>["get", x_Prop]
        ; x_set := <concat-strings>["set", x_Prop]
        ; x_add := <concat-strings>["add", x_Prop]
	    ; z := <new>"one"
	    // @todo: make singular for add

  property-to-code :
    Property(x_prop, GenericSort("Map", 
                       [SimpleSort(y_key),
                        SimpleSort(y_value)]), []) -> 
    class-body-dec* |[

      @ManyToMany() // (targetEntity=t_value)
      @org.hibernate.annotations.Cascade({
        org.hibernate.annotations.CascadeType.SAVE_UPDATE,
        org.hibernate.annotations.CascadeType.MERGE
      })
      private Map<t_key,t_value> x_prop = new HashMap<t_key,t_value>();

      public Map<t_key,t_value> x_get() {
        return x_prop;
      }

      public void x_set(Map<t_key,t_value> x_prop) {
        this.x_prop = x_prop;
      }

      public void x_put(t_key key, t_value value) {
        this.x_prop.put(key, value);
      }
  
    ]|
    where t_key := <java-type> SimpleSort(y_key)
        ; t_value := <java-type> SimpleSort(y_value)
        ; x_Prop := <capitalize-string> x_prop
        ; x_get := <concat-strings>["get", x_Prop]
        ; x_set := <concat-strings>["set", x_Prop]
        ; x_put := <concat-strings>["put", x_Prop]
	    // @todo: make singular for add
	
strategies 

  entity-to-home-class : 
    EntityNoSuper(x_class, props) -> <entity-to-home-class>Entity(x_class, "Object", props)
    
  entity-to-home-class : 
    Entity(x_class, x_super, props) -> JavaFile(x_package, x_homeclass, 
    compilation-unit|[
      package x_package;
      
      import org.jboss.seam.annotations.Factory;
      import org.jboss.seam.annotations.Name;
      import org.jboss.seam.framework.EntityHome;
      
      @Name(~string:String([Chars(x_componenthome)]))
      public class x_homeclass extends EntityHome<x_class> {
      
        @Factory(~string:String([Chars(x_component)]))
        public x_class x_init() { return getInstance(); }
        
      }
    ]|)
    where x_package    := <DomainPackage>
        ; x_component  := <decapitalize-string> x_class
	    ; x_homeclass := <concat-strings> [x_class, "Home"]
	    ; x_componenthome := <concat-strings> [x_component, "Home"]
	    ; x_init       := <concat-strings> ["init", x_class]
	    
  entity-to-home-class-fails =
    (?EntityNoSuper(_, _) <+ ?Entity(_,_,_))
    ; err(|"cannot generate home class for entity")

strategies 

  entity-to-list-class : 
    EntityNoSuper(x_class, props) -> <entity-to-list-class>Entity(x_class, "Object", props)
    
  entity-to-list-class : 
    Entity(x_class, x_super, props) -> JavaFile(x_package, x_listclass, 
    compilation-unit|[
      package x_package;
      
      import static javax.persistence.PersistenceContextType.EXTENDED;
      import static org.jboss.seam.ScopeType.CONVERSATION;
      import static org.jboss.seam.ScopeType.SESSION;

      import java.util.List;

      import javax.ejb.Remove;
      import javax.ejb.Stateful;
      import javax.persistence.EntityManager;
      import javax.persistence.PersistenceContext;

      import org.jboss.seam.annotations.Destroy;
      import org.jboss.seam.annotations.Factory;
      import org.jboss.seam.annotations.In;
      import org.jboss.seam.annotations.Logger;
      import org.jboss.seam.annotations.Name;
      import org.jboss.seam.annotations.Out;
      import org.jboss.seam.annotations.Scope;
      import org.jboss.seam.annotations.datamodel.DataModel;
      import org.jboss.seam.annotations.datamodel.DataModelSelection;
      import org.jboss.seam.core.FacesMessages;
      import org.jboss.seam.log.Log;
      import org.webdsl.serg.domain.Address;
      
      @Name(~string:String([Chars(x_componentList)]))
      public class x_listclass extends x_listinterface 
      {
          @Logger private Log log;
    
          @In FacesMessages facesMessages;
    
          @DataModel private List<x_class> x_componentList;
    
          @DataModelSelection @Out(required = false)
          private x_class x_component;
    
          @PersistenceContext(type=EXTENDED)
          private EntityManager em;
    
          @Factory(~string:String([Chars(x_componentList)]))
          public void findEntries()
          {
             x_componentList = em.createQuery("from x_class").getResultList();
             log.info("call to findEntries: list = " + x_componentList);
          }

          public void delete() {
		    if (x_componentList == null)
			  facesMessages.add("entries list is null");
		    else if (address == null)
			  facesMessages.add("entry is null");
		    else {
		      facesMessages.add("deleting address #{address.street}");
		      addressList.remove(address);
		      em.remove(address);
		      address = null;
		    }
          }
    
	      @Destroy @Remove                                                                      
	      public void destroy() {}
      }
    ]|)
    where x_package       := <DomainPackage>
        ; x_component     := <decapitalize-string> x_class
	    ; x_listclass     := <concat-strings> [x_class, "List"]
	    ; x_componentlist := <concat-strings> [x_component, "List"]
	    
  entity-to-list-class-fails =
    (?EntityNoSuper(_, _) <+ ?Entity(_,_,_))
    ; err(|"cannot generate list class for entity")
