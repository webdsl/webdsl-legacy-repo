/**
 * Transformation of a WebDSL application to a collection of XML and Java files
 * in 
 * 
 * @author Eelco Visser
 */

module org/webdsl/dsl/generation/generator
 
imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/utils/-
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/generation/-
  org/webdsl/dsl/builtins/-
  
strategies
  
  info(|msg) = log(|Info(), msg)
  
strategies 

  dsl-to-seam = id
  
    ; stop-before-importing
    ; info(|"importing modules")
    ; import-modules
  
    ; stop-before-desugaring
    ; info(|"desugaring")
    ; desugar
      ; stop-after
      
    ; declare-definitions
      ; stop-after
    ; add-view-edit-pages-to-app
      ; stop-after
    
    ; process-security
    ; aggregate-subclass-info  
    ; desugar
      ; stop-after 
    ; declare-definitions
      ; stop-after
      
    ; stop-before-typechecking
    ; info(|"typechecking")
    ; typecheck
      ; stop-after
      
    ; stop-before-template-expansion
    ; info(|"template expansion") 
    ; expand-page-templates
      ; stop-after
    ; desugar
      ; stop-after
    ; typecheck
      ; stop-after
    ; derive 
      ; stop-after
    ; desugar
      ; stop-after
    ; typecheck
      ; stop-after
    ; propagate-component-names
      ; stop-after

    ; stop-before-generation
    ; info(|"code generation")
    // Create tuple (Application, [files-to-write])
    ; !(<id>, 
        [<webdsl-to-textfile(|<concat-strings>[<get-config>"-i",".norm"])>,<declarations-to-code>])
    ; append-page-actions-file
    // remove the Application from the tuple, to leave only a list of files to write
    ; remove-application     

  declare-definitions =
    where(
      alltd(declare-entity <+ declare-template-definition <+ declare-action <+ declare-globals)
      ; ?Application(qid, sections)
      ; ents := <collect(?SessionEntity(_, _, _))> sections
      ; rules ( SessionEntities := ents )
    )
    
strategies
   // Creates <AllSubClasses> rule to be used in desugar.str (DeriveOutputSimpleRefAssociation)
   aggregate-subclass-info =
     where(
        allsubclasses := <repeat(once-SubClasses)> []
        ; rules( AllSubClasses := allsubclasses ))

strategies

  // In declarations-to-code an Application term is rewritten as a list where the head is a 
  // tuple (Application, JavaFile, XmlFile), followed by a tail of Java and Xml files.
  declarations-to-code :
    Application(qid, sections) -> (Application(qid, sections), [sections2|[rewriterulefile|rest]]) 
    where rules( 
            Package := <qid-to-package-name> qid
            DomainPackage := <qid-to-package-name> Qualified(qid, "domain")
            BeanPackage := <qid-to-package-name> Qualified(qid, "beans")
          )
   //     ; newapp := <functions-to-el>
   //     ; Application(qid, sections2) := newapp
   //     ; sections3 := <propagate-component-names> sections
        ; try(sometd(create-email-call-rules))
        ; sections2 := <functions-to-el> sections
        ; rewriterulefile := <pages-to-rewrite-rules> sections2
        ; rest := <merge-globals; collect(entity-to-code <+ definitions-to-code <+ globals-to-java)> sections2
       
   entity-to-code =
     !(<entity-to-java-Entity>
      ,<id>)
   
   entity-to-code-failed =
     (?Entity(x_Class, _, _, _) <+ ?EntityNoSuper(x_Class, _, _))
     ; dbg(|"entity-to-code failed: ")
      
   definitions-to-code =
     definition-to-code <+ ( ?Define(mod, x, args, body) ; !() )
   
   definition-to-code = 
     ?Define([Page()], x, args, body)
     ; !(<id>
        ,<page-to-xml>
        ,<page-to-java>)

   definition-to-code =
     ?Define([Email()], x, args, body)
     ; !(<id>
        ,<emails-to-xml>)
   
   create-email-call-rules :
     def@Define(modifiers, x, args, elems1) -> def
     where <elem> (Page(), modifiers)
         ; <collect(create-email-call-rule(|x))> elems1
               
   create-email-call-rule(|x) =
     ?thiscall@ThisCall("email", [ThisCall(defined_template_name, args)])
     ; where( template_file_name := <concat-strings> [defined_template_name, <new>]
            ; rules (
	            EmailCallToTemplateName : thiscall -> (template_file_name, x)
	          )
	        ; if <not(elem)> (thiscall, <EmailCallList <+ ![]> defined_template_name) then
                page_call_list := [thiscall | <EmailCallList <+ ![]> defined_template_name]
                ; rules (
	                EmailCallList : defined_template_name -> page_call_list
	              )
	          end
	        )
   
   append-page-actions-file :
     (Application(qid, sections), files) -> (Application(qid, sections), [page-actions-file | files])
     where <generate-page-list> Application(qid, sections)
       ; page-actions-file := <generate-page-actions-file>
   
   remove-application :
     (Application(qid, sections), files) -> files
     