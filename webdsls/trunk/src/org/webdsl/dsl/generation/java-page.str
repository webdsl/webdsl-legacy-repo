/**
 * Generate a Seam EntityHome class for a declared entity
 */

module org/webdsl/dsl/generation/java-EntityHome

imports 
  libstrategolib  
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/utils/utils

rules

  page-to-java : 
    def@Define([Page()], x_page, args, elems1) -> 
    <create-local-interface(|pkgname, pkgname2, x_PageBeanInterface)> JavaFile(["src"], 
    compilation-unit|[
      package pkgname;
      import java.util.*;
      import java.io.Serializable;

      import static javax.persistence.PersistenceContextType.EXTENDED;
      
      import javax.persistence.PersistenceContext;
      import javax.persistence.EntityManager;
      
      import javax.ejb.Stateless;
      import javax.ejb.Stateful;
      import javax.ejb.Remove;

      import org.jboss.seam.ScopeType;
      import org.jboss.seam.annotations.Begin;
      import org.jboss.seam.annotations.Destroy;
      import org.jboss.seam.annotations.Name;
      import org.jboss.seam.annotations.Scope;
      import org.jboss.seam.annotations.Create;
      import org.jboss.seam.annotations.Logger;
      import org.jboss.seam.annotations.RequestParameter;
      import org.jboss.seam.annotations.datamodel.DataModel;
      import org.jboss.seam.annotations.datamodel.DataModelSelection;
      import org.jboss.seam.core.FacesMessages;
      import org.jboss.seam.log.Log;

      import org.jboss.seam.annotations.In;
      import org.jboss.seam.annotations.Out;

      import org.jboss.seam.annotations.Factory;
      
      import pkgname2.*;
  
      @Stateful
      @Name(~string:String([Chars(x_page)]))
      public class x_PageBean implements x_PageBeanInterface {
      
        @Logger 
        private Log log;
      
        @PersistenceContext(type = EXTENDED)
        private EntityManager em;

        @In 
        private FacesMessages facesMessages;

        ~*cbds
        
	    public @Create void initialize() {
		  bstm*
	    }
	    
	    @Destroy @Remove
	    public void destroy() {}
      }
    ]|)
    where pkgname    := <BeanPackage>
        ; pkgname2   := <DomainPackage>
        ; x_Page     := <capitalize-string> x_page
	    ; x_PageBean := <concat-strings> [x_Page, "Bean"]
	    ; x_PageBeanInterface := <concat-strings> [x_Page, "BeanInterface"]
	    ; cbds := <filter-concat-warn(argument-to-bean-property | "cannot generate bean property for argument: ")> args
	    ; bstm* := <filter-concat-warn(argument-to-initialization | "cannot generate initialization code for argument: ")> args
	    
  argument-to-bean-property :
    Arg(x, SimpleSort(x_Class)) -> 
    |[
       @RequestParameter("~x")
       private Long x_Id;
      
       private x_Class x;
      
       public void x_set(x_Class x) {
         this.x = x;
       }
      
       public x_Class x_get() {
         return x;
       }
    ]|
    where x_Id := <concat-strings>[x, "Id"]
        ; x_get := <property-getter> x
        ; x_set := <property-setter> x
        
  argument-to-initialization :
    Arg(x, SimpleSort(x_Class)) -> 
    bstm*|[
	  if (x_Id == null)
	    {
		  log.debug("No " + "~x_Id" + " defined, couldn't start conversation");
        } 
      else 
        {
		  x = em.find(x_Class.class, x_Id);
	    }
    ]|
    where x_Id := <concat-strings>[x, "Id"] 

    
