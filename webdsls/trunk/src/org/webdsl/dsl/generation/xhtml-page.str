module org/webdsl/dsl/generation/xhtml-viewEntity

imports 
  libstrategolib 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/utils/-
    
rules
    
  page-to-xml : 
    def@Define([Page()], x, args, elems1) ->
    XmlFile(["view"], <concat-strings>[x, ".xhtml"], 
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:s="http://jboss.com/products/seam/taglib"
      xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
      xmlns:rich="http://richfaces.ajax4jsf.org/rich">
<head>    
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title><%= title ::*%></title>
    <link href="stylesheet/layout.css" rel="stylesheet" type="text/css" />
    <link href="stylesheet/style.css" rel="stylesheet" type="text/css" />
    <link href="stylesheet/theme.css" rel="stylesheet" type="text/css" />
    <link href="stylesheet/date.css" rel="stylesheet" type="text/css" />
</head>
<body><%= elems2 ::*%></body>
</html>
<%)
  where {| Component
         : rules( Component := x )
         ; title := <get-title> elems1
         ; elems2 := <elems-to-xhtml> elems1
         |}
      
  // @todo this should be made more configurable probably
      
rules // embedding expressions in presentation

  arg-to-value-string =
    arg-string-to-value-string
    <+ arg-to-el-string
    
  arg-string-to-value-string :
    String(x) -> x
    
  arg-to-el-string :
    e -> <concat-strings>["#{", x, "}"]
    where x := <arg-to-el> e 
  
  arg-to-el :
    Var(x) -> x
        
  arg-to-el :
    FieldAccess(e, f) -> <concat-strings>[x, ".", f]
    where x := <arg-to-el> e
  
  arg-to-el :
    Call(e, f, args1) -> <concat-strings>[<arg-to-el> e, ".", f, "(", args2, ")"]
    where args2 := <map(arg-to-el); separate-by(|","); concat-strings> args1
    
strategies // lists of elements

  elems-to-xhtml =
    filter-concat-warn(elem-to-xhtml | "elem-to-xhtml undefined: ")
    
  elems-to-xhtml(wrap) =
    filter-concat-warn(elem-to-xhtml; wrap | "elem-to-xhtml undefined: ")

strategies // title
      
  get-title =
    fetch-elem(?TemplateCall("title", [], <id>))
    ; elems-to-xhtml
    <+ ![]
  
  // ignore title when rendering body of a page
  
  elem-to-xhtml :
    TemplateCall("title", _, _) -> []
    
rules // div

  elem-to-xhtml :
    TemplateCall("div", [String(x)], elems) ->
    %>
    <div class="<%= x %>"><%= <elems-to-xhtml> elems ::*%></div>
    <%

rules // text

  elem-to-xhtml :
    Text(x) -> %> <h:outputText value="<%=x%>"/> <%
    
rules // text

  // convert an expression to text (string value of the expression)
    
  elem-to-xhtml :
    TemplateCall("text", [arg], []) -> 
    %> <h:outputText value="<%= val-string %>"/> <%
    where val-string := <arg-to-value-string> arg

rules // images
   
  elem-to-xhtml :
    TemplateCall("image",[e],[]) -> %> <h:graphicImage value="<%=x%>"/> <%
    where x := <arg-to-value-string> e
    
rules // lists

  elem-to-xhtml :
    TemplateCall("list", [], elems) ->
    %>
      <ul>
        <%= <elems-to-xhtml> elems ::*%>
      </ul>
    <%
    
  elem-to-xhtml :
    TemplateCall("listitem", [], elems) ->
    %>
      <li>
        <%= <elems-to-xhtml> elems ::*%>
      </li>
    <%
    
rules // sections and headers

  elem-to-xhtml :
    TemplateCall("header", [], elems) ->
    %>
      <~n:tag><%= <elems-to-xhtml> elems ::*%></~n:tag>
    <%
    where n := <SectionDepth <+ !1>
        ; tag := <concat-strings>["h", <int-to-string> n]
      
  elem-to-xhtml :
    TemplateCall("section", [], elems1) ->
    %>
      <div class="<%= sectionlevel %>"><%= elems2 ::*%></div>
    <%
    where {| SectionDepth
           : rules( SectionDepth := <(SectionDepth <+ !0); inc> )
           ; sectionlevel := <concat-strings>["section", <SectionDepth; int-to-string>]
           ; elems2 := <elems-to-xhtml> elems1
           |}
           
rules // tables

  elem-to-xhtml :
    TemplateCall("table", [], elems) ->
    %>
      <table><%= <elems-to-xhtml> elems ::*%></table>
    <%
    
  elem-to-xhtml :
    TemplateCall("row", [], elems) ->
    %>
      <tr><%= <elems-to-xhtml(table-cell-wrap)> elems ::*%></tr>
    <% 
       
   table-cell-wrap :
     elems -> %> <td><%= elems ::*%></td> <%

rules // iteration

  elem-to-xhtml :
    For(x,s,e,elems) ->
    %>
      <h:dataTable var="<%= x %>" value="<%= el %>"><%= columns ::*%></h:dataTable>
    <%
    where el := <arg-to-value-string> e
        ; columns := <elems-to-xhtml(wrap-column)> elems
        
  elem-to-xhtml :
    ForAll(x,s,elems) ->
    %>
      <h:dataTable var="<%= x %>" value="#{<%= <Component> %>.<%= x %>List}"><%= columns ::*%></h:dataTable>
    <%
    where columns := <elems-to-xhtml(wrap-column)> elems
        
  wrap-column :
    elems -> 
    %> 
      <h:column><%= elems ::*%></h:column> 
    <%
       
rules // select

  elem-to-xhtml :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectOneMenu value="#{<%= component %>.<%= x_new %>}">
          <f:selectItem itemLabel="" itemDisable="true" itemValue="0" />
          <f:selectItems value="#{<%= component %>.<%= x_List %>}" 
                         var="<%= x %>" label="#{<%= x %>.label}"/>
        </h:selectOneMenu>
        <h:commandButton type="submit" value="<%= label %>" action="#{<%= component %>.<%= x_select %>()}"/>
    <%
    where X := <capitalize-string> x
        ; x_new := <concat-strings>["new", X]
        ; x_select := <concat-strings>["select", X]
        ; x_List := <concat-strings>[x, "List"]
        ; component := <Component>
       
rules // links

  // link to a url, maybe constant, or obtained from an entity field
  
  elem-to-xhtml :
    TemplateCall("navigate", [e1, ThisCall("url",[e2])], []) ->
    %>
      <h:outputLink value="<%=y%>">
          <h:outputText value="<%=x%>"/>
      </h:outputLink>
    <%
    where x := <arg-to-value-string> e1
        ; y := <arg-to-value-string> e2
    
  //elem-to-xhtml :
  //  TemplateCall("navigate", [FieldAccess(Var("p"),"homepage")],[]) ->
  // @todo we need the type of p to determine the type of the field to figure out what to
  // to with this
  // can be done using a desugaring; here we should only be concerned with simple mappings
    
  // link to a defined page with arguments
  
  elem-to-xhtml :
    TemplateCall("navigate",[e,ThisCall(p,args)],[]) ->
    %>
      <s:link view = "/<%= p %>.xhtml" value="<%= el %>" propagation="none"><%= params ::*%></s:link>
    <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; <debug(!"navigate to page")> (p, <id>)
        ; params := <zip(debug(!"bind-param 0: "); bind-param)> (fargs, args)
        ; debug(!"params bound: ")
        ; el := <arg-to-value-string> e
        ; debug(!"value exp: ")
   
  bind-param :
    (Arg(x, s@SimpleSort(x_Class)), e) ->
    %><f:param name="<%= x %>" value="<%= el %>" /><%
    where <defined-java-type> s
        //; x_class := <decapitalize-string> x_Class
        ; el := <arg-to-value-string> FieldAccess(e, "id")
    
  // constraint: only pass parameters of entity types (simple sorts)
  
rules // forms

  elem-to-xhtml :
    TemplateCall("form", [], elems) ->
    %>
      <h:form><%= <elems-to-xhtml> elems ::*%></h:form>
    <%
    
  elem-to-xhtml :      
    TemplateCall("action",[e1,e2],[]) ->
    %> 
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
               
  elem-to-xhtml :      
    TemplateCall("action",[e1,e2,e3],[]) ->
    %> 
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
        
  elem-to-xhtml :      
    TemplateCall("action",[e1,e2,e3],[]) ->
    %> 
       <s:button type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <is-cancel-action> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
     
  elem-to-xhtml :      
    TemplateCall("actionLink",[e1,e2],[]) ->
    %> 
       <h:commandLink type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
        
   is-cancel-action =
     ?Call(Var(component), "cancel", [])
                
   elem-to-xhtml :      
    TemplateCall("action",[e1,e2],[]) ->
    %> 
       <h:commandButton value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
    
rules // input
        
  elem-to-xhtml :
    TemplateCall("input",[e],[]) ->
    %>
      <h:inputText required="true" value="<%= estring %>"/>
    <%
    where estring := <arg-to-value-string> e
    
    // @todo support different types of input based on type
    // maybe deal with that through desugaring, i.e., have more
    // specific inputX template calls
    
       