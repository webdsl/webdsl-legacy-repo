module org/webdsl/dsl/generation/xhtml-page

imports 
  libstrategolib 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/utils/-
    
rules
  
  page-to-xml : 
    def@Define([Page()], x, args, elems1) ->
    XmlFile(["view"], <concat-strings>[x, ".xhtml"], 
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:c="http://java.sun.com/jstl/core"
      xmlns:s="http://jboss.com/products/seam/taglib"
      xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
      xmlns:t="http://myfaces.apache.org/tomahawk"
      xmlns:rich="http://richfaces.ajax4jsf.org/rich"
      xmlns:wdsl="http://www.webdsl.org/el">
<head>    
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title><%= title ::*%></title>
    <link href="<%= approot %>/stylesheets/webdsl.css" rel="stylesheet" type="text/css" />
    <%= menustyle::* %>
</head>
<body><%= elems2 ::*%></body>
<%= dropdownmenu::* %>
</html>
<%)
  where {| Component, MenuBarIds
         : rules( Component := x )
         ; title := <get-title> elems1
         ; elems2 := <elems-to-xhtml> elems1
         ; approot := <AppRoot>
         ; if MenuBarIds then
             dropdownmenu := 
             %>
               <script type="text/javascript">
                 cssdropdown.startchrome(<%= <list-to-comma-separated-strings> <MenuBarIds>::cdata %>);
               </script>
             <%
             ; menustyle :=
             %>
               <link href="<%= approot %>/stylesheets/chromestyle.css" rel="stylesheet" type="text/css" />
               <script src="<%= approot %>/javascript/chrome.js" type="text/javascript" />
             <%
           else
             javascript := [] ; menustyle := []
           end
         |}

//  generate-javascript 
//    <MenuBarIds>

  // Generate a list of all pages in the application
  generate-page-list =
	?Application(qid, sections)
      ; list := <collect(extract-page-name)> sections      
	  ; rules (page-list := list)

  // Extract the page name from a page
  extract-page-name :
    Define([Page()], x, args, elems1) -> x

  // Generate the pages.xml file with all the page actions
  generate-page-actions-file =
	page-actions := <map(generate-page-action); concat> <page-list>
    ; !XmlFile(["resources/WEB-INF"], "pages.xml",
	    %>
	      <?xml version="1.0" ?>
	      <!DOCTYPE page PUBLIC 
	      "-//JBoss/Seam Pages Configuration DTD 1.2//EN" "http://jboss.com/products/seam/pages-2.0.dtd">
	      <pages>
	        <%= page-actions ::*%>
	      </pages>
	    <%)    
  
  // Generate a page action to force bean initialization before
  // rendering a page.  
  generate-page-action :
    x -> 
      %><page view-id="<%=viewid%>" action="#{<%=pageaction%>}" />
      <%
    where 
      viewid := <concat-strings>["/", x, ".xhtml"]
      ; pageaction := <concat-strings>[x, ".forceInitialization()"]

      
  // @todo this should be made more configurable probably
      
rules // embedding expressions in presentation

  arg-to-value-string =
    arg-string-to-value-string
    <+ arg-to-el-string
  
  arg-string-to-value-string :
    Cast(x, s) -> <arg-to-value-string> x

  arg-string-to-value-string :
    String(x) -> x
  
//  arg-string-to-value-string :
//    Email(x) -> x
  
  arg-string-to-value-string :
    Bool(x) -> x

  arg-to-el-string :
    e -> <concat-strings>["#{", x, "}"]
    where <not(?Add(_, _))> := e
        ; x := <arg-to-el> e 
  
  arg-to-el-string :
    Add(e1, e2) -> <concat-strings> [a, b]
    where a := <arg-to-value-string> e1
        ; b := <arg-to-value-string> e2
    
  arg-to-el :
    Var(x) -> <concat-strings> [<Component>,".",x]
  		where <IsSessionVariable> x
  		
  arg-to-el :
    Var(x) -> <concat-strings> [<Component>,".",x]
  		where <IsGlobal> x

  arg-to-el :
    Cast(x, s) -> <arg-to-el> x

  arg-to-el :
    Var(x) -> x
       where not(<IsSessionVariable> x)
           ; not(<IsGlobal> x)

  arg-to-el :
    FieldAccess(e, f) -> <concat-strings>[x, ".", f]
    where x := <arg-to-el> e
        ; not(f := "length")
  
  arg-to-el :
    FieldAccess(e, "length") -> <concat-strings>[x, "Length"]
    where x := <arg-to-el> e
  
  
  arg-to-el : // Does this actually work?
    Call(e, f, args1) -> <concat-strings>[<arg-to-el> e, ".", f, "(", args2, ")"]
    where args2 := <map(arg-to-el); separate-by(|","); concat-strings> args1
    
strategies // lists of elements

  elems-to-xhtml =
    filter-concat-warn(elem-to-xhtml <+ undefined-template-call | "elem-to-xhtml undefined: ")
    
  elems-to-xhtml(wrap) =
    filter-concat-warn((elem-to-xhtml <+ undefined-template-call); wrap | "elem-to-xhtml undefined: ")

  undefined-template-call :
    TemplateCall(f, args, body) -> []
    where log(|Warning(), ["no definition for template ", f])

strategies // title
      
  get-title =
    fetch-elem(?TemplateCall("title", [], <id>))
    ; elems-to-xhtml
    <+ ![]
  
  // ignore title when rendering body of a page
  
  elem-to-xhtml :
    TemplateCall("title", _, _) -> []
    
rules // div

  // @obsolete; use block{ ... } instead of div{ ... }

  elem-to-xhtml :
    TemplateCall("div", [String(x)], elems) ->
    %>
    <div class="<%= x %>"><%= <elems-to-xhtml> elems ::*%></div>
    <%

  elem-to-xhtml :
    TemplateCall("block", [String(x)], elems) ->
    %>
    <div class="<%= x %>"><%= <elems-to-xhtml> elems ::*%></div>
    <%

rules // text

  elem-to-xhtml :
    Text(x) -> %> <h:outputText value="<%=x%>"/> <%
    
rules // text

  // convert an expression to text (string value of the expression)
    
  elem-to-xhtml :
    TemplateCall("text", [arg], []) -> 
    %> <h:outputText value="<%= val-string %>"/> <%
    where val-string := <arg-to-value-string> arg

rules // spacer

  elem-to-xhtml :
    TemplateCall("spacer", [], []) -> 
    %> <rich:spacer id="<%= spacer-id %>" /> <%
    where spacer-id := <newname> "spacer"

rules // images
   
  elem-to-xhtml :
    TemplateCall("image",[e],[]) -> %> <h:graphicImage value="<%=x%>"/> <%
    where x := <arg-to-value-string> e

rules // menus

  elem-to-xhtml :
    TemplateCall("menubar",exp, elems) ->
      %>
        <div class="chromestyle" id="<%= x_menuid %>">
          <ul>
            <%= elems2::*%>
          </ul>
        </div>
        
        <%= elems3 ::*%>
        
      <%
    where {| InMenuBarContext, MenuIds
           : x_menuid := <newname> "menubar"
           ; rules ( InMenuBarContext := x_menuid )
           ; rules ( MenuBarIds := [x_menuid | <MenuBarIds <+ ![]>] )
           ; elems2 := <mapconcat(find-menu-header <+ ![]); elems-to-xhtml> elems
           ; rules ( MenuIds := <reverse> <MenuIds> )
           ; elems3 := <elems-to-xhtml> elems
           |}


  find-menu-header =
    ?TemplateCall("menu", _, elems)
    ; <filter(?TemplateCall("menuheader", _, _))> elems
  
  elem-to-xhtml :
    TemplateCall("menuheader", [], [elem]) ->
      %>
        <li>
          <%= <menuheader-to-xhtml> elem ::*%>
        </li>
      <%
    where InMenuBarContext        
        
  menuheader-to-xhtml :
    e@Text(elem) ->
      %>
        <a href="#" rel="<%= x_rel %>"><%= <elem-to-xhtml> e ::*%></a>
      <%
    where x_rel := <newname> "menu"
        ; rules ( MenuIds := [x_rel | <MenuIds <+ ![]>] )
  
  elem-to-xhtml :
    TemplateCall("menu", [], elems) ->
      %>
        <div id="<%= x_id %>" class="dropmenudiv">
          <%= elems2 ::*%>
        </div>
      <%
    where elems2 := <filter(not(?TemplateCall("menuheader", _, _))) ; elems-to-xhtml> elems
//        ; not( [] := <filter(not(?TemplateCall("menuheader", _, _)))> elems )
        ; [head|rest] := <MenuIds>
        ; rules ( MenuIds := rest )
        ; x_id := head
  
/*  elem-to-xhtml :
    TemplateCall("menu", [], elems) ->
      %> <%
    where [] := <filter(not(?TemplateCall("menuheader", _, _)))> elems*/
    
/*  elem-to-xhtml :
    TemplateCall("dropdownmenu", [], elems) ->
      %>
        <rich:dropDownMenu value="<%= x_name%>">
          <%= menuitems::* %> 
        </rich:dropDownMenu>
      <%
    where [header] := <filter(?TemplateCall("header", _, _))> elems
          ; TemplateCall("header", [], [Text(x_name)]) := header
          ; menuitems := <filter(not(?TemplateCall("header", _, _))); elems-to-xhtml> elems */
//          ; <debug> menuitems


  elem-to-xhtml :
    TemplateCall("menuitem", [], elems) ->
      %>
        <%= <elems-to-xhtml> elems ::* %>
      <%
//    where Text(x_name) := elem
//        ; <debug> exps


/*  elem-to-xhtml :
    t@TemplateCall("menuitem",[e], [elem]) ->
      %> <rich:menuItem submitMode="ajax" value="<%= x_name %>" action="<%= x_action %>" /> <%
    where Text(x_name) := elem
        ; ThisCall(p,args) := e
        ; if <IsPage> p then
            fargs := <TemplateArguments> p
            ; param* := <zip(params-to-string)> (fargs, args)
            ; fn := <MenuActionFunction> (<Component>, t)
            ; x_action := <concat-strings> ["#{", <Component>, ".", fn, "}"]
            ; info(|fn)  , "(", param*, ")
          end */
        
  params-to-string :
    (Arg(x, _), e) -> y
    where y := <arg-to-el> e
    
          
//        ; 
  //      ; fn := <MenuActionFunction> (<Component>, t)
        
        
/*  elem-to-xhtml :
    t@TemplateCall("navigate",[e1@ThisCall(p,args)],[elems1]) ->
    %> <rich:menuItem submitMode="ajax" value="<%= x_name %>" action="<%= x_action %>" /> <%
    where <IsPage> p
        ; InsideMenu
//        ; info(|p)
        ; TemplateCall(text,[e],[]) := elems1
//        ; info(|e)
        ; x_name := <arg-to-value-string> e
//        ; info(|x_name)
//        ; info(| <MenuActionFunction> t)
        ; fn := <MenuActionFunction> (<Component>, t)
 //       ; info(|fn)
        ; x_action := <concat-strings> ["#{", <Component>, ".", fn, "}"]
//        ; info(|x_action)*/

rules // datatables

  elem-to-xhtml :
    t@TemplateCallDeclaredType("table", x, s, elems) ->
    %>
      <rich:dataTable id="<%= table-id %>" var="<%= x %>" value="#{<%= <Component> %>.<%= x %>List}">
      
        <f:facet name="header">
		  <rich:columnGroup>
            <%= headers ::*%>
          </rich:columnGroup>
        </f:facet>
        
        <%= columns ::*%>
        
      </rich:dataTable>
    <%
  where {| DataTable, SubColumnCount, Subtable
         : table-id := <newname> "datatable"
         ; rules ( DataTable := table-id )
         ; header-elems := <collect(?TemplateCall("header", _, _))> elems
         ; column-elems := <filter(not(?TemplateCall("header", _, _)))> elems
         ; columns := <mapconcat(column-to-xhtml)> column-elems
         ; headers := <mapconcat(elem-to-xhtml)> header-elems
         |}

/*      ; hideColumn :=  <HideSubTableColumn <+ ![]>   
      ; if HideSubTableColumn then
          att0 := @> varDetailToggler="detailToggler" <@
        else
          att0 := []
        end*/

   elem-to-xhtml :
     TemplateCall("header", [], elems) -> elems'
     where DataTable
         ; info(|<SubColumnCount>)
         ; elems' := <mapconcat(header-to-xhtml)> elems

   header-to-xhtml :
     e ->
     %>
       <rich:column><%= headername::* %></rich:column>
     <%
     where headername := <elem-to-xhtml> e

   column-to-xhtml :
    elem -> column
    where el := <elem-to-xhtml> elem
        ; if (not(Subtable(x, _, _, _) := elem)) then
            column := %>
		      <rich:column>
		        <%= el ::*%>
		      </rich:column>
	        <%
	        ; if SubTable then
                rules( SubColumnCount := <(SubColumnCount <+ !0); inc> )
              end
	      else
	        column := el
          end


/*  column-to-xhtml :
    elem -> enclosed-columns
  where el := <elem-to-xhtml> elem
      ; columns := %>
	      <rich:column>
	        <%= el ::*%>
	      </rich:column>
        <% 
      ; enclosed-columns := <enclose-subtable-column> columns

/*  enclose-subtable-column :
     elem -> %> <f:facet name="detailStamp"> <%= elem::* %> </f:facet> <% 
     where HideSubTableColumn
   
  enclose-subtable-column :
     elem -> elem
     where not(HideSubTableColumn) */
  
  elem-to-xhtml :
    Subtable(x, s, e, elems) ->
    %>
        <rich:subTable id="<%= subtable-id %>" var="<%=x%>" value="<%=x_col%>" colspan="">
          <%= columns ::*%>
        </rich:subTable>
    <%
  where x_col := <arg-to-value-string> e
      ; subtable-id := <newname> "subtable"
      ; rules ( SubTable := subtable-id )
 //     ; FieldAccess(exp, ident) := field
 //     ; itemVarName := <concat-strings>[ <decapitalize-string> ident, "Item"]
 //     ; columnsWithVar := <map(add-var-to-template-call(|itemVarName))> columns
 //     ; <debug> elems
      ; exp := TemplateCall("spacer", [], [])
      ; elems2 := <MkCons> (exp, elems)
      ; columns := <mapconcat(column-to-xhtml)> elems2
    
  add-var-to-property(|var) :
    Var(var1) -> Var(var2)
    where var2 := <concat-strings> [var, ".", var1]
  
  add-var-to-property(|var) :
    FieldAccess(e1, x) -> FieldAccess(e2, x)
    where e2 := <add-var-to-property(|var)> e1

  add-var-to-template-call(|var) :
    TemplateCall(a, [exp], []) -> TemplateCall(a, [exp2], [])
    where exp2 := <add-var-to-property(|var)> exp
    
rules // lists

  elem-to-xhtml :
    TemplateCall("list", [], elems) ->
    %>
      <ul>
        <%= <elems-to-xhtml> elems ::*%>
      </ul>
    <%
    
  elem-to-xhtml :
    TemplateCall("listitem", [], elems) ->
    %>
      <li>
        <%= <elems-to-xhtml> elems ::*%>
      </li>
    <%
    
rules // sections and headers

  elem-to-xhtml :
    TemplateCall("header", [], elems) ->
    %>
      <~n:tag><%= <elems-to-xhtml> elems ::*%></~n:tag>
    <%
    where not(DataTable)
        ; n := <SectionDepth <+ !1>
        ; tag := <concat-strings>["h", <int-to-string> n]
      
  elem-to-xhtml :
    TemplateCall("section", [], elems1) ->
    %>
      <div class="<%= sectionlevel %>"><%= elems2 ::*%></div>
    <%
    where {| SectionDepth
           : rules( SectionDepth := <(SectionDepth <+ !0); inc> )
           ; sectionlevel := <concat-strings>["section", <SectionDepth; int-to-string>]
           ; elems2 := <elems-to-xhtml> elems1
           |}
           
  elem-to-xhtml :
    TemplateCall("par", [], elems1) ->
    %>
      <p><%= elems2 ::*%></p>
    <%
    where elems2 := <elems-to-xhtml> elems1
  
  elem-to-xhtml :
    TemplateCall("container", [], elems1) ->
    %>
      <span><%= elems2 ::*%></span>
    <%
    where elems2 := <elems-to-xhtml> elems1

rules // tables

  elem-to-xhtml :
    TemplateCall("table", [], elems) ->
    %>
      <table><%= <elems-to-xhtml> elems ::*%></table>
    <%
    
  elem-to-xhtml :
    TemplateCall("row", [], elems) ->
    %>
      <tr><%= <elems-to-xhtml(table-cell-wrap)> elems ::*%></tr>
    <% 
       
   table-cell-wrap :
     elems -> %> <td><%= elems ::*%></td> <%

rules // iteration

  elem-to-xhtml :
    For(x, s, e, Filter(we, obe), elems1) ->
    %>
      <ui:repeat var="<%= x %>" value="<%= el %>">
        <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<Component>, we) %>">
          <%= elems2 ::*%>
        </h:panelGroup>
      </ui:repeat>
    <%
    where not(True() := we)
        ; el := <arg-to-value-string> e
        ; elems2  := <elems-to-xhtml> elems1
        
  elem-to-xhtml :
    For(x, s, e, Filter(True(), obe), elems1) -> // No "where" clause
    %>
      <ui:repeat var="<%= x %>" value="<%= el %>">
        <%= elems2 ::*%>
      </ui:repeat>
    <%
    where el := <arg-to-value-string> e
        ; elems2  := <elems-to-xhtml> elems1

  elem-to-xhtml :
    ForAll(x, s, Filter(we, obe), elems) ->
    %>
      <ui:repeat var="<%= x %>" value="#{<%= <Component> %>.<%= x %>List}">
        <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<Component>, we) %>">
          <%= columns ::*%>
        </h:panelGroup>
      </ui:repeat>
    <%
    where not(True() := we)
        ; columns := <elems-to-xhtml(wrap-column)> elems

  elem-to-xhtml :
    ForAll(x, s, Filter(True(), obe), elems) ->
    %>
      <ui:repeat var="<%= x %>" value="#{<%= <Component> %>.<%= x %>List}">
        <%= columns ::*%>
      </ui:repeat>
    <%
    where columns := <elems-to-xhtml(wrap-column)> elems
        
  
  elem-to-xhtml :
    IfTempl(e, elems) ->
    %>
      <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<Component>, e) %>"><%= elems2 ::*%></h:panelGroup>
    <%
    where elems2 := <elems-to-xhtml> elems
        
  wrap-column :
    elems -> 
    %> 
      <h:column><%= elems ::*%></h:column> 
    <%
       
rules // select

  elem-to-xhtml :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectManyListbox value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= <Component> %>.<%= x_List %>}" 
                         var="<%= x %>" label="#{<%= x %>.name}" />
          <s:convertEntity />
        </h:selectManyListbox>
    <%
    where _{Type(t)} := e
        ; GenericSort(_, _) := t
        ; X         := <capitalize-string> x
        ; x_List    := <concat-strings>[x, "List"]
        ; x_prop    := <concat-strings> [<arg-to-el> e, "List"]

  elem-to-xhtml :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectOneMenu value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= <Component> %>.<%= x_List %>}" 
                         var="<%= x %>" label="#{<%= x %>.name}" noSelectionLabel="" />
          <s:convertEntity />
        </h:selectOneMenu>
    <%
    where _{Type(t)} := e
        ; SimpleSort(_) := t
        ; X         := <capitalize-string> x
        ; x_List    := <concat-strings>[x, "List"]
        ; x_prop    := <arg-to-el> e
            
/*  elem-to-xhtml :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectOneMenu value="#{<%= component %>.<%= x_new %>}" onchange="submit()" 
                        valueChangeListener="#{<%= component %>.<%= x_select %>}">
          <f:selectItem itemLabel="" itemDisable="true" itemValue="0" />
          <f:selectItems value="#{<%= component %>.<%= x_List %>}" 
                         var="<%= x %>" label="#{<%= x %>.label}"/>
        </h:selectOneMenu>
    <%
    where X         := <capitalize-string> x
        ; x_new     := <concat-strings>["new", X]
        ; x_select  := <concat-strings>["select", X]
        ; x_List    := <concat-strings>[x, "List"]
        ; component := <Component>
 */
    
rules // links

  // link to a url, maybe constant, or obtained from an entity field
  
  elem-to-xhtml :
    TemplateCall("navigate", [ThisCall("url",[e])], elems) ->
    %> <h:outputLink value="<%=x%>"><%= 
        <elems-to-xhtml> elems ::*
    %></h:outputLink> <%
    where x := <arg-to-value-string> e

    
  //elem-to-xhtml :
  //  TemplateCall("navigate", [FieldAccess(Var("p"),"homepage")],[]) ->
  // @todo we need the type of p to determine the type of the field to figure out what to
  // to with this
  // can be done using a desugaring; here we should only be concerned with simple mappings
    
  // link to a defined page with arguments
  
//  elem-to-xhtml :
//    TemplateCall("navigate",[ThisCall(p,args)],elems1) ->
//    %> <s:link view = "/<%= p %>.xhtml" propagation="none"><%= 
//       <conc>(params,elems2) ::*
//    %></s:link> <%
//    where <IsPage> p
//        ; fargs := <TemplateArguments> p
//        ; <dbg(|"navigate to page")> (p, <id>)
//        ; params := <zip(dbg(|"bind-param 0: "); bind-param)> (fargs, args)
//        ; dbg(|"params bound: ")
//        //; el := <arg-to-value-string> e
//        ; dbg(|"value exp: ")
//        ; elems2 := <elems-to-xhtml> elems1
//
  elem-to-xhtml :
    TemplateCall("navigate",[ThisCall(p,args)],elems) ->
    %> <h:outputLink value="<%= url %>"><%= 
        <elems-to-xhtml> elems ::*
    %></h:outputLink> <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)
/*        ; if InMenuBarContext then
            x_menuId := <newname> "menu"
            ; rules ( MenuIds : <InMenuBarContext> -> [x_menuId | <MenuIds <+ ![]>] )
            ; <debug> ["MenuIds: ", <MenuIds> <InMenuBarContext>]
            ; att0 := @> rel="<%= x_menuId %>" <@
          else
            att0 := []
          end*/


  bind-param :
    (Arg(x, _), e) -> (x, el)
    where el := <arg-to-value-string> FieldAccess(e, "id")

//  bind-param :
//    (Arg(x, s@SimpleSort(x_Class)), e) ->
//    %><f:param name="<%= x %>" value="<%= el %>" /><%
//    where <defined-java-type> s
//        //; x_class := <decapitalize-string> x_Class
//        ; el := <arg-to-value-string> FieldAccess(e, "id")
//    
  // constraint: only pass parameters of entity types (simple sorts)
    
rules // forms

  elem-to-xhtml :  // the <f:facet> puts validation errors behind their inputs
    TemplateCall("form", [], elems) ->
    %>
      <h:form enctype="multipart/form-data">
        <f:facet name="afterInvalidField"><s:message/></f:facet>
        <s:validateAll><%= <elems-to-xhtml> elems ::*%></s:validateAll>
      </h:form>
    <%
    
  elem-to-xhtml :      
    TemplateCall("action",[e1,e2],[]) ->
    %> 
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
               
  elem-to-xhtml :      
    TemplateCall("action",[e1,e2,e3],[]) ->
    %> 
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
        
  elem-to-xhtml :      
    TemplateCall("action",[e1,e2,e3],[]) ->
    %> 
       <s:button type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <is-cancel-action> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
        
    // @todo this is a big hack! the s:button component invokes the
    // corresponding action, but does not send the form information, does 
    // canceling the form edits; however, this should NOT be expressed in the
    // name of the action method
     
  elem-to-xhtml :      
    TemplateCall("actionLink",[e1,e2],[]) ->
    %> 
       <h:commandLink type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
        
   is-cancel-action =
     ?Call(Var(component), "cancel", [])
                
   elem-to-xhtml :      
    TemplateCall("action",[e1,e2],[]) ->
    %> 
       <h:commandButton value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
    
   elem-to-xhtml :
     Action(name, args, body) -> []
     
rules // helper rules for input    

  input-of-required-property(|e)=
    if <page-var-access-to-class-prop-tuple;PropertyIsRequired> e
    then
      !"true"   
    else
      !"false"   
    end
        
  get-type-of-right-side-field-access:
    FieldAccess(e, f){Type(SimpleSort(thetype))} -> thetype 
    
  page-var-access-to-class-prop-tuple :
    FieldAccess(e, f) -> (<get-type-of-right-side-field-access> e,f)    
     
rules // input

    // @todo configure requiredness of fields
    
    // @todo support different types of input based on type
    // maybe deal with that through desugaring, i.e., have more
    // specific inputX template calls
    
    // @todo also special support for Email, URL, Image 
    
  elem-to-xhtml :
    TemplateCall("input",[e],[]) ->
    %>
      <s:decorate>
        <h:inputText styleClass="inputText" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where warn(|["underived input element"])
        ; estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>
    
  elem-to-xhtml :
    TemplateCall("inputString",[e],[]) ->
    %>
      <s:decorate>
        <h:inputText styleClass="inputString" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>
    
    elem-to-xhtml :
      TemplateCall("inputWikiText",[e],[]) ->
      %>
        <s:decorate>
          <h:inputTextarea styleClass="inputTextarea" value="<%= estring %>" required="<%= req %>"/>
        </s:decorate>
      <%
      where estring := <arg-to-value-string> e
          ; req := <input-of-required-property(|e)>

  elem-to-xhtml :
    TemplateCall("inputEmail",[e],[]) ->
    %>
      <s:decorate>
        <h:inputText styleClass="inputEmail" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>
    // @todo validate email address
    
  elem-to-xhtml :
    TemplateCall("inputURL",[e],[]) ->
    %>
      <s:decorate>
        <h:inputText styleClass="inputURL" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>
    
    // @todo validate URL
    
  elem-to-xhtml :
    TemplateCall("inputImage",[e],[]) ->
    %>
      <s:decorate>
        <h:inputText styleClass="inputString" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>
    
    // @todo validate image
    
    // @todo upload real image file

  elem-to-xhtml :
    TemplateCall("inputInt",[e],[]) ->
    %>
      <s:decorate>
        <h:inputText styleClass="inputInt" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>

  elem-to-xhtml :
    TemplateCall("inputBool",[e],[]) ->
    %>
      <s:decorate>
        <h:selectBooleanCheckbox styleClass="inputBool" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>

  elem-to-xhtml :
    TemplateCall("inputText",[e],[]) ->
    %>
      <s:decorate>
        <h:inputTextarea styleClass="inputTextarea" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>
    
  elem-to-xhtml :
    TemplateCall("inputSecret",[e],[]) ->
    %>
      <s:decorate>
        <h:inputSecret styleClass="inputSecret" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>


  elem-to-xhtml :
    TemplateCall("inputFile",[e],[]) ->
    %>
      <div>
	    <s:fileUpload id="<%= label%>"
			data="#{<%= estring %>.data}"
			contentType="#{<%= estring %>.contenttype}"
			fileName="#{<%= estring %>.name}" required="<%= req %>"/>
      </div>
    <%
    where estring := <arg-to-el> e
        ; label := <newname> "inputFileId"
        ; req := <input-of-required-property(|e)>
    
  elem-to-xhtml =
    ?TemplateCall("inputBinary",[e],[])
    ; ![]
    
rules // output

  elem-to-xhtml :
    TemplateCall("output",[e],[]) ->
    %>
      <h:outputText styleClass="output" value="<%= estring %>"/>
    <%
    where warn(|["underived output element"])
        ; estring := <arg-to-value-string> e
    
  elem-to-xhtml :
    TemplateCall("outputString",[e],[]) ->
    %>
      <h:outputText styleClass="outputString" value="<%= estring %>"/>
    <%
    where estring := <arg-to-value-string> e

  elem-to-xhtml :
    TemplateCall("outputWikiText",[e],[]) ->
    %>
      <h:outputText styleClass="outputWikiText" value="#{wdsl:wikiFormat(<%= estring %>, '<%= <AppRoot> %>')}" escape="false" />
    <%
    where estring := <arg-to-el> e

  elem-to-xhtml :
    TemplateCall("outputInt",[e],[]) ->
    %>
      <h:outputText styleClass="outputInt" value="<%= estring %>"/>
    <%
    where estring := <arg-to-value-string> e

  elem-to-xhtml :
    TemplateCall("outputBool",[e],[]) ->
    %>
      <h:outputText styleClass="outputBool" value="<%= estring %>"/>
    <%
    where estring := <arg-to-value-string> e

  elem-to-xhtml :
    TemplateCall("outputText",[e],[]) ->
    %>
      <s:formattedText styleClass="outputTextarea" value="<%= estring %>"/>
    <%
    where estring := <arg-to-value-string> e
    
  elem-to-xhtml :
//    TemplateCall("outputSecret",[e],[]) ->
//    %>
//      <h:outputSecret styleClass="outputSecret" value="<%= estring %>"/>
//    <%
//    where estring := <arg-to-value-string> e
    TemplateCall("outputSecret", [e], []) ->
      [%>*******<%]
      // note: should be list of elements
    // @todo don't ouput secrets

  
  // @todo ouput byte[] length or construct download component
  elem-to-xhtml :
    TemplateCall("outputBinary",[e],[]) ->
    %>
      <h:outputText styleClass="outputBinary" value="#{<%= estring %>.length}"/>
    <%
    where estring := <arg-to-el> e
 //       ; info(|e)
 //       ; info(|estring)


rules // function stuff

   translate-condition :
     Define(mods, name, args, body1) -> Define(mods, name, args, body2)
     where <elem> (Page(), mods)
         ; {| Component
            : rules ( Component := name )
            ; body2 := <try(sometd(translate-condition))> body1
            |}

   translate-condition :
     def@Define(mods, name, args, body1) -> def
     where <elem> (Email(), mods)
         ; {| Component
	        : email_calls := <EmailCallList> name
	        ; definitions := <map(construct-email-definition(|def))> email_calls
	        ; rules ( EmailDefinitions : name -> definitions )
	        |}

   find-params =
     ?fa@FieldAccess(v, _){Type(_)}
     ; not(<IgnoreVars> v)
     ; rules( Param : l -> [fa|l] )

   find-params =
     ?v@Var(x){Type(vt)}
     ; not(<IgnoreVars> v)
     ; not("Component" := vt)
     ; rules( Param : l -> [v|l] )

   find-params = // Have to filter this one out later, but point is to ignore everything inside for-exps
     ?ForExp(oe, x, srt, ie, Filter(we, obe))
     ; {| IgnoreVars
        : rules ( IgnoreVars : Var(x) )
        ; <try(sometd(find-params))> we
        ; <try(sometd(find-params))> ie
        ; <try(sometd(find-params))> oe                
        |}

     
   translate-condition =
     ?IfTempl(e, elems1*)
     ; where (fn := <newname> "ifCondFun"
              ; {| Param
                 : <topdown(try(find-params))> e
                 ; params := <repeat(once-Param)> []
                 |}
              ; el := <concat-strings> ["#{", <Component>, ".", fn, "(", <map(arg-to-el); separate-by(|","); concat-strings> params, ")}"]
              ; pn := <Component>
              ; rules( ConditionExpressions :+ l -> [(pn, fn, params, e)|l]
                       ConditionExpressionToEL : (pn, e) -> el )
              ; <try(sometd(translate-condition))> elems1*)
    
   // Do the same iffy thing for for-loops (for the "where" clause)
   translate-condition =
     ?For(x, s, e, Filter(we, obe), elem1*)
     ; where (not(True() := we)
              ; fn := <newname> "forWhereCondFun"
              ; {| Param
                 : <topdown(try(find-params))> we
                 ; params := <repeat(once-Param)> []
                 |}
              ; el := <concat-strings> ["#{", <Component>, ".", fn, "(", <map(arg-to-el); separate-by(|","); concat-strings> params, ")}"]
              ; pn := <Component>
              ; rules( ConditionExpressions :+ l -> [(pn, fn, params, we)|l]
                       ConditionExpressionToEL : (pn, we) -> el )
              ; <try(sometd(translate-condition))> elem1*)
              
   translate-condition =
     ?ForAll(x, s, Filter(we, obe), elem1*)
     ; where (not(True() := we)
              ; fn := <newname> "forAllWhereCondFun"
              ; {| Param
                 : <try(sometd(find-params))> we
                 ; params := <repeat(once-Param)> []
                 |}
              ; el := <concat-strings> ["#{", <Component>, ".", fn, "(", <map(arg-to-el); separate-by(|","); concat-strings> params, ")}"]
              ; pn := <Component>
              ; rules( ConditionExpressions :+ l -> [(pn, fn, params, we)|l] 
                       ConditionExpressionToEL : (pn, we) -> el )
              ; elem2* := <try(sometd(translate-condition))> elem1*)
     

   unId : Id(x) -> x
  
   packagename-to-string :
     PackageName(parts) -> <map(unId); separate-by(|"."); concat-strings> parts
//
//   function-to-xml :
//     (fn, param*, e) ->
//     %>
//  <function>
//    <function-name><%= fn2 %></function-name>
//    <function-class><%= pkgname %>.TemplateFunctions</function-class>
//    <function-signature>boolean <%= fn2 %>(<%= params %>)</function-signature>
//  </function>
//    <%
//    where pkgname := Literal(<packagename-to-string> <Package>)
//        ; fn2 := Literal(fn)
//        ; params := Literal(<map(function-param-to-sig); separate-by(|","); concat-strings> param*)
//  
   functions-to-el =
     try(sometd(translate-condition))
     ; where (functions := <repeat(once-ConditionExpressions)> []
       ; rules ( AllTemplateFunctions := functions ))

//     ; oldapp := <id>
//     ; functions := <repeat(once-TranIf)> []
//     ; c := <template-functions-to-java> functions
//     ; info(|"Sending resulting function stuff back")
//     ; !(oldapp, c)
////     ; functiondefs := <map(function-to-xml); concat> functions
//     ; if [] := functions then
//         namespacedef := []
//       else
//         namespacedef := %> <namespace>http://www.webdsl.org/el</namespace> <%
//       end

   page-to-rewrite-rule =
     ?Define([Page()], x, args, body)
     ; p := Literal(x)
     ; if [] := args then
          !%>
     <rule>
       <from>/<%= p %>/?$</from>
      	<to>/<%= p %>.seam</to>
     </rule>
     <rule>
       <from>/<%= p %>/?\?(.*)$</from>
       <to>/<%= p %>.seam?$2</to>
     </rule>
     <%
       else
         Arg(fi, _) := <Hd> args
         ; first := Literal(fi)
         ; !%>
    <rule>
      <from>/<%= p %>/([^\?]+)$</from>
     	<to>/<%= p %>.seam?<%= first %>=$1</to>
    </rule>
    <rule>
      <from>/<%= p %>/([^\?]+)\?(.*)$</from>
      <to>/<%= p %>.seam?<%= first %>=$1&amp;$2</to>
    </rule>
    <%
      end

   pages-to-rewrite-rules =
     ?sections
     ; pagexmls := <collect(page-to-rewrite-rule); concat> sections
     ; x := XmlFile(["resources/WEB-INF"], "urlrewrite.xml", 
%>
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE urlrewrite PUBLIC "-//tuckey.org//DTD UrlRewrite 2.6//EN"
        "http://tuckey.org/res/dtds/urlrewrite2.6.dtd">
<urlrewrite>
<%= pagexmls ::*%>
</urlrewrite>
<%)
     ; !x

