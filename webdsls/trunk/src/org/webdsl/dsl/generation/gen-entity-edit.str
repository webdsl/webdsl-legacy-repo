module org/webdsl/dsl/generation/entities-to-view
      

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/generation/utils
  org/webdsl/dsl/generation/entity-to-java

rules    

  entity-to-edit-view : 
    EntityNoSuper(x_class, props) ->
    <entity-to-edit-view> Entity(x_class, "Object", props) 
    // @todo use some kind of forwarding mechanism for these type of definitions
  
  entity-to-edit-view : 
    Entity(x_class, x_super, props) -> XmlFile("view", <concat-strings>["edit", x_class, ".xhtml"], <xml-composition-wrap>
    %><ui:define name="body">
        <h1>
           <h:outputText rendered="#{!<%=x_class_home%>.managed}" value="Create <%= x_class %>" />
           <h:outputText rendered="#{<%=x_class_home%>.managed}"  value="Edit <%= x_class %>" />
        </h1>
        <h:messages globalOnly="true" styleClass="message"/>
        <h:form id="edit<%= x_class %>">
          <div class="dialog">
            <s:validateAll><%= tbl %></s:validateAll>
          </div>
          <div class="actionButtons">
            <s:link view="/view<%= x_class %>.xhtml" 
                    value="View <%= x_class %>"
                    rendered="#{<%=x_class_home%>.managed}"/>
            <h:commandButton value="Create <%=x_class%>" 
                             action="#{<%=x_class_home%>.persist}"
                             rendered="#{!<%=x_class_home%>.managed}"/>
            <h:commandButton value="Update <%=x_class%>" 
                             action="#{<%=x_class_home%>.update}"
                             rendered="#{<%=x_class_home%>.managed}"/>
            <h:commandButton value="Delete <%=x_class%>" 
                             action="#{<%=x_class_home%>.delete}"
                             rendered="#{<%=x_class_home%>.managed}"/>
          </div>
        </h:form>
      </ui:define><% )
    where x_component  := <decapitalize-string> x_class
        ; x_class_home := <concat-strings>[x_component, "Home"]
        ; tbl := <edit-form(|x_component)> props
                          
rules

  edit-form(|x_component) :
    props -> 
    %><h:panelGrid columns="2" border="0" cellpadding="5" cellspacing="3"><%= rows ::*%></h:panelGrid><%
    where rows := <edit-form-rows(|x_component)> props

  // create edit form for an entity; may also be a nested entity
  
  edit-form-rows(|x_component) =
    filter-concat-warn(row-in-edit-form(|x_component) | "cannot edit form row for property: ")

  // create a 'row in the edit form
  
  row-in-edit-form(|x_component)  :
    prop@Property(x_prop, k, s@SimpleSort(y), _) ->
    %><h:outputText value="<%=x_prop%>"/>
      <s:decorate><%= input %></s:decorate><%
    where input := <property-to-edit-component(|x_component)> prop
    
 rules
	    
  property-to-edit-component(|x_component) :
    Property(x_prop, k, s@SimpleSort("String"), _) -> 
    %><h:inputText for="<%=x_prop%>" 
                   id="<%=x_prop%>" 
                   required="true" 
                   value="#{<%=x_component%>.<%=x_prop%>}"/><%
   
  property-to-edit-component(|x_component) :
    Property(x_prop, k, s@SimpleSort("Text"), _) -> 
    %><h:inputTextArea for="<%=x_prop%>" 
                       id="<%=x_prop%>" 
                       required="true" 
                       value="#{<%=x_component%>.<%=x_prop%>}"/><%
       
  property-to-edit-component(|x_component) :
    Property(x_prop, k, s@SimpleSort("Secret"), _) -> 
    %><h:inputSecret for="<%=x_prop%>" 
                     id="<%=x_prop%>" 
                     required="true" 
                     value="#{<%=x_component%>.<%=x_prop%>}"/><%

  // composite association with defined type

  row-in-edit-form(|x_component)  :
    Property(x_prop, Comp(), s0@SimpleSort(s), _) -> 
    %><h:outputText value="<%=x_prop%>"/><h:panelGroup/><%= rows ::*%><%
    where <defined-java-type> s0
        ; debug(!"found a defined type: ")
        ; props := <properties> s
        ; debug(!"properties: ")
        ; x_sub_component := <concat-strings> [x_component, ".", x_prop]
        ; rows := <edit-form-rows(|x_sub_component)> props
       
   
   
 // done
     
  // todo specialize input component to the type of the property
  // for instance, for type Text a scrollable textarea should be generated
   
  // todo don't put properties for subfields in a subtable
