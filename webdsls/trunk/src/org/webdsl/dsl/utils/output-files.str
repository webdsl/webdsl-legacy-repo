module org/webdsl/dsl/utils/output-files
  
strategies

  output-generated-files(s) =
    if-pretty-printing(
      topdown(try(s))
    , <WriteToTextFile>("yyy", <id>)
    )

  output-generated-file-java =
    java-file-to-file

  output-generated-file-xml =
    xml-file-to-file

  output-webdsl =
    if-pretty-printing(
      output-webdsl-to-file,
      output(id)
    )
    ; <exit> 0
  
strategies

  /* Create a nested directory structure. Works on a
     list containing the directories to be created,
     returns the path to the last (innermost) directory
     Current working directory remains unchanged.

     @type List(String) -> String
  */

  create-dirs =
    where(root := <getcwd>)
  ; map((file-exists <+ mkdir(|"w")) ; chdir)
  ; getcwd // return path to innermost created dir.
    ; where (<chdir> root) // restore old cwd'

signature
  constructors
    TextFile : String * CompilationUnit -> File

strategies

  text-file-to-file =
    ?TextFile(name, text)
    ; where(
      file := <fopen> (name, "w")
      ; <fputs> (text, file)
      ; <fclose> file
    )

signature
  constructors
    JavaFile : List(String) * CompilationUnit -> File

strategies

  java-file-to-file =
    ? JavaFile(name, doc)
    ; (  java-file-to-text-file
      <+ <pp-format-checker-error(|"Internal error: generated Java AST is malformed", "Java-EBlock.rtg")> doc
      )

  //java-file-to-text-file :
  //  JavaFile(prefix, pkg, name, cu) -> TextFile(filename, text)
  //  where path := <conc; create-dirs> (prefix, <qid-to-list> pkg)
  //    ; filename := <concat-strings> [path, "/", name, ".java"]
  //	    ; text := <core-lift-eblocks; pp-java5-to-string> cu

  java-file-to-text-file :
    jf@JavaFile(prefix, cu) -> jf
    where pkg      := <package-name> cu
        ; name     := <class-name> cu
        ; path     := <conc; create-dirs> (prefix, pkg)
        ; filename := <concat-strings> [path, "/", name, ".java"]
        ; java     := <java-concat-ids; core-lift-eblocks> cu
        ; box      := <pp-java5-to-abox> java
        ; file     := <fopen> (filename, "w")
        ; <box2text-stream(|80, file)> box
        ; <fclose> file
      
  /* this works, but doesn't improve performance   
  disable-indentation =
      remove-box-indendation
    ; !H([SOpt(HS,"1")],<id>)
  remove-box-indendation:
    V(_,body) -> <remove-box-indendation-helper> body
  remove-box-indendation:
    H(_,body) -> <remove-box-indendation-helper> body
  remove-box-indendation-helper = map(try(remove-box-indendation)); flatten-list
  */
    
  package-name :
    CompilationUnit(Some(PackageDec(_, PackageName(ids))), _, _) -> xs
    where xs := <map(?Id(<id>))> ids

  package-name :
    CompilationUnit(None(), _, _) -> []

  class-name :
    CompilationUnit(_, _, [ClassDec(ClassDecHead(_,Id(x),_,_,_),_)|_]) -> x

  class-name :
    CompilationUnit(_, _, [InterfaceDec(InterfaceDecHead(_,Id(x),_,_),_)|_]) -> x

signature
  constructors
    XmlFile : String * String * Document -> File

strategies

  xml-file-to-file =
    xml-file-to-text-file
    ; try(text-file-to-file)

  xml-file-to-text-file :
    XmlFile(pkg, name, doc) -> TextFile(filename, text)
    where path     := <create-dirs> pkg
        ; filename := <concat-strings> [path, "/", name]
        ; xml      := <xml-doc2abox> doc
        ; text     := <box2text-string(|80)> xml
        <+ 
          <pp-format-checker-error(|"Internal error: generated XML AST is malformed", "xml-doc.rtg")> doc
   
   // TODO: Only dump ASTs if verbosity is 2; needs support for verbose parameter in webdsl script
   // TODO: Use rtg-format-check(true, true| <import-term of rtg.af>) instead
   pp-format-checker-error(|msg, rtg) =
      err-msg(|msg)
    ; write-to => FILE(file)
    ; try(<xtc-command(!"format-check")> ["--vis", "-i", file, "--rtg", <xtc-find> rtg | <pass-verbose>])
    ; log(|Critical(), "Fatal errors encountered in generated code")
    ; <xtc-exit> 1
     
   // TODO: use rtg library instead of xtcx
