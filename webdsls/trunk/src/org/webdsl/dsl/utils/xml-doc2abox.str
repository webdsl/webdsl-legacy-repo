module org/webdsl/dsl/utils/xml-doc2abox

imports 
  xml-doc 
  Box 
  libstratego-lib
  
strategies

  main-xml-doc2abox =
    io-wrap(xml-doc2abox)

  xml-doc2abox =
      topdown(try(repeat(xml-to-box)))

rules

  xml-to-box :
    Document(pro, e, epi) -> box |[ V vs=1 [ ~pro ~e ~epi ] ]|

  xml-to-box :
    Prologue(xmldec, miscs, doctype) -> box |[ V vs=0 [ ~*lines ] ]|
      where <concat> 
              [ <get-prolog-lines> xmldec
              , miscs
              , <get-prolog-lines> doctype ] => lines

      get-prolog-lines: Some(xmldec@XMLDecl(_, _, _)) -> [xmldec]
      get-prolog-lines: None() -> []
      get-prolog-lines: Some(DocTypePrologue(doctype, miscs)) -> [doctype | miscs]

// XMLDecl(VersionDecl(Version("1.0")),Some(EncodingDecl(Encoding("UTF-8"))),Some(StandaloneDecl(Standalone("no")))

  xml-to-box:
    Epilogue(miscs) ->  box |[ V vs=1 [ ~*miscs ] ]|

  xml-to-box:
    XMLDecl(version, encoding, standalone) -> box |[ H hs=1 [KW["<?xml"] ~*atts KW["?>"]] ]|
      where <filter(?Some(<id>))> [encoding, standalone] => atts1
          ; <map(decl-to-attribute)> [version | atts1] => atts

rules

  decl-to-attribute :
    StandaloneDecl(Standalone(value)) -> SimpleAttribute("standalone", value)

  decl-to-attribute :
    VersionDecl(Version(value)) -> SimpleAttribute("version", value)

  decl-to-attribute :
    EncodingDecl(Encoding(value)) -> SimpleAttribute("encoding", value)

overlays

  SimpleAttribute(name, value) =  Attribute(QName(None(), name), DoubleQuoted([Literal(value)]))

rules

  xml-to-box:
    DocTypePrologue(doctype, miscs) -> box |[ V vs=1 [ ~*[doctype | miscs] ] ]|

  xml-to-box:
    DocTypeDecl(n, ext) -> box |[ H hs=1 [KW["<!DOCTYPE"] ~n ~ext KW[">"]] ]|
  
  xml-to-box:
    SystemExternalID(n) -> box |[ H hs=1 [KW["SYSTEM"] ~lit:<double-quote> n] ]|

  xml-to-box:
    PublicExternalID(n1, n2) -> box |[ H hs=1 [KW["PUBLIC"] ~lit:<double-quote> n1 ~lit:<double-quote> n2 ] ]|

  xml-to-box:
    PI(n, data) -> box |[ H hs=1 [KW["<?"] ~lit:n ~lit:data KW["?>"]] ]|

  xml-to-box: Comment(cdata)       -> box |[ C[ ~lit:cdata ] ]|
  xml-to-box: Text(parts)          -> box |[ H hs=0 [~*parts ] ]|
  xml-to-box: CDATASection(cdata)  -> box |[ H hs=0 [ "<![CDATA[" ~lit:cdata "]]>"] ]|
  xml-to-box: EntityRef(ncname)    -> box |[ H hs=0 [ "&" ~lit:ncname ";"] ]|
  xml-to-box: Literal(cdata)       -> box |[ ~lit:cdata ]|

  xml-to-box =
    simple-element-to-box <+ element-to-box

  simple-element-to-box:
    EmptyElement(qname, []) -> box |[ H hs=0 [KW["<"] ~qname KW["/>"]] ]|

  element-to-box:
    EmptyElement(qname, atts) -> box |[ H hs=0 [KW["<"] H hs=1 [~qname ~*atts ] KW["/>"]] ]|

/*
  simple-element-to-box:
    Element(qname, atts, [Text(cdata)], _) -> box |[ H hs=0 [ ~open-tag ~lit:cdata  KW["</"] ~qname KW[">"]] ]|
//      where <lt> (<string-length> cdata, 60)
          where <open-tag-to-box> (qname, atts) => open-tag
  */


  element-to-box:
    Element(qname, atts, children, _) ->
      box |[ H hs=0 [~open-tag  ~*children KW["</"] ~qname KW[">"]] ]|
        where <open-tag-to-box> (qname, atts) => open-tag
    
/*   
  beauty-element-to-box:
    Element(qname, atts, children, _) ->
      box |[ V vs=0 [
        V is=2 vs=0 [
          ~open-tag
          ~*children
        ]
        H hs=0 [KW["</"] ~qname KW[">"]]
      ] ]|
    where <open-tag-to-box> (qname, atts) => open-tag
*/
        open-tag-to-box:
          (qname, []) -> box |[ H hs=0 [KW["<"] ~qname KW[">"]] ]|
      
        open-tag-to-box:
          (qname, atts) -> box |[ H hs=0 [KW["<"] H hs=1 [ ~qname ~*atts ] KW[">"]] ]|
            where <gt> (<length> atts, 0)
      
  xml-to-box :
    Attribute(qname, value) -> box |[ H hs=0 [~qname KW["="] ~value] ]|

  xml-to-box :
    DoubleQuoted(parts) -> box |[ H hs=0 ["\"" ~*parts "\""] ]|

  xml-to-box :
    SingleQuoted(parts) -> box |[ H hs=0 ["\'" ~*parts "\'"] ]|


  xml-to-box:
    QName(None(), n) -> box |[ KW[ ~lit:n ] ]|

  xml-to-box:
    QName(Some(Prefix(p)), n) -> box |[ H hs=0 [~lit:p KW[":"] ~lit:n] ]|
