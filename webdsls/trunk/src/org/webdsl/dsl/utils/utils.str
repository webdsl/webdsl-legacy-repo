module org/webdsl/dsl/utils/utils

imports
  libstrategolib
  //Java-15
  libjava-front
  libstratego-gpp
  libstratego-xtc // TODO: XTC detox

imports
  org/webdsl/dsl/utils/xml-doc2abox

strategies

  info(|msg) = log(|Info(), msg)

strategies

  filter-warn(s | msg) =
    filter(s <+ notice(|msg); <exit> 1)

  filter-concat-warn(s | msg) =
    filter(s; if not(is-list) then notice(|"should be a list: "); fail end <+ notice(|msg); fail); concat

  concat-with-sublists=
    foldr(![], (is-list, id) < conc + MkCons)   
  
strategies

  capitalize-string =
    explode-string
    ; [to-upper | id]
    ; implode-string

  decapitalize-string =
    explode-string
    ; [to-lower | id]
    ; implode-string

  list-to-separated-string(|separator) =
    ?[head|tail]; where (not(<?[]> tail))
    ; !<concat-strings> [head, separator, <list-to-separated-string(|separator)> tail]

  list-to-separated-string(|separator) =
    ?[head]; !head

  make-human-readable =
    explode-string
    ; make-human-readable-internal
    ; concat
    ; implode-string
    ; if string-starts-with(|" ") then
        explode-string
        ; Tl
        ; implode-string
      end
    ; capitalize-string

  make-human-readable-internal :
    [f|r] -> [[f]|<make-human-readable-internal> r]
    where <not(is-upper)> f

  make-human-readable-internal :
    [F|r] -> [[' ', f]|<make-human-readable-internal> r]
    where <is-upper> F
        ; f := <to-lower> F

  make-human-readable-internal :
    [] -> []

strategies // do-once is applied on the same term only once for each action

  do-once(s|action) = 
    ?elem
    ; not(<DoneOnce> (action, elem))
    ; s
    ; rules( DoneOnce : (action, elem) )
    
strategies // print a pretty-printed aterm

  pp-aterm =
    where(write-to => FILE(file);<xtc-command(!"pp-aterm")> ["-i", file | <pass-verbose>])

  pp-aterm(|msg) =
    where(<debug> msg)
  ; pp-aterm
  
  pp-aterm(msg) =
    where(msg; debug)
  ; pp-aterm
  
  pp-aterm(|msg1,msg2) = 
    where(<debug> msg1)
  ; pp-aterm(|msg2)
    
rules 
  find-doubles :
    [] -> []

  find-doubles :
    [a|k] -> <find-doubles> k
    where not(<elem> (a, k))

  find-doubles :
    [a|k] -> [a|<find-doubles> k]
    where <elem> (a, k)
    

strategies
  // @TODO: Take scopes into account (see POPL course)

  rename-var(|from, to) =
    topdown(try(rename-var-aux(|from, to)))

  rename-var-aux(|from, to) :
    Var(from) -> Var(to)

  rename-var-aux(|from, to) :
    Qualified(from, f) -> Qualified(to, f)

  rename-var-aux(|from, to) :
    Assignment(from, e) -> Assignment(to, e)

rules //concatenates a list of java expressions to a single expression using the + operator (useful for string or numeric expressions)
  generate-addition-exp :
    [x|xs] ->  e|[ e0 + e1 ]|
    where not([] := xs)
        ; e0 := x
        ; e1 := <generate-addition-exp> xs

  generate-addition-exp :
    [e0] -> e|[ e0 ]|
    
  generate-addition-exp :
    [] -> e|[ "" ]|
    
