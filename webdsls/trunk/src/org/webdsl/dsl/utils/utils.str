module org/webdsl/dsl/utils/utils

imports
  libstrategolib
  //Java-15
  libjava-front
  libstratego-gpp

imports
  org/webdsl/dsl/utils/xml-doc2abox
  org/webdsl/dsl/utils/core-lift-eblocks
  org/webdsl/dsl/utils/java-concat-ids

strategies

  filter-warn(s | msg) =
    filter(s <+ notice(|msg); fail)

  filter-concat-warn(s | msg) =
    filter(s; if not(is-list) then notice(|"should be a list: "); fail end <+ notice(|msg); fail); concat

strategies

  /* Create a nested directory structure. Works on a
     list containing the directories to be created,
     returns the path to the last (innermost) directory
     Current working directory remains unchanged.

     @type List(String) -> String
  */

  create-dirs =
    where(root := <getcwd>)
  ; map((file-exists <+ mkdir(|"w")) ; chdir)
  ; getcwd // return path to innermost created dir.
    ; where (<chdir> root) // restore old cwd'

  capitalize-string =
    explode-string
    ; [to-upper | id]
    ; implode-string

  decapitalize-string =
    explode-string
    ; [to-lower | id]
    ; implode-string

  list-to-comma-separated-strings =
    ?[head|tail]
    ; !<flatten-list; concat-strings> [<double-quote> head, <map(\ str -> <concat-strings> [", ", <double-quote> str] \)> tail]

  list-to-comma-separated-strings =
    ?[head] ; !<double-quote> head

signature
  constructors
    TextFile : String * CompilationUnit -> File

strategies

  text-file-to-file =
    ?TextFile(name, text)
    ; where(
      file := <fopen> (name, "w")
      ; <fputs> (text, file)
      ; <fclose> file
    )

signature
  constructors
    JavaFile : List(String) * CompilationUnit -> File

strategies

  java-file-to-file =
    ? JavaFile(name, _)
    ; (
        java-file-to-text-file
        ; text-file-to-file
      <+
        //try(?JavaFile(_, <class-name>));
        warn(|"Internal error: failed to output Java file")
      )

  //java-file-to-text-file :
  //  JavaFile(prefix, pkg, name, cu) -> TextFile(filename, text)
  //  where path := <conc; create-dirs> (prefix, <qid-to-list> pkg)
  //    ; filename := <concat-strings> [path, "/", name, ".java"]
  //	    ; text := <core-lift-eblocks; pp-java5-to-string> cu

  java-file-to-text-file :
    JavaFile(prefix, cu) -> TextFile(filename, text)
    where pkg := <package-name> cu
        ; name := <class-name> cu
        ; path := <conc; create-dirs> (prefix, pkg)
        ; filename := <concat-strings> [path, "/", name, ".java"]
        ; java := <java-concat-ids; core-lift-eblocks> cu
        ; text := <pp-java5-to-string> java

  package-name :
    CompilationUnit(Some(PackageDec(_, PackageName(ids))), _, _) -> xs
    where xs := <map(?Id(<id>))> ids

  package-name :
    CompilationUnit(None(), _, _) -> []

  class-name :
    CompilationUnit(_, _, [ClassDec(ClassDecHead(_,Id(x),_,_,_),_)|_]) -> x

  class-name :
    CompilationUnit(_, _, [InterfaceDec(InterfaceDecHead(_,Id(x),_,_),_)|_]) -> x

signature
  constructors
    XmlFile : String * String * Document -> File

strategies

  xml-file-to-file =
    xml-file-to-text-file
    ; try(text-file-to-file)

  xml-file-to-text-file :
    XmlFile(pkg, name, doc) -> TextFile(filename, text)
    where path := <create-dirs> pkg
      ; filename := <concat-strings> [path, "/", name]
      ; text := <xml-doc2abox; box2text-string(|80) <+ write-to-string> doc
