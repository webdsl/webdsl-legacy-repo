module org/webdsl/dsl/utils/stage

imports
  libstrategolib

strategies

  stage(s|msg) = {| StageNewLinePrinted:
    rules( Stage := <Stage; inc> )
  ; where(stagemsg := <concat-strings>["stage ", <Stage;int-to-string>, ": ", <try(is-list;concat-strings)> msg])
  ; print-stage(|stagemsg)
  ; log-timed(s|stagemsg)
  ; if <geq>(<Stage>, <OptionStage>) then output-webdsl end
  |}
  
  stage-newline-once =
    where(try(not(StageNewLinePrinted); <debug> ""; rules(StageNewLinePrinted := True())))
  
  print-stage(|msg) =
    where(
      verbose-1(<concat-strings ; log-puts> ["[ ", <log-src>, " | ",  <severity-string> Info(), " ] ", msg ])
    )
  
  print-stage-time(|msg) =
    where(verbose-1(
      <log-puts> msg
    ; <log-puts> "\n"
    ))
  
  /**
   *  from stratego compiler source /strc-core/lib/stratego/strc/strc/strc.str
   */
  log-timed(s|msg)=//|msg,level) =
    //if <geq>(<get-config> "--statistics", level) then
      where(times => starttime)
    ; s
    ; where(
        <diff-times>(<times>,starttime)
      ; <concat-strings>[ //<align-left>(' ', msg, 27)
                          <align-helper(|' ', 29)> msg
                        , " : [user/system] = ["
                        , <self-children-user-time; ticks-to-seconds ; real-to-string(|2)>
                        , "s/"
                        , <self-children-sys-time; ticks-to-seconds ; real-to-string(|2)>
                        , "s]"
                        ]
      ; print-stage-time(|<id>)
      )
    //else
    //  s
    //end
   
  /**
   *  Helper strategy for finding performance bottlenecks
   */  
  log-time(s|msg)=
    if-statistics(log-time-helper(s|msg),s)
  
  log-time-helper(s|msg)=
    {| LogTimeSection :
      where(enclosingsection := <LogTimeSection <+ !None()>)
    ; rules(LogTimeSection := msg )
    ; where(times => starttime)
    ; s
    ; where(
        <diff-times>(<times>,starttime)
      ; ?time
      ; oldtime := <LogTime <+ !(0,0,0,0)> msg
      ; newtime := <add-times> (time, oldtime)
      ; rules( LogTime : msg -> newtime )
        // Be careful not to create a new rule for each log-time call
      ; where(
          None() := enclosingsection; try(not(<LogTimesKey> msg); rules( LogTimesKey :+= msg ))
        <+ !(enclosingsection, msg); try(not(LogTimesKeySection); ?pair; rules(LogTimesKeySection :+= pair)))
      )
    |}
      
  print-total-log-time =
    where(reverse-bagof-LogTimesKey(id); map(print-total-log-time-helper(|"")))
    ; rules(LogTimesKey :- _)
    ; rules(LogTime :- _)
    ; rules(LogTimesKeySection :- _)    
    
  print-total-log-time-helper(|prefix) :
    x -> <concat-strings;debug;<print-total-log-time-subsections(|prefix)> x> [prefix,res]
    where total := <LogTime> x    // where: after calling print-total-log-time, LogTime is undefined
    with  t1 := <self-children-user-time; ticks-to-seconds; real-to-string(|2)> total
        ; t2 := <self-children-sys-time; ticks-to-seconds; real-to-string(|2)> total
        ; msg := <concat-strings> ["total time ",x]
        ; res := <concat-strings> [msg,<align-helper(|' ', 29)> msg,": [user/system] =  ","[",t1,"s/",t2,"s]"]
        
  print-total-log-time-subsections(|prefix): x -> x
    with  reverse-bagof-LogTimesKeySection(id); filter(?(x,<id>))
        ; map(print-total-log-time-helper(|<concat-strings> ["  ",prefix]))
            