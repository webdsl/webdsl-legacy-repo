module org/webdsl/dsl/utils/compiler-options

imports
  libstrategolib

strategies

  set-appname = where(id
      ; path := <path-of-xtc-file>
      ; (appname, _) := <split-before> (<base-filename> path, ".app")
      ; dirname := <dirname> path
      ; rules ( AppName := appname )
      ; rules ( DirName := dirname )
    )

strategies // command-line options

  set-default-config =
    rules(
      OptionTypecheck := True()
      Stage           := 0
    )

  webdslc-options =
    set-default-config
    ; (python-backend-option
    <+ java-servlet-backend-option
    <+ stage-option
    <+ session-timeout-option
    <+ webdsl-verbose-option
    <+ disable-typecheck-option
    <+ only-typecheck-option
    <+ extra-typecheck-option
    <+ disable-pretty-print-option
    <+ fast-pretty-print-option
    <+ webdsl-statistics-option    
    <+ webdsl-debug-option
    <+ webdsl-test-option
    <+ webdsl-version-option
    )
    ;set-default-config-workaround
    
  set-default-config-workaround = //TODO: verbosity default in set-default-config was not being overwritten, stratego bug?
    if not(VerbosityLevel) then
    rules(
      VerbosityLevel  := 1
    ) end
    
  // @todo check that verbosity and logging is supported by stratego-lib

  // @todo code for option definition is too boilerplate

strategies // desugaring
  
  python-backend-option =
    Option("--python"
    , rules( PythonBackend := True() )
    , !HelpString("--python", "Use Python back-end.")
    )
    
  java-servlet-backend-option =
    Option("--servlet"
    , rules(JavaServletBackend := True())
    , !HelpString("--servlet", "Use Java Servlet back-end.")
    )

  webdsl-debug-option =
    Option("--debug"
    , rules ( WebDSLDebug := True() )
    , !HelpString("--debug", "Enable debug info during execution of the web application")
    )  
    
  if-debug(s) = if where(WebDSLDebug) then s end    
    
  session-timeout-option =
    ArgOption("--session-timeout"
    , ?time; rules( SessionTimeout := time )
    , !HelpString("--session-timeout n", "Set session timeout to n minutes")
    )

  stage-option =
    ArgOption("--stop-after"
    , ?stage; rules( OptionStage := <string-to-int> stage )
    , !HelpString("--stop-after n", "Stop after stage n")
    )
    
strategies

  webdsl-test-option =
    Option("--test"
    , rules ( WebDSLTest := True() )
    , !HelpString("--test", "Set up application for local testing")
    )  
    
  if-test(s) = if where(WebDSLTest) then s end
    
  if-test : content -> result
    with  if WebDSLTest
          then result := content 
          else result := []
          end 
          
  if-not-test: content -> result
    with  if not(WebDSLTest)
          then result := content 
          else result := []
          end 

strategies //verbosity

  webdsl-verbose-option =
    ArgOption("--verbose"
    , ?level; rules( VerbosityLevel := <string-to-int> level )
    , !HelpString("--verbose n", "Set verbosity level, 0: show only errors, 1: show phase times and errors (default), 2: show all")
    ) 

  verbose-1(s) = if where(<geq> (<VerbosityLevel>, 1)) then s end
  verbose-2(s) = if where(<geq> (<VerbosityLevel>, 2)) then s end
  is-verbose-2 = <geq> (<VerbosityLevel>, 2)

strategies //no pretty printing

  disable-pretty-print-option =
    Option("--no-pretty-printing" + "--no-pp"
    , disable-pretty-printing
    , !HelpString("--no-pretty-printing | --no-pp", "Do not pretty-print")
    )

  disable-pretty-printing =
    rules( OptionPrettyPrinting := False() )

  if-pretty-printing(s1, s2) =
    if not(OptionPrettyPrinting => False()) then s1 else s2 end
    
strategies //fast pretty printing

  fast-pretty-print-option =
    Option("--fast-pretty-printing" + "--fast-pp"
    , fast-pretty-printing
    , !HelpString("--fast-pretty-printing | --fast-pp", "pretty-print ugly and fast")
    )

  fast-pretty-printing =
    rules( OptionFastPrettyPrinting := True() )

  if-fast-pretty-printing(s1, s2) =
    if OptionFastPrettyPrinting => True() then s1 else s2 end
    
strategies //statistics

  webdsl-statistics-option =
    Option("--statistics"
    , show-statistics
    , !HelpString("--statistics", "show detailed time statistics")
    )

  show-statistics =
    rules( OptionStatistics := True() )

  if-statistics(s1, s2) =
    if OptionStatistics => True() then s1 else s2 end
    
strategies //no typechecking   
  
  disable-typecheck-option =
    Option("--no-typechecking"
    , disable-typechecking
    , !HelpString("--no-typechecking", "Ignore all type errors")
    )

  disable-typechecking =
    rules( OptionTypecheck := False() )

  if-typechecking(s1, s2) =
    if OptionTypecheck => True() then s1 else s2 end
    
strategies //only typechecking   
  
  only-typecheck-option =
    Option("--typecheck"
    , only-typechecking
    , !HelpString("--typecheck", "Perform only typechecking, useful for editor support")
    )

  only-typechecking =
    rules( OptionOnlyTypecheck := True() )

  if-only-typechecking(s1, s2) =
    if OptionOnlyTypecheck => True() then s1 else s2 end
  if-only-typechecking(s1) =
    if OptionOnlyTypecheck => True() then s1 end

strategies //extra typechecking after model-to-model
  
  extra-typecheck-option =
    Option("--extra-typecheck"
    , extra-typechecking
    , !HelpString("--extra-typecheck", "Perform typechecking after model-to-model transformations")
    )

  extra-typechecking =
    rules( OptionExtraTypecheck := True() )

  if-extra-typechecking(s1, s2) =
    if OptionExtraTypecheck => True() then s1 else s2 end
  if-extra-typechecking(s1) =
    if OptionExtraTypecheck => True() then s1 end  
      
strategies
  
  webdsl-version-option =
    Option("--version"
    , rules(WebDSLShowVersion := <get-webdsl-version>)
    , !HelpString("--version", "Show WebDSL version")
    )
    
  get-webdsl-version = PACKAGE-VERSION-TERM
  
  external PACKAGE-VERSION-TERM(|)
  