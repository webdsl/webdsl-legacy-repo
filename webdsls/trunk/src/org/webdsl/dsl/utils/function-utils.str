module org/webdsl/dsl/languages/data-model/function-utils

  /**
   *  generic function rules/strategies (work on all function constructor variants)
   */
  rules 
      
    is-function-cons = ?Function(_, _, _, _)
    is-function-cons = ?FunctionNoReturn(_, _, _)
    is-function-cons = ?Predicate(_, _, _)
    is-function-cons = ?NativeFunction(_, _, _)
    
    // includes argument names and return types
    get-function-sig-full : Function(f, args, sort, body) -> (f,args,sort)
    get-function-sig-full : FunctionNoReturn(f, args, body) -> (f,args,SimpleSort("Void"))
    get-function-sig-full : Predicate(f, args, body) -> (f,args,SimpleSort("Bool"))
    get-function-sig-full : NativeFunction(x,farg,returntype) -> (x,farg,returntype)
    
    is-extend-function-cons = ?ExtendFunction(_) //wraps around the other function constructors
      
    extract-function-sig = 
       \Function(x,farg,_,_) -> (x, <map(farg-to-type)> farg)\
    <+ \FunctionNoReturn(x,farg,_) -> (x, <map(farg-to-type)> farg)\
    <+ \Predicate(x,farg,_) -> (x, <map(farg-to-type)> farg)\
    <+ \NativeFunction(x,farg,_) -> (x, <map(farg-to-type)> farg)\
    
    farg-to-name = ?Arg(<id>,_)
    farg-to-type = ?Arg(_,<id>)
  
    sig-to-lower: (name,args) -> (<lower-case> name, args)
     
    pp-func-sig = ?(x,argtypes); <concat-strings> [x,"(",<map(pp-webdsl-to-string);separate-by(|", ");concat-strings> argtypes,")"]
    pp-func-sig = ?(x,argtypes,returntype); <concat-strings> [x,"(",<map(pp-webdsl-to-string);separate-by(|", ");concat-strings> argtypes,")",<?SimpleSort("Void");!"" <+ !$[:[<pp-webdsl-to-string>]]> returntype]

