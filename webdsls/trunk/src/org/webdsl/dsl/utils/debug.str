/**
 * Debugging strategies, originally defined in dryad-compiler/lib-ext/debug.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/webdsl/dsl/generation/utils/debug // dryad-compiler/lib-ext/debug

imports
  libstratego-lib

overlays
  MAX_TINY_LIST_PARTS         = 3
  MAX_TINY_LIST_PARTS_1       = 4 // += 1
  MAX_TINY_LIST_PARTS_COMMAS  = 6 // *= 2

strategies

  /**
   * Writes a message to the standard output, without failing or changing the current term.
   * Only executed if the verbosity level is 2.
   */
  verbose-msg(a) =
    where(if-verbose2(<debug> <as-string(a)>))

  verbose-msg(a, b) =
    where(if-verbose2(<verbose-msg> [<as-string(a)>, <as-string(b)>]))

  verbose-msg(a, b, c) =
    where(if-verbose2(<verbose-msg> [<as-string(a)>, <as-string(b)>, <as-string(c)>]))

  verbose-msg(a, b, c, d) =
    where(if-verbose2(<verbose-msg> [<as-string(a)>, <as-string(b)>, <as-string(c)>,
                      <as-string(d)>]))

  verbose-msg(a, b, c, d, e) =
    where(if-verbose2(<verbose-msg> [<as-string(a)>, <as-string(b)>, <as-string(c)>,
                     <as-string(d)>, <as-string(e)>]))

  verbose-msg(a, b, c, d, e, f) =
    where(if-verbose2(<verbose-msg> [<as-string(a)>, <as-string(b)>, <as-string(c)>,
                     <as-string(d)>, <as-string(e)>, <as-string(f)>]))

  as-string(s) = s; as-string <+ !"<?>"

  as-string = is-string <+ write-to-string

  verbose-msg = 
    if-verbose2(
      map(is-string <+ write-to-string);
      separate-by(|" ");
      concat-strings;
      debug
    )
  
  with(s) = where(verify(s, !"Internal error: with clause failed unexpectedly"))

  verify(s) =
    ?input; verify(s, !"Internal error: failure unexpected")

  verify(s,message) =
    s
  <+
    log(|Critical(), <as-string(message)>, <id>);
    prim("SSL_stacktrace_get_all_frame_names");
    report-failure

  verify(s,m1,m2) =
    verify(s, <conc-strings> (<as-string(m1)>, " ", <as-string(m2)>))

  verify(s,m1,m2,m3) =
    verify(s, <conc-strings> (<as-string(m1)>, " ", <as-string(m2)>, " ", <as-string(m3)>))

  /**
   * Same as debug, but prints a abbreviated representation of the ATerm.
   * @see to-tiny-string
   */
  tiny-debug =
    where(to-tiny-string; debug)
  
  tiny-debug(prefix) = 
    where(<conc-strings; debug> (<as-string(prefix)>, <to-tiny-string>))
  to-tiny-string =
    to-tiny-list;    
    <conc-strings> ("[", <concat-strings>, "]")
  <+
    ?name#(<id>);
    if [] + () then
      <strip-annos; as-string> name
    else
      to-tiny-list;      
      <conc-strings> (name, "(", <concat-strings>, ")")
    end

  to-tiny-list =
    where(
      try(
        overflow-by-one := <length => MAX_TINY_LIST_PARTS_1()>
      <+
        overflow := <gt> (<length>, MAX_TINY_LIST_PARTS())
      )
    );
    try(take(|MAX_TINY_LIST_PARTS()));
    
    map(to-tiny-substring);
    separate-by(|",");      

    switch id
      case !overflow-by-one:
        <conc> (<id>, [",_"])
      case !overflow:
        <conc> (<id>, [",.."])
      otherwise:
        id
    end

  to-tiny-substring =
     [id]; !"[_]"
  <+ Hd; !"[..]"
  <+ Fst; !"(..)"
  <+ (); !"()"
  <+ []; !"[]"
  <+ strip-annos; ?<as-string>#(_)

  print-stacktrace =
    where(
      prim("SSL_stacktrace_get_all_frame_names");
      try(\["print_stacktrace_0_0" | tail] -> tail\);
      reverse;
      map(<fprintnl> (stderr(), ["\t", <id>]))
    )
