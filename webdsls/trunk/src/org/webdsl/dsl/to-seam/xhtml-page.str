module org/webdsl/dsl/to-seam/xhtml-page

imports
  libstrategolib

imports
  libwebdsl-front

rules

  page-to-xml :
    def@Define([Page()], x, args, elems1) ->
    XmlFile(["view"], <concat-strings>[x, ".xhtml"],
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:c="http://java.sun.com/jstl/core"
      xmlns:s="http://jboss.com/products/seam/taglib"
      xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
      xmlns:t="http://myfaces.apache.org/tomahawk"
      xmlns:rich="http://richfaces.ajax4jsf.org/rich"
      xmlns:wdsl="http://www.webdsl.org/el">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <title><%= title ::*%></title>
    <%= style-includes::* %>
    <%= external-style::* %>
    <%= script-includes::* %>
    <%= js-onload::* %>
</head>
<body><%= elems2 ::*%></body>
</html>
<%)
  where {| Component, StylesheetIncludes, JavascriptIncludes, JSOnloadBody
         : rules( Component := x )
         ; rules ( StylesheetIncludes := ["webdsl.css"] )
         ; rules ( JavascriptIncludes := [] )
         ; title := <get-title> elems1
         ; external-style := <get-style> elems1
         ; elems2 := <elems-to-xhtml> elems1
         ; style-includes := <mapconcat(css-include-to-xhtml)> <StylesheetIncludes>
         ; script-includes := <mapconcat(js-include-to-xhtml)> <JavascriptIncludes>
         ; js-onload := <js-onload-to-xhtml>

/* <!--[if lte IE 7]>
  <style>
    .menuwrapper, #p7menubar ul a {height: 1%;}
    a:active {width: auto;}
  </style>
   <![endif]--> */

         |}

  // Generate a list of all pages in the application
  generate-page-list =
  ?Application(qid, sections)
      ; list := <collect(extract-page-name)> sections
    ; rules (page-list := list)

  // Extract the page name from a page
  extract-page-name :
    Define([Page()], x, args, elems1) -> x

  // Generate the pages.xml file with all the page actions
  generate-page-actions-file =
  page-actions := <map(generate-page-action); concat> <page-list>
    ; !XmlFile(["resources/WEB-INF"], "pages.xml",
      %>
        <?xml version="1.0" ?>
        <!DOCTYPE page PUBLIC
        "-//JBoss/Seam Pages Configuration DTD 1.2//EN" "http://jboss.com/products/seam/pages-2.0.dtd">
        <pages>
          <%= page-actions ::*%>
        </pages>
      <%)

  // Generate a page action to force bean initialization before
  // rendering a page.
  generate-page-action :
    x ->
      %>
        <page view-id="<%=viewid%>" action="#{<%=pageaction%>}">
          <%= page-parameters::* %>
        </page>
      <%
    where viewid := <concat-strings>["/", x, ".xhtml"]
        ; pageaction := <concat-strings>[x, ".forceInitialization()"]
        ; page-parameters := <mapconcat(arg-for-page-action(|x))> <TemplateArguments> x

  arg-for-page-action(|page) :
    Arg(i, s) -> %> <param name="<%= e1 %>" value="#{<%= page%>.<%= e1%>}" /> <%
    where <defined-java-type> s
        ; e1 := <concat-strings>[i, "_id"]

  arg-for-page-action(|page) :
    Arg(e, s) -> %> <param name="<%= e %>" value="#{<%= page%>.<%= e%>}" /> <%
    where <builtin-java-type> s

rules

  css-include-to-xhtml :
    e ->
    %>
      <link href="<%= <AppRoot> %>/stylesheets/<%= e %>" rel="stylesheet" type="text/css" />
    <%

  js-include-to-xhtml :
    e ->
    %>
      <script src="<%= <AppRoot> %>/javascript/<%= e %>" type="text/javascript" />
    <%

  js-onload-to-xhtml =
    !%>
    <script type="text/javascript">
      window.onload = function () {
        <%= <JSOnloadBody <+ ![]>::* %>
      }
    </script>
    <%

  // @todo this should be made more configurable probably

rules // embedding expressions in presentation

  // @todo escape < into &lt; and > to &gt;

  arg-to-value-string =
    arg-string-to-value-string
    <+ arg-to-el-string

  arg-string-to-value-string :
    Cast(x, s) -> <arg-to-value-string> x

  arg-string-to-value-string :
    String(x) -> x

//  arg-string-to-value-string :
//    Email(x) -> x

  arg-string-to-value-string :
    Bool(x) -> x

  arg-to-el-string :
    e -> <concat-strings>["#{", x, "}"]
    where <not(?Add(_, _))> := e
        ; x := <arg-to-el> e

  arg-to-el-string :
    Add(e1, e2) -> <concat-strings> [a, b]
    where a := <arg-to-value-string> e1
        ; b := <arg-to-value-string> e2

  arg-to-el :
    Var(x) -> <concat-strings> [<Component>,".",x]
      where <IsSessionVariable> x

  arg-to-el :
    Var(x) -> <concat-strings> [<Component>,".",x]
      where <IsGlobal> x

  arg-to-el :
    Cast(x, s) -> <arg-to-el> x

  arg-to-el :
    Var(x) -> x
       where not(<IsSessionVariable> x)
           ; not(<IsGlobal> x)

  arg-to-el :
    FieldAccess(e, f) -> <concat-strings>[x, ".", f]
    where not("length" := f)
        ; x := <arg-to-el> e

  arg-to-el :
    FieldAccess(e, "length") -> <concat-strings>[x, "Length"]
    where x := <arg-to-el> e


  arg-to-el : // Does this actually work?
    Call(e, f, args1) -> <concat-strings>[<arg-to-el> e, ".", f, "(", args2, ")"]
    where args2 := <map(arg-to-el); separate-by(|","); concat-strings> args1

strategies // lists of elements

  elems-to-xhtml =
    filter-concat-warn(elem-to-xhtml <+ undefined-template-call | "elem-to-xhtml undefined: ")

  elems-to-xhtml(wrap) =
    filter-concat-warn((elem-to-xhtml <+ undefined-template-call); wrap | "elem-to-xhtml undefined: ")

  undefined-template-call :
    t@TemplateCall(f, args, body) -> []
    where log(|Warning(), ["no definition for template ", t])

strategies // title

  get-title =
    fetch-elem(?TemplateCall("title", [], <id>))
    ; elems-to-xhtml
    <+ ![]

  // ignore title when rendering body of a page

  elem-to-xhtml :
    TemplateCall("title", _, _) -> []

strategies // style

  get-style =
    fetch-elem(?TemplateCall("style", [], [Text(stylesheet)]))
    ; !%>
         <link href="<%= <AppRoot> %>/stylesheets/<%= stylesheet %>" rel="stylesheet" type="text/css" />
       <%
    <+ ![]

  elem-to-xhtml :
    TemplateCall("style", _, _) -> []


rules // ugly hack: @todo: fixme!!!!!
  elem-to-xhtml :
    TemplateCall("dummy", [], elems) -> <elems-to-xhtml> elems

rules // div

  // @obsolete; use block{ ... } instead of div{ ... }

  elem-to-xhtml :
    TemplateCall("div", [String(x)], elems) ->
    %>
    <div class="<%= x %>"><%= <elems-to-xhtml> elems ::*%></div>
    <%

  elem-to-xhtml :
    TemplateCall("block", [], elems) ->
    %>
    <div><%= <elems-to-xhtml> elems ::*%></div>
    <%

  elem-to-xhtml :
    TemplateCall("block", [String(x)], elems) ->
    %>
    <div class="<%= x %>"><%= <elems-to-xhtml> elems ::*%></div>
    <%

rules // text

  elem-to-xhtml :
    Text(x) -> %> <h:outputText value="<%=x%>"/> <%

rules // text

  // convert an expression to text (string value of the expression)

  elem-to-xhtml :
    TemplateCall("text", [arg], []) ->
    %> <h:outputText value="<%= val-string %>"/> <%
    where val-string := <arg-to-value-string> arg

  elem-to-xhtml :
    TemplateCall("text", [e], []) ->
    %> <h:outputText value="<%= <ConditionExpressionToEL> (<Component>, e) %>"/> <%

rules // spacer

  elem-to-xhtml :
    TemplateCall("spacer", [], []) ->
    %> <rich:spacer id="<%= spacer-id %>" /> <%
    where spacer-id := <newname> "spacer"

  elem-to-xhtml :
    TemplateCall("horizontalspacer", [], []) -> %> <hr /> <%

rules // images

  elem-to-xhtml :
    TemplateCall("image",[e],[]) -> %> <h:graphicImage value="<%=x%>"/> <%
    where x := <arg-to-value-string> e

rules // menus

  elem-to-xhtml :
    TemplateCall("menubar", [exp], elems) ->
      %>
        <div class="menuwrapper" id="<%= x_menuid %>">
          <ul id="p7menubar">
            <%= elems2::*%>
          </ul>
        </div>
      <%
    where <?String("horizontal"){_}> exp
        ; x_menuid := <newname> "menubar"
        ; rules ( HMenuBar := x_menuid )
        ; elems2 := <elems-to-xhtml> elems
        ; rules ( StylesheetIncludes := ["dropdownmenu.css" | <StylesheetIncludes>] )
        ; rules ( JavascriptIncludes := ["dropdownmenu.js" | <JavascriptIncludes>] )
        ; rules ( JSOnloadBody := [ %> init_dropdownmenu(); <% | <JSOnloadBody <+ ![]>] )

  elem-to-xhtml :
    TemplateCall("menubar", [exp], elems) ->
      %>
        <div class="sdmenu" id="<%= x_menuid %>">
          <%= <elems-to-xhtml> elems' ::*%>
        </div>
      <%
    where <?String("vertical"){_}> exp
        ; x_menuid := <newname> "menubar"
        ; rules ( VMenuBar := x_menuid )
        ; rules ( StylesheetIncludes := ["sdmenu.css" | <StylesheetIncludes>] )
        ; rules ( JavascriptIncludes := ["sdmenu.js" | <JavascriptIncludes>] )
        ; rules ( JSOnloadBody := [ %> sideMenu = new SDMenu("<%= x_menuid::cdata %>"); sideMenu.init(); <% | <JSOnloadBody <+ ![]>] )
        ; elems' := <try(repeat(sometd(\ TemplateCall("menuheader", [], elems) ->
                                  TemplateCall("container", [], elems) \ <+
                                \ TemplateCall("menu", [], elems) ->
                                  TemplateCall("block", [], elems) \ <+
                                \ TemplateCall("menuitem", [], elems) ->
                                  TemplateCall("dummy", [], elems) \ <+
                                \ TemplateCall("menuspacer", [], []) ->
                                  TemplateCall("horizontalspacer", [], []) \
                                  )))> elems

  elem-to-xhtml :
    TemplateCall("menu", [], elems) ->
      %>
        <li>
          <%= headeritems ::*%>
          <%= dropdownitems ::*%>
        </li>
      <%
    where {| HeaderItems, DropDownItems
           : <map(find-menuheaders)> elems
           ; headeritems := <elems-to-xhtml> <reverse> <HeaderItems>
           ; if DropDownItems then
               dropdownitems := %> <ul> <%= <elems-to-xhtml> <reverse> <DropDownItems>::* %> </ul> <%
             else
               dropdownitems := []
             end
           |}

    find-menuheaders =
      ?elem
      ; if <sometd(?TemplateCall("menuheader", _, _))> elem then
          rules ( HeaderItems := [elem | <HeaderItems <+ ![]>] )
        else
          rules ( DropDownItems := [elem | <DropDownItems <+ ![]>] )
        end

  elem-to-xhtml :
    TemplateCall("menuheader", [], elems) -> e
    where e := <mapconcat(menuheader-elem-to-xhtml <+ elem-to-xhtml)> elems

  menuheader-elem-to-xhtml :
    e@Text(elem) ->
      %>
        <a href="#"><%= <elem-to-xhtml> e ::*%></a>
      <%

  menuheader-elem-to-xhtml :
    TemplateCall("navigate",[ThisCall(p,args)],elems) ->
      %>
        <a href="<%= url %>" att0><%= <elems-to-xhtml> elems ::* %></a>
      <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)
        ; if DropDownItems then
            att0 := @> class="trigger" <@
          else
            att0 := []
          end

  menuheader-elem-to-xhtml :
    TemplateCall("navigate", [ThisCall("url",[e])], elems) ->
      %>
        <a href="<%= url %>" att0><%= <elems-to-xhtml> elems ::* %></a>
      <%
    where url := <arg-to-value-string> e
        ; if DropDownItems then
            att0 := @> class="trigger" <@
          else
            att0 := []
          end

  elem-to-xhtml :
    TemplateCall("menuitem", [], elems) ->
      %>
        <li>
          <%= <elems-to-xhtml> elems ::* %>
        </li>
      <%

  elem-to-xhtml :
    TemplateCall("menuspacer", [], []) ->
      %>
        <li>
          <%= <elem-to-xhtml> TemplateCall("horizontalspacer", [], []) ::* %>
        </li>
      <%

rules // datatables

  elem-to-xhtml :
    t@TemplateCallDeclaredType("table", x, s, elems) ->
    %>
      <rich:dataTable id="<%= table-id %>" var="<%= x %>" value="#{<%= <Component> %>.<%= x %>List}">

        <f:facet name="header">
      <rich:columnGroup>
            <%= headers ::*%>
          </rich:columnGroup>
        </f:facet>

        <%= columns ::*%>

      </rich:dataTable>
    <%
  where {| DataTable, SubColumnCount, Subtable
         : table-id := <newname> "datatable"
         ; rules ( DataTable := table-id )
         ; header-elems := <collect(?TemplateCall("header", _, _))> elems
         ; column-elems := <filter(not(?TemplateCall("header", _, _)))> elems
         ; columns := <mapconcat(column-to-xhtml)> column-elems
         ; headers := <mapconcat(elem-to-xhtml)> header-elems
         |}

/*      ; hideColumn :=  <HideSubTableColumn <+ ![]>
      ; if HideSubTableColumn then
          att0 := @> varDetailToggler="detailToggler" <@
        else
          att0 := []
        end*/

   elem-to-xhtml :
     TemplateCall("header", [], elems) -> elems'
     where DataTable
         ; info(|<SubColumnCount>)
         ; elems' := <mapconcat(header-to-xhtml)> elems

   header-to-xhtml :
     e ->
     %>
       <rich:column><%= headername::* %></rich:column>
     <%
     where headername := <elem-to-xhtml> e

   column-to-xhtml :
    elem -> column
    where el := <elem-to-xhtml> elem
        ; if (not(Subtable(x, _, _, _) := elem)) then
            column := %>
          <rich:column>
            <%= el ::*%>
          </rich:column>
          <%
          ; if SubTable then
                rules( SubColumnCount := <(SubColumnCount <+ !0); inc> )
              end
        else
          column := el
          end


/*  column-to-xhtml :
    elem -> enclosed-columns
  where el := <elem-to-xhtml> elem
      ; columns := %>
        <rich:column>
          <%= el ::*%>
        </rich:column>
        <%
      ; enclosed-columns := <enclose-subtable-column> columns

/*  enclose-subtable-column :
     elem -> %> <f:facet name="detailStamp"> <%= elem::* %> </f:facet> <%
     where HideSubTableColumn

  enclose-subtable-column :
     elem -> elem
     where not(HideSubTableColumn) */

  elem-to-xhtml :
    Subtable(x, s, e, elems) ->
    %>
        <rich:subTable id="<%= subtable-id %>" var="<%=x%>" value="<%=x_col%>" colspan="">
          <%= columns ::*%>
        </rich:subTable>
    <%
  where x_col := <arg-to-value-string> e
      ; subtable-id := <newname> "subtable"
      ; rules ( SubTable := subtable-id )
 //     ; FieldAccess(exp, ident) := field
 //     ; itemVarName := <concat-strings>[ <decapitalize-string> ident, "Item"]
 //     ; columnsWithVar := <map(add-var-to-template-call(|itemVarName))> columns
 //     ; <debug> elems
      ; exp := TemplateCall("spacer", [], [])
      ; elems2 := <MkCons> (exp, elems)
      ; columns := <mapconcat(column-to-xhtml)> elems2

  add-var-to-property(|var) :
    Var(var1) -> Var(var2)
    where var2 := <concat-strings> [var, ".", var1]

  add-var-to-property(|var) :
    FieldAccess(e1, x) -> FieldAccess(e2, x)
    where e2 := <add-var-to-property(|var)> e1

  add-var-to-template-call(|var) :
    TemplateCall(a, [exp], []) -> TemplateCall(a, [exp2], [])
    where exp2 := <add-var-to-property(|var)> exp

rules // lists

  elem-to-xhtml :
    TemplateCall("list", [], elems) ->
    %>
      <ul>
        <%= <elems-to-xhtml> elems ::*%>
      </ul>
    <%

  elem-to-xhtml :
    TemplateCall("listitem", [], elems) ->
    %>
      <li>
        <%= <elems-to-xhtml> elems ::*%>
      </li>
    <%

rules // sections and headers

  elem-to-xhtml :
    TemplateCall("header", [], elems) ->
    %>
      <~n:tag><%= <elems-to-xhtml> elems ::*%></~n:tag>
    <%
    where not(DataTable) ; not(TableScope)
        ; n := <SectionDepth <+ !1>
        ; tag := <concat-strings>["h", <int-to-string> n]

  elem-to-xhtml :
    TemplateCall("section", [], elems1) ->
    %>
      <div class="<%= sectionlevel %>"><%= elems2 ::*%></div>
    <%
    where {| SectionDepth
           : rules( SectionDepth := <(SectionDepth <+ !0); inc> )
           ; sectionlevel := <concat-strings>["section", <SectionDepth; int-to-string>]
           ; elems2 := <elems-to-xhtml> elems1
           |}

  elem-to-xhtml :
    TemplateCall("par", [], elems1) ->
    %>
      <p><%= elems2 ::*%></p>
    <%
    where elems2 := <elems-to-xhtml> elems1

  elem-to-xhtml :
    TemplateCall("container", [], elems1) ->
    %>
      <span><%= elems2 ::*%></span>
    <%
    where elems2 := <elems-to-xhtml> elems1

rules // tables

  elem-to-xhtml :
    TemplateCall("table", [], elems) ->
    %>
      <table><%= e* ::*%></table>
    <%
    where {| TableScope
           : rules ( TableScope := 1 )
           ; e* := <elems-to-xhtml> elems
           |}

  elem-to-xhtml :
    TemplateCall("header", [], elems) ->
    %>
      <tr><%= <elems-to-xhtml(table-header-wrap)> elems ::*%></tr>
    <%
    where TableScope

  elem-to-xhtml :
    TemplateCall("row", [], elems) ->
    %>
      <tr><%= <elems-to-xhtml(table-cell-wrap)> elems ::*%></tr>
    <%

   table-cell-wrap :
     elems -> %> <td><%= elems ::*%></td> <%

   table-header-wrap :
     elems -> %> <th><%= elems ::*%></th> <%

rules // iteration

  elem-to-xhtml :
    For(x, s, e, Filter(we, obe), elems1) ->
    %>
      <ui:repeat var="<%= x %>" value="<%= <ConditionExpressionToEL> (<Component>, e) %>">
        <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<Component>, we) %>">
          <%= elems2 ::*%>
        </h:panelGroup>
      </ui:repeat>
    <%
    where not(True() := we)
        //; el := <arg-to-value-string> e
        ; elems2  := <elems-to-xhtml> elems1

  elem-to-xhtml :
    For(x, s, e, Filter(True(), obe), elems1) -> // No "where" clause
    %>
      <ui:repeat var="<%= x %>" value="<%= <ConditionExpressionToEL> (<Component>, e) %>">
        <%= elems2 ::*%>
      </ui:repeat>
    <%
    where elems2  := <elems-to-xhtml> elems1

  elem-to-xhtml :
    ForAll(x, s, Filter(we, obe), elems) ->
    %>
      <ui:repeat var="<%= x %>" value="#{<%= <Component> %>.<%= x %>List}">
        <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<Component>, we) %>">
          <%= columns ::*%>
        </h:panelGroup>
      </ui:repeat>
    <%
    where not(True() := we)
        ; columns := <elems-to-xhtml(wrap-column)> elems

  elem-to-xhtml :
    ForAll(x, s, Filter(True(), obe), elems) ->
    %>
      <ui:repeat var="<%= x %>" value="#{<%= <Component> %>.<%= x %>List}">
        <%= columns ::*%>
      </ui:repeat>
    <%
    where columns := <elems-to-xhtml(wrap-column)> elems


  elem-to-xhtml :
    IfTempl(e, elems) ->
    %>
      <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<Component>, e) %>"><%= elems2 ::*%></h:panelGroup>
    <%
    where elems2 := <elems-to-xhtml> elems

  wrap-column :
    elems ->
    %>
      <h:column><%= elems ::*%></h:column>
    <%

rules // select from

  elem-to-xhtml :
    SelectFromList(e1, e2) ->
    %>
       <h:selectManyListbox value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" />
          <s:convertEntity />
        </h:selectManyListbox>
    <%
    where _{Type(GenericSort(_, _))} := e1
        ; x_prop    := <concat-strings> [<arg-to-el> e1, "List"]
        ; x_List    := <concat-strings> [<arg-to-el> e2, "List"]
        ; x         := <newname> "selectvar"

  elem-to-xhtml :
    SelectFromList(e1, e2) ->
    %>
       <h:selectOneMenu value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" noSelectionLabel="" />
          <s:convertEntity />
        </h:selectOneMenu>
    <%
    where _{Type(SimpleSort(_))} := e1
        ; x_prop    := <concat-strings> [<arg-to-el> e1]
        ; x_List    := <concat-strings> [<arg-to-el> e2, "List"]
        ; x         := <newname> "selectvar"

rules // select

  elem-to-xhtml :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectManyListbox value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= <Component> %>.<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" />
          <s:convertEntity />
        </h:selectManyListbox>
    <%
    where _{Type(t)} := e
        ; GenericSort(_, _) := t
        ; X         := <capitalize-string> x
        ; x_List    := <concat-strings>[x, "List"]
        ; x_prop    := <concat-strings> [<arg-to-el> e, "List"]

  elem-to-xhtml :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectOneMenu value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= <Component> %>.<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" noSelectionLabel="" />
          <s:convertEntity />
        </h:selectOneMenu>
    <%
    where _{Type(t)} := e
        ; SimpleSort(_) := t
        ; X         := <capitalize-string> x
        ; x_List    := <concat-strings>[x, "List"]
        ; x_prop    := <arg-to-el> e


rules // links

  // link to a url, maybe constant, or obtained from an entity field

  elem-to-xhtml :
    TemplateCall("navigate", [ThisCall("url",[e])], elems) ->
    %> <h:outputLink value="<%=x%>"><%=
        <elems-to-xhtml> elems ::*
    %></h:outputLink> <%
    where not(ThisCall(p,args) := e)
        ; x := <arg-to-value-string> e

  elem-to-xhtml :
    t@TemplateCall("navigate", [ThisCall("url",[e@ThisCall(p,args)])], elems) ->
    %>
      <h:outputLink value="#{<%= <Component> %>.hostName}<%=url%>">
        <%= <elems-to-xhtml> elems ::* %>
      </h:outputLink>
    <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)

  elem-to-xhtml :
    TemplateCall("navigate",[ThisCall(p,args)],elems) ->
    %> <h:outputLink value="<%= url %>"><%=
        <elems-to-xhtml> elems ::*
    %></h:outputLink> <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)

  bind-param :
    (Arg(x, _), e) -> (x, el)
    where el := <arg-to-value-string> FieldAccess(e, "id")

  elem-to-xhtml :
    TemplateCall("url",[e],[]) ->
    %> <h:outputText value="<%= url %>" /> <%
    where not(ThisCall(p,args) := e)
        ; url := <arg-to-value-string> e

  elem-to-xhtml :
    TemplateCall("url",[ThisCall(p,args)],[]) ->
//    %> <h:outputText value="http://#{<%= <Component> %>.facesContext.externalContext.getRequestHeaderMap("host")}<%= url %>" /> <%
    %> <h:outputText value="#{<%= <Component> %>.hostName}<%= url %>" /> <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)


//  bind-param :
//    (Arg(x, s@SimpleSort(x_Class)), e) ->
//    %><f:param name="<%= x %>" value="<%= el %>" /><%
//    where <defined-java-type> s
//        //; x_class := <decapitalize-string> x_Class
//        ; el := <arg-to-value-string> FieldAccess(e, "id")
//
  // constraint: only pass parameters of entity types (simple sorts)

rules // forms

  elem-to-xhtml :  // the <f:facet> puts validation errors behind their inputs
    TemplateCall("form", [], elems) ->
    %>
      <h:form enctype="multipart/form-data">
        <%= hidden-ids ::*%>
        <f:facet name="afterInvalidField"><s:message/></f:facet>
        <s:validateAll><%= <elems-to-xhtml> elems ::*%></s:validateAll>
      </h:form>
    <%
    where hidden-ids := <mapconcat(arg-to-xhtml)> <TemplateArguments> <Component>

  arg-to-xhtml :
    Arg(e, s) -> %> <input type="hidden" name="<%= e %>" value="#{<%= <Component>%>.<%= e%>}" /> <%
    where <builtin-java-type> s

  arg-to-xhtml :
    Arg(i, s) -> %> <input type="hidden" name="<%= e1 %>" value="#{<%= <Component>%>.<%= i%>.id}" /> <%
    where <defined-java-type> s
        ; e1 := <concat-strings>[i, "_id"]

  elem-to-xhtml :
    TemplateCall("action",[e1,e2],[]) ->
    %>
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

  elem-to-xhtml :
    TemplateCall("action",[e1,e2,e3],[]) ->
    %>
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

  elem-to-xhtml :
    TemplateCall("action",[e1,e2,e3],[]) ->
    %>
       <s:button type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <is-cancel-action> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

    // @todo this is a big hack! the s:button component invokes the
    // corresponding action, but does not send the form information, does
    // canceling the form edits; however, this should NOT be expressed in the
    // name of the action method

  elem-to-xhtml :
    TemplateCall("actionLink",[e1,e2],[]) ->
    %>
       <h:commandLink type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

   is-cancel-action =
     ?Call(Var(component), "cancel", [])

   elem-to-xhtml :
    TemplateCall("action",[e1,e2],[]) ->
    %>
       <h:commandButton value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

   elem-to-xhtml :
     Action(name, args, body) -> []

rules // captcha

  elem-to-xhtml :
    TemplateCall("captcha", [], []) ->
    %>
      <div class="captcha">
        <div>
          <h:graphicImage value="/seam/resource/captcha?#{captcha.id}"/>
        </div>
        <div>
          <h:outputLabel for="verifyCaptcha">Enter the above letters</h:outputLabel>
          <h:inputText id="verifyCaptcha" value="#{captcha.response}" required="true">
            <s:validate />
          </h:inputText>
          <div class="validationError"><h:message for="verifyCaptcha"/></div>
        </div>
      </div>
    <%

rules // helper rules for input

  input-of-required-property(|e)=
    if <page-var-access-to-class-prop-tuple;PropertyIsRequired> e
    then
      !"true"
    else
      !"false"
    end

  get-type-of-right-side-field-access:
    FieldAccess(e, f){Type(SimpleSort(thetype))} -> thetype

  page-var-access-to-class-prop-tuple :
    FieldAccess(e, f) -> (<get-type-of-right-side-field-access> e,f)

rules // input

    // @todo configure requiredness of fields

    // @todo support different types of input based on type
    // maybe deal with that through desugaring, i.e., have more
    // specific inputX template calls

    // @todo also special support for Email, URL, Image

  elem-to-xhtml :
    TemplateCall("input",[e],[]) ->
    %>
      <s:decorate>
        <h:inputText styleClass="inputText" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where warn(|["underived input element"])
        ; estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>

/*    %>
      <s:decorate>
        <h:inputText styleClass="inputString" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)> */

    // @todo validate image

    // @todo upload real image file


rules // output

  elem-to-xhtml :
    TemplateCall("output",[e],[]) ->
    %>
      <h:outputText styleClass="output" value="<%= estring %>"/>
    <%
    where warn(|["underived output element"])
        ; estring := <arg-to-value-string> e


rules // function stuff

   create-template-function(|fn, e) =
     where({| Param, IgnoreVars
            : <alltd(find-params)> e
            ; params := <bagof-Param>
            |}
           ; el := <concat-strings> ["#{", <Component>, ".", fn, "(", <map(arg-to-el); separate-by(|","); concat-strings> params, ")}"]
           ; pn := <Component>
           ; rules( ConditionExpressions :+ l -> [(pn, fn, params, e)|l]
                    ConditionExpressionToEL : (pn, e) -> el )
          )

   translate-template-expression : // Store some context information
     Define(mods, name, args, body1) -> Define(mods, name, args, body2)
     where <elem> (Page(), mods)
         ; {| Component
            : rules ( Component := name )
            ; body2 := <try(sometd(translate-template-expression))> body1
            |}


   translate-template-expression =
     ?IfTempl(e, elems1*)
     ; where (fn := <newname> "ifCondFun"
              ; create-template-function(|fn, e)
              ; <try(sometd(translate-template-expression))> elems1*)

   // Do the same iffy thing for for-loops (for the "where" clause)
   translate-template-expression =
     ?For(x, s, e, Filter(we, obe), elem1*)
     ; where (not(True() := we)
              ; fn := <newname> "forWhereCondFun"
              ; fn2 := <newname> "forInExprFun"
              ; create-template-function(|fn, we)
              ; create-template-function(|fn2, e)
              ; <try(sometd(translate-template-expression))> elem1*)

   translate-template-expression =
     ?For(x, s, e, Filter(True(), obe), elem1*)
     ; where (fn := <newname> "forInExprFun"
              ; create-template-function(|fn, e)
              ; <try(sometd(translate-template-expression))> elem1*)

   translate-template-expression =
     ?ForAll(x, s, Filter(we, obe), elem1*)
     ; where (not(True() := we)
              ; fn := <newname> "forAllWhereCondFun"
              ; create-template-function(|fn, we)
              ; elem2* := <try(sometd(translate-template-expression))> elem1*)

   translate-template-expression =
     ?TemplateCall("text", [arg], [])
     ; where(not(<arg-to-value-string> arg) ; not(<elem-to-xhtml> arg) // Not a simple expression
             ; fn := <newname> "textExprFun"
             ; create-template-function(|fn, arg))

   unId : Id(x) -> x

   packagename-to-string :
     PackageName(parts) -> <map(unId); separate-by(|"."); concat-strings> parts

//
//   function-to-xml :
//     (fn, param*, e) ->
//     %>
//  <function>
//    <function-name><%= fn2 %></function-name>
//    <function-class><%= pkgname %>.TemplateFunctions</function-class>
//    <function-signature>boolean <%= fn2 %>(<%= params %>)</function-signature>
//  </function>
//    <%
//    where pkgname := Literal(<packagename-to-string> <Package>)
//        ; fn2 := Literal(fn)
//        ; params := Literal(<map(function-param-to-sig); separate-by(|","); concat-strings> param*)
//
   functions-to-el =
     try(sometd(translate-template-expression))
     ; where (functions := <repeat(once-ConditionExpressions)> []
       ; rules ( AllTemplateFunctions := functions ))

//     ; oldapp := <id>
//     ; functions := <repeat(once-TranIf)> []
//     ; c := <template-functions-to-java> functions
//     ; info(|"Sending resulting function stuff back")
//     ; !(oldapp, c)
////     ; functiondefs := <map(function-to-xml); concat> functions
//     ; if [] := functions then
//         namespacedef := []
//       else
//         namespacedef := %> <namespace>http://www.webdsl.org/el</namespace> <%
//       end

   page-to-rewrite-rule =
     ?Define([Page()], x, args, body)
     ; p := Literal(x)
     ; if [] := args then
        !%>
      <rule>
          <from>/<%= p %>/?$</from>
        <to>/<%= p %>.seam</to>
      </rule>
      <rule>
        <from>/<%= p %>/?\?(.*)$</from>
        <to>/<%= p %>.seam?$2</to>
      </rule>
      <%
       else
         Arg(fi, t) := <Hd> args
         ; if <builtin-java-type> t then
             first := Literal(fi)
           else
             first := Literal(<concat-strings> [fi, "_id"])
           end
         ; !%>
      <rule>
        <from>/<%= p %>/([^\?]+)$</from>
        <to>/<%= p %>.seam?<%= first %>=$1</to>
      </rule>
      <rule>
        <from>/<%= p %>/([^\?]+)\?(.*)$</from>
        <to>/<%= p %>.seam?<%= first %>=$1&amp;$2</to>
      </rule>
    <%
        end

   pages-to-rewrite-rules =
     ?sections
     ; pagexmls := <collect(page-to-rewrite-rule); concat> sections
     ; x := XmlFile(["resources/WEB-INF"], "urlrewrite.xml",
%>
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE urlrewrite PUBLIC "-//tuckey.org//DTD UrlRewrite 2.6//EN"
        "http://tuckey.org/res/dtds/urlrewrite2.6.dtd">
<urlrewrite>
<%= pagexmls ::*%>
</urlrewrite>
<%)
     ; !x

