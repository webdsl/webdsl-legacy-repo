module org/webdsl/dsl/to-seam/java-globals

imports
  libstrategolib
  Java-15
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/generation/-

rules

  GenerateCode = globals-to-java; fail

  globals-to-java :
    Define(mods, x_page, args, elems1) -> <map(generate-page-bean)> <concat> [cbds1, cbds2]
    where is-page-or-template
        ; funcs := <used-global-functions-defs(|x_page,args,elems1)>
        // scoping of variables, conflicts between session, global and page vars: should be resolved by the new renaming approach
        ; cbds2 := <map(global-var-retrieval-for-xhtml);concat> 
                     <filter(\ vdi@VarDeclInit(nm, _, _) -> vdi 
                               where <oncetd({   ?Var(nm) 
                                              <+ ?Qualified(nm, _)
                                              <+ ?FieldAccess(_,nm) //caused by propagate-component-names, eg beanname.globalvar
                                             })> (elems1,funcs) 
                             \)> <AllGlobalVars <+ ![]>
        ; cbds1 := <map(function-to-function-code(|[]));concat> funcs
        //; <debug(!["pagina: ", x_page])> funcs

rules // globals to java initialization code

  globals-to-java-app-init =
    where( vardeclinits := <AllGlobalVars <+ ![]>
             ; pkgname    := <BeanPackage>
             ; pkgname2   := <DomainPackage>
             ; {| IsGlobal
                : <filter({x : ?VarDeclInit(x, _, _); rules( IsGlobal :- x )})> vardeclinits
                // persist right away to get an id
                ; bstm3* := <filter(vardeclinit-to-persist-statement);concat-with-sublists> vardeclinits
                //update with assignments
                ; bstm1* := <filter(vardeclinit-to-method-call)> vardeclinits
                //persist updates
                ; bstm2* := <filter(vardeclinit-to-method-persist-call)> vardeclinits
                ; cbds* := <filter(vardeclinit-to-method); concat> vardeclinits
                ; cbdsglobalfunctions* := <map(function-to-function-code(|[]))>
                                            // first term argument is not relevant here, because there are no template functions here
                                            <used-global-functions-defs(|"","",vardeclinits) 
                                            //remove predicates, maybe not necessary with removal of session var using functions below
                                            ; filter(\ func@Function(iden,formarg,_,_)->func where <not(IsPredicate)> (iden,formarg) \)
                                            // remove functions that use session vars, session not available here (happens at application startup)
                                            ; filter(\ func@Function(iden,_,_,bdy)->func where [] := <collect(IsSessionVariable)> bdy \)
                                            // in the applicationcontext class global vars are locally available
                                            ; alltd({x : ?Var(x); rules( IsGlobal :- x )}) 
                                            >   
                |}
             ; <emit-java-code> compilation-unit|[
    package pkgname2;

    import java.util.*;
    import javax.persistence.*;
    import pkgname.*;

    @Entity public class ApplicationContextProperty
    {
      public ApplicationContextProperty ()
      { }

      @Id @GeneratedValue private Long id;

      public Long getId()
      {
        return id;
      }

      private void setId(Long id)
      {
        this.id = id;
      }

      private String name;

      private String databaseId;

      public String getName() {
        return name;
      }

      public void setName(String name) {
        this.name = name;
      }

      public String getDatabaseId() {
        return databaseId;
      }

      public void setDatabaseId(String databaseId) {
        this.databaseId = databaseId;
      }


    }

    ]|
    ; <emit-java-code> compilation-unit|[
      package pkgname;


      import java.util.*;
      import java.io.Serializable;
      import static javax.persistence.PersistenceContextType.EXTENDED;

      import javax.persistence.PersistenceContext;
      import javax.persistence.EntityManager;

      import javax.ejb.Stateful;
      import javax.ejb.Remove;
      import javax.ejb.Stateless;

      import org.jboss.seam.ScopeType;

      import org.jboss.seam.annotations.Destroy;
      import org.jboss.seam.annotations.Name;
      import org.jboss.seam.annotations.Scope;
      import org.jboss.seam.annotations.Create;
      import org.jboss.seam.annotations.Logger;

      import org.jboss.seam.annotations.Startup;

      import org.jboss.seam.contexts.Contexts;
      import org.jboss.seam.faces.FacesMessages;
      import org.jboss.seam.log.Log;
      import org.jboss.seam.annotations.In;


      import pkgname2.*;


      @Startup @Stateful @Name("applicationContext") @Scope(ScopeType.APPLICATION) public class ApplicationContext implements ApplicationContextInterface
      {
        @Logger private Log log;

        //@PersistenceContext(type = EXTENDED) private EntityManager em;
        //@In
        @In EntityManager entityManager;

        @In private FacesMessages facesMessages;

        @Create public void initialize()
        {
          javax.persistence.Query q = entityManager.createQuery("from ApplicationContextProperty");
          if (q.getResultList().isEmpty())
          {

            bstm3*
            bstm1*
            bstm2*

          }

          javax.persistence.Query q2 = entityManager.createQuery("from ApplicationContextProperty");
          List results = q2.getResultList();
          for(Object r: results)
          {
            ApplicationContextProperty acp = (ApplicationContextProperty) r;

            Contexts.getApplicationContext().set(acp.getName(), acp.getDatabaseId());
          }
        }

        @Destroy @Remove public void destroy()
        { }

        ~*cbds*
        ~*cbdsglobalfunctions*
      }

         ]|
       )

  vardeclinit-to-persist-statement:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),exps) -> result
    where if <EntityIdName> x_class
          then idname := <EntityIdName> x_class
               ; idassign := <collect({e:?Assignment(idname, e);!Assign(Assignment(Qualified(x_ident,idname), e))});Hd> exps
               ; result := [ <statement-to-java> idassign, bstm|[ entityManager.persist(x_ident); ]| ]
          else result := bstm |[ entityManager.persist(x_ident); ]| end

  vardeclinit-to-method-call:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[	globalDeclaration#x_ident(); ]|

  vardeclinit-to-method-persist-call:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[ globalDeclaration#x_ident#Persist(); ]|

  vardeclinit-to-method:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class), ObjectCreation(x_class,assigns)) ->
      class-body-dec* |[
        private t x_ident = new x_t();

        private void globalDeclaration#x_ident() {
          ~*bstmvardeclinit*
        }

        private void globalDeclaration#x_ident#Persist() {
          //entityManager.persist(x_ident); now done beforehand
          ApplicationContextProperty x_acpident = new ApplicationContextProperty();
          x_acpident.setName(x_acpname);
          x_acpident.setDatabaseId(String.valueOf(x_ident.getId()));
          entityManager.persist(x_acpident);
          Contexts.getApplicationContext().set(x_acpident.getName(), x_acpident.getDatabaseId());
        }
  ]|
  where x_acpident := <new>
      ; t := <java-type> SimpleSort(x_class)
      ; x_t := <sort-to-java-type-string> SimpleSort(x_class)
      ; x_acpname := <concat-strings> ["\"global-declaration-",x_ident,"\""]
      ; digests := <filter(secret-assigns-to-digest(|x_ident,x_class))> assigns
      ; bstmvardeclinit* := <conc>
                         (<map(\ Assignment(f, e) -> Assign(Assignment(Qualified(x_ident, f), e)) \)
                           ; /*desugar-any;*/ statements-to-java> assigns
                         , digests)

//  generate-prop-mapping(|x_ident) :
//    Property(x, k, s, annos) -> bstm|[
//      this.x_ident.x_setter(x_ident.x_getter());
//   ]|
//    where x_setter := <property-setter> x
//       ; x_getter := <property-getter> x

  secret-assigns-to-digest(|x_ident,class):
    Assignment(x_prop,String(anystring)) ->
     bstm|[
       {
         org.jasypt.util.password.StrongPasswordEncryptor x_var2 =
           new org.jasypt.util.password.StrongPasswordEncryptor();
         x_ident.x_set(x_var2.encryptPassword(x_anystring));
       }
     ]|
     where SimpleSort("String") := <type-of> String(anystring) 
         ; SimpleSort("Secret") := <type-of-property> (class,x_prop)
         ; x_var2 := <newname> "_passwordEncryptor"
         ; x_set := <property-setter> x_prop
         ; x_anystring := <concat-strings> ["\"",anystring,"\""]

rules // globals

  //only include global functions that are actually used
  used-global-functions-defs(|x_page,args,elems1) =
    <filter(add-functions-referenced-in-functions); !<once-all-functions-used-in-page <+ ![]> > //need to get all the functions referenced in functions
      <filter(\ fu@Function(nm, _, _, _) -> fu 
                where //call to function in page
                      <oncetd(?ThisCall(nm, _))> elems1  
                      //call to function in if-template
                   <+ <oncetd(?ThisCall(nm, _))> <retain-all(?(x_page, args, _, _, _))> <AllTemplateFunctions <+ ![]> 
              \)>    
        <AllGlobalFunctions <+ ![]>

  add-functions-referenced-in-functions :
    fu@Function(nm,fa,s,bl) -> fu
    where if <elem> (fu,<all-functions-used-in-page <+ ![]>) then fail end //stop recursion
        ; referenced := <filter(\fu@Function(nm, _, _, _) -> fu where <oncetd(?ThisCall(nm, _))> bl \)> <AllGlobalFunctions <+ ![]>
        ; rules (all-functions-used-in-page := <concat> [[fu],<all-functions-used-in-page <+ ![] > ])
        ; <filter(add-functions-referenced-in-functions)> referenced //recursion

rules
  global-var-retrieval-for-xhtml :
    VarDeclInit(x_name, x_sort, e1) ->
     java|[
       @Partial
       void argumentInitialize() {
          x_type x_temp = x_type.valueOf((String)org.jboss.seam.contexts.Contexts.getApplicationContext().get(x_varname));
          this.x_name = (x_thetype) entityManager.find (x_thetype.class,x_temp);
        }
        
        private x_thetype x_name;
        
        public x_thetype get#x_name()
        {
          x_type x_temp = x_type.valueOf((String)org.jboss.seam.contexts.Contexts.getApplicationContext().get(x_varname));
          return (x_thetype) entityManager.find (x_thetype.class,x_temp);
        }
      ]|    
    
    where SimpleSort(x_thetype) := x_sort
        ; if <EntityIdName> x_thetype then
            x_type := <sort-to-java-type-string> <EntityIdType> x_thetype
          else
            x_type := "Long"
          end
        ; x_varname := <concat-strings> ["\"global-declaration-",x_name,"\""]
        ; x_temp := <newname> "tmp"
