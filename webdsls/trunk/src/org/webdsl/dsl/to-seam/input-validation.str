module org/webdsl/dsl/to-seam/input-validation

imports
  libstrategolib
  Java-15
  libjava-front

imports
  libwebdsl-front

signature
  constructors
    JSFCombinedValidationFunction : String -> Annotation
    JSFValidationFunctions : List(String) -> Annotation
    JSFMessageComponentIds : List(String) -> Annotation 
    JSFMessageComponentId : String -> Annotation
    ValidateCallAnno : ValidateCall -> Annotation 
    ValidateCallAnnos : List(ValidateCall) -> Annotation 

rules // action to method

  // TODO: refactor typechecking 
  
  //get-type-anno :
  //  _{anno*} -> compid
  //  where Type(compid) := <collect(?Type(_));Hd> anno*
  
  get-validate-call-anno :
    _{anno*} -> compid
    where ValidateCallAnno(compid) := <collect(?ValidateCallAnno(_));Hd> anno*  
    
  get-validate-call-annos :
    _{anno*} -> compid
    where ValidateCallAnnos(compid) := <collect(?ValidateCallAnnos(_));Hd> anno*  

  get-combined-validation-function :
    _{anno*} -> compid
    where JSFCombinedValidationFunction(compid) := <collect(?JSFCombinedValidationFunction(_));Hd> anno*  

  get-validation-functions :
    _{anno*} -> compid
    where JSFValidationFunctions(compid) := <collect(?JSFValidationFunctions(_));Hd> anno*  
  
  get-message-ids :
    _{anno*} -> compid
    where JSFMessageComponentIds(compid) := <collect(?JSFMessageComponentIds(_));Hd> anno*  
  
  get-message-id :
    _{anno*} -> compid
    where JSFMessageComponentId(compid) := <collect(?JSFMessageComponentId(_));Hd> anno*  
  
  setup-input-validation-generation :
    Define([Page()], x_page, args, elems) -> Define([Page()], x_page, args, elems1)
    where //info(|"setup input validation");    
          {| ValidatedExpression:
               validators := <alltd(declare-input-validators)> elems
             ; elems1 := <alltd(add-a4j-call-to-inputs)> elems
           |}
         //; info(|"setup input validation done")
           
  declare-input-validators:
    vc@ValidateCall(x,y) -> vc
    where compid := <get-jsf-component-id-1<+info(|"comp lookup failed")> vc
        ; <alltd(declare-validated-expression(|x,<map(type-of <+ debug(!"no type found for validate call"))>y,compid,vc))> y
           
  declare-validated-expression(|ident,types,compid,vc):
    Var(x) -> Var(x)
    where rules(ValidatedExpression :+ Var(x) -> (ident,types){JSFMessageComponentId(compid),ValidateCallAnno(vc)})
        //; <debug> Var(x)

  declare-validated-expression(|ident,types,compid,vc):
    FieldAccess(x,y) -> FieldAccess(x,y)
    where rules(ValidatedExpression :+ FieldAccess(x,y) -> (ident,types){JSFMessageComponentId(compid),ValidateCallAnno(vc)})
        //; <debug> FieldAccess(x,y)

  //rewrite inputs to take into account a4j validation call, generate function for combined a4j call
  //attach validation functions
  add-a4j-call-to-inputs :
    tc@elem|[ inputString(e){} ]| -> tc{JSFCombinedValidationFunction(thefunc),JSFValidationFunctions(validatorfuncname*),JSFMessageComponentIds(compid*),ValidateCallAnnos(vcanno*),oldanno*}
    where _{oldanno*} := tc
        //; <debug> ["oldanno*",oldanno*]
        ; validatorfunc* := <collect(bagof-ValidatedExpression);concat> e//;map(InputValidatorFuncName);debug> e
        //; <debug> ["validatorfunc*",validatorfunc*]

        // if no validation applies -> do not add annotations by failing this strategy
        ; not([] := validatorfunc*)

        //need to know what to reRender, eg the ids of the validate components
        ; compid* := <map({(tup -> anno where anno := <get-message-id> tup)})> validatorfunc*
        //; <debug> ["compid*",compid*]
        // ; args* := <map({(tup -> ValidateCallArgs(anno) where anno := <get-validate-call-args> tup)})> validatorfunc*

        //need to know what action to call, can specify only one action so need to generate a combined function
        ; validatorfuncname* := <map(InputValidatorFuncName<+info(|"problem retrieving validation function name"))> validatorfunc*

        // unique function name for the action that is associated with the validation of this input component
        ; thefunc := <newname> "geninputvalidationcombined"

        ; vcanno* := <map(get-validate-call-anno<+info(|["problem retrieving validation call term",<id>]))> validatorfunc*
  
        
//TODO other input types






  elem-to-xhtml :  // the <f:facet> puts validation errors behind their inputs
    tc@ValidateCall(x_ident,e*) ->
    %>
      <s:decorate id="<%= <get-jsf-component-id-1> tc %>">
        <h:message id="<%= <get-jsf-component-id-2> tc %>" for="<%= <get-jsf-component-id-2> tc %>"/>
      </s:decorate>
    <%



  // for every input generate 1 function that is called by the ajax tag
  GenerateCode = generate-input-validation-bean-code; fail

  generate-input-validation-bean-code :
    tc@elem|[ inputString(e){} ]| ->
      <generate-page-bean> [
        java|[
           public void x_fun() {
             bstm*
           } 
        ]|
      ]
    where x_fun := <get-combined-validation-function> tc
        //; bstm* := <get-validation-functions;map({?x_f;!java|[ x_f(); ]|})> tc

        //get list of function names
        ; valfuncs := <get-validation-functions> tc
        //; info(|"valfuncs");<debug> valfuncs
        
        //get list of validator calls for arguments (including message component ids)
        ; valcalls := <get-validate-call-annos> tc
        //; info(|"valcalls");<debug> valcalls
        
        //zip into bstm*
        ; bstm* := <zip(create-validate-function-call)> (valfuncs,valcalls)

  create-validate-function-call :
    (x_fun,vc@ValidateCall(x,y)) -> java |[ x_fun(~string:compid,e*); ]|
    where compid := String([Chars(<get-jsf-component-id-full-2> vc)])
        //; info(|"componentid");<debug> compid
        ; e* := <map(expression-to-java)> y
        //; info(|"e*");<debug> e*




  // for every referenced validator, generate a function that takes the parameters and a string that holds the id of the message jsf component
  GenerateCode = generate-input-validators-code; fail

  generate-input-validators-code :
    Define([Page()], x_page, args, elems) -> Define([Page()], x_page, args, elems)
    where validators := <collect(?ValidateCall(_,_))> elems
        //; <debug> ["validators",validators]
        ; <map(generate-input-validator-code)> validators
         
  generate-input-validator-code :  
    vc@ValidateCall(x,y) ->
      <generate-page-bean> [
        java|[
           public void x_fun(String x_compid,param*){ 
             bstm*
           }
        ]|
      ]
    where tup := (x,<map(get-type-anno)>y)
        ; Validator(x_ident,farg*,Block(stm*),str) := <InputValidator> tup
        ; x_fun := <InputValidatorFuncName> tup
        ; x_compid := <newname> "messagecomponent"
        ; {| MessageComponentId, ErrorMessage : rules (MessageComponentId := x_compid
                                                       ErrorMessage := str)
        ; bstm* := <statements-to-java> stm* |}
        ; param* := <map(action-arg-to-method-arg)> farg*
        




  
  statement-to-java :
    webdsl|[ fail; ]| -> java|[ facesContext.addMessage(x_compid,new FacesMessage(FacesMessage.SEVERITY_ERROR,e,e)); ]|
    where x_compid := <MessageComponentId>
        ; e := <expression-to-java> <ErrorMessage>