module org/webdsl/dsl/to-seam/page-to-facelets

imports 
  libstrategolib 
  libwebdsl-front

rules

  generate-template-client(|template) :
    elems -> <emit-facelets>
    %>
<!DOCTYPE div PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
                     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<ui:composition xmlns="http://www.w3.org/1999/xhtml"
     xmlns:c="http://java.sun.com/jstl/core"
     xmlns:ui="http://java.sun.com/jsf/facelets"
     xmlns:f="http://java.sun.com/jsf/core"
     xmlns:h="http://java.sun.com/jsf/html"
     xmlns:s="http://jboss.com/products/seam/taglib"
     xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
     xmlns:rich="http://richfaces.ajax4jsf.org/rich"
     xmlns:wdsl="http://www.webdsl.org/el" 
     att0>
  
  <%= elems::* %>
  
</ui:composition>
    <%
    where if <string-length; not(?0)> template then
            x := <concat-strings> [template, ".xhtml"]
            ; att0 := @> template="<%= x%>" <@
          else
            att0 := []
          end
          
 
rules
  /**
   * Generate html for a page
   */
  GenerateCode = page-to-html; fail
  
  page-to-html =
    ?def |[ define page x(farg*) { elem* } ]|
    ; where ( x := <ThisPage> )
    ; with ( elems := <filter(not(?Define(_, _, _, _) <+ ?TemplateCall("title", _, _))); elems-to-xhtml> elem*
         ; {| ThisPage
            : rules ( ThisPage := <concat-strings> [x, "Template"] )
            ; <emit-facelets>
            %>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html" 
      xmlns:f="http://java.sun.com/jsf/core" 
      xmlns:c="http://java.sun.com/jstl/core"
      xmlns:s="http://jboss.com/products/seam/taglib"
      xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
      xmlns:rich="http://richfaces.ajax4jsf.org/rich"
      xmlns:wdsl="http://www.webdsl.org/el">

  <head>
	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
	<title><ui:insert name="title"><%= x::cdata %></ui:insert></title>
	<link href="<%= <AppRoot> %>/stylesheets/webdsl.css" rel="stylesheet" type="text/css"/>
  </head>

  <body>
    <%= elems::* %>
  </body>

</html>
            <% |} )


/**
   * Generate facelet for a page
   */
  GenerateCode = page-to-facelet; fail
  
  page-to-facelet :
    def |[ define page x(farg*) { elem* } ]| -> <generate-template-client(|template)> elems
    where template := <concat-strings> [x, "Template"]
        ; elems := <filter(?Define(_, _, _, _) <+ ?TemplateCall("title", _, _)); elems-to-xhtml> elem*


  templatecall-args-to-facelets :
    (a, Arg(b, d)) ->
    %>
      <ui:param name="<%= b %>" value="<%= x %>" />
    <%
    where x := <arg-to-value-string> a


rules
  /**
   * Generate facelet for toplevel templates
   */
  GenerateCode = template-to-facelet; fail

  template-to-facelet :
    def |[ define template x(farg*) { elem* } ]| -> <generate-template-client(|"")> body
    where x := <ThisPage>
    with {| InToplevelTemplate
          : rules ( InToplevelTemplate := x )
          ; body := <elems-to-xhtml> elem*
          |}


rules

  get-superclass :
    SimpleSort(s) -> SimpleSort(<find-superclass> s)
    
  get-superclass :
    GenericSort(k, [SimpleSort(s)]) -> GenericSort(k, [<get-superclass> SimpleSort(s)])

  find-superclass =
    Extends ; not(?"Object") ; find-superclass <+ id

  is-page-or-template =
    ?def |[ define mod* x(farg*) { elem* } ]| ; where ( [Page()] := mod* <+ [Template()] := mod* )

  is-overloaded-template =
    ?def |[ define template x(farg*) { elem* } ]| ; where (<bagof-TopLevelTemplateDefinitions;length;not(?0);not(?1)> <strip-annos> x)
  
  is-call-to-overloaded-template =
    where ( bagof-TopLevelTemplateDefinitions;length;not(?0);not(?1) )
  
  is-toplevel-template =
    where ( bagof-TopLevelTemplateDefinitions;length;not(?0) )
  
  is-call-to-toplevel-template =
    ?TemplateCall(name, args, _) ; where ( <TemplateSignature> (name, <map(type-of)> args); <is-toplevel-template> name )
  