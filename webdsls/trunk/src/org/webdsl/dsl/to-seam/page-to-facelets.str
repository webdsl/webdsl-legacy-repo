module org/webdsl/dsl/to-seam/page-to-facelets

imports 
  libstrategolib 
  libwebdsl-front


rules

  generate-facelets-template :
    elems -> <emit-facelets>
    %>
<!DOCTYPE div PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
                     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
     xmlns:c="http://java.sun.com/jstl/core"
     xmlns:ui="http://java.sun.com/jsf/facelets"
     xmlns:f="http://java.sun.com/jsf/core"
     xmlns:h="http://java.sun.com/jsf/html"
     xmlns:s="http://jboss.com/products/seam/taglib"
     xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
     xmlns:rich="http://richfaces.ajax4jsf.org/rich"
     xmlns:wdsl="http://www.webdsl.org/el">
  
  <%= elems::* %>
  
</ui:composition>
    <%
 
rules
  /**
   * Generate facelet page
   */
  GenerateCode = page-to-facelet; fail
  
  page-to-facelet :
    def |[ define page x(farg*) { elem* } ]| ->
    <emit-facelets>
%>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
                             "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html" 
      xmlns:f="http://java.sun.com/jsf/core" 
      xmlns:c="http://java.sun.com/jstl/core"
      xmlns:s="http://jboss.com/products/seam/taglib"
      xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
      xmlns:rich="http://richfaces.ajax4jsf.org/rich"
      xmlns:wdsl="http://www.webdsl.org/el">

  <head>
	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
	<title><ui:insert name="title">Title</ui:insert></title>
	<link href="<%= <AppRoot> %>/stylesheets/webdsl.css" rel="stylesheet" type="text/css"/>
  </head>

  <body>
    <%= templates::* %>
    <%= elems::* %>
  </body>

</html>
<%
    where x := <ThisPage>
    with {| TemplateCallsInPage, DefinedTemplatesInPage
          : <try(alltd(find-redefined-template-definition))> elem*
          ; <alltd(templatecall-to-facelet)> elem*
          ; templates := <templatecalls-to-includes>
          ; elems := <elems-to-xhtml> elem*
          |}


  find-redefined-template-definition =
    ?def@def |[ define local x(farg*) { elem* } ]|
    ; where (
        page := <ThisPage>
        ; rules ( DefinedTemplatesInPage :+ page -> def )
      )

  defined-template-to-facelet :
    def |[ define local x(farg*) { elem* } ]| ->
%>
  <ui:define name="<%= x %>">
    <%= elems::* %>
  </ui:define>
<%
    where {| InLocalTemplate
           : rules ( InLocalTemplate := x )
           ; t* := <map(?Arg(_,<id>))> farg*
           ;  Define(mods, n, f, b) := <TemplateSignature> <ThisCallSignature>
           ; calls := <collect(check-template-call); flatten-list> b
           ; <elem> ((<strip-annos> x, t*), calls) // only generate template (re)definitions for templates that are actually called
           ; elems := <elems-to-xhtml> elem*
           |}

  check-template-call =
    ?TemplateCall(name, args, body)
    ; t* := <map(type-of)> args
    ; Define(m, n, f, b) := <TemplateSignature <+ LocalTemplateSignature> (name, t*)
    ; ![(name, t*) | <collect(check-template-call); flatten-list <+ []> b]


  templatecall-to-facelet =
    ?def |[ define local x(farg*) { elem* } ]|
    
// @todo: check all constraints.... (only generate composition if template call inside page to other template?, ...)
  templatecall-to-facelet =
    ?TemplateCall(name, args, elem)
    ; t1* := <map(type-of)> args
    ; <TemplateSignature> (name, t1*)
    ; output-name := <newname> <ThisPage>
    ; n := <concat-strings> [name, ".xhtml"]
    ; {| ThisCallSignature
       : rules ( ThisCallSignature := (name, t1*) )
       ; redefinitions := <collect(defined-template-to-facelet); concat> <bagof-DefinedTemplatesInPage> <ThisPage>
       ; rules ( TemplateCallsInPage :+= (output-name, (name, args)) )
       |}
    ; {| ThisPage
       : rules ( ThisPage := output-name )
       ; <emit-facelets>
%>
<!DOCTYPE div PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
                     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
     xmlns:c="http://java.sun.com/jstl/core"
     xmlns:ui="http://java.sun.com/jsf/facelets"
     xmlns:f="http://java.sun.com/jsf/core"
     xmlns:h="http://java.sun.com/jsf/html"
     xmlns:s="http://jboss.com/products/seam/taglib"
     xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
     xmlns:rich="http://richfaces.ajax4jsf.org/rich"
     xmlns:wdsl="http://www.webdsl.org/el"
     template="<%= n %>">
  
  <%= redefinitions::* %>
  
</ui:composition>
<%
       |}

  templatecalls-to-includes =
    <mapconcat(templatecall-to-include)> <bagof-TemplateCallsInPage>
    
  templatecall-to-include :
    (output, (name, args)) ->
    %>
      <ui:include src="<%= n %>">
        <%= params::* %>
      </ui:include>
    <%
    where n := <concat-strings> [output, ".xhtml"]
        ; Define([Template()], x, fargs, body) := <TemplateSignature> (name, <map(type-of)> args)
        ; params := <try(zip(templatecall-args-to-facelets); concat)> (args, fargs)

  templatecall-args-to-facelets :
    (a, Arg(b, d)) ->
    %>
      <ui:param name="<%= b %>" value="<%= x %>" />
    <%
    where x := <arg-to-value-string> a



rules
  /**
   * Generate facelet template clients
   */
  GenerateCode = template-to-facelet; fail

  template-to-facelet :
    def |[ define template x(farg*) { elem* } ]| -> <generate-facelets-template> body
    where x := <ThisPage>
    with {| InToplevelTemplate
          : rules ( InToplevelTemplate := x )
          ; body := <elems-to-xhtml> elem*
          |}

  template-to-facelet :
    (n, t) -> 
%>
  <c:if test="<%= el %>">
    <ui:include src="<%= target %>">
      <%= params::* %>
	</ui:include>
  </c:if>
<%
    where def |[ define template x0(farg*) { elem* } ]| := <TemplateSignature> (n, t)
//        ; <debug> ["...........", def |[ define template x0(farg*) { elem* } ]|]
        ; x1 := <newname> n
        ; target := <concat-strings> [x1, ".xhtml"]
        ; {| ThisPage
           : rules ( ThisPage := x0 )
           ; <declare-template-definition; template-to-facelet> def |[ define template x1(farg*) { elem* } ]|
           |}
        ; params := <mapconcat(args-to-facelets)> farg*
        ; fn := <newname> "ifCondFun"
        ; param1* := <map({\ Arg(p, s) -> Var(y) where y := <rename-bound(|SimpleSort("Object"))> p \})> farg*
//        ; param2* := <map({\ Arg(p, s) -> Var(<RenameOverloadedTemplateVar> p) \})> farg*
//        ; <debug> ["__param*:", param1*]
        ; e := <generate-check-param-type-function> (param1*, farg*)
        ; <generate-page-bean> [<template-function-to-java> (<ThisPage>, farg*, fn, param1*, e)]
        ; el := <concat-strings> ["#{", <ThisPage>, ".", fn, "(", <map(arg-to-el); separate-by(|","); concat-strings> param1*, ")", "}"]

  args-to-facelets :
    Arg(x, s) ->
    %>
      <ui:param name="<%= x %>" value="#{<%= x %>}" />
    <%
//    where y := <RenameOverloadedTemplateVar> x
  
  generate-check-param-type-function :
    (var*, farg*) -> e0
    where e* := <zip({\ (Var(x), Arg(p, srt)) -> exp |[ x is a srt ]| \})> (var*, farg*)
        ; e0 := <combine-is-a-functions> e*
        
  combine-is-a-functions :
    [e0 | e*] -> exp |[ e0 && e1 ]|
    where e1 := <combine-is-a-functions> e*
  
  combine-is-a-functions :
    [e] -> e
      
    
/*
  template-to-facelet : //@todo: perhaps better to do this in a desugar step??
    (n, a) ->
%>
  <c:if test="<%= el %>">
    <%= <elems-to-xhtml> body::* %>
  </c:if>
<%
    where not( <elem> ((n,a), <bagof-TemplatesProcessed>) )
        ; t* := <map(?Arg(_,<id>))> a
        ; Define([Template()], name, fargs, body) := <TemplateSignature> (n, t*)
        ; <debug> ["_________", Define([Template()], name, fargs, body)]
        ; fn := <newname> "ifCondFun"
        ; if [head] := fargs then //@todo: don't just take the first argument!!!
            [Arg(p, SimpleSort(s))] := fargs
          else
            [Arg(p, SimpleSort(s)) | tail] := fargs
          end
        ; <debug> ["=========", p, SimpleSort(s)]
        ; param := Var(p){Type(SimpleSort(<get-superclass> s))}
        ; <debug> ["+++param", param]
        ; e := IsA(param, SimpleSort(s)){Type(SimpleSort("Bool"))}
        ; <generate-page-bean> [<template-function-to-java> (<ThisPage>, fargs, fn, [param], e)] //@todo: use emit-webdsl-code
        ; el := <concat-strings> ["#{", <ThisPage>, ".", fn, "(", <map(arg-to-el); separate-by(|","); concat-strings> [param], ")", "}"]
        ; <debug> ["_________el", el]
        ; rules ( TemplatesProcessed :+= (name, fargs) )
*/

  get-superclass :
    SimpleSort(s) -> SimpleSort(<find-superclass> s)
    
  get-superclass :
    GenericSort(k, [SimpleSort(s)]) -> GenericSort(k, [<get-superclass> SimpleSort(s)])

  find-superclass =
    Extends ; not(?"Object") ; find-superclass <+ id

//  is-template-processed =
//    ?def |[ define template x(farg*) { elem* } ]| ; where ( <elem> ( x, <bagof-ProcessedTemplates> ) )
  
  is-page-or-template =
    ?def |[ define mod* x(farg*) { elem* } ]| ; where ( [Page()] := mod* <+ [Template()] := mod* )

  is-overloaded-template =
    ?def |[ define template x(farg*) { elem* } ]| ; where (<bagof-TopLevelTemplateDefinitions;length;not(?1)> <strip-annos> x)
  
  is-call-to-overloaded-template =
    where ( bagof-TopLevelTemplateDefinitions;length;not(?0);not(?1) )
    
//  is-template-processed =
//    ?name ; <elem> ( name, <bagof-ProcessedTemplates> )

/*    
  template-to-xhtml :
    Define(mods, name, fargs, body) -> <elems-to-xhtml> body
    where <elem> [Local(), mods] <+ <elem> [Template(), mods]
*/

rules // template arguments

/*
  template-arg-to-xhtml :
    Arg(x, s) -> %> <h:inputHidden value="#{}" /> <%
    where x_set := <property-setter> x
        ; e := <concat-strings> [<ThisPage>, ".", x_set, "(", <TemplateArgument> (<ThisPage>, x)  , ")"]
*/
