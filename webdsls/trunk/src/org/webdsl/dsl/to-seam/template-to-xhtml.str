module org/webdsl/dsl/to-seam/template-to-xhtml

imports 
  libstrategolib 
  libwebdsl-front

rules

  generate-template-client(|template) :
    elems -> <emit-xhtml>
    %>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<ui:composition xmlns="http://www.w3.org/1999/xhtml"
     xmlns:c="http://java.sun.com/jstl/core"
     xmlns:ui="http://java.sun.com/jsf/facelets"
     xmlns:f="http://java.sun.com/jsf/core"
     xmlns:h="http://java.sun.com/jsf/html"
     xmlns:s="http://jboss.com/products/seam/taglib"
     xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
     xmlns:rich="http://richfaces.ajax4jsf.org/rich"
     xmlns:wdsl="http://www.webdsl.org/el" 
     att0>
  
  <div class="<%= x_class %> clearfix">
    <%= elems::* %>
  </div>

</ui:composition>
    <%
    with if <string-length; not(?0)> template then
           x := <concat-strings> [template, ".xhtml"]
           ; att0 := @> template="<%= x%>" <@
         else
           att0 := []
         end
       ; x_class := <match-definition-to-string> (<ThisPage>, <ThisArguments>)
          
 
rules
  /**
   * Generate html for a page
   */
  GenerateCode = page-to-html; fail
  
  page-to-html =
    ?def |[ define page x(farg*) { elem* } ]|
    ; where ( x := <ThisPage> )
    ; ( elems := <elems-to-xhtml> elem*
         ; external-style := <get-styles> elem*
         ; x_class := <match-definition-to-string> (x, farg*)
         ; {| ThisPage
            : rules ( ThisPage := <concat-strings> [x, "Template"] )
            ; <emit-xhtml>
            %>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
                      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html" 
      xmlns:f="http://java.sun.com/jsf/core" 
      xmlns:c="http://java.sun.com/jstl/core"
      xmlns:s="http://jboss.com/products/seam/taglib"
      xmlns:a4j="https://ajax4jsf.dev.java.net/ajax"
      xmlns:rich="http://richfaces.ajax4jsf.org/rich"
      xmlns:wdsl="http://www.webdsl.org/el">

  <head>
	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"></meta>
	<title><ui:insert name="title"><%= x::cdata %></ui:insert></title>
	<%= external-style::* %>
	<ui:insert name="includes" />
  </head>

  <body>
    <div class="<%= x_class %> clearfix">
      <%= elems::* %>
    </div>
  </body>

</html>
            <% |} )


/**
   * Generate facelet for a page
   */
  GenerateCode = page-to-facelet; fail
  
  page-to-facelet :
    def |[ define page x(farg*) { elem* } ]| -> output
    where template := <concat-strings> [x, "Template"]
        ; {| AllowIncludes 
           : rules ( AllowIncludes := x )
           ; elems' := <collect(?Define(_, _, _, _) <+ ?TemplateCall("title", _, _)); elems-to-xhtml> elem*
           |}
        ; templates := <collect(find-toplevel-templates(|[])); flatten-list> elem*
        ; <add-stylesheet> ("common_", x)
        ; <add-stylesheets-for-all-pages> x
//        ; rules ( StylesheetIncludes :+ x -> "webdsl" )        
        ; elems := <flatten-list> [elems' | <find-includes> <flatten-list> [ x | templates ] ]
        ; {| ThisArguments
           : rules ( ThisArguments := farg* )
           ; output := <generate-template-client(|template)> elems
           |}


  find-includes :
    names ->
    %>
  <ui:define name="includes">
    <%= <mapconcat({\ (n,_) -> <css-include-to-xhtml> n \})> styles ::*  %>
    <%= <mapconcat({\ (n,_) -> <js-include-to-xhtml> n \})> scripts ::*  %>
    <%= <mapconcat({\ (n,_) -> <js-onload-to-xhtml> n \})> onload ::*  %>
  </ui:define>
    <%
    where styles := <construct-include-bag(bagof-StylesheetIncludes)> names
        ; scripts := <construct-include-bag(bagof-JavascriptIncludes)> names
        ; onload := <construct-include-bag(bagof-JavascriptOnloadBody)> names

  construct-include-bag(s) = 
    ?[ h | t ]
    ; !<bag-union> (<includes-to-bag(s)> h, <construct-include-bag(s)> t)

  construct-include-bag(s) =
    ?[ e ]
    ; <includes-to-bag(s)> e

  includes-to-bag(s) =
    ?name
    ; !<map(\ e -> (e, 1) \)> <s> name

  find-toplevel-templates(|history) =
    ?TemplateCall(name, args, body)
    ; t* := <map(type-of)> args
    ; Define(m, n, f, b) := <TemplateSignature <+ LocalTemplateSignature> (name, t*)
    ; not( <elem> ((n,f), history) )
    ; h := <concat> [[(n,f)], history]
    ; ![name | <collect(find-toplevel-templates(|h)); flatten-list <+ []> b]
    
  templatecall-args-to-facelets :
    (a, Arg(b, d)) ->
    %>
      <ui:param name="<%= b %>" value="<%= x %>" />
    <%
    where x := <arg-to-value-string> a


rules
  /**
   * Generate facelet for toplevel templates
   */
  GenerateCode = template-to-facelet; fail

  template-to-facelet :
    def |[ define template x(farg*) { elem* } ]| -> output
    where x := <ThisPage>
    with {| InToplevelTemplate, ThisArguments
          : rules (
              InToplevelTemplate := x
              ThisArguments := farg*
            )
          ; body := <elems-to-xhtml> elem*
          ; output := <generate-template-client(|"")> body
          |}

rules

  contains-template-call =
    where ( sometd(?TemplateCall(name, args, _))
          ; <TemplateSignature> (name, <map(type-of)> args) )
    
  get-superclass :
    SimpleSort(s) -> SimpleSort(<find-superclass> s)
    
  get-superclass :
    GenericSort(k, [SimpleSort(s)]) -> GenericSort(k, [<get-superclass> SimpleSort(s)])

  find-superclass =
    Extends ; not(?"Object") ; find-superclass <+ id

  is-page-or-template =
    ?def |[ define mod* x(farg*) { elem* } ]| ; where ( [Page()] := mod* <+ [Template()] := mod* )

  is-overloaded-template =
    ?def |[ define template x(farg*) { elem* } ]| ; where (<bagof-TopLevelTemplateDefinitions;length;not(?0);not(?1)> <strip-annos> x)
  
//  is-overloaded-template =
//    ?x ; where (<bagof-TopLevelTemplateDefinitions;length;not(?0);not(?1)> <strip-annos> x)
    
  is-call-to-overloaded-template =
    where ( bagof-TopLevelTemplateDefinitions;length;not(?0);not(?1) )
  
  is-toplevel-template =
    where ( bagof-TopLevelTemplateDefinitions;length;not(?0) )
  
  is-call-to-toplevel-template =
    ?TemplateCall(name, args, _) ; where ( <TemplateSignature> (name, <map(type-of)> args); <is-toplevel-template> name )
  