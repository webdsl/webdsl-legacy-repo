/**
 * Transformation of a Core WebDSL application to a collection of XML and Java files
 *
 * @author Eelco Visser
 */

module org/webdsl/dsl/to-seam/core-to-seam

imports
  libstrategolib
  Java-15
  libjava-front

imports
  org/webdsl/dsl/to-seam/-
  org/webdsl/dsl/modules/-
  libwebdsl-front

strategies

  set-DomainPackage(|pkg) = rules( DomainPackage := pkg )

  core-to-seam =
    ?Application(qid, sections)
    ; info(|"Now going to do code generation")
    ; rules(
        Package       := <qid-to-package-name> qid        
        BeanPackage   := <qid-to-package-name> Qualified(qid, "beans")
      )
    ; set-DomainPackage(|<qid-to-package-name> Qualified(qid, "domain"))

    ; try(sometd(create-email-call-rules)) // @TODO remove e-mail specific hook

    ; sections3 := <annotate-with-jsf-component-ids> sections
    ; sections4 := <alltd(setup-input-validation-generation)> sections3
//    ; rest      := <collect(emails-to-xml)> sections4 // @TODO remove email-specific hook
      // @todo make part of generate-code

    ; <generate-code> sections4
    // generate the application context java files that initialize global variables: 
    ; globals-to-java-app-init
    
    ; !Application(qid, sections)
    ; ![ <webdsl-to-textfile(|<concat-strings>[<get-config>"-i",".norm"])>
       , <get-facelets>
       , <get-seam-config-artifacts>
       , <get-java-artifacts>]

   generate-code =
     if ?Define(mods, name, args, elems); is-page-or-template then
       {| Parameter, ThisPage
        : rules ( ThisPage := name )
        ; not(GenerateCode)
        ; all(generate-code)
        |}
     else
       if ?Action(_, _, _) then
         {| InAction
          : rules ( InAction := True() )
          ; not(GenerateCode)
	      ; all(generate-code)
	      |}
	   else
	      not(GenerateCode)
	      ; all(generate-code)
	   end
     end

