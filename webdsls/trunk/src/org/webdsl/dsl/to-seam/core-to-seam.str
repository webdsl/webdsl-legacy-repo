/**
 * Transformation of a Core WebDSL application to a collection of XML and Java files
 *
 * @author Eelco Visser
 */

module org/webdsl/dsl/to-seam/core-to-seam

imports
  libstrategolib
  Java-15
  libjava-front

imports
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/utils/-
  org/webdsl/dsl/to-seam/-

strategies

  core-to-seam = 
    ?Application(qid, sections)
    
    ; rules(
        Package       := <qid-to-package-name> qid
        DomainPackage := <qid-to-package-name> Qualified(qid, "domain")
        BeanPackage   := <qid-to-package-name> Qualified(qid, "beans")
      )
      
    ; try(sometd(create-email-call-rules))
    
    ; sections2       := <functions-to-el; merge-globals> sections
    ; rewriterulefile := <pages-to-rewrite-rules> sections2
    ; debug(!"rewrite rules: ")
    ; rest            := <collect(page-to-xml <+ emails-to-xml)> sections2
    
    ; <generate-code> sections2
    
    ; !Application(qid, sections)
    
    ; ![ <webdsl-to-textfile(|<concat-strings>[<get-config>"-i",".norm"])>
       , <generate-page-actions-file>
       , sections2
       , rewriterulefile
       , rest
       , <get-java-artifacts>]

   //entity-to-code =
   //  !(<entity-to-java-Entity>
   //   ,<id>)

   //entity-to-code-failed =
   //  (?Entity(x_Class, _, _, _) <+ ?EntityNoSuper(x_Class, _, _))
   //  ; dbg(|"entity-to-code failed: ")

   //definitions-to-code =
   //  definition-to-code <+ ( ?Define(mod, x, args, body) ; !() )

   generate-code =
     if ?Define([Page()], x_page, args, elems1) then
       {| Parameter, Page
        : rules ( Page := x_page )
        ; not(GenerateCode)
        ; all(generate-code)
        |}
     else
       not(GenerateCode)
       ; all(generate-code)
     end

   //definition-to-code :
   //  d@Define([Page()], x, args, body) -> (<id>, p2xml)
   //  where p2xml := <page-to-xml>
   //; info(|["Code generation for ", x])

   //definition-to-code =
   //  ?Define([Email()], x, args, body)
   //  ; !(<id>, <emails-to-xml>)

   create-email-call-rules :
     def@Define(modifiers, x, args, elems1) -> def
     where <elem> (Page(), modifiers)
         ; <collect(create-email-call-rule(|x))> elems1

   create-email-call-rule(|x) =
     ?ThisCall("email", [ThisCall(defined_template_name, args)])
     ; where( template_file_name := <concat-strings> [defined_template_name, <new>]
/*            ; rules (
              EmailCallToTemplateName : thiscall -> (template_file_name, x)
            )*/
          ; if not(<GetEmailTemplateName> (defined_template_name, x)) then
              rules (
                GetEmailTemplateName : (defined_template_name, x) -> template_file_name
                GetEmailTemplatePage : template_file_name -> x
              )
//	        ; if <not(elem)> (template_file_name, <EmailTemplates <+ ![]> defined_template_name) then
                ; emailtemplates := [template_file_name | <EmailTemplates <+ ![]> defined_template_name]
                ; rules (
                  EmailTemplates : defined_template_name -> emailtemplates
                )
            end
          )

   generate-page-actions-file :
     Application(qid, sections) -> page-actions-file
     where <generate-page-list> Application(qid, sections)
       ; page-actions-file := <generate-page-actions-file>


