/**
 * Transformation of a Core WebDSL application to a collection of XML and Java files
 *
 * @author Eelco Visser
 */

module org/webdsl/dsl/to-seam/core-to-seam

imports
  libstrategolib
  Java-15
  libjava-front

imports
  org/webdsl/dsl/to-seam/-
  org/webdsl/dsl/modules/-
  libwebdsl-front

strategies

  set-DomainPackage(|pkg) = rules( DomainPackage := pkg )

  core-to-seam =
    ?Application(qid, sections)
    ; info(|"Now going to do code generation")
    ; rules(
        Package       := <qid-to-package-name> qid
        
        BeanPackage   := <qid-to-package-name> Qualified(qid, "beans")
      )

    ; set-DomainPackage(|<qid-to-package-name> Qualified(qid, "domain"))

    ; try(sometd(create-email-call-rules)) // @TODO remove e-mail specific hook

    ; sections2 := <functions-to-el; merge-globals> sections
      // @todo shouldn't this be part of dsl-to-core?

    ; rewriterulefile := <pages-to-rewrite-rules> sections2
    
    ; sections3 := <annotate-with-jsf-component-ids> sections2
    ; sections4 := <alltd(setup-input-validation-generation)> sections3
    ; rest      := <collect(page-to-xml <+ emails-to-xml)> sections4 // @TODO remove email-specific hook
      // @todo make part of generate-code

    ; <generate-code> sections4
    ; !Application(qid, sections)

    ; ![ <webdsl-to-textfile(|<concat-strings>[<get-config>"-i",".norm"])>
       , <generate-page-actions-file>
       , sections2
       , rewriterulefile
       , rest
       , <get-java-artifacts>]

   generate-code =
     if ?Define([Page()], x_page, args, elems1) then
       {| Parameter, ThisPage
        : rules ( ThisPage := x_page )
        ; not(GenerateCode)
        ; all(generate-code)
        |}
     else
       not(GenerateCode)
       ; all(generate-code)
     end


   generate-page-actions-file :
     Application(qid, sections) -> page-actions-file
     where <generate-page-list> Application(qid, sections)
       ; page-actions-file := <generate-page-actions-file>

