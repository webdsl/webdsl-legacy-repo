module org/webdsl/dsl/to-seam/elements-to-xhtml

imports
  libstrategolib

imports
  libwebdsl-front

rules

  css-include-to-xhtml :
    e ->
    %>
    <link href="<%= <AppRoot> %>/stylesheets/<%= e %>.css" rel="stylesheet" type="text/css"></link>
    <%

  js-include-to-xhtml :
    e ->
    %>
    <script src="<%= <AppRoot> %>/javascript/<%= e %>.js" type="text/javascript"></script>
    <%

  js-onload-to-xhtml :
    e -> 
    %>
    <script type="text/javascript">
      window.onload = function () {
        <%= e %>
      }
    </script>
    <%

  // @todo this should be made more configurable probably

rules // embedding expressions in presentation

  // @todo escape < into &lt; and > to &gt;

  arg-to-value-string =
    arg-string-to-value-string
    <+ arg-to-el-string

  arg-string-to-value-string :
    Cast(x, s) -> <arg-to-value-string> x

  arg-string-to-value-string :
    String(x) -> x

  arg-string-to-value-string :
    Bool(x) -> x

  arg-to-el-string :
    e -> <concat-strings>["#{", x, "}"]
    where <not(?Add(_, _))> := e
        ; x := <arg-to-el> e

  arg-to-el-string :
    Add(e1, e2) -> <concat-strings> [a, b]
    where a := <arg-to-value-string> e1
        ; b := <arg-to-value-string> e2

  arg-to-el :
    Var(x) -> <concat-strings> [<ThisPage>,".",x]
      where <IsSessionVariable> x

  arg-to-el :
    Var(x) -> <concat-strings> [<ThisPage>,".",x]
      where <IsGlobalFunction> x

  arg-to-el :
    Cast(x, s) -> <arg-to-el> x

  arg-to-el :
    Var(x) -> x
       where not(<IsSessionVariable> x)
           ; not(<IsGlobalFunction> x)

  arg-to-el :
    FieldAccess(e, f) -> <concat-strings>[x, ".", f]
    where not("length" := f)
        ; x := <arg-to-el> e

  arg-to-el :
    FieldAccess(e, "length") -> <concat-strings>[x, "Length"]
    where x := <arg-to-el> e


  arg-to-el : // Does this actually work?
    Call(e, f, args1) -> <concat-strings>[<arg-to-el> e, ".", f, "(", args2, ")"]
    where args2 := <map(arg-to-el); separate-by(|","); concat-strings> args1


strategies // lists of elements

  elems-to-xhtml =
    filter-concat-warn(elem-to-xhtml <+ undefined-template-call | "elem-to-xhtml undefined: ")

  elems-to-xhtml(wrap) =
    filter-concat-warn((elem-to-xhtml <+ undefined-template-call); wrap | "elem-to-xhtml undefined: ")

  undefined-template-call :
    t@TemplateCall(f, args,_, body) -> []
    where add-warning(|["template not defined"])

strategies // title

  elem-to-xhtml :
    TemplateCall("title", _,_, elems) ->
    %>
  <ui:define name="title">
    <%= <elems-to-xhtml> elems::* %>
  </ui:define>
  <%
    where AllowIncludes

  elem-to-xhtml :
    TemplateCall("title", _,_, elems) -> []
    where not(AllowIncludes)
    
strategies // style

  get-styles = collect(get-style); concat
  
  get-style :
    TemplateCall("style", [],_, [Text(stylesheet)]) ->
    %>
      <link href="<%= <AppRoot> %>/stylesheets/<%= stylesheet %>" rel="stylesheet" type="text/css"></link>
    <%

  elem-to-xhtml :
    TemplateCall("style", _,_, _) -> []


rules
  elem-to-xhtml :
    TemplateCall("dummy", [],_, elems) -> <elems-to-xhtml> elems

rules // block

  // @obsolete; use block{ ... } instead of div{ ... }
  elem-to-xhtml :
    TemplateCall("div", [String(x)],_, elems) ->
    %>
    <div class="<%= x %>"><%= <elems-to-xhtml> elems ::*%></div>
    <%

  elem-to-xhtml :
    TemplateCall("block", [],_, elems) ->
    %>
    <div class="block"><%= <elems-to-xhtml> elems ::*%></div>
    <%

  elem-to-xhtml :
    TemplateCall("block", [String(x)],_, elems) ->
    %>
    <div class="<%= x %> block"><%= <elems-to-xhtml> elems ::*%></div>
    <%

rules // text

  elem-to-xhtml :
    Text(x) -> %> <h:outputText class="text" value="<%=x%>"/> <%

rules // text

  // convert an expression to text (string value of the expression)

  elem-to-xhtml :
    TemplateCall("text", [arg],_, []) ->
    %> <h:outputText class="text" value="<%= val-string %>"/> <%
    where val-string := <arg-to-value-string> arg

  elem-to-xhtml :
    TemplateCall("text", [e],_, []) ->
    %> <h:outputText class="text" value="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>"/> <%
    where info(|["text(", e, "): ", <ThisPage>, ", ", e])

rules // spacers

  elem-to-xhtml :
    TemplateCall("spacer", [],_, []) ->
    %> <rich:spacer id="<%= spacer-id %>" /> <%
    where spacer-id := <newname> "spacer"

rules // images

  elem-to-xhtml :
    TemplateCall("image",[e],_,[]) -> %> <h:graphicImage value="<%=x%>"/> <%
    where x := <arg-to-value-string> e

rules // lists

  elem-to-xhtml :
    TemplateCall("list", [],_, elems) ->
    %>
      <ul>
        <%= <elems-to-xhtml> elems ::*%>
      </ul>
    <%

  elem-to-xhtml :
    TemplateCall("listitem", [],_, elems) ->
    %>
      <li>
        <%= <elems-to-xhtml> elems ::*%>
      </li>
    <%

rules // groups

  elem-to-xhtml :
    TemplateCall("group", [arg],_, elems) ->
    %>
      <fieldset>
        <legend><%= <arg-to-value-string> arg::cdata %></legend>
        <ol>
          <%= <elems-to-xhtml> elems ::*%>
        </ol>
      </fieldset>
    <%

  elem-to-xhtml :
    TemplateCall("group", [],_, elems) ->
    %>
      <fieldset class="fieldset_no_legend_">
        <%= <elems-to-xhtml> elems ::*%>
      </fieldset>
    <%
    
  elem-to-xhtml :
    TemplateCall("groupitem", [],_, elems) ->
    %>
      <li>
        <%= <elems-to-xhtml> elems ::*%>
      </li>
    <%

rules // label

  elem-to-xhtml :
    TemplateCall("label", [arg],_, elems) ->
    %>
      <label for=""><%= <arg-to-value-string> arg::cdata %></label>
      <%= <elems-to-xhtml> elems ::*%>
    <%

rules // sections and headers

  elem-to-xhtml :
    TemplateCall("header", [],_, elems) ->
    %>
      <~n:tag><%= <elems-to-xhtml> elems ::*%></~n:tag>
    <%
    where not(DataTable) ; not(TableScope)
        ; n := <SectionDepth <+ !1>
        ; tag := <concat-strings>["h", <int-to-string> n]

  elem-to-xhtml :
    TemplateCall("section", [],_, elems1) ->
    %>
      <div class="<%= sectionlevel %> section"><%= elems2 ::*%></div>
    <%
    where {| SectionDepth
           : rules( SectionDepth := <(SectionDepth <+ !0); inc> )
           ; sectionlevel := <concat-strings>["section", <SectionDepth; int-to-string>]
           ; elems2 := <elems-to-xhtml> elems1
           |}

  elem-to-xhtml :
    TemplateCall("par", [],_, elems1) ->
    %>
      <p><%= elems2 ::*%></p>
    <%
    where elems2 := <elems-to-xhtml> elems1

  elem-to-xhtml :
    TemplateCall("container", [],_, elems1) ->
    %>
      <span><%= elems2 ::*%></span>
    <%
    where elems2 := <elems-to-xhtml> elems1

rules // tables

  elem-to-xhtml :
    TemplateCall("table", [],_, elems) ->
    %>
      <table><%= e* ::*%></table>
    <%
    where {| TableScope
           : rules ( TableScope := 1 )
           ; e* := <elems-to-xhtml> elems
           |}

  elem-to-xhtml :
    TemplateCall("header", [],_, elems) ->
    %>
      <tr><%= <elems-to-xhtml(table-header-wrap)> elems ::*%></tr>
    <%
    where TableScope

  elem-to-xhtml :
    TemplateCall("row", [],_, elems) ->
    %>
      <tr><%= <elems-to-xhtml(table-cell-wrap)> elems ::*%></tr>
    <%

   table-cell-wrap :
     elems -> %> <td><%= elems ::*%></td> <%

   table-header-wrap :
     elems -> %> <th><%= elems ::*%></th> <%

rules // iteration

  // @todo: other For expressions
  elem-to-xhtml : //@todo: lifting!
    For(x, s, e, Filter(True(), obe, l), elems) -> // No "where" clause
    %>
      <c:forEach var="<%= x %>" items="<%= <arg-to-el-string> e %>">
        <%= <elems-to-xhtml> elems ::*%>
      </c:forEach>
    <%
    where InToplevelTemplate
        ; <contains-template-call> elems

  elem-to-xhtml :
    For(x, s, e, Filter(we, obe, l), elems1) ->
    %>
      <ui:repeat var="<%= x %>" value="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>">
        <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<ThisPage>, we) %>">
          <%= elems2 ::*%>
        </h:panelGroup>
      </ui:repeat>
    <%
    where not(True() := we)
        //; el := <arg-to-value-string> e
        ; elems2  := <elems-to-xhtml> elems1

  elem-to-xhtml :
    For(x, s, e, Filter(True(), obe, l), elems1) -> // No "where" clause
    %>
      <ui:repeat var="<%= x %>" value="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>">
        <%= elems2 ::*%>
      </ui:repeat>
    <%
    where elems2  := <elems-to-xhtml> elems1

  elem-to-xhtml :
    ForAll(x, s, Filter(we, obe, l), elems) ->
    %>
      <ui:repeat var="<%= x %>" value="#{<%= <ThisPage> %>.<%= x %>List}">
        <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<ThisPage>, we) %>">
          <%= columns ::*%>
        </h:panelGroup>
      </ui:repeat>
    <%
    where not(True() := we)
        ; columns := <elems-to-xhtml(wrap-column)> elems

  elem-to-xhtml :
    ForAll(x, s, Filter(True(), obe, l), elems) ->
    %>
      <ui:repeat var="<%= x %>" value="#{<%= <ThisPage> %>.<%= x %>List}">
        <%= columns ::*%>
      </ui:repeat>
    <%
    where columns := <elems-to-xhtml(wrap-column)> elems

  wrap-column :
    elems ->
    %>
      <h:column><%= elems ::*%></h:column>
    <%

rules // select from

  elem-to-xhtml :
    SelectFromList(e1, e2) ->
    %>
       <h:selectManyListbox value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" />
          <s:convertEntity />
        </h:selectManyListbox>
    <%
    where GenericSort(_, _) := <type-of> e1
        ; x_prop    := <concat-strings> [<arg-to-el> e1, "List"]
        ; x_List    := <concat-strings> [<arg-to-el> e2, "List"]
        ; x         := <newname> "selectvar"

  elem-to-xhtml :
    SelectFromList(e1, e2) ->
    %>
       <h:selectOneMenu value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" noSelectionLabel="" />
          <s:convertEntity />
        </h:selectOneMenu>
    <%
    where SimpleSort(_) := <type-of> e1
        ; x_prop    := <concat-strings> [<arg-to-el> e1]
        ; x_List    := <concat-strings> [<arg-to-el> e2, "List"]
        ; x         := <newname> "selectvar"

rules // select

  elem-to-xhtml :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectManyListbox value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= <ThisPage> %>.<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" />
          <s:convertEntity />
        </h:selectManyListbox>
    <%
    where GenericSort(_, _) := <type-of> e
        ; X         := <capitalize-string> x
        ; x_List    := <concat-strings>[x, "List"]
        ; x_prop    := <concat-strings> [<arg-to-el> e, "List"]

  elem-to-xhtml :
    Select(x, SimpleSort(s), label, e) ->
    %>
       <h:selectOneMenu value="#{<%= x_prop %>}">
          <s:selectItems value="#{<%= <ThisPage> %>.<%= x_List %>}"
                         var="<%= x %>" label="#{<%= x %>.name}" noSelectionLabel="" />
          <s:convertEntity />
        </h:selectOneMenu>
    <%
    where SimpleSort(_) := <type-of> e
        ; X         := <capitalize-string> x
        ; x_List    := <concat-strings>[x, "List"]
        ; x_prop    := <arg-to-el> e

rules // if

  elem-to-xhtml :
    IfTempl(e, elems, elems2) ->
    %>
      <h:panelGroup rendered="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>"><%= elems2 ::*%></h:panelGroup>
    <%
    where not(<contains-template-call> elems)
        ; elems2 := <elems-to-xhtml> elems
    
  elem-to-xhtml : //@todo: lifting!
    IfTempl(e, elems, elems2) ->
    %>
      <c:if test="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>">
        <%= <elems-to-xhtml> elems ::*%>
      </c:if>
    <%
    where InToplevelTemplate
        ; <contains-template-call> elems

rules // template

  elem-to-xhtml :
    def |[ define local x(farg*) { elem* } ]| ->
    %>
    
    <ui:define name="<%= x %>">
    <div class="<%= x %> clearfix">
      <%= elems ::* %>
    </div>
  </ui:define>
    <%
    where AllowIncludes
    with {| InLocalTemplate
          : rules ( InLocalTemplate := x )
          ; elems := <elems-to-xhtml> elem*
          |}
          
rules // template call

  elem-to-xhtml :
    TemplateCall(name, args,_, _) ->
    %>
      <ui:insert name="<%= name %>">
         <%= include::* %>
    </ui:insert>
    <%
    where ( not(<IsPage> <ThisPage>) <+ InLocalTemplate )
//        ; <debug> [">>>>", <IsPage> <ThisPage>, <InLocalTemplate>]
//        ; <debug> ["+++++++++tc: ", name, args]
        ; t* := <map(type-of)> args
//        ; <debug> ["________t*", t*]
        ; if Define(mods, n, fargs, body) := <TemplateSignature> (name, t*) then
            target := <concat-strings> [name, ".xhtml"]
//            ; <debug> ["________", n, fargs]
            ; params := <try(zip(templatecall-args-to-facelets); concat)> (args, fargs)
            ; include := 
              %>
              <ui:include src="<%= target %>">
                  <%= params::* %>
            </ui:include>
          <%
      else
        if Define(mods, n, fargs, body) := <LocalTemplateSignature> (name, t*) then
             include := []
           end
          end
//        ; <debug> ["_____", n, fargs]

  elem-to-xhtml :
    TemplateCall(name, args,_, _) ->
    %>
      <ui:include src="<%= target %>">
        <%= params::* %>
      </ui:include>
    <%
    where is-call-to-toplevel-template ; <IsPage> <ThisPage>
    with target := <concat-strings> [name, ".xhtml"]
       ; Define([Template()], n, fargs, body) := <TemplateSignature> (name, <map(type-of)> args)
       ; params := <try(zip(templatecall-args-to-facelets); concat)> (args, fargs)
    
rules // vardecl

  elem-to-xhtml :
    VarDeclInit(a, s, expr) ->
    %>
      <h:inputHidden value="<%= val %>" />
    <%
    where x_set := <concat-strings> [<ThisPage>, ".", <property-setter> a]
        ; val := <concat-strings> ["#{", x_set, "(", <ConditionExpressionToString> (<ThisPage>, expr), ")}"]

rules // links

  // link to a url, maybe constant, or obtained from an entity field

  elem-to-xhtml :
    TemplateCall("navigate", [ThisCall("url",[e])],_, elems) ->
    %> <h:outputLink class="navigate" value="<%=x%>"><%=
        <elems-to-xhtml> elems ::*
    %></h:outputLink> <%
    where not(ThisCall(p,args) := e)
        ; x := <arg-to-value-string> e

  elem-to-xhtml :
    t@TemplateCall("navigate", [ThisCall("url",[e@ThisCall(p,args)])],_, elems) ->
    %>
      <h:outputLink class="navigate" value="#{<%= <ThisPage> %>.hostName}<%=url%>">
        <%= <elems-to-xhtml> elems ::* %>
      </h:outputLink>
    <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)

  elem-to-xhtml :
    TemplateCall("navigate",[ThisCall(p,args)],_,elems) ->
    %> <h:outputLink class="navigate" value="<%= url %>"><%=
        <elems-to-xhtml> elems ::*
    %></h:outputLink> <%
    where <IsPage> p
        ; def |[ define mod* x(farg*) { elem* } ]| := <TemplateSignature> (p, <map(type-of)> args)
        ; params := <zip(bind-param)> (farg*, args)
        ; url := <page-call-to-url> (p, params)

  bind-param :
    (Arg(x, _), e) -> (x, el)
    where el := <arg-to-value-string> FieldAccess(e, "id")

  elem-to-xhtml :
    TemplateCall("navigatebutton",[ThisCall(p,args), e],_,[]) ->
    %> <input type="button" onclick="location = '<%= url %>';" value="<%= txt %>"/> <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)
        ; txt := <arg-to-value-string> e

  elem-to-xhtml :
    TemplateCall("url",[e],_,[]) ->
    %> <h:outputText value="<%= url %>" /> <%
    where not(ThisCall(p,args) := e)
        ; url := <arg-to-value-string> e

  elem-to-xhtml :
    TemplateCall("url",[ThisCall(p,args)],_,[]) ->
//    %> <h:outputText value="http://#{<%= <ThisPage> %>.facesContext.externalContext.getRequestHeaderMap("host")}<%= url %>" /> <%
    %> <h:outputText value="#{<%= <ThisPage> %>.hostName}<%= url %>" /> <%
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(bind-param)> (fargs, args)
        ; url := <page-call-to-url> (p, params)


//  bind-param :
//    (Arg(x, s@SimpleSort(x_Class)), e) ->
//    %><f:param name="<%= x %>" value="<%= el %>" /><%
//    where <defined-java-type> s
//        //; x_class := <decapitalize-string> x_Class
//        ; el := <arg-to-value-string> FieldAccess(e, "id")
//
  // constraint: only pass parameters of entity types (simple sorts)

rules // forms

  elem-to-xhtml :  // the <f:facet> puts validation errors behind their inputs
    tc@TemplateCall("form", [],_, elems) ->
    %>
      <h:form enctype="multipart/form-data" att0>
        <%= hidden-ids ::*%>
        <f:facet name="afterInvalidField"><s:message/></f:facet>
        <%= <elems-to-xhtml> elems ::*%>
      </h:form>
    <%
    where if InToplevelTemplate then
            hidden-ids := <mapconcat(arg-to-xhtml)> <bagof-TemplateArguments> <ThisPage>
          else
            hidden-ids := <mapconcat(arg-to-xhtml)> <TemplateArguments> <ThisPage>
          end
        ; if <get-jsf-component-id-1> tc then 
            att0 := @>  id="<%= <get-jsf-component-id-1> tc %>" <@
          else att0:= [] end

  arg-to-xhtml :
    Arg(e, s) -> %> <input type="hidden" name="<%= e %>" value="#{<%= <ThisPage>%>.<%= e%>}" /> <%
    where <builtin-java-type> s

  arg-to-xhtml :
    Arg(i, s) -> %> <input type="hidden" name="<%= e1 %>" value="#{<%= <ThisPage>%>.<%= i%>.id}" /> <%
    where <defined-java-type> s
        ; e1 := <concat-strings>[i, "_id"]

  elem-to-xhtml :
    TemplateCall("action",[e1,e2],_,[]) ->
    %>
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

  elem-to-xhtml :
    TemplateCall("action",[e1,e2,e3],_,[]) ->
    %>
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

  elem-to-xhtml :
    TemplateCall("action",[e1,e2,e3],_,[]) ->
    %>
       <s:button type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <is-cancel-action> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

    // @todo this is a big hack! the s:button component invokes the
    // corresponding action, but does not send the form information, does
    // canceling the form edits; however, this should NOT be expressed in the
    // name of the action method

  elem-to-xhtml :
    TemplateCall("actionLink",[e1,e2],_,[]) ->
    %>
       <h:commandLink type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where <not(is-cancel-action)> e2
        ; e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

   is-cancel-action =
     ?Call(Var(component), "cancel", [])

   elem-to-xhtml :
    TemplateCall("action",[e1,e2],_,[]) ->
    %>
       <h:commandButton value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

   elem-to-xhtml :
     Action(name, args, body) -> []

rules // captcha

  elem-to-xhtml :
    TemplateCall("captcha", [],_, []) ->
    %>
      <div class="captcha">
        <div>
          <h:graphicImage value="/seam/resource/captcha?#{captcha.id}"/>
        </div>
        <div>
          <h:outputLabel for="verifyCaptcha">Enter the above letters</h:outputLabel>
          <h:inputText id="verifyCaptcha" value="#{captcha.response}" required="true">
            <s:validate />
          </h:inputText>
          <div class="validationError"><h:message for="verifyCaptcha"/></div>
        </div>
      </div>
    <%

rules // helper rules for input

  input-of-required-property(|e)=
    if <page-var-access-to-class-prop-tuple;PropertyIsRequired> e
    then
      !"true"
    else
      !"false"
    end

  get-type-of-right-side-field-access:
    fa@FieldAccess(e, f) -> thetype
    where SimpleSort(thetype) := <type-of> fa

  page-var-access-to-class-prop-tuple :
    FieldAccess(e, f) -> (<get-type-of-right-side-field-access> e,f)

rules // input

    // @todo configure requiredness of fields

    // @todo support different types of input based on type
    // maybe deal with that through desugaring, i.e., have more
    // specific inputX template calls

    // @todo also special support for Email, URL, Image

  elem-to-xhtml :
    TemplateCall("input",[e],_,[]) ->
    %>
      <s:decorate>
        <h:inputText styleClass="inputText" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where warn(|["underived input element"])
        ; estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>

/*    %>
      <s:decorate>
        <h:inputText styleClass="inputString" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)> */

    // @todo validate image

    // @todo upload real image file


rules // output

  elem-to-xhtml :
    TemplateCall("output",[e],_,[]) ->
    %>
      <h:outputText styleClass="output" value="<%= estring %>"/>
    <%
    where warn(|["underived output element"])
        ; estring := <arg-to-value-string> e

rules
  /**
   * Generate URL rewrite rules
   */   
   GenerateCode = page-to-rewrite-rule; fail
   
   page-to-rewrite-rule =
     ?Define([Page()], x, [], body)
     ; with ( rules ( PageRewriteRules :+=
              %>
      <rule>
        <from>/<%= x::cdata %>/?$</from>
        <to>/<%= x::cdata %>.seam</to>
      </rule>
      <rule>
        <from>/<%= x::cdata %>/?\?(.*)$</from>
        <to>/<%= x::cdata %>.seam?$2</to>
      </rule>
              <% ) )
      
   page-to-rewrite-rule =
     ?Define([Page()], x, args, body)
     ; with ( Arg(fi, t) := <Hd> args
          ; if <builtin-java-type> t then
              first := fi
            else
              first := <concat-strings> [fi, "_id"]
            end
            ; rules ( PageRewriteRules :+=
      %>
      <rule>
        <from>/<%= x::cdata %>/([^\?]+)$</from>
        <to>/<%= x::cdata %>.seam?<%= first::cdata %>=$1</to>
      </rule>
      <rule>
        <from>/<%= x::cdata %>/([^\?]+)\?(.*)$</from>
        <to>/<%= x::cdata %>.seam?<%= first::cdata %>=$1&amp;$2</to>
      </rule>
      <% ) )

   rewrite-rules-to-xml =
     with ( {| ThisPage
             : rules ( ThisPage := "urlrewrite" )
             ; rule* := <bagof-PageRewriteRules; flatten-list>
             ; <emit-seam-config>
               %>
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE urlrewrite PUBLIC "-//tuckey.org//DTD UrlRewrite 2.6//EN"
                            "http://tuckey.org/res/dtds/urlrewrite2.6.dtd">
<urlrewrite>
  <%= rule* ::*%>
</urlrewrite>
               <% |} )


rules
  /**
   * Generate page action config file
   */
   GenerateCode = page-to-action-rule; fail
   
   page-to-action-rule =
     ?Define([Page()], x, args, elems)
     ; with ( viewid := <concat-strings>["/", x, ".xhtml"]
            ; pageaction := <concat-strings>[x, ".forceInitialization()"]
            ; page-parameters := <mapconcat(arg-for-page-action(|x))> <TemplateArguments> x
            ; rules ( PageActions :+= 
              %>
    <page view-id="<%= viewid %>" action="#{<%= pageaction %>}">
        <%= page-parameters::* %>
    </page>
              <%
            ) )

   generate-page-actions-file =
     with ( {| ThisPage
             : rules ( ThisPage := "pages" )
             ; action* := <bagof-PageActions; flatten-list>
             ; <emit-seam-config>
               %>
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE page PUBLIC "-//JBoss/Seam Pages Configuration DTD 1.2//EN"
                      "http://jboss.com/products/seam/pages-2.0.dtd">
<pages>
  <%= action* ::*%>
</pages>
               <% |} )

   arg-for-page-action(|page) :
     Arg(i, s) -> %> <param name="<%= e1 %>" value="#{<%= page %>.<%= e1 %>}" /> <%
     where <defined-java-type> s
      with e1 := <concat-strings>[i, "_id"]

   arg-for-page-action(|page) :
     Arg(e, s) -> %> <param name="<%= e %>" value="#{<%= page %>.<%= e %>}" /> <%
     where <builtin-java-type> s
    
