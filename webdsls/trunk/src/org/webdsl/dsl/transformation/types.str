/**

  Type rules for WebDSL
  
*/

module org/webdsl/dsl/transformation/types

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL

signature
  constructors
    Type : Sort -> Annotation
    
strategies // register all declared entities

  inherit-object :
    EntityNoSuper(x_class, props) -> Entity(x_class, "Object", props)
        
  declare-entity = where(
    try(inherit-object)
    ; ?Entity(x_class, x_super, props)
    ; rules(
        IsEntity : 
          x_class
          
        Properties :
          x_class -> props
               
        Extends :
          x_class -> x_super
          
        DefinedJavaType : 
          SimpleSort(x_class) -> type|[ x_class ]|
      )
    ; where( 
        <map(declare-property(|x_class))> [NameProperty() | <inherited-properties> x_class]
      )
  )
  
  inherited-properties =
    <conc>(<Properties>, <Extends; inherited-properties>)
    
  inherited-properties :
    "Object" -> []
   
  /**
   * @obsolete
   */
   
  properties = Properties 
  
  declare-property(|x_class) =
    ?Property(x, k, s, annos)
    ; rules(
        TypeOfProperty : (x_class, x) -> s
      )
    ; where(try(declare-list-property(|x_class)))
    
  declare-list-property(|x_class) =
    ?Property(x, k, GenericSort(coll, [s@SimpleSort(_)]), annos)
    ; where( 
        y := <concat-strings>[x, "List"] 
      ; t := GenericSort("List", [s])
      )
    ; rules(
        TypeOfProperty : (x_class, y) -> t
      )

overlays 

  NameProperty =
    Property("name", Simple(), SimpleSort("String"), [])
      
strategies // register top-level template definitions

  declare-template-definitions =
    alltd(declare-template-definition)
  
  declare-template-definition =
    ?def@Define(mods, name, fargs, body)
    ; rules(
        TemplateDefinition : name -> def
        TemplateArguments  : name -> fargs
      )
    ; try(declare-page-definition)

  declare-page-definition =
    ?Define([Page()], name, args, body)
    ; rules(
        IsPage : name
      )

strategies

  declare-action =
    ?def@Action(name, fargs, body)
    ; where( t1* := <map(?Arg(_,<id>))> fargs )
    ; rules(
        ActionDefinition  : name -> def
        ActionArguments  : name -> fargs
        
        CheckActionSignature : 
          (None(), name, t2*) -> SimpleSort("void")
          where <zip(type-compatible)> (t1*, t2*)
      )
      
strategies

  java-type =
    defined-java-type <+ builtin-java-type <+ object-type
    
  defined-java-type =
    DefinedJavaType

  persistence-annotations =
    builtin-persistence-annotations <+ ![]
    
  java-type-default-value =
    defined-java-type-default-value 
    <+ builtin-java-type-default-value
    
  defined-java-type-default-value :
    s@SimpleSort(y) -> |[ new y() ]|
    where <defined-java-type> s

rules

  object-type :
    SimpleSort("Object") -> type|[ Object ]|

  builtin-java-type : 
    SimpleSort("Int") -> type|[ int ]|
   
  builtin-java-type-default-value :
    SimpleSort("Int") -> |[ 0 ]|

  builtin-java-type : 
    SimpleSort("Bool") -> type|[ boolean ]|
    
  builtin-java-type-default-value :
    SimpleSort("Bool") -> |[ false ]|
    
  builtin-java-type : 
    SimpleSort("String") -> type|[ String ]|

  builtin-java-type-default-value :
    SimpleSort("String") -> |[ "" ]|

  builtin-java-type : 
    SimpleSort("Secret") -> type|[ String ]|

  builtin-java-type-default-value :
    SimpleSort("Secret") -> |[ "" ]|

  builtin-java-type : 
    SimpleSort("Text") -> type|[ String ]|
    
  builtin-java-type-default-value :
    SimpleSort("Text") -> |[ ""  ]|

  builtin-persistence-annotations :
    SimpleSort("Text") -> [anno|[ @Column(length = 1000000) ]|]

  builtin-java-type : 
    SimpleSort("Date") -> type|[ java.util.Date ]|
    
  builtin-java-type-default-value :
    SimpleSort("Date") -> |[ new java.util.Date() ]|

  builtin-java-type : 
    SimpleSort("URL") -> type|[ String  ]|
    
  builtin-java-type-default-value :
    SimpleSort("URL") -> |[ "" ]|

  builtin-java-type : 
    SimpleSort("Image") -> type|[ String ]|
    
  builtin-java-type-default-value :
    SimpleSort("Image") -> |[ "" ]|

  builtin-java-type : 
    SimpleSort("Email") -> type|[ String ]|
            
  builtin-java-type-default-value :
    SimpleSort("Email") -> |[ "" ]|

  builtin-java-type :
    GenericSort("List", [s]) -> type|[ java.util.List<t> ]|
    where t := <java-type> s
    
  builtin-java-type-default-value :
    GenericSort("List", [s]) -> |[ new java.util.ArrayList<t>() ]|
    where t := <java-type> s

  builtin-java-type :
    GenericSort("Set", [s]) -> type|[ java.util.Set<t> ]|
    where t := <java-type> s

  builtin-java-type-default-value :
    GenericSort("Set", [s]) -> |[ new java.util.HashSet<t>() ]|
    where t := <java-type> s

  builtin-java-type :
    GenericSort("Map", [s1, s2]) -> type|[ java.util.Map<t1, t2> ]|
    where t1 := <java-type> s1
        ; t2 := <java-type> s2
        
  builtin-java-type-default-value :
    GenericSort("Map", [s1,s2]) -> |[ new java.util.HashMap<t1,t2>() ]|
    where t1 := <java-type> s1
        ; t2 := <java-type> s2
        
rules // typechecking context

  tc-context =
    TcContext <+ !"" 
    
  add-tc-context = ?msg; 
    if x := <TcContext> then
      <concat-strings>[x | msg]
    else 
      <concat-strings>msg
    end
    
  in-tc-context(s|msg) =
    {| TcContext
     : rules( TcContext := <add-tc-context> msg )
     ; s
     |}
    
  typecheck-error(|msg) =
    err-msg(|["module ", <Module>, "/", <tc-context>, ": " | msg])
    ; rules( TypecheckError := True() )
    
rules 

  type-of :
    e{t*} -> t
    where t := <fetch-elem(?Type(<id>))> t*
  
rules

  typecheck =
    typecheck-application
    ; if TypecheckError then
        typecheck-error(|["typechecking failed; repair errors above"])
        ; fail
      end
  
  typecheck-application =
    Application(?qid, {| Module : rules( Module := qid ); map(typecheck-section) |})
    <+ ?x; typecheck-error(|["application expected: ", x])
    
  typecheck-section =
    Section(id, map(typecheck-definition))
    <+ typecheck-module
    <+ Description(id)
    <+ ?x; typecheck-error(|["section expected: ", x])
    
  typecheck-module :
    Module(mod, section1*) -> Module(mod, section2*)
    where {| Module
           : rules( Module := mod )
           ; section2* := <map(typecheck-section)> section1*
           |}
    
  typecheck-definition =
    typecheck-template-definition
    <+ typecheck-entity
    <+ ?def; typecheck-error(|["definition not typechecked: ", def])
      
rules // typechecking entity declarations

  typecheck-entity =
    ?EntityNoSuper(x_class, props)
    ; in-tc-context(
        where( <map(typecheck-property)> props)
      |["entity declaration ", x_class])
    
  typecheck-entity =
    ?Entity(x_class, s, props)
    ; in-tc-context(
        where( <typecheck-supertype> s )
        ; where( <map(typecheck-property)> props )
      | ["entity declaration ", x_class])
    
  typecheck-supertype = 
    ?s
    ; if not(<IsEntity> s) then
        typecheck-error(|["supertype ", s, " is not a defined entity"])
      end
    
  typecheck-property =
    ?Property(x, k, s, annos)
    ; if not(<java-type> s) then
        typecheck-error(|["property ", x, " has invalid type"])
      end

rules // typechecking template definitions

  typecheck-template-definition :
    Define(mods, f, args, elems1) -> Define(mods, f, args, elems2)
    where dbg(|"typecheck-definition in: ")
        ; {| TypeOf, TemplateDefinition, TemplateArguments, IsPage
           : in-tc-context(id
               ; dbg(|"typecheck-definition a: ")
               ; <map(declare-typeof-arg)> args
               ; dbg(|"typecheck-definition b: ")
               ; <alltd(declare-action <+ declare-template-definition <+ typecheck-vardecl)> elems1
               ; dbg(|"typecheck-definition c: ")
               ; elems2 := <typecheck-page-elements> elems1
               ; dbg(|"typecheck-definition d: ")
             |["definition ", f, "/"])
           |}
         ; dbg(|"typecheck-definition out: ")
  
  declare-typeof-arg = 
    ?Arg(x, s)
    ; if not(<java-type> s) then 
        typecheck-error(|["parameter ", x, " has invalid type"])
      else 
        rules( TypeOf : x -> s )
      end

rules // typechecking page elements 
      
  typecheck-page-elements =
    map(typecheck-page-element)
    <+ ?elems; typecheck-error(|["not a list of elements: ", elems])
    
  typecheck-page-element = dbg(|"typecheck-page-element in: "); (
    typecheck-template-definition
    <+ typecheck-text  
    <+ typecheck-select
    <+ typecheck-action 
    <+ typecheck-call-action 
    <+ typecheck-call-navigate
    <+ typecheck-template-call
    <+ typecheck-iterator
    <+ typecheck-vardecl
    <+ dbg(|"unknown page element? ")
       ; all(typecheck-page-element)
  ); dbg(|"typecheck-page-element out: ")
    
  typecheck-text =
    Text(is-string)
    
  typecheck-call-action :
    TemplateCall(f, [e1,e2], []) -> TemplateCall(f, [e1',e2'], [])
    where !f; (?"action" + ?"actionLink")
        ; in-tc-context(id
            ; e1' := <typecheck-expression> e1
            ; e2' := <typecheck-expression> e2
          | [f, "/"])

    
  typecheck-call-navigate :
    TemplateCall("navigate", [e], elems1) -> TemplateCall("navigate", [e'], elems2)
    where in-tc-context(id
            ; e' := <typecheck-link> e
            ; elems2 := <typecheck-page-elements> elems1
          | ["navigate/"])

  typecheck-call-navigate :
    TemplateCall("navigate", [e1,e2], []) -> TemplateCall("navigate", [e1', e2'], [])
    where in-tc-context(id
            ; e1' := <typecheck-expression> e1
            ; e2' := <typecheck-link> e2
          | ["navigate/"])
             
  typecheck-link :
    ThisCall("url", [e1]) -> ThisCall("url", [e2])
    where e2 := <typecheck-expression> e1

  typecheck-link :
    ThisCall(p, args1) -> ThisCall(p, args2)
    where not("url" := p)
        ; if not(<IsPage> p) then
            typecheck-error(|["link to undefined page ", p])
          else
            TemplateCall(p, args2, []) := <typecheck-template-call> TemplateCall(p, args1, [])
          end

  typecheck-template-call :
    TemplateCall(f, args1, elems1) -> TemplateCall(f, args2, elems2)
    where in-tc-context(id
            ; args2 := <map(typecheck-expression)> args1
            ; try(<zip(try(match-argument))> (<TemplateArguments> f, args2))
            ; elems2 := <typecheck-page-elements> elems1
            | [f, "/"])
        
        // @todo account for arguments of built-in templates (for which TemplateArguments fails)
                
   match-argument =
    ?(Arg(x, t1), e{Type(t2)})
    ; if not(<subtype-of>(t2, t1)) then
        typecheck-error(|["type ", t2, " of argument ", e{}, " does not match formal parameter '", x, "' (", t1, ")"])
      end
   
   subtype-of =
     eq
     
   subtype-of = 
     ?(SimpleSort(t1), SimpleSort(t2))
     ; where( <extends>(t1, t2) )
   
   extends = 
     while-not(eq, (Extends, id))
  
   typecheck-iterator :
     For(x, s, e1, elems1) -> For(x, s, e2, elems2)
     where in-tc-context(
             e2 := <typecheck-expression> e1
             ; <should-have-list-type> e2
             ; {| TypeOf
                : if not(<java-type> s) then
                    typecheck-error(|["index ", x, " has invalid type ", s])
                    // @todo check that type of x corresponds to element type of collection s
                  else
                    rules( TypeOf : x -> s )
                  end
                ; elems2 := <typecheck-page-elements> elems1
                |}
             | ["iterator ", x, "/"] )
             
   typecheck-iterator :
     ForAll(x, s, elems1) -> ForAll(x, s, elems2)
     where in-tc-context(
               {| TypeOf
                : if not(<defined-java-type> s) then
                    typecheck-error(|["index ", x, " has invalid type ", s])
                    // @todo check that type of x corresponds to element type of collection s
                  else
                    rules( TypeOf : x -> s )
                  end
                ; elems2 := <typecheck-page-elements> elems1
                |}
             | ["for all iterator ", x, "/"] ) 
                         
  typecheck-select :
    Select(x,s@SimpleSort(_),label,e1) -> Select(x,s,label,e2)
    where in-tc-context(id
            ; if not(<defined-java-type> s) then
                typecheck-error(|["index ", x, " should have a defined entity type, is ", s])
              else
                rules( TypeOf : x -> s )
              end
            ; e2 := <typecheck-expression> e1
          | ["select/"])
                       
strategies

  should-have-collection-type = 
    try(
      ?e{Type(t)}
      ; if not(<is-collection-type> t) then
          typecheck-error(|["type of iterator should be a collection (and not ", t, ")"])
        end
    )
  
  is-collection-type =
    ?GenericSort("List", [SimpleSort(_)])
    
  is-collection-type =
    ?GenericSort("Set", [SimpleSort(_)])
    
  should-have-list-type = 
    try(
      ?e{Type(t)}
      ; if not(<is-list-type> t) then
          typecheck-error(|["type of iterator should be a List (hint: every collection property f has also a property fList)"])
        end
    )
  
  is-list-type =
    ?GenericSort("List", [SimpleSort(_)])

rules // typechecking actions

  typecheck-action :
    Action(f, args, body1) -> Action(f, args, body2)
    where {| TypeOf
           : in-tc-context(
               <map(declare-typeof-arg)> args
               ; body2 := <typecheck-block> body1
             |["action ", f, "/"])
           |}
           
rules // typechecking statements

  typecheck-stat =
    typecheck-block
    <+ typecheck-assignment-stat
    <+ typecheck-vardecl
    <+ typecheck-return
    <+ Stat(typecheck-expression)
    <+ dbg(|"warning: not typechecking statement: ")
  
  typecheck-block =
    Block({| TypeOf : in-tc-context(map(typecheck-stat)|["block/"]) |})
    
  typecheck-assignment-stat :
    Assign(Assignment(qid, e1)) -> Assign(Assignment(qid, e2))
    where e2 := <typecheck-expression> e1
    
  typecheck-vardecl :
    VarDeclInit(x, s, e1) -> VarDeclInit(x, s, e2)
    where rules( TypeOf : x -> s )
        ; e2 := <typecheck-expression> e1
        
        // @todo check that s is valid type
        
  typecheck-vardecl :
    VarDecl(x, s) -> VarDecl(x, s)
    where rules( TypeOf : x -> s )
   
  typecheck-return :
    Return(e1) -> Return(e2)
    where e2 := <typecheck-link> e1
           
rules // typechecking expressions
   
   typecheck-expression = dbg(|"tc expression: "); (
     typecheck-variable   
     <+ typecheck-string
     <+ typecheck-fieldaccess
     <+ typecheck-object-creation
     <+ typecheck-set-creation
     <+ typecheck-list-creation
     <+ typecheck-call
     <+ typecheck-query
     <+ typecheck-expression-error
   )
   
   typecheck-string :
     String(x) -> String(x){Type(SimpleSort("String"))}
     
   typecheck-string :
     Int(x) -> Int(x){Type(SimpleSort("Int"))}
     
   typecheck-variable :
     Var(x) -> Var(x){Type(t)}
     where if not(t := <TypeOf> x) then
             typecheck-error(|["variable ", x, " has no declared type"])
             ; t := "Error"
           end
     
   typecheck-set-creation :
     SetCreation(e1*) -> SetCreation(e2*){Type(GenericSort("Set", [t]))}
     where dbg(|"typecheck-set-creation a: ")
         ; e2* := <map(typecheck-expression)> e1*
         ; dbg(|"typecheck-set-creation b: ")
         ; [_{Type(t)},e3*] := e2*
         ; dbg(|"typecheck-set-creation c: ")
         ; if not(<map(?_{Type(<id>)}; <eq>(<id>, t))> e3*) then
             typecheck-error(|["arguments of set creation should have same type"])
           end
         ; dbg(|"typecheck-set-creation d: ")
         
   typecheck-list-creation :
     ListCreation(e1*) -> ListCreation(e2*){Type(GenericSort("List", [t]))}
     where dbg(|"typecheck-set-creation a: ")
         ; e2* := <map(typecheck-expression)> e1*
         ; dbg(|"typecheck-set-creation b: ")
         ; [_{Type(t)},e3*] := e2*
         ; dbg(|"typecheck-set-creation c: ")
         ; if not(<map(?_{Type(<id>)}; <eq>(<id>, t))> e3*) then
             typecheck-error(|["arguments of set creation should have same type"])
           end
         ; dbg(|"typecheck-set-creation d: ")
                  
   typecheck-object-creation :
     ObjectCreation(x_Class, assign1*) -> ObjectCreation(x_Class, assign2*){Type(SimpleSort(x_Class))}
     where dbg(|"typecheck-object creation a: ")
         ; in-tc-context(
             if not(<IsEntity> x_Class) then
               typecheck-error(|["object creation for undeclared entity ", x_Class])
             end
             ; dbg(|"typecheck-object creation b: ")
             ; assign2* := <map(typecheck-field-initialization(|x_Class))> assign1*
             ; dbg(|"typecheck-object creation c: ")
           |["create ", x_Class, "/"])
     
   typecheck-field-initialization(|x_Class) :
     Assignment(y, e1) -> Assignment(y, e2)
     where dbg(|"typecheck-assign a: ");
           e2{Type(t2)} := <typecheck-expression> e1
           // @todo
         ; dbg(|"typecheck-assign b: ")
         ; if not(t1 := <TypeOfProperty> (x_Class, y)) then
             typecheck-error(|["entity ", x_Class, " has no field ", y])
             ; t1 := SimpleSort("void")
           end
         ; dbg(|"typecheck-assign c: ")
         ; if not(<type-compatible>(t1,t2)) then
             typecheck-error(|["assignment to field ", y, " of ", x_Class, " with type ", t2, " should be ", t1])
           end
         ; dbg(|"typecheck-assign d: ")
     
   typecheck-fieldaccess :
     FieldAccess(e1, f) -> FieldAccess(e2, f){Type(t1)}
     where e2{Type(t2@SimpleSort(s))} := <typecheck-expression> e1
         ; t1 := <TypeOfProperty> (s, f)
         
   typecheck-call :
     Call(e1, f, e2*) -> Call(e3, f, e4*){Type(t)}
     where e3{Type(t3)} := <typecheck-expression> e1
         ; e4* := <map(typecheck-expression)> e2*
         ; t := <check-signature> (t3, f, e4*)
         
   typecheck-call :
     ThisCall(f, e1*) -> ThisCall(f, e2*){Type(t)}
     where e2* := <map(typecheck-expression)> e1*
         ; t := <check-signature> (None(), f, e2*)
         
   typecheck-query :
     HqlQuery(q) -> HqlQuery(q){Type(t)}
     where t := <type-of-query> q
         ; dbg(|"type of query: ")

   typecheck-expression-error =
     ?e
     ; typecheck-error(|["expression ", e, " has type error"])
     
rules // signature

  check-signature :
    (t3, f, e*) -> t
    where t* := <map(?_{Type(<id>)})> e*
        ; t := <check-signature-aux> (t3, f, t*)
        
  check-signature-aux = 
    ?sig
    ; (CheckActionSignature 
       <+ check-builtin-signature
       <+ typecheck-error(|["type error in call ", sig]))
    
  check-builtin-signature :
    (GenericSort("List", [s]), "add", [s]) -> SimpleSort("void")

  check-builtin-signature :
    (GenericSort("List", [s]), "remove", [s]) -> SimpleSort("void")
    
  check-builtin-signature :
    (GenericSort("Set", [s]), "add", [s]) -> SimpleSort("void")
    
  check-builtin-signature :
    (GenericSort("Set", [s]), "remove", [s]) -> SimpleSort("void") 
    
  check-builtin-signature :
    (s@SimpleSort(_), "delete", []) -> SimpleSort("void")
    where <defined-java-type> s
    
  check-builtin-signature :
    (s@SimpleSort(_), "save", []) -> SimpleSort("void")
    where <defined-java-type> s
    
  check-builtin-signature :
    (s@SimpleSort(_), "persist", []) -> SimpleSort("void")
    where <defined-java-type> s

  check-builtin-signature :
    (GenericSort(Z, [s@SimpleSort(_)]), "persist", []) -> SimpleSort("void")
    where <defined-java-type> s
        ; <?"List" <+ ?"Set"> Z
            
rules // type compatibility

  /**
   * <type-compatible> (t1, t2) if a value of type t2 can be assigned
   * to a variable of type t1
   */

  type-compatible =
    ?(t, t)
   
  type-compatible =
    ?(SimpleSort("Email"), SimpleSort("String"))
    
  type-compatible =
    ?(SimpleSort("Text"), SimpleSort("String"))

  type-compatible =
    ?(SimpleSort("URL"), SimpleSort("String"))
    
  type-compatible =
    ?(SimpleSort("Image"), SimpleSort("String"))
    
  type-compatible =
    ?(SimpleSort("Secret"), SimpleSort("String"))
    
rules 

  type-of-query :
    QueryRule(
      SelectFrom(Some(Select(_,[AliasedExpression(Path([x]),_)])), FromClause(ranges)),
      _, _, _) -> GenericSort("List", [t])
    where t := <fetch-elem(get-type-from-range(|x))> ranges
    
  get-type-from-range(|x) :
    FromRangeJoin(FromClass(Path([x_Class]),Some(AsAlias(Alias(x))),_),_) -> SimpleSort(x_Class)
    
/*
 HqlQuery(
   QueryRule(
     SelectFrom(
       Some(Select(None,[AliasedExpression(Path(["pub"]),None)])),
       FromClause([
         FromRangeJoin(FromClass(Path(["Publication"]),Some(AsAlias(Alias("pub"))),None),None),
         FromRangeJoin(FromClass(Path(["Person"]),Some(AsAlias(Alias("pers"))),None),None)
       ])
      ),
      Some(WhereClause(
             QueryAnd(
                Paren([EQ(Path(["pers","id"]),DslExp(FieldAccess(Var("person"),"id")))]),
                Paren([MemberOf(Path(["pers"]),Path(["pub","_authors"]))])))),
      None,
      None))
*/
    