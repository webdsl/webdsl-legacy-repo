module org/webdsl/dsl/transformation/rename-identifiers

imports 
  libstrategolib
  
imports 
  libwebdsl-front

rules

  rename-identifiers =
    alltd(rename-bound-variables)

  rename-bound-variables =
       exclude-from-var-renaming
    <+ ExcludeFromVarRenaming  
    //<+ Define(id,id,rename-identifiers,rename-identifiers) // otherwise local template definitions get renamed and dynamic scoping breaks (eg the local body will be inserted as body12 in the lookup hashmap)
    <+ rename-template-def-id
    <+ rename-template-call-id
    <+ use-existing-renaming
  
  exclude-from-var-renaming = ?"this"
  
  use-existing-renaming :
    x{y} -> y
    where is-string
        ; <is-string> y
    with rules ( TypeOf : y -> <TypeOf> x{y}
                 OriginalNonUniqueName : y -> x)

  rename-template-def-id :
    Define(mod*, x, farg*, targs, elem*) ->
    Define(mod*, x, <rename-identifiers> farg*, targs, <rename-identifiers> elem*)
    where <fetch(?Page())> mod*
       <+ <fetch(?Email())> mod* //no overloading for emails yet
    with  rules( OriginalNonUniqueName : x -> x)
                 
  rename-template-def-id :
    Define(mod*, x, farg*, targs, elem*) ->
    Define(mod*, y, <rename-identifiers> farg*, targs, <rename-identifiers> elem*)
    where not(<fetch(?Page())> mod*)
        ; not(<fetch(?Email())> mod*)
    with  xsa := <strip-annos> x
        ; y := <TemplateNewName> (xsa,<template-formal-arguments-to-types> farg*)
        ; rules( OriginalNonUniqueName : y -> x)
        ; if <fetch(?InputTemplate())> mod* then
          rules (IsInputTemplate : y)
          end
    
  rename-template-call-id :
    tc@TemplateCall(x, arg*, passign*, TemplateBody(elem*)){anno*}
    -> TemplateCall(y, <rename-identifiers> arg*, <rename-identifiers> passign*, TemplateBody(<rename-identifiers> elem*)){<rename-identifiers> anno*}
    where y := <CallToDefinedTemplate> x  
        ; rules( CallToDefinedTemplateAfterIdRename : y 
                 OriginalNonUniqueName : y -> x)

  rename-template-call-id :
    tc@TemplateCall(x, arg*, passign*, TemplateBody(elem*)){anno*} 
    -> TemplateCall(x, <rename-identifiers> arg*, <rename-identifiers> passign*, TemplateBody(<rename-identifiers> elem*)){<rename-identifiers> anno*} 
    where <CallToRequiredTemplate> x  
        ; rules( CallToRequiredTemplateAfterIdRename : x 
                 OriginalNonUniqueName : x -> x)

  rename-template-call-id :
    tc@TemplateCall(x, arg*, passign*, TemplateBody(elem*)){anno*}
    -> TemplateCall(y, <rename-identifiers> arg*, <rename-identifiers> passign*, TemplateBody(<rename-identifiers> elem*)){<rename-identifiers> anno*}
    where <CallToBuiltInTemplate> x
        ; y := <strip-annos> x //code generator assumes that built-in templates don't have annotations on the name

rules  // backend annotations

  add-backend-annotation =
    ?TemplateCall(y, _, _, _)
    ; where(<CallToDefinedTemplateAfterIdRename> y)
    ; add-new-anno(|CallToDefinedAnno())
    ; add-new-anno(|CalledTemplateArgs(<TemplateArguments> y))
   
  add-backend-annotation =
    ?TemplateCall(y, _, _, _)
    ; where(<CallToRequiredTemplateAfterIdRename> y)
    ; add-new-anno(|CallToRequiredAnno())
   
  add-backend-annotation =
    ?TemplateCall(y, _, _, _)
    ; where(<IsInputTemplate> y)
    ; add-new-anno(|InputTemplateAnno())
    