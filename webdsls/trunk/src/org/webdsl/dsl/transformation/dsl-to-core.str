module org/webdsl/dsl/transformation/dsl-to-core

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/analysis/-
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/modules/-
  org/webdsl/dsl/languages/composition

strategies

  dsl-to-core =
      dsl-to-core-analysis
    ; if FoundErrors then <exit> 1 end //exit if parsing error in modules, exit here instead of in dsl-to-core-analysis for compatibility with editor support
    ; if-only-typechecking(<exit> 0)
    ; dsl-to-core-generation
  
  dsl-to-core-analysis =
    try(simplify-application-constructor)
    ; stage((import-modules <+ add-error(|"Main .app file needs to start with \"application\""))|"importing modules")
    ; try(where(DebugPrintSourceTree; pp-aterm(!"Source AST: "); debug))
    ; if not(FoundErrors) //stop if parsing error in modules
      then
        remove-string-position-annos
        ; stage(typecheck|"typechecking")
      end
  
  dsl-to-core-generation =
      remove-position-annos
    ; stage(desugar-top|"model-to-model")
    ; if-extra-typechecking(stage(typecheck|"extra typechecking"))
    ; stage(
        process-access-control
      ; desugar-top 
      ; if AccessControlEnabled then
          process-access-control-checks
          //add functions generated by ac rules
        ; desugar-top
        end
      |"access control")
    ; stage(rename-identifiers|"renaming identifiers")
    ; check-for-ajax
    ; stage(
        analyze-all
      //collect all the functions in a dynamic rule and handles overloading
      ; aggregate-and-combine-functions
      |"performing analysis")
    
strategies // IDE Plugin stuff

  webdsl-collect-all-errors =
    {| AllErrors, AllWarnings:
      rules(
        // Override the error reporting behavior to collect errors
        AddError(|msgs):   node -> node where rules(AllErrors   :+= (node, <error-to-string> msgs))
        AddWarning(|msgs): node -> node where rules(AllWarnings :+= (node, <error-to-string> msgs))
      )
    ; with(
        dsl-to-core-analysis
      )
    ; !(<bagof-AllErrors <+ ![]>, <bagof-AllWarnings <+ ![]>, [])
    |}
    
strategies // module imports

  import-modules :
    Application(name, sec) -> Application(name, sec')
    with
      topdown(try(already-imported <+ import-module))
    ; imported := <bagof-ImportedModules <+ ![]>
    ; sec'     := <conc> (sec, imported)

  already-imported :
    Imports(name) -> Note([])
    where <Imported> <strip-annos> name

  import-module :
    Imports(name) -> Note([])
    with mod := <xtc-parse-webdsl-module> FILE(<concat-strings>[<DirName>, "/", name, ".app"])
       ; name1 := <strip-annos> name
       ; rules( Imported : name1 ) 
       ; mod1 := <topdown(try(already-imported <+ import-module))> mod
       ; rules( ImportedModules :+= mod1 )
       <+
         add-error(|"Unable to import this module")

strategies

  simplify-application-constructor :
    ApplicationDefs(qid, defs, sections) -> Application(qid, [Section("definitions", defs)|sections])

  remove-position-annos =
    topdown-l(try(keep-position-anno <+ remove-position-anno))

  remove-string-position-annos =
    topdown(try(remove-string-position-anno))

  remove-string-position-anno =
    (is-string + ?SimpleSort(_) + ?GenericSort(_, _))
    ; strip-annos

  remove-position-anno :
    s{anno*} -> result
    where anno2* := <remove-all(?At(_, _, _))> anno*
        ; if [] := anno2* then
            result := s{}
          else
            result := s{anno2*}
          end

