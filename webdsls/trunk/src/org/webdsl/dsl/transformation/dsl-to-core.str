/**
 * Transformation of a WebDSL application to a collection of XML and Java files
 *
 * @author Eelco Visser
 */

module org/webdsl/dsl/transformation/dsl-to-core

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/modules/access-control/-

strategies
  info(|msg) = log(|Info(), msg)

strategies

  dsl-to-core = id
    ; info(|"This version of webdsl does not work. For a working version, use the most recently tagged version.")
    ; stop-before-importing
    ; info(|"importing modules")
    ; import-modules
    ; remove-string-position-annos

    ; stop-before-desugaring
    //; try(before-first-desugar)
    ; info(|"typechecking")
    ; typecheck
      ; stop-after
    ; remove-position-annos
    //; aggregate-subclass-info
    ; info(|"model-to-model")
    ; desugar-top
    ; info(|["Output: ", <id>])
      ; stop-after

    /*
      ; stop-after
    ; declare-definitions
      ; stop-after
    ; desugar // Ruben: added for test

    ; stop-before-typechecking
    ; info(|"typechecking")
    ; typecheck
      ; stop-after
    ; desugar
      ; stop-after
      */
    ; info(|"access control before template expansion")
    ; process-access-control
    ; desugar-top 
   /* ; desugar
    ; declare-definitions
      ; stop-after
      
    ; try(before-template-expansion)
    ; merge-webdsl-declarations
    ; desugar
      ; stop-after
      
    ; stop-before-template-expansion
    */
        
    ; info(|"template renaming")
    ; rename-templates

//    ; info(|"template expansion")
//    ; expand-page-templates
//      ; stop-after

    /*
    ; desugar
      ; stop-after
    ; typecheck
      ; stop-after

  
    ; derive
    */
    ; info(|"access control after template expansion")
    ;if AccessControlEnabled then
       process-access-control-checks
       //add functions generated by ac rules
       ; desugar-top
     end
     
     /*
    ; derive
      ; stop-after
    ; desugar
      ; stop-after
    ; typecheck
      ; stop-after
      */
    //collect all the functions in a dynamic rule and handles overloading
    ; aggregate-and-combine-functions
    //collect all the global variables in a dynamic rule
    ; collect-global-vars
    //collect all the session variables in a dynamic rule
    ; collect-session-vars
    //add beanname. in front of variables being used in page contexts
    ; propagate-component-names
      ; stop-after


signature
  constructors
    pos-info : Annotation
    area-in-file : String * List -> Annotation

strategies
  remove-position-annos =
    topdown-l(try(remove-position-anno))

  remove-string-position-annos =
    topdown(try(remove-string-position-anno))

  remove-string-position-anno =
    (is-string + ?SimpleSort(_) + ?GenericSort(_, _))
    ; strip-annos
    
  /*
  remove-position-anno :
    s{^annos} -> s{annos2}
    where annos2 := <remove-all(?pos-info() <+ ?area-in-file(_, _))> annos
    */

  remove-position-anno :
    s{anno*} -> result
    where anno2* := <remove-all(?[pos-info(), area-in-file(_, _)])> anno*
        ; if [] := anno2* then
            result := s{}
          else
            result := s{anno*}
          end
strategies

  derive = fail

  before-template-expansion = fail

  before-declare-definitions = fail

  declare-definitions =
    where(
      alltd(declare-definition)
      ; ?Application(qid, sections)
      ; ents := <collect(?SessionEntity(_, _, _))> sections
      ; rules ( SessionEntities := ents ) // @REFACTOR
    )

  /*
  declare-definition =
    declare-entity

  declare-definition =
    declare-template-definition

  declare-definition =
    declare-action
    */

   // Creates <AllSubClasses> rule to be used in desugar.str (DeriveOutputSimpleRefAssociation)
   aggregate-subclass-info =
     where(
        allsubclasses := <repeat(once-SubClasses)> []
        ; rules( AllSubClasses := allsubclasses ))
