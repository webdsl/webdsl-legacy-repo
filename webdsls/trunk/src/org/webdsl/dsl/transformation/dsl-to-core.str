module org/webdsl/dsl/transformation/dsl-to-core

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/analysis/-
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/modules/-
  org/webdsl/dsl/languages/composition

strategies

  dsl-to-core =
      dsl-to-core-analysis
    ; dsl-to-core-generation
  
  dsl-to-core-analysis =
      info(|"dsl-to-core-analysis")
    ; stop-before-importing
    ; info(|"importing modules")
    ; import-modules
    ; remove-string-position-annos
      ; stop-before-desugaring
    ; info(|"typechecking")
    ; typecheck
      ; stop-after
  
  dsl-to-core-generation =
      remove-position-annos
    ; info(|"model-to-model")
    ; desugar-top
      ; stop-after
    ; info(|"access control")
      ; process-access-control
    ; desugar-top 
    //; info(|"resolving overloaded templates")
    ; resolve-overloaded-templates
      ; stop-after
    ; info(|"renaming identifiers")
    ; rename-identifiers
      ; stop-after
    //; info(|"access control after template expansion")
    ; if AccessControlEnabled then
       process-access-control-checks
       //add functions generated by ac rules
       ; desugar-top
     end
     
    ; info(|"checking for ajax usage")     
    ; check-for-ajax
    //; if EnableAnalysis then
    ; info(|"performing analysis")
    ; analyze-all
      ; stop-after
    //  end
    
    //collect all the functions in a dynamic rule and handles overloading
    ; aggregate-and-combine-functions
    
    //collect all the global variables in a dynamic rule
    ; collect-global-vars
    
    //collect all the session variables in a dynamic rule
    ; collect-session-vars
    
    ; stop-after
    /*
    ; if TypeCheckAfterTransformations then
        info(|"type checking after model transformations")
        ; where(bottomup(try(constraint-error)))
        ; (not(FoundErrors) <+ (<exit> 1))
        ; stop-after
      end
    */

strategies // IDE Plugin stuff

  webdsl-collect-all-errors =
    {| AllErrors, AllWarnings:
      rules(
        // Override the error reporting behavior to collect errors
        AddError(|msgs):   node -> node where rules(AllErrors   :+= (node, <error-to-string> msgs))
        AddWarning(|msgs): node -> node where rules(AllWarnings :+= (node, <error-to-string> msgs))
      );
      dsl-to-core-analysis;
      !(<bagof-AllErrors>, <bagof-AllWarnings>, [])
    |}
    
strategies // module imports

  import-modules =
    topdown(try(already-imported <+ import-module))
  ; ?Application(name,sec)
  ; !Application(name,<concat>[sec,<bagof-ImportedModules<+![]>])

  already-imported :
    Imports(name) -> Note([])
    where name1 := <strip-annos> name
        ; <Imported> name1

  import-module :
    Imports(name) -> Note([])
    with mod := <xtc-parse-webdsl-module> FILE(<concat-strings>[name, ".app"])
       ; name1 := <strip-annos> name
       ; rules( Imported : name1 ) 
       ; mod1 := <topdown(try(already-imported <+ import-module))> mod
       ; rules( ImportedModules :+= mod1 )
       <+
         add-error(|"Unable to import this module")

strategies
  remove-position-annos =
    topdown-l(try(remove-position-anno))

  remove-string-position-annos =
    topdown(try(remove-string-position-anno))

  remove-string-position-anno =
    (is-string + ?SimpleSort(_) + ?GenericSort(_, _))
    ; strip-annos

  remove-position-anno :
    s{anno*} -> result
    where anno2* := <remove-all(?At(_, _, _))> anno*
        ; if [] := anno2* then
            result := s{}
          else
            result := s{anno2*}
          end

