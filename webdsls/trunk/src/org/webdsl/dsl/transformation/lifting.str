module org/webdsl/dsl/transformation/lifting
// DUE TO BE REMOVED
imports
  libstrategolib
  //Java-15
  libjava-front

imports
  libwebdsl-syntax

rules // Rules for for exp lifting (lots of code duplication here, is this necessary?)

  //apply-for-exps : [l|lst] -> <LiftE(|<apply-for-exps> lst)> l
  //apply-for-exps : [] -> []

/*

  showEntries([e for(e : BlogEntry in b.entries where e.created < date)])

=>

  showEntries(foo())

  function List<BlogEntry> foo() {
    var es : List<BlogEntry> = [];
    for(e : BlogEntry in b.entries where e.created < date) { es.add(e); }
    return es;
  }

    showEntries([e for(e : BlogEntry in [e2 for(e2 : BlogEntry in b.entries where e.name = "")] where e.created < date)])

=>
    showEntries(foo())

  function List<BlogEntry> foo() {
    var es : List<BlogEntry> = [];
    for(e : BlogEntry in [e2 for(e2 : BlogEntry in b.entries where e.name = "")] where e.created < date) { es.add(e); }
    return es;
  }

=>

  function List<BlogEntry> foo() {
    var es : List<BlogEntry> = [];
    var es2 : List<BlogEntry> = [];
    for(e2 : BlogEntry in b.entries where e.name = "") { es2.add(e2) }
    for(e : BlogEntry in es2 where e.created < date) { es.add(e); }
    return es;
  }


now with e-blocks

  showEntries([e for(e : BlogEntry in b.entries where e.created < date)])

=>

  showEntries(
    { var es : List<BlogEntry> = [];
      for(e : BlogEntry in b.entries where e.created < date) { es.add(e); }
    | es})


  Desugar :
    |[ [e for(x : srt in e2 where e3 order by e4)] ]| ->
    |[ {| var y : List<srt>;
          for(x : srt in e2 where e3 order by e4) { y.add(x); } | y |} ]|

*/
/*
  DesugarLiftExp :
    Assign(Assignment(x, e)) -> s
    where {| LiftE, ForExps
           : e2 := <sometd(LiftExp)> e
           ; s:= Block(<concat> [<apply-for-exps> <ForExps>, [Assign(Assignment(x, e2))]])
           |}

  DesugarLiftExp :
    If(e1, bsit1, bsif1) -> s
    where {| LiftE, ForExps
           : e2 := <sometd(LiftExp)> e1
           ; bsit2 := <try(sometd(DesugarLiftExp))> bsit1
           ; bsif2 := <try(sometd(DesugarLiftExp))> bsif1
           ; s := Block(<concat> [<apply-for-exps> <ForExps>, [If(e2, bsit2, bsif2)]])
           |}

  DesugarLiftExp :
    ForStmt(x, s, e1, Filter(we1, obe1), bstm1) -> s
    where {| LiftE, ForExps
           : e2 := <sometd(LiftExp)> e1
           ; we2 := <sometd(LiftExp)> we1
           ; obe2 := <sometd(LiftExp)> obe1
           ; bstm2 := <try(sometd(DesugarLiftExp))> bstm1
           ; s := Block(<concat> [<apply-for-exps> <ForExps>, [ForStmt(x, s, e2, Filter(we2, obe2), bstm2)]])
           |}

  DesugarLiftExp :
    Return(e1) -> s
    where {| LiftE, ForExps
           : e2 := <sometd(LiftExp)> e1
           ; s := Block(<concat> [<apply-for-exps> <ForExps>, [Return(e2)]])
           |}

  new-forexp-name =
    newnm := <new>
    ; newfes := [newnm|<ForExps <+ ![]>]
    ; rules( ForExps := newfes )
    ; !newnm

  LiftExp :
    ForExp(oe, x, srt1, ie, fltr@Filter(True(), obe)) -> Var(x1)
    where new => x1
        ; srt2 := <type-of> ie
        ; srt3 := <type-of> oe
        ; e3 := <try(sometd(LiftExp))> ie
        ; e4 := <try(sometd(LiftExp))> oe
        ; newnm := <new-forexp-name>
        ; if <?GenericSort("List",_)> srt2 then
            srt4 := GenericSort("List", [srt3])
            ; e5 := |[ List<srt3>() ]|
          else // Set
            srt4 := GenericSort("Set", [srt3])
            ; e5 := |[ Set<srt3>() ]|
          end
        ; e7 := <add-not-null-checks> NotEq(e3,Null()){Type(SimpleSort("Bool"))}
        ; rules( LiftE(|stat*) : newnm -> |[
            var x1 : srt4;
            x1 := e5;
            if(e7)
            {
              for(x : srt1 in e3 fltr) {
                stat*
                x1.add(e4);
              }
            }
           ]| )

  LiftExp :
    ForExp(oe, x, srt1, ie, fltr@Filter(we, obe)) -> Var(x1)
    where not(True() := we)
        ; new => x1
        ; srt2 := <type-of> ie
        ; srt3 := <type-of> oe
        ; e3 := <try(sometd(LiftExp))> ie
        ; e4 := <try(sometd(LiftExp))> oe
        ; e5 := <try(sometd(LiftExp))> we
        ; newnm := <new-forexp-name>
        ; if <?GenericSort("List",_)> srt2 then
            srt4 := GenericSort("List", [srt3])
            ; e6 := |[ List<srt3>() ]|
          else // Set
            srt4 := GenericSort("Set", [srt3])
            ; e6 := |[ Set<srt3>() ]|
          end
        ; e7 := <add-not-null-checks> NotEq(e3,Null()){Type(SimpleSort("Bool"))}
        ; rules( LiftE(|stat*) : newnm -> |[
            var x1 : srt2;
            x1 := e6;
            if(e7)
            {
              for(x : srt1 in e3 fltr) {
                if(e5) {
                  stat*
                  x1.add(e4);
                }
              }
            }
          ]| )


  lift-add-to-collection(|$x) :
     e -> |[ $x.add(e); ]|

  LiftExp :
    ListCreation([e1|e1*]) -> Var(x1)
    where new => x1
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("List", [srt1])
        ; e2* := <map(try(sometd(LiftExp)))> e1*
        ; e2 := <try(sometd(LiftExp))> e1
        ; stat* := <map(lift-add-to-collection(|x1))> [e2|e2*]
        ; newnm := <new-forexp-name>
        ; rules( LiftE(|stat1*) : newnm -> |[
                var x1 : srt2;
                x1 := List<srt1>();
                stat*
                stat1*
               ]| )

  LiftExp :
    SetCreation([e1|e1*]) -> Var(x1)
    where new => x1
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("Set", [srt1])
        ; e2* := <map(try(sometd(LiftExp)))> e1*
        ; e2 := <try(sometd(LiftExp))> e1
        ; stat* := <map(lift-add-to-collection(|x1))> [e2|e2*]
        ; newnm := <new-forexp-name>
        ; rules( LiftE(|stat1*) : newnm -> |[
                var x1 : srt2;
                x1 := Set<srt1>();
                stat*
                stat1*
               ]| )

  LiftExp :
    TypedSetCreation(srt1, [e1|e1*]) -> Var(x1)
    where new => x1
//        ; srt2 := GenericSort("Set", [srt1])
        ; srt2 := GenericSort("Set", [srt1])
        ; e2  := <try(sometd(LiftExp))> e1
        ; e2* := <map(try(sometd(LiftExp)))> e1*
        ; stat* := <map(lift-add-to-collection(|x1))> [e2|e2*]
        ; newnm := <new-forexp-name>
        ; rules( LiftE(|stat1*) : newnm -> |[
                var x1 : srt2;
                x1 := List<srt1>();
                stat*
                stat1*
               ]| )

  LiftExp :
    TypedListCreation(srt1, [e1|e1*]) -> Var(x1)
    where new => x1
        ; srt2 := GenericSort("List", [srt1])
        ; e2* := <map(try(sometd(LiftExp)))> e1*
        ; e2 := <try(sometd(LiftExp))> e1
        ; stat* := <map(lift-add-to-collection(|x1))> [e2|e2*]
        ; newnm := <new-forexp-name>
        ; rules( LiftE(|stat1*) : newnm -> |[
                 var x1 : srt2;
                x1 := List<srt1>();
                stat*
                stat1*
               ]| )
*/