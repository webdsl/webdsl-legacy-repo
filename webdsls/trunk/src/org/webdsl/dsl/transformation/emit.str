module org/webdsl/dsl/generation/emit

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/generation/-

rules


  emit-webdsl-code =// @TODO: rename to emit-webdsl-def
    rename-all
    ; ?def
    //; info(|["WebDSL emitted: ", <pp-webdsl-to-string> def])
    ; rules(
        AddWebDSLDef :+ Section(nm, defs) -> Section(nm, [def|defs])
      )
      
  //used to support syntax variations and backwards compatibility, rename strategy will need to cope with the variations, desugar can normalize to one
  // renaming is not needed for these one-to-one transformations that have the same semantics
  emit-webdsl-code-no-rename =
    ?def
    ; rules(
        AddWebDSLDef :+ Section(nm, defs) -> Section(nm, [def|defs])
      )
  
  desugar = once-AddWebDSLDef

  emit-webdsl-section =
    rename-all
    ; ?sec
    //; info(|["WebDSL emitted: ", <pp-webdsl-to-string> def])
    ; rules(
        AddWebDSLSection :+ Application(qid, sections) -> Application(qid, [sec|sections])
      )
  
  desugar = once-AddWebDSLSection

  /*get-webdsl-definitions =
    if defs := <repeat(once-WebDSLDefinitionsToEmit)> [] then
      ! [Section("Emited WebDSL code", defs)]
    else
      ! []
    end
    ; ?defsection
    ; if secs := <repeat(once-WebDSLSectionsToEmit)> [] then
        ! <concat> [defsection,secs]
      else
        ! defsection
      end
    ; not(?[]) // Fail if nothing was emitted
*/