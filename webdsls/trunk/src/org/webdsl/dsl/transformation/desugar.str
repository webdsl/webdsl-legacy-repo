/**

 Desugaring rules for WebDSL

*/

module org/webdsl/dsl/transformation/desugar

imports
  libstrategolib
  Java-15
  libjava-front

imports
  libwebdsl-front

signature
  constructors
    RemoveMe : Annotation

strategies

  all-consnil(s) = ?[_ | _] < [s | s] + all(s)

  desugar-ui: 
    [TemplateCall("dummy",_,_,elems)| xs] -> <concat>[elems, xs]

  innermost-rep(s) =
    {| InnermostNormalForm, InnermostApplied
     : rules(InnermostApplied := False())
     ; innermost-rep-aux(s)
     ; where(InnermostApplied => True())
     |}

  //rules used to determine whether any desugar was applied (might have only changed dynamic rule but not the AST)
  innermost-rep-aux(s) =
    InnermostNormalForm
    <+ all-consnil(innermost-rep-aux(s))
       ; try(s; rules( InnermostApplied := True() ); innermost-rep-aux(s))
       ; {?q; rules( InnermostNormalForm : q )}

  desugar-top =
    //{| AspectWeavingRules ... :
     repeat(innermost-rep(desugar))
   //  |}

strategies

  desugar = desugar-ui
  desugar = desugar-action
  desugar = desugar-data
  desugar = desugar-util

rules //extend entity functions create dr
  
  desugar-data :
    SessionEntity(x_class, prop*, fun1*) -> SessionEntity(x_class, prop*, fun2*)
    where fun2* := <desugar-extend-entity-functions-create-dr> (x_class,fun1*)
  desugar-data :
    Entity(x_class, sup, prop*, fun1*) -> Entity(x_class, sup, prop*, fun2*)
    where fun2* := <desugar-extend-entity-functions-create-dr> (x_class,fun1*)
  desugar-data :
    EntityNoSuper(x_class, prop*, fun1*) -> EntityNoSuper(x_class, prop*, fun2*)
    where fun2* := <desugar-extend-entity-functions-create-dr> (x_class,fun1*)
        
  desugar-extend-entity-functions-create-dr :
    (x_class,fun1*) -> fun2*
    where extendfunctions := <filter(?ExtendFunction(_))> fun1*
        ; not(?[])
    with  <map(extend-entity-function-dr(|x_class))> extendfunctions
        ; fun2* := <remove-all(?ExtendFunction(_))> fun1*

  extend-entity-function-dr(|x_class) =
    ?ExtendFunction(Function(fun, fargs, _, Block(stats)))
    ; with(
          rules (
            ExtendEntityFunction :+
              (x_class,Function(fun, fargs2, SimpleSort("Void"), Block(stats2))) -> Function(fun, fargs2, SimpleSort("Void"), Block(newstats))
              with  newstats := <rename-vars-in-added-stmts-with-fargs> (fargs,fargs2,stats,stats2)
            )
          )
          
  rename-vars-in-added-stmts-with-fargs :
    (currentfargs,otherfargs,currentstmts,otherstmts) -> newstmts
    with  renamepairs := <zip> (<map(?Arg(<id>,_))> currentfargs, <map(?Arg(<id>,_))> otherfargs)
        ; (stats3, []) := <rename-all-vars> (currentstmts, renamepairs)
        ; newstmts := <concat> [otherstmts, stats3]

  rename-all-vars :
    (t, []) -> (t, [])

  rename-all-vars :
    (t, [(from, to)|rst]) -> <rename-all-vars> (t2, rst)
    where t2 := <procedure-rename-var(|from, to)> t

rules //apply extend entity functions

  desugar-data :
    SessionEntity(x_class, prop*, fun1*) -> SessionEntity(x_class, prop*, fun2*)
    where fun2* := <desugar-extend-entity-functions-apply-dr> (x_class,fun1*)
  desugar-data :
    Entity(x_class, sup, prop*, fun1*) -> Entity(x_class, sup, prop*, fun2*)
    where fun2* := <desugar-extend-entity-functions-apply-dr> (x_class,fun1*)
  desugar-data :
    EntityNoSuper(x_class, prop*, fun1*) -> EntityNoSuper(x_class, prop*, fun2*)
    where fun2* := <desugar-extend-entity-functions-apply-dr> (x_class,fun1*)
 
  desugar-extend-entity-functions-apply-dr :
    (x_class,fun1*) -> fun2*
    where fun2* := <map(try(<once-ExtendEntityFunction;where(applied:=True())> (x_class,<id>)))> fun1*
        ; !applied
    
rules //extend global functions create dr and apply

  desugar-action :
    ExtendFunction(Function(fun, fargs, _, Block(stats))) -> RemoveMe()
    where <IsGlobalFunctionSignature> (fun,<map(?Arg(_,<id>))> fargs)
    with rules (
           ExtendFunction :+
             Function(fun, fargs2, SimpleSort("Void"), Block(stats2)) -> Function(fun, fargs2, SimpleSort("Void"), Block(newstats))
             with  newstats := <rename-vars-in-added-stmts-with-fargs> (fargs,fargs2,stats,stats2)
         )

  desugar-action = once-ExtendFunction

rules

  desugar-action = once-ExtendEntity
  
  desugar-action :
    ExtendEntity(ident, props, funcs) -> RemoveMe()
    with rules (
        ExtendEntity :+
          EntityNoSuper(ident, props2, funcs2) -> EntityNoSuper(ident, <concat> [props, props2], <concat> [funcs, funcs2])
          with rules ( ExtendEntity :- Entity(ident, s, props2, funcs2)
                       ExtendEntity :- SessionEntity(ident, props2, funcs2) ) // Remove the other two
                       
        // @TODO: normalize EntityNoSuper to Entity extends Object
        
        ExtendEntity :+
          Entity(ident, s, props2, funcs2) -> Entity(ident, s, <concat> [props, props2], <concat> [funcs, funcs2])
          with rules ( ExtendEntity :- EntityNoSuper(ident, props2, funcs2)
                       ExtendEntity :- SessionEntity(ident, props2, funcs2) )

        ExtendEntity :+
          SessionEntity(ident, props2, funcs2) -> SessionEntity(ident, <concat> [props, props2], <concat> [funcs, funcs2])
          with rules ( ExtendEntity :- Entity(ident, s, props2, funcs2)
                       ExtendEntity :- EntityNoSuper(ident, props2, funcs2) )
                       
          // @TODO: move to extend session entity case below
      )
      // this approach causes rules to be created which will not be used
      // invariant should be to consume all rules applied with once- (?)
      
      // desugar all entities to inherit from Object?

  normalize-data :
    ExtendSessionEntity(ident, props, funcs) -> ExtendEntity(ident, props, funcs)
  
  desugar :
    [RemoveMe()|lst] -> lst
 
    

  /*
  create-extend-entity-dynamic-rules:
    ExtendSessionEntity(ident, props, funcs) -> ExtendEntity(ident, props, funcs)//easy cleanup
    where <create-extend-entity-dynamic-rules> ExtendEntity(ident, props, funcs)//reuse exising mechanism

  attach-properties-to-entity:
    Entity(ident,superident,props,funcs) ->
    Entity(ident,superident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident)

  attach-properties-to-entity:
    EntityNoSuper(ident,props,funcs) ->
    EntityNoSuper(ident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident)

  attach-properties-to-entity:
    SessionEntity(ident,props,funcs) ->
      SessionEntity(ident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident)

  cleanup-extend-entity-section-defs:
    Application(ident,sections) -> Application(ident,<alltd(cleanup-extend-entity-section-defs)> sections)

  cleanup-extend-entity-section-defs:
    Section(ident,defs) -> Section(ident,<filter(not(?ExtendEntity(_,_,_)))>defs)
*/
  create-email-argument-list:
   Define(mods, name, args, body1) -> Define(mods, name, args, body1)
   where try (if <oncetd(?ThisCall("email", [_]))> body1 then
           if not(<GetEmailArgumentsList> name) then
             x := <newname> "email_arguments"
             ; rules ( GetEmailArgumentsList : name -> x )
           end
         end )

/*
rules // Desugaring rules only executed once

  desugar-var-decl-stm =
    not(?VarDeclInit(_, _, _))
    ; try(sometd(DesugarOnce))
    ; ![<id>]

  desugar-var-decl-stm :
    VarDeclInit(x, s, e1) -> [VarDecl(x, s), Assign(Assignment(x, e1))]

  DesugarOnce : // Its purpose is to translate VarDeclInits to VarDecls with separate assignment (only within Blocks, not within globals {...} statements)
    Block(stms1) -> Block(stms2)
    where stms2 := <map(desugar-var-decl-stm); concat> stms1
rules

  Desugar : // Provide some context for desugaring rules
    EntityNoSuper(nm, b, c) -> EntityNoSuper(nm, b2, c2)
    where {| InEntity
           : rules ( InEntity := nm )
           ; b2 := <topdown-l(repeat(Desugar))> b
           ; c2 := <topdown-l(repeat(Desugar))> c
           |}
           ; if b := b2; c := c2 then
               fail
             end

  Desugar :
    Entity(nm, b, c, d) -> Entity(nm, b2, c2, d2)
    where {| InEntity
           : rules ( InEntity := nm )
           ; b2 := <topdown-l(repeat(Desugar))> b
           ; c2 := <topdown-l(repeat(Desugar))> c
           ; d2 := <topdown-l(repeat(Desugar))> d
           |}
           ; if b := b2; c := c2; d := d2 then
               fail
             end

*/
rules

  find-expression-params =
    ?fa@FieldAccess(v, _)
    ; not(<IgnoreVars> v)
    ; rules( Param :+= fa )
    ; rules( IgnoreVars : v )

  find-expression-params =
    ?v@Var(x)
    ; not(<IgnoreVars> v)
    ; not("Component" := <type-of> v)
    ; rules( Param :+= v )
    ; rules( IgnoreVars : v )

  find-expression-params = // Have to filter this one out later, but point is to ignore everything inside for-exps
    ?ForExp(oe, x, srt, ie, Filter(we, obe, l))
    ; {| IgnoreVars
       : rules ( IgnoreVars : Var(x) )
       ; <alltd(find-expression-params)> we
       ; <alltd(find-expression-params)> oe
       ; <alltd(find-expression-params)> l
       |}
    ; <try(sometd(find-expression-params))> ie

  forexp-function-param-to-farg :
     f@FieldAccess(_, x) -> farg|[ x : srt ]|
     where srt := <type-of> f
     ; rules( RewriteFieldAccessToFarg : f -> Var(x) ) //we need a rewrite rule that rebinds f  to  x, because the context is away due to lifting

  forexp-function-param-to-farg :
    Var(x) -> farg|[ x : srt ]|
    where srt := <type-of> Var(x)

  find-params =
    ?fa@FieldAccess(v, _)
    ; not(<IgnoreVars> fa) // v
    ; rules( Param :+= fa )
    ; rules( IgnoreVars :  fa) // v

  find-params =
    ?v@Var(x)
    ; not(<IgnoreVars> v)
    ; not("Component" := <type-of> v)
    ; rules( Param :+= v )
    ; rules( IgnoreVars : v )

  find-params = //ignore the identifier of the for-exp iteration in the param lookup
    ?ForExp(oe, x, srt, ie, Filter(we, obe, l))
    ; {| IgnoreVars
       : rules ( IgnoreVars : Var(x) 
                 IgnoreVars : FieldAccess(Var(x), _) )
       ; <alltd(find-params)> we
       ; <alltd(find-params)> oe
       ; <alltd(find-params)> l
       |}
    ; <alltd(find-params)> ie


  fix-forexp-in-entity-function=
    alltd({\FieldAccess(Var("this"{anno*}),rest) -> Var(rest)\})

  // style comments (EV)
  // can this not be factored into smaller steps?
  // @TODO: factor out param extraction from all the following rules into a single strategy

  desugar-action :
    fe@ForExp(oe, x, s, ie, fltr) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> fe
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        // finding parameters = finding free variables?
        // @TODO: turn into reusable strategy; with built-in scope; should not be part of caller
        
        ; srt2 := <type-of> ie
        ; GenericSort(_, [srt]) := srt2
        ; srt3 := <type-of> oe
        ; e3 := ie                                                 // alias
        ; e4 := oe                                                 // alias
        //; newnm := <new-forexp-name>
        ; if <?GenericSort("List",_)> srt2 then  
            srt4 := GenericSort("List", [srt3])  
            ; e5 := |[ List<srt3>() ]|           
          else // Set
            srt4 := GenericSort("Set", [srt3])   
            ; e5 := |[ Set<srt3>() ]|            
          end
        ; if <?FieldAccess(Var("this"),_)> e3 then e7 := True() else e7 := <add-not-null-checks> NotEq(e3,Null()) end
        ; <fix-forexp-in-entity-function;emit-webdsl-code> def|[
            globals { 
              function $fun (farg*) : srt4 {
                var l : srt4;
                l := e5;
                if(e7) {
                  for(x : srt in e3 fltr) {
                    l.add(e4);
                  }
                } else {}
                return l;
              }
            }
          ]|

  /* @REFACTOR: This must be turned into AndForExp(oe, x, s, ie, fltr) ... */
  desugar-action :
    AndForExp(fe@ForExp(oe, x, s, ie, fltr)) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> fe
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        //
        ; GenericSort(_, [srt]) := <type-of> ie
        ; e3 := ie
        ; e4 := oe
        ; if <?FieldAccess(Var("this"),_)> e3 then e7 := True() else e7 := <add-not-null-checks> NotEq(e3,Null()) end
        ; <fix-forexp-in-entity-function;emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : Bool {
                if(e7) {
                  for(x : srt in e3 fltr) {
                    if(!e4) {
                      return false;
                    } else {}
                  }
                } else {}
                return true;
              }
            }
          ]|

  /* @REFACTOR: This must be turned into OrForExp(oe, x, s, ie, fltr) ... */
  desugar-action :
    OrForExp(fe@ForExp(oe, x, s, ie, fltr)) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> fe
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        //
        ; GenericSort(_, [srt]) := <type-of> ie
        ; e3 := ie
        ; e4 := oe
        ; if <?FieldAccess(Var("this"),_)> e3 then e7 := True() else e7 := <add-not-null-checks> NotEq(e3,Null()) end
        ; <fix-forexp-in-entity-function;emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : Bool {
                if(e7) {
                  for(x : srt in e3 fltr) {
                    if(e4) {
                      return true;
                    } else {}
                  }
                } else {}
                return false;
              }
            }
          ]|

  //nice bunch of code duplication below....

  desugar-action :
    TypedListCreation(srt1, e1*) -> ThisCall($fun, params)
    where not([] := e1*)
        ; $fun := <newname> "typedlistCr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> e1*
           ; params := <bagof-Param>
           |}
        ; debug(!"TYPED LIST CREATEION")   
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        ; <debug(!" PARAMS, FARG ")> [ params, " ---- ", farg* ]
        ; srt2 := GenericSort("List", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> e1*
        ; debug(!"statements")
        ; <emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : srt2 {
                var l : srt2 := List<srt1>();
                stat*
                return l;
              }
            }
          ]|

  desugar-action :
    TypedSetCreation(srt1, e1*) -> ThisCall($fun, params)
    where not([] := e1*)
        ; $fun := <newname> "typedsetCr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> e1*
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        ; srt2 := GenericSort("Set", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> e1*
        ; <emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : srt2 {
                var l : srt2 := Set<srt1>();
                stat*
                return l;
              }
            }
          ]|

  desugar-action :
    ListCreation([e1|e1*]) -> ThisCall($fun, params)
    where $fun := <newname> "listCr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> [e1|e1*]
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("List", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> [e1|e1*]
        ; <emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : srt2 {
                var l : srt2 := List<srt1>();
                stat*
                return l;
              }
            }
          ]|

  desugar-action :
    SetCreation([e1|e1*]) -> ThisCall($fun, params)
    where $fun := <newname> "setCr"
        ; {| Param, IgnoreVars
           : <alltd(find-params)> [e1|e1*]
           ; params := <bagof-Param>
           |}
        ; {| RewriteFieldAccessToFarg
           : farg* := <map(forexp-function-param-to-farg)> params
          |}
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("Set", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> [e1|e1*]
        ; <emit-webdsl-code> def|[
            globals {
              function $fun (farg*) : srt2 {
                var l : srt2 := Set<srt1>();
                stat*
                return l;
              }
            }
          ]|

rules //Desugar label, which is a bit trick because it results in multiple elements

  desugar-ui :
    elem |[ label(e*)[passign*]{ elem* } ]| -> elem |[ dummy{ label(e*)[passign2*]{} container {elem2*} } ]|
    where not([] := elem*)
        ; [TemplateCall(name, args, assigns, elems) | others] := elem*
    with  nid := <newname> "forid_"
        ; passign2* := <concat>[[PropertyAssignment("for", String(nid))], passign*]  //generate for assignment
        ; assigns2  := <concat>[[PropertyAssignment("id", nid)], assigns]           //generate id assignment
        ; elem2*    := <concat>[[TemplateCall(name, args, assigns2, elems)], others]

  desugar-ui :
    elem |[ label(e*)[passign*]{ elem* } ]| -> elem |[ dummy{ label(e*)[passign*]{} container {elem*} } ]|
    where not([] := elem*)
        ; not([TemplateCall(_, _, _, _) | others] := elem*) //elems not empty, be neither a template call to refer to at the begining


rules //Desugar group, groupitems become rows, group becomes table

  desugar-ui :
    TemplateCall("group", args, passign*, elems1) -> TemplateCall("group", args, passign*, [TemplateCall("table",[],[],elems2)])
    where not([TemplateCall("table",_,_,_)] := elems1) // this is needed to avoid non-termination
        ; elems2 := <try(auto-surround-with-template(|"groupitem")); map(desugar-groupitem)> elems1
          
  desugar-groupitem :
    TemplateCall("groupitem", args,passign*, elems) -> TemplateCall("row",args,passign*, elems)

  desugar-ui = desugar-groupitem

rules //Desugar rows and tables

  desugar-ui :
    TemplateCall("table", args, passign*, elems) -> TemplateCall("table", args, passign*, elems2)
    where elems2 := <auto-surround-with-template(|"row")> elems

  desugar-ui :
    TemplateCall("row", args, passign*, elems) -> TemplateCall("row", args, passign*, elems2)
    where elems2 := <auto-surround-with-template(|"column")> elems

rules //Desugar helpers 

  auto-surround-with-template(|childname) : //ensures that all elements are a templatecall to 'childname', 
    elems -> elems2                       //fails if this was the case already (so disugar knows it can continue)
    where not(<all(?TemplateCall(childname,_,_,_) <+ ?TemplateCall("form",_,_,_) <+ not(?TemplateCall(_,_,_,_)))> elems)
    with  elems2:= <map(try(auto-surround-with-template-replace(|childname)))> elems

  /*
  auto-surround-with-template-replace(|childname) :
    t -> TemplateCall(childname, [],[],[t])
    where not(TemplateCall(_,_,_,_) := t); not(ForAll(_, _, _) := t); not(For(_, _, _, _) := t)
  */
  
  auto-surround-with-template-replace(|childname) :
    t@TemplateCall(x,_,_,_) -> TemplateCall(childname, [],[],[t])
    where not(childname := x); not("form" := x)

  /*
  auto-surround-with-template-replace(|childname) :
    t -> t
    where TemplateCall(childname,_,_,_) := t
  */

rules

  desugar-data =
    ?ent
    ; create-inverse-anno
    ; not(?ent)

  create-inverse-anno :
    Entity(x_class,superclass, props, functions) -> Entity(x_class,superclass, props2, functions)
    where props2 := <map(try(desugar-inverse-property(|x_class)))> props

  create-inverse-anno :
    EntityNoSuper(x_class, props, functions) -> EntityNoSuper(x_class, props2, functions)
    where props2 := <map(try(desugar-inverse-property(|x_class)))> props

  desugar-inverse-property(|x_class) :
    Property(x, k, GenericSort(coll, [s@SimpleSort(ss)]), anno*) -> Property(x, k, GenericSort(coll, [s]), anno2*)
    where <map(try(declare-inverse-anno(|x_class, x)))> anno*
        ; anno2* := <create-inverse-slave-anno(|x_class,x)> anno*

  desugar-inverse-property(|x_class) :
    Property(x, k, s@SimpleSort(ss), anno*) -> Property(x, k, s, anno2*)
    where <map(try(declare-inverse-anno(|x_class, x)))> anno*
        ; anno2* := <create-inverse-slave-anno(|x_class,x)> anno*

  create-inverse-slave-anno(|x_class,p) :
    xs -> [slaveanno|xs]
    where [] := <collect(?InverseSlaveAnno(_, _))> xs
        ; (ent, fld) := <once-CreateInverseSlaveAnno> (x_class, p)
        ; slaveanno := InverseSlaveAnno(ent, fld)

  declare-inverse-anno(|x_class, p) =
    ?InverseAnno(ent, fld)
    ; rules(
        CreateInverseSlaveAnno : (ent, fld) -> (x_class, p)
      )
