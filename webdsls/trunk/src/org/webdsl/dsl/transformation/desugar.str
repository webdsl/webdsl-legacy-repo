/**

 Desugaring rules for WebDSL
 
*/

module org/webdsl/dsl/transformation/desugar

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL

strategies

  desugar = 
    attach-extend-entities
    ; desugar-any
  
  desugar-any = // Can be applied to any kind of tree (expressions, statements)
    try(sometd((DesugarOnce)))
    ; try(repeat(sometd(DesugarLiftExp)))
    ; topdown-l(repeat(Desugar))
    ; try(sometd(create-inverse-anno))
    ; try(sometd(create-inverse-anno))
    ; try(sometd(create-email-argument-list))

rules   
  
  attach-extend-entities =  
    try(sometd(create-extend-entity-dynamic-rules))
    ; try(sometd(attach-properties-to-entity))
    ; cleanup-extend-entity-section-defs

  create-extend-entity-dynamic-rules:
    ExtendEntity(ident, props, funcs) -> ExtendEntity(ident, props, funcs) 
    where olddynamicresultprops := <Extend-Entity-Properties(|[]) <+  ![] > ident
     ; newdynamicresultprops := <concat>[olddynamicresultprops,props]
       ; rules
      (
        Extend-Entity-Properties(|properties) : ident -> <concat> [properties,newdynamicresultprops]
      )
    ; olddynamicresultfuncs := <Extend-Entity-Functions(|[]) <+  ![] > ident
     ; newdynamicresultfuncs := <concat>[olddynamicresultfuncs,funcs]
       ; rules
      (
        Extend-Entity-Functions(|functions) : ident -> <concat> [functions,newdynamicresultfuncs]
      )			
  
  create-extend-entity-dynamic-rules:
    ExtendSessionEntity(ident, props, funcs) -> ExtendEntity(ident, props, funcs)//easy cleanup
    where <create-extend-entity-dynamic-rules> ExtendEntity(ident, props, funcs)//reuse exising mechanism
   
  attach-properties-to-entity:
    Entity(ident,superident,props,funcs) -> 
    Entity(ident,superident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident)

  attach-properties-to-entity:  	
    EntityNoSuper(ident,props,funcs) -> 
    EntityNoSuper(ident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident) 
   
  attach-properties-to-entity:
    SessionEntity(ident,props,funcs) ->
      SessionEntity(ident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident)
     
  cleanup-extend-entity-section-defs:
    Application(ident,sections) -> Application(ident,<alltd(cleanup-extend-entity-section-defs)> sections)   

  cleanup-extend-entity-section-defs:
    Section(ident,defs) -> Section(ident,<filter(not(?ExtendEntity(_,_,_)))>defs)
  
  create-email-argument-list:
   Define(mods, name, args, body1) -> Define(mods, name, args, body1)
   where try (if <oncetd(?ThisCall("email", [_]))> body1 then
           if not(<GetEmailArgumentsList> name) then
             x := <newname> "email_arguments"
             ; rules ( GetEmailArgumentsList : name -> x )
           end
         end )

rules // Desugaring rules only executed once

  desugar-var-decl-stm =
    not(?VarDeclInit(_, _, _))
    ; try(sometd(DesugarOnce))
    ; ![<id>]

  desugar-var-decl-stm :
    VarDeclInit(x, s, e1) -> [VarDecl(x, s), Assign(Assignment(x, e1))]
  
  DesugarOnce : // Its purpose is to translate VarDeclInits to VarDecls with separate assignment (only within Blocks, not within globals {...} statements)
    Block(stms1) -> Block(stms2)
    where stms2 := <map(desugar-var-decl-stm); concat> stms1
  
rules

  Desugar :
    elem|[ navigate(url(e)){} ]| -> elem|[ navigate(url(e)){text(e)} ]|

  Desugar :
    elem|[ navigate(e1, e2){} ]| -> elem|[ navigate(e2){text(e1)} ]|
  
     
  Desugar :
    String(x) -> String(y)
    where y := <un-double-quote> x
    
 Desugar :
    elem|[ select( x : srt, str1, e) ]| -> elem|[ select( x : srt, str2, e ) ]|
    where str2 := <un-double-quote> str1
    
  Desugar : 
    |[ x k srt ]| -> |[ x k srt () ]|
  
  Desugar :
    |[ x k srt := e ]| -> |[ x k srt () := e ]|
    
  Desugar :
    TemplateCallNoArgs(x) -> TemplateCall(x, [], [])
    
  Desugar :
    TemplateCallNoBody(x, args) -> TemplateCall(x, args, [])
    
  Desugar :
    TemplateCallBody(x, body) -> TemplateCall(x, [], body)
  
  Desugar :
    IfNoElse(e, bit) -> If(e, bit, Block([]))
  
  Desugar :
    Text(x) -> Text(y)
    where y := <un-double-quote> x
    
  Desugar :
    elem*|[ text(e1,e2,e*){} elem* ]| -> elem*|[ text(e1){} text(e2,e*){ } elem* ]|
    
  Desugar :
    TemplateCall("menubar", [], elem*) -> TemplateCall("menubar", [exp], elem*)
    where exp := String("horizontal"){Type(SimpleSort("String"))}

  Desugar :
    TemplateCall("from", [exp1], []) -> TemplateCall("from", [exp1, exp1], [])   
        
rules // for desugarings

  Desugar :
    OrderNonSpecific(x) -> OrderAscending(x)

  Desugar :
    ForNoFilter(x, s, e, te*) -> For(x, s, e, Filter(True(), OrderAscending(Null())), te*)

  Desugar :
    For(x, s, e, FilterNoWhere(obe), te*) -> For(x, s, e, Filter(True(), obe), te*)

  Desugar :
    For(x, s, e, FilterNoOrderBy(we), te*) -> For(x, s, e, Filter(we, OrderAscending(Null())), te*)


  Desugar :
    ForAllNoFilter(x, s, te*) -> ForAll(x, s, Filter(True(), OrderAscending(Null())), te*)

  Desugar :
    ForAll(x, s, FilterNoOrderBy(we), te*) -> ForAll(x, s, Filter(we, OrderAscending(Null())), te*)

  Desugar :
    ForAll(x, s, FilterNoWhere(obe), te*) -> ForAll(x, s, Filter(True(), obe), te*)

  
  Desugar : 
    fa@ForAll(x, SimpleSort(s), Filter(we, obe), te*) -> For(x, SimpleSort(s), e, Filter(we, OrderAscending(Null())), te*)
    where selectField := <newname> "queryVar"
        ; if <?OrderAscending(of)> obe then
            ordering := Ascending()
          else
            if <?OrderDescending(of)> obe then
              ordering := Descending()
            end
          end
        ; <?FieldAccess(_, orderfield)> of
        ; e := HqlQuery(QueryRule(SelectFrom(Some(Select(None(),[AliasedExpression(Path([selectField]),None())])),FromClause([FromRangeJoin(FromClass(Path([s]),Some(AsAlias(Alias(selectField))),None()),None())])),None(),None(),Some(OrderByClause([OrderElement(Path([selectField, <concat-strings> ["_", orderfield]]),Some(ordering))]))))

  Desugar :
    ForStmtNoFilter(x, s, e, block) -> ForStmt(x, s, e, Filter(True(), OrderAscending(Null())), block)

  Desugar :
    ForStmt(x, s, e, FilterNoOrderBy(we), body) -> ForStmt(x, s, e, Filter(we, OrderAscending(Null())), body)
  
  Desugar :
    ForStmt(x, s, e, FilterNoWhere(obe), body) -> ForStmt(x, s, e, Filter(True(), obe), body)
  

  Desugar :
    ForExpNoFilter(oe, x, s, ie) -> ForExp(oe, x, s, ie, Filter(True(), OrderAscending(Null())))

  Desugar :
    ForExp(oe, x, s, ie, FilterNoOrderBy(we)) -> ForExp(oe, x, s, ie, Filter(we, OrderAscending(Null())))

  Desugar :
    ForExp(oe, x, s, ie, FilterNoWhere(obe)) -> ForExp(oe, x, s, ie, Filter(True(), obe))

rules 

  create-inverse-anno :
    Entity(x_class,superclass, props, functions) -> Entity(x_class,superclass, props2, functions) 
    where props2 := <map(try(desugar-inverse-property(|x_class)))> props

  create-inverse-anno :
    EntityNoSuper(x_class, props, functions) -> EntityNoSuper(x_class, props2, functions) 
    where props2 := <map(try(desugar-inverse-property(|x_class)))> props
  
  desugar-inverse-property(|x_class) :
    Property(x, k, GenericSort(coll, [s@SimpleSort(ss)]), anno*) -> Property(x, k, GenericSort(coll, [s]), anno2*)
    where <map(try(declare-inverse-anno(|x_class, x)))> anno*
        ; anno2* := <create-inverse-slave-anno(|x_class,x)> anno*

  desugar-inverse-property(|x_class) :
    Property(x, k, s@SimpleSort(ss), anno*) -> Property(x, k, s, anno2*)
    where <map(try(declare-inverse-anno(|x_class, x)))> anno*
        ; anno2* := <create-inverse-slave-anno(|x_class,x)> anno*

  create-inverse-slave-anno(|x_class,p) :
    xs -> [slaveanno|xs]
    where [] := <collect(?InverseSlaveAnno(_, _))> xs
        ; (ent, fld) := <CreateInverseSlaveAnno> (x_class, p)
        ; slaveanno := InverseSlaveAnno(ent, fld)
  
  declare-inverse-anno(|x_class, p) =
    ?InverseAnno(ent, fld)
    ; rules(
        CreateInverseSlaveAnno : (ent, fld) -> (x_class, p)
      ) 

rules // derive input behaviour from type

  derive =
    topdown(repeat(Derive <+ Desugar))

  Derive = fail
    <+ DeriveInputString
    <+ DeriveInputText
    <+ DeriveInputBool
    <+ DeriveInputSecret
    <+ DeriveInputBuiltins
    <+ DeriveInputSimpleRefAssociation
    <+ DeriveInputAssociationGenericSort
    <+ DeriveInput
    
  DeriveInputString :
    elem|[ input(e){} ]| -> elem|[ inputString(e){} ]|
    where SimpleSort("String") := <type-of> e
        
  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputURL(e){} ]|
    where SimpleSort("URL") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputImage(e){} ]|
    where SimpleSort("Image") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputEmail(e){} ]|
    where SimpleSort("Email") := <type-of> e

  DeriveInputText :
      elem|[ input(e){} ]| -> elem|[ inputWikiText(e){} ]|
      where SimpleSort("WikiText") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputInt(e){} ]|
    where SimpleSort("Int") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputFloat(e){} ]|
    where SimpleSort("Float") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputText(e){} ]|
    where SimpleSort("Text") := <type-of> e
    
  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputText(e){} ]|
    where SimpleSort("Patch") := <type-of> e
    
  DeriveInputBool :
    elem|[ input(e){} ]| -> elem|[ inputBool(e){} ]|
    where SimpleSort("Bool") := <type-of> e
    
  DeriveInputSecret :
    elem|[ input(e){} ]| -> elem|[ inputSecret(e){} ]|
    where SimpleSort("Secret") := <type-of> e

  DeriveInputSimpleRefAssociation :
    elem|[ input(e){} ]| ->
    elem|[
      div("inputSimpleRefAssociation") {
        select( y1 : $Y, "Select", e )
      }
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; y      := <decapitalize-string> $Y
        ; y1     := <newname> y
  
  exp-to-qid :
    FieldAccess(e, f) -> Qualified(qid, f)
    where not(Var(_) := e)
        ; qid := <exp-to-qid> e
    
  exp-to-qid :
    FieldAccess(Var(x), f) -> Qualified(x, f)
        
  exp-to-qid :
    Var(x) -> x
    
  DeriveInputAssociationGenericSort :
    elem|[ input(e0){} ]| ->
    elem|[ 
      div("inputAssociationGenericSort"){
        select(x1 : $X, str, e0)
      }
    ]|
    where GenericSort(coll, [SimpleSort(X)]) := <type-of> |[ e0 ]|
        ; $X := X
        ; x1       := <decapitalize-string; newname> X
        ; str      := <concat-strings>["Add ", X]

rules // derive output behaviour from type

  Derive = fail
    <+ DeriveOutputString
    <+ DeriveOutputText
    <+ DeriveOutputSecret
    <+ DeriveOutputBool
    <+ DeriveOutputBuiltins
    <+ DeriveOutputSimpleRefAssociation
    <+ DeriveOutputAssociationList
    <+ DeriveOutputAssociationSet
    <+ DeriveOutput
    
  DeriveOutputString :
    elem|[ output(e){} ]| -> elem|[ text(e){} ]|
    where SimpleSort("String") := <type-of> e
        
  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ navigate(url(e)){text(e)} ]| 
    where SimpleSort("URL") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ image(e){} ]|
    where SimpleSort("Image") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ navigate(url(e)){text(e)} ]|
    where SimpleSort("Email") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ outputWikiText(e) ]|
    where SimpleSort("WikiText") := <type-of> e

    
    // @todo prefix mailto

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ text(e){} ]|
    where SimpleSort("Int") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ text(e){} ]|
    where SimpleSort("Float") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ outputText(e){} ]|
    where SimpleSort("Text") := <type-of> e
    
  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ outputText(e){} ]|
    where SimpleSort("Patch") := <type-of> e
    
  DeriveOutputBool :
    elem|[ output(e){} ]| -> elem|[ outputBool(e) ]| 
    where SimpleSort("Bool") := <type-of> e

  DeriveOutputSecret :
    elem|[ output(e){} ]| -> elem|[ outputSecret(e){} ]|
    where SimpleSort("Secret") := <type-of> e

  DeriveOutputSimpleRefAssociation :
    elem|[ output(e){} ]| -> elem|[ navigate($viewY(e)){text(e.name)} ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; $viewY := <decapitalize-string> $Y
        ; allsubclasses := <AllSubClasses>
        ; not(<fetch(?($Y,_))> allsubclasses)

  DeriveOutputSimpleRefAssociation :
    elem|[ output(e){} ]| -> elem|[
      container {
        elem*
      }
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; allsubclasses := <AllSubClasses>
        ; subclasses := <retain-all(?($Y, _))> allsubclasses
        ; elem* := <map(DeriveSubclassOutput(|e, subclasses))> [($Y, $Y)|subclasses]

  is-not-subclass(|e) : [(x_super, x_class)] -> Not(IsA(e, SimpleSort(x_class)))
  is-not-subclass(|e) : [(x_super, x_class)|xs] -> And(Not(IsA(e, SimpleSort(x_class))), <is-not-subclass(|e)> xs)
  
  DeriveSubclassOutput(|e, subclasses) :
    (x_super, x_class) -> 
    IfTempl(And(IsA(e, SimpleSort(x_class)), <is-not-subclass(|e)> <remove-all(?(_, x_class))> subclasses), 
            elem*|[ navigate($viewY(e as srt)){ text(e.name) } ]|)
    where $viewY := <decapitalize-string> x_class
        ; srt := SimpleSort(x_class)

  DeriveOutputAssociationList :
    elem|[ output(e1){} ]| -> elem|[ list { for(x : $X in e1){ listitem{ output(e2) } } } ]|
    where |[ List<$X> ]| := <type-of> e1
        ; x := <decapitalize-string; newname> $X
        ; e2 := Var(x){Type(SimpleSort($X))}

  DeriveOutputAssociationSet :
    elem|[ output(e1){} ]| -> elem|[ list { for(x : $X in e2.$yList){ listitem{ output(e3) } } } ]|
    where |[ Set<$X> ]| := <type-of> e1
        ; |[ e2.$y ]| := e1
        ; x := <decapitalize-string; newname> $X
        ; $yList := <concat-strings>[$y, "List"]
        ; e3 := Var(x){Type(SimpleSort($X))}

rules // Rules for for exp lifting (lots of code duplication here, is this necessary?)

  DesugarLiftExp :
    Assign(Assignment(x, e)) -> s
    where {| LiftE
           : e2 := <sometd(LiftExp)> e
           ; s:= <repeat(once-LiftE)> Assign(Assignment(x, e2))
           |}

  DesugarLiftExp :
    If(e1, bsit1, bsif1) -> s
    where {| LiftE
           : e2 := <sometd(LiftExp)> e1
           ; bsit2 := <try(sometd(DesugarLiftExp))> bsit1
           ; bsif2 := <try(sometd(DesugarLiftExp))> bsif1
           ; s:= <repeat(once-LiftE)> If(e2, bsit2, bsif2)
           |}

  DesugarLiftExp :
    ForStmt(x, s, e1, Filter(we1, obe1), bstm1) -> s
    where {| LiftE
           : e2 := <sometd(LiftExp)> e1
           ; we2 := <sometd(LiftExp)> we1
           ; obe2 := <sometd(LiftExp)> obe1
           ; bstm2 := <try(sometd(DesugarLiftExp))> bstm1
           ; s:= <repeat(once-LiftE)> ForStmt(x, s, e2, Filter(we2, obe2), bstm2)
           |}

  DesugarLiftExp :
    Return(e1) -> s
    where {| LiftE
           : e2 := <sometd(LiftExp)> e1
           ; s:= <repeat(once-LiftE)> Return(e2)
           |}
  
  LiftExp : 
    ForExp(oe, x, srt1, ie, fltr@Filter(True(), obe)) -> Var(x1)
    where new => x1
        ; srt2 := <type-of> ie
        ; srt3 := <type-of> oe
        ; e3 := <try(sometd(LiftExp))> ie
        ; e4 := <try(sometd(LiftExp))> oe
        ; if <?GenericSort("List",_)> srt2 then
            srt4 := GenericSort("List", [srt3])
            ; rules( LiftE :+ stat -> |[
              {
                var x1 : srt4;
                x1 := List<srt3>();
                for(x : srt1 in e3 fltr) {
                  x1.add(e4);
                }
                stat
              } ]| )
          else // Set
            srt4 := GenericSort("Set", [srt3])
            ; rules( LiftE :+ stat -> |[
              {
                var x1 : srt4;
                x1 := Set<srt3>();
                for(x : srt1 in e3 fltr) {
                  x1.add(e4);
                }
                stat
              } ]| )
          end
  
  LiftExp :
    ForExp(oe, x, srt1, ie, fltr@Filter(we, obe)) -> Var(x1)
    where not(True() := we)
        ; new => x1
        ; srt2 := <type-of> ie
        ; srt3 := <type-of> oe
        ; e3 := <try(sometd(LiftExp))> ie
        ; e4 := <try(sometd(LiftExp))> oe
        ; e5 := <try(sometd(LiftExp))> we
        ; if <?GenericSort("List",_)> srt2 then
            srt4 := GenericSort("List", [srt3])
            ; rules( LiftE :+ stat -> |[
              {
                var x1 : srt4;
                x1 := List<srt3>();
                for(x : srt1 in e3 fltr) {
                  if(e5) {
                    x1.add(e4);
                  }
                }
                stat
              } ]| )
          else // Set
            srt4 := GenericSort("Set", [srt3])
            ; rules( LiftE :+ stat -> |[
            {
              var x1 : srt2;
              x1 := Set<srt1>();
              for(x : srt1 in e3 fltr) {
                if(e5) {
                  x1.add(e4);
                }
              }
              stat
            } ]| )
          end

  lift-add-to-collection(|$x) :
     e -> |[ $x.add(e); ]|
  
  LiftExp :
    ListCreation([e1|e1*]) -> Var(x1)
    where new => x1
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("List", [srt1])
        ; e2* := <map(try(sometd(LiftExp)))> e1*
        ; e2 := <try(sometd(LiftExp))> e1
        ; stat* := <map(lift-add-to-collection(|x1))> [e2|e2*]
        ; rules( LiftE :+ stat -> |[
              {
                var x1 : srt2;
                x1 := List<srt1>();
                stat*
                stat
              } ]| )

  LiftExp :
    SetCreation([e1|e1*]) -> Var(x1)
    where new => x1
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("Set", [srt1])        
//        ; srt2 := GenericSort("List", [srt1])
        ; e2* := <map(try(sometd(LiftExp)))> e1*
        ; e2 := <try(sometd(LiftExp))> e1
        ; stat* := <map(lift-add-to-collection(|x1))> [e2|e2*]
//        ; <debug> [e1, e1*, x1, srt1]
        ; rules( LiftE :+ stat -> |[
              {
                var x1 : srt2;
                x1 := Set<srt1>();
                //x1 := List<srt1>();
                stat*
                stat
              } ]| )

  LiftExp :
    TypedSetCreation(srt1, [e1|e1*]) -> Var(x1)
    where new => x1
//        ; srt2 := GenericSort("Set", [srt1])
        ; srt2 := GenericSort("Set", [srt1])
        ; e2  := <try(sometd(LiftExp))> e1
        ; e2* := <map(try(sometd(LiftExp)))> e1*
        ; stat* := <map(lift-add-to-collection(|x1))> [e2|e2*]
        ; rules( LiftE :+ stat -> |[
              {
                var x1 : srt2;
                //x1 := Set<srt1>();
                x1 := List<srt1>();
                stat*
                stat
              } ]| )

  LiftExp :
    TypedListCreation(srt1, [e1|e1*]) -> Var(x1)
    where new => x1
        ; srt2 := GenericSort("List", [srt1])
        ; e2* := <map(try(sometd(LiftExp)))> e1*
        ; e2 := <try(sometd(LiftExp))> e1
        ; stat* := <map(lift-add-to-collection(|x1))> [e2|e2*]
        ; rules( LiftE :+ stat -> |[
              {
                var x1 : srt2;
                //x1 := Set<srt1>();
                x1 := List<srt1>();
                stat*
                stat
              } ]| )

rules

  add-view-edit-pages-to-app :
    app@|[ application qid sec* ]| ->
    |[ 
       application qid 
         sec* 
         section generated pages.
           def1 
           def2 
           define editRowsObject(o: Object) {} 
           define viewRowsObject(o: Object) {}
           def* 
    ]|
    where def* := <collect(entity-to-view-edit-pages); concat> app
        ; def1 := <create-menu>
        ; def2 := <all-menu>
        
rules 

  apply-optional(s, k) = 
    ![<s> | <k>] <+ k

rules

  entity-to-view-edit-pages =
    ?Entity(x_Class, y_Class, prop*, functions)
    ; where(id
       ; entity-to-all-menu 
       ; entity-to-new-menu
      )
    ; apply-optional(entity-to-edit-page, 
      apply-optional(entity-to-create-page, 
      apply-optional(entity-to-edit-rows, 
      apply-optional(entity-to-view-page, 
      apply-optional(entity-to-view-rows, 
      apply-optional(entity-to-view-all, 
                     ![]))))))

  entity-to-view-edit-pages : 
    EntityNoSuper($X, prop*, functions) -> 
    <entity-to-view-edit-pages> Entity($X, "Object", prop*, functions)
    
rules

  entity-to-new-menu =
    ?Entity($X, y_Class, prop*, functions);
    where (
      $createX := <concat-strings>["create", $X]
      ; str := $X
      ; rules ( 
          CreateMenu :+= elem|[ listitem{ navigate($createX()){str} } ]|
        )
    )

rules

  all-menu =
    where( elem* := <bagof-AllMenu>);
    !def|[
      define allMenu() {
        listitem{ "All" list{ elem* } }
      }
    ]|
    
  entity-to-all-menu =
    ?Entity($X, y_Class, prop*, functions);
    where (
      $allX := <concat-strings>["all", $X]
      ; str := $X
      ; rules ( 
          AllMenu :+= elem|[ listitem{ navigate($allX()){str} } ]|
        )
    )
    
  create-menu =
    where( elem* := <bagof-CreateMenu>);
    !def|[
      define createMenu() {
        listitem{ "New" list{ elem* } }
      }
    ]|
    
rules // edit page

  entity-to-view-all : 
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $allX() {
        main(){}
        define body() {
          section{ header{"All " str }
            form {
              list { 
                for(x : $X) {
                  listitem{ 
                    navigate($viewX(x)){text(x.name)} " "
                    actionLink("[X]", $removeX(x))
                    action $removeX(x : $X) {
                      x.delete();
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]|
    where $removeX := <concat-strings>["remove", $X]
        ; x        := <decapitalize-string> $X
        ; $viewX   := x
        ; $allX    := <concat-strings>["all", $X]
        ; str      := $X
        ; not(<TemplateDefinition> $allX) // don't overwrite an existing definition
    
rules // edit page

  entity-to-create-page : 
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $createX() {
        var x : $X := $X{};
        main(){}
        //define sidebar() { } // $xSidebar(){} } // why define an empty sidebar?
        define body() {
          section{ header{"Create new " str }
            form {
              table { $editRowsX(x){} }
              action("Save",   save())
              action("Cancel", cancel())
            }
          }
          action cancel() { return home(); }
          action save() { x.save(); return $viewX(x); }
        }
      }
    ]|
    where $createX   := <concat-strings>["create", $X]
        ; x          := <decapitalize-string> $X
        ; $viewX     := x
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; str        := $X
        ; not(<TemplateDefinition> $createX) // don't overwrite an existing definition

  entity-to-edit-page : 
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $editX(x : $X) {
        main()
        //define sidebar() { } // $xSidebar(){} } // why define an empty sidebar?
        define body() {
          section{ header{"Edit " str " " text(x.name) }
            form {
              table { $editRowsX(x){} }
              action("Save",   save())
              action("Cancel", cancel())
            }
          }
          action cancel() { return $viewX(x); }
          action save() { x.save(); return $viewX(x); }
        }
      }
    ]|
    where $editX     := <concat-strings>["edit", $X]
        ; x          := <decapitalize-string> $X
        ; $viewX     := x
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; str        := $X
        ; not(<TemplateDefinition> $editX) // don't overwrite an existing definition
     
  entity-to-edit-rows :
    Entity($X, $Y, prop*, functions) ->
    def|[
      define $editRowsX(x : $X) {
        $editRowsY(x){}
        elem*
      }
    ]|
    where x          := <decapitalize-string> $X
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; $editRowsY := <concat-strings>["editRows", $Y]
        ; not(<TemplateDefinition> $editRowsX) // don't overwrite an existing definition
        ; elem*      := <properties-to-edit-row(| Var(x), x )> prop*
        
  properties-to-edit-row(|e, qid) =
    filter-concat-warn(property-to-edit-row(|e, qid)|"cannot create edit row for property ")
    
  property-to-edit-row(|e, qid) = fail
    <+ composite-property-to-edit-row(|e, qid)
    <+ basic-property-to-edit-row(|e, qid)
    
  basic-property-to-edit-row(|e, qid) :
    Property(y, k, s, anno*) -> elem*|[
      row { str input(e.y) }
    ]|
    where str := <concat-strings>[<capitalize-string> y, ":"]
    
  composite-property-to-edit-row(|e, qid) :
    Property(y, Comp(), SimpleSort($Y), anno*) -> elem*|[
      row { str "" }
      elem*
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
        ; elem* := <Properties; properties-to-edit-row(||[ e.y ]|, Qualified(qid, y))> $Y

rules // view page

  entity-to-view-page : 
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $viewX(x : $X) {
        main(){}
        define manageMenu() {
          listitem { navigate("Edit", $editX(x)) }
        }
        // define sidebar() { } //$xSidebar(){} // why define an empty sidebar?
        define body() {
          section{ header{text(x.name) }
            $viewRowsX(x){} 
          }
        }
      }
    ]|
    where $editX     := <concat-strings>["edit", $X]
        ; x          := <decapitalize-string> $X
        ; $viewX     := x
        ; $viewRowsX := <concat-strings>["viewRows", $X]
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; not(<TemplateDefinition> $viewX) // don't overwrite an existing definition
    
  entity-to-view-rows :
    Entity($X, $Y, prop*, functions) ->
    def|[
      define $viewRowsX(x : $X) {
        $viewRowsY(x)
        table {
          elem*
        }
      }
    ]|
    where x          := <decapitalize-string> $X
        ; $viewRowsX := <concat-strings>["viewRows", $X]
        ; $viewRowsY := <concat-strings>["viewRows", $Y]
        ; not(<TemplateDefinition> $viewRowsX) // don't overwrite an existing definition
        ; elem*      := <properties-to-view-rows(|$X, Var(x))> prop*
                      
  entity-to-view-properties :
    Entity($X, $Y, prop*, functions) ->
    def|[
      define $viewRowsX(x : $X) {
        $viewRowsY(x)
        elem*
      }
    ]|
    where x          := <decapitalize-string> $X
        ; $viewRowsX := <concat-strings>["viewRows", $X]
        ; $viewRowsY := <concat-strings>["viewRows", $Y]
        ; not(<TemplateDefinition> $viewRowsX) // don't overwrite an existing definition
        ; elem*      := <properties-to-view(|$X, Var(x))> prop*

  properties-to-view-rows(|$X, e) =
    filter-concat-warn(property-to-view-row(|$X, e) | "cannot create view row for property ")
        
  properties-to-view(|$X, e) =
    filter-concat-warn(property-to-view-row(|$X, e) | "cannot create view row for property ")
    
  property-to-view-row(|$X, e) = 
    basic-property-to-view-row(|e)
    
  property-to-view(|$X, e) = 
       name-property-to-view-row
    <+ text-property-to-view-row(|e)
    <+ comp-collection-property-to-view-row(|$X, e)
    <+ collection-property-to-view-row(|$X, e)
    <+ reference-property-to-view-row(|e)
    <+ composite-property-to-view-row(|$X, e)
    <+ basic-property-to-view(|e)
    
  basic-property-to-view-row(|e) :
    Property(y, k, s, anno*) -> elem*|[
      row{ str output(e.y) }
    ]|
    where str := <concat-strings>[<capitalize-string> y, ":"]
    
  basic-property-to-view(|e) :
    Property(y, k, s, anno*) -> elem*|[
      par{ str " : " output(e.y) }
    ]|
    where str := <capitalize-string> y

  basic-property-to-view-row(|e) :
    DerivedProperty(y, k, s, anno*, ex) -> elem*|[
      par{ str " : " output(e.y) }
    ]|
    where str := <capitalize-string> y
    
  name-property-to-view-row :
    Property(_, _, _, _) -> elem*|[ ]|
    where is-namefield
          // in the inline style, the name property is used as section header

  name-property-to-view-row :
    DerivedProperty(_, _, _, _, _) -> elem*|[ ]|
    where is-namefield
    
  reference-property-to-view-row(|e) :
    |[ y -> $Y (ann*) ]| -> 
    elem*|[
      section{ header{str} list{listitem{ output(e.y) } } }
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
  
  composite-property-to-view-row(|$X, e) :
    |[ y <> $Y (ann*) ]| -> 
    elem*|[
      section{ 
        header{str}
        elem*
      }
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
        ; elem* := <Properties; properties-to-view-rows(|$X, |[ e.y ]|)> $Y
  
  text-property-to-view-row(|e) :
    Property(y, k, SimpleSort("Text"), anno*) -> 
    elem*|[
      section{ header{str} output(e.y) }
    ]|
    where str := <capitalize-string> y
  
  text-property-to-view-row(|e) :
    DerivedProperty(y, k, SimpleSort("Text"), anno*, ex) -> 
    elem*|[
      section{ header{str} output(e.y) }
    ]|
    where str := <capitalize-string> y
  
  collection-property-to-view-row(|$T, e) :
    prop@|[ $y -> $Z<$Y> (ann*) ]| -> 
    elem*|[
      section{ 
        header{str} 
        output(e.$y)
        elem*
      }
    ]|
    where str   := <capitalize-string> $y
        ; elem* := <create-new-association-object(|$T, e)> prop

  collection-property-to-view-row(|$T, e) :
    prop@|[ $y -> $Z<$Y> (ann*) := e2 ]| -> 
    elem*|[
      section{ 
        header{str} 
        output(e.$y)
      }
    ]|
    where str   := <capitalize-string> $y

  comp-collection-property-to-view-row(|$T, e) :
    prop@|[ y <> $Z<$Y> (ann*) ]| -> 
    elem*|[
      section{ 
        header{str} 
        for(z : $Y in e.$yList) { section{ header{output(z)} $viewRowsY(z) } }
        elem*
      }
    ]|
    where <?"Set" <+ ?"List"> $Z
        ; str         := <capitalize-string> y
        ; z           := <decapitalize-string> $Y
        ; $yList      := <concat-strings>[y, "List"]
        ; $viewRowsY  := <concat-strings>["viewRows", $Y]
        ; elem*       := <create-new-association-object(|$T, e)> prop

  comp-collection-property-to-view-row(|$T, e) :
    prop@|[ y <> $Z<$Y> (ann*) := e2 ]| -> 
    elem*|[
      section{ 
        header{str} 
        for(z : $Y in e.$yList) { section{ header{output(z)} $viewRowsY(z) } }
      }
    ]|
    where <?"Set" <+ ?"List"> $Z
        ; str         := <capitalize-string> y
        ; z           := <decapitalize-string> $Y
        ; $yList      := <concat-strings>[y, "List"]
        ; $viewRowsY  := <concat-strings>["viewRows", $Y]
        
  create-new-association-object(|$T, e) :
    |[ y k $Z<$Y> (ann*) ]| ->
    elem*|[
      form{
        actionLink(str2, $createNewY(e, e.y))
        action $createNewY($x : $T, y : $Z<$Y>) {
          var $z : $Y := $Y { };
          y.add($z);
          $x.persist();
          return $editY($z);
        }
      }
    ]|
    where <?"Set" <+ ?"List"> $Z
        ; $z          := <decapitalize-string; newname> $Y
        ; $x          := <decapitalize-string; newname> $T
        ; str2        := <concat-strings>["New ", $Y]
        ; $createNewY := <concat-strings>["createNew", <capitalize-string> y, $Y]
        ; $editY      := <concat-strings>["edit", $Y]


