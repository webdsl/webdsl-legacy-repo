/**

 Desugaring rules for WebDSL
 
*/

module org/webdsl/dsl/transformation/desugar

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL

strategies

  desugar = 
    topdown-l(repeat(Desugar))
    ; try(sometd(create-inverse-anno))
    ; try(sometd(create-inverse-anno))

rules

  Desugar :
    elem|[ navigate(url(e)){} ]| -> elem|[ navigate(url(e)){text(e)} ]|

  Desugar :
    elem|[ navigate(e1, e2){} ]| -> elem|[ navigate(e2){text(e1)} ]|
  
     
  Desugar :
    String(x) -> String(y)
    where y := <un-double-quote> x
    
 Desugar :
    elem|[ select( x : srt, str1, e) ]| -> elem|[ select( x : srt, str2, e ) ]|
    where str2 := <un-double-quote> str1
    
  Desugar : 
    |[ x k srt ]| -> |[ x k srt () ]|
  
  Desugar :
    |[ x k srt := e ]| -> |[ x k srt () := e ]|
    
    //PropertyNoAnno(x, k, s) -> Property(x, k, s, [])
    
  Desugar :
    TemplateCallNoArgs(x) -> TemplateCall(x, [], [])
    
  Desugar :
    TemplateCallNoBody(x, args) -> TemplateCall(x, args, [])
    
  Desugar :
    TemplateCallBody(x, body) -> TemplateCall(x, [], body)
  
  Desugar :
    IfNoElse(e, sit) -> If(e, sit, [])
  
  Desugar :
    Text(x) -> Text(y)
    where y := <un-double-quote> x
    
  Desugar :
    elem*|[ text(e1,e2,e*){} elem* ]| -> elem*|[ text(e1){} text(e2,e*){ } elem* ]|

  create-inverse-anno :
    Entity(x_class,superclass, props, functions) -> Entity(x_class,superclass, props2, functions) 
    where props2 := <map(try(desugar-inverse-property(|x_class)))> props

  create-inverse-anno :
    EntityNoSuper(x_class, props, functions) -> EntityNoSuper(x_class, props2, functions) 
    where props2 := <map(try(desugar-inverse-property(|x_class)))> props
  
  desugar-inverse-property(|x_class) :
    Property(x, k, GenericSort(coll, [s@SimpleSort(ss)]), anno*) -> Property(x, k, GenericSort(coll, [s]), anno2*)
    where <map(try(declare-inverse-anno(|x_class, x)))> anno*
        ; anno2* := <create-inverse-slave-anno(|x_class,x)> anno*
  
  create-inverse-slave-anno(|x_class,p) :
    xs -> [slaveanno|xs]
    where [] := <collect(?InverseSlaveAnno(_, _))> xs
        ; (ent, fld) := <CreateInverseSlaveAnno> (x_class, p)
        ; slaveanno := InverseSlaveAnno(ent, fld)
  
  declare-inverse-anno(|x_class, p) =
    ?InverseAnno(ent, fld)
    ; rules(
        CreateInverseSlaveAnno : (ent, fld) -> (x_class, p)
      )

rules // derive input behaviour from type

  derive =
    topdown(repeat(Derive <+ Desugar))

  Derive = fail
    <+ DeriveInputString
    <+ DeriveInputText
    <+ DeriveInputSecret
    <+ DeriveInputDate
    <+ DeriveInputSimpleRefAssociation
    <+ DeriveInputAssociationList
    <+ DeriveInputAssociationSet
    
  DeriveInputString :
    elem|[ input(e){} ]| -> elem|[ inputString(e){} ]|
    where SimpleSort("String") := <type-of> e
        
  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputURL(e){} ]|
    where SimpleSort("URL") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputImage(e){} ]|
    where SimpleSort("Image") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputEmail(e){} ]|
    where SimpleSort("Email") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputInt(e){} ]|
    where SimpleSort("Int") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputFloat(e){} ]|
    where SimpleSort("Float") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputText(e){} ]|
    where SimpleSort("Text") := <type-of> e
    
  DeriveInputSecret :
    elem|[ input(e){} ]| -> elem|[ inputSecret(e){} ]|
    where SimpleSort("Secret") := <type-of> e
    
  DeriveInputDate :
    elem|[ input(e){} ]| -> elem|[ inputDate(e){} ]|
    where SimpleSort("Date") := <type-of> e

  DeriveInputSimpleRefAssociation :
    elem|[ input(e){} ]| ->
    elem|[
      div("inputSimpleRefAssociation") {
        text(e.name) " "
        select( y1 : $Y, "Select", $setY(y1) )
        action $setY(y2 : $Y) { qid := y2; }
      }
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; y      := <decapitalize-string> $Y
        ; y1     := <newname> y
        ; y2     := <newname> y
        ; $setY  := <concat-strings; newname>["set", $Y] 
        ; $viewY := <concat-strings>["view", $Y] 
        ; qid    := <exp-to-qid> e
        
  exp-to-qid :
    FieldAccess(e, f) -> Qualified(qid, f)
    where not(Var(_) := e)
        ; qid := <exp-to-qid> e
    
  exp-to-qid :
    FieldAccess(Var(x), f) -> Qualified(x, f)
        
  exp-to-qid :
    Var(x) -> x
    
  DeriveInputAssociationList :
    elem|[ input(e){} ]| ->
    elem|[ 
      div("inputAssociationList"){
        list { for(x : $X in e){ listitem { 
          text(x.name) " "
          actionLink("[X]", $removeX(x))
          action $removeX(x : $X) { e.remove(x); }
        }} }
        select(x1 : $X, str, $addX(x1))
        action $addX   (x : $X) { e.add(x); }
      }
    ]|
    where |[ List<$X> ]| := <type-of> e
        ; x        := <decapitalize-string; newname> $X
        ; x1       := <decapitalize-string; newname> $X
        ; $viewX   := <concat-strings>["view", $X]
        ; $removeX := <concat-strings; newname>["remove", $X]
        ; $addX    := <concat-strings; newname>["add", $X]
        ; str      := <concat-strings>["Add ", $X]
            
  // sets treated slightly differently; 
  
  DeriveInputAssociationSet :
    elem|[ input(e0){} ]| ->
    elem|[ 
      div("inputAssociationSet"){       
        list { for(x : $X in e.$yList){ div("listAssociation"){ 
          listitem{
            text(x.name) " "
            actionLink("[X]", $removeX(x))
            action $removeX(x : $X) { e.$y.remove(x); }
          }
        }} }
        select(x1 : $X, str, $addX(x1))
        action $addX   (x : $X) { e.$y.add(x); }
      }
    ]|
    where |[ Set<$X> ]| := <type-of> |[ e0 ]|
        ; |[ e.$y ]| := e0
        ; $yList   := <concat-strings>[$y, "List"]
        ; x        := <decapitalize-string; newname> $X
        ; x1       := <decapitalize-string; newname> $X
        ; $viewX   := <concat-strings>["view", $X]
        ; $removeX := <concat-strings; newname>["remove", $X]
        ; $addX    := <concat-strings; newname>["add", $X]
        ; str      := <concat-strings>["Add ", $X]

rules // derive output behaviour from type

  Derive = fail
    <+ DeriveOutputString
    <+ DeriveOutputText
    <+ DeriveOutputSecret
    <+ DeriveOutputDate
    <+ DeriveOutputSimpleRefAssociation
    <+ DeriveOutputAssociationList
    <+ DeriveOutputAssociationSet
    <+ DeriveForExp
    
  DeriveOutputString :
    elem|[ output(e){} ]| -> elem|[ text(e){} ]|
    where SimpleSort("String") := <type-of> e
        
  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ navigate(url(e)){text(e)} ]| 
    where SimpleSort("URL") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ image(e){} ]|
    where SimpleSort("Image") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ navigate(url(e)){text(e)} ]|
    where SimpleSort("Email") := <type-of> e
    
    // @todo prefix mailto

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ text(e){} ]|
    where SimpleSort("Int") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ text(e){} ]|
    where SimpleSort("Float") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ outputText(e){} ]|
    where SimpleSort("Text") := <type-of> e
    
  DeriveOutputSecret :
    elem|[ output(e){} ]| -> elem|[ outputSecret(e){} ]|
    where SimpleSort("Secret") := <type-of> e
    
  DeriveOutputDate :
    elem|[ output(e){} ]| -> elem|[ outputDate(e){} ]|
    where SimpleSort("Date") := <type-of> e

  DeriveOutputSimpleRefAssociation :
    elem|[ output(e){} ]| -> elem|[ navigate($viewY(e)){text(e.name)} ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; $viewY := <concat-strings>["view", $Y]
       
  DeriveOutputAssociationList :
    elem|[ output(e1){} ]| -> elem|[ list { for(x : $X in e1){ listitem{ output(e2) } } } ]|
    where |[ List<$X> ]| := <type-of> e1
        ; x := <decapitalize-string; newname> $X
        ; e2 := Var(x){Type(SimpleSort($X))}

  DeriveOutputAssociationSet :
    elem|[ output(e1){} ]| -> elem|[ list { for(x : $X in e2.$yList){ listitem{ output(e3) } } } ]|
    where |[ Set<$X> ]| := <type-of> e1
        ; |[ e2.$y ]| := e1
        ; x := <decapitalize-string; newname> $X
        ; $yList := <concat-strings>[$y, "List"]
        ; e3 := Var(x){Type(SimpleSort($X))}

  DeriveForExp :
     Assign(Assignment(x, e)) -> s
     where {| ForE
            : e2 := <sometd(LiftForExp)> e
            ; s:= <repeat(once-ForE)> Assign(Assignment(x, e2))
            |}

  LiftForExp :
    ForExp(x, srt1, e1, e2) -> Var(x1)
    where new => x1
        ; srt2 := <type-of> e1
        ; e3 := <try(sometd(LiftForExp))> e1
        ; e4 := <try(sometd(LiftForExp))> e2
        ; rules( ForE :+ stat -> |[
              {
                var x1 : srt2;
                x1 := List<srt1>();
                for x : srt1 in e3 do
                  x1.add(e4);
                end
                stat
              } ]| )
  
  
/*
  
LiftBuildApps : 
    |[ !t ]| -> s
    where {| AddApp
	   : <sometd(LiftBuildApp)> t => t'
	   ; <repeat(once-AddApp)> |[ !t' ]| => s
	   |}

  LiftBuildApp :
    Term|[ <s> t ]| -> Term|[ x ]|
    where new => x
        ; rules( AddApp :+ s' -> |[ {x : where(<s> t => x); s'} ]| )

  LiftBuildApp :
    Term|[ <s> ]| -> Term|[ x ]|
    where new => x
        ; rules( AddApp :+ s' -> |[ {x : where(s => x); s'} ]| )  
*/  
  
rules

  add-view-edit-pages-to-app :
    app@|[ application qid sec* ]| ->
    |[ 
       application qid 
         sec* 
         section generated pages.
           def1 
           def2 
           define editRowsObject(o: Object) {} 
           define viewRowsObject(o: Object) {}
           def* 
    ]|
    where def* := <collect(entity-to-view-edit-pages); concat> app
        ; def1 := <create-menu>
        ; def2 := <all-menu>
        
rules 

  apply-optional(s, k) = 
    ![<s> | <k>] <+ k

rules

  entity-to-view-edit-pages =
    ?Entity(x_Class, y_Class, prop*, functions)
    ; where(id
       ; entity-to-all-menu 
       ; entity-to-new-menu
      )
    ; apply-optional(entity-to-edit-page, 
      apply-optional(entity-to-create-page, 
      apply-optional(entity-to-edit-rows, 
      apply-optional(entity-to-view-page, 
      apply-optional(entity-to-view-rows, 
      apply-optional(entity-to-view-all, 
                     ![]))))))

  entity-to-view-edit-pages : 
    EntityNoSuper($X, prop*, functions) -> 
    <entity-to-view-edit-pages> Entity($X, "Object", prop*, functions)
    
rules

  entity-to-new-menu =
    ?Entity($X, y_Class, prop*, functions);
    where (
      $createX := <concat-strings>["create", $X]
      ; str := $X
      ; rules ( 
          CreateMenu :+= elem|[ listitem{ navigate($createX()){str} } ]|
        )
    )

rules

  all-menu =
    where( elem* := <bagof-AllMenu>);
    !def|[
      define allMenu() {
        listitem{ "All" list{ elem* } }
      }
    ]|
    
  entity-to-all-menu =
    ?Entity($X, y_Class, prop*, functions);
    where (
      $allX := <concat-strings>["all", $X]
      ; str := $X
      ; rules ( 
          AllMenu :+= elem|[ listitem{ navigate($allX()){str} } ]|
        )
    )
    
  create-menu =
    where( elem* := <bagof-CreateMenu>);
    !def|[
      define createMenu() {
        listitem{ "New" list{ elem* } }
      }
    ]|
    
rules // edit page

  entity-to-view-all : 
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $allX() {
        main(){}
        define body() {
          section{ header{"All " str }
            form {
              list { 
                for(x : $X) {
                  listitem{ 
                    navigate($viewX(x)){text(x.name)} " "
                    actionLink("[X]", $removeX(x))
                    action $removeX(x : $X) {
                      x.delete();
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]|
    where $removeX := <concat-strings>["remove", $X]
        ; $viewX   := <concat-strings>["view", $X]
        ; $allX    := <concat-strings>["all", $X]
        ; x        := <decapitalize-string> $X
        ; str      := $X
        ; not(<TemplateDefinition> $allX) // don't overwrite an existing definition
    
rules // edit page

  entity-to-create-page : 
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $createX() {
        var x : $X := $X{};
        main(){}
        define sidebar() { } // $xSidebar(){} }
        define body() {
          section{ header{"Create new " str }
            form {
              table { $editRowsX(x){} }
              action("Save",   save())
              action("Cancel", cancel())
            }
          }
          action cancel() { return home(); }
          action save() { x.save(); return $viewX(x); }
        }
      }
    ]|
    where $createX   := <concat-strings>["create", $X]
        ; $viewX     := <concat-strings>["view", $X]
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; x          := <decapitalize-string> $X
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; str        := $X
        ; not(<TemplateDefinition> $createX) // don't overwrite an existing definition

  entity-to-edit-page : 
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $editX(x : $X) {
        main()
        define sidebar() { } // $xSidebar(){} }
        define body() {
          section{ header{"Edit " str " " text(x.name) }
            form {
              table { $editRowsX(x){} }
              action("Save",   save())
              action("Cancel", cancel())
            }
          }
          action cancel() { return $viewX(x); }
          action save() { x.save(); return $viewX(x); }
        }
      }
    ]|
    where $editX     := <concat-strings>["edit", $X]
        ; $viewX     := <concat-strings>["view", $X]
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; x          := <decapitalize-string> $X
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; str        := $X
        ; not(<TemplateDefinition> $editX) // don't overwrite an existing definition
     
  entity-to-edit-rows :
    Entity($X, $Y, prop*, functions) ->
    def|[
      define $editRowsX(x : $X) {
        $editRowsY(x){}
        elem*
      }
    ]|
    where x          := <decapitalize-string> $X
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; $editRowsY := <concat-strings>["editRows", $Y]
        ; not(<TemplateDefinition> $editRowsX) // don't overwrite an existing definition
        ; elem*      := <properties-to-edit-row(| Var(x), x )> prop*
        
  properties-to-edit-row(|e, qid) =
    filter-concat-warn(property-to-edit-row(|e, qid)|"cannot create edit row for property ")
    
  property-to-edit-row(|e, qid) = fail
    <+ composite-property-to-edit-row(|e, qid)
    <+ basic-property-to-edit-row(|e, qid)
    
  basic-property-to-edit-row(|e, qid) :
    Property(y, k, s, anno*) -> elem*|[
      row { str input(e.y) }
    ]|
    where str := <capitalize-string> y
    
  composite-property-to-edit-row(|e, qid) :
    Property(y, Comp(), SimpleSort($Y), anno*) -> elem*|[
      row { str "" }
      elem*
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
        ; elem* := <Properties; properties-to-edit-row(||[ e.y ]|, Qualified(qid, y))> $Y

rules // view page

  entity-to-view-page : 
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $viewX(x : $X) {
        main(){}
        define manageMenu() {
          listitem { navigate("Edit", $editX(x)) }
        }
        define sidebar() { 
          //$xSidebar(){} 
        }
        define body() {
          section{ header{text(x.name) }
            $viewRowsX(x){} 
          }
        }
      }
    ]|
    where $editX     := <concat-strings>["edit", $X]
        ; $viewX     := <concat-strings>["view", $X]
        ; $viewRowsX := <concat-strings>["viewRows", $X]
        ; x          := <decapitalize-string> $X
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; not(<TemplateDefinition> $viewX) // don't overwrite an existing definition
     
  entity-to-view-rows :
    Entity($X, $Y, prop*, functions) ->
    def|[
      define $viewRowsX(x : $X) {
        $viewRowsY(x)
        elem*
      }
    ]|
    where x          := <decapitalize-string> $X
        ; $viewRowsX := <concat-strings>["viewRows", $X]
        ; $viewRowsY := <concat-strings>["viewRows", $Y]
        ; not(<TemplateDefinition> $viewRowsX) // don't overwrite an existing definition
        ; elem*      := <properties-to-view-rows(|$X, Var(x))> prop*
        
  properties-to-view-rows(|$X, e) =
    filter-concat-warn(property-to-view-row(|$X, e) | "cannot create view row for property ")
    
  property-to-view-row(|$X, e) = fail
    <+ name-property-to-view-row
    <+ text-property-to-view-row(|e)
    <+ comp-collection-property-to-view-row(|$X, e)
    <+ collection-property-to-view-row(|$X, e)
    <+ reference-property-to-view-row(|e)
    <+ composite-property-to-view-row(|$X, e)
    <+ basic-property-to-view-row(|e)
    
  basic-property-to-view-row(|e) :
    Property(y, k, s, anno*) -> elem*|[
      par{ str " : " output(e.y) }
    ]|
    where str := <capitalize-string> y
    
  name-property-to-view-row :
    Property(_, _, _, _) -> elem*|[ ]|
    where is-namefield
          // in the inline style, the name property is used as section header
    
  reference-property-to-view-row(|e) :
    |[ y -> $Y (ann*) ]| -> 
    elem*|[
      section{ header{str} list{listitem{ output(e.y) } } }
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
  
  composite-property-to-view-row(|$X, e) :
    |[ y <> $Y (ann*) ]| -> 
    elem*|[
      section{ 
        header{str}
        elem*
      }
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
        ; elem* := <Properties; properties-to-view-rows(|$X, |[ e.y ]|)> $Y
  
  text-property-to-view-row(|e) :
    Property(y, k, SimpleSort("Text"), anno*) -> 
    elem*|[
      section{ header{str} output(e.y) }
    ]|
    where str := <capitalize-string> y
  
  collection-property-to-view-row(|$T, e) :
    prop@|[ $y -> $Z<$Y> (ann*) ]| -> 
    elem*|[
      section{ 
        header{str} 
        output(e.$y)
        elem*
      }
    ]|
    where str   := <capitalize-string> $y
        ; elem* := <create-new-association-object(|$T, e)> prop

  comp-collection-property-to-view-row(|$T, e) :
    prop@|[ y <> $Z<$Y> (ann*) ]| -> 
    elem*|[
      section{ 
        header{str} 
        for(z : $Y in e.$yList) { section{ header{output(z)} $viewRowsY(z) } }
        elem*
      }
    ]|
    where <?"Set" <+ ?"List"> $Z
        ; str         := <capitalize-string> y
        ; z           := <decapitalize-string> $Y
        ; $yList      := <concat-strings>[y, "List"]
        ; $viewRowsY  := <concat-strings>["viewRows", $Y]
        ; elem*       := <create-new-association-object(|$T, e)> prop
        
  create-new-association-object(|$T, e) :
    |[ y k $Z<$Y> (ann*) ]| ->
    elem*|[
      form{actionLink(str2, $createNewY(e, e.y))}
      action $createNewY($x : $T, y : $Z<$Y>) {
        var $z : $Y := $Y { };
        y.add($z);
        $x.persist();
        return $editY($z);
      }
    ]|
    where <?"Set" <+ ?"List"> $Z
        ; $z          := <decapitalize-string; newname> $Y
        ; $x          := <decapitalize-string; newname> $T
        ; str2        := <concat-strings>["New ", $Y]
        ; $createNewY := <concat-strings>["createNew", $Y]
        ; $editY      := <concat-strings>["edit", $Y]
