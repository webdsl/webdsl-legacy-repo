/**

 Desugaring rules for WebDSL

*/

module org/webdsl/dsl/transformation/desugar

imports
  libstrategolib
  Java-15
  libjava-front

imports
  libwebdsl-front

signature
  constructors
    RemoveMe : Annotation

strategies

  desugar-top =
    {| DesugarMemo : desugar-im |}

  desugar-im = 
    desugar-memo(
      //desugar-local-declaration(desugar-im-trav) <+
      desugar-im-trav
    )
    
  desugar-im-trav =
    all-l(desugar-im)
    ; try(desugar; desugar-im)
    
  desugar-memo(s) =
    DesugarMemo
    <+ {?t; s; ?t'; rules( DesugarMemo : t -> t' )}
     
strategies
/*
  desugar =
    desugar-any
    ; repeat(
        merge-webdsl-declarations // after desugaring, merge back in the new defintions
        ; (attach-extend-entities
          <+ attach-extend-functions))
    ; declare-definitions // and declare new definitions
    */

  /*type-annotate-local(s) :
    [VarDeclInit(x, s, e1) | stat1*] -> [VarDeclInit(x, s, e2) | stat2*]
    where e2 := <s> e1
        ; {| TypeOf, DesugarMemo
           : rules( TypeOf : x -> s )
           ; stat2* := <s> stat1*
           |}
   */
  /*desugar =
    type-annotate*/
    
/*strategies

  desugar-old =
    normalize-any; desugar-any; normalize-any
    ; merge-webdsl-declarations // after desugaring, merge back in the new defintions

  desugar-any = // Can be applied to any kind of tree (expressions, statements)
    try(sometd(DesugarOnce))
    //; topdown-l(repeat(Desugar))
    ; desugar-with-context
    ; try(sometd(create-inverse-anno))
    ; try(sometd(create-inverse-anno))
    ; try(sometd(create-email-argument-list))

  desugar-with-context =
    {| CurrentPage, CurrentPageArguments
     : if ?def|[ define page x_nm(farg*) { elem* } ]| then
         rules ( CurrentPage := x_nm 
                 CurrentPageArguments := farg* )
       end
     ; try(repeat(Desugar))
     ; try(all(desugar-with-context))
     |}
*/
strategies

  /*merge-webdsl-declarations =
    ?Application(qid, sections)
    ; !Application(qid, <concat> [sections, <get-webdsl-definitions>])
    ; try(attach-extend-entities)
    ; try(attach-extend-functions)
    ; cleanup-removemes
    ; declare-definitions // and declare new definitions
    */
    
rules

 /* attach-extend-entities =
    sometd(create-extend-entity-dynamic-rules)
    ; try(sometd(attach-properties-to-entity))
    ; cleanup-extend-entity-section-defs
    
  attach-extend-functions =
    {| ExtendFunctionDef
     : sometd(create-extend-function-dynamic-rules)
     ; try(sometd(combine-functions))
     ; cleanup-removemes
     |}

  create-extend-function-dynamic-rules :
    ExtendFunction(Function(fun, fargs, _, Block(stats))) -> RemoveMe()
    where fsig := <map(\ Arg(_, srt) -> srt \)> fargs
        ; rules (
            ExtendFunctionDef :+
              (fun, fargs2, stats2) -> (fun, fargs2, newstats ) 
              where sig := <map(\ Arg(_, srt) -> srt \)> fargs
                  ; if sig := fsig then 
                      renamepairs := <zip> (<map(\ Arg(x, _) -> x\)> fargs, <map(\ Arg(x, _) -> x\)> fargs2)
                      ; (stats3, []) := <rename-all-vars> (stats, renamepairs)
                      ; newstats := <concat> [stats2, stats3]
                    else
                      newstats := stats2
                    end
          )

  rename-all-vars :
    (t, []) -> (t, [])

  rename-all-vars :
    (t, [(from, to)|rst]) -> <rename-all-vars> (t2, rst)
    where t2 := <procedure-rename-var(|from, to)> t

  // @TODO: This doesn't rename any parameters
  combine-functions :
    Function(fun, fargs, srt, Block(stats)) -> Function(fun, fargs, srt, Block(stats2))
    where (_, fargs, otherstats) := <repeat(once-ExtendFunctionDef)> (fun, fargs, [])
        ; stats2 := <concat> [otherstats, stats]

  cleanup-removemes :
    Application(ident,sections) -> Application(ident,<map(try(cleanup-removemes))> sections)

  cleanup-removemes :
    Section(nm, defs) -> Section(nm, <filter(not(?RemoveMe())); map(try(cleanup-removemes))> defs)

  cleanup-removemes :
    GlobalsDefinition(defs) -> GlobalsDefinition(<filter(not(?RemoveMe()))> defs)
*/

  // @todo use extended dynamic rules :+
  
  /*create-extend-entity-dynamic-rules:
    ExtendEntity(ident, props, funcs) -> ExtendEntity(ident, props, funcs)
    where olddynamicresultprops := <Extend-Entity-Properties(|[]) <+  ![] > ident
     ; newdynamicresultprops := <concat>[olddynamicresultprops,props]
       ; rules
      (
        Extend-Entity-Properties(|properties) : ident -> <concat> [properties,newdynamicresultprops]
      )
    ; olddynamicresultfuncs := <Extend-Entity-Functions(|[]) <+  ![] > ident
     ; newdynamicresultfuncs := <concat>[olddynamicresultfuncs,funcs]
       ; rules
      (
        Extend-Entity-Functions(|functions) : ident -> <concat> [functions,newdynamicresultfuncs]
      )*/
  
  desugar = once-ExtendEntity
  
  desugar :
    ExtendEntity(ident, props, funcs) -> RemoveMe()
    where rules (
        ExtendEntity :
          EntityNoSuper(ident, props2, funcs2) -> EntityNoSuper(ident, <concat> [props, props2], <concat> [funcs, funcs2])
      )
  
  desugar :
    [RemoveMe()|lst] -> lst

  /*
  create-extend-entity-dynamic-rules:
    ExtendSessionEntity(ident, props, funcs) -> ExtendEntity(ident, props, funcs)//easy cleanup
    where <create-extend-entity-dynamic-rules> ExtendEntity(ident, props, funcs)//reuse exising mechanism

  attach-properties-to-entity:
    Entity(ident,superident,props,funcs) ->
    Entity(ident,superident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident)

  attach-properties-to-entity:
    EntityNoSuper(ident,props,funcs) ->
    EntityNoSuper(ident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident)

  attach-properties-to-entity:
    SessionEntity(ident,props,funcs) ->
      SessionEntity(ident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident)

  cleanup-extend-entity-section-defs:
    Application(ident,sections) -> Application(ident,<alltd(cleanup-extend-entity-section-defs)> sections)

  cleanup-extend-entity-section-defs:
    Section(ident,defs) -> Section(ident,<filter(not(?ExtendEntity(_,_,_)))>defs)
*/
  create-email-argument-list:
   Define(mods, name, args, body1) -> Define(mods, name, args, body1)
   where try (if <oncetd(?ThisCall("email", [_]))> body1 then
           if not(<GetEmailArgumentsList> name) then
             x := <newname> "email_arguments"
             ; rules ( GetEmailArgumentsList : name -> x )
           end
         end )


rules // Desugaring rules only executed once

  desugar-var-decl-stm =
    not(?VarDeclInit(_, _, _))
    ; try(sometd(DesugarOnce))
    ; ![<id>]

  desugar-var-decl-stm :
    VarDeclInit(x, s, e1) -> [VarDecl(x, s), Assign(Assignment(x, e1))]

  DesugarOnce : // Its purpose is to translate VarDeclInits to VarDecls with separate assignment (only within Blocks, not within globals {...} statements)
    Block(stms1) -> Block(stms2)
    where stms2 := <map(desugar-var-decl-stm); concat> stms1

rules

  Desugar : // Provide some context for desugaring rules
    EntityNoSuper(nm, b, c) -> EntityNoSuper(nm, b2, c2)
    where {| InEntity
           : rules ( InEntity := nm )
           ; b2 := <topdown-l(repeat(Desugar))> b
           ; c2 := <topdown-l(repeat(Desugar))> c
           |}
           ; if b := b2; c := c2 then
               fail
             end

  Desugar :
    Entity(nm, b, c, d) -> Entity(nm, b2, c2, d2)
    where {| InEntity
           : rules ( InEntity := nm )
           ; b2 := <topdown-l(repeat(Desugar))> b
           ; c2 := <topdown-l(repeat(Desugar))> c
           ; d2 := <topdown-l(repeat(Desugar))> d
           |}
           ; if b := b2; c := c2; d := d2 then
               fail
             end

rules

  find-expression-params =
    ?fa@FieldAccess(v, _)
    ; not(<IgnoreVars> v)
    ; rules( Param :+= fa )
    ; rules( IgnoreVars : v )

  find-expression-params =
    ?v@Var(x)
    ; not(<IgnoreVars> v)
    ; not("Component" := <type-of> v)
    ; rules( Param :+= v )
    ; rules( IgnoreVars : v )

  find-expression-params = // Have to filter this one out later, but point is to ignore everything inside for-exps
    ?ForExp(oe, x, srt, ie, Filter(we, obe))
    ; {| IgnoreVars
       : rules ( IgnoreVars : Var(x) )
       ; <alltd(find-expression-params)> we
       ; <alltd(find-expression-params)> oe
       |}
    ; <try(sometd(find-expression-params))> ie

  forexp-function-param-to-farg :
     f@FieldAccess(_, x) -> farg|[ x : srt ]|
     where srt := <type-of> f

  forexp-function-param-to-farg :
    Var(x) -> farg|[ x : srt ]|
    where srt := <type-of> Var(x)

  find-params =
    ?fa@FieldAccess(v, _)
    ; not(<IgnoreVars> fa) // v
    ; rules( Param :+= fa )
    ; rules( IgnoreVars :  fa) // v

  find-params =
    ?v@Var(x)
    ; not(<IgnoreVars> v)
    ; not("Component" := <type-of> v)
    ; rules( Param :+= v )
    ; rules( IgnoreVars : v )

  find-params = // Have to filter this one out later, but point is to ignore everything inside for-exps
    ?ForExp(oe, x, srt, ie, Filter(we, obe))
    ; {| IgnoreVars
       : rules ( IgnoreVars : Var(x) )
       ; <try(sometd(find-params))> we
       ; <try(sometd(find-params))> oe
       |}
    ; <try(sometd(find-params))> ie

  desugar :
    fe@ForExp(oe, x, s, ie, fltr) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <topdown(try(find-params))> fe
           ; params := <bagof-Param>
           |}
        ; farg* := <map(forexp-function-param-to-farg)> params
        //
        ; srt2 := <type-of> ie
        ; GenericSort(_, [srt]) := srt2
        ; srt3 := <type-of> oe
        ; e3 := ie
        ; e4 := oe
        //; newnm := <new-forexp-name>
        ; if <?GenericSort("List",_)> srt2 then
            srt4 := GenericSort("List", [srt3])
            ; e5 := |[ List<srt3>() ]|
          else // Set
            srt4 := GenericSort("Set", [srt3])
            ; e5 := |[ Set<srt3>() ]|
          end
        ; e7 := <add-not-null-checks> NotEq(e3,Null())
        ; fun := fun|[
              function $fun (farg*) : srt4 {
                var l : srt4;
                l := e5;
                if(e7) {
                  for(x : srt in e3 fltr) {
                    l.add(e4);
                  }
                } else {}
                return l;
              }
            ]|
        ; if $entity := <InEntity> then
            <emit-webdsl-code> def|[ extend entity $entity { fun } ]|
          else
            <emit-webdsl-code> def|[ globals { fun } ]|
          end

  Desugar :
    AndForExp(fe@ForExp(oe, x, s, ie, fltr)) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <topdown(try(find-params))> fe
           ; params := <bagof-Param>
           |}
        ; farg* := <map(forexp-function-param-to-farg)> params
        //
        ; GenericSort(_, [srt]) := <type-of> ie
        ; e3 := ie
        ; e4 := oe
        ; e7 := <add-not-null-checks> NotEq(e3,Null())
        ; fun := fun|[
              function $fun (farg*) : Bool {
                if(e7) {
                  for(x : srt in e3 fltr) {
                    if(!e4) {
                      return false;
                    } else {}
                  }
                } else {}
                return true;
              }
            ]|
        ; if $entity := <InEntity> then
            <emit-webdsl-code> def|[ extend entity $entity { fun } ]|
          else
            <emit-webdsl-code> def|[ globals { fun } ]|
          end

  Desugar :
    OrForExp(fe@ForExp(oe, x, s, ie, fltr)) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <topdown(try(find-params))> fe
           ; params := <bagof-Param>
           |}
        ; farg* := <map(forexp-function-param-to-farg)> params
        //
        ; GenericSort(_, [srt]) := <type-of> ie
        ; e3 := ie
        ; e4 := oe
        ; e7 := <add-not-null-checks> NotEq(e3,Null())
        ; fun := fun|[
              function $fun (farg*) : Bool {
                if(e7) {
                  for(x : srt in e3 fltr) {
                    if(e4) {
                      return true;
                    } else {}
                  }
                } else {}
                return false;
              }
            ]|
        ; if $entity := <InEntity> then
            <emit-webdsl-code> def|[ extend entity $entity { fun } ]|
          else
            <emit-webdsl-code> def|[ globals { fun } ]|
          end

  Desugar :
    ListCreation([e1|e1*]) -> ThisCall($fun, params)
    where $fun := <newname> "listCr"
        ; {| Param, IgnoreVars
           : <topdown(try(find-params))> [e1|e1*]
           ; params := <bagof-Param>
           |}
        ; farg* := <map(forexp-function-param-to-farg)> params
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("List", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> [e1|e1*]
        ; fun := fun|[
              function $fun (farg*) : srt2 {
                var l : srt2 := List<srt1>();
                stat*
                return l;
              }
            ]|
        ; if $entity := <InEntity> then
            <emit-webdsl-code> def|[ extend entity $entity { fun } ]|
          else
            <emit-webdsl-code> def|[ globals { fun } ]|
          end

  Desugar :
    SetCreation([e1|e1*]) -> ThisCall($fun, params)
    where $fun := <newname> "setCr"
        ; {| Param, IgnoreVars
           : <topdown(try(find-params))> [e1|e1*]
           ; params := <bagof-Param>
           |}
        ; farg* := <map(forexp-function-param-to-farg)> params
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("Set", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> [e1|e1*]
        ; fun := fun|[
              function $fun (farg*) : srt2 {
                var l : srt2 := Set<srt1>();
                stat*
                return l;
              }
            ]|
        ; if $entity := <InEntity> then
            <emit-webdsl-code> def|[ extend entity $entity { fun } ]|
          else
            <emit-webdsl-code> def|[ globals { fun } ]|
          end

rules

  create-inverse-anno :
    Entity(x_class,superclass, props, functions) -> Entity(x_class,superclass, props2, functions)
    where props2 := <map(try(desugar-inverse-property(|x_class)))> props

  create-inverse-anno :
    EntityNoSuper(x_class, props, functions) -> EntityNoSuper(x_class, props2, functions)
    where props2 := <map(try(desugar-inverse-property(|x_class)))> props

  desugar-inverse-property(|x_class) :
    Property(x, k, GenericSort(coll, [s@SimpleSort(ss)]), anno*) -> Property(x, k, GenericSort(coll, [s]), anno2*)
    where <map(try(declare-inverse-anno(|x_class, x)))> anno*
        ; anno2* := <create-inverse-slave-anno(|x_class,x)> anno*

  desugar-inverse-property(|x_class) :
    Property(x, k, s@SimpleSort(ss), anno*) -> Property(x, k, s, anno2*)
    where <map(try(declare-inverse-anno(|x_class, x)))> anno*
        ; anno2* := <create-inverse-slave-anno(|x_class,x)> anno*

  create-inverse-slave-anno(|x_class,p) :
    xs -> [slaveanno|xs]
    where [] := <collect(?InverseSlaveAnno(_, _))> xs
        ; (ent, fld) := <CreateInverseSlaveAnno> (x_class, p)
        ; slaveanno := InverseSlaveAnno(ent, fld)

  declare-inverse-anno(|x_class, p) =
    ?InverseAnno(ent, fld)
    ; rules(
        CreateInverseSlaveAnno : (ent, fld) -> (x_class, p)
      )






