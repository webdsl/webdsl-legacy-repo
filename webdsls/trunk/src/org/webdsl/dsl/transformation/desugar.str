/**

 Desugaring rules for WebDSL
 
*/

module org/webdsl/dsl/transformation/desugar

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL

strategies

  desugar = 
    topdown-l(repeat(Desugar))

rules

  Desugar :
    elem|[ navigate(url(e)) ]| -> elem|[ navigate(e, url(e)) ]|
    
    //TemplateCall("navigate", [ThisCall("url",[e])], []) ->
    //TemplateCall("navigate", [e, ThisCall("url",[e])], [])

  Desugar :
    String(x) -> String(y)
    where y := <un-double-quote> x
    
 Desugar :
    elem|[ select( x : srt, str1, e) ]| -> elem|[ select( x : srt, str2, e ) ]|
    //Select(x, s, label1, e) -> Select(x, s, label2, e)
    where str2 := <un-double-quote> str1
    
  Desugar : 
    |[ x k srt ]| -> |[ x k srt () ]|
    
    //PropertyNoAnno(x, k, s) -> Property(x, k, s, [])
    
  Desugar :
    TemplateCallNoArgs(x) -> TemplateCall(x, [], [])
    
  Desugar :
    TemplateCallNoBody(x, args) -> TemplateCall(x, args, [])
    
  Desugar :
    TemplateCallBody(x, body) -> TemplateCall(x, [], body)
    
  Desugar :
    Text(x) -> Text(y)
    where y := <un-double-quote> x
    
  Desugar :
    elem*|[ text(e1,e2,e*){} elem* ]| -> elem*|[ text(e1){} text(e2,e*){ } elem* ]|
    
    //[TemplateCall("text", [arg1, arg2 | args], []) | elems]->
    //[TemplateCall("text", [arg1], [])
    //,TemplateCall("text", [arg2 | args], []) | elems]
    
    
  Derive = 
    InputAssociation
    
  InputAssociation :
    elem|[ input(e){} ]| -> <debug(!"result: ")>
    elem|[ 
      div("inputAssociation"){       
        for(x : $X in e){ div("listAssociation"){ 
          navigate(x.name, $viewX (x)){}
          actionLink("[X]", $removeX(x)){}
          action $removeX(x : $X) { e.remove(x); }
        }}
        select(x1 : $X, str, $addX(x1))
        action $addX   (x : $X) { e.add(x); }
      }
    ]|
    where <type-of> e => |[ List<$X> ]|
        ; x        := <decapitalize-string; newname> $X
        ; x1       := <decapitalize-string; newname> $X
        ; $viewX   := <concat-strings; newname>["view", $X]
        ; $removeX := <concat-strings; newname>["remove", $X]
        ; $addX    := <concat-strings; newname>["add", $X]
        ; str      := <concat-strings; newname>["Add ", $X]
    