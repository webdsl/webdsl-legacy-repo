/**

 Desugaring rules for WebDSL
 
*/

module org/webdsl/dsl/transformation/desugar

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  org/webdsl/dsl/syntax/WebDSL

strategies

  desugar = 
    topdown-l(repeat(Desugar))

rules

  Desugar :
    elem|[ navigate(url(e)){} ]| -> elem|[ navigate(url(e)){text(e)} ]|

  Desugar :
    elem|[ navigate(e1, e2){} ]| -> elem|[ navigate(e2){text(e1)} ]|
   
  Desugar :
    String(x) -> String(y)
    where y := <un-double-quote> x
    
 Desugar :
    elem|[ select( x : srt, str1, e) ]| -> elem|[ select( x : srt, str2, e ) ]|
    where str2 := <un-double-quote> str1
    
  Desugar : 
    |[ x k srt ]| -> |[ x k srt () ]|
    
    //PropertyNoAnno(x, k, s) -> Property(x, k, s, [])
    
  Desugar :
    TemplateCallNoArgs(x) -> TemplateCall(x, [], [])
    
  Desugar :
    TemplateCallNoBody(x, args) -> TemplateCall(x, args, [])
    
  Desugar :
    TemplateCallBody(x, body) -> TemplateCall(x, [], body)
    
  Desugar :
    Text(x) -> Text(y)
    where y := <un-double-quote> x
    
  Desugar :
    elem*|[ text(e1,e2,e*){} elem* ]| -> elem*|[ text(e1){} text(e2,e*){ } elem* ]|

rules // derive input behaviour from type

  derive =
    topdown(repeat(Derive <+ Desugar))

  Derive = fail
    <+ DeriveInputString
    <+ DeriveInputText
    <+ DeriveInputSecret
    <+ DeriveInputDate
    <+ DeriveInputSimpleRefAssociation
    <+ DeriveInputAssociationList
    <+ DeriveInputAssociationSet
    
  DeriveInputString :
    elem|[ input(e){} ]| -> elem|[ inputString(e){} ]|
    where SimpleSort("String") := <type-of> e
        
  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputURL(e){} ]|
    where SimpleSort("URL") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputImage(e){} ]|
    where SimpleSort("Image") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputEmail(e){} ]|
    where SimpleSort("Email") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputInt(e){} ]|
    where SimpleSort("Int") := <type-of> e

  DeriveInputText :
    elem|[ input(e){} ]| -> elem|[ inputText(e){} ]|
    where SimpleSort("Text") := <type-of> e
    
  DeriveInputSecret :
    elem|[ input(e){} ]| -> elem|[ inputSecret(e){} ]|
    where SimpleSort("Secret") := <type-of> e
    
  DeriveInputDate :
    elem|[ input(e){} ]| -> elem|[ inputDate(e){} ]|
    where SimpleSort("Date") := <type-of> e

  DeriveInputSimpleRefAssociation :
    elem|[ input(e){} ]| ->
    elem|[
      div("inputSimpleRefAssociation") {
        text(e.name) " "
        select( y1 : $Y, "Select", $setY(y1) )
        action $setY(y2 : $Y) { qid := y2; }
      }
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; y      := <decapitalize-string> $Y
        ; y1     := <newname> y
        ; y2     := <newname> y
        ; $setY  := <concat-strings; newname>["set", $Y] 
        ; $viewY := <concat-strings>["view", $Y] 
        ; qid    := <exp-to-qid> e
        
  exp-to-qid :
    FieldAccess(e, f) -> Qualified(qid, f)
    where not(Var(_) := e)
        ; qid := <exp-to-qid> e
    
  exp-to-qid :
    FieldAccess(Var(x), f) -> Qualified(x, f)
        
  exp-to-qid :
    Var(x) -> x
    
  DeriveInputAssociationList :
    elem|[ input(e){} ]| ->
    elem|[ 
      div("inputAssociationList"){       
        for(x : $X in e){ div("listAssociation"){ 
          text(x.name) " "
          actionLink("[X]", $removeX(x))
          action $removeX(x : $X) { e.remove(x); }
        }}
        select(x1 : $X, str, $addX(x1))
        action $addX   (x : $X) { e.add(x); }
      }
    ]|
    where |[ List<$X> ]| := <type-of> e
        ; x        := <decapitalize-string; newname> $X
        ; x1       := <decapitalize-string; newname> $X
        ; $viewX   := <concat-strings>["view", $X]
        ; $removeX := <concat-strings; newname>["remove", $X]
        ; $addX    := <concat-strings; newname>["add", $X]
        ; str      := <concat-strings>["Add ", $X]
            
  // sets treated slightly differently; 
  
  DeriveInputAssociationSet :
    elem|[ input(e0){} ]| ->
    elem|[ 
      div("inputAssociationSet"){       
        for(x : $X in e.$yList){ div("listAssociation"){ 
          text(x.name) " "
          actionLink("[X]", $removeX(x))
          action $removeX(x : $X) { e.$y.remove(x); }
        }}
        select(x1 : $X, str, $addX(x1))
        action $addX   (x : $X) { e.$y.add(x); }
      }
    ]|
    where |[ Set<$X> ]| := <type-of> |[ e0 ]|
        ; |[ e.$y ]| := e0
        ; $yList   := <concat-strings>[$y, "List"]
        ; x        := <decapitalize-string; newname> $X
        ; x1       := <decapitalize-string; newname> $X
        ; $viewX   := <concat-strings>["view", $X]
        ; $removeX := <concat-strings; newname>["remove", $X]
        ; $addX    := <concat-strings; newname>["add", $X]
        ; str      := <concat-strings>["Add ", $X]

rules // derive output behaviour from type

  Derive = fail
    <+ DeriveOutputString
    <+ DeriveOutputText
    <+ DeriveOutputSecret
    <+ DeriveOutputDate
    <+ DeriveOutputSimpleRefAssociation
    <+ DeriveOutputAssociationList
    <+ DeriveOutputAssociationSet
    
  DeriveOutputString :
    elem|[ output(e){} ]| -> elem|[ text(e){} ]|
    where SimpleSort("String") := <type-of> e
        
  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ navigate(url(e)){text(e)} ]| 
    where SimpleSort("URL") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ image(e){} ]|
    where SimpleSort("Image") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ navigate(url(e)){text(e)} ]|
    where SimpleSort("Email") := <type-of> e
    
    // @todo prefix mailto

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ text(e){} ]|
    where SimpleSort("Int") := <type-of> e

  DeriveOutputText :
    elem|[ output(e){} ]| -> elem|[ outputText(e){} ]|
    where SimpleSort("Text") := <type-of> e
    
  DeriveOutputSecret :
    elem|[ output(e){} ]| -> elem|[ outputSecret(e){} ]|
    where SimpleSort("Secret") := <type-of> e
    
  DeriveOutputDate :
    elem|[ output(e){} ]| -> elem|[ outputDate(e){} ]|
    where SimpleSort("Date") := <type-of> e

  DeriveOutputSimpleRefAssociation :
    elem|[ output(e){} ]| -> elem|[ navigate($viewY(e)){text(e.name)} ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; $viewY := <concat-strings>["view", $Y]
       
  DeriveOutputAssociationList :
    elem|[ output(e1){} ]| -> elem|[ for(x : $X in e1){ output(e2) } ]|
    where |[ List<$X> ]| := <type-of> e1
        ; x := <decapitalize-string; newname> $X
        ; e2 := Var(x){Type(SimpleSort($X))}

  DeriveOutputAssociationSet :
    elem|[ output(e1){} ]| -> elem|[ for(x : $X in e2.$yList){ output(e3) } ]|
    where |[ Set<$X> ]| := <type-of> e1
        ; |[ e2.$y ]| := e1
        ; x := <decapitalize-string; newname> $X
        ; $yList := <concat-strings>[$y, "List"]
        ; e3 := Var(x){Type(SimpleSort($X))}

rules

  add-view-edit-pages-to-app :
    app@|[ application qid sec* ]| ->
    |[ 
       application qid 
         sec* 
         section generated pages.
           def def* 
    ]|
    where def* := <collect(entity-to-view-edit-pages); concat> app
        ; def := <create-menu>
        
rules 

  apply-optional(s, k) = 
    ![<s> | <k>] <+ k

rules

  entity-to-view-edit-pages =
    ?Entity(x_Class, y_Class, prop*)
    ; where(entity-to-new-menu)
    ; apply-optional(entity-to-edit-page, 
      apply-optional(entity-to-create-page, 
      apply-optional(entity-to-edit-rows, 
      apply-optional(entity-to-view-page, 
      apply-optional(entity-to-view-rows, 
                     ![])))))

  entity-to-view-edit-pages : 
    EntityNoSuper($X, prop*) -> 
    <entity-to-view-edit-pages> Entity($X, SimpleSort("Object"), prop*)
    
rules

  entity-to-new-menu =
    ?Entity($X, y_Class, prop*);
    where (
      $createX := <concat-strings>["create", $X]
      ; str := $X
      ; rules ( 
          CreateMenu :+= elem|[ listitem{ navigate($createX()){str} } ]|
        )
    )
    
  create-menu =
    where( elem* := <bagof-CreateMenu>);
    !def|[
      define createMenu() {
        listitem{ "New" list{ elem* } }
      }
    ]|
    
rules // edit page

  entity-to-create-page : 
    Entity($X, y_Class, prop*) ->
    def|[
      define page $createX() {
        var x : $X := $X{};
        main(){}
        define sidebar() { } // $xSidebar(){} }
        define body() {
          section{ header{"Create new " str }
            form {
              table { $editRowsX(x){} }
              action("Save",   save())
              action("Cancel", cancel())
            }
          }
          action cancel() { return home(); }
          action save() { x.save(); return $viewX(x); }
        }
      }
    ]|
    where $createX   := <concat-strings>["create", $X]
        ; $viewX     := <concat-strings>["view", $X]
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; x          := <decapitalize-string> $X
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; str        := $X
        ; not(<TemplateDefinition> $createX) // don't overwrite an existing definition

  entity-to-edit-page : 
    Entity($X, y_Class, prop*) ->
    def|[
      define page $editX(x : $X) {
        main()
        define sidebar() { } // $xSidebar(){} }
        define body() {
          section{ header{"Edit " str " " text(x.name) }
            form {
              table { $editRowsX(x){} }
              action("Save",   save())
              action("Cancel", cancel())
            }
          }
          action cancel() { return $viewX(x); }
          action save() { x.save(); return $viewX(x); }
        }
      }
    ]|
    where $editX     := <concat-strings>["edit", $X]
        ; $viewX     := <concat-strings>["view", $X]
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; x          := <decapitalize-string> $X
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; str        := $X
        ; not(<TemplateDefinition> $editX) // don't overwrite an existing definition
     
  entity-to-edit-rows :
    Entity($X, y_Class, prop*) ->
    def|[
      define $editRowsX(x : $X) {
        elem*
      }  
    ]|
    where x          := <decapitalize-string> $X
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; not(<TemplateDefinition> $editRowsX) // don't overwrite an existing definition
        ; elem*      := <properties-to-edit-row(| Var(x), x )> prop*
        
  properties-to-edit-row(|e, qid) =
    filter-concat-warn(property-to-edit-row(|e, qid)|"cannot create edit row for property ")
    
  property-to-edit-row(|e, qid) = fail
    <+ composite-property-to-edit-row(|e, qid)
    <+ basic-property-to-edit-row(|e, qid)
    
  basic-property-to-edit-row(|e, qid) :
    Property(y, k, s, anno*) -> elem*|[
      row { str input(e.y) }
    ]|
    where str := <capitalize-string> y
    
  composite-property-to-edit-row(|e, qid) :
    Property(y, Comp(), SimpleSort($Y), anno*) -> elem*|[
      row { str "" }
      elem*
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
        ; elem* := <Properties; properties-to-edit-row(||[ e.y ]|, Qualified(qid, y))> $Y
        
  // @todo reformulate as desugaring
  
  //reference-property-to-edit-row(|e, qid) :
  //  Property(y, Ref(), SimpleSort($Y), anno*) -> elem*|[
  //    row { str div(""){
  //                navigate(e.y.name, $viewY(e.y))
  //                select( y1 : $Y, "Select", $setY(y1) )
  //              } }
  //    action $setY(y2 : $Y) { qid.y := y2; }
  //  ]|
  //  where <defined-java-type> SimpleSort($Y)
  //      ; str := <capitalize-string> y
  //      ; y1 := <newname> y
  //      ; y2 := <newname> y
  //      ; $setY := <concat-strings; newname>["set", $Y] 
  //      ; $viewY := <concat-strings>["view", $Y] 

  //set-property-to-edit-row(|e, qid) :
  //  Property(y, k, GenericSort("Set", [s]), anno*) -> elem*|[
  //     row { str input(e.$yList) }
  //  ]|
  //  where str := <capitalize-string> y
  //      ; $yList := <concat-strings>[y, "List"]

rules // view page

  entity-to-view-page : 
    Entity($X, y_Class, prop*) ->
    def|[
      define page $viewX(x : $X) {
        main(){}
        define manageMenu() {
          listitem { navigate("Edit", $editX(x)) }
        }
        define sidebar() { 
          //$xSidebar(){} 
        }
        define body() {
          section{ header{text(x.name) }
            table { $viewRowsX(x){} }
          }
        }
      }
    ]|
    where $editX     := <concat-strings>["edit", $X]
        ; $viewX     := <concat-strings>["view", $X]
        ; $viewRowsX := <concat-strings>["viewRows", $X]
        ; x          := <decapitalize-string> $X
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; not(<TemplateDefinition> $viewX) // don't overwrite an existing definition
     
  entity-to-view-rows :
    Entity($X, y_Class, prop*) ->
    def|[
      define $viewRowsX(x : $X) {
        elem*
      }
    ]|
    where x          := <decapitalize-string> $X
        ; $viewRowsX := <concat-strings>["viewRows", $X]
        ; not(<TemplateDefinition> $viewRowsX) // don't overwrite an existing definition
        ; elem*      := <properties-to-view-rows(| Var(x) )> prop*
        
  properties-to-view-rows(|e) =
    filter-concat-warn(property-to-view-row(|e) | "cannot create view row for property ")
    
  property-to-view-row(|e) = fail
    //<+ collection-property-to-view-row(|e)
    //<+ reference-property-to-view-row(|e)
    <+ composite-property-to-view-row(|e) 
    <+ basic-property-to-view-row(|e)

  /*
  reference-property-to-view-row(|e) :
    Property(y, Ref(), SimpleSort($Y), anno*) -> elem*|[
      row { str navigate(e.y.name, $viewY(e.y)) }
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
        ; $viewY := <concat-strings>["view", $Y]

  */
  
  composite-property-to-view-row(|e) :
    Property(y, Comp(), SimpleSort($Y), anno*) -> elem*|[
      row { str "" }
      elem*
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
        ; elem* := <Properties; properties-to-view-rows(||[ e.y ]|)> $Y
    
  basic-property-to-view-row(|e) :
    Property(y, k, s, anno*) -> elem*|[
      row { str output(e.y) }
    ]|
    where str := <capitalize-string> y
    
  // @todo reformulate as a desugaring via output element
    
    /* 
  collection-property-to-view-row(|e) :
    Property(y, k, GenericSort(coll, [SimpleSort($Y)]), anno*) -> elem*|[
      row { str for( y1 : $Y in e.$yList ) { elem } }
    ]|
    where <is-collection> coll
        ; str := <capitalize-string> y
        ; y1 := <newname> y
        ; $yList := <concat-strings>[y, "List"]
        ; elem := <type-to-view(| Var(y1) )> SimpleSort($Y)
        
  is-collection =
    ?"List" <+ ?"Set"
    
  type-to-view(|e) :
    s@SimpleSort($Y) -> elem|[ text(e) ]|
    where <builtin-java-type> s

  type-to-view(|e) :
    s@SimpleSort($Y) -> elem|[ navigate(e.name, $viewY(e)) ]|
    where <defined-java-type> s    
        ; $viewY := <concat-strings>["view", $Y]
        
   */
        
