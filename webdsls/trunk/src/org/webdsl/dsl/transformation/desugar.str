/**

 Desugaring rules for WebDSL

*/

module org/webdsl/dsl/transformation/desugar

imports
  libstrategolib
  Java-15
  libjava-front

imports
  libwebdsl-front

strategies

  desugar =
    desugar-any
    ; merge-webdsl-declarations // after desugaring, merge back in the new defintions
    ; attach-extend-entities
    ; declare-definitions // and declare new definitions


  merge-webdsl-declarations =
    ?Application(qid, sections)
    ; !Application(qid, <concat> [sections, <get-webdsl-definitions>])

  desugar-any = // Can be applied to any kind of tree (expressions, statements)
    try(sometd(DesugarOnce))
    //; topdown-l(repeat(Desugar))
    ; desugar-with-context
    ; try(sometd(create-inverse-anno))
    ; try(sometd(create-inverse-anno))
    ; try(sometd(create-email-argument-list))

  desugar-with-context =
    {| CurrentPage, CurrentPageArguments
     : if ?def|[ define page x_nm(farg*) { elem* } ]| then
         rules ( CurrentPage := x_nm 
                 CurrentPageArguments := farg* )
       end
     ; try(repeat(Desugar))
     ; try(all(desugar-with-context))
     |}

rules

  attach-extend-entities =
    try(sometd(create-extend-entity-dynamic-rules))
    ; try(sometd(attach-properties-to-entity))
    ; cleanup-extend-entity-section-defs

  // @todo use extended dynamic rules :+
  
  create-extend-entity-dynamic-rules:
    ExtendEntity(ident, props, funcs) -> ExtendEntity(ident, props, funcs)
    where olddynamicresultprops := <Extend-Entity-Properties(|[]) <+  ![] > ident
     ; newdynamicresultprops := <concat>[olddynamicresultprops,props]
       ; rules
      (
        Extend-Entity-Properties(|properties) : ident -> <concat> [properties,newdynamicresultprops]
      )
    ; olddynamicresultfuncs := <Extend-Entity-Functions(|[]) <+  ![] > ident
     ; newdynamicresultfuncs := <concat>[olddynamicresultfuncs,funcs]
       ; rules
      (
        Extend-Entity-Functions(|functions) : ident -> <concat> [functions,newdynamicresultfuncs]
      )

  create-extend-entity-dynamic-rules:
    ExtendSessionEntity(ident, props, funcs) -> ExtendEntity(ident, props, funcs)//easy cleanup
    where <create-extend-entity-dynamic-rules> ExtendEntity(ident, props, funcs)//reuse exising mechanism

  attach-properties-to-entity:
    Entity(ident,superident,props,funcs) ->
    Entity(ident,superident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident)

  attach-properties-to-entity:
    EntityNoSuper(ident,props,funcs) ->
    EntityNoSuper(ident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident)

  attach-properties-to-entity:
    SessionEntity(ident,props,funcs) ->
      SessionEntity(ident,<once-Extend-Entity-Properties(|props)> ident,<once-Extend-Entity-Functions(|funcs)> ident)

  cleanup-extend-entity-section-defs:
    Application(ident,sections) -> Application(ident,<alltd(cleanup-extend-entity-section-defs)> sections)

  cleanup-extend-entity-section-defs:
    Section(ident,defs) -> Section(ident,<filter(not(?ExtendEntity(_,_,_)))>defs)

  create-email-argument-list:
   Define(mods, name, args, body1) -> Define(mods, name, args, body1)
   where try (if <oncetd(?ThisCall("email", [_]))> body1 then
           if not(<GetEmailArgumentsList> name) then
             x := <newname> "email_arguments"
             ; rules ( GetEmailArgumentsList : name -> x )
           end
         end )


rules // Desugaring rules only executed once

  desugar-var-decl-stm =
    not(?VarDeclInit(_, _, _))
    ; try(sometd(DesugarOnce))
    ; ![<id>]

  desugar-var-decl-stm :
    VarDeclInit(x, s, e1) -> [VarDecl(x, s), Assign(Assignment(x, e1))]

  DesugarOnce : // Its purpose is to translate VarDeclInits to VarDecls with separate assignment (only within Blocks, not within globals {...} statements)
    Block(stms1) -> Block(stms2)
    where stms2 := <map(desugar-var-decl-stm); concat> stms1

rules

  Desugar : // Provide some context for desugaring rules
    EntityNoSuper(nm, b, c) -> EntityNoSuper(nm, b2, c2)
    where {| InEntity
           : rules ( InEntity := nm )
           ; b2 := <topdown-l(repeat(Desugar))> b
           ; c2 := <topdown-l(repeat(Desugar))> c
           |}
           ; if b := b2; c := c2 then
               fail
             end

  Desugar :
    Entity(nm, b, c, d) -> Entity(nm, b2, c2, d2)
    where {| InEntity
           : rules ( InEntity := nm )
           ; b2 := <topdown-l(repeat(Desugar))> b
           ; c2 := <topdown-l(repeat(Desugar))> c
           ; d2 := <topdown-l(repeat(Desugar))> d
           |}
           ; if b := b2; c := c2; d := d2 then
               fail
             end


  Desugar :
    elem|[ navigate(url(e)){} ]| -> elem|[ navigate(url(e)){url(e)} ]|

  Desugar :
    elem|[ navigate(url(e)) ]| -> elem|[ navigate(url(e)){url(e)} ]|

  Desugar :
    elem|[ navigate(e1, e2){} ]| -> elem|[ navigate(e2){text(e1)} ]|


  Desugar :
    String(x) -> String(y)
    where y := <un-double-quote> x

  Desugar :
    elem|[ select( x : srt, str1, e) ]| -> elem|[ select( x : srt, str2, e ) ]|
    where str2 := <un-double-quote> str1

  Desugar :
    |[ x k srt ]| -> |[ x k srt () ]|

  Desugar :
    |[ x k srt := e ]| -> |[ x k srt () := e ]|

  Desugar :
    TemplateCallNoArgs(x) -> TemplateCall(x, [], [])
    // elem|[ x ]| -> elem|[ x(){} ]|

  Desugar :
    //elem|[ x(e*) ]| -> elem|[ x(e*){} ]|
    TemplateCallNoBody(x, args) -> TemplateCall(x, args, [])

  Desugar :
    //elem|[ x{elem*} ]| -> elem|[ x(){elem*} ]|
    TemplateCallBody(x, body) -> TemplateCall(x, [], body)

  Desugar :
    IfNoElse(e, bit) -> If(e, bit, Block([]))

  Desugar :
    Text(x) -> Text(y)
    where y := <un-double-quote> x

  Desugar :
    elem*|[ text(e1,e2,e*){} elem* ]| -> elem*|[ text(e1){} text(e2,e*){ } elem* ]|

  Desugar :
    TemplateCall("menubar", [], elem*) -> TemplateCall("menubar", [exp], elem*)
    where exp := String("horizontal"){Type(SimpleSort("String"))}

  Desugar :
    TemplateCall("from", [exp1], []) -> TemplateCall("from", [exp1, exp1], [])

rules // for desugarings

  Desugar :
    OrderNonSpecific(x) -> OrderAscending(x)

  Desugar :
    ForNoFilter(x, s, e, te*) -> For(x, s, e, Filter(True(), OrderAscending(Null())), te*)
    //elem|[ for(x : srt in e){elem*} ]| -> elem|[ for(x : srt in e order by null asc){elem*} ]|

  Desugar :
    For(x, s, e, FilterNoWhere(obe), te*) -> For(x, s, e, Filter(True(), obe), te*)
    //elem|[ for(x : srt in e1 order by e2){elem*} ]| -> elem|[ for(x : srt in e1 where true order by e2){elem*} ]|

  Desugar :
    For(x, s, e, FilterNoOrderBy(we), te*) -> For(x, s, e, Filter(we, OrderAscending(Null())), te*)


  Desugar :
    ForAllNoFilter(x, s, te*) -> ForAll(x, s, Filter(True(), OrderAscending(Null())), te*)

  Desugar :
    ForAll(x, s, FilterNoOrderBy(we), te*) -> ForAll(x, s, Filter(we, OrderAscending(Null())), te*)

  Desugar :
    ForAll(x, s, FilterNoWhere(obe), te*) -> ForAll(x, s, Filter(True(), obe), te*)


  Desugar :
    fa@ForAll(x, SimpleSort(s), Filter(we, obe), te*) -> For(x, SimpleSort(s), e, Filter(we, OrderAscending(Null())), te*)
    where selectField := <newname> "queryVar"
        ; if <?OrderAscending(of)> obe then
            ordering := Ascending()
          else
            if <?OrderDescending(of)> obe then
              ordering := Descending()
            end
          end
        ; <?FieldAccess(_, orderfield)> of
        ; e := HqlQuery(QueryRule(SelectFrom(Some(Select(None(),[AliasedExpression(Path([selectField]),None())])),FromClause([FromRangeJoin(FromClass(Path([s]),Some(AsAlias(Alias(selectField))),None()),None())])),None(),None(),Some(OrderByClause([OrderElement(Path([selectField, <concat-strings> ["_", orderfield]]),Some(ordering))]))))

  Desugar :
    ForStmtNoFilter(x, s, e, block) -> ForStmt(x, s, e, Filter(True(), OrderAscending(Null())), block)

  Desugar :
    ForStmt(x, s, e, FilterNoOrderBy(we), body) -> ForStmt(x, s, e, Filter(we, OrderAscending(Null())), body)

  Desugar :
    ForStmt(x, s, e, FilterNoWhere(obe), body) -> ForStmt(x, s, e, Filter(True(), obe), body)


  Desugar :
    ForExpNoFilter(oe, x, s, ie) -> ForExp(oe, x, s, ie, Filter(True(), OrderAscending(Null())))

  Desugar :
    ForExp(oe, x, s, ie, FilterNoOrderBy(we)) -> ForExp(oe, x, s, ie, Filter(we, OrderAscending(Null())))

  Desugar :
    ForExp(oe, x, s, ie, FilterNoWhere(obe)) -> ForExp(oe, x, s, ie, Filter(True(), obe))

rules

  find-expression-params =
    ?fa@FieldAccess(v, _){Type(_)}
    ; not(<IgnoreVars> v)
    ; rules( Param :+= fa )
    ; rules( IgnoreVars : v )

  find-expression-params =
    ?v@Var(x){Type(vt)}
    ; not(<IgnoreVars> v)
    ; not("Component" := vt)
    ; rules( Param :+= v )
    ; rules( IgnoreVars : v )

  find-expression-params = // Have to filter this one out later, but point is to ignore everything inside for-exps
    ?ForExp(oe, x, srt, ie, Filter(we, obe))
    ; {| IgnoreVars
       : rules ( IgnoreVars : Var(x) )
       ; <alltd(find-expression-params)> we
       ; <alltd(find-expression-params)> oe
       |}
    ; <try(sometd(find-expression-params))> ie

  forexp-function-param-to-farg :
     FieldAccess(_, x) {Type(srt)} -> farg|[ x : srt ]|
     //where rules ( TransformParameterName : x -> y )

  forexp-function-param-to-farg :
    Var(x) {Type(srt)} -> farg|[ x : srt ]|
    //where rules ( TransformParameterName : x -> y )

  find-params =
    ?fa@FieldAccess(v, _){Type(_)}
    ; not(<IgnoreVars> fa) // v
    ; rules( Param :+= fa )
    ; rules( IgnoreVars :  fa) // v

  find-params =
    ?v@Var(x){Type(vt)}
    ; not(<IgnoreVars> v)
    ; not("Component" := vt)
    ; rules( Param :+= v )
    ; rules( IgnoreVars : v )

  find-params = // Have to filter this one out later, but point is to ignore everything inside for-exps
    ?ForExp(oe, x, srt, ie, Filter(we, obe))
    ; {| IgnoreVars
       : rules ( IgnoreVars : Var(x) )
       ; <try(sometd(find-params))> we
       ; <try(sometd(find-params))> oe
       |}
    ; <try(sometd(find-params))> ie

  Desugar :
    fe@ForExp(oe, x, s, ie, fltr) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <topdown(try(find-params))> fe
           ; params := <bagof-Param>
           |}
        ; farg* := <map(forexp-function-param-to-farg)> params
        //
        ; srt2 := <type-of> ie
        ; GenericSort(_, [srt]) := srt2
        ; srt3 := <type-of> oe
        ; e3 := ie
        ; e4 := oe
        //; newnm := <new-forexp-name>
        ; if <?GenericSort("List",_)> srt2 then
            srt4 := GenericSort("List", [srt3])
            ; e5 := |[ List<srt3>() ]|
          else // Set
            srt4 := GenericSort("Set", [srt3])
            ; e5 := |[ Set<srt3>() ]|
          end
        ; e7 := <add-not-null-checks> NotEq(e3,Null()){Type(SimpleSort("Bool"))}
        ; fun := fun|[
              function $fun (farg*) : srt4 {
                var l : srt4;
                l := e5;
                if(e7) {
                  for(x : srt in e3 fltr) {
                    l.add(e4);
                  }
                } else {}
                return l;
              }
            ]|
        ; if $entity := <InEntity> then
            <emit-webdsl-code> def|[ extend entity $entity { fun } ]|
          else
            <emit-webdsl-code> def|[ globals { fun } ]|
          end

  Desugar :
    AndForExp(fe@ForExp(oe, x, s, ie, fltr)) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <topdown(try(find-params))> fe
           ; params := <bagof-Param>
           |}
        ; farg* := <map(forexp-function-param-to-farg)> params
        //
        ; GenericSort(_, [srt]) := <type-of> ie
        ; e3 := ie
        ; e4 := oe
        ; e7 := <add-not-null-checks> NotEq(e3,Null()){Type(SimpleSort("Bool"))}
        ; fun := fun|[
              function $fun (farg*) : Bool {
                if(e7) {
                  for(x : srt in e3 fltr) {
                    if(!e4) {
                      return false;
                    } else {}
                  }
                } else {}
                return true;
              }
            ]|
        ; if $entity := <InEntity> then
            <emit-webdsl-code> def|[ extend entity $entity { fun } ]|
          else
            <emit-webdsl-code> def|[ globals { fun } ]|
          end

  Desugar :
    OrForExp(fe@ForExp(oe, x, s, ie, fltr)) -> ThisCall($fun, params)
    where $fun := <newname> "listCompr"
        ; {| Param, IgnoreVars
           : <topdown(try(find-params))> fe
           ; params := <bagof-Param>
           |}
        ; farg* := <map(forexp-function-param-to-farg)> params
        //
        ; GenericSort(_, [srt]) := <type-of> ie
        ; e3 := ie
        ; e4 := oe
        ; e7 := <add-not-null-checks> NotEq(e3,Null()){Type(SimpleSort("Bool"))}
        ; fun := fun|[
              function $fun (farg*) : Bool {
                if(e7) {
                  for(x : srt in e3 fltr) {
                    if(e4) {
                      return true;
                    } else {}
                  }
                } else {}
                return false;
              }
            ]|
        ; if $entity := <InEntity> then
            <emit-webdsl-code> def|[ extend entity $entity { fun } ]|
          else
            <emit-webdsl-code> def|[ globals { fun } ]|
          end

  Desugar :
    ListCreation([e1|e1*]) -> ThisCall($fun, params)
    where $fun := <newname> "listCr"
        ; {| Param, IgnoreVars
           : <topdown(try(find-params))> [e1|e1*]
           ; params := <bagof-Param>
           |}
        ; farg* := <map(forexp-function-param-to-farg)> params
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("List", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> [e1|e1*]
        ; fun := fun|[
              function $fun (farg*) : srt2 {
                var l : srt2 := List<srt1>();
                stat*
                return l;
              }
            ]|
        ; if $entity := <InEntity> then
            <emit-webdsl-code> def|[ extend entity $entity { fun } ]|
          else
            <emit-webdsl-code> def|[ globals { fun } ]|
          end

  Desugar :
    SetCreation([e1|e1*]) -> ThisCall($fun, params)
    where $fun := <newname> "setCr"
        ; {| Param, IgnoreVars
           : <topdown(try(find-params))> [e1|e1*]
           ; params := <bagof-Param>
           |}
        ; farg* := <map(forexp-function-param-to-farg)> params
        ; srt1 := <type-of> e1
        ; srt2 := GenericSort("Set", [srt1])
        ; stat* := <map(\ e -> |[ l.add(e); ]| \)> [e1|e1*]
        ; fun := fun|[
              function $fun (farg*) : srt2 {
                var l : srt2 := Set<srt1>();
                stat*
                return l;
              }
            ]|
        ; if $entity := <InEntity> then
            <emit-webdsl-code> def|[ extend entity $entity { fun } ]|
          else
            <emit-webdsl-code> def|[ globals { fun } ]|
          end

rules

  create-inverse-anno :
    Entity(x_class,superclass, props, functions) -> Entity(x_class,superclass, props2, functions)
    where props2 := <map(try(desugar-inverse-property(|x_class)))> props

  create-inverse-anno :
    EntityNoSuper(x_class, props, functions) -> EntityNoSuper(x_class, props2, functions)
    where props2 := <map(try(desugar-inverse-property(|x_class)))> props

  desugar-inverse-property(|x_class) :
    Property(x, k, GenericSort(coll, [s@SimpleSort(ss)]), anno*) -> Property(x, k, GenericSort(coll, [s]), anno2*)
    where <map(try(declare-inverse-anno(|x_class, x)))> anno*
        ; anno2* := <create-inverse-slave-anno(|x_class,x)> anno*

  desugar-inverse-property(|x_class) :
    Property(x, k, s@SimpleSort(ss), anno*) -> Property(x, k, s, anno2*)
    where <map(try(declare-inverse-anno(|x_class, x)))> anno*
        ; anno2* := <create-inverse-slave-anno(|x_class,x)> anno*

  create-inverse-slave-anno(|x_class,p) :
    xs -> [slaveanno|xs]
    where [] := <collect(?InverseSlaveAnno(_, _))> xs
        ; (ent, fld) := <CreateInverseSlaveAnno> (x_class, p)
        ; slaveanno := InverseSlaveAnno(ent, fld)

  declare-inverse-anno(|x_class, p) =
    ?InverseAnno(ent, fld)
    ; rules(
        CreateInverseSlaveAnno : (ent, fld) -> (x_class, p)
      )

rules // derive input behaviour from type

  derive =
    topdown(repeat(Derive <+ Desugar))

  Derive = fail
//    <+ DeriveInputString
    <+ DeriveInputSimpleRefAssociation
    <+ DeriveInputAssociationGenericSort
    <+ DeriveInput

  DeriveInputSimpleRefAssociation :
    elem|[ input(e){} ]| ->
    elem|[
      div("inputSimpleRefAssociation") {
        select( y1 : $Y, "Select", e )
      }
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; y      := <decapitalize-string> $Y
        ; y1     := <newname> y

  exp-to-qid :
    FieldAccess(e, f) -> Qualified(qid, f)
    where not(Var(_) := e)
        ; qid := <exp-to-qid> e

  exp-to-qid :
    FieldAccess(Var(x), f) -> Qualified(x, f)

  exp-to-qid :
    Var(x) -> x

  DeriveInputAssociationGenericSort :
    elem|[ input(e0){} ]| ->
    elem|[
      div("inputAssociationGenericSort"){
        select(x1 : $X, str, e0)
      }
    ]|
    where GenericSort(coll, [SimpleSort(X)]) := <type-of> |[ e0 ]|
        ; $X := X
        ; x1       := <decapitalize-string; newname> X
        ; str      := <concat-strings>["Add ", X]

rules // derive output behaviour from type

  Derive = fail
//    <+ DeriveOutputString
    <+ DeriveOutputSimpleRefAssociation
    <+ DeriveOutputAssociationList
    <+ DeriveOutputAssociationSet
    <+ DeriveOutput

  DeriveOutputSimpleRefAssociation :
    elem|[ output(e){} ]| -> elem|[ navigate($viewY(e)){text(e.name)} ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; $viewY := <decapitalize-string> $Y
        ; allsubclasses := <AllSubClasses>
        ; not(<fetch(?($Y,_))> allsubclasses)

  DeriveOutputSimpleRefAssociation :
    elem|[ output(e){} ]| -> elem|[
      container {
        elem*
      }
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <defined-java-type> SimpleSort($Y)
        ; allsubclasses := <AllSubClasses>
        ; subclasses := <retain-all(?($Y, _))> allsubclasses
        ; elem* := <map(DeriveSubclassOutput(|e, subclasses))> [($Y, $Y)|subclasses]

  is-not-subclass(|e) : [(x_super, x_class)] -> Not(IsA(e, SimpleSort(x_class)))
  is-not-subclass(|e) : [(x_super, x_class)|xs] -> And(Not(IsA(e, SimpleSort(x_class))), <is-not-subclass(|e)> xs)
  is-not-subclass(|e) : [] -> True()

  DeriveSubclassOutput(|e, subclasses) :
    (x_super, x_class) -> result
    where $viewY := <decapitalize-string> x_class
        ; srt := SimpleSort(x_class)
        ; result :=     IfTempl(And(IsA(e, SimpleSort(x_class)), <is-not-subclass(|e)> <remove-all(?(_, x_class))> subclasses),
            elem*|[ navigate($viewY(e as srt)){ text(e.name) } ]|)

  DeriveOutputAssociationList :
    elem|[ output(e1){} ]| -> elem|[ list { for(x : $X in e1){ listitem{ output(e2) } } } ]|
    where |[ List<$X> ]| := <type-of> e1
        ; x := <decapitalize-string; newname> $X
        ; e2 := Var(x){Type(SimpleSort($X))}

  DeriveOutputAssociationSet :
    elem|[ output(e1){} ]| -> elem|[ list { for(x : $X in e2.$yList){ listitem{ output(e3) } } } ]|
    where |[ Set<$X> ]| := <type-of> e1
        ; |[ e2.$y ]| := e1
        ; x := <decapitalize-string; newname> $X
        ; $yList := <concat-strings>[$y, "List"]
        ; e3 := Var(x){Type(SimpleSort($X))}


