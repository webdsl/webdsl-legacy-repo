module org/webdsl/dsl/transformation/default-pages

imports
  libstrategolib
  Java-15
  libjava-front
  libwebdsl-front

rules

  add-view-edit-pages-to-app :
    app@|[ application qid sec* ]| ->
    webdsl|[
       application qid
         sec*
         section generated pages.
           def1
           def2
           define editRowsObject(o: Object) {}
           define viewRowsObject(o: Object) {}
           def*
    ]|
    where def* := <collect(entity-to-view-edit-pages); concat> app
        ; def1 := <create-menu>
        ; def2 := <all-menu>

rules

  apply-optional(s, k) =
    ![<s> | <k>] <+ k

rules

  entity-to-view-edit-pages =
    ?Entity(x_Class, y_Class, prop*, functions)
    ; where(id
       ; entity-to-all-menu
       ; entity-to-new-menu
      )
    ; apply-optional(entity-to-edit-page,
      apply-optional(entity-to-create-page,
      apply-optional(entity-to-edit-rows,
      apply-optional(entity-to-view-page,
      apply-optional(entity-to-view-rows,
      apply-optional(entity-to-view-all,
                     ![]))))))

  entity-to-view-edit-pages :
    EntityNoSuper($X, prop*, functions) ->
    <entity-to-view-edit-pages> Entity($X, "Object", prop*, functions)

rules

  entity-to-new-menu =
    ?Entity($X, y_Class, prop*, functions);
    where (
      $createX := <concat-strings>["create", $X]
      ; str := $X
      ; rules (
          CreateMenu :+= elem|[ listitem{ navigate($createX()){str} } ]|
        )
    )

rules

  all-menu =
    where( elem* := <bagof-AllMenu>);
    !def|[
      define allMenu() {
        listitem{ "All" list{ elem* } }
      }
    ]|

  entity-to-all-menu =
    ?Entity($X, y_Class, prop*, functions);
    where (
      $allX := <concat-strings>["all", $X]
      ; str := $X
      ; rules (
          AllMenu :+= elem|[ listitem{ navigate($allX()){str} } ]|
        )
    )

  create-menu =
    where( elem* := <bagof-CreateMenu>);
    !def|[
      define createMenu() {
        listitem{ "New" list{ elem* } }
      }
    ]|

rules // edit page

  entity-to-view-all :
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $allX() {
        main(){}
        define body() {
          section{ header{"All " str }
            form {
              list {
                for(x : $X) {
                  listitem{
                    navigate($viewX(x)){text(x.name)} " "
                    actionLink("[X]", $removeX(x))
                    action $removeX(x : $X) {
                      x.delete();
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]|
    where $removeX := <concat-strings>["remove", $X]
        ; x        := <decapitalize-string> $X
        ; $viewX   := x
        ; $allX    := <concat-strings>["all", $X]
        ; str      := $X
        ; not(<TemplateDefinition> $allX) // don't overwrite an existing definition

rules // edit page

  entity-to-create-page :
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $createX() {
        var x : $X := $X{};
        main(){}
        //define sidebar() { } // $xSidebar(){} } // why define an empty sidebar?
        define body() {
          section{ header{"Create new " str }
            form {
              table { $editRowsX(x){} }
              action("Save",   save())
              action("Cancel", cancel())
            }
          }
          action cancel() { return home(); }
          action save() { x.save(); return $viewX(x); }
        }
      }
    ]|
    where $createX   := <concat-strings>["create", $X]
        ; x          := <decapitalize-string> $X
        ; $viewX     := x
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; str        := $X
        ; not(<TemplateDefinition> $createX) // don't overwrite an existing definition

  entity-to-edit-page :
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $editX(x : $X) {
        main()
        //define sidebar() { } // $xSidebar(){} } // why define an empty sidebar?
        define body() {
          section{ header{"Edit " str " " text(x.name) }
            form {
              table { $editRowsX(x){} }
              action("Save",   save())
              action("Cancel", cancel())
            }
          }
          action cancel() { cancel $viewX(x); }
          action save() { x.save(); return $viewX(x); }
        }
      }
    ]|
    where $editX     := <concat-strings>["edit", $X]
        ; x          := <decapitalize-string> $X
        ; $viewX     := x
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; str        := $X
        ; not(<TemplateDefinition> $editX) // don't overwrite an existing definition

  entity-to-edit-rows :
    Entity($X, $Y, prop*, functions) ->
    def|[
      define $editRowsX(x : $X) {
        $editRowsY(x){}
        elem*
      }
    ]|
    where x          := <decapitalize-string> $X
        ; $editRowsX := <concat-strings>["editRows", $X]
        ; $editRowsY := <concat-strings>["editRows", $Y]
        ; not(<TemplateDefinition> $editRowsX) // don't overwrite an existing definition
        ; elem*      := <properties-to-edit-row(| Var(x), x )> prop*

  properties-to-edit-row(|e, qid) =
    filter-concat-warn(property-to-edit-row(|e, qid)|"cannot create edit row for property ")

  property-to-edit-row(|e, qid) = fail
    <+ composite-property-to-edit-row(|e, qid)
    <+ basic-property-to-edit-row(|e, qid)

  basic-property-to-edit-row(|e, qid) :
    Property(y, k, s, anno*) -> elem*|[
      row { str input(e.y) }
    ]|
    where str := <concat-strings>[<capitalize-string> y, ":"]

  composite-property-to-edit-row(|e, qid) :
    Property(y, Comp(), SimpleSort($Y), anno*) -> elem*|[
      row { str "" }
      elem*
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
        ; elem* := <Properties; properties-to-edit-row(||[ e.y ]|, Qualified(qid, y))> $Y

rules // view page

  entity-to-view-page :
    Entity($X, y_Class, prop*, functions) ->
    def|[
      define page $viewX(x : $X) {
        main(){}
        define manageMenu() {
          listitem { navigate("Edit", $editX(x)) }
        }
        define body() {
          section{ header{text(x.name) }
            $viewRowsX(x){}
          }
          navigate("Edit", $editX(x))
        }
      }
    ]|
    where $editX     := <concat-strings>["edit", $X]
        ; x          := <decapitalize-string> $X
        ; $viewX     := x
        ; $viewRowsX := <concat-strings>["viewRows", $X]
        ; $xSidebar  := <concat-strings>[x, "Sidebar"]
        ; not(<TemplateDefinition> $viewX) // don't overwrite an existing definition

  entity-to-view-rows :
    Entity($X, $Y, prop*, functions) ->
    def|[
      define $viewRowsX(x : $X) {
        $viewRowsY(x)
        table {
          elem*
        }
      }
    ]|
    where x          := <decapitalize-string> $X
        ; $viewRowsX := <concat-strings>["viewRows", $X]
        ; $viewRowsY := <concat-strings>["viewRows", $Y]
        ; not(<TemplateDefinition> $viewRowsX) // don't overwrite an existing definition
        ; elem*      := <properties-to-view-rows(|$X, Var(x))> prop*

  entity-to-view-properties :
    Entity($X, $Y, prop*, functions) ->
    def|[
      define $viewRowsX(x : $X) {
        $viewRowsY(x)
        elem*
      }
    ]|
    where x          := <decapitalize-string> $X
        ; $viewRowsX := <concat-strings>["viewRows", $X]
        ; $viewRowsY := <concat-strings>["viewRows", $Y]
        ; not(<TemplateDefinition> $viewRowsX) // don't overwrite an existing definition
        ; elem*      := <properties-to-view(|$X, Var(x))> prop*

  properties-to-view-rows(|$X, e) =
    filter-concat-warn(property-to-view-row(|$X, e) | "cannot create view row for property ")

  properties-to-view(|$X, e) =
    filter-concat-warn(property-to-view-row(|$X, e) | "cannot create view row for property ")

  property-to-view-row(|$X, e) =
    composite-property-to-view-row(|$X, e)
    <+ basic-property-to-view-row(|e)

  property-to-view(|$X, e) =
       name-property-to-view-row
    <+ text-property-to-view-row(|e)
    <+ comp-collection-property-to-view-row(|$X, e)
    <+ collection-property-to-view-row(|$X, e)
    <+ reference-property-to-view-row(|e)
    <+ composite-property-to-view(|$X, e)
    <+ basic-property-to-view(|e)

  basic-property-to-view-row(|e) :
    Property(y, k, s, anno*) -> elem*|[
      row{ str output(e.y) }
    ]|
    where str := <concat-strings>[<capitalize-string> y, ":"]

  basic-property-to-view(|e) :
    Property(y, k, s, anno*) -> elem*|[
      par{ str " : " output(e.y) }
    ]|
    where str := <capitalize-string> y

  basic-property-to-view-row(|e) :
    DerivedProperty(y, k, s, anno*, ex) -> elem*|[
      par{ str " : " output(e.y) }
    ]|
    where str := <capitalize-string> y

  name-property-to-view-row :
    Property(_, _, _, _) -> elem*|[ ]|
    where is-namefield
          // in the inline style, the name property is used as section header

  name-property-to-view-row :
    DerivedProperty(_, _, _, _, _) -> elem*|[ ]|
    where is-namefield

  reference-property-to-view-row(|e) :
    |[ y -> $Y (ann*) ]| ->
    elem*|[
      section{ header{str} list{listitem{ output(e.y) } } }
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y

  composite-property-to-view-row(|$X, e) :
    |[ y <> $Y (ann*) ]| ->
    elem*|[
      section{
        header{str}
        elem*
      }
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
        ; elem* := <Properties; properties-to-view-rows(|$X, |[ e.y ]|)> $Y

  composite-property-to-view(|$X, e) :
    |[ y <> $Y (ann*) ]| ->
    elem*|[
      section{
        header{str}
        elem*
      }
    ]|
    where <defined-java-type> SimpleSort($Y)
        ; str := <capitalize-string> y
        ; elem* := <Properties; properties-to-view-rows(|$X, |[ e.y ]|)> $Y

  text-property-to-view-row(|e) :
    Property(y, k, SimpleSort("Text"), anno*) ->
    elem*|[
      section{ header{str} output(e.y) }
    ]|
    where str := <capitalize-string> y

  text-property-to-view-row(|e) :
    DerivedProperty(y, k, SimpleSort("Text"), anno*, ex) ->
    elem*|[
      section{ header{str} output(e.y) }
    ]|
    where str := <capitalize-string> y

  collection-property-to-view-row(|$T, e) :
    prop@|[ $y -> $Z<$Y> (ann*) ]| ->
    elem*|[
      section{
        header{str}
        output(e.$y)
        elem*
      }
    ]|
    where str   := <capitalize-string> $y
        ; elem* := <create-new-association-object(|$T, e)> prop

  collection-property-to-view-row(|$T, e) :
    prop@|[ $y -> $Z<$Y> (ann*) := e2 ]| ->
    elem*|[
      section{
        header{str}
        output(e.$y)
      }
    ]|
    where str   := <capitalize-string> $y

  comp-collection-property-to-view-row(|$T, e) :
    prop@|[ y <> $Z<$Y> (ann*) ]| ->
    elem*|[
      section{
        header{str}
        for(z : $Y in e.$yList) { section{ header{output(z)} $viewRowsY(z) } }
        elem*
      }
    ]|
    where <?"Set" <+ ?"List"> $Z
        ; str         := <capitalize-string> y
        ; z           := <decapitalize-string> $Y
        ; $yList      := <concat-strings>[y, "List"]
        ; $viewRowsY  := <concat-strings>["viewRows", $Y]
        ; elem*       := <create-new-association-object(|$T, e)> prop

  comp-collection-property-to-view-row(|$T, e) :
    prop@|[ y <> $Z<$Y> (ann*) := e2 ]| ->
    elem*|[
      section{
        header{str}
        for(z : $Y in e.$yList) { section{ header{output(z)} $viewRowsY(z) } }
      }
    ]|
    where <?"Set" <+ ?"List"> $Z
        ; str         := <capitalize-string> y
        ; z           := <decapitalize-string> $Y
        ; $yList      := <concat-strings>[y, "List"]
        ; $viewRowsY  := <concat-strings>["viewRows", $Y]

  create-new-association-object(|$T, e) :
    |[ y k $Z<$Y> (ann*) ]| ->
    elem*|[
      form{
        actionLink(str2, $createNewY(e, e.y))
        action $createNewY($x : $T, y : $Z<$Y>) {
          var $z : $Y := $Y { };
          y.add($z);
          $x.persist();
          return $editY($z);
        }
      }
    ]|
    where <?"Set" <+ ?"List"> $Z
        ; $z          := <decapitalize-string; newname> $Y
        ; $x          := <decapitalize-string; newname> $T
        ; str2        := <concat-strings>["New ", $Y]
        ; $createNewY := <concat-strings>["createNew", <capitalize-string> y, $Y]
        ; $editY      := <concat-strings>["edit", $Y]

