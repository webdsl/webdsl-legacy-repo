module org/webdsl/dsl/transformation/rename-variables

imports 
  libstrategolib
  
imports 
  libwebdsl-front
  
strategies

  rename-bound-variables = 
    RenameTemplateVar
    <+ rename-template-definition
    <+ rename-vardecl 
    <+ rename-for
    <+ rename-forall
    <+ rename-select
    <+ rename-action-definition
    <+ rename-function-definition
    <+ rename-template-call
    <+ all(rename-bound-variables)
  
  rename-template-definition :
    Define([Page()], name, args1, body1) -> Define([Page()], name, args2, body2)
    where {| RenameTemplateVar
           : args2 := <map(rename-arg)> args1
           ; body2 := <rename-bound-variables> body1
           |}
           
  rename-template-definition :
    def@Define([Template()], name, args1, body1) -> Define([Template()], y, args2, body2)
    where {| RenameTemplateVar
           : n := <strip-annos> name
           ; if <is-overloaded-template> def then  
               y := <OverloadedTemplateSignature> (n, <map(?Arg(_,<id>))> args1)
             else
               y := n
             end
           ; args2 := <map(rename-arg)> args1
           ; body2 := <rename-bound-variables> body1
           |}
  
  rename-template-definition :
    Define([Local()], name, args1, body1) -> Define([Local()], name, args2, body2)
    where {| RenameTemplateVar
           : args2 := <map(rename-arg)> args1
           ; body2 := <rename-bound-variables> body1
           |}

  rename-template-call :
    TemplateCall(x1, e1*, elem1*) -> TemplateCall(x2, e2*, elem2*)
    where <is-call-to-overloaded-template> x1
        ; t* := <map(type-of)> e1*
        ; x2 := <OverloadedTemplateSignature> (x1, t*)
        ; e2* := <rename-bound-variables> e1*
      ; elem2* := <rename-bound-variables> elem1*

  rename-template-call :
    TemplateCall(x1, e1*, elem1*) -> TemplateCall(x1, e2*, elem2*)
    where <not(is-call-to-overloaded-template)> x1
        ; e2* := <rename-bound-variables> e1*
        ; elem2* := <rename-bound-variables> elem1*

/*   
   find-overloaded-template =
     ?(x, t*)
     ; ( <OverloadedTemplateSignature> (x, t*)
         <+ <find-overloaded-template> (x, <map(Extends)> t* )
         <+ <all(bla2)> t*
         
  bla2 =
    ?t
*/    
  
  rename-action-definition :
    Action(name, args1, body1) -> Action(name, args2, body2)
    where {| RenameTemplateVar
           : args2 := <map(rename-arg)> args1
           ; body2 := <rename-bound-variables> body1
           |}

  rename-action-definition :
    InitAction(body1) -> InitAction(body2)
    where {| RenameTemplateVar
           : body2 := <rename-bound-variables> body1
           |}
           
  rename-function-definition :
    Function(name, args1, s, body1) -> Function(name, args2, s, body2)
    where {| RenameTemplateVar
           : args2 := <map(rename-arg)> args1
           ; body2 := <rename-bound-variables> body1
           |}         
  
  rename-arg :
    Arg(x, s) -> Arg(y, s)
    where y := <rename-var> x
        ; try(<declare-template-arg> Arg(y, s))
                 
  rename-template-arg :
    Arg(x, s) -> Arg(y, s)
    where y := <rename-var> x
//        ; z := <concat-strings> ["param", <as-string(ParamNumber)>]
//        ; rules ( RenameOverloadedTemplateVar : y -> z )
//        ; rules ( ParamNumber := <ParamNumber; inc> )
        ; try(<declare-template-arg> Arg(y, s))

  rename-vardecl :
    VarDecl(x, s) -> VarDecl(y, s)
    where y := <rename-var> x
        
  rename-vardecl :
    VarDeclInit(x, s, e1) -> VarDeclInit(y, s, e2)
    where e2 := <rename-bound-variables> e1
        ; y := <rename-var> x
        
  rename-for :
    For(x, s, e1, Filter(we1, obe1, l1), elems1) -> For(y, s, e2, Filter(we2, obe2, l2), elems2)
    where {| RenameTemplateVar
           : y := <rename-var> x
           ; e2 := <rename-bound-variables> e1
           ; elems2 := <rename-bound-variables> elems1
           ; we2 := <rename-bound-variables> we1
           ; obe2 := <rename-bound-variables> obe1
           ; l2 := <rename-bound-variables> l1
           |}
           
  rename-forall :
    ForAll(x, s, Filter(we1, obe1, l1), elems1) -> ForAll(y, s, Filter(we2, obe2, l2), elems2)
    where {| RenameTemplateVar
           : y := <rename-var> x
           ; elems2 := <rename-bound-variables> elems1
           ; we2 := <rename-bound-variables> we1
           ; obe2 := <rename-bound-variables> obe1
           ; l2 := <rename-bound-variables> l1
           |}

  rename-select :
    Select(x, s, lab, e1) -> Select(y, s, lab, e2)
    where {| RenameTemplateVar
           : y := <rename-var> x
           ; e2 := <rename-bound-variables> e1
           |}

  rename-var :
    x -> y
    where //z := <newname> x
        //; y := z{<newname> x}//extra annotation probably not necessary, but more consistent
        y := <newname> x
        ; srt := <TypeOf> x
        ; rules(
            RenameTemplateVar : Var(x)           -> Var(y)
            RenameTemplateVar : Qualified(x, f)  -> Qualified(y, f)
            RenameTemplateVar : Assignment(x, e) -> Assignment(y, e2) where e2 := <try(sometd(rename-bound-variables))> e
            TypeOf            : y -> srt
          )
