module expand-page

imports 
  libstrategolib
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  

rules

  expand-page-templates =
    alltd(expand-page)

  expand-page =
    //?Define([Page()], name, args, body1)
    ?tdef|[ define page x(farg*) { elem* } ]|
    ; expand-template-definition
           
  expand-template-definition :
    Define(mods, name, args, body1) -> <dbg(|"expanded")> Define([Page()], name, args, body2)
    where dbg(|"expanding definition")
        ; {| TemplateDefinition, TemplateArguments, IsPage
           : elems := <filter(not(declare-template-definition))> body1
           ; body2 := <map(expand-element)> elems
           |}
           
  expand-element = dbg(|"expand-element: "); (
    expand-template-call
    <+ Subst
    <+ all(expand-element)
  )
  
    // @todo @note the generic traversal loses annotations! (it seems)
             
  expand-template-call :
    call@TemplateCall(name, args, elems1) -> <dbg(|"expanded")> TemplateCall("div", [String(name)], elems2)
    where <dbg(|"expanding")> call
        ; Define(mods, name, fargs, body) := <TemplateDefinition; dbg(|"rename in"); rename-bound-variables; dbg(|"rename out")> name
        ; {| Subst, TypeOf, Elems
           : <zip(bind-variable)> (fargs, <alltd(Subst)> args)
           ; rules( Elems := elems1 )
           ; elems2 := <map(expand-element)> body
           |}
          
   bind-variable =
     ?(Arg(x, s), e)
     ; rules( 
         Subst  : Var(x) -> e 
         Subst  : Qualified(x, y) -> Qualified(e, y)
         TypeOf : x -> s 
       )

strategies // bound variables
  
  rename-bound-variables = 
    RenameTemplateVar
    <+ rename-template-definition
    <+ rename-vardecl 
    <+ rename-for
    <+ rename-forall
    <+ rename-select
    <+ rename-action-definition
    <+ all(rename-bound-variables)
  
  rename-template-definition :
    Define(mods, name, args1, body1) -> Define(mods, name, args2, body2)
    where {| RenameTemplateVar
           : args2 := <map(rename-arg)> args1
           ; body2 := <rename-bound-variables> body1
           |}
           
  rename-action-definition :
    Action(name, args1, body1) -> Action(name, args2, body2)
    where {| RenameTemplateVar
           : args2 := <map(rename-arg)> args1
           ; body2 := <rename-bound-variables> body1
           |}
           
  rename-arg :
    Arg(x, s) -> Arg(y, s)
    where y := <rename-var> x

  rename-vardecl :
    VarDecl(x, s) -> VarDecl(y, s)
    where y := <rename-var> x
        
  rename-vardecl :
    VarDeclInit(x, s, e1) -> VarDeclInit(y, s, e2)
    where e2 := <rename-bound-variables> e1
        ; y := <rename-var> x
        
  rename-for :
    For(x, s, e1, elems1) -> For(y, s, e2, elems2)
    where e2 := <rename-bound-variables> e1
        ; {| RenameTemplateVar
           : y := <rename-var> x
           ; elems2 := <rename-bound-variables> elems1
           |}
           
  rename-forall :
    ForAll(x, s, elems1) -> ForAll(y, s, elems2)
    where {| RenameTemplateVar
           : y := <rename-var> x
           ; elems2 := <rename-bound-variables> elems1
           |}

  rename-select :
    Select(x, s, lab, e1) -> Select(y, s, lab, e2)
    where {| RenameTemplateVar
           : y := <rename-var> x
           ; e2 := <rename-bound-variables> e1
           |}
                      
  rename-var :
    x -> y
    where y := <newname> x
        ; rules(
            RenameTemplateVar : Var(x) -> Var(y)
            RenameTemplateVar : Qualified(x, f) -> Qualified(y, f)
          )
     
strategies

  propagate-component-names =
    alltd(propagate-component-names-in-page)
    
  propagate-component-names-in-page :
    Define([Page()], name, args, body1) -> Define([Page()], name, args, body2)
    where {| PrefixComponent, SpecializeActionCall
           : <map(declare-component-prefix(|name))> args
           ; <get-page-vardecls; map(declare-component-prefix(|name))> body1
           ; declare-specialize-action-call(|name)
           ; body2 := <alltd(PrefixComponent <+ specialize-action-call)> body1
           |}
           
  specialize-action-call =
    TemplateCall("action" <+ "actionLink", [id, try(SpecializeActionCall)], [])
    
  declare-component-prefix(|name) =
    ?Arg(x, s); where(<declare-component-prefix(|name)> x)
    
  declare-component-prefix(|name) =
    ?VarDecl(x, s); where(<declare-component-prefix(|name)> x)
    
  declare-component-prefix(|name) =
    ?VarDeclInit(x, s, e); where(<declare-component-prefix(|name)> x)
    
  declare-component-prefix(|name) =
    ?x
    ; rules( 
        PrefixComponent : 
          Var(x){t*} -> FieldAccess(Var(name){Type("Component")}, x){t*}
      )

  declare-specialize-action-call(|name) =
    rules (
      SpecializeActionCall :
        ThisCall(f, args) -> <dbg(|"specialized: ")> Call(Var(name){Type("Component")}, f, args)
        where dbg(|"SpecializeActionCall: ")
    )
    
strategies

  get-page-vardecls = 
    collect(fail
      <+ \ d@VarDecl(_,_) -> [d] \
      <+ \ d@VarDeclInit(_,_,_) -> [d] \
      <+ \ Action(_,_,_) -> [] \
    ); concat
    
    
    