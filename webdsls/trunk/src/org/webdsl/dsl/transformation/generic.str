module org/webdsl/dsl/transformation/generic

imports
  libstrategolib

imports
  libwebdsl-front

strategies

  desugar = desugar-generic-call

  desugar : 
    Define(_,_,fargs,_) -> RemoveMe()  //remove the original generic definition before code generation
                                       //(it still exists in dynamic rules)
    where not([]:= <get-generictype-args> fargs)

  desugar-generic-call :
    TemplateCall(x, args, [],[]) -> TemplateCall(y, args2, [],[])  
    where def@Define(_,_, fargs, elems) := <strip-annos;TemplateDefinition> x 
        ; generics := <get-generictype-args> fargs
        ; not([] := generics)
    with  typeencoding := <zip;map(encode-farg-for-generic-call <+ !"")> (fargs,args)
        ; y := <concat; concat-strings> [[x], typeencoding]
        ; (rewrites, realargs) := <zip; extract-generic-args> (fargs, args)
        ; (fargs2, args2) := <unzip> realargs
        ; <expand-generic-template(|y, fargs2, rewrites)> def
  
  encode-farg-for-generic-call :
      (Arg(_, SimpleSort("EntityType")),Var(actualtype)) -> <concat-strings>["__",actualtype]
      
  extract-generic-args :
      tupels  -> (rewrites, realargs)
      with rwr := <filter(?(Arg(_, SimpleSort("EntityType")), _))> tupels
         ; rewrites := <map(?(Arg(name,_),Var(value));!(name, SimpleSort(value)))> rwr
         ; rlargs := <remove-all(?(Arg(_, SimpleSort("EntityType")), _))> tupels
         ; realargs := <map(replace-bound-type(|rewrites) <+ id)> rlargs
      
  replace-bound-type(|rewrites) :
      (Arg(name, sort), value) -> (Arg(name, thetype), value)
      where ( GenericSort("EntityTypeNamed",[t]) := sort 
            <+  SimpleSort(t) := sort)
            ; <fetch(?(t, thetype))> rewrites 
  
  expand-generic-template(|name, fargs, rewrites) = ?_; where(<EmittedGenericTemplate> name)
  
  expand-generic-template(|name, fargs, rewrites) :
    d@Define(mods,_,_,elems) -> d
    where not(<EmittedGenericTemplate> name)
    with {| InjectType :
            rules( 
              InjectType : sort -> v
                       where (SimpleSort(t) := sort
                             <+ GenericSort("EntityTypeNamed",[t]) := sort) 
                           ; <fetch(?(t,v))> rewrites )
         ; elems2 := <topdown(try(InjectType))> elems
         ; <emit-webdsl-code> Define(mods, name, fargs, elems2)
         ; rules ( EmittedGenericTemplate : name -> True() )
         |}