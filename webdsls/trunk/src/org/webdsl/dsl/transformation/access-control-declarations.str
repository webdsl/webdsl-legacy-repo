/**

 Security rules for WebDSL

*/

module org/webdsl/dsl/transformation/access-control-declarations

imports
  libstrategolib

imports
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/transformation/-
rules
  declare-security=
    ?Application(qid, sections)
    ; where(<collect(declare-security)> sections)

  declare-security:
    AccessControlDefinition(defs) -> AccessControlDefinition(defs)
    where rules (
            //default types
            Security-Check-Types := [["page"],["action"],["page" , "action"],["template"],["page","template"],["template","action"],["template","template"],["function"]]

            //rules that return a single expression
            Visual-Check-Types := ["template","action","function"]

            //deny access when nothing is specified
            Strict-Check-Types := ["page","action"])
        ; <collect(declare-ac-pointcut<+declare-predicate)> defs

  declare-ac-pointcut:
    AccessControlPointcut(pname,fa,elems) -> AccessControlPointcut(pname,fa,elems)
    where <map(declare-pointcut-element(|pname))> elems

  declare-pointcut-element(|pname):
    AccessControlPointcutElement(ident,matchident,faidents,wc) -> AccessControlPointcutElement(ident,matchident,faidents,wc)
    where rules(
            is-access-control-pointcut: (pname,fa)
          )

  // uses:
  //  declare-global-funcs =
  //  ?fu@Function(f, args, s, b) ...
  declare-predicate:
    Predicate(f,args,b) -> <declare-global-funcs> Function(f, args, SimpleSort("Bool"), b)
