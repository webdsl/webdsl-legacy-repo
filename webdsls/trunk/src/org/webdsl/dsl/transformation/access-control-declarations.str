/**

 Security rules for WebDSL

*/

module org/webdsl/dsl/transformation/access-control-declarations

imports
  libstrategolib

imports
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/transformation/-
rules
  declare-access-control=
    ?Application(qid, sections)
    ; where(<collect(declare-access-control)> sections)
    ; (oncetd(declare-ac-policy) <+ rules( AC-Policy-Expression := Name("anonymous") ))//default policy
    ; topdown(try(remove-all(?ACPolicy(_))))
    

  declare-access-control:
    AccessControlDefinition(name,defs) -> AccessControlDefinition(name,defs)
    where rules (
            Security-Check-Types := [["page"],["action"],["page" , "action"],["template"],["page","template"],["template","action"],["template","template"],["function"]]
          )
        ; <collect(declare-ac-pointcut<+declare-predicate)> defs

  declare-ac-pointcut:
    AccessControlPointcut(pname,fa,elems) -> AccessControlPointcut(pname,fa,elems)
    where <map(declare-pointcut-element(|pname))> elems

  declare-pointcut-element(|pname):
    AccessControlPointcutElement(ident,matchident,faidents,wc) -> AccessControlPointcutElement(ident,matchident,faidents,wc)
    where rules(
            is-access-control-pointcut: (pname,fa)
          )

  // uses:
  //  declare-global-funcs =
  //  ?fu@Function(f, args, s, b) ...
  declare-predicate:
    Predicate(f,args,b) -> <declare-global-funcs> Function(f, args, SimpleSort("Bool"), b)
    where rules (IsPredicate : f)
    
  declare-ac-policy=
    ?ACPolicy(pexp)
  ; rules(AC-Policy-Expression := pexp)
