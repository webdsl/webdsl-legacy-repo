/**

 Security rules for WebDSL
 
*/

module org/webdsl/dsl/transformation/access-control-typecheck

imports 
  libstrategolib 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/transformation/- 
rules
  typecheck-security=
  	?Application(qid, sections)
  	; where(<collect(?AccessControlDefinition(_));map(typecheck-security)> sections)
  	; if TypecheckErrorSecurity then
  	    security-typecheck-error(|"Typechecking error in access control definitions")
       ; fail
      end
  	
  typecheck-security:
	AccessControlDefinition(defs) -> AccessControlDefinition(newdefs)
	where newdefs :=
		<map(collect(typecheck-security-subject
					<+ typecheck-create-rule-classes(|[],[])
					<+ ?x; security-typecheck-error(|["Couldn't typecheck definition ",x]) 
				))> defs
	
  typecheck-security-subject:
    AccessControlPrincipal(ident,props) -> AccessControlPrincipal(ident,props)
    where <IsEntity <+ security-typecheck-error(|[ident," is not a declared type"])> ident
    
  typecheck-create-rule-classes(|ct,oldargs):
    AccessControlRule(checktype,matchstring,fargs,checks,acrules) -> AccessControlRule(checktype,matchstring,fargs,newchecks,newrules)
    where newtype := <concat>[ct , [checktype]]
        ; newargs := <concat>[oldargs , [fargs]]
        ; <elem <+ security-typecheck-error(|[newtype ," is not a valid security check type"])> (newtype,<Security-Check-Types>)
        ; if checks := [] then <security-typecheck-error(|["access control rule ",checktype," ",matchstring," has no checks specified"])> True() end
        ; newchecks := <map(typecheck-security-checks(|newargs))> checks
        ; newrules := <map(typecheck-create-rule-classes(|newtype,newargs))> acrules
   
  typecheck-security-checks(|fargs):
    AccessControlCheckExpression(expr) -> AccessControlCheckExpression(expr)
    where <try(alltd(typecheck-security-checks-vars(|fargs)))> expr
    
//  typecheck-security-checks-vars(|fargs) =
//    ?ForExp(oe, x, s, ie)
//    ; where(<try(alltd(typecheck-security-checks-vars(|fargs)))> ie)

  typecheck-security-checks-vars(|fargs):
    Var(ident) -> Var(ident)
    where newfargs := <map( \ MatchArgs(args,wc) -> args \) ;concat;map(\ Arg(ident,thesort) -> ident  \)> fargs
    ; <elem 
    <+ equal(|ident,"securityContext")  //not declared yet when this typechecking occurs
    <+ !ident;IsSessionVariable
    <+ !ident;IsGlobal
    <+ id
    <+ security-typecheck-error(|[ident ," is not defined"]) > (ident,newfargs)
        
  security-typecheck-error(|msg) =
    err-msg(|msg)
    ; rules( TypecheckErrorSecurity := True() )