/**

 Security rules for WebDSL

*/

module org/webdsl/dsl/transformation/access-control-typecheck

imports
  libstrategolib

imports
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/transformation/-
rules

  typecheck-access-control(typecheck-strategy|):
    Application(qid, sections) -> Application(qid, newsections)
    where {| Module, TypecheckError:
               rules (Module := qid)
             ; newsections := <map(typecheck-access-control-section(typecheck-strategy|)
                                 <+typecheck-access-control-module(typecheck-strategy|)
                                 <+?Description(_)
                                 <+?Note(_)
                                 <+?x;info(|["access control typechecking sections strategy failed: ",x]);fail)> sections
             ; if TypecheckError then <xtc-exit> 1 end //force dsl-to-seam to quit, there's a bug that makes dsl-to-seam start over upon failure
          |}

  typecheck-access-control-section(typecheck-strategy|):
    Section(ident,decs) -> Section(ident,newdecs)
    where in-tc-context(where(newdecs := <map(try(typecheck-strategy))> decs)
                        |
                        ["section ",ident,"/access control rules/"])

  typecheck-access-control-module(typecheck-strategy|):
    Module(mod, section1*) -> Module(mod, newsection1*)
    where {| Module
           : rules( Module := mod )
           ; newsection1* := <map(typecheck-access-control-section(typecheck-strategy|)
                                <+typecheck-access-control-module(typecheck-strategy|)
                                <+?Description(_)
                                <+?Note(_)
                                <+?x;info(|["access control typechecking modules strategy failed: ",x]);fail)> section1*
          |}

  //phase 0 pointcuts

  typecheck-access-control-pointcuts:
    AccessControlDefinition(name,defs) -> AccessControlDefinition(name,newdefs)
    where
      newdefs :=
      <map(?AccessControlPrincipal(_,_)
           <+ ?Predicate(_,_,_)
           <+ tc-pointcut-use
           <+ ?AccessControlRule(_,_,_,_,_)
           <+ typecheck-access-control-pointcut
           <+ ?x; typecheck-error(|["Couldn't typecheck definition ",x]))>
        defs

  typecheck-access-control-pointcut:
    AccessControlPointcut(pname,fa,elems) -> AccessControlPointcut(pname,fa,elems)
    where {| pointcut-formal-argument :
             <filter(\ ar@Arg(ident,thesort)->ar where rules (pointcut-formal-argument : ident -> ar) \)> fa
           ; <map(tc-pointcut-element(|pname))> elems
          |}

  tc-pointcut-element(|pname):
    AccessControlPointcutElement(ident,matchident,faidents,wc) -> AccessControlPointcutElement(ident,matchident,faidents,wc)
    where <map(pointcut-formal-argument<+?x;typecheck-error(|["argument ",x," not in pointcut ",pname]))> faidents

  tc-pointcut-use:
    AccessControlRule("pointcut",matchident,args,checks,childrules) -> AccessControlRule("pointcut",matchident,args,checks,childrules)
    where MatchArgs(fargs,wc) := args
        ; rulematchtuples := <is-access-control-pointcut<+typecheck-error(|["pointcut ",matchident," does not exist"])> (matchident,fargs)

  //phase 1 securityContext and principal definition
  typecheck-access-control-declarations:
    AccessControlDefinition(name,defs) -> AccessControlDefinition(name,newdefs)
    where newdefs :=
        <map(typecheck-security-subject
                    <+ ?Predicate(_,_,_)
                    <+ ?AccessControlRule(_,_,_,_,_)
                    <+ ?x; typecheck-error(|["Couldn't typecheck definition ",x])
                )> defs

  typecheck-security-subject:
    AccessControlPrincipal(ident,props) -> AccessControlPrincipal(ident,props)
    where <IsEntity <+ typecheck-error(|[ident," is not a declared type"])> ident
        ; <derive;map(\ pident ->
            <TypeOfProperty <+ typecheck-error(|[pident," is not a property of ",ident])> (ident,pident)  \)> props

  //phase 2 predicates
  typecheck-access-control-predicates:
    AccessControlDefinition(name,defs) -> AccessControlDefinition(name,newdefs)
    where newdefs :=
        <map(?AccessControlPrincipal(_,_)
                    <+ ?AccessControlRule(_,_,_,_,_)
                    <+ typecheck-predicate
                    <+ ?x; typecheck-error(|["Couldn't typecheck definition ",x])
                )> defs

  typecheck-predicate:
    Predicate(ident,fargs,exp) -> Predicate(ident,fargs,newexp)
    where {|TypeOf, ReturnType
          : <map(try(create-argument-typeof-rule))> fargs
          //; rules( ReturnType := SimpleSort("Bool") )
          ; newexp := <typecheck-expression <+ typecheck-error(|[exp ," failed typechecking"])> exp
          ; ( _{Type(SimpleSort("Bool"))} := newexp  <+ typecheck-error(|[newexp ," is not a boolean expression"]) )
          |}

  //phase 3 rules and checks
  typecheck-access-control-rules-checks:
    AccessControlDefinition(name,defs) -> AccessControlDefinition(name,newdefs)
    where newdefs :=
        <map(?AccessControlPrincipal(_,_)
                    <+ typecheck-create-rule-classes(|[],[])
                    <+ ?Predicate(_,_,_)
                    <+ ?x; typecheck-error(|["Couldn't typecheck definition ",x])
                )> defs

  typecheck-create-rule-classes(|ct,oldargs):
    AccessControlRule(checktype,matchstring,fargs,check,acrules) -> AccessControlRule(checktype,matchstring,fargs,newcheck,newrules)
    where newtype := <concat>[ct , [checktype]]
        ; newargs := <concat>[oldargs , [fargs]]
        ; <elem <+ typecheck-error(|[newtype ," is not a valid security check type"])> (newtype,<Security-Check-Types>)
        //; if check := [] then <typecheck-error(|["access control rule ",checktype," ",matchstring," has no checks specified"])> True() end
        ; newfargs := <map( \ MatchArgs(args,wc) -> args \) ;concat> newargs
        ; {| TypeOf :
            <map(try(create-argument-typeof-rule))> newfargs    //try here because it can also be an expression from matching on templates
          ; newcheck := <typecheck-security-checks(|newargs)> check
          ; newrules := <map(typecheck-create-rule-classes(|newtype,newargs))> acrules
          |}

  typecheck-security-checks(|fargs):
    AccessControlCheckExpression(expr) -> AccessControlCheckExpression(newexp)
    where newexp := <typecheck-expression <+ typecheck-error(|[expr ," failed typechecking"])> expr
        ; ( _{Type(SimpleSort("Bool"))} := newexp  <+ typecheck-error(|[newexp ," is not a boolean expression"]) )

  create-argument-typeof-rule=
    ?Arg(ident,thesort)
    ; rules( TypeOf: ident -> thesort )
