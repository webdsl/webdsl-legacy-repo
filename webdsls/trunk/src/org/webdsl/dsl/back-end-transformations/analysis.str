module org/webdsl/dsl/back-end-transformations/analysis

imports
  libwebdsl-front
  org/webdsl/dsl/back-end-transformations/back-end-transformations

rules      // analyze-elem
  
  // Optimization: currently only global definitions have to be searched, succeed if we're done
  // with the section to avoid complete traversal of the tree
    analyze-elem: sec -> sec
    where Section(_,defs) := sec
        ; <map(
            try(
                analyze-elem-global
              ; fatal-err(|"ERROR: analyze-elem-global succeeded")
          ))> defs
        
rules	// analyze-elem for global elements

  // entity
  analyze-elem-global: ent -> ent
    where class := <?Entity(<id>,_,body) <+ ?EntityNoSuper(<id>,body) <+ ?SessionEntity(<capitalize-string>,body)>
        ; rules (AllEntityNames :+= class)
        ; rules (EntityFromName : class -> ent)
        ; <try(get-anno(?IndexedAnno(sf,_,_,spellcheckfields,autocompletefields))
           ; rules(IndexedEntities :+= class)
           ; rules(ClassToSpellCheckFields : class -> spellcheckfields) 
           ; rules(ClassToAutoCompleteFields : class -> autocompletefields)
          )> ent
        ; <try(get-anno(?SearchNamespaceAnno(_))
          ; rules(SearchNamespaceEntities :+= class)          
          )> ent
        ; rules (AllEntities :+= ent)
        ; fail

  // test
  analyze-elem-global =
      ?Test(name,body); rules (AllTestNames :+= name)
    ; fail
  
  // global var
  analyze-elem-global =
      ?VarDeclInit(_,_,_)
    ; rules(AllGlobalVars :+= <id>)
    ; fail
  
  // session entity
  analyze-elem-global =
      ?SessionEntity(_, _)
    ; rules(SessionEntities :+= <id>)
    ; fail
 
  // invoke every
  analyze-elem-global =
      ?InvokeEvery(_,_)
    ; rules(AllInvokeEvery :+= <id>)
    ; fail
      
  // full text analyzers
  analyze-elem-global :
  	s@FullTextAnalyzer(None(), name, body) -> <fail>
  	with rules(FullTextAnalyzerFromName :+ name -> s)

  analyze-elem-global :
  	s@FullTextAnalyzer(Some(kw), name, body) -> <fail>
  	with rules(FullTextAnalyzerFromName :+ kw -> FullTextAnalyzer(Some(kw), "default", body)
  			   FullTextAnalyzerFromName :+ name -> s)

  // defines
  analyze-elem-global =
      ?def@Define(mod*,x,farg*,_,_)
    // handle override
    ; x1 := <strip-annos> x
    ; not(<TopLevelTemplateClassNameOverride> x1) //if there is an override, don't declare the regular implementation class here. if the regular implementation was already processed (can't predict order), the override will overwrite the DR for e.g. TopLevelTemplateClassName
    ; if <fetch(TemplateModOverride)> mod* then rules( TopLevelTemplateClassNameOverride : x1 ) end
    // Pages
    ; if <fetch(Page)> mod* then
          rules( AllPageNames :+= x )
      end
    // Emails
    ; if <fetch(Email)> mod* then
          rules ( AllEmailNames :+= x )
      end
    // Toplevel templates
    ; if <not(fetch(Page <+ Email))> mod* then
          // used to create lookup hashmap in java-base-page.str
          rules( AllTopLevelTemplateNamesJavaServlet :+= x ) 
        ; if <fetch(AjaxTemplate)> mod* then rules ( AllTopLevelTemplateNamesWithAjax :+= x ) end
      end
    ; classname := <any-template-name-to-classname> (mod*, x)
    ; rules(
        TopLevelTemplateClassName : x -> classname
        // TemplateFormalArguments used in dispatch-servlet.str
        TemplateFormalArguments : x -> farg*
      )
    ; fail

rules     // utils

  any-template-name-to-classname: (mod*, x) -> class1
    with  name := <try(<fetch(Email)> mod*; <concat-strings> [x, "_Email"])> x 
        ; class := <template-name-to-classname> name
        ; class1 := <if <fetch(TemplateModOverride)> mod* then <concat-strings>["$Override$",<id>] end> class
  
  template-name-to-classname: x -> class
    with  class := $[[x]_Template]
