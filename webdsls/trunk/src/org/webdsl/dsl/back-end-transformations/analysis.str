module org/webdsl/dsl/back-end-transformations/analysis

rules

  collect-global-vars= 
    ?app@Application(qid, sections)
    ; where(
      globalvars := <collect( \ Section(_,defs) -> <filter(?VarDeclInit(_, _, _))> defs\) ;concat> sections
      ; rules ( AllGlobalVars := globalvars )
    )
    
  collect-session-vars= 
    ?app@Application(qid, sections)
    ; sessionvars := <collect( \ Section(_,defs) -> <filter(?SessionEntity(_, _))> defs\) ;concat> sections
    ; rules ( SessionEntities := sessionvars )
    ; !app

  collect-global-funcs= 
    ?app@Application(qid, sections)
    ; globalfuncs := <collect(\ Section(_,defs) -> <filter(?Function(_, _, _, _))> defs \);concat> sections
//    ; globalfuncs3 := <remove-all(has-untranslated-generics)> globalfuncs2
    ; rules ( AllGlobalFunctions := globalfuncs )
    ; !app
    
rules      // analyze-elem
    
  //find all entity names that are left in AST 
  analyze-elem =
    where(
      (?Entity(<id>,_,_) <+ ?EntityNoSuper(<id>,_) <+ ?SessionEntity(<capitalize-string>,_))
    ; rules (AllEntityNames :+= <id>)
    )
    
  analyze-elem =
    where(
      ?Test(name,body); rules (AllTestNames :+= name)
    )
 
rules      // collect-annos

 collect-annos: elem -> elem
    where(
        get-annos
      ; map(try(anno-to-dr))
    )
  
  anno-to-dr = ?AjaxAnno(); rules(IsAjaxApp := True())
  
rules    // native classes
  
  is-native-class = get-type-anno; get-anno(?NativeClassAnno(_,_))
  native-class-name = get-type-anno; get-anno(?NativeClassAnno(name,class)); !class
  is-native-function = ?Function(f, args, s, None())
  