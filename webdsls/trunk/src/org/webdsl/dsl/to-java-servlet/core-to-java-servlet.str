module org/webdsl/dsl/to-java-servlet/core-to-java-servlet

imports
  org/webdsl/dsl/to-java-servlet/-
  org/webdsl/dsl/to-java-servlet/types/-
  org/webdsl/dsl/to-java-servlet/uicomponents/-
  org/webdsl/dsl/to-java-servlet/styling/-
  org/webdsl/dsl/to-java-servlet/ajax/- 
  org/webdsl/dsl/to-java-servlet/email/-
  org/webdsl/dsl/to-java-servlet/stratego-interface/-
  org/webdsl/dsl/to-java-servlet/data-validation/-
  org/webdsl/dsl/to-java-servlet/test/-
  org/webdsl/dsl/to-java-servlet/native/-

strategies

  set-DomainPackage(|pkg) = rules( DomainPackage := pkg )
  
  core-to-java-servlet =
    ?Application(qid, sections)
    ; rules(
        Package       := <qid-to-package-name> qid        
        BeanPackage   := <qid-to-package-name> Qualified(qid, "beans")
        ActionPackage := <qid-to-package-name> Qualified(qid, "actions")
        TestPackage := <qid-to-package-name> Qualified(qid, "test")
      )
    ; set-DomainPackage(|<qid-to-package-name> Qualified(qid, "domain")) //strategy/rule shared with seam back-end
    ; !Application(qid, sections)
    ; log-time(get-all-top-level-template-names|"get-all-top-level-template-names") //TODO should be available in a dynamic rule somewhere
    ; log-time(annotate-with-unique-element-ids|"annotate-with-unique-element-ids")
    ; log-time(generate-code-java-servlet      |"generate-code-java-servlet")

   generate-code-java-servlet =
     ?def@Define(mods, name, args, targs, elems) ;
         {| ThisEmail, JavaThisPage, NestedTemplate, ThisTemplateName,ThisTemplateClassName, Variables, TemplateFormalArguments: //Variables: to hold arguments/variables of parent templates/pages
         with(
           if ThisTemplateName       then rules ( NestedTemplate := name ) end
         ; if <elem> (Page(), mods)  then rules ( JavaThisPage := name ) end
         ; if <oncetd(?Email())> mods then rules ( ThisEmail := name ) end
         ; rules ( 
             ThisTemplateName := name
             ThisTemplateClassName := <get-template-class-name> def
             //TemplateFormalArguments := args
           ) 
         )
         ; log-time(not(GenerateCodeJavaServlet)|"generate code define")
         ; all(generate-code-java-servlet)
         |}
   <+(?Action(_, _, _) <+ ?InitAction(_)) ;
         {| InAction, Variables:
           rules ( InAction := True() )
         ; log-time(not(GenerateCodeJavaServlet)|"generate code action")
         ; all(generate-code-java-servlet)
         |}
   <+?Function(_,_,_,_) /*;  handled with dynamic rule that holds all functions
         {| Variables://InFunction, Variables:
           //rules ( InFunction := <id> )
           not(GenerateCodeJavaServlet)
         ; all(generate-code-java-servlet)
         |}*/
   <+(?Entity(ent_name,_,_,_)<+?SessionEntity(ent_name,_,_)<+?EntityNoSuper(ent_name,_,_)) ;
         {| JavaInEntity, ClassName: //needs refactoring, should be only one dr to check in-entity status
           rules ( JavaInEntity := True() ClassName := ent_name )
         ; log-time(not(GenerateCodeJavaServlet)|"generate code entity")
         ; all(generate-code-java-servlet)
         |}
   <+{?el@elem|[ var x : srt := e ]|
         ; where(<elem> (el,<AllGlobalVars>))}
   <+      log-time(not(GenerateCodeJavaServlet)|"generate code other")
         ; all(generate-code-java-servlet)

// some helping annotations to create uniqueness among the static elements

signature
  constructors
    TemplateCallNumber : String -> Annotation
    FormNumber : String -> Annotation
    InputNumber : String -> Annotation
    ActionNumber : String -> Annotation //action calls/actionLink
    TemplateClassName : String -> Annotation
   /* ActionClassName : String -> Annotation*/
        
rules

  get-templatecallnumber :
    _{anno*} -> compid
    where TemplateCallNumber(compid) := <collect(?TemplateCallNumber(_));Hd> anno*
 
  get-formnumber :
    _{anno*} -> compid
    where FormNumber(compid) := <collect(?FormNumber(_));Hd> anno* 
    
  get-inputnumber :
    _{anno*} -> compid
    where InputNumber(compid) := <collect(?InputNumber(_));Hd> anno* 
    
  get-actionnumber :
    _{anno*} -> compid
    where ActionNumber(compid) := <collect(?ActionNumber(_));Hd> anno* 
    
  get-template-class-name :
    _{anno*} -> compid
    where TemplateClassName(compid) := <collect(?TemplateClassName(_));Hd> anno* 
 /*
  get-action-class-name :
    _{anno*} -> compid
    where ActionClassName(compid) := <collect(?ActionClassName(_));Hd> anno* 
   */        
strategies

  annotate-with-unique-element-ids = 
    topdown(try(java-servlet-element-id))

rules

  java-servlet-element-id :
    tc@TemplateCall(name, args,passign*, _){anno*} -> tc{TemplateCallNumber(newid),anno*} 
    where t* := <map(type-of)> args 
          ; <CallToDefinedTemplateAfterIdRename <+ CallToRequiredTemplateAfterIdRename> name
        //; <TemplateSignature <+ LocalTemplateSignature <+ !<strip-annos> name;TemplateWithGenerics> (name,t*)
        ; newid := <newname> "tcall"
    
  java-servlet-element-id :
    tc@TemplateCall("form", attrs,passign*, elems){anno*} -> tc{FormNumber(newid),anno*} 
    where  newid := <newname> "form"
    
  java-servlet-element-id :
    tc@TemplateCall("action",[e1,e2],passign*,TemplateBody([])){anno*} -> tc{ActionNumber(newid),anno*} 
    where  newid := <newname> "action"
  
  java-servlet-element-id :
    tc@PropertyAssignment(x, ThisCall(event, args)){anno*} -> tc{ActionNumber(newid),anno*} 
    where  newid := <newname> "action"
    
  java-servlet-element-id :
    tc@TemplateCall("actionLink",[e1,e2],passign*,TemplateBody([])){anno*} -> tc{ActionNumber(newid),anno*} 
    where  newid := <newname> "action"

  java-servlet-element-id-template-call : 
    tc -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
        ; newid := <newname> "input"

 /* java-servlet-element-id :
    tc@elem|[ action x_ident(farg*){ stat*  } ]| -> tc{ActionClassName(newid),anno*} 
    where _{anno*} := tc
        ; newid := <concat-strings;newname> [x,"Action"]
   */     
    
  get-all-top-level-template-names =
    alltd(register-top-level-template-name)
  register-top-level-template-name = 
    ?tmplt@webdsl|[ define mod* x(farg*)  req*  { elem* } ]|
    ; with(
        // TemplateFormalArguments used in dispatch-servlet.str
        rules( TemplateFormalArguments : x -> farg* )
      ; if <not(fetch(Page <+ Email))> mod*
        then rules(AllTopLevelTemplateNamesJavaServlet :+= x  // used to create lookup hashmap in java-base-page.str
                   IsTopLevelTemplateNameJavaServlet : x
                   TopLevelTemplateArgumentsJavaServlet : x -> farg* 
                   GetTopLevelTemplateJavaServlet : x -> tmplt
                   )
        end
        ; if <fetch(?Email())> mod* then rules ( AllEmailNames :+= x ) end
        ; if "errorTemplateInputListString"  := x then rules ( ErrorTemplateInput := tmplt ) end
        ; if "errorTemplateFormListString"   := x then rules ( ErrorTemplateForm := tmplt ) end
        ; if "errorTemplateActionListString" := x then rules ( ErrorTemplateAction := tmplt ) end
        ; if "templateSuccessListString"     := x then rules ( TemplateSuccess := tmplt ) end
      )
    ; !<register-template-name(|True())> tmplt
    
  register-template-name(|toplevel)  :
    tc@Define(mod*,x,farg*, targs, elem*) -> Define(mod*,x1,farg*, targs, elem1*){TemplateClassName(newid),anno*} 
    with  _{anno*} := tc
        ; x1 := <strip-annos> x
        ; newid := <concat-strings;newname> [x,"Template"] // TODO add context page to the name for easier debugging
        ; if <oncetd(?Email())> mod* then rules ( EmailClassName : x -> newid ) end
        ; if True() := toplevel then rules( TopLevelTemplateClassName : x -> newid ) end
        ; if <elem> (Page(),mod*)
          then rules( AllPageNames  :+= x 
                      PageClassName : x -> newid) // used to create lookup hashmap in java-base-page.str 
                                                  // TODO needs renaming, used for any type of template now
          end
        ; elem1* := <alltd(register-template-name(|False()))> elem*
        