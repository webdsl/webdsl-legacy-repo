
module org/webdsl/dsl/to-java-servlet/core-to-java-servlet

imports
  libstrategolib
  Java-15
  libjava-front

imports
  org/webdsl/dsl/to-seam/-
  org/webdsl/dsl/to-java-servlet/-
    org/webdsl/dsl/to-java-servlet/types/-
  org/webdsl/dsl/modules/-
  libwebdsl-front

strategies

  core-to-java-servlet =
    ?Application(qid, sections)
    ; info(|"Now going to do code generation")
    ; rules(
        Package       := <qid-to-package-name> qid        
        BeanPackage   := <qid-to-package-name> Qualified(qid, "beans")
      )
    ; set-DomainPackage(|<qid-to-package-name> Qualified(qid, "domain")) //strategy/rule shared with seam back-end

    ; !Application(qid, sections)
    ; annotate-with-unique-element-ids
    ; generate-code-java-servlet

    // generate the application context java files that initialize global variables
    
    ; ! <get-java-artifacts-java-servlet>

   generate-code-java-servlet =
     if ?def@Define(mods, name, args, elems) then
       {| ThisPage, NestedTemplate, ThisTemplateName,ThisTemplateClassName, Variables //Variables: to hold arguments/variables of parent templates/pages
        : 
        where(
          if ThisPage
          then rules ( NestedTemplate := name ) end
        ; if <elem> (Page(), mods)
          then rules ( ThisPage := name ) end
        ; rules ( 
            ThisTemplateName := name
            ThisTemplateClassName := <get-template-class-name> def
          ) 
        )
        ; not(GenerateCodeJavaServlet)
        ; all(generate-code-java-servlet)
        |}
     else
       if ?Action(_, _, _) then
         {| InAction
         : rules ( InAction := True() )
         ; not(GenerateCodeJavaServlet)
         ; all(generate-code-java-servlet)
         |}
       else
         not(GenerateCodeJavaServlet)
         ; all(generate-code-java-servlet)
       end
     end

// some helping annotations to create uniqueness among the static elements

signature
  constructors
    TemplateCallNumber : String -> Annotation
    FormNumber : String -> Annotation
    InputNumber : String -> Annotation
    ActionNumber : String -> Annotation
    TemplateClassName : String -> Annotation
        
rules

  get-templatecallnumber :
    _{anno*} -> compid
    where TemplateCallNumber(compid) := <collect(?TemplateCallNumber(_));Hd> anno*
 
  get-formnumber :
    _{anno*} -> compid
    where FormNumber(compid) := <collect(?FormNumber(_));Hd> anno* 
    
  get-inputnumber :
    _{anno*} -> compid
    where InputNumber(compid) := <collect(?InputNumber(_));Hd> anno* 
    
  get-actionnumber :
    _{anno*} -> compid
    where ActionNumber(compid) := <collect(?ActionNumber(_));Hd> anno* 
    
  get-template-class-name :
    _{anno*} -> compid
    where TemplateClassName(compid) := <collect(?TemplateClassName(_));Hd> anno* 
      
strategies

  annotate-with-unique-element-ids = 
    info(|"applying unique element ids")
    ; topdown(try(java-servlet-element-id))
    ; info(|"applying unique element ids done")

rules

  java-servlet-element-id :
    tc@TemplateCall(name, args, _){anno*} -> tc{TemplateCallNumber(newid),anno*} 
    where t* := <map(type-of)> args ; <TemplateSignature> (name,t*)
        ; newid := <newname> "tcall"
    
  java-servlet-element-id :
    tc@TemplateCall("form", [], elems){anno*} -> tc{FormNumber(newid),anno*} 
    where  newid := <newname> "form"
    
  java-servlet-element-id :
    tc@TemplateCall("action",[e1,e2],[]){anno*} -> tc{ActionNumber(newid),anno*} 
    where  newid := <newname> "action"
    
  java-servlet-element-id :
    tc@webdsl|[ define mod* x(farg*) { elem* } ]| -> newtc{TemplateClassName(newid),anno*} 
    where _{anno*} := tc
        ; x1 := <strip-annos> x
        ; newtc := webdsl|[ define mod* x1(farg*) { elem* } ]| 
        ; newid := <concat-strings;newname> [x,"Template"]
        ; if <is-toplevel-template> x then rules(TopLevelTemplateClassName : x -> newid) end 
         
    

