module org/webdsl/dsl/to-java-servlet/test/test

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/to-java-servlet

strategies

  GenerateCodeJavaServlet = if-test(generate-tests); fail

  generate-tests :
     Test(ident,Block(stat*)) ->
     <emit-java-code> compilation-unit|[
       package pkgname;

       import pkgname2.*;
       import pkgname3.*;
       import utils.*;
       import org.webdsl.lang.*;
       import org.webdsl.tools.*;
       import java.util.*;

       import org.openqa.selenium.By;
       import org.openqa.selenium.WebDriver;
       import org.openqa.selenium.WebElement;
       import org.openqa.selenium.htmlunit.HtmlUnitDriver;

       @Partial
       public class x_class extends utils.Test
       {
          public x_class () {

            org.hibernate.Session hibSession = e_HibSession;

            PageServlet ps = new GlobalsPageServlet();
            env = ps.envGlobalAndSession;
            ThreadLocalPage.set(ps);
            java.io.PrintWriter out = new java.io.PrintWriter(System.out);
            ThreadLocalOut.push(out);
            TestAll.reloadGlobalVarsInit(e_HibSession);

            initialize();
          }

          public void setWebClient(WebDriver webClient){
            this.webClient = webClient;
          }

          WebDriver webClient = null;

          public boolean closeTransactionBecauseOfSqliteConcurrencyLimitation = false;

          public boolean run(){
            boolean exceptionOccuredWhileRunningTests = false;
            try
            {
              if(closeTransactionBecauseOfSqliteConcurrencyLimitation){
                e_HibSession.flush();
                e_HibSession.getTransaction().commit();
              }

              //webClient = new WebClient();
              org.webdsl.logging.Logger.info("\nTest: " + "~origident");

              bstm*

              if(!closeTransactionBecauseOfSqliteConcurrencyLimitation){
                e_HibSession.flush();
                e_HibSession.getTransaction().commit();
              }
            }
            catch(Exception ex)
            {
              org.webdsl.logging.Logger.error("exception occured: " + ex.getMessage(), ex);
              if(!closeTransactionBecauseOfSqliteConcurrencyLimitation){
                e_HibSession.getTransaction().rollback();
              }
              exceptionOccuredWhileRunningTests = true;
              //throw new RuntimeException("error in test");
            }
            finally{

              ThreadLocalOut.pop();

              org.webdsl.logging.Logger.info("Succeeded: " + assertsSucceeded +" / "+assertsChecked);
              org.webdsl.logging.Logger.info("Failed:    " + assertsFailed+" / "+assertsChecked);
              if(!exceptionOccuredWhileRunningTests){
                if(assertsSucceeded == assertsChecked){
                  org.webdsl.logging.Logger.info("All assertions in "+"~origident"+" succeeded.");
                }
                else {
                  org.webdsl.logging.Logger.info("Some assertions failed:");
                  for(String s : messages){
                    org.webdsl.logging.Logger.info(s);
                  }
                }
              }
              TestAll.clearDB();
              if(assertsFailed>0 || exceptionOccuredWhileRunningTests){
                return false;
              }
              return true;
            }
          }

          private org.hibernate.Session hibSession;
          private java.io.PrintWriter out;
          private Environment env;

          @Partial
          protected void initialize(){}

       }
     ]|
     with x_class := <concat-strings> ["Test",ident]
        ; pkgname := <TestPackage>
        ; pkgname2 := <TemplatePackage>
        ; pkgname3 := <DomainPackage>
        ; bstm* := <statements-to-java-servlet> stat*
        ; origident := <get-original-name> ident
        ; <map(load-init-global-variables-cbds-test(|x_class, pkgname))> <bagof-AllGlobalVars>

  load-init-global-variables-cbds-test(|x_class, pkgname) :
    GlobalVarDeclInit(x, srt, e) ->
    <emit-java-code>
    compilation-unit|[
      package pkgname;
      @Partial
      public class x_class {
        private t x = null;
        @Partial protected void initialize(){
          x = GlobalVariables.get#x(e_HibSession);
          env.putGlobalVariable("~x", x);
        }
      }
    ]|
    with  t := <java-type> srt
