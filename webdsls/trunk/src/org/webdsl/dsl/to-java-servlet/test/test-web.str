module org/webdsl/dsl/to-java-servlet/test/test-web

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/to-java-servlet

strategies

  GenerateCodeJavaServlet = if-test(generate-test-web); fail

  generate-test-web :
     Application(_,_) ->
     <emit-java-code> compilation-unit|[
       //package pkgname;
       package utils;
       import pkgname.*;
       import pkgname2.*;
       import pkgname3.*;
       import utils.*;
       import org.webdsl.lang.*;
       import org.webdsl.tools.*;
       import org.hibernate.*;
       
       import org.openqa.selenium.By;
       import org.openqa.selenium.WebDriver;
       import org.openqa.selenium.WebElement;
       import org.openqa.selenium.htmlunit.HtmlUnitDriver;
       
       public class TestWeb extends TestAll
       {
          public TestWeb () {

          }
          
          public void runTests(){
            boolean exitWithError = false;
            
            bstm*
            
            if(exitWithError){
              System.exit(1);
            }
          }

          public static void main(String[] args) {
            new TestWeb().runInWebAppContainer(true,false);       
          }
       }
     ]|
     with pkgname := <TestPackage>
        ; pkgname2 := <BeanPackage>
        ; pkgname3 := <DomainPackage>
        ; names := <bagof-AllTestNames <+ ![]>
        ; bstm* := <map(gen-call-test-web-class);concat> names  
       
  gen-call-test-web-class :
    name -> 
      bstm*|[ 
        x_name x_var = new x_name(); 
        utils.ThreadLocalTest.set(x_var);
        x_var.closeTransactionBecauseOfSqliteConcurrencyLimitation = true;
        //x_var.setWebClient(new HtmlUnitDriver()); //use HTMLUnit for now, but webdriver also supports using external browsers such as firefox
        exitWithError = !x_var.run() || exitWithError; 
        utils.ThreadLocalTest.set(null);
      ]|
    with x_name := <concat-strings> ["Test", name]
       ; x_var := <concat-strings> ["varTest", name]
    