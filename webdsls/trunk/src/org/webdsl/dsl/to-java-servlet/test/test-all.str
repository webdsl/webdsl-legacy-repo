module org/webdsl/dsl/to-java-servlet/test/test-all

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front

strategies

  GenerateCodeJavaServlet = if-test(generate-test-all); fail

  generate-test-all :
     Application(_,_) ->
     <emit-java-code> compilation-unit|[
       //package pkgname;
       package utils;
       import pkgname.*;
       import pkgname2.*;
       import pkgname3.*;
       import utils.*;
       import org.webdsl.lang.*;
       import org.webdsl.tools.*;
       import org.hibernate.*;
       
       public class TestAll
       {
          public TestAll () {

          }
          
          public static void clearDB(){
            org.hibernate.Session hibSession = null;
            try{
              hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
              hibSession.beginTransaction();
              hibSession.setFlushMode(org.hibernate.FlushMode.MANUAL);
           
              bstm1*

              hibSession.flush();
              hibSession.getTransaction().commit();
            }	
            catch(Exception ex)
            { 
              System.out.println("exception occured while clearing database: " + ex.getMessage());
              ex.printStackTrace();
              hibSession.getTransaction().rollback();
            }
          }
          
          public static void reloadGlobalVarsInit(Session hibSession){
            GlobalVariables.forceLoad();
            GlobalInit.forceLoad();
          }
          
          public static void runTests(){
            boolean exitWithError = false;
            
            bstm*
            
            if(exitWithError){
              System.exit(1);
            }
          }

          public static void main(String[] args) {
            runTests();
          }
       }
     ]|
     with pkgname := <TestPackage>
        ; pkgname2 := <BeanPackage>
        ; pkgname3 := <DomainPackage>
        ; names := <bagof-AllTestNames <+ ![]>
        ; bstm* := <map(gen-call-test-class);concat> names  
        ; bstm1* := <map({\ 
                           x -> bstm|[hibSession.createQuery("delete from "+"~x").executeUpdate(); ]|
                       \})> 
                       ["ApplicationContextProperty"|["File"|<bagof-AllEntityNames>]]
       
  gen-call-test-class :
    name -> bstm*|[ 
      utils.Test x_test = new x_name();
      utils.ThreadLocalTest.set(x_test);
      exitWithError = !x_test.run() || exitWithError; 
      utils.ThreadLocalTest.set(null);
    ]|
    with x_name := <concat-strings> ["Test", name]
       ; x_test := <concat-strings> ["varTest", name]
    