module org/webdsl/dsl/to-java-servlet/ajax/attr-events
   
imports
  libstrategolib  

imports 
  libwebdsl-front

rules

  // CONTROL FLOW
  
  //attrsmap optimization, if there are no attrs, do not initialize a new one
  control-flow-emit-attrs-calls-map :
  passign* -> bstm_1*
  with bstm* := <filter(control-flow-emit-attrs-calls);concat> passign*
     ; if (0 := <length> bstm* ) then
         bstm_1* := <control-flow-emit-attrs-calls-map-def>
       else
         bstm_1* := bstm* |[
           Map<String,String> attrsmapout = new HashMap<String, String>();
           bstm*
         ]|
       end
  
  control-flow-emit-attrs-calls-map-def =
    !bstm* |[ Map<String,String> attrsmapout = TemplateCall.EmptyAttrs; ]|
  
    
  control-flow-emit-attrs-calls =
    control-flow-emit-attrs-calls-1 <+ control-flow-emit-attrs-calls-2
    
  control-flow-emit-attrs-calls-1 :
    tc@PropertyAssignment(name, call@ThisCall(_,_)) -> bstm* |[
      attrsmapout.put("~name",e_val);
    ]|
    where actionident := <get-actionnumber> tc
        ; e_val := <ajax-action-call-to-exp(| e|[ "{_args_}" ]| )> (actionident, call)
    
  control-flow-emit-attrs-calls-2 :
    PropertyAssignment(name, val) -> bstm* |[
      attrsmapout.put("~name",e_val);
    ]|
    with e_val := <  control-flow-emit-attrs-value 
                  <+ expression-to-java-servlet
                  > val
  
  //translate identifiers
  control-flow-emit-attrs-value :
    val -> expr |[ "~val" ]|
    where <is-string> val    
  
  //USING ATTRIBUTES
  //translates the attribute(String, String) function  
  call-to-java-servlet :
    exp |[ attribute(e1,e2) ]| -> expr |[ utils.TemplateCall.getAttribute(attrs, e3,e4) ]|
    with  e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java-servlet> e2    

  expression-to-java-servlet :
    EventCall(name,args) -> expr |[ utils.TemplateCall.getAttribute(attrs, "~name","").replace("{_args_}",e4) ]|
    with  e4 := <map(event-call-args-to-java-servlet);generate-addition-exp> args
    
  event-call-args-to-java-servlet :
    EventArg(name, e) -> e |[ "~name"+"=\"+"+e1+"+\"&" ]|
    with e1 := <expression-to-java-servlet> e
       
  ajax-action-call-to-exp(|e_extraparams) :
    (actionident, call@ThisCall(act, args)) -> e |[ 
      "serverInvoke(\""+ThreadLocalServlet.getContextPath()+"/" + ps.getActionTarget() +"\",\""+ e_actionid +"\", \""+ps.getHiddenPostParams()+e_extraparams+"\",\""+form_ident+"\", this);" 
     ]| 
    where Action(_,_,_) := <OriginalNonUniqueName; ActionDefinition> act //Where, because thiscall can refer to an ordinary expression
    with e_actionid := <action-id-encoding/*-as-expr-for-ajax*/> (actionident, args)

   //PROVIDING ATTRIBUTES    
  //event call to java
  assignment-to-html-attr :
    tc@PropertyAssignment(x, call@ThisCall(_, _)) -> (x, e |[ "javascript:" + e2 ]|)
    where actionident := <get-actionnumber> tc
        ; e2 := <ajax-action-call-to-exp(| e|[ "" ]|)> (actionident, call)
        
  //handle actions
  handle-actions-to-java-servlet: 
    tc@PropertyAssignment(x, ThisCall(x_action, args)) ->
    <wrap-action-render-java-code>
    bstm*|[
        ident = e_actionid;
        if(ps.getParammap().get(ident)!=null)
        {
            x_action temp = (x_action)env.getAction("~x_action");
            temp.x_action(e*,ident);
        }
    ]|
    where  Action(_,fargs,_) := <OriginalNonUniqueName; ActionDefinition> x_action //Where, because thiscall can refer to an ordinary expression
        //; actionident := <get-actionnumber> tc   
    with   e* := <zip; map(
            ajax-action-arg-to-java-servlet <+ 
            ?(_,<id>); expression-to-java-servlet
          )> (fargs, args)
        ; e_actionid := <action-id-encoding/*-as-expr-for-ajax*/> (<get-actionnumber> tc, args) //was actionident

  ajax-action-arg-to-java-servlet :
    (Arg(name, SimpleSort("String")), Null()) -> e |[ ps.getParammap().get("~name") ]|       
