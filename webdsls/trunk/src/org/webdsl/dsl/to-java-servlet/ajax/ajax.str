module org/webdsl/dsl/to-java-servlet/ajax/ajax
   
imports
  libstrategolib  

imports 
  libwebdsl-front

rules


  check-for-ajax = //check if there is any need for ajax in this application
    alltd(item-requires-java)
    
  item-requires-java =
    ? AjaxAction(_,_,_)
    ; rules(IsAjaxApp := True())

  //rewrites a list of assignments to a list of attributes. It can be extended by adding alternatives
  //to the assignment-to-html-attr rules. Those rules are of the format Assignment(x, y) -> Assignment(a, String(b))
  to-html-attrs :
    attrs -> attrs3
    with attrs1 := <map(assignment-to-html-attr)> attrs
        ;attrs2 := <map(assignmentstring-to-html-attr)> attrs1
        ;attrs3 := <generate-addition-exp > attrs2        
    
  //final (private) conversion: converts a String assignment to html    
  assignmentstring-to-html-attr :
    (x, e_y) -> e |[ "~x"+"='" + e_y + "' " ]|
    
  //object id attribute is accepted, and already a valid assignment
  assignment-to-html-attr :
    PropertyAssignment("id", String(y)) -> ("id", e|[ "~y" ]| )

   //event call
  assignment-to-html-attr :
    tc@PropertyAssignment(x, call@ThisCall(_, args)) -> (x, e |[ "javascript:serverInvoke(\""+"~app"+"/" + ps.getPageName() +"\",\""+ "~actionident"+uniqueid+e2 +"\", \""+ps.getHiddenPostParams()+"\",\""+form_ident+"\", this)" ]| )
    with app := <AppRoot>
        ;actionident := <get-actionnumber> tc   
        ;e1* := <map(action-id-param-encoding-java-servlet <+ debug(!"failed to generate POST data from ");!e|[""]| )> args
        ;e2 := <generate-addition-exp > e1*
        
  handle-actions-to-java-servlet: 
    tc@PropertyAssignment(x, ThisCall(x_action, args)) ->
    bstm*|[
        ident = "~actionident"+uniqueid+e2;
        if(ps.getRequest().getParameter(ident)!=null)
        {
            x_class temp = (x_class)actionclasses.get("~x_class");
            temp.x_action(e*);
        }
    ]|
    with  actionident := <get-actionnumber> tc   
        ; e* := <map(expression-to-java-servlet)> args
        ; e1* := <map(action-id-param-encoding-java-servlet)> args
        ; e2 := <generate-addition-exp > e1*
        ; _{x_class} := x_action
        
  action-id-param-encoding-java-servlet :
    e -> el
    where <type-of;defined-java-type> e
    with  el := <arg-to-value-string-java-servlet> FieldAccess(e, "id")
 
  action-id-param-encoding-java-servlet :
    e -> el
    where <type-of;builtin-java-type> e
    with  el := <arg-to-value-string-java-servlet> e

 //replace/append myfirstdynamicdiv << editDocument(document);
  ajax-to-java-servlet :
    AjaxAction(theaction, thediv, ThisCall(template, args)) -> bstm*|[ 
        Object[] x_args = { e* };
  
        java.io.StringWriter x_s = new java.io.StringWriter();
        java.io.PrintWriter x_out = new java.io.PrintWriter(x_s); 
        
        
        //check if this action has been executed
        ps.clearHibernateCache(variables);
        try {
          ((PageServlet)DispatchServlet.pages.get("~template").newInstance()).serveAsAjaxResponse(request, x_out, x_args);
        }
        catch(IllegalAccessException iae)
        {
          System.out.println("Problem in template servlet template lookup: "+iae.getMessage());
        }
        catch(InstantiationException ie)
        {
          System.out.println("Problem in template servlet template lookup: "+ie.getMessage());
        }  
          
        out.println("{ action: \""+"~theaction"+"\", id: \""+"~thediv"+"\", value : \""+org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(x_s.toString())+"\"},"); 
     ]|
    where (theaction := "replace" <+ theaction := "append") 
    with x_args := <newname> "args"
       ; x_out := <newname> "out"
       ; x_s   := <newname> "s"
       ; e* := <map({\e -> <expression-to-java> e\})> args
    
 ajax-to-java-servlet :
    AjaxAction("visibility", thediv, String(visibility)) -> bstm*|[ 
       out.println("{ action: \"visibility\", id: \""+"~thediv"+"\", value: \""+"~visibility"+"\"},");
     ]|
    with (visibility := "show") <+ (visibility := "hide") 

 ajax-to-java-servlet :
    AjaxAction("relocate", "to", call@ThisCall(_,_)) -> bstm*|[ 
      PageServlet.clearHibernateCache(variables);
      out.println("{ action: \"relocate\", value: \""+e_url+"\" },\n");
     ]|
    with  e_url := <page-thiscall-to-url-string-java-servlet> call

 ajax-to-java-servlet :
    AjaxAction("restyle", thediv, String(newstyle)) -> bstm*|[ 
       out.println("{ action: \"restyle\", id: \""+"~thediv"+"\", value: \""+"~newstyle"+"\"},");
     ]|
    