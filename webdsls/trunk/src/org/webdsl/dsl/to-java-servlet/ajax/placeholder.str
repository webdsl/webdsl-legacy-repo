module org/webdsl/dsl/to-java-servlet/ajax/placeholder

imports
  libstrategolib
  libwebdsl-front

rules

  elem-to-java-servlet :
    Placeholder(name, elems) ->
    bstm* |[
        java.io.StringWriter x_sw = new java.io.StringWriter();
        out = new java.io.PrintWriter(x_sw);
        ThreadLocalOut.push(out);
      out.print("<div id=\""+e_name+"\" class=\"webdsl-placeholder\">");
      bstm*
      out.print("</div>");
        ThreadLocalOut.popChecked(out);
        out = ThreadLocalOut.peek();
        String x_string = x_sw.toString();
        out.write(x_string); // write placeholder to normal out
        threadLocalPageCached.addReRenderPlaceholdersContent(e_name,x_string); // write placeholder to rerender 'buffer', will only add if this placeholder was marked for refreshing
    ]|
    with bstm* := <elems-to-java-servlet> elems
       ; e_name := <placeholder-id-to-java-exp> name
       ; x_sw := <newname> "tmpstringwriter"
       ; x_string := <newname> "tmpstring"
         
  elem-to-java-servlet :
    PlaceholderWithAjaxCall(name, tc) ->
    bstm* |[
      out.print("<div id=\""+e_name+"\" class=\"webdsl-placeholder\">");
      bstm_thecall*
      out.print("</div>");
    ]|
    with bstm_thecall* := <call-template-as-ajax-template-helper> tc
       ; e_name := <ajax-target-to-expression> name
         
  placeholder-id-to-java-exp :
  	x -> java:expr|[ get#x() ]| // see to-java-servlet/java-template-vars.str
  	where <is-string> x  // placeholder Id

  placeholder-id-to-java-exp :
  	x -> <ajax-target-to-expression> x
  	where not(<is-string> x)  // placeholder Exp
