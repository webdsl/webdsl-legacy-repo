module org/webdsl/dsl/to-java-servlet/control-flow-to-java-servlet

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
    
// control flow page elements   : for, if, templatecall 

rules // iteration

  for-loop-counter-wrap-code:
    bstm* -> result
    with  if <?[]> bstm* 
          then result :=  []
          else result :=  bstm*|[
                            ident = "";
                            if(inForLoop) {
                              ident += forelementcounter;
                            }
                            bstm*
                          ]| end
    
  wrap-in-for-loop(|x,t,e) :
    bstm -> res
    with  x_i := <newname> "i"
        ; res := <wrap-in-for-loop(|x_i,x,t,e)> bstm
  
  wrap-in-for-loop(|x_i,x,t,e) :
    bstm ->
    bstm* |[
      Object[] x_array = e.toArray(); // need to iterate set too without iterator, this copied array also makes sure a remove on the collection doesn't cause skipped elements
      for(int x_i = 0; x_i < x_array.length; x_i++)
      { 
        t x = (x_argtype) x_array[x_i];
        bstm*
      }
    ]|
    with  x_array := <newname> "array"
        ; x_argtype := <pp-java5-to-string> t
        ; if <is-list> bstm
          then bstm* := bstm
          else bstm* := [bstm] end

  handle-actions-input-to-java-servlet  =
    control-flow-for(collect-om(handle-actions-input-to-java-servlet)|)

  handle-actions-to-java-servlet =
    control-flow-for(collect-om(handle-actions-to-java-servlet)|)

  elem-to-java-servlet =
    control-flow-for(elems-to-java-servlet|)

  control-flow-for(s|) :
     ForCount(x, e1, e2, elems) -> result
     with  x_bound := <newname> "stop"
         ; e3 := <expression-to-java-servlet> e1
         ; e4 := <expression-to-java-servlet> e2
         ; bstm* := <s;concat-with-sublists> elems
         ; if <?[]> bstm* 
           then result :=  []
           else result :=  bstm*|[
                             inForLoop = true;
                             forLoopCounter++;
                             int x = e3; //x has been renamed already
                             int x_bound = e4;
                             while(x < x_bound) {
                               forelementcounter++;
                               bstm*
                               x = x + 1;
                             }
                             forLoopCounter--;
                             if(forLoopCounter == 0)
                               inForLoop = false;
                           ]| end

  control-flow-for(s|) :
    For(x, srt, e1, fltr, elems) -> result
    with  bstm* := <s;concat-with-sublists> elems
        ; e2 := <expression-to-java-servlet> e1
        ; t := <java-type> srt
        ; x_list := <newname> "list"
        ; GenericSort(x_setorlist,[SimpleSort(_)]) := <type-of> e1
        ; if <?[]> bstm*
          then result :=  [] 
          else result :=  bstm* |[
                            java.util.ArrayList<t> x_list = new java.util.ArrayList<t>(e2);
                            ~*<control-flow-for-common(s | x_list, x, srt, t, fltr)> bstm* |[    
                              bstm*
                            ]|
                          ]| end
  control-flow-for(s|) :
    ForSep(x, srt, e1, fltr, elems1, elems2) -> result
    with  bstm1* := <s;concat-with-sublists> elems1
        ; bstm2* := <s;concat-with-sublists> elems2
        ; e2 := <expression-to-java-servlet> e1
        ; t  := <java-type> srt
        ; x_separatorindex := <newname> "separatorindex"
        ; GenericSort(x_setorlist,[SimpleSort(_)]) := <type-of> e1
        ; x_list := <newname> "list"
        ; if <?[]> bstm1*
          then result :=  [] 
          else result :=  bstm* |[
                            int x_separatorindex=0;
                            java.util.ArrayList<t> x_list = new java.util.ArrayList<t>(e2);
                            ~*<control-flow-for-common(s | x_list, x, srt, t, fltr)> bstm* |[  
                              if(x_separatorindex > 0) {
                                bstm2* // place separator if there was an element before this one
                              }
                              bstm1*
                              x_separatorindex++;
                            ]|
                          ]| end

  control-flow-for(s|) :
    fa@ForAll(x, srt, fltr, elems) -> result
    with  bstm*   := <s;concat-with-sublists> elems
        ; t       := <java-type> srt
        ; x_list := <newname> "list"
        ; e_criteria := <hibernate-forall-criteria> (fa, t, x, srt, fltr)
        ; if <?[]> bstm*
          then result :=  [] 
          else result :=  bstm* |[ 
                            java.util.List<t> x_list = e_criteria.list();
                            ~*<control-flow-for-common(s | x_list, x, srt, t, fltr)> bstm*|[
                              bstm*
                            ]|
                          ]| end
        
  control-flow-for-common(s | x_list, x, srt, t, fltr) :
    bstm* ->
    bstm* |[
      inForLoop = true;
      forLoopCounter++;
      bstm_order*
      ~*<wrap-in-for-loop(|x,t,expr|[ x_list ]|)>
      bstm* |[  
        forelementcounter++;
        bstm*
      ]|
      forLoopCounter--;
      if(forLoopCounter == 0)
      inForLoop = false;
    ]|
    with  bstm_order* := <for-filter-by-code(|x, srt, t, x_list)> fltr

rules // if

  handle-actions-input-to-java-servlet  =
    control-flow-if(collect-om(handle-actions-input-to-java-servlet)|)

  handle-actions-to-java-servlet =
    control-flow-if(collect-om(handle-actions-to-java-servlet)|)

  elem-to-java-servlet =
    control-flow-if(elems-to-java-servlet|)

  control-flow-if(s|) :
    IfTempl(e, elems, elems2) -> result
    with  bstm* := <s;concat-with-sublists> elems
        ; bstm2* := <s;concat-with-sublists> elems2
        ; e1 := <expression-to-java-servlet> e
        ; if <?([],[])> (bstm*,bstm2*)
          then result :=  [] 
          else result :=  bstm |[
                            if(e1){ 
                              bstm*
                            } else {
                              bstm2*
                            }
                          ]| end

rules //templatecall    

  handle-actions-input-to-java-servlet  =
    control-flow-tcall(|"storeInputs")

  handle-actions-to-java-servlet =
    control-flow-tcall(|"handleActions")

  elem-to-java-servlet =
    control-flow-tcall(|"render")

  control-flow-tcall(|x_methodname) :
    tc@TemplateCall(x_name, args, passign*, _) -> result
    where <CallToDefinedTemplateAfterIdRename> x_name
    with  e* := <map({\e -> <expression-to-java-servlet> e\})> args
        ; x_tname := <get-templatecallnumber> tc
        ; arg_dump := <alltd(OriginalNonUniqueName);map(pp-webdsl);separate-by(|", ");concat-strings;explode-string;escape-chars;implode-string> args
        ; bstm_npe* :=
            <![];if-debug(!bstm*|[
              System.out.println("WebDSL warning: null reference in template arguments: "+"~x_name"+"("+"~arg_dump"+")"); // TODO proper location information; some way to disable these warnings
              npe.printStackTrace(); // display java exception for now so it can be traced back to the template
            ]|)>
        // implicit template argument
        ; if <fetch(?TemplateCall(templname,vars,_,_))> passign*
          then e_templ* := <map({\e -> <expression-to-java-servlet> e\})> vars
          else templname := "none"; e_templ* := [] end
        ; result := <generate-template-call(|x_methodname)> (expr|["~x_name"]|, expr|["~x_tname"]|, var-init|[ { e* } ]|, expr|["~templname"]|, var-init|[ { e_templ* } ]|, bstm_npe*)
 
  generate-template-call(|x_methodname):
    (e_name, e_tname, e, e_templname, e_templ, bstm_npe*) ->
    <for-loop-counter-wrap-code> 
    bstm* |[
    ident += e_tname;
    if(templatecalls.get(ident)==null){
      try{
        templatecalls.put(ident,(TemplateServlet)env.getTemplate(e_name).newInstance());
      }
      catch(IllegalAccessException iae)
      {
        System.out.println("Problem in template servlet template lookup: "+iae.getMessage());
      }
      catch(InstantiationException ie)
      {
        System.out.println("Problem in template servlet template lookup: "+ie.getMessage());
      }
    }
    try {
      Object[] x_args = e;
      Object[] x_templargs = e_templ;
      templatecounter = templatecalls.get(ident).x_methodname(ps, x_args, ++templatecounter, new Environment(env), new utils.TemplateCall(e_templname, x_templargs), e1*);
    }
    catch(NullPointerException npe) {
      bstm_npe*
    }
    ]|
    with  x_args := <newname> "args"
        ; x_templargs := <newname> "args"
        ; (    !x_methodname; (?"render"<+?"handleActions")
               ; e1* := [ e|[ out ]| ]
            <+ e1* := []
          )
      
rules //elements

  handle-actions-input-to-java-servlet  =
    control-flow-elemcall(|"storeInputs")

  handle-actions-to-java-servlet =
    control-flow-elemcall(|"handleActions")

  elem-to-java-servlet =
    control-flow-elemcall(|"render")

  control-flow-elemcall(|x_methodname) :
    tc@TemplateCall("elements", _, _, _) -> result 
    with  bstm_npe* := bstm*|[ System.out.println("WebDSL warning: null reference in environment of 'elements' call"); ]|
        ; result := <generate-template-call(|x_methodname)> 
            (expr|[ templateArg.name ]|, expr|["elements"]|, expr|[ templateArg.args ]|, expr|["none"]|, var-init|[ {} ]|, bstm_npe*)
 
    /*with  e* := <map({\e -> <expression-to-java-servlet> e\})> args
        ; x_tname := <get-templatecallnumber> tc
        ; arg_dump := <alltd(OriginalNonUniqueName);map(pp-webdsl);separate-by(|", ");concat-strings;explode-string;escape-chars;implode-string> args
        ; bstm_npe* :=
            (![];if-debug(!bstm*|[
              System.out.println("WebDSL warning: null reference in template arguments: "+"~x_name"+"("+"~arg_dump"+")"); // TODO proper location information; some way to disable these warnings
              npe.printStackTrace(); // display java exception for now so it can be traced back to the template
            ]|))
        // implicit template argument
        ; <fetch(?TemplateCall(templname,vars,_,_))> passign*
        ; e_templ* := <map({\e -> <expression-to-java-servlet> e\})> vars
        ; result := <generate-template-call> (x_tname, x_methodname, e*, e_templ*, bstm_npe*)
      */  