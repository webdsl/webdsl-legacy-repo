module org/webdsl/dsl/to-java-servlet/dispatch-servlet

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules

  GenerateCodeJavaServlet = generate-java-servlet-dispatcher; fail

  generate-java-servlet-dispatcher :
    Application(qid, sections) ->
    <emit-java-code> compilation-unit|[
      package utils;
  
      import java.io.*;
      import java.util.HashMap;
      import java.util.Map;
      import java.util.List;
      import java.util.LinkedList;
  
      import javax.servlet.*;
      import javax.servlet.http.*;
  
      import utils.*;
      import pkgname.*;
  
      public class DispatchServlet extends HttpServlet {
  
          
          public static HashMap<String, Class> pages = new HashMap<String, Class>();
          private static HashMap<String, String[]> pagearguments = new HashMap<String, String[]>();
          static{
              bstm*
              bstm2*
             
              //String[] s = {"i1","s1","li1"};
              //pagearguments.put("testpage", s);
              bstm1*
              bstm3*
          }
          
          private void addToValues(String key, String val,Map<String, List<String>> parammapvalues){
            List<String> current = parammapvalues.get(key); 
            if(current==null){
              List<String> newlist = new LinkedList<String>();
              newlist.add(val);
              parammapvalues.put(key,newlist) ; 
            }
            else{
             current.add(val);
            }
          }
            
          public void doGet(HttpServletRequest request, HttpServletResponse response)
          throws IOException, ServletException
          {
            boolean showerrorpage = false;
            try{
              String[] req = request.getRequestURL().toString().split("/");
              int count;
              boolean first = false;
              ~*<where(not(IsRootApp)) <+ ![]> bstm* |[
                for(count=0;count<req.length;count++)
                {
                  if(req[count].equals("~<AppName>"))
                  {
                    count++;
                    break;
                  }
                }
              ]|
              ~*<where(IsRootApp) <+ ![]> bstm* |[
                count = 3;
              ]|
             
              String requested = req[count];
              String[] args = java.util.Arrays.copyOfRange(req, count+1, req.length);
              String[] argnames = pagearguments.get(requested);

              java.util.Map<String, utils.File> fileUploads = new HashMap<String, utils.File>();
              java.util.Map<String, String> parammap = new HashMap<String, String>();
              java.util.Map<String, List<String>> parammapvalues = new HashMap<String, List<String>>();

              for(java.util.Enumeration en = request.getParameterNames();en.hasMoreElements(); ){
                String parameterName = (String)en.nextElement();
                parammap.put(parameterName,request.getParameter(parameterName)); 
                for(String paramval : request.getParameterValues(parameterName)){
                  addToValues(parameterName, paramval, parammapvalues);
                } 
              }
    
              List<String> messages = new LinkedList<String>();
              for(int count2=0; count2<args.length;count2++)
              {
                if(count2 >= argnames.length){
                  /*
                  // previous message implementation appended messages at end of url, might still be useful for variable argcount
                  try {
                    messages.add(java.net.URLDecoder.decode(args[count2],"UTF-8"));
                  } catch (java.io.UnsupportedEncodingException uee) {
                    uee.printStackTrace();
                  }*/
                }
                else
                {
                  parammap.put(argnames[count2],args[count2]);
                  addToValues(argnames[count2],args[count2],parammapvalues);
                }
              }
              
              //http://commons.apache.org/fileupload/using.html
              // Check that we have a file upload request
              boolean isMultipart = org.apache.commons.fileupload.servlet.ServletFileUpload.isMultipartContent(request);
              if(isMultipart){
                  
                  // Create a factory for disk-based file items
                  org.apache.commons.fileupload.FileItemFactory factory = new org.apache.commons.fileupload.disk.DiskFileItemFactory();
          
                  // Set factory constraints
                  //factory.setSizeThreshold(yourMaxMemorySize);//make configurable
                  //factory.setRepository(yourTempDirectory);//make configurable
                  
                  // Create a new file upload handler
                  org.apache.commons.fileupload.servlet.ServletFileUpload upload = new org.apache.commons.fileupload.servlet.ServletFileUpload(factory);
          
                  // Set overall request size constraint
                  //upload.setSizeMax(); //make configurable
                  
                  // Parse the request
                  try {
                      java.util.List<org.apache.commons.fileupload.FileItem> items = (java.util.List<org.apache.commons.fileupload.FileItem>) upload.parseRequest(request);
                  
                      // Process the uploaded items
                      java.util.Iterator<org.apache.commons.fileupload.FileItem> iter = items.iterator();
                      while (iter.hasNext()) {
                          org.apache.commons.fileupload.FileItem item = (org.apache.commons.fileupload.FileItem) iter.next();
          
                          if (item.isFormField()) {
                              String name = item.getFieldName();
                              String value = item.getString();
                              parammap.put(name, value);
                              addToValues(name, value, parammapvalues);
                          } else {
                              String fieldName = item.getFieldName();
                              String fileName = item.getName();
                              String contentType = item.getContentType();
                              boolean isInMemory = item.isInMemory();
                              long sizeInBytes = item.getSize();
                              utils.File temp = new utils.File();
                              temp.setFileName(fileName);
                              temp.setContentType(contentType);
                              temp.setSizeInBytes(sizeInBytes);
                           
                              temp.setContentStream(item.getInputStream());
          
                              fileUploads.put(fieldName, temp);
                          }
                      }
                  } catch (org.apache.commons.fileupload.FileUploadException ex) {
                      System.out.println("exception occured in file upload handling DispatchServlet");
                      ex.printStackTrace();
                  }
              }
              
              Class pc = pages.get(requested);

            if(pc == null) {
                pc = pages.get("pagenotfound");
              }
             
              if(pc != null) {
                  try{
                      PageServlet pageservlet = (PageServlet)pc.newInstance();
                      
                      //@TODO integrate these into call to serve, more explicit flow of data
                      pageservlet.getIncomingSuccessMessages().addAll(messages);                      
                      
                      pageservlet.serve(request,response,parammap,parammapvalues,fileUploads);
                  }
                  catch(IllegalAccessException iae){
                      System.out.println("Problem in dispatch servlet page lookup: "+iae.getMessage());
                      iae.printStackTrace();
                      showerrorpage=true;
                  }
                  catch(InstantiationException ie){
                      System.out.println("Problem in dispatch servlet page lookup: "+ie.getMessage());
                      ie.printStackTrace();
                      showerrorpage=true;
                  }
                  catch(RuntimeException re){   
                    showerrorpage=true;
                  }	  
              }
              else{showerrorpage=true;}
            }
            catch(Exception ex){
              System.out.println("Exception in dispatch servlet: "+ex.getMessage());
              ex.printStackTrace();
              showerrorpage=true;
            }
            
            if(showerrorpage)
            {
                response.sendError(javax.servlet.http.HttpServletResponse.SC_NOT_FOUND);
                /*
                response.setContentType("text/html");
                PrintWriter out = response.getWriter();
                out.println("<html>");
                out.println("<head>");
                out.println("<title>Unknown page</title>");
                out.println("</head>");
                out.println("<body>");
                out.println("<h3>Page "+requested+" does not exist!</h3>");
                out.println("Method: " + request.getMethod());
                out.println("Request URI: " + request.getRequestURI());
                out.println("Protocol: " + request.getProtocol());
                out.println("PathInfo: " + request.getPathInfo());
                out.println("Remote Address: " + request.getRemoteAddr());
                out.println("</body>");
                out.println("</html>");
                */
            }
          }
  
          public void doPost(HttpServletRequest request, HttpServletResponse response)
          throws IOException, ServletException
          {
              doGet(request, response);
          }
      }
    ]|
    with  pkgname    := <BeanPackage>
        ; pkgname2   := <DomainPackage>
        ; bstm*  := <map({\ 
                           x -> bstm |[ pages.put(x_key, x_value); ]| 
                           with  x_key := <concat-strings> ["\"",x,"\""]
                               ; x_value := <concat-strings> [<java-servlet-page-name> x,".class"]
                        \})> 
                        <bagof-PageNames;make-set>
        ; bstm1* := <map({\ 
                           x -> bstm* |[ {
                                         String[] s = { e* };
                                         pagearguments.put(x_key, s); 
                                         }
                                      ]| 
                           with  x_key := <concat-strings> ["\"",x,"\""]
                               ; e* := <TemplateArguments;map( \Arg(y,_)-> e|[ "~y" ]|\ )> x  //TemplateArguments must give unrenamed versions
                        \});concat> 
                        <bagof-PageNames;make-set>
        //ajax addition:
        ; if IsAjaxApp then
          bstm2*  := <map({\ 
                           x -> bstm |[ pages.put(x_key, x_value); ]| 
                           with  x_key := <concat-strings> ["\"",x,"\""]
                               ; x_value := <concat-strings> [<java-servlet-page-name> x,".class"]
                        \})> 
                        <bagof-AllTopLevelTemplateNamesJavaServlet;make-set>
        ; bstm3* := <map({\ 
                           x -> bstm* |[ {
                                         String[] s = { e* };
                                         pagearguments.put(x_key, s); 
                                         }
                                      ]| 
                           with  x_key := <concat-strings> ["\"",x,"\""]
                               ; e* := <TopLevelTemplateArgumentsJavaServlet;map( \Arg(y,_)-> e|[ "~<OriginalNonUniqueName> y" ]|\ )> x // must use unrenamed versions 
                        \});concat> 
                        <bagof-AllTopLevelTemplateNamesJavaServlet;make-set>
        else
          bstm2* := []
        ; bstm3* := []
        end
        
        

     

