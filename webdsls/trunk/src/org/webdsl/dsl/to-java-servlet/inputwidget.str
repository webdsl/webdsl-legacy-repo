module org/webdsl/dsl/to-java-servlet/inputwidget

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front

rules 

  is-input-template =
    ?tc@TemplateCall(n,args,p,b)
    ; <IsInputTemplate> n

  java-servlet-element-id : //Both tcall and input number
    tc@TemplateCall(_,_,_,_){anno*} -> tc{InputNumber(newid),TemplateCallNumber(tn),anno*} 
    where <is-input-template> tc
    with  newid := <newname> "input"
        ; tn := <newname> "tcall"
    
  handle-actions-input-to-java-servlet :
    tc@TemplateCall(x,e,passign*,elem*) ->
    <wrap-input-java-code(|passign*)>
    bstm*|[
      bstm_result2*
      ident += "~inputident"+uniqueid;
      if (ps.getParammap().get(ident)!=null) {
        ~*<wrap-validation-context-code-store-inputs> bstm*|[
          //~*<string-length-check-java-servlet(|x_temp,e)>
          bstm_result3*
          String x_temp = ps.getParammap().get(ident);
//          ~*<s(|x_temp,e)>
          bstm* 
        ]|
      }
    ]|
    where <is-input-template> tc
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; bstm* := <Hd;input-assignment-to-java-servlet(|x_temp)> e
        ; bstm_result2* := <filter(handle-actions-to-java-servlet); concat> passign*
        ; bstm_result3* := <control-flow-emit-attrs-calls-map(|"handleActions")> passign*
        

    
  elem-to-java-servlet : 
    tc@elem|[ x(e)[passign*]{elem*} ]| ->
    <wrap-input-render-java-code>
    bstm* |[ 
      String x_temp = ident+"~inputident"+uniqueid;
      ~*<render-error-messages-with-error-template(|java:expr|[ x_temp ]|,<ErrorTemplateInput>)> bstm*|[
        bstm_call*
        //TODO: display error stuff?
      ]|
    ]|
    where <is-input-template> tc
    with  inputident := <get-inputnumber> tc
//        ; bstm_exptostring* := <to-page-string-java-servlet> e
        ; x_temp := <newname> "temp"
//        ; e_attrs1 := <to-html-attrs(|"inputwidget")> passign*
        ; bstm_call* := <generate-template-call-for-input-widget(| expr|[ x_temp ]|)> tc
        
        
    generate-template-call-for-input-widget(|e_idexpr) :
      tc@TemplateCall(x_name,args,passign*,elem*)  -> bstm_call
      with
        x_tname := <get-templatecallnumber> tc
      ; eargs := <map({\e -> <expression-to-java-servlet> e\})> args
      ; e* := <concat>[eargs, [e_idexpr] ]
      //TODO: provide withcalls map and template arg?      
      ; attrsmap := <control-flow-emit-attrs-calls-map(|"renderInternal")> passign*       
      ; bstm_npe* :=
            <![];if-debug(!bstm*|[
              System.out.println("WebDSL warning: null reference in input template arguments: "+"~x_name"); 
              npe.printStackTrace(); // display java exception for now so it can be traced back to the template
            ]|)>
      ; x_templargs := <newname> "args"
      ; bstm_call := <generate-template-call(|"render")>
          (expr|["~x_name"]|, 
           expr|["~x_tname"]|, 
           var-init|[ { e* } ]|,
           //expr|["none"]|, 
           expr|[new utils.TemplateCall("none", x_templargs) ]|,
           var-init|[ {} ]|, 
           bstm_npe*, 
           <control-flow-emit-with-calls-map-def>,
           attrsmap,
           x_templargs)
