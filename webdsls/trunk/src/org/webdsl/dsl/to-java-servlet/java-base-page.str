module org/webdsl/dsl/to-java-servlet/java-base-page

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules
  /**
   * Generate base bean code
   */
  GenerateCodeJavaServlet = generate-java-base-page; fail

  generate-java-base-page :
    Application(qid, sections) ->
    <emit-java-code> compilation-unit|[
      package utils;
      
      import java.io.IOException;
      import java.util.HashMap;
      import java.util.Map;
      import java.util.List;
      import java.io.PrintWriter;
      import java.security.MessageDigest;
      import java.security.NoSuchAlgorithmException;
      
      import javax.servlet.ServletException;
      import javax.servlet.http.HttpServletRequest;
      import javax.servlet.http.HttpServletResponse;
      import pkgname.*;
      import org.webdsl.WebDSLEntity;
      import org.webdsl.lang.Environment;
      
      import org.hibernate.Session;
      
      public abstract class PageServlet extends AbstractPageServlet{
      
          //templates scope
          static {
            try{
              bstm_templates*
              bstm_pages*
            }
            catch(Exception se){
              System.out.println("Exception occured while instantiating base page class template and page definitions.");
              se.printStackTrace();
            }
          }
         
          static {
            try{
              bstm_emails*
            }
            catch(Exception se){
              System.out.println("Exception occured while instantiating base page class email definitions.");
              se.printStackTrace();
            }
          }
          
          static {
            try{
              bstm_refarg*
            }
            catch(Exception se){
              System.out.println("Exception occured while instantiating page reference argument class definitions.");
              se.printStackTrace();
            }
          }
          
          public String getAbsoluteLocation() {
            ~*<if-test> bstm*|[ return "http://localhost:" + utils.TestWeb.SERVLET_PORT + "/"; ]|
            ~*<if-not-test> bstm*|[ 
              if(ThreadLocalServlet.getContextPath().equals("")){ //root app
                String[] req = request.getRequestURL().toString().split("/");
                StringBuffer sb = new StringBuffer();
                sb.append(req[0]);
                sb.append("/");
                sb.append(req[1]);
                sb.append("/");
                sb.append(req[2]);
                return sb.toString();
              }
              else{
                String[] req = request.getRequestURL().toString().split(ThreadLocalServlet.getContextPath()+"/");
                return req[0];
              }
            ]|
          }
          
          //verifies that the correct context was popped      
          public void leaveTemplateContextChecked(String s) { 
            String s1 = templateContext.pop();
            ~*<![];if-debug(
              !bstm*|[
                if(!s.equals(s1)){
                  utils.Warning.warn("wrong templateContext popped, found: "+s1+" expected: "+s);
                }
            ]|)>
          } 
          
        }
      ]|
    with pkgname    := <BeanPackage>
       ; bstm_templates* := <map({\ 
                           x -> bstm |[ staticEnv.putTemplate("~x", x_value); ]| 
                           with  x_value := <concat-strings> [<TopLevelTemplateClassName> x,".class"]
                       \})> 
                       <bagof-AllTopLevelTemplateNamesJavaServlet>
       ; bstm_pages* := <map({\ 
                           x -> bstm |[ staticEnv.putTemplate("~x", x_value); ]| 
                           with  x_value := <concat-strings> [<PageClassName> x,".class"]
                       \})> 
                       <bagof-AllPageNames>
       ; bstm_emails* := <map({\ 
                           x -> bstm |[ emails.put("~x", x_value); ]| 
                           with  x_value := <concat-strings> [<EmailClassName> x,".class"]
                         \})> 
                         <bagof-AllEmailNames>
       ; bstm_refarg* := <map({\ 
                           x -> bstm |[ refargclasses.put("~x", x_value); ]| 
                           with  x_value := <concat-strings> [x,".class"]
                         \})> 
                         <bagof-RefArgClassName>
