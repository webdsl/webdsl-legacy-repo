

module org/webdsl/dsl/to-java-servlet/java-base-page

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules
  /**
   * Generate base bean code
   */
  GenerateCodeJavaServlet = generate-java-base-page; fail

  generate-java-base-page :
    Application(qid, sections) ->
    <emit-java-code> compilation-unit|[
      package utils;
      
      import java.io.IOException;
      import java.util.HashMap;
      import java.util.Map;
      import java.util.List;
      import java.io.PrintWriter;
      
      import javax.servlet.ServletException;
      import javax.servlet.http.HttpServletRequest;
      import javax.servlet.http.HttpServletResponse;
      import pkgname.*;
      import org.webdsl.WebDSLEntity;
      
      import org.hibernate.Session;
      
      public abstract class PageServlet {
          public abstract void serve(HttpServletRequest request, HttpServletResponse response, Map<String, String> parammap, Map<String, List<String>> parammapvalues, Map<String,utils.File> fileUploads);
          
          public abstract String getPageName();
          
          public abstract String getHiddenParams();
          public abstract String getHiddenPostParams();
          
          public javax.servlet.http.HttpSession session;

          //templates scope
          private static HashMap<String, Class> templates = new HashMap<String, Class>();
          static{
            bstm*
          }
          
          public static HashMap<String, Class> getTemplates() { return templates; }
          
          public boolean hasExecutedAction = false;
          
          ~cbds
          
          public void serveAsAjaxResponse(HttpServletRequest request, PrintWriter theoutStream, Object[] ajaxarguments, 
            Map<String, String> parammap, Map<String, List<String>> parammapvalues, Map<String, utils.File> fileUploads) {
          }
          
          public java.util.List<String> ignoreset= new java.util.ArrayList<String>();
          
          public void clearHibernateCache(Map<String, Object> variables) { 
            if(variables.get("_persist_flag_").equals(false)) { 
              java.util.Set<String> variables_set = variables.keySet();
              org.hibernate.Session hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
              for(String s : variables_set)
                if(!s.equals("_persist_flag_") && session.getAttribute(s) == null && !ignoreset.contains(s)  && variables.get(s) instanceof WebDSLEntity) {
                    Object o = variables.get(s);
                    try {
                       hibSession.refresh(o);
                    }
                    catch(org.hibernate.AssertionFailure ex) {
                       System.out.println("clearHibernateCache needs fix: "+ex.toString()); 
                    }
                }
            }
          }
          
          static {
            GlobalInit.load();
          }
          // atm just used for captcha check
          protected boolean validated=true;
          protected Session hibSession;
          protected HttpServletRequest request;
          protected HttpServletResponse response;
          protected Object[] args;  
          
          public Session getHibSession() {
              return hibSession;
          }

          public HttpServletRequest getRequest() {
              return request;
          }
      
          public HttpServletResponse getResponse() {
              return response;
          }
  
          public boolean isValidated() {
              return validated;
          }
     
          public void setValidated(boolean validated) {
              this.validated = validated;
          }
          
          protected java.util.Map<String, String> parammap;
          public java.util.Map<String, String> getParammap() {
            return parammap;
          }
                
          protected Map<String,utils.File> fileUploads;
          public Map<String, utils.File> getFileUploads() {
            return fileUploads;
          }
          
          protected Map<String, List<String>> parammapvalues;
          public Map<String, List<String>> getParammapvalues() {
            return parammapvalues;
          }
          
          protected String pageTitle ="";
          public String getPageTitle() {
            return pageTitle;
          }
          public void setPageTitle(String pageTitle) {
              this.pageTitle = pageTitle;
          }  
          
          protected utils.File download = null;
          public void setDownload(utils.File file){
            this.download = file;
          }
          
          protected void download()
          { 
            try
            { 
              javax.servlet.ServletOutputStream outstream;
          
              outstream = response.getOutputStream();
              
              java.sql.Blob blob = download.getContent();
              java.io.InputStream in;
          
              in = blob.getBinaryStream();
              response.setContentType(download.getContentType());
              response.setHeader("Content-Disposition", "attachment; filename=" + download.getFileName());
              java.io.BufferedOutputStream bufout = new java.io.BufferedOutputStream(outstream);
              byte bytes[] = new byte[32768];
              int index = in.read(bytes, 0, 32768);
              while(index != -1)
              { 
                bufout.write(bytes, 0, index);
                index = in.read(bytes, 0, 32768);
              }
              bufout.flush();
            }
            catch(java.sql.SQLException ex)
            { 
              System.out.println("exception in download serve");
              ex.printStackTrace();
            }
            catch (IOException ex) {
              System.out.println("exception in download serve");
              ex.printStackTrace();
            }
          }
        }
      ]|
    with pkgname    := <BeanPackage>
       ; bstm* := <map({\ 
                           x -> bstm |[ templates.put(x_key, x_value); ]| 
                           with  x_key := <concat-strings> ["\"",x,"\""]
                               ; x_value := <concat-strings> [<TopLevelTemplateClassName> x,".class"]
                       \})> 
                       <bagof-AllTopLevelTemplateNamesJavaServlet>
       ;if IsAjaxApp 
        then cbds := java:class-body-dec |[  public static boolean isAjaxApp = true; ]|
        else cbds := java:class-body-dec |[  public static boolean isAjaxApp = false; ]|
        end
