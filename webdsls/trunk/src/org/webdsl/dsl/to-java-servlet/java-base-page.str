module org/webdsl/dsl/to-java-servlet/java-base-page

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules
  /**
   * Generate base bean code
   */
  generate-code-java-servlet-once: _ ->
    <emit-java-code; fail> compilation-unit|[
      package utils;
      
      import java.io.IOException;
      import java.util.HashMap;
      import java.util.Map;
      import java.util.List;
      import java.io.PrintWriter;
      import java.security.MessageDigest;
      import java.security.NoSuchAlgorithmException;
      
      import javax.servlet.ServletException;
      import javax.servlet.http.HttpServletRequest;
      import javax.servlet.http.HttpServletResponse;
      import pkgname.*;
      import org.webdsl.WebDSLEntity;
      import org.webdsl.lang.Environment;
      
      import org.hibernate.Session;
      
      @SuppressWarnings("unused")
      public abstract class PageServlet extends AbstractPageServlet{
      
          //templates scope
          static {
            try{
              bstm_templates*
              bstm_pages*
            }
            catch(Exception se){
              System.out.println("Exception occured while instantiating base page class template and page definitions.");
              se.printStackTrace();
            }
          }
         
          static {
            try{
              bstm_emails*
            }
            catch(Exception se){
              System.out.println("Exception occured while instantiating base page class email definitions.");
              se.printStackTrace();
            }
          }
          
          static {
            try{
              bstm_refarg*
            }
            catch(Exception se){
              System.out.println("Exception occured while instantiating page reference argument class definitions.");
              se.printStackTrace();
            }
          }
          
          protected boolean isActionSubmit(){
            return ThreadLocalServlet.get().isPostRequest || parammap.get("~<action-call-with-get-param-name>") != null;
          }
          
          protected org.hibernate.Session openNewTransactionThroughGetCurrentSession(){
            hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
            hibSession.beginTransaction();
            return hibSession;
          }
          
          public String getAbsoluteLocation() {
            ~*<if-test> bstm*|[ 
              if(ThreadLocalServlet.getContextPath().equals("")){ //root app 
                return "http://localhost:" + utils.TestAll.SERVLET_PORT;
              }
              else{
                return "http://localhost:" + utils.TestAll.SERVLET_PORT;
              } 
            ]|
            ~*<if-not-test> bstm*|[ 
              if(ThreadLocalServlet.getContextPath().equals("")){ //root app
                String[] req = request.getRequestURL().toString().split("/");
                StringBuffer sb = new StringBuffer();
                sb.append(req[0]);
                sb.append("/");
                sb.append(req[1]);
                sb.append("/");
                sb.append(req[2]);
                return sb.toString();
              }
              else{
                String[] req = request.getRequestURL().toString().split(ThreadLocalServlet.getContextPath()+"/");
                return req[0];
              }
            ]|
          }
          
          //verifies that the correct context was popped      
          public void leaveTemplateContextChecked(String s) { 
            String s1 = templateContext.pop();
            ~*<![];if-debug(
              !bstm*|[
                if(!s.equals(s1)){
                  utils.Warning.warn("wrong templateContext popped, found: "+s1+" expected: "+s);
                }
            ]|)>
          }
          
          //QueuedEmail is generated from WebDSL, not available when compiling AbstractPageServlet
          public pkgtname_domain.QueuedEmail renderEmailAndCreateQueuedEmail(String name, Object[] emailargs, Environment emailenv){
            EmailServlet s = this.renderEmail(name,emailargs,emailenv);
            pkgtname_domain.QueuedEmail queuedemail = new pkgtname_domain.QueuedEmail();
            queuedemail.setBodyNoEventsOrValidation(s.body.toString());
            queuedemail.setBccNoEventsOrValidation(s.bcc);
            queuedemail.setCcNoEventsOrValidation(s.cc);
            queuedemail.setFromNoEventsOrValidation(s.sender);
            queuedemail.setReplyToNoEventsOrValidation(s.replyTo);
            queuedemail.setSubjectNoEventsOrValidation(s.subject);
            queuedemail.setToNoEventsOrValidation(s.receivers);
            return queuedemail;
          }
          
        }
      ]|
    with pkgname    := <TemplatePackage>
       ; pkgtname_domain := <DomainPackage>
       ; bstm_templates* := <map({\ 
                           x -> bstm |[ staticEnv.putTemplate("~x", x_value); ]| 
                           with  x_value := <concat-strings> [<TopLevelTemplateClassName> x,".class"]
                       \})> 
                       <bagof-AllTopLevelTemplateNamesJavaServlet;string-sort-annos>
       ; bstm_pages* := <map({\ 
                           x -> bstm |[ staticEnv.putTemplate("~x", x_value); ]| 
                           with  x_value := <concat-strings> [<PageClassName> x,".class"]
                       \})> 
                       <bagof-AllPageNames;string-sort-annos>
       ; bstm_emails* := <map({\ 
                           x -> bstm |[ emails.put("~x", x_value); ]| 
                           with  x_value := <concat-strings> [<EmailClassName> x,".class"]
                         \})> 
                         <bagof-AllEmailNames;string-sort-annos>
       ; bstm_refarg* := <map({\ 
                           x -> bstm |[ refargclasses.put("~x", x_value); ]| 
                           with  x_value := <concat-strings> [x,".class"]
                         \})> 
                         <bagof-RefArgClassName;string-sort-annos>
