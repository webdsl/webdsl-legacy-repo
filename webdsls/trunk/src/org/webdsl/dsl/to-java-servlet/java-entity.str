 /**

   Generate a JPA/Hibernate entity class from an entity declaration

 */

 module org/webdsl/dsl/to-java-servlet/java-entity

 imports
   libstrategolib
   libjava-front

 imports
   libwebdsl-front

strategies

   GenerateCodeJavaServlet = entity-to-java-entity; fail // use same entity generation as Seam back-end

strategies

   GenerateCodeJavaServlet = entity-to-java-servlet-entity-imports; fail
   
   entity-to-java-servlet-entity-imports :
     EntityNoSuper(x_Class, entbodydecs) ->
     <emit-java-code> compilation-unit|[
       package pkgname;
     
       import java.util.*;
       import javax.persistence.*;
       import pkgname.*;
       import java.io.Serializable;
       import utils.*;
       import java.io.PrintWriter;
       
       import org.webdsl.lang.Environment;
       
       @Partial
       public class x_Class
       {

       }
     ]|
     with  pkgname := <DomainPackage>
      
   entity-to-java-servlet-entity-imports :
    SessionEntity(x_ident, entbodydecs) ->
     <emit-java-code> compilation-unit|[
       package pkgname;
       
       import java.util.*;
       import javax.persistence.*;
       import pkgname.*;
       import java.io.Serializable;
       import utils.*;
       import java.io.PrintWriter;
       
       import org.webdsl.lang.Environment;
       
       @Partial
       public class x_Class
       {

       }
     ]|
     with  x_Class := <capitalize-string> x_ident
         ; pkgname := <DomainPackage>
      
        
   entity-to-java-servlet-entity-imports :
     Entity(x_Class, x_super, entbodydecs) ->
     <emit-java-code> compilation-unit|[
       package pkgname;
       
       import java.util.*;
       import javax.persistence.*;
       import pkgname.*;
       import java.io.Serializable;
       import utils.*;
       import java.io.PrintWriter;
       
       import org.webdsl.lang.Environment;
       
       @Partial
       public class x_Class
       {
 
       }
     ]|
     with  pkgname := <DomainPackage>
     
     
     
strategies

   GenerateCodeJavaServlet = entity-to-java-servlet-entity-functions; fail
   
   entity-to-java-servlet-entity-functions :
     EntityNoSuper(x_Class, entbodydecs) ->
     <emit-java-code> compilation-unit|[
       package pkgname;
       
       @Partial
       public class x_Class
       {
         ~*cbds*
       }
     ]|
     with  pkgname := <DomainPackage>
         ; funcs := <filter(is-function-cons)> entbodydecs
         ; cbds* := <grab-uniquely-named-functions;map(webdsl-function-to-java-servlet-function <+ debug(!"Could not generate for entity function: "))> funcs
      
   entity-to-java-servlet-entity-functions :
    SessionEntity(x_ident, entbodydecs) ->
    <emit-java-code> compilation-unit|[
       package pkgname;
       
       @Partial
       public class x_Class
       {
         ~*cbds*
       }
     ]|
     with  x_Class := <capitalize-string> x_ident
         ; pkgname := <DomainPackage>
         ; funcs := <filter(is-function-cons)> entbodydecs
         ; cbds* := <grab-uniquely-named-functions;map(webdsl-function-to-java-servlet-function <+ debug(!"Could not generate for entity function: "))> funcs
        
   entity-to-java-servlet-entity-functions :
     Entity(x_Class, x_super, entbodydecs) ->
     <emit-java-code> compilation-unit|[
       package pkgname;
       
       @Partial
       public class x_Class
       {
         ~*cbds*
       }
     ]|
     with  pkgname := <DomainPackage>
         ; funcs := <filter(is-function-cons)> entbodydecs
         ; cbds* := <grab-uniquely-named-functions;map(webdsl-function-to-java-servlet-function <+ debug(!"Could not generate for entity function: "))> funcs
           
  grab-uniquely-named-functions : // TODO shouldn't be necessary...
    funcs -> funcs2
    with  {| FuncNameUsed, ResultingFunctions:
            filter(grab-uniquely-named-functions-helper)
          ; funcs2 := <bagof-ResultingFunctions>
          |}
     
  grab-uniquely-named-functions-helper :
    fu@Function(name,_,_,_) -> fu
    where not(<FuncNameUsed> name)
        ; rules ( FuncNameUsed : name
                  ResultingFunctions :+= fu )
    
   