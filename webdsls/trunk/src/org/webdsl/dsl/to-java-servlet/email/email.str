module org/webdsl/dsl/to-java-servlet/email/email

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
    
rules
/*
  elem-to-java-servlet:
     tc@ThisCall("email", e1*) -> bstm |[ "email call"; ]|
     with  e2* := <map(expression-to-java-servlet)> e1*
  */   
  
  call-to-java-servlet :
    tc@ThisCall("email", [e@ThisCall(x_name, args)])->   //java |[ "email call" ]|
    //tc@TemplateCall(x_name, args,passign*, _) ->
    expr |[
    {|
      /*try {

      }
      catch(IllegalAccessException iae) {
        System.out.println("Problem in template servlet template lookup: "+iae.getMessage());
      }
      catch(InstantiationException ie) {
        System.out.println("Problem in template servlet template lookup: "+ie.getMessage());
      }*/
      Object[] x_args = { e* };
    |
      ((EmailServlet)(ps.getEmails().get("~x_name").newInstance())).render(ps, x_args, ++templatecounter, (HashMap<String,Class>)templates.clone(),(HashMap<String,Object>)variables.clone(),(HashMap<String,Object>)actionclasses.clone(), out)
    |}
    ]|
    with  e* := <map(expression-to-java-servlet)> args
        ; x_args := <newname> "args"

  elem-to-java-servlet:
    elem|[ to(e)[passign*]{} ]| -> []
//    with rules()

  elem-to-java-servlet:
    elem|[ subject(e)[passign*]{} ]| -> []

  elem-to-java-servlet:
    elem|[ from(e)[passign*]{} ]| -> []
    
  elem-to-java-servlet:
    elem|[ body(e)[passign*]{} ]| -> []