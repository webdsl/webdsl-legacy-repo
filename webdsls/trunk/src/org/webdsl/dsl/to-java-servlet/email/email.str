module org/webdsl/dsl/to-java-servlet/email/email

imports
  libstratego-lib
  libjava-front
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/- 
 
    
rules
/*
  elem-to-java-servlet:
     tc@ThisCall("email", e1*) -> bstm |[ "email call"; ]|
     with  e2* := <map(expression-to-java-servlet)> e1*
  */   
  
  call-to-java-servlet :
    tc@ThisCall("email", [e@ThisCall(x_name, args)])->   //java |[ "email call" ]|
    //tc@TemplateCall(x_name, args,passign*, _) ->
    expr |[
    {|
      Object[] x_args = { e* };
      EmailServlet x_temp = null;
      try
      { 
        x_temp = ((EmailServlet)ThreadLocalPage.get().getEmails().get("~x_name").newInstance());
      }
      catch(IllegalAccessException iae)
      { 
        System.out.println("Problem in email template lookup: " + iae.getMessage());
      }
      catch(InstantiationException ie)
      { 
        System.out.println("Problem in email template lookup: " + ie.getMessage());
      }
    |
      x_temp.render(x_args, new Environment(env), out)
    |}
    ]|
    with  e* := <map(expression-to-java-servlet)> args
        ; x_args := <newname> "args"
        ; x_temp := "emailservlet"

  elem-to-java-servlet:
    elem |[ to(e)[passign*]{} ]| -> 
    bstm |[ this.receivers = e1;  ]|
    with  e1 := <expression-to-java-servlet> e

  elem-to-java-servlet:
    elem |[ subject(e)[passign*]{} ]| -> 
    bstm |[ this.subject = e1;  ]|
    with  e1 := <expression-to-java-servlet> e

  elem-to-java-servlet:
    elem |[ from(e)[passign*]{} ]| -> 
    bstm |[ this.sender = e1;  ]|
    with  e1 := <expression-to-java-servlet> e
    
  elem-to-java-servlet:
    elem |[ cc(e)[passign*]{} ]| -> 
    bstm |[ this.cc = e1;  ]|
    with  e1 := <expression-to-java-servlet> e
    
  elem-to-java-servlet:
    elem |[ bcc(e)[passign*]{} ]| -> 
    bstm |[ this.bcc = e1;  ]|
    with  e1 := <expression-to-java-servlet> e
    
  elem-to-java-servlet:
    elem |[ replyTo(e)[passign*]{} ]| -> 
    bstm |[ this.replyTo = e1;  ]|
    with  e1 := <expression-to-java-servlet> e
    