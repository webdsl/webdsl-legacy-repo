module org/webdsl/dsl/to-java-servlet/email/email-template

imports 
  libstrategolib 
  libwebdsl-front
  
imports
  org/webdsl/dsl/to-java-servlet/to-java-servlet

rules

/* unused

  generate-java-servlet-email-template-partial =
    ? cbds
    ; where(ThisEmail)
    ; with(
        pkgname    := <BeanPackage>
      ; x_Page  := <ThisTemplateClassName>
      ; if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
      ; <emit-java-code>
          compilation-unit|[
            package pkgname;
            @Partial
            public class x_Page{
              ~*cbds*
            }
          ]|
      )
*/

rules
    
  GenerateCodeJavaServlet = where(ThisEmail);generate-java-servlet-email-template; fail

  generate-java-servlet-email-template :
    def |[ define mod* x(farg*) { elem* } ]| ->
    <emit-java-code-local> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.Map;
        
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        import org.apache.commons.lang.ArrayUtils;
        
        import utils.*;
        import org.webdsl.lang.Environment;
        
        import pkgname2.*;
        import pkgname3.*;

        @Partial
        @SuppressWarnings("unused")
        public class x_Page extends EmailServlet
        {
          private void storeArguments(Object[] args) {
            bstm1*
          } 

          @Partial
          protected void initialize() {}
          
          @Partial void initActions() {}

          @Partial
          private void initialize2() {}
             
          boolean validated=true;
      
          String uniqueid;
          
          Environment env;
          private java.util.Map<String, Object> templatecalls = new java.util.HashMap<String, Object>();

          PrintWriter out;
          private org.hibernate.Session hibSession;
          private HttpServletRequest request;
          private HttpServletResponse response;
          private boolean initialized = false;
          private utils.TemplateCall templateArg;
          public Map<String, utils.TemplateCall> withcallsmap = null;
          public Map<String, String> attrs = null;
          public Map<String, utils.TemplateCall> withcallsmapout = null;
          
          //templateContext not relevant for emails
          public java.util.Deque<String> templateContext = new java.util.ArrayDeque<String>();
          public String getTemplateContextString() { 
            return "email";
          }
          
          HttpSession session;
          
          @Partial
          protected void renderInternal()
          {
          
          }

          public void render(Object[] args, Environment env) { 
            if(!initialized)
            {
            
              initialized=true;
              
              bstm*
              this.request=ThreadLocalPage.get().getRequest();
              this.response=ThreadLocalPage.get().getResponse();
              if(request != null){
                this.session = request.getSession(true);
              }
              this.hibSession=ThreadLocalPage.get().getHibSession();
              this.env = env;
              storeArguments(args);
              this.uniqueid=Encoders.encodeTemplateId(x_pnamequoted,"",getTemplateContextString());
              
              initialize();
              initActions();
              initialize2();
            } 
         
            this.out = new java.io.PrintWriter(body);
            
            ThreadLocalOut.push(this.out);
            ThreadLocalEmailContext.set(this);
            renderInternal();
            ThreadLocalEmailContext.set(null);
            ThreadLocalOut.popChecked(this.out);

          }
        }
      ]|
    with pkgname    := <BeanPackage>
       ; pkgname2   := <DomainPackage>
       ; pkgname3   := <ActionPackage>
       ; x_Page  := <ThisTemplateClassName>
       ; x_pnamequoted := <double-quote> x_Page
       ; bstm* := <local-defined-templates-to-hashmap> elem*
       ; bstm1* := <formal-arguments-to-store-statements> farg*
                                      