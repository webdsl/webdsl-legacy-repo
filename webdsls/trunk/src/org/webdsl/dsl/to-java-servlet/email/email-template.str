module org/webdsl/dsl/to-java-servlet/email/email-template

imports 
  libstrategolib 
  libwebdsl-front
  
imports
  org/webdsl/dsl/to-java-servlet/to-java-servlet

rules
    
  GenerateCodeJavaServlet = where(ThisEmail);generate-java-servlet-email-template; fail

  generate-java-servlet-email-template :
    def@def |[ define mod* x(farg*) { elem* } ]| ->
    <emit-java-code-local> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.Map;
        
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        import org.apache.commons.lang3.ArrayUtils;
        
        import utils.*;
        import org.webdsl.lang.Environment;
        
        import pkgname2.*;
        import pkgname3.*;

        @Partial
        @SuppressWarnings("unused")
        public class x_Page extends EmailServlet
        {
          public String getTemplateClassName(){
            return "~x_Page";
          }	
        	
          private void storeArguments(Object[] args) {
            bstm1*
          } 
          
          ~*cbds_load-template-map-and-ref-arg-classes*
          public static void loadEmailAndTemplateMap(org.webdsl.lang.Environment staticEnv, Map<String, Class<?>> emails){
            emails.put("~x", x_Page.class);
            loadLiftedTemplateMap(staticEnv);
          }

          @Partial
          protected void initialize() {}
          
          @Partial void initActions() {}

          @Partial
          private void initialize2() {}
             
          boolean validated=true;
      
          Environment env;
    
          protected java.util.Map<String, Object> getTemplatecalls(){
            org.webdsl.logging.Logger.error("Internal error: getTemplatecalls() should not be called in email render context");
            return null;
          }
          protected boolean onlyPerformingRenderPhase(){
            return true;
          }

          PrintWriter out;
          private org.hibernate.Session hibSession;
          private HttpServletRequest request;
          private HttpServletResponse response;
          private boolean initialized = false;
          public Map<String, String> attrs = null;
          
          //templateContext not relevant for emails
          public java.util.Deque<String> templateContext = new java.util.ArrayDeque<String>();
          public String getTemplateContextString() { 
            return "email";
          }
          
          public String getElementsContext(){
            return "~x";
          }
          
          HttpSession session;
          
          @Partial
          protected void renderInternal()
          {
          
          }
          
          public void render(Object[] args, Environment env) { 
          	//cache ThreadLocalPage.get() lookup
            threadLocalPageCached = ThreadLocalPage.get();
        
            if(!initialized)
            {
            
              initialized=true;
              
              bstm_localtplredefs*
              this.request = threadLocalPageCached.getRequest();
              this.response = threadLocalPageCached.getResponse();
              //if(request != null){
              //  this.session = request.getSession(true);
              //}
              this.hibSession=HibernateUtil.getCurrentSession();
              this.env = env;
              storeArguments(args);
             
              initialize();
              initActions();
              initialize2();
            } 
         
            this.out = new java.io.PrintWriter(body);
            
            ThreadLocalOut.push(this.out);
            ThreadLocalEmailContext.set(this);
            renderInternal();
            ThreadLocalEmailContext.set(null);
            ThreadLocalOut.popChecked(this.out);

          }
        }
      ]|
    with pkgname    := <TemplatePackage>
       ; pkgname2   := <DomainPackage>
       ; pkgname3   := <ActionPackage>
       ; x_Page  := <ThisTemplateClassName>
       ; (bstm_localtplredefs*, bstm_localtplredefclasses*, bstm_refarginlocaldef*) := <local-defined-templates-to-hashmap> elem*
       ; bstm1* := <formal-arguments-to-store-statements> farg*
       ; cbds_load-template-map-and-ref-arg-classes* := <load-template-map-and-ref-arg-classes> (bstm_refarginlocaldef*, def, bstm_localtplredefclasses*)
                                      