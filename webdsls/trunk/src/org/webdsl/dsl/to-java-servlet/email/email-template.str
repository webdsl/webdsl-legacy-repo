module org/webdsl/dsl/to-java-servlet/email-template

imports 
  libstrategolib 
  libwebdsl-front


rules

  generate-java-servlet-email-template-partial =
    ? cbds
    ; where(ThisEmail)
    ; with(
        pkgname    := <BeanPackage>
      ; x_Page  := <ThisTemplateClassName>
      ; if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
      ; <emit-java-code>
          compilation-unit|[
            package pkgname;
            @Partial
            public class x_Page{
              ~*cbds*
            }
          ]|
      )


rules
    
  GenerateCodeJavaServlet = where(ThisEmail);generate-java-servlet-email-template; fail

  generate-java-servlet-email-template :
    def |[ define mod* x(farg*) { elem* } ]| ->
    <emit-java-code> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.Map;
        
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        
        import utils.*;
        import org.webdsl.lang.Environment;
        
        import pkgname2.*;
        import pkgname3.*;

        @Partial
        public class x_Page extends EmailServlet
        {
          
          private String sender = "";
          private String receivers = "";
          private String cc = "";
          private String bcc = "";
          private String replyTo = "";
          private String subject = "";
        
          private void storeArguments(Object[] args) {
            bstm1*
          } 

          @Partial
          protected void initialize() {}
          
          @Partial void initActions() {}

          @Partial
          private void initialize2() {}
             
          boolean validated=true;
      
          PageServlet ps;
          
          String uniqueid;
          
          Environment env;
          private java.util.Map<String, Object> templatecalls = new java.util.HashMap<String, Object>();

          PrintWriter out;
          private org.hibernate.Session hibSession;
          private HttpServletRequest request;
          private HttpServletResponse response;
          private boolean initialized = false;
          private utils.TemplateCall templateArg;
          public Map<String, utils.TemplateCall> withcallsmap = null;
          public Map<String, utils.TemplateCall> withcallsmapout = null;
          
          private int templatecounter;
          
          HttpSession session;
          
          @Partial
          private void renderInternal()
          {
          
          }

          public void render(final PageServlet ps, Object[] args, Environment env, java.io.PrintWriter out) { 
            if(!initialized)
            {
            
              initialized=true;
              
              bstm*
              this.ps=ps;
              this.templatecounter = 1; // not important for emails
              this.uniqueid=Encoders.encodeTemplateId(x_pnamequoted,args,templatecounter);
              this.request=ps.getRequest();
              this.response=ps.getResponse();
              this.session = request.getSession(true);
              this.hibSession=ps.getHibSession();
              this.env = env;
              storeArguments(args);
              
              initialize();
              initActions();
              initialize2();
            } 
         
            java.io.StringWriter s = new java.io.StringWriter();
            this.out = new java.io.PrintWriter(s);
            
            renderInternal();
            
            javax.mail.Session session = EmailServlet.getSession();
            
            javax.mail.internet.MimeMessage msg = new javax.mail.internet.MimeMessage(session);
       
            try{
                
                msg.setRecipients(javax.mail.Message.RecipientType.TO,
                        javax.mail.internet.InternetAddress.parse(this.receivers, false));
                msg.setRecipients(javax.mail.Message.RecipientType.CC,
                        javax.mail.internet.InternetAddress.parse(this.cc, false));
                msg.setRecipients(javax.mail.Message.RecipientType.BCC,
                        javax.mail.internet.InternetAddress.parse(this.bcc, false));
    
                msg.setSubject(this.subject);
          
                msg.setContent(s.toString(), "text/html");
                
                javax.mail.Address sender = javax.mail.internet.InternetAddress.parse(this.sender, false)[0];
                msg.setSender(sender);
                javax.mail.Address[] replyTo = javax.mail.internet.InternetAddress.parse(this.replyTo, false);
                msg.setReplyTo(replyTo);
    
                javax.mail.Transport transport = session.getTransport("smtps");
                try {
                    transport.connect(host, username, password);
                    transport.sendMessage(msg, msg.getAllRecipients());
                } finally {
                    transport.close();
                }
            }
            catch(javax.mail.internet.AddressException ae){System.out.println(ae);}
            catch(javax.mail.MessagingException me){System.out.println(me);}
            
          }
        }
          
      ]|
    with pkgname    := <BeanPackage>
       ; pkgname2   := <DomainPackage>
       ; pkgname3   := <ActionPackage>
       ; x_Page  := <ThisTemplateClassName>
       ; x_pnamequoted := <double-quote> x_Page
       ; bstm* := <local-defined-templates-to-hashmap> elem*
       ; bstm1* := <formal-arguments-to-store-statements> farg*

                                      