module org/webdsl/dsl/to-java-servlet/search/index-manager

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/-

strategies

  generate-code-java-servlet-once =
      <flatten-list;string-sort-annos>[<bagof-IndexedEntities>,<all-keys-SpellCheckFields; map(bagof-SpellCheckFields)>,<all-keys-AutoCompleteFields; map(bagof-AutoCompleteFields)>,<bagof-IndexDir>]
    ; disable-code-generation-if-cache-exists
    ; cached-generate(bagof-IndexedEntities; generate-java-servlet-indexmanager | "internal_IndexManager")
    ; fail


  generate-java-servlet-indexmanager :
    x_class* ->
    <emit-java-code-local> compilation-unit|[
      package webdsl.generated.search;

      import java.util.ArrayList;
      import java.util.List;
      import java.util.Arrays;
      import java.util.Collection;
      import java.util.Iterator;
      import java.io.File;
      import java.io.IOException;
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      import java.io.FileFilter;
      import java.io.FileNotFoundException;
      import org.apache.lucene.analysis.WhitespaceAnalyzer;
      import org.apache.lucene.document.Document;
      import org.apache.lucene.index.IndexWriterConfig;
      import org.apache.lucene.index.IndexWriterConfig.OpenMode;
      import org.apache.lucene.index.IndexReader;
      import org.apache.lucene.index.IndexWriter;
      import org.apache.lucene.index.Term;
      import org.apache.lucene.search.spell.SpellChecker;
      import org.apache.lucene.search.spell.Dictionary;
      import org.apache.lucene.search.spell.LuceneDictionary;
      import org.apache.lucene.search.BooleanQuery;
      import org.apache.lucene.search.Query;
      import org.apache.lucene.search.BooleanClause.Occur;
      import org.apache.lucene.search.TermQuery;
      import org.apache.lucene.search.MatchAllDocsQuery;
      import org.apache.lucene.store.Directory;
      import org.apache.lucene.store.FSDirectory;
      import org.apache.lucene.util.Version;
      import org.hibernate.search.FullTextSession;
      import org.hibernate.search.SearchFactory;
      import org.hibernate.search.reader.ReaderProvider;
      import org.hibernate.search.store.DirectoryProvider;
      import org.hibernate.search.store.FSDirectoryProvider;
      import org.webdsl.search.AutoCompleter;
      import org.webdsl.search.SearchSuggester;
      import org.webdsl.search.SearchHelper;
      import org.hibernate.Session;
      import org.hibernate.SessionFactory;

      import utils.*;
      import pkgname.*;

      import org.webdsl.lang.*;

      @SuppressWarnings("all")
      public class IndexManager {

        private static long lastFacetReaderRenewal;
        private static String currentNamespace = null;
        private static IndexReader currentSourceReader = null;
        private static IndexReader currentNamespaceReader = null;

        public static void main(String[] args) {
          reindex(Arrays.asList(args));
          System.exit(0);
        }

        static{
          //show the location the JVM makes of indexdir, relative location is in working directory, which varies depending on deployment type/platform
          org.webdsl.logging.Logger.info("Absolute path of indexdir: "+new File(indexDir()).getAbsolutePath());
          //keep track of last renewal of facet readers
          lastFacetReaderRenewal = 0;
        }

        private static void reindex(){
            reindex(new ArrayList<String>());
        }

        private static void reindex(List<String> entities) {

          log( "Starting reindexing of searchable data..." );
          long time = System.currentTimeMillis();

          bstm*

          indexSuggestions();

          time = System.currentTimeMillis() - time;
          log( "Reindexing finished in " + time + "ms total." );
        }

        public static void renewFacetIndexReaders(){
          bstm1*
          lastFacetReaderRenewal = System.currentTimeMillis();
        }

        public static void reindex(org.webdsl.WebDSLEntity ent){
          getFullTextSession().index(ent);
        }

        public static void removeFromIndex(org.webdsl.WebDSLEntity ent){
          getFullTextSession().purge(ent.getClass(), ent.getId());
        }

        private static boolean reindexEntityClass(Class<?> c){
            String entityName = c.getName().substring(c.getPackage().getName().length() + 1);
            log("---Reindexing: " + entityName + "---");
            long time = System.currentTimeMillis();
            org.hibernate.search.FullTextSession ftSession = getFullTextSession();
            try {
                ftSession.createIndexer( c )
                 .progressMonitor( new org.webdsl.search.IndexProgressMonitor( 2000, entityName ) )
                 .batchSizeToLoadObjects( 10 )
                 .threadsToLoadObjects( 4 )
                 .threadsForSubsequentFetching( 8 )
                 .threadsForIndexWriter( 3 )
                 .purgeAllOnStart( true )
                 .startAndWait();
             }
             catch(Exception ex){
                 org.webdsl.logging.Logger.error("Error during reindexing of entity: " + entityName ,ex);
                 return false;
             } finally {
                 if (ftSession != null) {
                     ftSession.close();
                     ftSession = null;
                 }
             }
             time = System.currentTimeMillis() - time;
             log("---Done in " + time + "ms.---");
             return true;
        }

        public static void indexSuggestions(){
            indexSuggestions(null);

        }
        public static void indexSuggestions(List<String> namespaces){
            bstm2*
        }

        private static boolean clearIndex(File path){
          try {
                if(path == null || !path.exists())
                    return true; //if path doesnt exist, then there is nothing to clear

                FSDirectory indexDir = new FSDirectoryProvider().getDirectory();
              IndexWriter writer = new IndexWriter(indexDir.open(path),
                        new IndexWriterConfig(Version.LUCENE_CURRENT,
                            new WhitespaceAnalyzer(Version.LUCENE_CURRENT)));
              writer.deleteAll();
              writer.close();
              return true;
          } catch (Exception ex) {
            org.webdsl.logging.Logger.error("Error while clearing index on location: " + path, ex);
            return false;
          }

        }

        public static void clearAutoCompleteIndex(String entity){
            bstm3*
        }

        public static void clearSpellCheckIndex(String entity){
            bstm4*
        }

        public static void clearAutoCompleteIndex(String entity, String[] fields){
            Class<?> entityClass = null;
            bstm5*
            if(entityClass == null)
                return;

            for (int c = 0; c < fields.length; c++){
                log("Clearing autocomplete index for entity: " + entity + ", field: " + fields[c]);
                File path = new File( indexDirAutoComplete(entityClass, fields[c]) );
                if (clearIndex(path))
                    log("Clearing autocomplete index successful");
                else
                    log("Clearing autocomplete index unsuccessful");
            }
        }

        public static void clearSpellCheckIndex(String entity, String[] fields){
            Class<?> entityClass = null;
            bstm6*
            if(entityClass == null)
                return;

            for (int c = 0; c < fields.length; c++){
                log( "Clearing spellcheck index for entity: " + entity + ", field: " + fields[c]);
                File path = new File( indexDirSpellCheck(entityClass, fields[c]) );
                if (clearIndex(path))
                    log( "Clearing spellcheck index successful");
                else
                    log( "Clearing spellcheck index unsuccessful");
            }
        }


        public static void optimizeIndex(){
            log( "Optimizing search index started.");
            getSearchFactory().optimize();
            log( "Optimizing search index finished succesfully.");
        }

        public static long getModifiedTimeIndex(Class<?> entityClass){
            try{
                DirectoryProvider[] directoryProviders = getSearchFactory().getDirectoryProviders( entityClass );
                if(directoryProviders == null || directoryProviders.length < 1)
                  return 0;

                Directory dir = directoryProviders[0].getDirectory();
                if( dir == null )
                  return 0;

                return IndexReader.lastModified( dir );

            } catch (Exception ex) {
                org.webdsl.logging.Logger.error("Could not retrieve modified timestamp of search index.",ex);
                return 0;
            }
        }

        public static String indexDir(){
            return e_indexdir;
        }

        public static String indexDirSpellCheck(Class<?> entityClass, String field){
            return indexDir() + "/SpellCheck/" + entityClass.getName() + "/" + field;
        }

        public static String indexDirSpellCheck(Class<?> entityClass, String field, String namespace){
            if(namespace == null || namespace.isEmpty())
                return indexDirSpellCheck(entityClass, field);

            try{
                return indexDir() + "/SpellCheck/" + entityClass.getName() + "." + java.net.URLEncoder.encode(namespace,"UTF-8") + "/" + field;
            } catch(java.io.UnsupportedEncodingException ex){
                org.webdsl.logging.Logger.error("Could not encode namespace property '" + namespace + "'",ex);
                //just try unencoded
                return indexDir() + "/SpellCheck/" + entityClass.getName() + "." + namespace + "/" + field;
            }
        }

        public static String indexDirAutoComplete(Class<?> entityClass, String field){
            return indexDir() + "/AutoComplete/" + entityClass.getName() + "/" + field;
        }

        public static String indexDirAutoComplete(Class<?> entityClass, String field, String namespace){
            if(namespace == null || namespace.isEmpty())
                return indexDirAutoComplete(entityClass, field);

            try{
                return indexDir() + "/AutoComplete/" + entityClass.getName() + "." + java.net.URLEncoder.encode(namespace,"UTF-8") + "/" + field;
            } catch(java.io.UnsupportedEncodingException ex){
                org.webdsl.logging.Logger.error("Could not encode namespace property '" + namespace + "'",ex);
                //just try unencoded
                return indexDir() + "/AutoComplete/" + entityClass.getName() + "." + namespace + "/" + field;
            }
        }

        public static String indexName(Class<?> entityClass) {
            bstm7*
            return null;
        }

        private static FullTextSession getFullTextSession(){
            return org.hibernate.search.Search.getFullTextSession(e_HibSession);
        }

        private static SearchFactory getSearchFactory(){
            return getFullTextSession().getSearchFactory();
        }


        public static void reindexSuggestions ( Class<?> entityClass, String[] completionFields, String[] spellcheckFields ){
            reindexSuggestions ( entityClass, completionFields, spellcheckFields, null );
        }

        //Reindex suggestions for a single entity. The spellcheck and autocompletion fields to be reindexed need to be specified.
        //A single namespace can be reindexed by specifying the namespace argument. If namespace is null or empty, all namespaces are reindexed
        //Reindexing a single namespace also triggers reindexing of suggestion index for the whole (i.e. non namespace aware) index
        @SuppressWarnings("deprecation")
        public synchronized static void reindexSuggestions ( Class<?> entityClass, String[] completionFields, String[] spellcheckFields, List<String> namespaces ){

            SearchFactory searchFactory = getSearchFactory();
            DirectoryProvider[] directoryProviders = searchFactory.getDirectoryProviders( entityClass );
            ReaderProvider readerProvider = searchFactory.getReaderProvider();
            IndexReader sourceReader = readerProvider.openReader( directoryProviders );
            Directory sourceDir = (Directory)directoryProviders[0].getDirectory();

            try {
                LuceneDictionary dict = null;
                Iterator<String> namespaceIt;
                long lastModified;

                try{
                    lastModified = IndexReader.lastModified(sourceDir);
                } catch (Exception ex) {
                    org.webdsl.logging.Logger.error("EXCEPTION",ex);
                    lastModified = 0;
                }

                if(namespaces == null || namespaces.isEmpty()) {
                    dict = new LuceneDictionary(sourceReader, SearchHelper.NAMESPACEFIELD);
                    namespaceIt = dict.getWordsIterator();
                } else {
                    namespaceIt = namespaces.iterator();
                }

                //Autocompletions for all namespaces and fields
                reindexAutoCompletion(sourceReader, entityClass, completionFields, null, lastModified);
                //Spellcheck for all namespaces and fields
                reindexSpellCheck(sourceReader, entityClass, spellcheckFields, null, lastModified);

                try {
                    String currentNamespace= "";
                    while( namespaceIt.hasNext() ){
                        currentNamespace = namespaceIt.next();
                        try{
                            reindexAutoCompletion(sourceReader, entityClass, completionFields, currentNamespace, lastModified);
                            reindexSpellCheck(sourceReader, entityClass, spellcheckFields, currentNamespace, lastModified);
                        } catch (Exception ex) {
                            org.webdsl.logging.Logger.error("Error during renewal of suggestion indexes:",ex);
                        } finally{
                            if(currentNamespaceReader != null){
                                try{
                                    currentNamespaceReader.close();
                                } catch (Exception ex){
                                    org.webdsl.logging.Logger.error("Could not close temporary namespace index reader:",ex);
                                }
                                currentNamespaceReader = null;
                            }
                        }
                    }
                } catch(Exception ex){
                    org.webdsl.logging.Logger.error("EXCEPTION",ex);
                }

                if(dict != null){
                  cleanupUnusedSuggestIndices(entityClass, dict.getWordsIterator());
                }
            } finally {
                readerProvider.closeReader( sourceReader );
            }
        }

        private static synchronized IndexReader getNamespaceFilteredReader(IndexReader sourceReader, String namespace){
            if(namespace == null || namespace.isEmpty()){
                return sourceReader;
            }

            if( currentSourceReader == sourceReader && currentNamespace == namespace && currentNamespaceReader != null){
                return currentNamespaceReader;
            }

            //create namespace reader
            currentSourceReader = sourceReader;
            currentNamespace = namespace;
            Query negatedNamespaceQuery = mustNotNamespaceQuery(currentNamespace);
            String tmpIndexPath = IndexManager.indexDir() + "/tmp";
            Directory tmpDir = null;
            IndexWriter nsIndexWriter = null;
            try{
                tmpDir = FSDirectory.open(new File( tmpIndexPath ));
                //first close previous instance
                if(currentNamespaceReader != null){
                    try{
                        currentNamespaceReader.close();
                    } catch (Exception ex){
                        org.webdsl.logging.Logger.error("EXCEPTION",ex);
                    }
                    currentNamespaceReader = null;
                }
                tmpDir = FSDirectory.open(new File( tmpIndexPath ));
                //writer in create mode, old docs are removed
                IndexWriterConfig writerCfg = new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB((int)IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);
                writerCfg.setOpenMode( OpenMode.CREATE );
                nsIndexWriter = new IndexWriter( tmpDir, writerCfg );
                //copy source dir
                nsIndexWriter.addIndexes( sourceReader );
                //remove all documents from namespaces other than currentNamespace
                nsIndexWriter.deleteDocuments(negatedNamespaceQuery);
                nsIndexWriter.optimize();
            } catch (Exception ex) {
                org.webdsl.logging.Logger.error("Error during renewal of suggestion indexes", ex);
            } finally{
                if( nsIndexWriter != null){
                    try{ nsIndexWriter.close(); } catch (Exception ex2) { org.webdsl.logging.Logger.error("EXCEPTION",ex2); }
                }
            }
            try{ currentNamespaceReader = IndexReader.open( tmpDir ); } catch (Exception ex) { org.webdsl.logging.Logger.error("EXCEPTION",ex); }
            try { tmpDir.close(); } catch (IOException ex) { org.webdsl.logging.Logger.error("EXCEPTION",ex); }
            return currentNamespaceReader;
        }

        private static void log (String message){
            org.webdsl.logging.Logger.info(message);
        }

        private static void reindexAutoCompletion(IndexReader sourceReader, Class<?> entityClass, String[] completionFields, String namespace, long lastModified) {
            Directory acDir = null;
            AutoCompleter ac = null;
            IndexReader rdr = null;
            String namespaceInfo = (namespace == null || namespace.isEmpty()) ? "" : ", namespace: " + namespace;
            String entityName = entityClass.getName().substring(entityClass.getPackage().getName().length() + 1);
            for ( String field  : completionFields ){
                log("Creating/updating autocomplete index [field: " + entityName + ">" + field + namespaceInfo + "]");
                try{
                    String acPath = IndexManager.indexDirAutoComplete(entityClass, field, namespace);
                    File f = new File ( acPath );
                    if( f.exists() ){
                        acDir = FSDirectory.open( f );
                        if ( IndexReader.lastModified(acDir) > lastModified ){
                            log( "no updates" );
                            continue;
                        }
                    } else {
                        acDir = FSDirectory.open( f );
                    }
                    rdr = getNamespaceFilteredReader(sourceReader, namespace);
                    if( rdr.numDocs() < 1){
                        log( "no updates");
                        continue;
                    }
                    ac = new AutoCompleter( acDir );
                    ac.indexDictionary( rdr, field );
                    SearchSuggester.forceAutoCompleterRenewal( acPath );
                } catch( Exception ex ){
                    org.webdsl.logging.Logger.error("EXCEPTION",ex);
                } finally {
                    if( ac != null ) {
                        try {
                            ac.close();
                        } catch (Exception ex) {
                            org.webdsl.logging.Logger.error("EXCEPTION",ex);
                        }
                        ac = null;
                    }

                    if( acDir != null ){
                        try {
                            acDir.close();
                        } catch (Exception ex) {
                            org.webdsl.logging.Logger.error("EXCEPTION",ex);
                        }
                        acDir = null;
                    }
                }
                log("Done");
              }
        }

        private static void reindexSpellCheck(IndexReader sourceReader, Class<?> entityClass, String[] spellCheckFields, String namespace, long lastModified) {

            Directory scDir = null;
            SpellChecker sc = null;
            IndexReader rdr = null;
            String namespaceInfo = (namespace == null || namespace.isEmpty()) ? ", namespace: " + namespace : "";
            String entityName = entityClass.getName().substring(entityClass.getPackage().getName().length() + 1);
            for ( String field  : spellCheckFields ){
                log("Creating/updating spellcheck index [field: " + entityName + ">" + field + namespaceInfo + "]");
                try{
                    String scPath = IndexManager.indexDirSpellCheck(entityClass, field, namespace);
                    File f = new File ( scPath );
                    if( f.exists() ){
                        scDir = FSDirectory.open( f );
                        if (IndexReader.lastModified( scDir ) > lastModified){
                            log( "no updates" );
                            continue;
                        }
                    } else {
                        scDir = FSDirectory.open( f );
                    }
                    rdr = getNamespaceFilteredReader(sourceReader, namespace);
                    if( rdr.numDocs() < 1){
                        log( "no updates");
                        continue;
                    }
                    sc = new SpellChecker( scDir );
                    Dictionary dictionary = new LuceneDictionary(rdr, field);
                    sc.indexDictionary( dictionary, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)), true ) ;
                    SearchSuggester.forceSpellCheckerRenewal( scPath );
                } catch( Exception ex ){
                    org.webdsl.logging.Logger.error("EXCEPTION",ex);
                } finally {
                    if( sc != null ) {
                        try {
                            sc.close();
                        } catch (Exception ex) {
                            org.webdsl.logging.Logger.error("EXCEPTION",ex);
                        }
                        sc = null;
                    }
                    if( scDir != null ){
                        try {
                            scDir.close();
                        } catch (Exception ex) {
                            org.webdsl.logging.Logger.error("EXCEPTION",ex);
                        }
                        scDir = null;
                    }
                }
                log( "Done " );
              }
        }


        private static Query mustNotNamespaceQuery( String namespace ){
            BooleanQuery q = new BooleanQuery();
            q.add(new MatchAllDocsQuery() , Occur.SHOULD); //needed to perform a must not query
            q.add(new TermQuery(new Term(SearchHelper.NAMESPACEFIELD, namespace)), Occur.MUST_NOT);
            return q;
        }

        private static void cleanupUnusedSuggestIndices(Class<?> entityClass, Iterator<String> namespacesIt){
            String className = entityClass.getName();
            final ArrayList<String> namespacesEncoded = new ArrayList<String>();
            // {indexdir}/{SpellCheck|AutoComplete}/{class.name.here}.{namespace}/field
            final Pattern pattern = Pattern.compile(className.replaceAll("\\.","\\\\.") + "\\.(.+)");

            String ns, nsEncoded;
            while(namespacesIt.hasNext()){
                ns = namespacesIt.next();
                try{
                    nsEncoded = java.net.URLEncoder.encode(ns,"UTF-8");
                } catch(java.io.UnsupportedEncodingException ex){
                    nsEncoded = ns;
                }
                if(!ns.isEmpty()){
                    namespacesEncoded.add(nsEncoded);
                }
            }

            FileFilter activeNamespaceDirFilter = new FileFilter() {
                public boolean accept(File file) {
                    Matcher m = pattern.matcher( file.getAbsolutePath() );
                    m.find();
                    try{
                        return (file.isDirectory() && !namespacesEncoded.contains(m.group(1)));
                    } catch (java.lang.IllegalStateException exception) {
                        return false;
                    }
                }
            };
            File dir;

            dir = new File(indexDir() + "/SpellCheck");
            if ( dir.exists() ){
                File[] files = dir.listFiles( activeNamespaceDirFilter );
                for (File file : files) {
                    String pathKey = file.getAbsolutePath().substring( file.getAbsolutePath().indexOf(indexDir()) );
                    SearchSuggester.forceSpellCheckerRenewal( pathKey );
                    log("Removing unused suggestion index: " + file.getAbsolutePath());
                    delete(file);
                }
            }

            dir = new File(indexDir() + "/AutoComplete");
            if ( dir.exists() ){
                File[] files = dir.listFiles( activeNamespaceDirFilter );
                for (File file : files) {
                    String pathKey = file.getAbsolutePath().substring( file.getAbsolutePath().indexOf(indexDir()) );
                    SearchSuggester.forceAutoCompleterRenewal( pathKey );
                    log("Removing unused suggestion index: " + file.getAbsolutePath());
                    delete(file);
                }
            }

        }

        private static void delete(File f) {
            if(f == null)
                return;
            if (f.isDirectory()) {
              for (File c : f.listFiles())
                delete(c);
            }
            if (!f.delete())
              org.webdsl.logging.Logger.error("EXCEPTION", new FileNotFoundException("Failed to delete file: " + f));

        }

 }
    ]|
    with pkgname := <DomainPackage>
        ; x_class_set := <make-set> x_class*
        ; <map(record-searchable-root-class; record-suggestion-fields)> x_class_set
                    //the highest searchable class in the inheritance tree triggers reindexing of its subclasses
        ; bstm*  := <map(class-to-reindex-entity-class <+ class-to-reindex-entity-only-explicit)> x_class_set
        ; bstm1* := <map(class-to-renew-facet-readers)> x_class_set
        ; bstm2* := <filter(class-to-index-suggestions); flatten-list> x_class_set
        ; bstm3* := <map(class-to-clear-autocomplete-index)> x_class_set
        ; bstm4* := <map(class-to-clear-spellcheck-index)> x_class_set
        ; bstm5* := <map(class-to-get-class-from-name-ac)> x_class_set
        ; bstm6* := <map(class-to-get-class-from-name-sc)> x_class_set
        ; bstm7* := <map(class-to-index-name)> x_class_set
        ; indexdir := <concat-strings>[<IndexDir>,"/",<AppName>]
        ; e_indexdir := expr|[ "~indexdir" ]|

  class-to-reindex-entity-class:
      x_name -> java|[if( entities == null || entities.isEmpty() ||  entities.contains("~x_name") || entities.contains("~x_Class")) { reindexEntityClass(x_Class.class); }]|
      with  x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_name]
          ; x_index := <get-searchable-root-class-fq> x_name
      where <?x_index> x_Class

  class-to-reindex-entity-only-explicit:
      x_name -> java|[if(!(entities == null || entities.isEmpty()) && (entities.contains("~x_name") || entities.contains("~x_Class"))) { reindexEntityClass(x_Class.class); }]|
      with x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_name]


  class-to-renew-facet-readers:
      x_name ->
      java|[
          if ( getModifiedTimeIndex(x_name.class) > lastFacetReaderRenewal ) {
              x_searcher.renewBoboReaders();
          }
      ]|
      with
          x_searcher := <concat-strings>[x_name,"Searcher"]

  record-searchable-root-class:
      x_name -> x_name
      with index_name := <get-searchable-root-class-fq> x_name
         ; rules(SearchableRootClassFQ: x_name -> index_name)

  record-suggestion-fields:
    x_name -> x_name
    with  x_index := <SearchableRootClassFQ> x_name //suggestions are put in the suggestion index of the highest searchable class in the inheritance tree
        ; scfields := <ClassToSpellCheckFields> x_name
        ; acfields := <ClassToAutoCompleteFields> x_name
        ; <map( \fl -> fl with rules (SpellCheckFields:+    x_index -> fl)\)> scfields
        ; <map( \fl -> fl with rules (AutoCompleteFields:+  x_index -> fl)\)> acfields

  class-to-index-suggestions:
      x_name -> result
        where x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_name]
        ; scfields := <bagof-SpellCheckFields;   uniq> x_Class
        ; acfields := <bagof-AutoCompleteFields; uniq> x_Class
        ; not (and(<?[]>acfields,<?[]>scfields))
        ; e_spellcheckfield* := <map(\fieldname -> expr |[ "~fieldname" ]| \)> scfields
        ; e_autocompletefield* := <map(\fieldname -> expr |[ "~fieldname" ]| \)> acfields
        ; result := java |[ reindexSuggestions(x_Class.class, new String[]{ e_autocompletefield* }, new String[]{ e_spellcheckfield* }, namespaces);]|



  class-to-clear-autocomplete-index:
    x_name -> result
    with acfields := <ClassToAutoCompleteFields> x_name
        ; e_autocompletefield* := <map(\fieldname -> expr |[ "~fieldname" ]| \)> acfields
        ; if (<?[]>e_autocompletefield*)
          then result := []
          else result := java |[ if (entity == "~x_name"){clearAutoCompleteIndex(entity, new String[]{ e_autocompletefield* }); } ]|
          end

  class-to-clear-spellcheck-index:
    x_name -> result
    with scfields := <ClassToSpellCheckFields> x_name
        ; e_spellcheckfield* := <map(\fieldname -> expr |[ "~fieldname" ]| \)> scfields
        ; if (<?[]>e_spellcheckfield*)
          then result := []
          else result := java |[ if (entity == "~x_name"){clearSpellCheckIndex(entity, new String[]{ e_spellcheckfield* }); } ]|
          end

  class-to-get-class-from-name-ac:
      x_name -> result
      with acfields := <ClassToAutoCompleteFields> x_name
          ; x_Class := <SearchableRootClassFQ> x_name
        ; if (<?[]> acfields)
          then result := []
          else result := java |[ if (entity == "~x_name"){entityClass = x_Class.class;} ]|
          end

  class-to-get-class-from-name-sc:
      x_name -> result
      with scfields := <ClassToSpellCheckFields> x_name
          ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_name]
        ; if (<?[]> scfields)
          then result := []
          else result := java |[ if (entity == "~x_name"){entityClass = x_Class.class;} ]|
          end

  class-to-index-name:
      x_name -> result
      where
         x_indexname := <get-searchable-root-class-fq> x_name
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_name]
       ; result := java |[ if (x_Class.class.equals(entityClass)){return "~x_indexname";} ]|

  get-searchable-root-class-fq:
      x_name -> indexName
      where indexName := <is-string; EntityFromName; get-searchable-root-class-fq> x_name


  get-searchable-root-class-fq:
      Entity(name, super, _) -> indexName
      where
      indexed_entities := <bagof-IndexedEntities>
      ; if (<fetch(?super)> indexed_entities)
        then indexName := <EntityFromName; get-searchable-root-class-fq> super
        else indexName := <concat-strings> [<DomainPackage; pp-java5-to-string>, ".", name]
        end

  get-searchable-root-class-fq:
      EntityNoSuper(name, _) -> indexName
      where
          indexName := <concat-strings> [<DomainPackage; pp-java5-to-string>, ".", name]