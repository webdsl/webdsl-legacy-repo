module org/webdsl/dsl/to-java-servlet/search/search-query

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/-

strategies

  GenerateCodeJavaServlet = generate-java-search-functions; fail
  GenerateCodeJavaServlet = generate-java-searchquery-class ; fail


  generate-java-searchquery-class :
  	ent -> <emit-java-code-local> compilation-unit |[
  	package pkgname;
  	
  	import utils.*;
  	import java.io.File;
  	import java.util.Date;
  	import java.util.ArrayList;
	import java.util.List;
  	import org.webdsl.search.SearchSuggester;
  	import org.apache.lucene.store.Directory;
  	import org.hibernate.search.FullTextSession;
  	import org.hibernate.search.store.FSDirectoryProvider;
  	import org.apache.lucene.search.SortField;
  	import org.webdsl.search.SearchNamespaceHelper;
  	
	public class x_class#SearchQuery extends org.webdsl.search.SearchQuery<x_class> {
		
		public x_class#SearchQuery (){
			entityClass = x_Class.class;
			searchFields = new String[]{ e_sf* };
			untokenizedFields = new String[]{ e_utf* };
			mltSearchFields = new String[]{ e_mltsf* };
			fullTextSession = org.hibernate.search.Search.getFullTextSession(e_HibSession);
			analyzer = fullTextSession.getSearchFactory().getAnalyzer(entityClass);
		}

		public static ArrayList<String> spellSuggest(String toSuggestOn, List<String> fields, float accuracy, int noSug){return spellSuggest(toSuggestOn, "", fields, accuracy, noSug);}
		public static ArrayList<String> spellSuggest(String toSuggestOn, String field, float accuracy, int noSug){return spellSuggest(toSuggestOn, "", field, accuracy, noSug);}		
		public static ArrayList<String> spellSuggest(String toSuggestOn, String namespace, List<String> fields, float accuracy, int noSug){
			String baseDir = utils.IndexManager.indexDirSpellCheck(x_Class.class, "", namespace);
			return SearchSuggester.findSpellSuggestions(x_Class.class, baseDir, getNamespaceIndex(namespace), fields, noSug, accuracy, true, toSuggestOn);
		}	
		public static ArrayList<String> spellSuggest(String toSuggestOn, String namespace, String field, float accuracy, int noSug){
			String baseDir = utils.IndexManager.indexDirSpellCheck(x_Class.class, "", namespace);
			return SearchSuggester.findSpellSuggestionsForField(x_Class.class, baseDir, getNamespaceIndex(namespace), field, noSug, accuracy, true, toSuggestOn);
		}
		
		private static Integer getNamespaceIndex(String namespace){
			return namespace.isEmpty() ? null : SearchNamespaceHelper.namespaceIDToIndex(x_Class.class.toString(), namespace, false);
		}
		
		public static ArrayList<String> autoCompleteSuggest(String toSuggestOn, List<String> fields, int noSug){return autoCompleteSuggest(toSuggestOn, "", fields, noSug);}
		public static ArrayList<String> autoCompleteSuggest(String toSuggestOn, String field, int noSug){return autoCompleteSuggest(toSuggestOn, "", field, noSug);}
		public static ArrayList<String> autoCompleteSuggest(String toSuggestOn, String namespace, List<String> fields, int noSug){
			String baseDir = utils.IndexManager.indexDirAutoComplete(x_Class.class, "", namespace);
			return SearchSuggester.findAutoCompletions(x_Class.class, baseDir, fields, noSug, toSuggestOn);
		}		
		public static ArrayList<String> autoCompleteSuggest(String toSuggestOn, String namespace, String field, int noSug){
			String baseDir = utils.IndexManager.indexDirAutoComplete(x_Class.class, "", namespace);
			return SearchSuggester.findAutoCompletionsForField(x_Class.class, baseDir, field, noSug, toSuggestOn);			
		}
				
		protected int directoryProviderIndexForNamespace(){
			return SearchNamespaceHelper.namespaceIDToIndex(entityClass.getName(), namespaceConstraint, false);
		}
		
		public Class<?> fieldType(String field){			
			bstm*
			return String.class;
		}
		
		protected FullTextSession getFullTextSession() {
		if(fullTextSession == null) {
			fullTextSession = org.hibernate.search.Search.getFullTextSession(e_HibSession);
			updateFullTextQuery = true;
		}
		return fullTextSession;
		}
	}	
  	]|
    where (x_class, _) := <get-entity-def> ent
       ; x_props := <get-anno(?IndexedAnno(<id>,_,_,_,_))> ent
       ; x_propsUntokenized := <get-anno(?IndexedAnno(_,<id>,_,_,_))> ent
       ; x_javaTypeNames := <get-anno(?IndexedAnno(_,_,<id>,_,_))> ent
    with e_sf* := <map(\name -> expr |[ "~name" ]| \)> x_props
       ; e_utf* := <map(\name -> expr |[ "~name" ]| \)> x_propsUntokenized
       ; e_mltsf* := <diff>(e_sf*,e_utf*)
       ; pkgname := <DomainPackage>
       ; bstm* := <zip(field-to-java-type-name-condition)> (x_propsUntokenized, x_javaTypeNames)
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]
         
  field-to-java-type-name-condition:
  	(fieldName, sortType) -> java:stm |[ if(field.equals("~fieldName")) return e_tp;]|
  	where e_tp := ExprName(AmbName(Id(sortType)), Id("class"))

  generate-java-search-functions:
    ent -> <emit-java-code-local> compilation-unit |[
  
      package pkgname;
      
      @Partial
      public class x_class {
      
        public static java.util.List<x_Class> x#_(String searchQuery)  {
          return x#_(searchQuery, 1000, 0);
        }
        public static java.util.List<x_Class> x#_(String searchQuery, int limit)  {
          return x#_(searchQuery, limit, 0);
        }
        public static java.util.List<x_Class> x#_(String searchQuery, int limit, int offset)  {
           return new x_Class#SearchQuery().query(searchQuery).firstResult(offset).maxResults(limit).list();
        }
      }
    ]|
    where (
        (x_class, _) := <get-entity-def> ent
      ; x_props := <get-anno(?IndexedAnno(<id>,_,_,_,_))> ent
    )
    with x := <concat-strings> ["_static_", "search", x_class]
       ; pkgname := <DomainPackage>
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]
