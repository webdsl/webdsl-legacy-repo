module org/webdsl/dsl/to-java-servlet/template-action-inputs

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  
rules
  filter-elements-for-java-servlet-handling =
    topdown(try(remove-all(?Define(_, _, _, _, _))))

rules

  GenerateCodeJavaServlet = where(not(ThisEmail));actions-inputs-java-servlet-template; fail
  
  actions-inputs-java-servlet-template =
    ?def |[ define mod* x(farg*)  req*  { elem* } ]|
    ; where (    
      bstm1* := <  filter-elements-for-java-servlet-handling
                 ; map-handle-actions-input-to-java-servlet> elem*
      ; not(bstm1* := []))
    ; with(
      <generate-java-servlet-template-partial> 
        java |[ 
            @Partial
            private void storeInputsInternal() {
              String ident = "";
              String forelementcounter = "0";
              int fallbackcounter = 0;              
              boolean inForLoop=false;
              int forLoopCounter = 0;
                
              bstm1*          
            }
        ]|)
 
//coming from elements to xhtml
strategies // lists of elements

  map-handle-actions-input-to-java-servlet= //alltd because only interested in control flow
    collect-om(handle-actions-input-to-java-servlet)
    ; concat-with-sublists //accept both bstm and bstm*
    
rules // copy from input string to variable in template class, eg see /types/int.str
  
  input-assignment-to-java-servlet(|x_temp) :
    Var(x) -> bstm* |[ 
      x = x_temp; 
    ]|    

  input-assignment-to-java-servlet(|x_temp) :
    FieldAccess(e, x) -> bstm* |[ 
      e1.setupForPropertyEvents(hibSession,out).set#x(x_temp); 
    ]|
    with  e1 := <expression-to-java-servlet> e
    
rules

  wrap-input-java-code(|passign*):
    bstm* ->
    <for-loop-counter-wrap-code> 
    <catch-validation-exception-wrap-code(|passign*)> 
    bstm*
    
  wrap-input-render-java-code:
    bstm* ->
    <for-loop-counter-wrap-code> 
    <wrap-common-context-code>
    bstm*

  wrap-action-render-java-code:
    bstm* ->
    <for-loop-counter-wrap-code> 
    <wrap-common-context-code>
    bstm*

  /**
   *  uses the validation contexts of labels and input components to connect messages to components during rendering
   *  see data-validation/validation-context.str
   */
  catch-validation-exception-wrap-code(|passign*):
    bstm* ->
    bstm* |[
      //String x1 = ident+"~x";
      try {
        bstm*
      }
      catch(utils.ValidationException ve){
        ThreadLocalPage.get().getValidationExceptions().add(ve.setName(ThreadLocalPage.get().getValidationContext()));
        ThreadLocalPage.get().setValidated(false);  
        // leave the validation scope of the input
        ThreadLocalPage.get().leaveValidationContext();              
      }
      catch(utils.MultipleValidationExceptions ve){
        for(utils.ValidationException vex : ve.getValidationExceptions()){
          ThreadLocalPage.get().getValidationExceptions().add(vex.setName(ThreadLocalPage.get().getValidationContext()));
        }
        ThreadLocalPage.get().setValidated(false); 
        // leave the validation scope of the input 
        ThreadLocalPage.get().leaveValidationContext();              
      }
    ]|
    //with  //<fetch(?InputErrorMessageBinding(x))> passign*
          //x1 := <newname> "inputerrorbindingname" // assumes also wrapped in for-loop-counter-wrap-code