module org/webdsl/dsl/to-java-servlet/elements-to-java-servlet

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
    
//page elements    
    
rules
  elem-to-java-servlet :
    TemplateCall("dummy", [], elems) -> <elems-to-java-servlet> elems
    
rules // block

  // @obsolete; use block{ ... } instead of div{ ... }
  elem-to-java-servlet :
    TemplateCall("div", [String(x)], elems) ->
    bstm* |[ 
    out.println("<div class=\""+"~x"+"\">");
    bstm*
    out.println("</div>");
    ]|
    with bstm* := <elems-to-java-servlet> elems 

  elem-to-java-servlet :
    TemplateCall("block", [], elems) ->
    bstm* |[ 
    out.println("<div class=\"block\">");
    bstm*
    out.println("</div>");
    ]|
    with bstm* := <elems-to-java-servlet> elems 

  elem-to-java-servlet :
    TemplateCall("block", [String(x)], elems) ->
    bstm* |[ 
    out.println("<div class=\"block\" id=\""+"~x"+"\">");
    bstm*
    out.println("</div>");
    ]|
    with bstm* := <elems-to-java-servlet> elems 
    
  elem-to-java-servlet :
    TemplateCall("block", [String(x), String("")], elems) ->
    bstm* |[ 
    out.println("<div class=\"block\" id=\""+"~x"+"\">");
    bstm*
    out.println("</div>");
    ]|
    with bstm* := <elems-to-java-servlet> elems 
    //%>
   // <div class="block" id="<%= x %>"><%= <elems-to-xhtml> elems ::*%></div>
   // <%
    
  elem-to-java-servlet :
    TemplateCall("block", [String(x), String(y)], elems) ->
    bstm* |[ 
    out.println("<div class=\""+"~y"+" block\" id=\""+"~x"+"\">");
    bstm*
    out.println("</div>");
    ]|  
     where not( <?""> x ) ; not( <?""> y )
     with bstm* := <elems-to-java-servlet> elems 
   // %>
   // <div class="<%= y %> block" id="<%= x %>"><%= <elems-to-xhtml> elems ::*%></div>
   /// <%
   
    
  elem-to-java-servlet :
    TemplateCall("block", [String(""), String(y)], elems) ->
    bstm* |[ 
    out.println("<div class=\""+"~y"+" block\" >");
    bstm*
    out.println("</div>");
    ]|
    with bstm* := <elems-to-java-servlet> elems 
   // %>
   // <div class="<%= y %> block"><%= <elems-to-xhtml> elems ::*%></div>
   // <%

rules // embedding expressions in presentation

  //arg-to-value-string-java-servlet =
  //  arg-string-to-value-string
  //  <+ arg-to-el-string

  arg-to-value-string-java-servlet :
    Cast(x, s) -> <arg-to-value-string-java-servlet> x

  arg-to-value-string-java-servlet :
    String(x) -> e |[ "~x" ]|

  arg-to-value-string-java-servlet :
    Bool(x) -> e |[ String.valueOf(x) ]|
    
  arg-to-value-string-java-servlet :
    Int(x) -> e |[ String.valueOf(x) ]|

/*
  arg-to-value-string-java-servlet :
    e -> <concat-strings>["\"+", x, "+\""]
    where <not(?Add(_, _))> := e
        ; x := <arg-to-value-string-java-servlet> e
*/
  arg-to-value-string-java-servlet :
    Add(e1, e2) -> e |[ e3 + e4 ]|
    where e3 := <arg-to-value-string-java-servlet> e1
        ; e4 := <arg-to-value-string-java-servlet> e2

/*
  arg-to-value-string-java-servlet :
    Var(x) -> x
      where <IsSessionVariable> x

  arg-to-value-string-java-servlet :
    Var(x) -> x
      where <IsGlobalFunction> x
*/
/*
  arg-to-value-string-java-servlet :
    Cast(x, s) -> <arg-to-value-string-java-servlet> x
*/
  arg-to-value-string-java-servlet :
    Var(x) -> e |[ x ]|
    where InFieldAccess
/*       where not(<IsSessionVariable> x)
           ; not(<IsGlobalFunction> x)
*/

  arg-to-value-string-java-servlet :
    Var(x) -> e |[ String.valueOf(x) ]|
    where not(InFieldAccess)

  arg-to-value-string-java-servlet :
    FieldAccess(e, x) -> e |[ String.valueOf(e1.get#x()) ]|//<concat-strings>[x,".",f]
    where not(InFieldAccess)
        ; {| InFieldAccess:
             rules (InFieldAccess := True() )
             ; e1 := <arg-to-value-string-java-servlet> e
          |}
          
  arg-to-value-string-java-servlet :
    FieldAccess(e, x) -> e |[ e1.get#x() ]|//<concat-strings>[x,".",f]
    where InFieldAccess
        ; e1 := <arg-to-value-string-java-servlet> e
          
/* @todo seems hacky
  arg-to-value-string-java-servlet :
    FieldAccess(e, "length") -> e |[ e1.x() ]|
    where e1 := <arg-to-value-string-java-servlet> e
        ; x := <concat-strings>[x, "Length"]
*/
/*
  arg-to-value-string-java-servlet : // Does this actually work?
    Call(e, f, args1) -> <concat-strings>[<arg-to-el> e, ".", f, "(", args2, ")"]
    where args2 := <map(arg-to-el); separate-by(|","); concat-strings> args1
*/

strategies // title

  elem-to-java-servlet :
    TemplateCall("title", _, elems) ->
    bstm |[ 
    {
      java.io.StringWriter s = new java.io.StringWriter();
      java.io.PrintWriter out = new java.io.PrintWriter(s);
      bstm*
      s.flush();
      ps.setPageTitle(s.toString());
    } 
    ]|
    with bstm* := <elems-to-java-servlet> elems
    /*
    %>
  <ui:define name="title">
    <%= <elems-to-xhtml> elems::* %>
  </ui:define>
  <%
  */
/*
strategies // style

  get-styles = collect(get-style); concat
  
  get-style :
    TemplateCall("style", [], [Text(stylesheet)]) ->
    %>
      <link href="<%= <AppRoot> %>/stylesheets/<%= stylesheet %>" rel="stylesheet" type="text/css" />
    <%

  elem-to-java-servlet :
    TemplateCall("style", _, _) -> []
*/
rules // text

  elem-to-java-servlet :
    Text(val) -> bstm |[ out.println(utils.HTMLFilter.filter("~val")); ]|

rules // text

  // convert an expression to text (string value of the expression)

  elem-to-java-servlet :
    TemplateCall("text", [arg], []) -> bstm |[ out.println(utils.HTMLFilter.filter(e)); ]|
    with  e := <arg-to-value-string-java-servlet> arg

/*
  elem-to-java-servlet :
    TemplateCall("text", [e], []) ->
    %> <h:outputText value="<%= <ConditionExpressionToEL> (<ThisPage>, e) %>"/> <%
*/
rules // spacers

  elem-to-java-servlet :
    TemplateCall("spacer", [], []) -> bstm |[ out.println("<hr />"); ]|
    /*
    %> <rich:spacer id="<%= spacer-id %>" /> <%
    where spacer-id := <newname> "spacer"
    */
  elem-to-java-servlet :
    TemplateCall("horizontalspacer", [], []) -> bstm |[ out.println("<hr />"); ]|

rules // images

  elem-to-java-servlet :
    TemplateCall("image",[e],[]) -> 
    bstm |[ out.println("<img src=\""+e1+"\" />"); ]|
    with  e1 := <arg-to-value-string-java-servlet> e

rules // lists

  elem-to-java-servlet :
    TemplateCall("list", [], elems) ->
    bstm* |[ 
      out.println("<ul>");
      bstm*
      out.println("</ul>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems

  elem-to-java-servlet :
    TemplateCall("listitem", [], elems) ->
    bstm* |[ 
      out.println("<li>");
      bstm*
      out.println("</li>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems

rules // sections and headers

  elem-to-java-servlet :
    TemplateCall("header", [], elems) ->
    bstm* |[ 
    out.println("<"+"~tag"+">");
    bstm*
    out.println("</"+"~tag"+">");
    ]|
    where not(DataTable) ; not(TableScope)
    with  n := <SectionDepth <+ !1>
        ; tag := <concat-strings>["h", <int-to-string> n]
        ; bstm* := <elems-to-java-servlet> elems
    
  elem-to-java-servlet :
    TemplateCall("section", [], elems) ->
    bstm* |[ 
    out.println("<div class=\""+"~sectionlevel"+"\">");
    bstm*
    out.println("</div>");
    ]|
    with  {| SectionDepth
           : rules( SectionDepth := <(SectionDepth <+ !0); inc> )
           ; sectionlevel := <concat-strings>["section", <SectionDepth; int-to-string>]
           ; bstm* := <elems-to-java-servlet> elems 
           |}
 
  elem-to-java-servlet :
    TemplateCall("par", [], elems) ->
    bstm* |[ 
    out.println("<p>");
    bstm*
    out.println("</p>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems
    
  elem-to-java-servlet :
    TemplateCall("container", [], elems) ->
    bstm* |[ 
    out.println("<span>");
    bstm*
    out.println("</span>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems

rules // tables

  elem-to-java-servlet :
    TemplateCall("table", [], elems) ->
    bstm* |[ 
    out.println("<table>");
    bstm*
    out.println("</table>");
    ]|
    with  {| TableScope
           : rules ( TableScope := 1 )
           ; bstm* := <elems-to-java-servlet> elems
           |}

  elem-to-java-servlet :
    TemplateCall("header", [], elems) ->
    bstm* |[ 
    out.println("<tr>");
    bstm*
    out.println("</tr>");
    ]|
    where TableScope
    with  bstm* := <map(elem-to-java-servlet);map({\ bstms -> <concat-with-sublists> bstm* |[ out.println("<th>"); bstm1* out.println("</th>"); ]| 
                                                     with if <is-list> bstms then bstm1* := bstms else bstm1* := [bstms] end\});concat-with-sublists> elems
// elem-to-java-servlet gives either a list of or one bstm

  elem-to-java-servlet :
    TemplateCall("row", [], elems) ->
    bstm* |[ 
    out.println("<tr>");
    bstm*
    out.println("</tr>");
    ]|
    where TableScope
    with  bstm* := <map(elem-to-java-servlet);map({\ bstms -> <concat-with-sublists> bstm* |[ out.println("<td>"); bstm1* out.println("</td>"); ]| 
                                                     with if <is-list> bstms then bstm1* := bstms else bstm1* := [bstms] end\});concat-with-sublists> elems



//for moved to control-flow-to-java-servlet

//select moved to types/collection

//if moved to control-flow-to-java-servlet


//templatecalls moved to control-flow-to-java-servlet

rules // links

  // link to a url, maybe constant, or obtained from an entity field
        
  elem-to-java-servlet :
    TemplateCall("navigate", [ThisCall("url",[e])], elems) ->
    bstm* |[ 
    out.println("<a href=\""+e1+"\">");
    bstm*
    out.println("</a>");
    ]|
    with  e1 := <arg-to-value-string-java-servlet> e
        ; bstm* := <elems-to-java-servlet> elems

  elem-to-java-servlet :
    TemplateCall("navigate",[call@ThisCall(p,args)],elems) ->
    bstm* |[ 
    out.println("<a href=\""+e_url+"\">");
    bstm*
    out.println("</a>");
    ]|
    /*%> <h:outputLink value="<%= url %>"><%=
        <elems-to-xhtml> elems ::*
    %></h:outputLink> <%
    */
    where <IsPage> p
    with  e_url := <page-thiscall-to-url-string-java-servlet> call
        ; bstm* := <elems-to-java-servlet> elems

  elem-to-java-servlet :
    TemplateCall("navigatebutton",[call@ThisCall(p,args), e],[]) ->
    bstm* |[
    out.println("<input type=\"button\" onclick=\"window.location = '"+e_url+"'\"");
    out.println("value=\""+e1+"\"");
    out.println(" />");
    ]|
    //%> <input type="button" onclick="location = '<%= url %>';" value="<%= txt %>"/> <%
    where <IsPage> p
    with  e_url := <page-thiscall-to-url-string-java-servlet> call
        ; e1 := <arg-to-value-string-java-servlet> e
        
  page-thiscall-to-url-string-java-servlet :
    ThisCall(p,args) -> e |[ e_url ]|
    with  def |[ define mod* x(farg*) { elem* } ]| := <TemplateSignature> (p, <map(type-of)> args)
        ; params := <zip(bind-param-java-servlet)> (farg*, args)
        ; e_url := <page-call-to-url-java-servlet> (p, params)
        
  bind-param-java-servlet :
    (Arg(x, srt), e) -> (x, el)
    where <defined-java-type> srt
    with  el := <arg-to-value-string-java-servlet> FieldAccess(e, "id")
 
  bind-param-java-servlet :
    (Arg(x, srt), e) -> (x, el)
    where <builtin-java-type> srt
    with  el := <arg-to-value-string-java-servlet> e

  page-call-to-url-java-servlet :
    (fn, []) -> e |[ "~s" ]| 
    with  s := <concat-strings> [<AppRoot>, "/", fn]

  page-call-to-url-java-servlet :
    (fn, params) -> e |[ "~s" + e1 ]| 
    where not([] := params)
    with  s  := <concat-strings> [<AppRoot>, "/", fn, "/"]
        ; e1 := <map(param-to-request-param-java-servlet); combine-params-to-exp> params

  combine-params-to-exp :
    [e] -> e |[ e ]|
  
  combine-params-to-exp :
    [e|e*] -> e |[ e + "/" + e1 ]|
    with  e1 := <combine-params-to-exp> e*

  param-to-request-param-java-servlet :
    (param, value) -> value
    //    (param, value) -> <concat-strings> [param, "=", value]

rules // forms

  elem-to-java-servlet : 
    tc@TemplateCall("form", [], elems) ->
    <for-loop-counter-wrap-code> 
    bstm* |[
      {
        ident += "~formident"+uniqueid;
        String form_ident = ident; //just for actionLink javascript code    
        if(ps.getRequest().getParameter(ident)!=null)
        {
          inSubmittedForm = true; // ok, because no nested forms, otherwise need to count just like inForLoop variable
        }
        
        out.println("<form name=\""+ident+"\" action=\""+"/"+AppInfo.getAppName()+"/"+ps.getPageName()+"\" method=\"POST\">");
        out.println("<input type=\"hidden\" name=\""+ident+"\" value=\""+ident+"\" />");
        out.println(ps.getHiddenParams()); // page arguments
        bstm*
        out.println("</form>");

        inSubmittedForm = false;
      }
    ]|
    with  bstm* := <elems-to-java-servlet> elems
        ; formident := <get-formnumber> tc
   
  handle-actions-to-java-servlet: 
    tc@TemplateCall("form", [], elems) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
        ident += "~formident"+uniqueid;
        if(ps.getRequest().getParameter(ident)!=null)
        {
            bstm1*
        }
    ]|
    with // bstm* := <collect-om(handle-actions-input-to-java-servlet)> elems
         bstm1* := <collect-om(handle-actions-to-java-servlet)> elems
        ; formident := <get-formnumber> tc   
   
   
    /*
    %>
      <h:form enctype="multipart/form-data" att0>
        <%= hidden-ids ::*%>
        <f:facet name="afterInvalidField"><s:message/></f:facet>
        <%= <elems-to-xhtml> elems ::*%>
      </h:form>
    <%
    where if InToplevelTemplate then
            hidden-ids := <mapconcat(arg-to-xhtml)> <bagof-TemplateArguments> <ThisPage>
          else
            hidden-ids := <mapconcat(arg-to-xhtml)> <TemplateArguments> <ThisPage>
          end
        ; if <get-jsf-component-id-1> tc then 
            att0 := @>  id="<%= <get-jsf-component-id-1> tc %>" <@
          else att0:= [] end
    */
    

  elem-to-java-servlet :
    tc@TemplateCall("action",[e2,e1],[]) ->
    <for-loop-counter-wrap-code> 
    bstm* |[ 
    out.println("<input type=\"submit\" name=\""+ident+"~actionident"+uniqueid+"\" value=\""+e4+"\" />"); 
    ]|
    with  e3 := <?ThisCall(name,args);!name> e1
        ; e4 := <arg-to-value-string-java-servlet> e2
        ; actionident := <get-actionnumber> tc   
        
  handle-actions-to-java-servlet: 
    tc@TemplateCall("action",[e2,e1],[]) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
        ident += "~actionident"+uniqueid;
        if(ps.getRequest().getParameter(ident)!=null)
        {
            x_action(e*);
        }
    ]|
    with  actionident := <get-actionnumber> tc   
        ; x_action := <?ThisCall(name,args);!name> e1
        ; e* := <map(expression-to-java-servlet)> args


  elem-to-java-servlet :
    tc@TemplateCall("actionLink",[e2,e1],[]) ->
    <for-loop-counter-wrap-code> 
    bstm* |[ 
    out.println("<a name=\""+ident+"~actionident"+uniqueid+"\" href=\"#\" onClick=\"document."+form_ident+".submit()\">"+e4+"</a>"); //TODO javascript to actually submit
    ]|
    with  e3 := <?ThisCall(name,args);!name> e1
        ; e4 := <arg-to-value-string-java-servlet> e2
        ; actionident := <get-actionnumber> tc   
        
  handle-actions-to-java-servlet: 
    tc@TemplateCall("actionLink",[e2,e1],[]) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
        ident += "~actionident"+uniqueid;
        if(ps.getRequest().getParameter(ident)!=null)
        {
            x_action(e*);
        }
    ]|
    with  actionident := <get-actionnumber> tc   
        ; x_action := <?ThisCall(name,args);!name> e1
        ; e* := <map(expression-to-java-servlet)> args

/*
what are these for, e3 ignored?
  elem-to-java-servlet :
    TemplateCall("action",[e1,e2,e3],[]) ->
    %>
       <h:commandButton type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

  elem-to-java-servlet :
    TemplateCall("action",[e1,e2,e3],[]) ->
    %>
       <s:button type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
*/

/*
support
  elem-to-java-servlet :
    TemplateCall("actionLink",[e1,e2],[]) ->
    %>
       <h:commandLink type="submit" value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2
*/

   /*is-cancel-action =
     ?Call(Var(component), "cancel", [])

   elem-to-java-servlet :
    TemplateCall("action",[e1,e2],[]) ->
    %>
       <h:commandButton value="<%= e1string %>" action="<%= e2string %>"/>
    <%
    where e1string := <arg-to-value-string> e1
        ; e2string := <arg-to-value-string> e2

   elem-to-java-servlet :
     Action(name, args, body) -> []
     */
/*
rules // captcha

  elem-to-java-servlet :
    TemplateCall("captcha", [], []) ->
    %>
      <div class="captcha">
        <div>
          <h:graphicImage value="/seam/resource/captcha?#{captcha.id}"/>
        </div>
        <div>
          <h:outputLabel for="verifyCaptcha">Enter the above letters</h:outputLabel>
          <h:inputText id="verifyCaptcha" value="#{captcha.response}" required="true">
            <s:validate />
          </h:inputText>
          <div class="validationError"><h:message for="verifyCaptcha"/></div>
        </div>
      </div>
    <%

rules // helper rules for input

  input-of-required-property(|e)=
    if <page-var-access-to-class-prop-tuple;PropertyIsRequired> e
    then
      !"true"
    else
      !"false"
    end

  get-type-of-right-side-field-access:
    fa@FieldAccess(e, f) -> thetype
    where SimpleSort(thetype) := <type-of> fa

  page-var-access-to-class-prop-tuple :
    FieldAccess(e, f) -> (<get-type-of-right-side-field-access> e,f)

rules // input

    // @todo configure requiredness of fields

    // @todo support different types of input based on type
    // maybe deal with that through desugaring, i.e., have more
    // specific inputX template calls

    // @todo also special support for Email, URL, Image

  elem-to-java-servlet :
    TemplateCall("input",[e],[]) ->
    %>
      <s:decorate>
        <h:inputText styleClass="inputText" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    where warn(|["underived input element"])
        ; estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>

    // @todo validate image

    // @todo upload real image file


rules // output

  elem-to-java-servlet :
    TemplateCall("output",[e],[]) ->
    %>
      <h:outputText styleClass="output" value="<%= estring %>"/>
    <%
    where warn(|["underived output element"])
        ; estring := <arg-to-value-string> e

rules
  // Generate URL rewrite rules
   
   GenerateCode = page-to-rewrite-rule; fail
   
   page-to-rewrite-rule =
     ?Define([Page()], x, [], body)
     ; with ( rules ( PageRewriteRules :+=
              %>
      <rule>
        <from>/<%= x::cdata %>/?$</from>
        <to>/<%= x::cdata %>.seam</to>
      </rule>
      <rule>
        <from>/<%= x::cdata %>/?\?(.*)$</from>
        <to>/<%= x::cdata %>.seam?$2</to>
      </rule>
              <% ) )
      
   page-to-rewrite-rule =
     ?Define([Page()], x, args, body)
     ; with ( Arg(fi, t) := <Hd> args
          ; if <builtin-java-type> t then
              first := fi
            else
              first := <concat-strings> [fi, "_id"]
            end
            ; rules ( PageRewriteRules :+=
      %>
      <rule>
        <from>/<%= x::cdata %>/([^\?]+)$</from>
        <to>/<%= x::cdata %>.seam?<%= first::cdata %>=$1</to>
      </rule>
      <rule>
        <from>/<%= x::cdata %>/([^\?]+)\?(.*)$</from>
        <to>/<%= x::cdata %>.seam?<%= first::cdata %>=$1&amp;$2</to>
      </rule>
      <% ) )

   rewrite-rules-to-xml =
     with ( {| ThisPage
             : rules ( ThisPage := "urlrewrite" )
             ; rule* := <bagof-PageRewriteRules; flatten-list>
             ; <emit-seam-config>
               %>
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE urlrewrite PUBLIC "-//tuckey.org//DTD UrlRewrite 2.6//EN"
                            "http://tuckey.org/res/dtds/urlrewrite2.6.dtd">
<urlrewrite>
  <%= rule* ::*%>
</urlrewrite>
               <% |} )


rules
  // Generate page action config file
   
   GenerateCode = page-to-action-rule; fail
   
   page-to-action-rule =
     ?Define([Page()], x, args, elems)
     ; with ( viewid := <concat-strings>["/", x, ".xhtml"]
            ; pageaction := <concat-strings>[x, ".forceInitialization()"]
            ; page-parameters := <mapconcat(arg-for-page-action(|x))> <TemplateArguments> x
            ; rules ( PageActions :+= 
              %>
    <page view-id="<%= viewid %>" action="#{<%= pageaction %>}">
        <%= page-parameters::* %>
    </page>
              <%
            ) )

   generate-page-actions-file =
     with ( {| ThisPage
             : rules ( ThisPage := "pages" )
             ; action* := <bagof-PageActions; flatten-list>
             ; <emit-seam-config>
               %>
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE page PUBLIC "-//JBoss/Seam Pages Configuration DTD 1.2//EN"
                      "http://jboss.com/products/seam/pages-2.0.dtd">
<pages>
  <%= action* ::*%>
</pages>
               <% |} )

   arg-for-page-action(|page) :
     Arg(i, s) -> %> <param name="<%= e1 %>" value="#{<%= page %>.<%= e1 %>}" /> <%
     where <defined-java-type> s
      with e1 := <concat-strings>[i, "_id"]

   arg-for-page-action(|page) :
     Arg(e, s) -> %> <param name="<%= e %>" value="#{<%= page %>.<%= e %>}" /> <%
     where <builtin-java-type> s
     
     */