module org/webdsl/dsl/to-java-servlet/elements-to-java-servlet

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
    
rules // block

 // @obsolete; should have been removed by sugar, however seems to have to do something with menu
 elem-to-java-servlet :
    TemplateCall("dummy", _,passign*, elems) -> <elems-to-java-servlet> elems


  // @obsolete; use block{ ... } instead of div{ ... }
  elem-to-java-servlet :
    TemplateCall("div", [String(x)],passign* , elems) ->
    bstm* |[ 
    out.print("<div "+e_attrs1 + ">");
    bstm*
    out.print("</div>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems 
        ; e_attrs1 := <to-html-attrs> passign* 

         
  elem-to-java-servlet :
    TemplateCall("block", [],passign*, elems) ->
    bstm* |[ 
    out.print("<div "+e_attrs1+" class=\"block\" >");
    bstm*
    out.print("</div>");
    ]|
    with bstm* := <elems-to-java-servlet> elems 
       ; e_attrs1 := <to-html-attrs> passign*

  elem-to-java-servlet :
    TemplateCall("block", [String(x)],passign*, elems) ->
    bstm* |[ 
    out.print("<div class=\"block "+"~x"+"\" "+e_attrs1+" >");
    bstm*
    out.print("</div>");
    ]|
    with bstm* := <elems-to-java-servlet> elems 
        ;e_attrs1 := <to-html-attrs> passign*
    
  elem-to-java-servlet :
    TemplateCall("block", [String(x), String("")],passign*, elems) ->
    bstm* |[ 
    out.print("<div class=\"block "+"~x"+"\" "+e_attrs1+">");
    bstm*
    out.print("</div>");
    ]|
    with bstm* := <elems-to-java-servlet> elems 
        ;e_attrs1 :=<to-html-attrs> passign*
    
  elem-to-java-servlet :
    TemplateCall("block", [String(x), String(y)],passign*, elems) ->
    bstm* |[ 
    out.print("<div class=\""+"~y"+" block "+"~x"+"\"  "+e_attrs1+">");
    bstm*
    out.print("</div>");
    ]|  
     where not( <?""> x ) ; not( <?""> y )
     with  bstm* := <elems-to-java-servlet> elems 
          ;e_attrs1 := <to-html-attrs> passign*
    
  elem-to-java-servlet :
    TemplateCall("block", [String(""), String(y)],passign*, elems) ->
    bstm* |[ 
    out.print("<div class=\""+"~y"+" block\" "+e_attrs1+">"); 
    bstm*
    out.print("</div>");
    ]|
    with bstm* := <elems-to-java-servlet> elems 
        ;e_attrs1 := <to-html-attrs> passign*

rules // embedding expressions in presentation

  arg-to-value-string-java-servlet :
    Cast(x, s) -> <arg-to-value-string-java-servlet> x

  arg-to-value-string-java-servlet :
    String(x) -> e |[ "~x" ]|

  arg-to-value-string-java-servlet :
    Bool(x) -> e |[ String.valueOf(x) ]|
    
  arg-to-value-string-java-servlet :
    Int(x) -> e |[ String.valueOf(x) ]|
    
  arg-to-value-string-java-servlet :
    tc@ThisCall(_,_) -> e |[ String.valueOf(e1) ]|
    with e1 := <expression-to-java-servlet> tc

 arg-to-value-string-java-servlet :
    tc@Call(e2,_, _) -> e |[ e3 != null ? String.valueOf(e1) : "" ]|
    with e1 := <expression-to-java-servlet> tc
       ; e3 := <add-not-null-checks;expression-to-java-servlet> e2

  arg-to-value-string-java-servlet :
    Add(e1, e2) -> e |[ e3 + e4 ]|
    where e3 := <arg-to-value-string-java-servlet> e1
        ; e4 := <arg-to-value-string-java-servlet> e2

  arg-to-value-string-java-servlet :
    Var(x) -> e |[ x ]|
    where InFieldAccess

  arg-to-value-string-java-servlet :
    Var(x) -> e |[ String.valueOf(x) ]|
    where not(InFieldAccess)

  arg-to-value-string-java-servlet :
    FieldAccess(e, x) -> e |[ String.valueOf(e2 != null ? e1.get#x() : "") ]|//e |[ String.valueOf(e1.get#x()) ]|
    where not(InFieldAccess)
    with  {| InFieldAccess:
             rules (InFieldAccess := True() )
             ; e1 := <arg-to-value-string-java-servlet> e
          |}
        ; e2 := <add-not-null-checks;expression-to-java-servlet> e
          
          
  arg-to-value-string-java-servlet :
    FieldAccess(e, x) -> e |[ e1.get#x() ]|
    where InFieldAccess
    with  e1 := <arg-to-value-string-java-servlet> e

strategies // title

  elem-to-java-servlet :
    TemplateCall("title", _,passign*, elems) ->
    bstm |[ 
    {
      java.io.StringWriter s = new java.io.StringWriter();
      java.io.PrintWriter out = new java.io.PrintWriter(s);
      bstm*
      s.flush();
      ps.setPageTitle(s.toString());
    } 
    ]|
    with bstm* := <elems-to-java-servlet> elems

rules // text

  elem-to-java-servlet :
    Text(val) -> bstm |[ out.print(utils.HTMLFilter.filter("~val")); ]|

rules // text

  // convert an expression to text (string value of the expression)

  elem-to-java-servlet :
    TemplateCall("text", [arg],passign*, []) -> bstm |[ out.print(utils.HTMLFilter.filter(e)); ]|
    with  e := <arg-to-value-string-java-servlet> arg

rules // spacers

  elem-to-java-servlet :
    TemplateCall("spacer", _,passign*, []) -> bstm |[ out.print("<hr "+e_attrs1+"/>"); ]|
    with e_attrs1 := <to-html-attrs> passign*
    /*
    %> <rich:spacer id="<%= spacer-id %>" /> <%
    where spacer-id := <newname> "spacer"
    */
  elem-to-java-servlet :
    TemplateCall("horizontalspacer", _,passign*, []) -> bstm |[ out.print("<hr "+e_attrs1+" />"); ]|
    with e_attrs1 := <to-html-attrs> passign*
rules // images

  elem-to-java-servlet :
    TemplateCall("image",[e],passign*,[]) -> 
    bstm |[ out.print("<img src=\""+e1+"\" "+e_attrs1+" />"); ]|
    where String(url) := e
        ; <is-substring(!"://")> url
    with  e1 := <arg-to-value-string-java-servlet> e
        ; e_attrs1 := <to-html-attrs> passign*


  elem-to-java-servlet :
    TemplateCall("image",[e ],passign*,[]) -> 
    bstm |[ out.print("<img src=\""+"~<AppRoot>"+e1+"\" "+e_attrs1+" />"); ]|
    where String(url) := e
        ; not(<is-substring(!"://")> url)
    with  e1 := <arg-to-value-string-java-servlet> e
        ; e_attrs1 := <to-html-attrs> passign*

rules // lists

  elem-to-java-servlet :
    TemplateCall("list", [],passign*, elems) ->
    bstm* |[ 
      out.print("<ul "+e_attrs1+">");
      bstm*
      out.print("</ul>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*

  elem-to-java-servlet :
    TemplateCall("listitem", [],passign*, elems) ->
    bstm* |[ 
      out.print("<li "+e_attrs1+">");
      bstm*
      out.print("</li>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*

rules // sections and headers

  elem-to-java-servlet :
    TemplateCall("header", [],passign*, elems) ->
    bstm* |[ 
      out.print("<"+"~tag"+" class=\"header "+"~sectionlevel"+"\" "+e_attrs1+">");
      bstm*
      out.print("</"+"~tag"+">");
    ]|
    where not(JavaTableScope)
    with  n := <(SectionDepth <+ !1); int-to-string>
        ; tag := <concat-strings>["h", n]
        ; sectionlevel := <concat-strings>["section", n]
        ; bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*
    
  elem-to-java-servlet :
    TemplateCall("section", [],passign*, elems) ->
    bstm* |[ 
      out.print("<span class=\"section "+"~sectionlevel"+"\" "+e_attrs1+">");
      bstm*
      out.print("</span>");
    ]|
    with  {| SectionDepth
           : rules( SectionDepth := <(SectionDepth <+ !0); inc> )
           ; sectionlevel := <concat-strings>["section", <SectionDepth; int-to-string>]
           ; bstm* := <elems-to-java-servlet> elems 
           ; e_attrs1 := <to-html-attrs> passign*
           |}
 
  elem-to-java-servlet :
    TemplateCall("par", [],passign*, elems) ->
    bstm* |[ 
    out.print("<p "+e_attrs1+">");
    bstm*
    out.print("</p>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*    
    
  elem-to-java-servlet :
    TemplateCall("container", [],passign*, elems) ->
    bstm* |[ 
    out.print("<span "+e_attrs1+">");
    bstm*
    out.print("</span>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*
        
rules // pre-formatted text

  elem-to-java-servlet :
    TemplateCall("pre", [],passign*, elems) ->
    bstm* |[ 
    out.print("<pre "+e_attrs1+">");
    bstm*
    out.print("</pre>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*

rules // tables

  elem-to-java-servlet :
    TemplateCall("table", [],passign*, elems) ->
    bstm* |[ 
    out.print("<table cellspacing='0px' cellpadding='0px' "+e_attrs1+">");
    bstm*
    out.print("</table>");
    ]|
    with  {| JavaTableScope
           : rules ( JavaTableScope := 1 )
           ; bstm* := <elems-to-java-servlet> elems
           |}
        ; e_attrs1 := <to-html-attrs> passign*

  elem-to-java-servlet :
    TemplateCall("header", [],passign*, elems) -> 
    bstm* |[ 
      out.print("<th "+e_attrs1+">");
      bstm*
      out.print("</th>");
    ]|
    where JavaTableScope
    with  bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*
    
/*    bstm* |[ 
    bstm*
    ]|
    where JavaTableScope
    with  //e_attrs1 := <to-html-attrs> passign*
          bstm* := <map(elem-to-java-servlet);map({\ bstms -> <concat-with-sublists> bstm* |[ out.print("<th>"); bstm1* out.print("</th>"); ]| 
                                                     with if <is-list> bstms then bstm1* := bstms else bstm1* := [bstms] end\});concat-with-sublists> elems
*/
// elem-to-java-servlet gives either a list of or one bstm

  elem-to-java-servlet :
    TemplateCall("row", [],passign*, elems) ->
    bstm* |[ 
    out.print("<tr "+e_attrs1+">");
    bstm*
    out.print("</tr>");
    ]|
    with  e_attrs1 := <to-html-attrs> passign*
        ; bstm*    := <elems-to-java-servlet> elems
/*        ; bstm*  :=  <map(elem-to-java-servlet)
                ;map({\ bstms -> <concat-with-sublists> bstm* |[ out.print("<td>"); bstm1* out.print("</td>"); ]| 
                                                 with if <is-list> bstms then bstm1* := bstms else bstm1* := [bstms] end
                      \}
                    )
                ;concat-with-sublists> elems
*/

  elem-to-java-servlet :
    TemplateCall("column", [],passign*, elems) ->
    bstm* |[ 
    out.print("<td "+e_attrs1+">");
    bstm*
    out.print("</td>");
    ]|
    where not([TemplateCall("header",_,_,_)] := elems)
    with  e_attrs1 := <to-html-attrs> passign*
        ; bstm*  :=  <elems-to-java-servlet> elems

  //a combination of column { header { ..}} leads to <th>
  elem-to-java-servlet :
    TemplateCall("column", [],passign*, [TemplateCall("header", [], passign2*, elems)]) ->
    bstm* |[ 
    out.print("<th "+e_attrs1+" "+e_attrs2+">");
    bstm*
    out.print("</th>");
    ]|
    with  e_attrs1 := <to-html-attrs> passign*
        ; e_attrs2 := <to-html-attrs> passign2*
        ; bstm*  :=  <elems-to-java-servlet> elems


//for moved to control-flow-to-java-servlet

//select moved to types/collection

//if moved to control-flow-to-java-servlet


//templatecalls moved to control-flow-to-java-servlet

rules // links

  // link to a url, maybe constant, or obtained from an entity field
        
  elem-to-java-servlet : //void navigate, useful for ajax
    TemplateCall("navigate", [],passign*, elems) ->
    bstm* |[ 
    out.print("<a class=\"navigate\" href=\"javascript:void()\" "+e_attrs1+">");
    bstm*
    out.print("</a>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*
        
        
  elem-to-java-servlet :
    TemplateCall("navigate", [ThisCall("url",[e])],passign*, elems) ->
    bstm* |[ 
    out.print("<a class=\"navigate\" href=\""+e1+"\" "+e_attrs1+">");
    bstm*
    out.print("</a>");
    ]|
    with  e1 := <arg-to-value-string-java-servlet> e
        ; bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*

  elem-to-java-servlet :
    TemplateCall("navigate",[call@ThisCall(p,args)],passign*,elems) ->
    bstm* |[ 
    out.print("<a class=\"navigate\" href=\""+e_resulturl+"\" "+e_attrs1+">");
    bstm*
    out.print("</a>");
    ]|
    where <IsPage> p
    with  e_url := <page-thiscall-to-url-string-java-servlet> call
        ; bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*
        ; if ThisEmail 
          then e_resulturl := expr|[ ps.getAbsoluteLocation() + e_url ]|  
          else e_resulturl := e_url end

  elem-to-java-servlet :
    TemplateCall("navigatebutton",[call@ThisCall(p,args), e],passign*,[]) ->
    bstm* |[
    out.print("<input type=\"button\" "+e_attrs1+" onclick=\"window.location = '"+e_url+"'\"");
    out.print("value=\""+e1+"\"");
    out.print(" />");
    ]|
    where <IsPage> p
    with  e_url := <page-thiscall-to-url-string-java-servlet> call
        ; e1 := <arg-to-value-string-java-servlet> e
        ; e_attrs1 := <to-html-attrs> passign*
        
  page-thiscall-to-url-string-java-servlet :
    ThisCall(p,args) -> e |[ e_url ]|
    with  def |[ define mod* x(farg*) { elem* } ]| := <TemplateSignature> (p, <map(type-of)> args)
        ; params := <zip(bind-param-java-servlet)> (farg*, args)
        ; e_url := <page-call-to-url-java-servlet> (p, params)
        
  bind-param-java-servlet :
    (Arg(x, srt), e) -> (x, el)
    where <is-entity-type> srt
    with  el := <arg-to-value-string-java-servlet> FieldAccess(e, "id")
 
  bind-param-java-servlet :
    (Arg(x, srt), e) -> (x, el)
    where <is-simple-sort> srt
    with  el := <arg-to-value-string-java-servlet> e

  page-call-to-url-java-servlet :
    (fn, []) -> e |[ "~s" ]| 
    with  s := <concat-strings> [<AppRoot>, "/", fn]

  page-call-to-url-java-servlet :
    (fn, params) -> e |[ "~s" + e1 ]| 
    where not([] := params)
    with  s  := <concat-strings> [<AppRoot>, "/", fn, "/"]
        ; e1 := <map(param-to-request-param-java-servlet); combine-params-to-exp> params

  combine-params-to-exp :
    [e] -> e |[ e ]|
  
  combine-params-to-exp :
    [e|e*] -> e |[ e + "/" + e1 ]|
    with  e1 := <combine-params-to-exp> e*

  param-to-request-param-java-servlet :
    (param, value) -> value
    //    (param, value) -> <concat-strings> [param, "=", value]

rules // forms

  elem-to-java-servlet : 
    tc@TemplateCall("form", [],passign*, elems) ->
    <for-loop-counter-wrap-code> 
    bstm* |[
      {
        ident += "~formident"+uniqueid;
        form_ident = ident; //just for actionLink javascript code    
        if(ps.getParammap().get(ident)!=null)
        {
          inSubmittedForm = true; // ok, because no nested forms, otherwise need to count just like inForLoop variable
        }
        
        out.print("<form "+e_enc+" name=\""+ident+"\" id=\""+ident+"\" action=\""+"/"+AppInfo.getAppName()+"/"+ps.getPageName()+"\" method=\"POST\" "+e_attrs1+">");
        out.print("<input type=\"hidden\" name=\""+ident+"\" value=\"1\" />");
        out.print(ps.getHiddenParams()); // page arguments

        bstm*

        out.print("</form>");

        inSubmittedForm = false;
        form_ident = "";
      }
    ]|
    with  bstm* := <elems-to-java-servlet> elems
        ; formident := <get-formnumber> tc
        ; e_attrs1 := <to-html-attrs> passign*
        ; if <oncetd(requires-multipart-encoded-form)> elems
          then e_enc := java |[ "enctype=\"multipart/form-data\"" ]|
          else e_enc := java |[ "" ]| end
/*        ; if (IsAjaxApp) //TODO: enter afvangen
          then e1 := "onsubmit
          else
          end
*/   
  handle-actions-to-java-servlet: 
    tc@TemplateCall("form", [],passign*, elems) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
        ident += "~formident"+uniqueid;
        //if(ps.getParammap().get(ident)!=null)
        //{
        bstm1*
        //}
    ]|
    with // bstm* := <collect-om(handle-actions-input-to-java-servlet)> elems
         bstm1* := <collect-om(handle-actions-to-java-servlet); concat-with-sublists> elems
        ; formident := <get-formnumber> tc   
   
  elem-to-java-servlet :
    tc@TemplateCall("action",[e2],passign*,[]) ->
    <for-loop-counter-wrap-code> 
    bstm* |[ 
    out.print("<input type=\"button\" value=\""+e4+"\" "+e_attrs1+" />");
    ]|
    where IsAjaxApp
    with  e4 := <arg-to-value-string-java-servlet> e2
        ; e_attrs1 := <to-html-attrs> passign*    

  elem-to-java-servlet :
    tc@TemplateCall("action",[e2,call@ThisCall(name, args)],passign*,[]) ->
    <for-loop-counter-wrap-code> 
    bstm* |[ 
    out.print("<input type=\"button\" value=\""+e4+"\" "+e_attrs1+" ");
    out.print("onclick='javascript:serverInvoke(\""+"~app"+"/" + ps.getPageName()  +"\",\""+ "~actionident"+uniqueid+e3 +"\", \""+ps.getHiddenPostParams()+"\",\""+form_ident+"\", this)'/>"); 
    ]|
    where IsAjaxApp
    with  e4 := <arg-to-value-string-java-servlet> e2
        ; actionident := <get-actionnumber> tc   
        ; app := <AppRoot>
        ; e3 := <actual-action-args-to-state-enc> args
        ; e_attrs1 := <to-html-attrs> passign*
  
   elem-to-java-servlet :
    tc@TemplateCall("action",[e2,e1],passign*,[]) ->
    <for-loop-counter-wrap-code> 
    bstm* |[ 
    out.print("<input type=\"submit\" name=\""+ident+"~actionident"+uniqueid+e5+"\" value=\""+e4+"\" "+e_attrs1+" />"); 
    ]|
    where not(IsAjaxApp)
    with  e3 := <?ThisCall(name,args);!name> e1
        ; e4 := <arg-to-value-string-java-servlet> e2
        ; actionident := <get-actionnumber> tc   
        ; e_attrs1 := <to-html-attrs> passign*        
        ; e5 := <actual-action-args-to-state-enc> args         
        
  handle-actions-to-java-servlet: 
    tc@TemplateCall("action",[e2,e1],passign*,[]) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
        ident += "~actionident"+uniqueid+e5;
        if(ps.getParammap().get(ident)!=null)
        {
            x_action temp = (x_action)actionclasses.get("~x_action");
            temp.x_action(e*);
        }
    ]|
    with  actionident := <get-actionnumber> tc   
        ; x_action := <?ThisCall(name,args);!name> e1
        ; e* := <map(expression-to-java-servlet)> args
        ; e5 := <actual-action-args-to-state-enc> args

  elem-to-java-servlet : //actionLink without call only valid for ajax apps
    tc@TemplateCall("actionLink",[e2],passign*,[]) ->
    <for-loop-counter-wrap-code> 
    bstm* |[ 
    out.print("<a href=\"javascript:void()\" "+e_attrs1+">");
    out.print(e4+"</a>");
    ]|
    where IsAjaxApp
    with  e4 := <arg-to-value-string-java-servlet> e2
        ; e_attrs1 := <to-html-attrs> passign*        
    
  elem-to-java-servlet :
    tc@TemplateCall("actionLink",[e2,call@ThisCall(name, args)],passign*,[]) ->
    <for-loop-counter-wrap-code> 
    bstm* |[ 
    ident += "~actionident"+uniqueid+e3 ;
    out.print("<a href=\"javascript:void()\" "+e_attrs1+" onclick='javascript:serverInvoke(\""+"~app"+"/" + ps.getPageName()  +"\",\""+ ident+"\", \""+ps.getHiddenPostParams()+"\",\""+form_ident+"\", this)' >");
    out.print(e4+"</a>");
    ]|
    where IsAjaxApp
    with  e4 := <arg-to-value-string-java-servlet> e2
        ; actionident := <get-actionnumber> tc   
        ; app := <AppRoot>
        ; e3 := <actual-action-args-to-state-enc> args
        ; e_attrs1 := <to-html-attrs> passign*        
        
   elem-to-java-servlet :
    tc@TemplateCall("actionLink",[e2,e3@ThisCall(name, args)],passign*,[]) ->
    <for-loop-counter-wrap-code> 
    bstm* |[ //this doesn't allow downloads, use special downloadLink (see types/file.str)
    ident += "~actionident"+uniqueid+e5;
    out.print("<input type=\"hidden\" name=\""+ident+"\" "+e_attrs1+"/>");
    out.print("<a href=\"#\"");
    out.print("onClick=\"document.getElementsByName('"+ident+"')[0].value='1';"+
                        "document."+form_ident+".submit();"+
                        "document.getElementsByName('"+ident+"')[0].value='0';"+
                        "\">");
    out.print(e4+"</a>");
    ]|
    where not(IsAjaxApp)
    with  e4 := <arg-to-value-string-java-servlet> e2
        ; actionident := <get-actionnumber> tc   
        ; e_attrs1 := <to-html-attrs> passign*        
        ; e5 := <actual-action-args-to-state-enc> args
        ; app := <AppRoot>
        
  handle-actions-to-java-servlet: 
    tc@TemplateCall("actionLink",[e2,e1],passign*,[]) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
        ident += "~actionident"+uniqueid+e5;
        if(ps.getParammap().get(ident)!=null ) // not necessary: && ps.getParammap().get(ident).equals("1") )
        {
            x_action temp = (x_action)actionclasses.get("~x_action");
            temp.x_action(e*);
        }
    ]|
    with  actionident := <get-actionnumber> tc   
        ; x_action := <?ThisCall(name,args);!name> e1
        ; e* := <map(expression-to-java-servlet)> args
        ; e5 := <actual-action-args-to-state-enc> args        
