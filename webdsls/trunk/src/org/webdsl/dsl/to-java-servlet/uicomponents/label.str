module org/webdsl/dsl/to-java-servlet/uicomponents/label

imports
  libstrategolib

imports
  libwebdsl-front
  
rules 
  
  java-servlet-element-id : TemplateCall("label",_,_,_) -> <java-servlet-element-id-label-helper> 
  java-servlet-element-id : TemplateCall("labelcolumns",_,_,_) -> <java-servlet-element-id-label-helper>
  java-servlet-element-id-label-helper :
    tc@TemplateCall(_,_,_,_){anno*} -> tc{InputNumber(newid),anno*} 
    with  newid := <newname> "input"  
  
rules // label

  elem-to-java-servlet : TemplateCall("label",_,_,_) -> <elem-to-java-servlet-label-helper>
  elem-to-java-servlet : TemplateCall("labelcolumns",_,_,_) -> <elem-to-java-servlet-label-helper>
  elem-to-java-servlet-label-helper :
    tc@TemplateCall(tname, [arg],passign*, elem*) ->
    <for-loop-counter-wrap-code> 
    bstm* |[ 
      String x_labelname = e_id;
      ThreadLocalPage.get().enterLabelContext(x_labelname); // register name for input components inside label
      ~*<render-error-messages-with-error-template(|java:expr|[ x_labelname ]|,<ErrorTemplateInput>)> bstm*|[
        ~*<add-columns-if("labelcolumns":=tname)> bstm*|[ //special handling for labelcolumns, contents in next column
          out.print("<label for=\""+x_labelname+"\" "+e_attrs1+">");
          bstm_exptostring*
          out.print("</label>");
        ]|
        ~*<add-columns-if("labelcolumns":=tname)> bstm*|[ 
          bstm_elem*
        ]|
      ]|   
      ThreadLocalPage.get().leaveLabelContext();
    ]|
    with bstm_exptostring* := <to-page-string-java-servlet> arg
       ; e_attrs1 := <to-html-attrs> passign* 
       ; x_labelname := <newname> "label"
       ; inputident := <get-inputnumber> tc
       ; e_id := <id-encoding> inputident
       ; bstm_elem* := <elems-to-java-servlet> elem*
              
  add-columns-if(s):
    bstm_content* -> result
    with  if s
          then result := bstm*|[ 
                           out.print("<td>");
                           bstm_content*
                           out.print("</td>");
                         ]|
          else result := bstm_content* end
   
  handle-actions-input-to-java-servlet = validation-context-wrapper-for-label(handle-actions-input-to-java-servlet) 
  data-validation-to-java-servlet      = validation-context-wrapper-for-label(data-validation-to-java-servlet)       

  validation-context-wrapper-for-label(s) : TemplateCall("label",_,_,_) -> <validation-context-wrapper-for-label-helper(s)>
  validation-context-wrapper-for-label(s) : TemplateCall("labelcolumns",_,_,_) -> <validation-context-wrapper-for-label-helper(s)>
  validation-context-wrapper-for-label-helper(s) :
    tc@TemplateCall(_,[arg],passign*,TemplateBody(elem*)) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
      ident = e_id;
      ThreadLocalPage.get().enterLabelContext(ident); // register name for input components inside label
      ~*<?[] <+ wrap-validation-context-code-store-inputs> bstm* |[
        bstm* 
      ]|
      ThreadLocalPage.get().leaveLabelContext();
    ]|
    with  inputident := <get-inputnumber> tc
        ; bstm* := <collect-om(s);concat-with-sublists> elem*
        ; e_id := <id-encoding> inputident
    
rules // to be included in input element translations

  connect-with-enclosing-label =
  ! bstm* |[
    if(ThreadLocalPage.get().inLabelContext()){
      out.print(" id=\""+ThreadLocalPage.get().getLabelString()+"\" ");
    }
  ]|
  