module org/webdsl/dsl/to-java-servlet/uicomponents/menus

imports
  libstrategolib

imports
  libwebdsl-front

rules // menus

  elem-to-java-servlet :
    TemplateCall("menubar", [exp | attrs], elems) ->
    bstm* |[ 
    out.println("<div class=\"menuwrapper\" id=\""+"~x_menuid"+"\" >"); //style: menubar
    out.println("<ul id=\"p7menubar\" class=\"menu\">");
    bstm*
    out.println("</ul></div>");
    ]|
    where <?String("horizontal")> exp
        ; [] := <get-template-args> attrs
    with x_menuid := <newname> "menubar"
       ; bstm* := <elems-to-java-servlet> elems         

  elem-to-java-servlet :
    TemplateCall("menubar", [exp | attrs], elems) ->
    bstm* |[ 
    out.println("<div class=\"sdmenu menubar\" id=\""+"~x_menuid"+"\" >");
    bstm*
    out.println("</div>");
    out.println("<script type=\"text/javascript\">sideMenu = new SDMenu(\""+"~x_menuid"+"\"); sideMenu.init();</script>");    
    ]|     
    where <?String("vertical")> exp
        ; [] := <get-template-args> attrs
    with x_menuid := <newname> "menubar"
       ; elems' := <try(repeat(sometd(\ TemplateCall("menuheader", a, elems) ->
                                  TemplateCall("container", a, elems) \ <+
                                \ TemplateCall("menu", a, elems) ->
                                  TemplateCall("block", a, elems) \ <+
                                \ TemplateCall("menuitem", a, elems) ->
                                  TemplateCall("dummy", a, elems) \ <+
                                \ TemplateCall("menuspacer", a, []) ->
                                  TemplateCall("horizontalspacer", a, []) \
                                  )))> elems
       ; bstm* := <elems-to-java-servlet> elems'   

  elem-to-java-servlet :
    TemplateCall("menu", attrs, elems) ->
    bstm* |[ 
    out.println("<li class=\"menuheader\">");
    bstm*
    bstm1*
    out.println("</li>");
    ]|     
    where [] := <get-template-args> attrs
    with  {| HeaderItems, DropDownItems
           : <map(try(find-menuheaders-java-servlet))> elems
           ; bstm* := <elems-to-java-servlet> <reverse> <HeaderItems <+ []>
           ; if DropDownItems then
               bstm1* := bstm* |[ out.println("<ul>"); ~bstm*:<elems-to-java-servlet> <reverse> <DropDownItems> out.println("</ul>"); ]|
             else
               bstm1* := []
             end
           |}

  find-menuheaders-java-servlet =
    ?elem
    ; if <sometd(?TemplateCall("menuheader", _, _))> elem then
        rules ( HeaderItems := [elem | <HeaderItems <+ ![]>] )
      else
        rules ( DropDownItems := [elem | <DropDownItems <+ ![]>] )
      end

  elem-to-java-servlet :
    TemplateCall("menuheader", attrs, elems) -> e
    where [] := <get-template-args> attrs
    with  if <?[]> elems then
            e := bstm |[ out.println("<div></div>"); ]|
          else
           //similar to elems-to-java-servlet in template-render.str but with special handling of menuheaders
            e := <filter(menuheader-elem-to-java-servlet <+ elem-to-java-servlet <+ undefined-template-call); concat-with-sublists>elems
          end

  //TODO whats this about
  menuheader-elem-to-java-servlet :
    e@Text(elem) ->
    bstm* |[ 
    out.println("<a href=\"#\">");
    bstm
    out.println("</a>");
    ]|
    with bstm := <elem-to-java-servlet> e 

  menuheader-elem-to-java-servlet :
    TemplateCall("navigate",[call@ThisCall(p,args) | attrs],elems) ->
    bstm* |[ 
    out.println("<a href=\""+e_url+"\" "+e0+">");
    bstm*
    out.println("</a>");
    ]|
    where <IsPage> p
        ; [] := <get-template-args> attrs
    with  e_url := <page-thiscall-to-url-string-java-servlet> call
        ; if DropDownItems then
            e0 := e |[ "class=\"trigger\"" ]|
          else
            e0 := e |[ "" ]|
          end
        ; bstm* := <elems-to-java-servlet> elems 

  menuheader-elem-to-java-servlet :
    TemplateCall("navigate", [ThisCall("url",[e]) | attrs], elems) ->
    bstm* |[ 
    out.println("<a href=\""+e_url+"\" "+e0+">");
    bstm*
    out.println("</a>");
    ]|
    where [] := <get-template-args> attrs
    with  e_url := <arg-to-value-string-java-servlet> e
        ; if DropDownItems then
            e0 := e |[ "class=\"trigger\"" ]|
          else
            e0 := e |[ "" ]|
          end
        ; bstm* := <elems-to-java-servlet> elems 

  elem-to-java-servlet :
    TemplateCall("menuitem", _, elems) ->
    bstm* |[ 
    out.println("<li class=\"menuitem\">");
    bstm*
    out.println("</li>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems 

  elem-to-java-servlet :
    TemplateCall("menuspacer", attrs, []) ->
    bstm* |[ 
    out.println("<li>");
    bstm
    out.println("</li>");
    ]|
    with  bstm := <elem-to-java-servlet> TemplateCall("horizontalspacer",attrs, []) 
