module org/webdsl/dsl/to-java-servlet/uicomponents/action

imports
  libstratego-lib
  libjava-front
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/type-utils
  org/webdsl/dsl/to-java-servlet/template-render
  org/webdsl/dsl/to-java-servlet/template-action-inputs
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
  org/webdsl/dsl/to-java-servlet/java-code
  org/webdsl/dsl/to-java-servlet/control-flow-to-java-servlet
  org/webdsl/dsl/to-java-servlet/ajax/html-utils
    
rules
    
  java-servlet-element-id :
    tc@SubmitElem(_,_,_){anno*} -> tc{ActionNumber(newid),anno*} 
    where  newid := <newname> "action"
    
  java-servlet-element-id :
    tc@SubmitLinkElem(_,_,_){anno*} -> tc{ActionNumber(newid),anno*} 
    where  newid := <newname> "action"    
    
rules

  /**
   * previously used <input type="submit"> but that does not allow non-text elements to be nested, because these become an attribute value
   * now using <button> which supports having icons and other template elements nested
   */
  elem-to-java-servlet :
    tc@SubmitElem(call@ActionCall(name, args),passign*,elem*) ->
    bstm* |[
      if(isAjaxSubmitRequired(e_ajaxmodifier)){
        out.print("<button onclick='javascript:serverInvoke(\""+threadLocalPageCached.getAbsoluteLocation()+"/" + threadLocalPageCached.getActionTarget() + threadLocalPageCached.getExtraQueryAruments("?")  +"\",\""+ e_ident +"\", ["+threadLocalPageCached.getHiddenPostParamsJson()+"],\""+threadLocalPageCached.getFormIdent()+"\", this, true); return false;'"); 
        bstm_attr*
        bstm_testsubmitselect*
        out.print(">");
        bstm*
        out.print("</button>");
      }
      else{
        out.print("<button name=\""+e_ident+"\"");
        bstm_attr*
        bstm_testsubmitselect*
        out.print(">");
        bstm*
        out.print("</button>"); 
      }
    ]|
    with  bstm* := <elems-to-java-servlet> elem*
        ; bstm_attr* := <remove-all(?PropertyAssignment("name",_)); to-html-attrs-include-collection(|"submit")> passign*
        ; e_ajaxmodifier := <fetch-ajax-property-as-java-boolean> passign*
        ; e_origident := <action-id-encoding> (<get-actionnumber> tc, args)
        ; e_ident := <submit-name-override> (e_origident, passign*)
        ; bstm_testsubmitselect* := <test-submit-selection-helper>
    
  test-submit-selection-helper = <if-test(!bstm*|[ out.print(" webdsl-submit-select=\"1\"");]|)> []        
        
  submit-name-override :
    (e_ident1, passign*) -> e_ident2
    with  if <fetch(?PropertyAssignment("name",thename))> passign*
          then  e_name := <expression-to-java-servlet> thename
              ; e_ident2 := e_name
          else  e_ident2 := e_ident1 end
       
  action-id-encoding : 
//    (actionident,args) -> e|[ ident + "~actionident" + getUniqueId() + e ]|
    (actionident,args) -> <for-loop-counter-wrap-code-expr> e|[ "~actionident" + getUniqueId() /*+ e*/ ]|
    //with  e := <actual-action-args-to-state-enc> args   //no longer add action args, this caused issues with inline actions + template vars, the args are changed during data binding and the action isn't found anymore 

  id-encoding :
    inputident -> java:expr |[ ident+"~inputident"+getUniqueId() ]|
  
  /**
   *  @TODO check action signature to see whether something needs to be passed as ref arg or not
   */ 
  action-args-to-java-exp-list(|args,fargcalled) =
    <zip(call-arg-ref-resolve-helper)> (<map(?Arg(_,<id>))>fargcalled,args)  
    
  /**
   * this doesn't allow downloads, use special downloadlink (see types/file.str)
   * 
   * consists of a not displayed <button> with the action and a visible <a> link, so that browsers treat it like regular submit when pressing 'enter' in the form
   */
  elem-to-java-servlet :
    tc@SubmitLinkElem(call@ActionCall(name, args),passign*,elem*) ->
    bstm* |[
      // workaround Webdriver issue, to make the button elements clickable when testing, instead of 'display:none' placing it outside visible area
      ~*<if-test(!bstm*|[ out.print("<button style=\"position:absolute;top:0px;left:-20px;\" "); ]|)> bstm*|[ out.print("<button style=\"display:none;\" "); ]|
      if(isAjaxSubmitRequired(e_ajaxmodifier)){
          out.print("onclick='javascript:serverInvoke(\""+
            threadLocalPageCached.getAbsoluteLocation()+"/" + threadLocalPageCached.getActionTarget() + threadLocalPageCached.getExtraQueryAruments("?") +   //TODO getActionTarget is currently used, but the default redirect will not reproduce the page arguments in this case
            "\",\""+ e_ident +"\", ["+threadLocalPageCached.getHiddenPostParamsJson()+"],\""+threadLocalPageCached.getFormIdent()+"\", this, true); return false;'></button>");
      	  out.print("<a href=\"javascript:void(0)\" onclick=\"javascript:this.previousSibling.click()\"");
          bstm_attr*
          bstm_testsubmitselect*
          out.print(">");
          bstm*
          out.print("</a>");
      }
      else{
          out.print("onclick='javascript:serverInvoke(\""+utils.HTMLFilter.filter(threadLocalPageCached.getPageUrlWithParams())+
            "?__action__link__=1" + threadLocalPageCached.getExtraQueryAruments("&") + "\",\""+ e_ident +"\", ["+threadLocalPageCached.getHiddenPostParamsJson()+"],\""+threadLocalPageCached.getFormIdent()+"\", this, true); return false;'></button>"); 
          out.print("<a href=\"javascript:void(0)\" onclick=\"javascript:this.previousSibling.click()\"");
          bstm_attr*
          bstm_testsubmitselect*
          out.print(">");
          bstm*
          out.print("</a>");
      }
    ]|
    with  bstm* := <elems-to-java-servlet> elem*
        ; bstm_attr* := <remove-all(?PropertyAssignment("name",_)); to-html-attrs-include-collection(|"submitlink")> passign*
        ; e_ajaxmodifier := <fetch-ajax-property-as-java-boolean> passign*
        ; e_origident := <action-id-encoding> (<get-actionnumber> tc, args)
        ; e_ident := <submit-name-override> (e_origident, passign*)
        ; bstm_testsubmitselect* := <test-submit-selection-helper>

  fetch-ajax-property-as-java-boolean :
    passign* -> e_ajaxmodifier
    with if <fetch(TemplateCallPropertyAjax)> passign*
         then e_ajaxmodifier := java:expr |[ true ]|
         else e_ajaxmodifier := java:expr |[ false ]|
         end
         
  handle-actions-to-java-servlet:
    tc@SubmitElem(e1,passign*,elem*) -> <handle-actions-to-java-servlet-submit(|actionident,e1,passign*,elem*)>
    with actionident := <get-actionnumber> tc   
  handle-actions-to-java-servlet: 
    tc@SubmitLinkElem(e1,passign*,elem*) -> <handle-actions-to-java-servlet-submit(|actionident,e1,passign*,elem*)>
    with actionident := <get-actionnumber> tc   
  handle-actions-to-java-servlet-submit(|actionident, e1, passign*, elem*): 
    _ -> result
    with  x_action := <?ActionCall(name,args);!name> e1
        ; <get-anno(?ActionFargAnno(fargcalled))> e1
        ; e* := <action-args-to-java-exp-list(|args,fargcalled)>
        ; e_origident := <action-id-encoding> (actionident, args)
        ; e_ident := <submit-name-override> (e_origident, passign*)     
        ; bstm_passign* := <filter(handle-actions-to-java-servlet); concat> passign*
        ; e_ajaxmodifier := <fetch-ajax-property-as-java-boolean> passign*
        ; if <fetch(TemplateCallPropertyIgnoreValidation)> passign* 
          then bstm_disableval* := java:bstm*|[ temp.disableValidation(); ]| 
          else bstm_disableval* := [] end
        ; result :=
            bstm*|[
              ident = e_ident;
              if(threadLocalPageCached.getParammap().get(ident)!=null )
              {
                if(isAjaxSubmitRequired(e_ajaxmodifier)){
                  threadLocalPageCached.enableAjaxActionExecuted(); 
                }
                x_action temp = (x_action)getAction("~x_action");
                bstm_disableval*
                temp.run(e*,ident);
              }
              bstm_passign*
            ]|
  
  //in first traversal, for input data binding, already register which action is executed, in order to know about ignore-validation
  //we need handle-actions traversal as well to get the right arguments for the action, which may depend on input data binding
  handle-actions-input-to-java-servlet:
    tc@SubmitElem(e1,passign*,elem*) -> <handle-actions-input-to-java-servlet-submit(|actionident,e1,passign*)>
    with actionident := <get-actionnumber> tc   
  handle-actions-input-to-java-servlet: 
    tc@SubmitLinkElem(e1,passign*,elem*) -> <handle-actions-input-to-java-servlet-submit(|actionident,e1,passign*)>
    with actionident := <get-actionnumber> tc  
  handle-actions-input-to-java-servlet-submit(|actionident, e1, passign*): 
    _ -> result
    with  x_action := <?ActionCall(name,args);!name> e1
        ; e_origident := <action-id-encoding> (actionident, args)
        ; e_ident := <submit-name-override> (e_origident, passign*)           
        ; if <fetch(TemplateCallPropertyIgnoreValidation)> passign* 
          then bstm_disableval* := java:bstm*|[ temp.disableValidation(); ]| 
          else bstm_disableval* := [] end
        ; result :=
            bstm*|[
              ident = e_ident;
              if(threadLocalPageCached.getParammap().get(ident)!=null )
              {
                x_action temp = (x_action)getAction("~x_action");
                bstm_disableval*
                threadLocalPageCached.setActionToBeExecuted(temp);
              }
            ]|
            