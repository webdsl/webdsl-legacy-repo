module org/webdsl/dsl/to-java-servlet/uicomponents/xml-content

rules

  element-to-java-servlet  :
    XMLEmptyElement(name,attrs) -> <element-render(| bstm* )>
    with  bstm* := <xml-elem-to-java(|"<","/>")> (name,attrs)

  element-to-java-servlet  :
    XMLEmptyElementUnclosed(name,attrs) -> <element-render(| bstm* )>
    with  bstm* := <xml-elem-to-java(|"<",">")> (name,attrs)

  element-to-java-servlet  :
    XMLComment(comment) -> <element-render(| bstm* )>
    with  x_comment := <escape> comment
        ; bstm* := bstm*|[ out.print("~x_comment"); ]|

  element-to-java-servlet  :
    XMLElement(name1,attrs1,elem*,name2) ->
    bstm* |[
      bstm_start
      bstm*
      bstm_end
    ]|
    with  bstm_start := <element-render(| <xml-elem-to-java(|"<",">")> (name1,attrs1) )>
        ; bstm_end   := <element-render(| bstm*|[ out.print("</"+"~name2"+">"); ]| )>
        ; bstm* := <elements-to-java-servlet> elem*

  xml-elem-to-java(|open,close) :
    (name,attrs) ->
    bstm* |[
      out.print("~open"+"~name");
      bstm
      out.print("~close");
    ]|
    with bstm := <xml-attrs-to-java> attrs

// ignore can be passed along with template call while the include attr is at the html elem
// include attr can be passed along while the ignore at the html elem
// 1 retrieve ignores from runtime java attrs, retrieve ignores from static attrs by filtering
// 2 retrieve non-ignored attrs from java attrs, retrieve non-ignored attrs from static attrs
// 3 print non-class non-style attrs, and combine class and style attrs
// from attrs-to-java below and from the helper functions in java-runtime utils.TemplateCall

  xml-attrs-to-java = xml-attrs-to-java(|[])

  xml-attrs-to-java(|additional-attr-cols) : //always merge class and style, exclude from all attributes
    attrs -> bstm|[ { bstm_result* } ]|
    // collect class in a var
    // collect style in a var
    // combine code fragments at the top
    with  bstm_helper* := bstm*|[
            StringBuilder classattrs = new StringBuilder();
            StringBuilder styleattrs = new StringBuilder();
            java.util.List<String> ignore = new java.util.ArrayList<String>();
            utils.TemplateCall.getDynamicIgnoredAttributes(attrs, ignore);
          ]|
        ; bstm_ignore_attr_collections* := <filter(add-inline-ignore-attribute-element-from-attrs)> attrs
        ; bstm_add_selected_attr_collections* := bstm*|[
            for(String attrcolname : utils.TemplateCall.getDynamicSelectedAttributeCollections(attrs)){
              AttributeCollectionLookup.getAttributeCollection(attrcolname, classattrs, styleattrs, ignore, out);
            }
          ]|
        ; bstm_additional_attr_cols* := <map(\x -> bstm|[ AttributeCollectionLookup.getAttributeCollection("~x", classattrs, styleattrs, ignore, out); ]|\)> additional-attr-cols
        ; bstm_collect_all_printall_except_class_style* := <remove-all(?AttributeIgnoreDefault(_)); xml-attrs-to-java-inner> attrs
        ; bstm_print_class_style* := bstm* |[
            utils.TemplateCall.printClassStyleAttributes(classattrs, styleattrs, out);
          ]|
        ; bstm_result* :=
            [ bstm_helper*
            , bstm_ignore_attr_collections*
            , bstm_add_selected_attr_collections*
            , bstm_additional_attr_cols*
            , bstm_collect_all_printall_except_class_style*
            , bstm_print_class_style* ]

  add-inline-ignore-attribute-element-from-attrs :
    AttributeIgnoreDefault(x) -> bstm|[ ignore.add("~x"); ]|

  xml-attrs-to-java-inner:
    attrs -> bstm*
    with  bstm* := <map(xml-attr-to-java)>


rules // regular attribute on the HTML tag

  xml-attr-to-java :
    Attribute(name,value) ->
    bstm|[
      out.print(org.webdsl.tools.Utils.showAttributeEscapeHtml("~name",e));
    ]|
    where not(<?"class" <+ "style"> name)
    with e := <expression-to-java-servlet> value

  xml-attr-to-java :
    Attribute("class",value) -> bstm|[ utils.TemplateCall.appendWithPadding(classattrs, e'); ]|
    where e := <expression-to-java-servlet> value
    with if <get-type-anno; ?SimpleSort("String")> value
         then e' := e
         else e' := java:expr|[ String.valueOf(e) ]| end

  xml-attr-to-java :
    Attribute("class", e_value) -> bstm|[ utils.TemplateCall.appendWithPadding(classattrs, e_value); ]|
    where <not(expression-to-java-servlet)> e_value // value is already a Java expression

  xml-attr-to-java :
    Attribute("style",value) -> bstm|[ utils.TemplateCall.appendWithPadding(styleattrs, e'); ]|
    with e := <expression-to-java-servlet> value
    with if <get-type-anno; ?SimpleSort("String")> value
         then e' := e
         else e' := java:expr|[ String.valueOf(e) ]| end

rules // also support passed along attributes with selectors: all attributes, all attributes except, attributes
      // while still combining class and style attributes

  xml-attr-to-java :
    AllAttributes() -> bstm|[ utils.TemplateCall.handleAttrsAtHtmlElement(attrs, classattrs, styleattrs, ignore, out); ]|

  // in AllAttributeExceptExp and AttributesExp below the expression can be String or List<String>, the called Java method is defined for both types

  xml-attr-to-java :
    AllAttributeExceptExp(e1) -> bstm|[ utils.TemplateCall.handleAttrsAtHtmlElementExcept(e2, attrs, classattrs, styleattrs, ignore, out); ]|
    with  e2 := <expression-to-java-servlet> e1

  xml-attr-to-java :
    AttributesExp(e1) -> bstm|[ utils.TemplateCall.handleAttrsAtHtmlElementSelect(e2, attrs, classattrs, styleattrs, ignore, out); ]|
    with  e2 := <expression-to-java-servlet> e1

rules //if(){} and if(){}else{} inside an XML element containing a list of attributes

  xml-attr-to-java :
    XMLAttributesIf(e1,attrs) ->
    bstm|[
      if(e_check){
        bstm*
      }
    ]|
    with bstm* := <xml-attrs-to-java-inner> attrs
       ; e_check := <expression-to-java-servlet> e1

  xml-attr-to-java :
    XMLAttributesIfElse(e1,attrsif,attrselse) ->
    bstm|[
      if(e_check){
        bstm_if*
      }
      else {
        bstm_else*
      }
    ]|
    with bstm_if* := <xml-attrs-to-java-inner> attrsif
       ; bstm_else* := <xml-attrs-to-java-inner> attrselse
       ; e_check := <expression-to-java-servlet> e1

rules

  xml-attr-to-java :
    p@<?PropertySubmitMultiple(_,_) <+ ?PropertySubmit(_,_)> -> bstm|[ out.print(org.webdsl.tools.Utils.showAttributeEscapeHtml("~x",e_java)); ]|
    with  (x, e_java) := <actioncall-to-html-attr> p
