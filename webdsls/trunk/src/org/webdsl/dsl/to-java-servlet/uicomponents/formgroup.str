module org/webdsl/dsl/to-java-servlet/uicomponents/formgroup

imports
  libstrategolib

imports
  libwebdsl-front

rules // formgroup, which don't use tables for layout

  elem-to-java-servlet :
    TemplateCall("formgroup", args,passign*, elems) ->
    <wrap-common-context-code>
    bstm* |[
      bstm1*
      out.print("<fieldset "+e_attrs1+"><legend>");
      bstm_exptostring*
      out.print("</legend>");
      ps.enterFormGroupContext();
      bstm*
      ps.leaveFormGroupContext();      
      out.print("</fieldset>");
    ]|
    with  if <fetch(?PropertyAssignment("labelWidth",e1))> passign*
          then e2 := <expression-to-java-servlet> e1; bstm1* := bstm* |[ ps.formGroupLeftSize = String.valueOf(e2); ]|
          else bstm1* := [] end
        ; bstm* := <elems-to-java-servlet> elems
        ; if [arg] := args
          then bstm_exptostring* := <to-page-string-java-servlet> arg
          else bstm_exptostring* := []
          end
        ; e_attrs1 := <to-html-attrs> passign*

rules

  GenerateCodeJavaServlet = generate-java-servlet-formgroup-context-var; fail

  generate-java-servlet-formgroup-context-var :
    Application(qid, sections)
    ->
    <emit-java-code> compilation-unit|[
      package utils;
      
      public abstract class PageServlet {
        public String formGroupLeftSize = "150";
        
        public java.util.Stack<utils.FormGroupContext> formGroupContexts = new java.util.Stack<utils.FormGroupContext>();

        public utils.FormGroupContext getFormGroupContext() { 
          return formGroupContexts.peek();
        }
      
        public void enterFormGroupContext() { 
          formGroupContexts.push(new utils.FormGroupContext());
        }
      
        public void leaveFormGroupContext() { 
          formGroupContexts.pop();
        }
      
        public boolean inFormGroupContext() { 
          return !formGroupContexts.empty();
        }
        
        public java.util.Stack<String> formGroupContextClosingTags = new java.util.Stack<String>();
       
        public void formGroupContextsCheckEnter(PrintWriter out) {
          if(inFormGroupContext()){
            utils.FormGroupContext temp = getFormGroupContext();
            if(temp.isInLeftContext()) {
              out.print("<div style=\"clear:left; float:left; width: " + formGroupLeftSize + "px\">");
              formGroupContextClosingTags.push("left");
              temp.toRightContext();
            }           
            else {
              out.print("<div style=\"float: left;\">");
              formGroupContextClosingTags.push("right");
              temp.toLeftContext();
            }
          }
        }
    
        public void formGroupContextsCheckLeave(PrintWriter out) {
          if(inFormGroupContext()){
            utils.FormGroupContext temp = getFormGroupContext();
            String tags = formGroupContextClosingTags.pop();
            if(tags.equals("left")){
              temp.toRightContext();
              out.print("</div>");
            }
            else if(tags.equals("right")){
              temp.toLeftContext();
              out.print("</div>");
            }
          }
        }
        
        @Partial
        public void commonContextsCheckEnter(PrintWriter out) {
          formGroupContextsCheckEnter(out);
        }
        @Partial
        public void commonContextsCheckLeave(PrintWriter out) {
          formGroupContextsCheckLeave(out);
        }
      }
    ]|

rules

  wrap-formgroup-context-code :
    bstm* ->
    bstm* |[
      ps.formGroupContextsCheckEnter(out);
      bstm*
      ps.formGroupContextsCheckLeave(out);
    ]|
    