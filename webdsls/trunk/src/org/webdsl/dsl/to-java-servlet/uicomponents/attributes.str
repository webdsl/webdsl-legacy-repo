module org/webdsl/dsl/to-java-servlet/uicomponents/attributes

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
    
rules

  // CONTROL FLOW
  
  //attrsmap optimization, if there are no attrs, do not initialize a new one
  control-flow-emit-attrs-calls-map(|x_methodname) :
  passign* -> bstm_1*
  with bstm* := <filter(control-flow-emit-attrs-calls);concat> passign*
     ; if (0 := <length> bstm* ) then
         bstm_1* := <control-flow-emit-attrs-calls-map-def>
       else
         //for not built in templates, actioncalls need to be handled at the place where they were put in the attributes map, 
         //so the tcall number is set
         //not that property assignments are already translated by handle-actions-to-java-servlet,  
         //so they appear twice in the code. The first one however is needed to detect actioncalls to built in templates
         if "handleActions" := x_methodname then
           bstm_action* := <filter(attribute-handle-actions); concat> passign* 
         else
           bstm_action* := []
         end
       ; bstm_1* := bstm* |[
           bstm_action*
           Map<String,String> attrsmapout = new HashMap<String, String>();
           bstm*
         ]|
       end
  
  control-flow-emit-attrs-calls-map-def =
    !bstm* |[ Map<String,String> attrsmapout = TemplateCall.EmptyAttrs; ]|
  
    
  control-flow-emit-attrs-calls =
    control-flow-emit-attrs-calls-1 <+ control-flow-emit-attrs-calls-2
    
  control-flow-emit-attrs-calls-1 :
    tc@PropertySubmit(name, call@ActionCall(_,_)) -> bstm* |[
      attrsmapout.put("~name",e_val);
    ]|
    where actionident := <get-actionnumber> tc
        ; e_val := <ajax-action-call-to-exp(| e|[ "{_args_}" ]|, actionident, name)> call
    
  control-flow-emit-attrs-calls-2 :
    PropertyAssignment(name, val) -> bstm* |[
      attrsmapout.put("~name",e_val);
    ]|
    with e_val := <  control-flow-emit-attrs-value 
                  <+ expression-to-java-servlet
                  > val
  
  //translate identifiers
  control-flow-emit-attrs-value :
    val -> expr |[ "~val" ]|
    where <is-string> val    
  
  //USING ATTRIBUTES

  expression-to-java-servlet :
    EventCall(name,args) -> expr |[ utils.TemplateCall.getAttribute(attrs, "~name","").replace("{_args_}",e4) ]|
    with  e4 := <map(event-call-args-to-java-servlet);generate-addition-exp> args
    
  event-call-args-to-java-servlet :
    EventArg(name, e) -> e |[ "~name"+"=\"+encodePost("+e1+")+\"&" ]|
    with e1 := <expression-to-java-servlet> e
       
  ajax-action-call-to-exp(|e_extraparams, actionident, propname) :
    call@ActionCall(act, args) -> e |[ 
      "serverInvoke(\""+ThreadLocalServlet.getContextPath()+"/" + ThreadLocalPage.get().getActionTarget() +"\",\""+ e_actionid +"\", ["+ThreadLocalPage.get().getHiddenPostParamsJson() +/*+e_extraparams+*/ "],\""+ThreadLocalPage.get().getFormIdent()+"\", this, "+"~x_showloadingfeedback"+");" 
    ]| 
    with e_actionid := <action-id-encoding> (actionident, args)
       ; if <?"onclick" <+ ?"onsubmit"> propname //other events are better off without loading indicator (or loading indicator in the target placeholder)
         then x_showloadingfeedback := "true"
         else x_showloadingfeedback := "false"
         end

   //PROVIDING ATTRIBUTES    
  //event call to java
  assignment-to-html-attr :
    tc@PropertySubmit(x, call@ActionCall(_, _)) -> (x, e |[ "javascript:" + e2 ]|)
    where actionident := <get-actionnumber> tc
        ; e2 := <ajax-action-call-to-exp(| e|[ "" ]|, actionident, x)> call
        
        
  handle-actions-to-java-servlet =
    attribute-handle-actions; wrap-action-render-java-code
        
  //handle actions: Note that this code will be executed twice for not build in template calls: just before the template call (to support built ins),
  //and inside the template call, to make the tcall number match
  attribute-handle-actions: 
    tc@PropertySubmit(x, call@ActionCall(x_action, args)) ->
    bstm*|[
        String x_actionid = e_actionid;
        ~*<render-error-messages-with-error-template(|java:expr|[ x_actionid ]|,<ErrorTemplateAction>)> bstm*|[
        if(ThreadLocalPage.get().getParammap().get(x_actionid)!=null)
        {
          //always ajax behavior for these type of submits
          ThreadLocalPage.get().enableAjaxActionExecuted();
          
          x_action temp = (x_action)env.getAction("~x_action");
          temp.x_action(e*,x_actionid);
          return; 
        }
      ]|
    ]|
    with  e* := <map(expression-to-java-servlet)> args
        ; e_actionid := <action-id-encoding> (<get-actionnumber> tc, args) 
        ; x_actionid := <newname> "actionid"

rules //attribute selectors
  
  //attribute(String, String) function  
  call-to-java-servlet :
    exp |[ attribute(e1,e2) ]| -> expr |[ utils.TemplateCall.getAttribute(attrs, e3,e4) ]|
    with  e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java-servlet> e2   
          
  //attribute(String) function   
  call-to-java-servlet :
    exp |[ attribute(e1) ]| -> expr |[ utils.TemplateCall.getAttribute(attrs, e2) ]|
    with  e2 := <expression-to-java-servlet> e1
  
  convert-attribute-selectors-to-java-exp :
    AllAttributes() -> expr |[ utils.TemplateCall.getAllAttributes(attrs) ]|
     
  convert-attribute-selectors-to-java-exp :
    AllAttributeExceptExp(e1) -> expr |[ utils.TemplateCall.getAllAttributesExcept(attrs,e2) ]|
    with  e2 := <expression-to-java-servlet> e1
    
  convert-attribute-selectors-to-java-exp :
    AttributesExp(e1) -> expr |[ utils.TemplateCall.getAttributes(attrs,e2) ]|
    with  e2 := <expression-to-java-servlet> e1
