module org/webdsl/dsl/to-java-servlet/template-handle-actions

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules

  GenerateCodeJavaServlet = where(not(ThisEmail));log-time(handle-actions-java-servlet-template|"handle-actions-java-servlet-template"); fail
  
  handle-actions-java-servlet-template =
    ?def |[ define mod* x(farg*)  req*  { elem* } ]|
    ; where (    
      bstm1* := <  filter-elements-for-java-servlet-handling
                 ; map-handle-actions-to-java-servlet> elem*
      ; not(bstm1* := []))
    ; with(
      <generate-java-servlet-template-partial> 
        java |[ 
            @Partial
            protected void handleActionsInternal()
            {
              String ident = "";
              String forelementcounter = "0";
              int fallbackcounter = 0;              
              boolean inForLoop=false;
              int forLoopCounter = 0;
                
              bstm1*          
            }
        ]|)
 
//coming from elements to xhtml
strategies // lists of elements

  map-handle-actions-to-java-servlet= //alltd because only interested in control flow
    collect-om(handle-actions-to-java-servlet)
    ; concat-with-sublists //accept both bstm and bstm*

  formal-action-args-to-state-enc :
    listofwebdslexps -> javaexp 
    with javaexp := 
           <map(\ Arg(name,type) -> (Var(name),type) \)
            ; action-args-to-state-enc> listofwebdslexps

  actual-action-args-to-state-enc :
    listofwebdslexps -> javaexp 
    with javaexp := 
           <map(\ e -> (e,<get-type-anno> e) \)
            ; action-args-to-state-enc> listofwebdslexps
         
  action-args-to-state-enc :
    listofwexptypetuples -> javaexp 
    with javaexp := 
           <filter(action-id-param-encoding-java-servlet)
         ; ![ expr|[""]| | <id> ]
         ; generate-addition-exp> listofwexptypetuples 
  
  action-id-param-encoding-java-servlet :
    (e,srt) -> expr |[ e2 != null ? (e2.getVersion() == 0 ? "_" : e2.getId().toString()) : "null" ]|
    where <defined-java-type> srt
        ; not(GenericSort(_,_) := srt)
    with  e2 := <expression-to-java-servlet> e

  action-id-param-encoding-java-servlet :
    (e,srt) -> el
    where GenericSort(_,[x]) := srt
        ; <defined-java-type> x
    with //e2 := <to-page-string-java-servlet> e 
        e2 := <expression-to-java-servlet> e
      ; el := java|[ org.webdsl.tools.Utils.encodeIdList(e2) ]| 

/*
  action-id-param-encoding-java-servlet :
    e -> el
    where <get-type-anno;builtin-java-type> e
    with  el := <to-page-string-java-servlet> e
*/    
    
    
   // go through ast if form found, check formid , if button pressed , storinputs ,apply action
   // see control-flow-to-java-servlet and elements-to-java-servlet (form) and types/* (handle-action(-input) strategies)