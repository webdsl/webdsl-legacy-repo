module org/webdsl/dsl/to-java-servlet/template-handle-actions

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules

  formal-action-args-to-state-enc :
    listofwebdslexps -> javaexp 
    with javaexp := 
           <map(\ Arg(name,type) -> (Var(name),type) \)
            ; action-args-to-state-enc> listofwebdslexps

  actual-action-args-to-state-enc :
    listofwebdslexps -> javaexp 
    with javaexp := 
           <map(\ e -> (e,<get-type-anno> e) \)
            ; action-args-to-state-enc> listofwebdslexps
         
  action-args-to-state-enc :
    listofwexptypetuples -> javaexp 
    with javaexp := 
           <filter(action-id-param-encoding-java-servlet)
         ; ![ expr|[""]| | <id> ]
         ; generate-addition-exp> listofwexptypetuples 
  
  action-id-param-encoding-java-servlet :
    (e,srt) -> expr |[ e2 != null ? (e2.getVersion() == 0 ? "_" : e2.getId().toString()) : "null" ]|
    where <defined-java-type> srt
        ; not(GenericSort(_,_) := srt)
        ; not(<?RefSort(_)> srt)
    with  e2 := <expression-to-java-servlet> e
    
  //cannot use value of ref argument, since it may be changed during request processing
  action-id-param-encoding-java-servlet :
    (e,srt) -> expr |[ "ref" ]|
    where <?RefSort(_)> srt

  action-id-param-encoding-java-servlet :
    (e,srt) -> el
    where GenericSort(_,[x]) := srt
        ; <defined-java-type> x
    with e2 := <expression-to-java-servlet> e
       ; el := java|[ org.webdsl.tools.Utils.encodeIdList(e2) ]| 
    
   // go through ast if form found, check formid , if button pressed , storinputs ,apply action
   // see control-flow-to-java-servlet and elements-to-java-servlet (form) and types/* (handle-action(-input) strategies)