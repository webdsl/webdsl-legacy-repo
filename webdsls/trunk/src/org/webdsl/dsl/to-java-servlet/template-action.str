module org/webdsl/dsl/to-java-servlet/template-action

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet

rules // submit action call

  generate-submit-action-run-invoke(| x_action, e*) = generate-submit-action-run-invoke(| x_action, "ident", e*)

  generate-submit-action-run-invoke(| x_action, ident, e*) =
    !java:bstm|[ new x_action().run(threadLocalPageCached, getEnv(), getElementsContext(), e*, ident); ]|

  generate-submit-action-databind-phase(| x_action) =
    !java:bstm|[ threadLocalPageCached.actionToBeExecutedHasDisabledValidation = x_action.isValidationDisabled(); ]|

rules // action methods

  /**
   * Generate action method code
   */
  GenerateCodeJavaServlet = where(not(ThisEmail));log-time(generate-action-java-servlet-code|"generate-action-java-servlet-code"); fail

  //should only generate an action function
  generate-action-java-servlet-code :
    Action(amod*, x_action, farg*, Block(stat*)){anno*} ->
    <emit-java-code-local>
    compilation-unit|[
      package pkgname3;
      import pkgname2.*;
      import pkgname4.*;
      import utils.*;
      import java.io.*;
      import java.util.*;
      import org.webdsl.lang.Environment;

      public class x_action {

        //@TODO: get rid of getElementsContext() calls in action code, then this field is no longer needed     
        String elementsContext = null;
        public String getElementsContext(){
          return elementsContext;
        }
          
        ~*cbds_ignorevalidation*
          
        public void run(AbstractPageServlet threadLocalPageCached, Environment env, String elementsContext,  param*){
          this.elementsContext = elementsContext;
          if (!threadLocalPageCached.hasExecutedAction)
          {
            threadLocalPageCached.hasExecutedAction = true;
            try {
              bstm*

              //trigger data invariant validations
              e_HibSession.flush();
              if(!threadLocalPageCached.isRollback()){
                threadLocalPageCached.validateEntities();
              }
            }
            catch(utils.ValidationException ve){
              threadLocalPageCached.getValidationExceptions().add(ve.setName(actionident));
              threadLocalPageCached.setValidated(false);
            }
            catch(utils.MultipleValidationExceptions ve){
              for(utils.ValidationException vex : ve.getValidationExceptions()){
                threadLocalPageCached.getValidationExceptions().add(vex.setName(actionident));
              }
              threadLocalPageCached.setValidated(false);
            }
            catch(Exception excep)  {
              org.webdsl.logging.Logger.error("exception during execution of action", excep);
              threadLocalPageCached.getValidationExceptions().add(new utils.ValidationException(actionident,"An error occured while processing your request"));
              threadLocalPageCached.setValidated(false);
            }
            finally{
              //do the redirect if no exceptions occured and no validations failed
              if( threadLocalPageCached.isRedirected() && threadLocalPageCached.isValid() ){
                if(
                  // only important thing for redirects is the current request type (through ajax.js or regular form submit),
                  // to determine whether to do a response.sendRedirect or a command for ajax.js (relocate)
                  threadLocalPageCached.isAjaxRuntimeRequest()){
                    // it was an action submit through ajax.js runtime
                    ThreadLocalOut.peek().print("{ action: \"relocate\", value: \""+threadLocalPageCached.getRedirectUrl()+"\" },\n");
                }
                else{
                  // regular submit button form submit
                  try {
                    threadLocalPageCached.getResponse().sendRedirect(threadLocalPageCached.getRedirectUrl());
                  } catch (IOException ioe) { org.webdsl.logging.Logger.error("redirect failed", ioe); }
                }
              }
              //redirect to current page by default
              if( !threadLocalPageCached.isRedirected() && !threadLocalPageCached.isDownloadSet() && threadLocalPageCached.isValid() ){
                try {
                  if (!threadLocalPageCached.isAjaxActionExecuted()) {
                    threadLocalPageCached.setRedirectUrl(threadLocalPageCached.getPageUrlWithParams() + threadLocalPageCached.getExtraQueryAruments("?"));
                    if(!threadLocalPageCached.isActionLinkUsed()){ threadLocalPageCached.getResponse().sendRedirect(threadLocalPageCached.getRedirectUrl()); }
                  }
                  if(!threadLocalPageCached.actionHasAjaxPageUpdates){
                  	ThreadLocalOut.peek().print("{ action: \"refresh\" },");
                  }
                } catch (IOException ioe) {
                  org.webdsl.logging.Logger.error("redirect failed", ioe);
                }
              }
            }
          }
        }
      }
    ]|
    with
    {| InAction :
         rules(InAction := <id>)
       ; param* := <add-input-id-for-action-as-param;map(arguments-to-java-servlet<+debug(!"map failed in template-action.str"))> farg*
       ; bstm* := <statements-to-java-servlet> stat*
    |}
    ; pkgname2 := <DomainPackage>
    ; pkgname3 := <ActionPackage>
    ; if <fetch(ActionModifierIgnoreValidation)> amod*
      then cbds_ignorevalidation* := [ class-body-dec|[ public static boolean isValidationDisabled(){ return true; } ]| ]
      else cbds_ignorevalidation* := [ class-body-dec|[ public static boolean isValidationDisabled(){ return false; } ]| ] end
    ; pkgname4 := <TemplatePackage>
    ; x_template := <ThisTemplateClassName>

  add-input-id-for-action-as-param :
    params -> <concat> [params,[Arg("actionident",SimpleSort("String"))]]
