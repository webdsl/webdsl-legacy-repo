module org/webdsl/dsl/to-java-servlet/template-action

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules // action methods

  /**
   * Generate action method code
   */
  GenerateCodeJavaServlet = where(not(ThisEmail));log-time(generate-action-java-servlet-code|"generate-action-java-servlet-code"); fail

  //should only generate an action function
  generate-action-java-servlet-code :
    webdsl |[ action x_action(farg*) { stat* } ]| ->
    (<generate-java-servlet-template-partial>
    java |[
      @Partial
      private void initializePassOn()
      {
        env.putAction(
          "~x_action"
        ,
          new x_action(){  
            public void x_action(param*)
            {
              if (!ps.hasExecutedAction)
              {
                boolean isRedirected = false;
                boolean actionFailed = false;
                ps.hasExecutedAction = true; 
                try {
                  bstm*
                } 
                catch(utils.ValidationException ve){
                  ps.getValidationExceptions().add(ve.setName(actionident));
                  ps.clearHibernateCache();
                  //System.out.println("cache clear on action fail");
                  actionFailed = true;                 
                }
                catch(utils.MultipleValidationExceptions ve){
                  for(utils.ValidationException vex : ve.getValidationExceptions()){
                    ps.getValidationExceptions().add(vex.setName(actionident));
                  }
                  ps.clearHibernateCache();
                  //System.out.println("cache clear on action fail");              
                  actionFailed = true;
                }
                catch(Exception excep)  {
                  System.out.println("exception");
                  ps.clearHibernateCache();
                  //System.out.println("cache clear on action fail");
                  excep.printStackTrace();               
                  ps.getValidationExceptions().add(new ValidationException(actionident,"An error occured while processing your request"));
                  actionFailed = true;
                  //throw new RuntimeException(excep);
                }
                //redirect to current page by default
                finally{
                  if(!isRedirected && !ps.isDownloadSet() && !actionFailed){
                    try {
                      if (!PageServlet.isAjaxApp) {
                        response.sendRedirect(ps.getPageUrlWithParams());
                      }
                    } catch (IOException ioe) {
                      System.out.println("redirect failed");
                      ioe.printStackTrace();
                    }
                  }
                }
              }
            }
          }  
        );
      }
    
    ]|
    ,<emit-java-code>
    compilation-unit|[
      package pkgname3;
      import pkgname2.*;
      public interface x_action{
        public void x_action(param*);
      }
    ]|
    )
    with  
    {| InAction :
         rules(InAction := <id>)
       ; param* := <add-input-id-for-action-as-param;map(arguments-to-java-servlet<+debug(!"map failed in template-action.str"))> farg*
       ; bstm* := <statements-to-java-servlet> stat*
    |}
    ; pkgname2 := <DomainPackage>
    ; pkgname3 := <ActionPackage>
  
  add-input-id-for-action-as-param :
    params -> <concat> [params,[Arg("actionident",SimpleSort("String"))]]
    