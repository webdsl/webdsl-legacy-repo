module org/webdsl/dsl/to-java-servlet/template-action

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules // action methods

  /**
   * Generate action method code
   */
  GenerateCodeJavaServlet = generate-action-java-servlet-code; fail

  //should only generate an action function
  generate-action-java-servlet-code :
    webdsl |[ action x_action(farg*) { stat* } ]| ->
    (<generate-java-servlet-template-partial>
    java |[
      @Partial
      private void initialize()
      {
        actionclasses.put(
          "~x_class"
        ,
          new x_class(){  
            public void x_action(param*)
            {
              //cancel hibernate hack
              boolean _persist_flag_ = false;
              
              bstm*
              
              //cancel hibernate hack
              if(!_persist_flag_)
              {
                java.util.Set<String> variables_set= variables.keySet();
                for(String s: variables_set)
                {
                  hibSession.refresh(variables.get(s));
                }
              }
            }
          }  
        );
      }
    
    ]|
    ,<emit-java-code>
    compilation-unit|[
      package pkgname3;
      import pkgname2.*;
      public interface x_class{
        public void x_action(param*);
      }
    ]|
    )
    with  
    {| InAction :
         rules(InAction := <id>)
       ; param* := <map(arguments-to-java-servlet<+debug(!"map failed in template-action.str"))> farg*
       ; bstm* := <statements-to-java-servlet> stat*
    |}
    ; pkgname2 := <DomainPackage>
    ; pkgname3 := <ActionPackage>
    ; _{x_class} := x_action


/*
        java |[ 
            @Partial
            private void handleActions()
            {
              {
              String action = request.getParameter("~x_action"+uniqueid);
              if(action != null)
              {
              
                
                  //only validate for submitted forms   
                  //validation
                  //if(name.equals("bob"))
                  //{
                  //    ps.setValidated(false);
                  //    validated=false;
                  //}
                  
                  //if(validated){
                  //  save();
                  //}
                  //else
                  //{
                      //restore entities
                  //    ps.getHibSession().refresh(u1);
                  //}
                  
                bstm*
              } 
              else
              {
                  //not necessarily error, could be that the action is handled in template
              }
              
              }          
            }
        ]|
*/

