module org/webdsl/dsl/to-seam/data-validation-render

imports 
  libstrategolib  
  Java-15
  libjava-front 
  
imports 
  libwebdsl-front
  
rules

  elem-to-java-servlet :
    tc@elem|[ validate(e1,e2)[passign*]{} ]| -> bstm* |[
      if(inSubmittedForm && !e3){
        bstm_exptostring*
      }
    ]|
    with  bstm_exptostring* := <to-page-string-java-servlet(|"utils.HTMLFilter.filter")> e2
        ; e3 := <expression-to-java-servlet> e1
        
  elem-to-java-servlet :
    tc@elem|[ validationErrorFor(e1)[passign*]{} ]| -> bstm* |[
      if(inSubmittedForm){
        java.util.List<utils.ValidationException> x = new java.util.LinkedList<utils.ValidationException>();
        for(utils.ValidationException ve : ps.getValidationExceptions()){
          Object x1 = ps.getOldValuesForInputs().get(e2);
          if(x1==null?ve.getRelevantObjects().contains(e2):ve.getRelevantObjects().contains(x1)){
            x.add(ve);
          }
        }
        for(utils.ValidationException ve : x){
          out.print(utils.HTMLFilter.filter(ve.getErrorMessage()));
          ps.getValidationExceptions().remove(ve);
        }
      }
    ]|
    with  e2 := <expression-to-java-servlet> e1
        ; x := <newname> "ve"
        ; x1 := <newname> "object"

rules

  assignment-to-html-attr = ?PreDeriveInputDone()
  
rules

  render-validation-exceptions :
    x ->
    bstm* |[
      for(utils.ValidationException ve : ps.getValidationExceptions()){
        out.print(utils.HTMLFilter.filter(ve.getErrorMessage()));
      }
    ]|