module org/webdsl/dsl/to-seam/validate-statement

imports 
  libstrategolib  
  Java-15
  libjava-front 
  
imports 
  libwebdsl-front
  
rules

  validate-to-java-servlet :
    stat |[ validate(e1,e2); ]| -> <data-validation-to-java-servlet-helper> (e |[ null ]|,e1,e2)

  validate-to-java-servlet :
    stat |[ x:validate(e1,e2); ]| -> <data-validation-to-java-servlet-helper> (e |[ "~x" ]|,e1,e2)
    
  validate-to-java-servlet :
    ValidateAnno(e1,e2) -> <data-validation-to-java-servlet-helper> (e |[ null ]|,e1,e2)

  validate-to-java-servlet :
    NamedValidateAnno(x,e1,e2) -> <data-validation-to-java-servlet-helper> (e |[ "~x" ]|,e1,e2)
        
  data-validation-to-java-servlet-helper :
    (e0,e1,e2) ->
    bstm |[
      if(!e3){
        throw e6;
      }
    ]|
    with e3 := <expression-to-java-servlet> e1 //expression types should be checked by typechecker
       ; e4 := <expression-to-java-servlet> e2
       ; usedobjects := <collect(?FieldAccess(_,_) <+ ?Qualified(_,_) <+ ?Var(_))> e1
       ; e5 := e|[new utils.ValidationException(e0,e4)]|
       ; e6 := <add-relevant-objects(|usedobjects)> e5
    
  add-relevant-objects(|usedobjects) :
    e -> <add-relevant-objects(|xs)> e|[ ps.getOldValuesForInputs().get(e2)==null?e.addRelevantObject(e2):e.addRelevantObject(ps.getOldValuesForInputs().get(e2)) ]|
    where not([] := usedobjects)
        ; [e1|xs] := usedobjects
        ; e2 := <expression-to-java-servlet> e1
        
  add-relevant-objects(|usedobjects) :
    e -> e
    where [] := usedobjects
    