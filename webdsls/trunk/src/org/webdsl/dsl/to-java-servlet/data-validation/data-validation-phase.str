module org/webdsl/dsl/to-java-servlet/data-validation-phase

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules

  GenerateCodeJavaServlet = where(not(ThisEmail)); log-time(data-validation-phase|"data-validation-phase"); fail
  
  data-validation-phase =
    ?def |[ define mod* x(farg*) { elem* } ]|
    ; where (    
      bstm1* := <  filter-elements-for-java-servlet-handling
                 ; collect-data-validation-to-java-servlet> elem*
      ; not(bstm1* := []))
    ; with(
      <generate-java-servlet-template-partial> 
        java |[ 
            @Partial
            private void validateInputsInternal() {
              String ident = "";
              String forelementcounter = "0";
              int fallbackcounter = 0;
              boolean inForLoop=false;
              int forLoopCounter = 0;
              
              bstm1*    
            }
        ]|)
 
strategies 

  collect-data-validation-to-java-servlet= //alltd because only interested in control flow
    collect-om(data-validation-to-java-servlet)
    ; concat-with-sublists //accept both bstm and bstm*
    
rules

  data-validation-to-java-servlet : 
    tc@TemplateCall("form", [],passign*, TemplateBody(elems)) ->
    bstm* |[
      {
        ident += ~<for-loop-counter-wrap-code-expr> e|[ "~formident"+uniqueid ]|;
        
        if(ps.getParammap().get(ident)!=null)
        {
          ps.setInSubmittedForm(true); 
          bstm*
        }

        ps.setInSubmittedForm(false);
      }
    ]|
    with  bstm* := <collect-data-validation-to-java-servlet> elems
        ; formident := <get-formnumber> tc

rules

  java-servlet-element-id :
    tc@elem|[ validate(e1,e2)[passign*]{} ]|-> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  data-validation-to-java-servlet : 
    tc@elem|[ validate(e1,e2)[passign*]{} ]| ->
    <wrap-input-java-code(|passign*)>
    bstm* |[
      ident += "~inputident"+uniqueid;
      ~*<wrap-validation-context-code-store-inputs> bstm*|[    
        if(ps.inSubmittedForm() && !e3){
          //throw new utils.ValidationException(ident,e4);
          ps.getValidationExceptions().add(new utils.ValidationException(ps.getValidationContext(),e4));
          ps.setValidated(false);  
        }
      ]|
    ]|
    with  inputident := <get-inputnumber> tc
        ; e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java-servlet> e2
