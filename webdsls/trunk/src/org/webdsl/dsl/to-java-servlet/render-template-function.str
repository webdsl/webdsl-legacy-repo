module org/webdsl/dsl/to-java-servlet/render-template-function

imports
  libstratego-lib
  libjava-front
  libwebdsl-front

rules 

  call-to-java-servlet :
    tc@RenderTemplateFunctionCall(TemplateCall(name, arg*, passign*, body*){anno*}) -> expr |[ ((utils.PageServlet)ThreadLocalPage.get()).renderTemplate(e_name, e_args, e_env) ]|
    where not(has-anno(|NoEnclosingDefine()))
    with  (e_name, e_args, e_env) := <render-template-function-call-helper> (name, arg*, passign*)    

  call-to-java-servlet :
    tc@RenderTemplateFunctionCall(TemplateCall(name, arg*, passign*, body*){anno*}) -> expr |[ ((utils.PageServlet)ThreadLocalPage.get()).renderTemplate(e_name, e_args, e_env) ]|
    where has-anno(|NoEnclosingDefine())
    with  (e_name, e_args, e_env) := <render-template-function-call-helper-no-enclosing-define> (name, arg*, passign*)   

  call-to-java-servlet :
    tc@ValidateTemplateFunctionCall(TemplateCall(name, arg*, passign*, body*){anno*}) -> expr |[ ((utils.PageServlet)ThreadLocalPage.get()).validateTemplate(e_name, e_args, e_env) ]|
    where not(has-anno(|NoEnclosingDefine()))
    with  (e_name, e_args, e_env) := <render-template-function-call-helper> (name, arg*, passign*)   

  call-to-java-servlet :
    tc@ValidateTemplateFunctionCall(TemplateCall(name, arg*, passign*, body*){anno*}) -> expr |[ ((utils.PageServlet)ThreadLocalPage.get()).validateTemplate(e_name, e_args, e_env) ]|
    where has-anno(|NoEnclosingDefine())
    with  (e_name, e_args, e_env) := <render-template-function-call-helper-no-enclosing-define> (name, arg*, passign*)
             	
  render-template-function-call-helper:
  	(name, arg*, passign*) -> (e_name, e_args, e_env)   
    with  (e_name, e*, e_env) := <render-template-function-call-helper-common> (name, arg*, passign*)
        ; e_args := <add-extra-arg-for-local-redefinition> (java:expr|[ new Object[]{ e* } ]|, e_name)
             	
  render-template-function-call-helper-no-enclosing-define:
  	(name, arg*, passign*) -> (e_name, e_args, e_env)   
    with  (e_name, e*, e_env) := <render-template-function-call-helper-common> (name, arg*, passign*)
        ; e_args := java:expr|[ new Object[]{ e* } ]|
  
  render-template-function-call-helper-common :
  	(name, arg*, passign*) -> (e_name, e*, e_env)   
  	with  e* := <map(expression-to-java-servlet)> arg*
        ; e_name := <template-name-to-name-expr> name
        ; liftedtemplates := <filter(?TemplateCall(_,_,_,_))> passign*
        ; e_env_initial := expr|[ new Environment(org.webdsl.lang.Environment.getLocalOrGlobalEnv()) ]| // make new environment that will hold both the lookup registration of the lifted template, as well as the templatecall object that refers to it. 
        ; e_env := <control-flow-emit-with-calls-map> (passign*,<lifted-template-load-template-map-helper> (liftedtemplates,e_env_initial)) // in this case (rendertemplate used outside of template def) the lifted template is registered on the fly, instead of in advance with loadTemplateMap

  template-name-to-name-expr :
    name -> e_name
    with e_name := <create-elements-call-name <+ !Lit(String([Chars(<id>)]))> name
    
rules // skip the normal template code generation for template calls inside a rendertemplate, the generic traversal in the body of templates would otherwise pick them up
  
  // the render phase does not use a generic traversal for code generation
  //elem-to-java-servlet :
  //  RenderTemplateFunctionCall(_) -> []
 
  handle-actions-to-java-servlet:
    RenderTemplateFunctionCall(_) -> []
 
  handle-actions-input-to-java-servlet:
    RenderTemplateFunctionCall(_) -> []
    
  data-validation-to-java-servlet :
  	RenderTemplateFunctionCall(_) -> []
 