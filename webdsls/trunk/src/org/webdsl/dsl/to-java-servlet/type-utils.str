module org/webdsl/dsl/to-seam/type-utils

imports 
  libstrategolib  
  Java-15
  libjava-front 
  
imports 
  libwebdsl-front
  
rules

  /**
   *  Converts a WebDSL type to a Java type
   */
  java-type =
    builtin-java-type 
  <+ defined-java-type
  <+ native-class-java-type
  <+ with(fail)
  
  defined-java-type = ?RefSort(<defined-java-type>)
  builtin-java-type = ?RefSort(<builtin-java-type>)

  defined-java-type =
      ?SimpleSort(x_class)
    ; has-entity-anno
    ; <java-type-entity> x_class
    
  // Convert WebDSL type to entity type, given the entity class name
  java-type-entity :
    x_class -> type|[ x ]|
    with  x := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]
  
  // Convert WebDSL type to entity name, given the entity class name
  java-type-entity-name :
    x_class -> x
    with  x := <java-type-entity;pp-java5-to-string> x_class
  
  /**
   *  Converts a WebDSL type to a Java type, returns it as a string
   */
  java-type-name :
    srt -> x_Class
    where x_Class := <java-type;pp-java5-to-string> srt   

  //override used by list and set, see types/collection.str
  java-type-default-value =
     type-default-value-override-java 
  <+ get-defvalue-anno ; expression-to-java-servlet
  <+ ?RefSort(<java-type-default-value>)
  <+ with(fail)

  persistence-annotations =
    builtin-persistence-annotations <+ ![]
   
rules //webdsl arguments to java types

  argument-java-servlet-java-type:
    Arg(x,srt) -> t
    where <not(is-ref-type)> srt
        ; t := <java-type> srt
  argument-java-servlet-java-type:
    Arg(x,srt) -> t
    where <is-ref-type> srt
        ; t := ClassOrInterfaceType(TypeName(Id("utils.RefArg")),None())

  // give just the name of the type, (eg. for use in a cast)
  argument-java-servlet-type:
    Arg(x,srt) -> x_Class
    where x_Class := <java-type-name> srt      
   
rules //webdsl formal argument to java formal argument 
  
  arguments-to-java-servlet :  
    arg@Arg(x,srt) -> param |[ t x ]|
    where not(<is-ref-type> srt)
    with  t := <argument-java-servlet-java-type> arg
    
  arguments-to-java-servlet :  
    arg@Arg(x,srt) -> param |[ utils.RefArg x ]|
    where <is-ref-type> srt
    
rules
  
  has-ref-type = where(get-type-anno;is-ref-type)

  remove-ref-type :
    x{anno*} -> x{anno1*} 
    with anno1* := <map(try(remove-ref-type-from-anno))> anno*
  remove-ref-type-from-anno :
    TypeAnno(a{anno*}) -> TypeAnno(a{anno1*}) 
    with anno1* := <remove-all(IsRefSort)> anno*
