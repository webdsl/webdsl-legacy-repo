 module org/webdsl/dsl/to-java-servlet/java-page

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/to-java-servlet

rules

  java-servlet-page-name :
    x -> <concat-strings> [x1,"Page"]
    with  x1     := <capitalize-string> x
 /*
  java-servlet-page-template-name :
    x -> <concat-strings> [x1,"Page","Template"]
    with  x1     := <capitalize-string> x

  java-servlet-template-name :
    x -> <concat-strings> [x1,"Template"]
    with  x1     := <capitalize-string> x

  java-servlet-local-template-name :
    (x, x_pagetempl) -> <concat-strings> [x2,x1,"LocalTempl"]
    with  x1     := <capitalize-string> x
        ; x2     := <capitalize-string> x_pagetempl
*/
rules

  page-class-generation-test =
    where (
      not(ThisEmail)
    ; get-page-class-name
    )

  get-page-class-name = (JavaThisPage <+ ThisAjaxTemplateName); java-servlet-page-name

  generate-java-servlet-partial =
    ? cbds
    ; page-class-generation-test
    ; pkgname := <TemplatePackage>
    ; x_Page  := <get-page-class-name>
    //also allow a single class-body-declaration
    ; with (
        if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
      ; <emit-java-code-local>
          compilation-unit|[
            package pkgname;
            import utils.*;

            @Partial
            public class x_Page extends PageServlet{
              ~*cbds*
            }
          ]|
    )
    ; !cbds

rules
  /**
   * Generate base bean code
   */
  GenerateCodeJavaServlet = generate-java-servlet-page; fail

  generate-java-servlet-page :
    def@def|[ define mod* x_page (farg*)  req*  { elem* } ]| ->
    <emit-java-code-local> compilation-unit|[
        package pkgname;

        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.List;
        import java.util.Map;
        import java.util.Set;

        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;

        import org.hibernate.Session;
        import org.apache.commons.lang3.ArrayUtils;

        import utils.*;
        import org.webdsl.lang.Environment;
        import utils.TemplateCall;

        import pkgname_domain.*;

        @Partial
        @SuppressWarnings("all")
        public class x_Page extends PageServlet
        {

          @Partial
          protected void initialize(){}

          @Partial
          protected void conversion(){}

          @Partial
          protected void loadArguments () {}//previously argumentInitialize

          public String getPageName()
          {
            return "~x_page";
          }

          /* problem with merging? */
          @Partial
          public void hiddenParams(java.lang.StringBuilder combinedparams){}

          public String getHiddenParams()
          {
            java.lang.StringBuilder hiddens = new java.lang.StringBuilder(512);
            hiddenParams(hiddens);
            return hiddens.toString();
          }

          @Partial
          public void hiddenPostParams(java.lang.StringBuilder combinedparams){}

          public String getHiddenPostParams()
          {
            java.lang.StringBuilder hiddens = new java.lang.StringBuilder(512);
            hiddenPostParams(hiddens);
            return hiddens.toString();
          }

          @Partial
          public void hiddenPostParamsJson(java.lang.StringBuilder combinedparams){}

          public String getHiddenPostParamsJson()
          {
            java.lang.StringBuilder hiddens = new java.lang.StringBuilder(512);
            hiddenPostParamsJson(hiddens);
            return hiddens.toString();
          }

          protected void initVarsAndArgs(){
            GlobalVariables.initGlobalVars(env, e_HibSession);
            initialize();
            envGlobalAndSession = env;
            conversion();
            loadArguments();

            Object[] args = { e* };
            this.args = args;
          }

          protected void initTemplateClass(){
            templateservlet = new x_specialpagetemplate();
          }

          protected void redirectHttpHttps(){
            bstm_redirecthttps*
          }

          protected void addPrincipalToRequestLog(org.webdsl.WebDSLEntity rle){
            ~*<if ACPrincipalAvailable then ![ bstm*|[ ((pkgtname_domain.RequestLogEntry)rle).setPrincipalNoEventsOrValidation(((pkgtname_domain.SecurityContext)env.getVariable("securityContext")).getPrincipal()); ]| ] else ![] end>[]
          }

          protected org.webdsl.WebDSLEntity getRequestLogEntry(){
              return ((utils.DispatchServletHelper) ThreadLocalServlet.get()).getRequestLogEntry();
          }

          protected void addLogSqlToSessionMessages(){
            if(this.isLogSqlEnabled()){ // Cannot use (parammap.get("logsql") != null) here, because the parammap is cleared by actions
              if(logSqlCheckAccess()){
                ((pkgtname_domain.SessionManager)ThreadLocalServlet.get().getSessionManager()).setLogsqlMessageNoEventsOrValidation(utils.HibernateLog.printHibernateLog(this, "action"));
              }
              else{
                ((pkgtname_domain.SessionManager)ThreadLocalServlet.get().getSessionManager()).setLogsqlMessageNoEventsOrValidation("Access to SQL logs was denied.");
              }
            }
          }

          protected void initializeBasics(AbstractPageServlet ps, Object[] args, Environment env) {
            initTemplateClass();

            this.envGlobalAndSession = ps.envGlobalAndSession;
            this.request=ps.getRequest();
            this.env = env;
            this.response=ps.getResponse();
            this.parammap = ps.getParammap();
            this.parammapvalues = ps.getParammapvalues();
            this.fileUploads=ps.getFileUploads();
            Session hibSession = e_HibSession;
            ThreadLocalServlet.get().loadSessionManager(e_HibSession);

            bstm_args*

            initialize();

          }

          protected String[] getUsedSessionEntityJoins() {
            return e_SessionPrefetch;
          }

          @Partial
          protected void storeSessionEntities(){}

          protected void renderDebugJsVar(java.io.PrintWriter sout){
            ~*<!bstm*|[
                sout.println("<script type=\"text/javascript\">var show_webdsl_debug=false;</script>");
              ]|
            ; if-debug(!bstm*|[
                sout.println("<script type=\"text/javascript\">var show_webdsl_debug=true;</script>");
              ]|)>
          }

          protected boolean logSqlCheckAccess(){
            bstm_logsqlchecksetup*
            return e_logsqlaccesscontrolcheck;
          }

          protected boolean isTemplate() { return e_istemplate; }

          public String getUniqueName() {
            return "~x_page";
          }

        }
      ]|
    where x_Page    := <get-page-class-name>
        ; page-class-generation-test
    with pkgname    := <TemplatePackage>
       ; pkgname_domain   := <DomainPackage>
       ; pkgtname_domain  := pkgname_domain
       ; x_specialpagetemplate := <ThisTemplateClassName>
       ; sents := <get-anno(?SessionEntities(<id>))> def
       ; e_SessionPrefetch := <get-session-prefetch> sents
       ; e* := <filter({\arg@farg|[ x : srt ]| -> var-init|[ x ]| \})> farg* //just pass args of page to special pagetemplate
       ; bstm_args* := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> bstm|[ x = (x_arg) args[x_index]; ]|
                                         where x_index := <subti;int-to-string> (index,1)
                                             ; if <?Arg(_,RefSort(_))> arg
                                               then x_arg := "utils.RefArg"
                                               else x_arg := <argument-java-servlet-type> arg end
                                      \})> farg* //variables are generated in java-template-vars
       ; e_istemplate := <JavaThisPage; !java|[ false ]| <+  !java|[ true ]|>
       ; if <fetch(TempateModSecure)> mod*
         then bstm_redirecthttps* :=
                java:bstm*|[ if(!isActionSubmit() && request.getRequestURL().toString().startsWith("http://")){
                               try{ response.sendRedirect(utils.UrlTransform.convertToHttpsUrl(request.getRequestURL().toString())); }
                               catch(IOException ioe){ org.webdsl.logging.Logger.error("EXCEPTION",ioe); }
                               return;
                             } ]|
         else
             if <fetch(TemplateModNotSecure)> mod*
             then bstm_redirecthttps* :=
                    java:bstm*|[ if(!isActionSubmit() && request.getRequestURL().toString().startsWith("https://")){
                                   try{ response.sendRedirect(utils.UrlTransform.convertToHttpUrl(request.getRequestURL().toString())); }
                                   catch(IOException ioe){ org.webdsl.logging.Logger.error("EXCEPTION",ioe); }
                                   return;
                                 } ]|
             else bstm_redirecthttps* :=[]
             end
         end
         //access control for ?logsql
       ; logsqlcheck := <if logsqlchecktmp := <LogSqlAccessControlCheck> then !logsqlchecktmp else ACPrincipalAvailable;!False() <+ !True() end>
       ; bstm_logsqlchecksetup* := <get-external-vars> logsqlcheck
       ; e_logsqlaccesscontrolcheck := <expression-to-java-servlet> logsqlcheck

  /**
   *  Used for output(Image) and output(File)
   */
  action-call-with-get-param-name = !"action-call-with-get-request-type"

  get-session-prefetch = !expr |[ null ]|
    /*?sents
    ; prefetches := <JavaThisPagePrefetches <+ ![]>
    ; <filter(get-session-prefetch(|prefetches))> sents
    ; flatten-list
    ; string-list-to-java-servlet-or-null*/

  get-session-prefetch(|prefetches) :
    sent -> joins
    where pf := <get-prefetch-for(|sent)> prefetches
    ; not(None() := pf)
    ; joins := <get-to-one-joins; add-session-property-to-joins(|sent)> pf

  add-session-property-to-joins(|sent) :
    [] -> [join]
    with join := <concat-strings> ["_", sent]

  add-session-property-to-joins(|sent) :
    [join|joins] -> [join2|joins2]
    with join2 := <concat-strings> ["_", sent, ".", join]
    ; joins2 := <add-session-property-to-joins(|sent)> joins
