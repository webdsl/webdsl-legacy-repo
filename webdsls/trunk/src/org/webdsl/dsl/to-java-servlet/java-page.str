 module org/webdsl/dsl/to-java-servlet/java-page

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules
  
  java-servlet-page-name :
    x -> <concat-strings> [x1,"Page"]
    with  x1     := <capitalize-string> x
 /*
  java-servlet-page-template-name :
    x -> <concat-strings> [x1,"Page","Template"]
    with  x1     := <capitalize-string> x
   
  java-servlet-template-name :
    x -> <concat-strings> [x1,"Template"]
    with  x1     := <capitalize-string> x
    
  java-servlet-local-template-name :
    (x, x_pagetempl) -> <concat-strings> [x2,x1,"LocalTempl"]
    with  x1     := <capitalize-string> x
        ; x2     := <capitalize-string> x_pagetempl
*/
rules

  generate-java-servlet-partial =
    ? cbds
    ; pkgname    := <BeanPackage>
    ; x_Page := <ThisPage; java-servlet-page-name>
    //also allow a single class-body-declaration
    ; if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
    ; <emit-java-code>
        compilation-unit|[
          package pkgname;
          @Partial
          public class x_Page{
            ~*cbds*
          }
        ]|


rules
  /**
   * Generate base bean code
   */
  GenerateCodeJavaServlet = generate-java-servlet-page; fail

  generate-java-servlet-page :
    def|[ define mod* x_page (farg*) { elem* } ]| ->
    <emit-java-code> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.List;
        import java.util.Map;
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        
        import utils.*;
        
        import pkgname2.*;

        @Partial
        public class x_Page extends PageServlet
        {
        
          //templates scope
          private static HashMap<String, Class> templates = PageServlet.getTemplates();
          
          private HashMap<String, Object> variables = new HashMap<String, Object>();
          private HashMap<String, Object> actionclasses = new HashMap<String, Object>();
        
          @Partial
          private void initialize()
          {
          }   
        
          @Partial
          private void conversion(){}     
          
          @Partial
          private void loadArguments () {}//previously argumentInitialize

          //@Partial
          //private void initialize(){}
           
          
          boolean validated=true;
          Session hibSession;
          private HttpServletRequest request;
          private HttpServletResponse response;
          private Object[] args;

          private java.util.Map<String, String> parammap;
          public java.util.Map<String, String> getParammap() {
            return parammap;
          }
                
          private Map<String,utils.File> fileUploads;
          public Map<String, utils.File> getFileUploads() {
            return fileUploads;
          }
          
          private Map<String, List<String>> parammapvalues;
          public Map<String, List<String>> getParammapvalues() {
            return parammapvalues;
          }
         
          public String getPageName()
          {
            return "~x_page";
          }
          
          /* problem with merging? */
          @Partial 
          public void hiddenParams(java.lang.StringBuffer combinedparams)
          {
          
          }
          
          public String getHiddenParams()
          {
            java.lang.StringBuffer hiddens = new java.lang.StringBuffer();
            hiddenParams(hiddens);
            return hiddens.toString();
          }
          
          @Partial 
          public void hiddenPostParams(java.lang.StringBuffer combinedparams)
          {
          
          }
          
          public String getHiddenPostParams()
          {
            java.lang.StringBuffer hiddens = new java.lang.StringBuffer();
            hiddenPostParams(hiddens);
            return hiddens.toString();
          }
                    
          x_specialpagetemplate templateservlet = new x_specialpagetemplate();
          
          public void serve(HttpServletRequest request, HttpServletResponse response, java.util.Map<String, String> parammap, Map<String, List<String>> parammapvalues, java.util.Map<String,utils.File> fileUploads)
          {

            this.request=request;
            this.response=response;
            this.parammap = parammap;
            this.parammapvalues = parammapvalues;
            this.fileUploads=fileUploads;
            session = request.getSession(true);
            
            hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
    
            hibSession.beginTransaction();
            try
            {	
              //very dirty and most ugly hibernate hack
              this.variables.put("_persist_flag_", new Boolean(false));
              
              initialize();
              conversion();
              loadArguments();
              //initialize();
              
              Object[] args = { e* };
              this.args = args;
              
              //call special pagetemplate
              
              templateservlet.storeInputs  (this, args, 1, (HashMap<String,Class>)templates.clone(),variables,actionclasses );
              
              java.io.StringWriter s = new java.io.StringWriter();
              java.io.PrintWriter out = new java.io.PrintWriter(s); 
              templateservlet.handleActions(this, args, 1, (HashMap<String,Class>)templates.clone(),variables,actionclasses, out);
              if (!this.hasExecutedAction || !PageServlet.isAjaxApp)
              {
                render(request,response);
              }
              else
                response.getWriter().write("[" + s.toString()+ "{}]");
              
              storeSessionEntities();
              
              hibSession.getTransaction().commit();
    
            }	
            catch (Exception ex) {
              System.out.println("exception occured: "+ex.getMessage());	
              ex.printStackTrace();
              hibSession.getTransaction().rollback();
            }   
          }
          
          
          @Partial
          private void storeSessionEntities(){}     
        
          private String pageTitle ="";
          
  
          public String getPageTitle() {
            return pageTitle;
          }

          public void setPageTitle(String pageTitle) {
              this.pageTitle = pageTitle;
          }  
          
          public void render(HttpServletRequest request,
                  HttpServletResponse response)
          throws ServletException, IOException {
            this.request=request;
            this.response=response;
        
            java.io.StringWriter s = new java.io.StringWriter();
            java.io.PrintWriter out = new java.io.PrintWriter(s); 
                
            //call special pagetemplate render
            templateservlet.render(this, args, 1,(HashMap<String,Class>)templates.clone(),variables,actionclasses,out);

            java.io.PrintWriter sout = response.getWriter();
            
            response.setContentType("text/html");
            
            sout.println("<html>");
            sout.println("<head>");
            sout.println("<title>"+getPageTitle().replaceAll("<[^>]*>","")+"</title>");
            
            bstm1*
            sout.println("<link href=\"/"+AppInfo.getAppName()+"/stylesheets/common_.css\" rel=\"stylesheet\" type=\"text/css\" />");
            sout.println("<link href=\"/"+AppInfo.getAppName()+"/stylesheets/dropdownmenu.css\" rel=\"stylesheet\" type=\"text/css\" />");
            sout.println("<script src=\"/"+AppInfo.getAppName()+"/javascript/dropdownmenu.js\" type=\"text/javascript\"></script>");
            sout.println("<script src=\"/"+AppInfo.getAppName()+"/javascript/ajax.js\" type=\"text/javascript\"></script>");
            sout.println("<script type=\"text/javascript\">window.onload = function () { init_dropdownmenu(); }</script>");
           
            sout.println("</head>");
            sout.print("<body>");
            
            s.flush();
            sout.write(s.toString());
            
            sout.print("</body>");
            sout.println("</html>");
                  
          }
  
  
          public Session getHibSession() {
              return hibSession;
          }
      

          public HttpServletRequest getRequest() {
              return request;
          }
      
          public HttpServletResponse getResponse() {
              return response;
          }
  
          public boolean isValidated() {
              return validated;
          }
     
          public void setValidated(boolean validated) {
              this.validated = validated;
          }
        }
      ]|
    where x_page    := <ThisPage>
    with pkgname    := <BeanPackage>
       ; pkgname2   := <DomainPackage>
       ; x_Page     := <java-servlet-page-name> x_page
       ; x_specialpagetemplate := <ThisTemplateClassName>
       ; e* := <filter({\arg@farg|[ x : srt ]| -> var-init|[ x ]| \})> farg* //just pass args of page to special pagetemplate
       ; bstm1* :=  <map({\ 
                           x -> bstm |[ sout.println("<link href=\"/"+AppInfo.getAppName()+"/stylesheets/"+"~x"+".css\" rel=\"stylesheet\" type=\"text/css\" />"); ]| 
                         \})> 
                         <concat;make-set> [<bagof-AllStylesheets>,<bagof-StyleSheetsAllPages>]
                         
