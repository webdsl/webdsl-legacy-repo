 module org/webdsl/dsl/to-java-servlet/java-page

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules
  
  java-servlet-page-name :
    x -> <concat-strings> [x1,"Page"]
    with  x1     := <capitalize-string> x
 /*
  java-servlet-page-template-name :
    x -> <concat-strings> [x1,"Page","Template"]
    with  x1     := <capitalize-string> x
   
  java-servlet-template-name :
    x -> <concat-strings> [x1,"Template"]
    with  x1     := <capitalize-string> x
    
  java-servlet-local-template-name :
    (x, x_pagetempl) -> <concat-strings> [x2,x1,"LocalTempl"]
    with  x1     := <capitalize-string> x
        ; x2     := <capitalize-string> x_pagetempl
*/
rules

  page-class-generation-test =
    where (
      not(NestedTemplate <+ ThisEmail)
    ; get-page-class-name
    )
    
  get-page-class-name = (JavaThisPage <+ IsAjaxApp; ThisTemplateName); java-servlet-page-name

  generate-java-servlet-partial =
    ? cbds
    ; page-class-generation-test
    ; pkgname := <BeanPackage>
    ; x_Page  := <get-page-class-name>
    //also allow a single class-body-declaration
    ; with (
        if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
      ; <emit-java-code>
          compilation-unit|[
            package pkgname;
            import utils.*;
            
            @Partial
            public class x_Page extends PageServlet{
              ~*cbds*
            }
          ]|
    )
    ; !cbds

rules
  /**
   * Generate base bean code
   */
  GenerateCodeJavaServlet = generate-java-servlet-page; fail

  generate-java-servlet-page :
    def|[ define mod* x_page (farg*)  req*  { elem* } ]| ->
    <emit-java-code> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.List;
        import java.util.Map;
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        import org.apache.commons.lang.ArrayUtils;        
        
        import utils.*;
        import org.webdsl.lang.Environment;
        import utils.TemplateCall;
        
        import pkgname2.*;

        @Partial
        public class x_Page extends PageServlet
        {
          
          @Partial
          protected void initialize(){}   
        
          @Partial
          protected void conversion(){}     
          
          @Partial
          protected void loadArguments () {}//previously argumentInitialize
         
          public String getPageName()
          {
            return "~x_page";
          }
          
          /* problem with merging? */
          @Partial 
          public void hiddenParams(java.lang.StringBuffer combinedparams){}
          
          public String getHiddenParams()
          {
            java.lang.StringBuffer hiddens = new java.lang.StringBuffer();
            hiddenParams(hiddens);
            return hiddens.toString();
          }
          
          @Partial 
          public void hiddenPostParams(java.lang.StringBuffer combinedparams){}
          
          public String getHiddenPostParams()
          {
            java.lang.StringBuffer hiddens = new java.lang.StringBuffer();
            hiddenPostParams(hiddens);
            return hiddens.toString();
          }
                    
          x_specialpagetemplate templateservlet = new x_specialpagetemplate();
          
          protected void initVarsAndArgs(){
         
            initialize();
            envGlobalAndSession = env;
            conversion();
            loadArguments();
             
            Object[] args = { e* };
            this.args = args;
          }
          
          public void serve(HttpServletRequest request, HttpServletResponse response, Map<String, String> parammap, Map<String, List<String>> parammapvalues, Map<String,utils.File> fileUploads)
          {
            this.request=request;
            this.response=response;
            this.parammap = parammap;
            this.parammapvalues = parammapvalues;
            this.fileUploads=fileUploads;
            session = request.getSession(true);
            if(parammap.get("__action__link__") != null) {
              this.setActionLinkUsed(true);
            }
            
            hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
            hibSession.beginTransaction();
            hibSession.setFlushMode(org.hibernate.FlushMode.MANUAL);
            try
            {	
              retrieveIncomingMessagesFromHttpSession();
              
              initVarsAndArgs();

              templateservlet.storeInputs   (this, args, 1, new Environment(env), TemplateCall.None, TemplateCall.NoWithCalls, null);
              templateservlet.validateInputs(this, args, 1, new Environment(env), TemplateCall.None, TemplateCall.NoWithCalls, null);
              
              java.io.StringWriter s = new java.io.StringWriter();
              java.io.PrintWriter out = new java.io.PrintWriter(s); 
              if(validated) {
                templateservlet.handleActions(this, args, 1, new Environment(env), TemplateCall.None, TemplateCall.NoWithCalls, null, out);
              }
              else{
                clearHibernateCache();
                //System.out.println("cache clear on validation fail");
              }
              
              if(download != null) {
                download();
              }
              else {
                if ( ( !this.hasExecutedAction || hibernateCacheCleared )) {
                  if (!hibernateCacheCleared && ThreadLocalServlet.get().isPostRequest) {
                    System.out.println("Error: server received POST request but was unable to dispatch to a proper action"); 
                    response.getWriter().write("404 \n Error: server received POST request but was unable to a proper action");
                  }
                  else {
                    render(request,response);
                  }
                }
                else if (PageServlet.isAjaxApp && this.hasExecutedAction) {
                  response.getWriter().write("[" + s.toString()+ "{}]");
                }
                else if (this.hasExecutedAction && this.isActionLinkUsed()) {
                  //action link also uses ajax when ajax is not enabled
                  //, send only redirect location, so the client can simply set 
                  // window.location = req.responseText;
                  response.getWriter().write(this.getRedirectUrl());               
                }
              }
              storeSessionEntities();
              storeOutgoingMessagesInHttpSession();
              hibSession.flush();
              hibSession.getTransaction().commit();
             
            }	
            catch (Exception ex) {
              System.out.println("exception occured: "+ex.getMessage());	
              ex.printStackTrace();
              hibSession.getTransaction().rollback();
              
              throw new RuntimeException("serve page request failed");
            }
            finally{
              cleanup();            
            }
          }
          
          public void cleanup(){
            super.cleanup();
            cleanupPageArgAndVar();
            templateservlet = null;
          }
          
          public void initializeBasics(PageServlet ps, Object[] args, Environment env) {
            this.request=ps.getRequest();
            this.env = env;
            this.response=ps.getResponse();
            this.parammap = ps.getParammap();
            this.parammapvalues = ps.getParammapvalues();
            this.fileUploads=ps.getFileUploads();
            hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
            session = request.getSession(true);
            
            bstm_args*
            
            initialize();
            
          }
          
          @Partial private void cleanupPageArgAndVar(){ }
          
          @Partial
          private void storeSessionEntities(){}     
        
          public void render(HttpServletRequest request,
                  HttpServletResponse response)
          throws ServletException, IOException {
            this.request=request;
            this.response=response;
        
            java.io.StringWriter s = new java.io.StringWriter();
            java.io.PrintWriter out = new java.io.PrintWriter(s); 
                
            //call special pagetemplate render
            templateservlet.render(this, args, 1, new Environment(env), TemplateCall.None, TemplateCall.NoWithCalls, null, out);
          
            response.setContentType(getMimetype());
            
            java.io.PrintWriter sout = response.getWriter();
            if(!mimetypeChanged){
              sout.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">");
              sout.println("<html>");
              sout.println("<head>");
              sout.println("<title>"+getPageTitle().replaceAll("<[^>]*>","")+"</title>");
              
              sout.println("<link href=\""+ThreadLocalServlet.getContextPath()+"/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" />");
              sout.println("<link href=\""+ThreadLocalServlet.getContextPath()+"/stylesheets/common_.css\" rel=\"stylesheet\" type=\"text/css\" />");
              sout.println("<link href=\""+ThreadLocalServlet.getContextPath()+"/stylesheets/dropdownmenu.css\" rel=\"stylesheet\" type=\"text/css\" />");
              bstm1*
    
//            sout.println("<script src=\""+"~<AppRoot>"+"/javascript/dropdownmenu.js\" type=\"text/javascript\"></script>");
//            sout.println("<script src=\""+"~<AppRoot>"+"/javascript/ajax.js\" type=\"text/javascript\"></script>");
              bstm2*
              
              sout.println("<script type=\"text/javascript\">window.onload = function () { init_dropdownmenu(); }</script>");
             
              sout.println("</head>");
              sout.print("<body>");
              
              renderIncomingSuccessMessages(sout);
              
              s.flush();
            }
            sout.write(s.toString());
            if(!mimetypeChanged){
              sout.print("</body>");
              sout.println("</html>");
            }
          }
          
          public void serveAsAjaxResponse(PageServlet ps, PrintWriter theoutStream, Object[] args, Environment env, TemplateCall templateArg)
          { //use passed PageServlet ps here, since this is the context for this type of response
            initializeBasics(ps, args, env);
            
            this.isServingStandAloneTemplate = true;              
            this.standAloneTemplate = this.getUniqueName();
            templateservlet.render(this, args, 1, new Environment(env), templateArg, TemplateCall.NoWithCalls, null, theoutStream);
            
          }          
          
          public boolean IsTemplate() { return e_istemplate; }
          
          public String getUniqueName() {
            return "~x_page";
          }
        }
      ]|
    where x_Page    := <get-page-class-name>
        ; page-class-generation-test
    with pkgname    := <BeanPackage>
       ; pkgname2   := <DomainPackage>
       ; x_specialpagetemplate := <ThisTemplateClassName>
       ; e* := <filter({\arg@farg|[ x : srt ]| -> var-init|[ x ]| \})> farg* //just pass args of page to special pagetemplate
       ; bstm1* :=  <string-sort; map({\ 
                           x -> bstm |[ sout.println("<link href=\""+ThreadLocalServlet.getContextPath()+"/stylesheets/"+"~x"+".css\" rel=\"stylesheet\" type=\"text/css\" />"); ]| 
                         \})> 
                         <concat;make-set> [<bagof-AllStylesheets>,<bagof-StyleSheetsAllPages>]
       ; bstm2* :=  <readdir
                     ; filter({\ 
                          x -> x 
                          where !("javascript/",x); conc-strings; filemode; not(isdir)
                          \})
                     ; string-sort
                     ; map({\ 
                           x -> bstm |[ sout.println("<script src=\""+ThreadLocalServlet.getContextPath()+"/javascript/"+"~x"+"\" type=\"text/javascript\"></script>"); ]| 
                         \})> "javascript"
       ; bstm_args* := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> bstm|[ x = (x_arg) args[x_index]; ]|
                                         where x_index := <subti;int-to-string> (index,1)
                                             ; x_arg := <argument-java-servlet-type> arg
                                      \})> farg* //variables are generated in java-template-vars                   
       ; e_istemplate := <JavaThisPage; !java|[ false ]| <+  !java|[ true ]|>
