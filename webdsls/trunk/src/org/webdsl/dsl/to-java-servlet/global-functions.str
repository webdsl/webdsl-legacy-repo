module org/webdsl/dsl/to-java-servlet/global-functions

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/to-java-servlet

rules

  generate-java-servlet-global-function:
     f@Function(x,_,_,_) -> f
     with  where(name := <concat-strings> ["globalfunction_", x])
         ; cached-generate(emit-java-servlet-global-function | name)
   
   // Add a underscore to the classname: prevent overlap with java keyword
   emit-java-servlet-global-function:
     f@Function(x, args, return, Block(stm*)) -> <emit-java-code-local>
       compilation-unit|[
        package pkgname;
    
        import java.io.*;
        import java.util.HashMap;
    
        import javax.servlet.*;
        import javax.servlet.http.*;
        import java.util.*;
        import utils.*;
        import pkgname2.*;
        import pkgname3.*;
        import java.io.PrintWriter;
        
        import org.webdsl.lang.Environment;
    
        @SuppressWarnings("all")
        public class x#_ implements org.webdsl.lang.IFunction{
          ~*cbds*
          
          public Object apply(Object[] args){
            bstm_apply*
          }
        }
      ]|
   with pkgname			:= <FunctionPackage>
      ; pkgname2    := <TemplatePackage>
      ; pkgname3   	:= <DomainPackage>
      ; cbds* 				:= <webdsl-function-to-java-servlet-function> f
      ; e* := <add-indices; map(global-function-apply-helper)> args
      ; if <SimpleSort("Void")> return
        then bstm_apply* := bstm* |[ x#_.x#_(e*); return null; ]|
        else bstm_apply* := bstm* |[ return x#_.x#_(e*); ]|
        end 
        
  global-function-apply-helper:
    (index1,a@Arg(_,_)) -> java:expr|[ (x_type)args[i_index2] ]|
    with  i_index2 := <subti; int-to-string> (index1,1)
        ; x_type := <argument-java-servlet-java-type; java-type-to-java-name> a
        
  // This translation is reused for static entity functions.
  webdsl-function-to-java-servlet-function(|mod*):
    function@Function(x, args, s, Block(stm*)) -> 
    class-body-dec* |[
      public mod* t x#_(param*)  { 
      	  bstm_prefetch*
          bstm*
      }
    ]|
    with  {| InFunction:
              rules( InFunction := <id> )
            ; if SimpleSort("Void") := s
              then  t      := Void()
              else  t      := <java-type> s end
            ; param* := <map(arguments-to-java-servlet)> args
            ; bstm_prefetchthis* := <(get-prefetch-for-this; (is-at-arguments < get-batch-fetches-single-this + get-batch-fetches-single-simple-this)) <+ ![]> stm*
            ; bstm_prefetchargs* := <filter(formal-arguments-to-query-optimizations(|stm*))> args
            ; bstm_prefetch* := <if-optimization-enabled> bstm* |[ bstm_prefetchthis* bstm_prefetchargs* ]|
            ; bstm*  := <statements-to-java-servlet> stm*
            |}

  webdsl-function-to-java-servlet-function =
      ?Function(x, args, s, Block(stm*))
    ; if JavaInEntity 
      then webdsl-function-to-java-servlet-function(|[])
      else webdsl-function-to-java-servlet-function(|[mod |[ static ]| ])
      end
