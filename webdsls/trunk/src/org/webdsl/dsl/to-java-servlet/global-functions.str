module org/webdsl/dsl/to-java-servlet/global-functions

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/to-java-servlet

rules

  generate-code-java-servlet-once: defs -> <fail>
    with  <filter(?Function(_,_,_,_))> defs
        ; map(generate-java-servlet-global-function)
 
  generate-java-servlet-global-function:
     f@Function(x,_,_,_) -> f
     with 	where(name := <concat-strings> ["globalfunction_", x])
         ; if not(CachingEnabled) <+ not(check-cache-equality(|name)) then
             scope-local-emit(emit-java-servlet-global-function | name)
           end
   
   // Add a underscore to the classname: prevent overlap with java keyword
   emit-java-servlet-global-function:
     f@Function(x, args, s, Block(stm*)) -> <emit-java-code-local>
       compilation-unit|[
        package pkgname;
    
        import java.io.*;
        import java.util.HashMap;
    
        import javax.servlet.*;
        import javax.servlet.http.*;
        import java.util.*;
        import utils.*;
        import pkgname2.*;
        import pkgname3.*;
        import java.io.PrintWriter;
        
        import org.webdsl.lang.Environment;
    
        public class x#_ {
          private static TemplateCall templateArg = TemplateCall.None;
          private static HashMap<String, utils.TemplateCall> withcallsmap = new HashMap<String, utils.TemplateCall>();
  
          ~*cbds*
        }
      ]|
   with pkgname			:= <FunctionPackage>
      ; pkgname2    := <BeanPackage>
      ; pkgname3   	:= <DomainPackage>
      ; cbds* 				:= <webdsl-function-to-java-servlet-function> f
        
  // This translation is reused for static entity functions.
  webdsl-function-to-java-servlet-function(|mod*):
    function@Function(x, args, s, Block(stm*)) -> 
    class-body-dec* |[
      public mod* t x#_(param*)  {
        try {
          PrintWriter out = ThreadLocalOut.peek();
          Environment env = ThreadLocalPage.get() != null? ThreadLocalPage.get().envGlobalAndSession : null;
          bstm1*
          bstm*
        } 
        catch(utils.ValidationException ve){
          throw ve;
        }
        catch(utils.MultipleValidationExceptions ve){
          throw ve;
        }
      }
    ]|
    with  {| InFunction:
              rules( InFunction := <id> )
            ; if SimpleSort("Void") := s
              then  t      := Void()
              else  t      := <java-type> s end
            ; param* := <map(arguments-to-java-servlet)> args
            ; bstm*  := <statements-to-java-servlet> stm*
            ; bstm1* := <get-external-vars> stm*
            |}
  
  webdsl-function-to-java-servlet-function =
      ?Function(x, args, s, Block(stm*))
    ; if JavaInEntity 
      then webdsl-function-to-java-servlet-function(|[])
      else webdsl-function-to-java-servlet-function(|[mod |[ static ]| ])
      end
  
  // Put global and session variables in local scope
  // (re-used for entity functions)
  get-external-vars: stm* -> [bstm1*, bstm2*]
    with  usedvarnames := <collect(?Var(<id>)<+?Qualified(<is-string>,_))> stm*
        ; bstm1* := <get-global-vars-into-java-function(|usedvarnames)>
        ; bstm2* := <get-session-vars-into-java-function(|usedvarnames)>
    
  get-global-vars-into-java-function(|usedvarnames) =
    <filter(get-global-vars-into-java-function-helper(|usedvarnames))> <bagof-AllGlobalVars>
  
  get-global-vars-into-java-function-helper(|usedvarnames) :
    elem |[ var x : srt := e ]| -> bstm |[ t x = (x_class) env.getVariable("~x"); ]| 
    where <elem> (x,usedvarnames)
    with  t := <java-type> srt
        ; x_class := <java-type-name> srt 

  get-session-vars-into-java-function(|usedvarnames) =
    <filter(get-session-vars-into-java-function-helper(|usedvarnames))> <bagof-SessionEntities>
   
  get-session-vars-into-java-function-helper(|usedvarnames) :
    def|[ session x { ebd* } ]| -> bstm |[ t x = (x_ent) env.getVariable("~x"); ]| 
    where <elem> (x,usedvarnames)
    with  x_ent := <capitalize-string> x
        ; t := type |[ x_ent ]|
        
