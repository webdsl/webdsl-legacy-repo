module org/webdsl/dsl/to-java-servlet/types/email

imports 
  libstrategolib
  libjava-front 
  libwebdsl-front
  
rules

  builtin-java-type :
    SimpleSort("Email") -> type|[ String ]|
  
rules

// reuse String input/output generation

  java-servlet-element-id : 
    tc@elem|[ inputEmail(e)[passign*]{elem*} ]| -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  handle-actions-input-to-java-servlet :
    tc@elem|[ inputEmail(e)[passign*]{elem*} ]| ->
    <handle-actions-input-to-java-servlet-string-helper(check-email-type-java-servlet)> tc

  check-email-type-java-servlet(|x_temp,e,passign*) :
    _ -> bstm* |[
      if(x_temp.equals("")&&!e_isemptyallowed){
        ~*<add-conversion-error> (e,e|["Email address is required"]|)
      }
      if(!(x_temp.equals("")&&e_isemptyallowed) && !x_temp.matches("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)")) {
        ~*<add-conversion-error> (e,e|["Not a valid email address"]|)
      }
    ]|
    with  if <fetch(?PropertyAssignment("notempty", "true"))> passign*
          then e_isemptyallowed := java:expr|[ false ]|
          else e_isemptyallowed := java:expr|[ true ]|
          end

  elem-to-java-servlet : 
    tc@elem|[ inputEmail(e)[passign*]{elem*} ]| ->
    <elem-to-java-servlet-string-helper> tc
    
  data-validation-to-java-servlet : 
    tc@elem|[ inputEmail(e)[passign*]{elem*} ]| -> result
    with  result := <validation-context-wrapper-for-input(data-validation-to-java-servlet)> tc   
    
  elem-to-java-servlet :
    elem|[ outputEmail(e)[passign*]{} ]| ->
    <elem-to-java-servlet> elem|[ outputString(e)[passign*]{} ]|
