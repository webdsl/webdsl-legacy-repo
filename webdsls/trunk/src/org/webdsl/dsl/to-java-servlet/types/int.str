module org/webdsl/dsl/to-java-servlet/types/int

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front
  
rules // java type

  builtin-java-type :
    SimpleSort("Int") -> type|[ Integer ]|
    
rules // Int literal

   expression-to-java-servlet :
     Int(x) -> Lit(Deci(x))
  
rules // conversion
  
  call-to-java-servlet :
    exp  |[ e.floatValue() ]| ->   java |[ e1.floatValue() ]|
    where SimpleSort("Int") := <type-of> e
    with  e1    := <expression-to-java-servlet> e  
  
rules
    
  java-servlet-element-id :
    tc@elem|[ inputInt(e)[passign*]{} ]| -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"
          
  //load the input string and try to convert it to int, insert null if it fails and specify an error
  handle-actions-input-to-java-servlet :
    tc@elem|[ inputInt(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code> 
    bstm*|[
          
        ident += "~inputident"+uniqueid;
        
        if(ps.getParammap().get(ident)!=null)
        {
            String name = ps.getParammap().get(ident);

            Integer x_temp;
            
            if(!name.matches("-?\\d+")){
              ps.getConversionErrorMessages().put("~name",name+" is not a valid number");
              x_temp = null;
            }
            else {
              try {
                x_temp = Integer.parseInt(name);
              }
              catch(NumberFormatException nfe) {
                ps.getConversionErrorMessages().put("~name",name+" is outside of possible number range");
                x_temp = null;
              }  
            }
            
            bstm 
        }
      
    ]|
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; name := <pp-webdsl> e
        ; bstm := <input-assignment-to-java-servlet(|x_temp)> e      
        
  elem-to-java-servlet :
    tc@elem|[ inputInt(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code>
    bstm* |[ 
    String x_temp = ident+"~inputident"+uniqueid;
    out.print("<input name=\""+x_temp+"\" "+e_attrs1+" value=\"");
    if(inSubmittedForm)
    {
      out.print(ps.getParammap().get(x_temp));
    }
    else
    {
      bstm_exptostring*
    }
    out.print("\" />"); 
    ]|
    with  inputident := <get-inputnumber> tc
        ; bstm_exptostring* := <to-page-string-java-servlet> e
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs> passign*

  elem-to-java-servlet :
    elem|[ outputInt(e)[passign*]{} ]| ->
    java |[ out.print(utils.HTMLFilter.filter(String.valueOf(e1))); ]|
    with  e1 := <expression-to-java-servlet> e