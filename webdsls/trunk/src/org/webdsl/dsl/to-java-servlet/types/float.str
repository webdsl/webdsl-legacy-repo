module org/webdsl/dsl/to-java-servlet/types/float

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front

rules

  builtin-java-type :
    SimpleSort("Float") -> type|[ Float ]|
    
rules // java

  expression-to-java-servlet :
    Float(x) -> expr |[ ~float:Float(<concat-strings> [x1,"f"]) ]|
    where x1 := <string-replace(|"f", "");string-replace(|"F", "")> x

rules // conversion

  call-to-java-servlet :
    exp |[ e.round() ]| -> java |[ Math.round(e1) ]|
    where SimpleSort("Float") := <type-of> e
    with  e1    := <expression-to-java-servlet> e

  call-to-java-servlet :
    exp |[ e.floor() ]| -> java |[ new Double(Math.floor(e1)).floatValue() ]|
    where SimpleSort("Float") := <type-of> e
    with  e1    := <expression-to-java-servlet> e

  call-to-java-servlet :
    exp |[ e.ceil() ]| -> java |[ new Double(Math.ceil(e1)).floatValue() ]|
    where SimpleSort("Float") := <type-of> e
    with  e1    := <expression-to-java-servlet> e
    
rules 

  call-to-java-servlet :
    exp |[ random() ]| -> java |[ new Float(new Double(Math.random()).floatValue()) ]|

rules
  java-servlet-element-id :
    tc@elem|[ inputFloat(e)[passign*]{elem*} ]| -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  //load the input string and try to convert it to float, insert null if it fails and specify an error
  handle-actions-input-to-java-servlet :
    tc@elem|[ inputFloat(e)[passign*]{elem*} ]|->
    <wrap-input-java-code(|passign*)>
    bstm*|[
        ident += "~inputident"+uniqueid;
        if(ps.getParammap().get(ident)!=null)
        {
          ~*<wrap-validation-context-code-store-inputs> bstm*|[
            String name = ps.getParammap().get(ident);
            Float x_temp = null;
            if(!(name.matches("-?\\d\\d*\\.\\d*E?\\d*")||name.matches("-?\\d\\d*E?\\d*")||name.matches("-?\\.\\d\\d*E?\\d*"))){
              ~*<add-conversion-error> (e,e|["not a valid decimal number"]|)
              //x_temp = null;
            }
            else {
              try {
                x_temp = Float.parseFloat(name);
                if(x_temp.isInfinite()){
                  ~*<add-conversion-error> (e,e|["absolute value too large"]|)
                  //x_temp = null;
                }
              }
              catch(NumberFormatException nfe) {
                ~*<add-conversion-error> (e,e|["outside of possible decimal number range"]|)
                //x_temp = null;
              }  
            }
            bstm* 
          ]|
        }
    ]|
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; name := <pp-webdsl> e
        ; bstm* := <input-assignment-to-java-servlet(|x_temp)> e      
        
  elem-to-java-servlet :
    tc@elem|[ inputFloat(e)[passign*]{elem*} ]| ->
    <wrap-input-render-java-code>
    bstm* |[ 
      String x_temp = ident+"~inputident"+uniqueid;
      ~*<render-error-messages-with-error-template(|java:expr|[ x_temp ]|,<ErrorTemplateInput>)> bstm*|[
        out.print("<input name=\""+x_temp+"\" "+e_attrs1);
        ~*<connect-with-enclosing-label>
        out.print(" value=\"");
        if(inSubmittedForm)
        {
          out.print(ps.getParammap().get(x_temp));
        }
        else
        {
          bstm_exptostring*
        }
        out.print("\" />");
      ]| 
    ]|
    with  inputident := <get-inputnumber> tc
        ; bstm_exptostring* := <to-page-string-java-servlet> e
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs> passign*

  elem-to-java-servlet :
    elem|[ outputFloat(e)[passign*]{} ]|->
    <wrap-common-context-code>
    bstm* |[ out.print(utils.HTMLFilter.filter(String.valueOf(e1))); ]|
    with  e1 := <expression-to-java-servlet> e