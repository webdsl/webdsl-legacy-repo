module org/webdsl/dsl/to-java-servlet/types/collection

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front

rules //types

  builtin-java-type :
    GenericSort("List", [s]) -> type|[ java.util.List<t> ]|
    where t := <java-type> s

  builtin-java-type :
    GenericSort("Set", [s]) -> type|[ java.util.Set<t> ]|
    where t := <java-type> s
    
  type-default-value-override-java :
    GenericSort("List", [s]) -> e|[ new java.util.ArrayList<t>() ]|
    where t := <java-type> s
    
  type-default-value-override-java :
    GenericSort("Set", [s]) -> e|[ new java.util.LinkedHashSet<t>() ]|
    where t := <java-type> s

rules //list functions

  call-to-java-servlet :
    Call(e1, "indexOf", [e2]) -> java|[ e3.indexOf(e4) ]|
    where GenericSort("List",[s]) := <type-of> e1
    with e3 := <expression-to-java-servlet> e1
    with e4 := <expression-to-java-servlet> e2

  call-to-java-servlet :
    Call(e1, "get", [e2]) -> java|[ e4 >= 0 && e4 < e3.size() ? e3.get(e4) : null ]|
    where GenericSort("List",[s]) := <type-of> e1
    with e3 := <expression-to-java-servlet> e1
    with e4 := <expression-to-java-servlet> e2
    
  call-to-java-servlet :
    Call(e1, "set", [e2,e3])  -> java|[ e4.setupForPropertyEvents(hibSession,out,ps).setIn#x_field(e5,e6) ]|
    where GenericSort("List",[s]) := <type-of> e1
        ; <?FieldAccess(e_entity,x_field)> e1
    with e4 := <expression-to-java-servlet> e_entity
    with e5 := <expression-to-java-servlet> e2
    with e6 := <expression-to-java-servlet> e3
         
  call-to-java-servlet :
    Call(e1, "set", [e2,e3])  -> java|[ e4.set(e5,e6) ]|
    where GenericSort("List",[s]) := <type-of> e1
         ; not(<?FieldAccess(_,_)> e1)
    with e4 := <expression-to-java-servlet> e1
    with e5 := <expression-to-java-servlet> e2
    with e6 := <expression-to-java-servlet> e3

rules //general collection functions

  call-to-java-servlet :
    Call(e1, "add", [e2])  -> java|[ e3.setupForPropertyEvents(hibSession,out,ps).addTo#x_field(e4) ]|
    where GenericSort(_,_) := <type-of> e1
        ; <?FieldAccess(e_entity,x_field)> e1
    with  e3 := <expression-to-java-servlet> e_entity
        ; e4 := <expression-to-java-servlet> e2

  call-to-java-servlet :
     Call(e1, "add", [e2])  -> java|[ e3.add(e4) ]|
     where GenericSort(_,_) := <type-of> e1
         ; not(<?FieldAccess(_,_)> e1)
     with  e3 := <expression-to-java-servlet> e1
         ; e4 := <expression-to-java-servlet> e2

  call-to-java-servlet :
    Call(e1, "remove", [e2])  -> java|[ e3.setupForPropertyEvents(hibSession,out,ps).removeFrom#x_field(e4) ]|
    where GenericSort(_,_) := <type-of> e1
        ; <?FieldAccess(e_entity,x_field)> e1
    with  e3 := <expression-to-java-servlet> e_entity 
        ; e4 := <expression-to-java-servlet> e2
  
  call-to-java-servlet :
    Call(e1, "remove", [e2])  -> java|[ e3.remove(e4) ]|
    where GenericSort(_,_) := <type-of> e1
        ; not(<?FieldAccess(_,_)> e1)
    with  e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java-servlet> e2
     
  call-to-java-servlet :
    Call(e1, "clear", [])  -> java|[ e3.setupForPropertyEvents(hibSession,out,ps).removeAllFrom#x_field() ]|
    where GenericSort(_,_) := <type-of> e1
        ; <?FieldAccess(e_entity,x_field)> e1
    with  e3 := <expression-to-java-servlet> e_entity      
         
  call-to-java-servlet :
     Call(e1, "clear", [])  -> java|[ e3.clear() ]|
     where GenericSort(_,_) := <type-of> e1
         ; not(<?FieldAccess(_,_)> e1)
     with  e3 := <expression-to-java-servlet> e1

  call-to-java-servlet :
    Call(e1, "addAll", [e2])  -> java|[ e3.setupForPropertyEvents(hibSession,out,ps).addAllTo#x_field(e4) ]|
    where GenericSort(_,_) := <type-of> e1
        ; <?FieldAccess(e_entity,x_field)> e1
    with  e3 := <expression-to-java-servlet> e_entity    
        ; e4 := <expression-to-java-servlet> e2  
         
  call-to-java-servlet :
     Call(e1, "addAll", [e2])  -> java|[ {| t_tmp x_tmp = e3; x_tmp.addAll(e4); | x_tmp |} ]|
     where GenericSort(_,_) := <type-of> e1
         ; not(<?FieldAccess(_,_)> e1)
     with  e3 := <expression-to-java-servlet> e1
         ; e4 := <expression-to-java-servlet> e2
         ; t_tmp := <type-of;java-type> e1
         ; x_tmp := <newname> "tmp"

rules //typed collection creations

   expression-to-java-servlet : // The version with items (!= []) will be desugared in desugar.str
     TypedListCreation(s, []) -> java|[ new java.util.ArrayList<t>() ]|
     with  t := <java-type> s

   expression-to-java-servlet :
     TypedSetCreation(s, []) -> java|[ new java.util.LinkedHashSet<t>() ]|
     with  t := <java-type> s

rules //fields

  field-access-to-java-servlet :
    FieldAccess(e1, "length") -> expr|[ e2.size() ]|
    with  e2 := <expression-to-java-servlet> e1
        ; GenericSort(_, _) := <type-of> e1

rules //pages
 
  java-servlet-element-id : 
    tc@Select(x, SimpleSort(s), label, e) -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
        ; newid := <newname> "input"

  //SimpleSort property select
  handle-actions-input-to-java-servlet :
    tc@Select(x, srt, label, e)  ->
    <for-loop-counter-wrap-code>
    bstm*|[
        ident += "~inputident"+uniqueid;
        
        if(ps.getParammap().get(ident)!=null)
        {
            t x_temp = (x_argtype) hibSession.load(x_argtype.class, java.util.UUID.fromString(ps.getParammap().get(ident)));
            bstm 
        }
    ]|
    where SimpleSort(_) := <type-of> e
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; t       := <java-type> srt
        ; x_argtype := <java-type-name> srt
        ; bstm := <input-assignment-to-java-servlet(|x_temp)> e
    
  elem-to-java-servlet : 
    tc@Select(x, srt, label, e)  ->
    <for-loop-counter-wrap-code>
    bstm* |[ 
    String x_temp = ident+"~inputident"+uniqueid;
    out.print("<select name=\""+x_temp+"\" >");
    java.util.Iterator x_iter = hibSession.createQuery("from "+"~x_argtype").list().iterator() ;
    while ( x_iter.hasNext() ) {
      t x = (x_argtype) x_iter.next();
      out.print("<option value=\""+x.getId()+"\"");
      if(inSubmittedForm)
      {
        if(ps.getParammap().get(x_temp) != null && ps.getParammap().get(x_temp).equals(String.valueOf(x.getId())))
        {
          out.print("selected=\"selected\"");
        }
      }
      else
      {
        if(e2 != null && e2.getId().equals(x.getId()))//maybe should use add-not-null checks
        {
          out.print("selected=\"selected\"");
        }
      }
      out.print(">"+x.getName()+"</option>");
    }
    out.print("</select>"); 
    ]|
    where SimpleSort(_) := <type-of> e
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; x_iter := <newname> "iter"
        ; t       := <java-type> srt
        ; x_argtype := <java-type-name> srt
        ; e2 := <expression-to-java-servlet> e

          
  //GenericSort property select
  handle-actions-input-to-java-servlet :
    tc@Select(x, srt, label, e)  ->
    <for-loop-counter-wrap-code>
    bstm*|[
        ident += "~inputident"+uniqueid;
        if(ps.getParammap().get(ident+"_isinput")!=null){
          e_clear;
          if(ps.getParammapvalues().get(ident) != null){
            for(String elem : ps.getParammapvalues().get(ident))
            {
              t x_temp = (x_argtype) hibSession.load(x_argtype.class, java.util.UUID.fromString(elem));
              e_add;  
            }
          }
        }
    ]|
    where GenericSort(_, _) := <type-of> e
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; t       := <java-type> srt
        ; x_argtype := <java-type-name> srt
        ; bstm := <input-assignment-to-java-servlet(|x_temp)> e
        ; e_add := <expression-to-java-servlet> webdsl:e |[ e.add(x_temp) ]| //reuse expression translation for inverse relation add/remove operations
        ; e_clear := <expression-to-java-servlet> webdsl:e |[ e.clear() ]| //reuse expression translation for inverse relation clear operation
    
  elem-to-java-servlet : 
    tc@Select(x, srt, label, e)  ->
    <for-loop-counter-wrap-code>
    bstm* |[ 
    String x_temp = ident+"~inputident"+uniqueid;
    out.print("<input type=\"hidden\" name=\""+x_temp+"_isinput"+"\" />");
    out.print("<select name=\""+x_temp+"\" multiple=\"multiple\">");
    java.util.Iterator x_iter = hibSession.createQuery("from "+"~x_argtype").list().iterator() ;
    while ( x_iter.hasNext() ) {
      t x = (x_argtype) x_iter.next();
      out.print("<option value=\""+x.getId()+"\"");
      if(inSubmittedForm)
      {
        if(ps.getParammapvalues().get(x_temp) != null){
          for(String elem : ps.getParammapvalues().get(x_temp))
          {
            if(elem.equals(String.valueOf(x.getId())))
            {
              out.print("selected=\"selected\"");
            }
          }
        }
      }
      else
      {
        if(e2 != null && e2.contains(x))//maybe should use add-not-null checks
        {
          out.print("selected=\"selected\"");
        }
      }
      out.print(">"+x.getName()+"</option>");
    }
    out.print("</select>"); 
    ]|
    where GenericSort(_, _) := <type-of> e
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; x_iter := <newname> "iter"
        ; t       := <java-type> srt
        ; x_argtype := <java-type-name> srt
        ; e2 := <expression-to-java-servlet> e

rules // select from

  java-servlet-element-id : 
    tc@SelectFromList(e1, e7)-> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  //SimpleSort property select
  handle-actions-input-to-java-servlet :
    tc@SelectFromList(e1, e7)  ->
    <for-loop-counter-wrap-code>
    bstm*|[
        ident += "~inputident"+uniqueid;
        
        if(ps.getParammap().get(ident)!=null)
        {
            t x_temp = (x_argtype) hibSession.load(x_argtype.class, java.util.UUID.fromString(ps.getParammap().get(ident)));
            if(e8.contains(x_temp))
            {
              bstm
            } 
        }
    ]|
    where SimpleSort(_) := <type-of> e1
    with  inputident := <get-inputnumber> tc
        ; srt := <type-of> e1
        ; x_temp := <newname> "temp"
        ; t       := <java-type> srt
        ; x_argtype := <java-type-name> srt
        ; bstm := <input-assignment-to-java-servlet(|x_temp)> e1
        ; e8 := <expression-to-java-servlet> e7
    
  elem-to-java-servlet : 
    tc@SelectFromList(e1, e7)  ->
    <for-loop-counter-wrap-code>
    bstm* |[ 
    String x_temp = ident+"~inputident"+uniqueid;
    out.print("<select name=\""+x_temp+"\" >");
    java.util.Iterator iter = e8.iterator() ;
    while ( iter.hasNext() ) {
      t x = (x_argtype) iter.next();
      out.print("<option value=\""+x.getId()+"\"");
      if(inSubmittedForm)
      {
        if(ps.getParammap().get(x_temp) != null && ps.getParammap().get(x_temp).equals(String.valueOf(x.getId())))
        {
          out.print("selected=\"selected\"");
        }
      }
      else
      {
        if(e2 != null && e2.getId().equals(x.getId()))//maybe should use add-not-null checks
        {
          out.print("selected=\"selected\"");
        }
      }
      out.print(">"+x.getName()+"</option>");
    }
    out.print("</select>"); 
    ]|
    where SimpleSort(_) := <type-of> e1
    with  inputident := <get-inputnumber> tc
        ; srt        := <type-of> e1
        ; x_temp     := <newname> "temp"
        ; x          := <newname> "x"
        ; t          := <java-type> srt
        ; x_argtype  := <java-type-name> srt
        ; e2         := <expression-to-java-servlet> e1
        ; e8         := <expression-to-java-servlet> e7

          
  //GenericSort property select
  handle-actions-input-to-java-servlet :
    tc@SelectFromList(e1, e7)  ->
    <for-loop-counter-wrap-code>
    bstm*|[
        ident += "~inputident"+uniqueid;
        if(ps.getParammap().get(ident+"_isinput")!=null){
          e_clear;
          if(ps.getParammapvalues().get(ident) != null){
            for(String elem : ps.getParammapvalues().get(ident))
            {
              t x_temp = (x_argtype) hibSession.load(x_argtype.class, java.util.UUID.fromString(elem));
              if(e8.contains(x_temp)) {
                e_add;  
              } 
            }
          }
        }
    ]|
    where GenericSort(_, [srt]) := <type-of> e1
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; t       := <java-type> srt
        ; x_argtype := <java-type-name> srt
        ; bstm := <input-assignment-to-java-servlet(|x_temp)> e1
        ; e_add := <expression-to-java-servlet> webdsl:e |[ e1.add(x_temp) ]| //reuse expression translation for inverse relation add/remove operations
        ; e8 := <expression-to-java-servlet> e7
        ; e_clear := <expression-to-java-servlet> webdsl:e |[ e1.clear() ]| //reuse expression translation for inverse relation clear operation
    
  elem-to-java-servlet : 
    tc@SelectFromList(e1, e7) ->
    <for-loop-counter-wrap-code>
    bstm* |[ 
    String x_temp = ident+"~inputident"+uniqueid;
    out.print("<input type=\"hidden\" name=\""+x_temp+"_isinput"+"\" />");
    out.print("<select name=\""+x_temp+"\" multiple=\"multiple\">");
    java.util.Iterator iter =  e8.iterator() ;
    while ( iter.hasNext() ) {
      t x = (x_argtype) iter.next();
      out.print("<option value=\""+x.getId()+"\"");
      if(inSubmittedForm)
      {
        if(ps.getParammapvalues().get(x_temp) != null){
          for(String elem : ps.getParammapvalues().get(x_temp))
          {
            if(elem.equals(String.valueOf(x.getId())))
            {
              out.print("selected=\"selected\"");
            }
          }
        }
      }
      else
      {
        if(e2 != null && e2.contains(x))//maybe should use add-not-null checks
        {
          out.print("selected=\"selected\"");
        }
      }
      out.print(">"+x.getName()+"</option>");
    }
    out.print("</select>"); 
    ]|
    where GenericSort(_, [srt]) := <type-of> e1
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; t       := <java-type> srt
        ; x := <newname> "x"
        ; x_argtype := <java-type-name> srt
        ; e2 := <expression-to-java-servlet> e1
        ; e8 := <expression-to-java-servlet> e7
