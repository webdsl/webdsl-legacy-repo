module org/webdsl/dsl/to-java-servlet/types/date

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  libwebdsl-front
/*
rules // Desugaring

  DeriveInput :
    elem|[ input(e){} ]| -> elem|[ inputDate(e){} ]|
    where SimpleSort("Date") := <type-of> e
    
  DeriveOutput :
    elem|[ output(e){} ]| -> elem|[ outputDate(e){} ]|
    where SimpleSort("Date") := <type-of> e

  DeriveInput :
    elem|[ input(e){} ]| -> elem|[ inputTime(e){} ]|
    where SimpleSort("Time") := <type-of> e
    
  DeriveOutput :
    elem|[ output(e){} ]| -> elem|[ outputTime(e){} ]|
    where SimpleSort("Time") := <type-of> e

  DeriveInput :
    elem|[ input(e){} ]| -> elem|[ inputDateTime(e){} ]|
    where SimpleSort("DateTime") := <type-of> e
    
  DeriveOutput :
    elem|[ output(e){} ]| -> elem|[ outputDateTime(e){} ]|
    where SimpleSort("DateTime") := <type-of> e

rules // Peristence annotations

  builtin-persistence-annotations :
    SimpleSort("Time") -> [anno|[ @Temporal(TemporalType.TIME) ]|]
    
  builtin-persistence-annotations :
    SimpleSort("Date") -> [anno|[ @Temporal(TemporalType.DATE) ]|]
    
  builtin-persistence-annotations :
    SimpleSort("DateTime") -> [anno|[ @Temporal(TemporalType.TIMESTAMP) ]|]
*/   

rules 
  call-to-java-servlet :
    exp|[ now() ]| -> java|[ new java.util.Date() ]|
    //ThisCall("now", []) -> java|[ new java.util.Date() ]|

  call-to-java-servlet :
    exp|[ today() ]| -> java|[ new java.util.Date() ]|
    //ThisCall("now", []) -> java|[ new java.util.Date() ]|

  call-to-java-servlet :
    exp|[ e1.before(e2) ]| -> java|[ e3.before(e4) ]|
    with e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java-servlet> e2

  call-to-java-servlet :
    exp|[ e1.after(e2) ]| -> java|[ e3.after(e4) ]|
    with e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java-servlet> e2

  call-to-java-servlet :
    exp|[ Date(e1, e2) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e3, e4) ]|
    //ThisCall("Date", [d, f]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, e2) ]|
    with e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java-servlet> e2

  call-to-java-servlet :
    exp|[ Date(e1) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e2, "dd/MM/yyyy") ]|
    //ThisCall("Date", [d]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, "dd/MM/yyyy") ]|
    with e2 := <expression-to-java-servlet> e1

  call-to-java-servlet :
    exp|[ Time(e1, e2) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e3, e4) ]|
    //ThisCall("Time", [d, f]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, e2) ]|
    with SimpleSort("Date") := <type-of> e1
        ; e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java> e2

  call-to-java :
    exp|[ Time(e1) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e2, "H:mm") ]|
    //ThisCall("Time", [d]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, "H:mm") ]|
    with e2 := <expression-to-java> e1

  call-to-java-servlet :
    exp|[ DateTime(e1, e2) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e3, e4) ]|
    //ThisCall("DateTime", [d, f]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, e2) ]|
    with e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java-servlet> e2

  call-to-java-servlet :
    exp|[ DateTime(e1) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e2, "dd/MM/yyyy H:mm") ]|
    //ThisCall("DateTime", [d]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, "dd/MM/yyyy H:mm") ]|
    with e2 := <expression-to-java-servlet> e1
/*
rules // Typechecking

  // @todo: sort-to-java-type-string is redundant; use pp-java-string if you want strings

  sort-to-java-type-string : SimpleSort("Date") -> "java.util.Date"
  sort-to-java-type-string : SimpleSort("DateTime") -> "java.util.Date"  
  sort-to-java-type-string : SimpleSort("Time") -> "java.util.Date"

  builtin-java-type : 
    SimpleSort("Date") -> type|[ java.util.Date ]|

  builtin-java-type-default-value :
    SimpleSort("Date") -> |[ new java.util.Date() ]|
    
  builtin-java-type : 
    SimpleSort("DateTime") -> type|[ java.util.Date ]|

  builtin-java-type-default-value :
    SimpleSort("DateTime") -> |[ new java.util.Date() ]|

  type-default-value :
    SimpleSort("Date") -> exp|[ now() ]|

  type-default-value :
    SimpleSort("Time") -> exp|[ now() ]|

  type-default-value :
    SimpleSort("DateTime") -> exp|[ now() ]|
    
  builtin-java-type : 
    SimpleSort("Time") -> type|[ java.util.Date ]|

  builtin-java-type-default-value :
    SimpleSort("Time") -> |[ new java.util.Date() ]|
    
rules // Typechecking

  check-builtin-signature :
    (None(), "now", []) -> SimpleSort("DateTime")

  check-builtin-signature :
    (None(), "today", []) -> SimpleSort("Date")

  check-builtin-signature :
    (None(), "Date", [SimpleSort("String"), SimpleSort("String")]) -> SimpleSort("Date")

  check-builtin-signature :
    (None(), "Date", [SimpleSort("String")]) -> SimpleSort("Date")

  check-builtin-signature :
    (None(), "Time", [SimpleSort("String"), SimpleSort("String")]) -> SimpleSort("Time")

  check-builtin-signature :
    (None(), "Time", [SimpleSort("String")]) -> SimpleSort("Time")

  check-builtin-signature :
    (None(), "DateTime", [SimpleSort("String"), SimpleSort("String")]) -> SimpleSort("DateTime")

  check-builtin-signature :
    (None(), "DateTime", [SimpleSort("String")]) -> SimpleSort("DateTime")

  type-compatible =
    ?(SimpleSort("Time"), SimpleSort("DateTime"))

  type-compatible =
    ?(SimpleSort("Date"), SimpleSort("DateTime"))

  check-builtin-signature :
    (SimpleSort("DateTime"), "before", [SimpleSort("DateTime")]) -> SimpleSort("Bool")

  check-builtin-signature :
    (SimpleSort("Date"), "before", [SimpleSort("Date")]) -> SimpleSort("Bool")

  check-builtin-signature :
    (SimpleSort("DateTime"), "after", [SimpleSort("DateTime")]) -> SimpleSort("Bool")

  check-builtin-signature :
    (SimpleSort("Date"), "after", [SimpleSort("Date")]) -> SimpleSort("Bool")
*/
rules

  elem-to-java-servlet :
    elem|[ inputDate(e){} ]| ->
    java |[ out.println("todo: outputwikitext"); ]|
    /*
    %>
      <s:decorate>
          <rich:calendar value="<%= estring %>"
                        popup="true"
                        datePattern="dd/MM/yyyy"
                        id="<%= label %>"
                        required="<%= req %>"
                        enableManualInput="true"
                     />
      </s:decorate>
    <%
    with estring := <arg-to-value-string> e
       ; label := <newname> "inputDateId"
       ; req := <input-of-required-property(|e)>
    */
    
  elem-to-java-servlet :
    elem|[ outputDate(e){} ]| ->
    java |[ out.println("todo: outputdate"); ]|
    /*
    %>
       <h:outputText id="<%= label %>" styleClass="outputDate" value="<%= estring %>">
         <s:convertDateTime pattern="dd/MM/yyyy"/>
       </h:outputText>
    <%
    with estring := <arg-to-value-string> e
       ; label := <newname> "outputDateId"
    */

  elem-to-java-servlet :
    elem|[ inputTime(e){} ]| ->
    java |[ out.println("todo: inputtime"); ]|
    /*
    %>
      <s:decorate>
        <div>
          <h:inputText id="<%= label%>" styleClass="inputDate" value="<%= estring %>" required="<%= req %>">
             <s:convertDateTime pattern="H:mm"/>
          </h:inputText>
        </div>
      </s:decorate>
    <%
    with estring := <arg-to-value-string> e
       ; label := <newname> "inputDateId"
       ; req := <input-of-required-property(|e)>
    */
    
  elem-to-java-servlet :
    elem|[ outputTime(e){} ]| ->
    java |[ out.println("todo: outputtime"); ]|
    /*
    %>
       <h:outputText id="<%= label %>" styleClass="outputDate" value="<%= estring %>">
         <s:convertDateTime pattern="H:mm"/>
       </h:outputText>
    <%
    with estring := <arg-to-value-string> e
       ; label := <newname> "outputDateId"
    */
    
  elem-to-java-servlet :
    elem|[ inputDateTime(e){} ]| ->
    java |[ out.println("todo: inputdatetime"); ]|
    /*
    %>
      <s:decorate>
        <div>
          <h:inputText id="<%= label%>" styleClass="inputDate" value="<%= estring %>" required="<%= req %>">
             <s:convertDateTime pattern="dd/MM/yyyy H:mm"/>
          </h:inputText>
        </div>
      </s:decorate>
    <%
    with estring := <arg-to-value-string> e
       ; label := <newname> "inputDateId"
       ; req := <input-of-required-property(|e)>
    */
    
  elem-to-java-servlet :
    elem|[ outputDateTime(e){} ]| ->
    java |[ out.println("todo: outputdatetime"); ]|
    /*
    %>
       <h:outputText id="<%= label %>" styleClass="outputDate" value="<%= estring %>">
         <s:convertDateTime pattern="dd/MM/yyyy H:mm"/>
       </h:outputText>
    <%
    with estring := <arg-to-value-string> e
       ; label := <newname> "outputDateId"
    */
