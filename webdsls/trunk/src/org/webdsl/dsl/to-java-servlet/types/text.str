module org/webdsl/dsl/to-java-servlet/types/text

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front
  
rules 
  java-servlet-element-id : 
    tc@elem|[ inputText(e)[passign*]{} ]| -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  handle-actions-input-to-java-servlet :
    tc@elem|[ inputText(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code> 
    bstm*|[
          
        ident += "~inputident"+uniqueid;
        
        if(ps.getParammap().get(ident)!=null)
        {
            ~*<text-length-check-java-servlet(|x_temp,name)>
            bstm 
        }
      
    ]|
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; name := <pp-webdsl> e
        ; bstm := <input-assignment-to-java-servlet(|x_temp)> e
        
  text-length-check-java-servlet(|x_temp,name) =
    ! bstm* |[
        String x_temp = ps.getParammap().get(ident);
        if(x_temp.length()>1000000) {
          ps.getConversionErrorMessages().put("~name",x_temp+" is too long");
          x_temp = null;
        }
    ]|
    
  elem-to-java-servlet : 
    tc@elem|[ inputText(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code>
    bstm* |[ 
    String x_temp = ident+"~inputident"+uniqueid;
    out.print("<textarea name=\""+x_temp+"\" "+e_attrs1+" class=\"inputTextarea\" >");
    if(inSubmittedForm)
    {
      out.print(ps.getParammap().get(x_temp));
    }
    else
    {
      out.print(e1);
    }
    out.print("</textarea>"); 
    ]|
    with  inputident := <get-inputnumber> tc
        ; e1 := <arg-to-value-string-java-servlet> e
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs> passign*        
    
  elem-to-java-servlet :
    elem |[ outputText(e)[passign*]{} ]| ->
    bstm* |[ 
    com.petebevin.markdown.MarkdownProcessor x_temp = new com.petebevin.markdown.MarkdownProcessor();
    out.print(x_temp.markdown(e1));
    ]|
    with  e1 := <arg-to-value-string-java-servlet> e  
        ; x_temp := <newname> "temp"



  /*elem-to-java-servlet :
    elem|[ inputText(e){} ]| ->
    java |[ out.print("todo: inputtext"); ]|*/
    /*
    %>
      <s:decorate>
        <h:inputTextarea styleClass="inputTextarea" value="<%= estring %>" required="<%= req %>"/>
      </s:decorate>
    <%
    with estring := <arg-to-value-string> e
        ; req := <input-of-required-property(|e)>
    */
 /* elem-to-java-servlet :
    elem|[ outputText(e){} ]| ->
    java |[ out.print(utils.HTMLFilter.filter(e1)); ]|
    with  e1 := <arg-to-value-string-java-servlet> e*/
    /*
    %>
      <s:formattedText styleClass="outputTextarea" value="<%= estring %>"/>
    <%
    with estring := <arg-to-value-string> e
    */
/*
rules // types
  sort-to-java-type-string : SimpleSort("Text") -> "java.lang.String"

  builtin-java-type :
    SimpleSort("Text") -> type|[ String ]|

  builtin-java-type-default-value :
    SimpleSort("Text") -> java|[ ""  ]|

  builtin-persistence-annotations :
    SimpleSort("Text") -> [anno|[ @Column(length = 1000000) ]|]

  type-compatible =
    ?(SimpleSort("Text"), SimpleSort("String"))

rules // desugar
  DeriveInput :
    elem|[ input(e){} ]| -> elem|[ inputText(e){} ]|
    where SimpleSort("Text") := <type-of> e

  DeriveOutput :
    elem|[ output(e){} ]| -> elem|[ outputText(e){} ]|
    where SimpleSort("Text") := <type-of> e
*/
        
