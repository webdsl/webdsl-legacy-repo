module org/webdsl/dsl/to-java-servlet/types/timeinterval

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front
  
/*
rules // java type

  builtin-java-type :
    SimpleSort("TimeInterval") -> type|[ Long ]|
    
rules // Int literal

   expression-to-java-servlet :
     TimeInterval(ti*) -> val
     with val := <map(ti-to-ms); foldr(!Int("0"), \ (e1, e2) -> Plus(e1, e2) \)> ti*

   ti-to-ms :
     Milliseconds(e) -> <expression-to-java-servlet> e

   ti-to-ms :
     Seconds(e1) -> exp|[ 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Minutes(e1) -> exp|[ 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Hours(e1) -> exp|[ 60 * 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Days(e1) -> exp|[ 24 * 60 * 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Weeks(e1) -> exp|[ 7 * 24 * 60 * 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1
     */
  
rules // conversion
  
  /*
  call-to-java-servlet :
    exp  |[ e.floatValue() ]| ->   java |[ e1.floatValue() ]|
    where SimpleSort("Int") := <get-type-anno> e
    with  e1    := <expression-to-java-servlet> e  
    */
  
rules
    
  java-servlet-element-id :
    tc@elem|[ inputLong(e)[passign*]{elem*} ]| -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"
          
  //load the input string and try to convert it to int, insert null if it fails and specify an error
  handle-actions-input-to-java-servlet :
    tc@elem|[ inputLong(e)[passign*]{elem*} ]| ->
    <wrap-input-java-code(|passign*)>
    bstm*|[
      ident += "~inputident"+uniqueid;
      if(ThreadLocalPage.get().getParammap().get(ident)!=null)
      {
        ~*<wrap-validation-context-code-store-inputs> bstm*|[
          String name = ThreadLocalPage.get().getParammap().get(ident);
          Long x_temp = null;
          if(!name.matches("-?\\d+")){
            ~*<add-conversion-error> (e,e|["Not a valid number"]|)
          }
          else {
            try {
              x_temp = Long.parseLong(name);
            }
            catch(NumberFormatException nfe) {
              ~*<add-conversion-error> (e,e|["Outside of possible number range"]|)
            }  
          }
          bstm*
        ]|
      }
    ]|
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; name := <pp-webdsl-to-string> e
        ; bstm* := <input-assignment-to-java-servlet(|x_temp)> e      
        
  elem-to-java-servlet :
    tc@elem|[ inputLong(e)[passign*]{elem*} ]| ->
    <wrap-input-render-java-code>
    bstm* |[ 
      String x_temp = ident+"~inputident"+uniqueid;
      ~*<render-error-messages-with-error-template(|java:expr|[ x_temp ]|,<ErrorTemplateInput>)> bstm*|[
        out.print("<input name=\""+x_temp+"\""+e_attrs1);
        ~*<connect-with-enclosing-label>
        out.print(" value=\"");
        if(ThreadLocalPage.get().inSubmittedForm()) {
          out.print(utils.HTMLFilter.filter(ThreadLocalPage.get().getParammap().get(x_temp)));
        }
        else {
          bstm_exptostring*
        }
        out.print("\" />"); 
      ]|
    ]|
    with  inputident := <get-inputnumber> tc
        ; bstm_exptostring* := <to-page-string-java-servlet> e
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs(|"inputLong")> passign*

  data-validation-to-java-servlet : 
    tc@elem|[ inputLong(e)[passign*]{elem*} ]| -> result
    with  result := <validation-context-wrapper-for-input(data-validation-to-java-servlet)> tc

  elem-to-java-servlet :
    elem|[ outputLong(e)[passign*]{} ]| ->
    <wrap-common-context-code>
    bstm* |[ 
      out.print(utils.HTMLFilter.filter(String.valueOf(e1))); 
    ]|
    with  e1 := <expression-to-java-servlet> e
