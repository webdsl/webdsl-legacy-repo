module org/webdsl/dsl/to-java-servlet/types/timeinterval

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front
  
rules // java type

  builtin-java-type :
    SimpleSort("TimeInterval") -> type|[ Long ]|
    
rules // Int literal

   expression-to-java-servlet :
     TimeInterval(ti*) -> val
     with val := <map(ti-to-ms); foldr(!expr|[ 0 ]|, \ (e1, e2) -> expr|[ e1 + e2 ]| \)> ti*

   ti-to-ms :
     Milliseconds(e) -> <expression-to-java-servlet> e

   ti-to-ms :
     Seconds(e1) -> expr|[ 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Minutes(e1) -> expr|[ 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Hours(e1) -> expr|[ 60 * 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Days(e1) -> expr|[ 24 * 60 * 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1

   ti-to-ms :
     Weeks(e1) -> expr|[ 7 * 24 * 60 * 60 * 1000 * e2 ]|
     with e2 := <expression-to-java-servlet> e1
  
rules
  
  generate-global-var-initializer-method = 
    bstm* := <map(generate-global-var-initializer); concat> <bagof-AllGlobalVars>
    ; !|[
        public static void initGlobalVars(Environment env, org.hibernate.Session hibSession) {
          bstm*
        }
      ]|

  generate-global-var-initializer :   
    elem |[ var x : srt := e ]| -> bstm*|[ 
      env.putVariable("~x", GlobalVariables.get#x(hibSession)); 
      if(env.getVariable("~x") == null) {
        hibSession.getTransaction().commit();
        return;
      }
    ]| 

   invoke-every-to-init :
    InvokeEvery(e, ti) -> bstm*|[
      java.util.TimerTask x1 = new java.util.TimerTask() {
          public void run() {
              org.hibernate.Session hibSession = null;
              try {
                hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
                hibSession.beginTransaction();
                Environment env = new Environment(PageServlet.staticEnv);
                DispatchServlet.initGlobalVars(env, hibSession);
                java.io.PrintWriter out = new java.io.PrintWriter(System.out);
                e1;
                hibSession.getTransaction().commit();
              } catch (Exception ex) {
                System.out.println("exception occured: "+ex.getMessage());	
                ex.printStackTrace();
                hibSession.getTransaction().rollback();
              }   
          }
      };
      timer.scheduleAtFixedRate(x1, 0, e2);
    ]|
    with x1 := <newname> "timer"
       ; e1 := <expression-to-java-servlet> e
       ; e2 := <expression-to-java-servlet> ti
