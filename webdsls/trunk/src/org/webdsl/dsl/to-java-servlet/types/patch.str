module org/webdsl/dsl/to-java-servlet/types/patch

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front
  
rules // types
/*
  sort-to-java-type-string : SimpleSort("Patch") -> "java.lang.String"

  builtin-java-type :
     SimpleSort("Patch") -> type|[ String ]|

  builtin-java-type-default-value :
    SimpleSort("Patch") -> java|[ "" ]|

  type-default-value :
    SimpleSort("Patch") -> exp|[ "" ]|

  builtin-persistence-annotations :
    SimpleSort("Patch") -> [anno|[ @Column(length = 1000000) ]|]

  check-builtin-signature :
    (SimpleSort("Patch"), "applyPatch", [s]) -> s
    where <type-compatible> (s, SimpleSort("String"))

  check-builtin-signature :
    (s1, "makePatch", [s2]) -> SimpleSort("Patch")
    where <type-compatible> (s1, SimpleSort("String"))
        ; <type-compatible> (s2, SimpleSort("String"))

rules // desugar
  DeriveInput :
    elem|[ input(e){} ]| -> elem|[ inputText(e){} ]|
    where SimpleSort("Patch") := <type-of> e

  DeriveOutput :
    elem|[ output(e){} ]| -> elem|[ outputText(e){} ]|
    where SimpleSort("Patch") := <type-of> e


rules // patch
   call-to-java :
     //Call(e1, "applyPatch", [e2]) ->
     exp|[ e1.applyPatch(e2) ]| ->
     java|[ name.fraser.neil.plaintext.patch_factory.patchApply(e3, e4) ]|
     with e3 := <expression-to-java> e1
        ; e4 := <expression-to-java> e2

   call-to-java :
     //Call(e1, "makePatch", [e2]) ->
     exp|[ e1.makePatch(e2) ]| ->
     java|[ name.fraser.neil.plaintext.patch_factory.patchMake(e3, e4) ]|
     with e3 := <expression-to-java> e1
        ; e4 := <expression-to-java> e2
*/