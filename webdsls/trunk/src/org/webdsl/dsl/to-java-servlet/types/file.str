module org/webdsl/dsl/to-java-servlet/types/file

imports 
  libstrategolib 
  libjava-front 
  
imports 
  libwebdsl-front

rules  

  builtin-java-type :
    SimpleSort("File") -> type|[ utils.File ]|

  //used in entity generation
  //hibernate has a built-in mapping for java.sql.Blob
  type-specific-annotations :
    Property(x_prop, k, s, annos) -> <file-specific-annotations>
    where <?SimpleSort("File")> s
    
  file-specific-annotations =
    ![ anno |[ @OneToOne(fetch = javax.persistence.FetchType.LAZY) ]|
     , anno |[ @org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.PERSIST, org.hibernate.annotations.CascadeType.SAVE_UPDATE, org.hibernate.annotations.CascadeType.MERGE}) ]|
     ]
 
rules
    
  java-servlet-element-id :
    tc@DownloadLink(_,_,_){anno*} -> tc{ActionNumber(newid),anno*} 
    where  newid := <newname> "action"
    
rules
  
  //outputFile is already desugared, see modules/types/file.str
 
  //for downloading files, a modified action call is used
   
   elem-to-java-servlet :
    tc@DownloadLink(e3@ActionCall(name, args),passign*,elem*) ->
    bstm* |[ 
    out.print("<a href=\"javascript:void(0)\" "+e_attrs1+" onclick='javascript:serverInvokeDownloadCompatible(\""+threadLocalPageCached.getAbsoluteLocation()+"/" + threadLocalPageCached.getActionTarget()  +"\",\""+ e_ident+"\", ["+threadLocalPageCached.getHiddenPostParamsJson()+"],\""+threadLocalPageCached.getFormIdent()+"\", this)' >");
    bstm*
    out.print("</a>");
    ]|
    with  bstm* := <elems-to-java-servlet> elem*
        ; actionident := <get-actionnumber> tc   
        ; e5 := <actual-action-args-to-state-enc> args
        ; e_attrs1 := <to-html-attrs(|"downloadlink")> passign*
        ; e_ident := <for-loop-counter-wrap-code-expr> java:expr|["~actionident"+getUniqueId()+e5]|
        
  handle-actions-to-java-servlet: 
    tc@DownloadLink(e1,passign*,elem*) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
        ident += "~actionident"+getUniqueId()+e5;
        if(threadLocalPageCached.getParammap().get(ident)!=null ) // not necessary: && threadLocalPageCached.getParammap().get(ident).equals("1") )
        {
            x_action temp = (x_action)getAction("~x_action");
            temp.run(e*,ident);
        }
    ]|
    with  actionident := <get-actionnumber> tc   
        ; x_action := <?ActionCall(name,args);!name> e1
        ; <get-anno(?ActionFargAnno(fargcalled))> e1
        ; e* := <action-args-to-java-exp-list(|args,fargcalled)>
        ; e5 := <actual-action-args-to-state-enc> args   
          
  //in first traversal, for input data binding, already register which action is executed, in order to know about ignore-validation
  //we need handle-actions traversal as well to get the right arguments for the action, which may depend on input data binding
  handle-actions-input-to-java-servlet:
    tc@DownloadLink(e1,passign*,elem*) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
        ident += "~actionident"+getUniqueId()+e5;
        if(threadLocalPageCached.getParammap().get(ident)!=null )
        {
            x_action temp = (x_action)getAction("~x_action");
            threadLocalPageCached.setActionToBeExecuted(temp);
        }
    ]|
    with  actionident := <get-actionnumber> tc   
        ; x_action := <?ActionCall(name,args);!name> e1
        ; e5 := <actual-action-args-to-state-enc> args   
    
rules //file download   
    
  call-to-java-servlet :
    exp  |[ e.download() ]| -> java |[ ThreadLocalPage.get().setDownload(e2) ]|
    where SimpleSort("File") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
      
  call-to-java-servlet :
    exp  |[ e.fileName() ]| -> java |[ e2.getFileName() ]|
    where SimpleSort("File") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
    