module org/webdsl/dsl/to-java-servlet/types/file

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  libwebdsl-front

rules  

//copied from string, which of these are actually used?
  sort-to-java-type-string : SimpleSort("File") -> "utils.File"
  
  builtin-java-type :
    SimpleSort("File") -> type|[ utils.File ]|

  builtin-java-type-default-value :
    SimpleSort("File") -> java|[ null ]|

  type-default-value :
    SimpleSort("File") -> exp|[ null ]|


  type-specific-annotations :
    Property(x_prop, k, s, annos) ->
    [ anno |[ @OneToOne(fetch = javax.persistence.FetchType.LAZY) ]|
    , anno |[ @org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.PERSIST, org.hibernate.annotations.CascadeType.SAVE_UPDATE, org.hibernate.annotations.CascadeType.MERGE}) ]|
    ]
    where <?SimpleSort("File")> s
 
/*  
rules // Desugaring
      
  DeriveInputBuiltins :
    elem|[ input(e){} ]| -> elem|[ inputFile(e){} ]|
    where SimpleSort("File") := <type-of> e
  
  DeriveOutputBuiltins :
    elem|[ output(e){} ]| -> elem|[ outputFile(e){} ]|
    where SimpleSort("File") := <type-of> e
    
  DeriveInput :
    elem|[ input(e){} ]| -> elem|[ inputBinary(e){} ]|
    where SimpleSort("Binary") := <type-of> e
      
  DeriveOutput :
    elem|[ output(e){} ]| -> elem|[ outputBinary(e){} ]|
    where SimpleSort("Binary") := <type-of> e

rules // Annotations

  builtin-persistence-annotations :
    SimpleSort("Binary") ->
      [anno|[ @Basic(fetch=FetchType.LAZY) ]|,
       anno|[ @Column(columnDefinition="LONGBLOB") ]|]

rules // Typechecking
   
  sort-to-java-type-string : SimpleSort("Binary") -> "java.lang.Byte[]"
      
  builtin-java-type : 
    SimpleSort("Binary") -> type|[ byte[] ]|

  builtin-java-type-default-value :
    SimpleSort("Binary") -> java|[ null ]|

  type-default-value :
    SimpleSort("Binary") -> exp|[ null ]|
    
  builtins-initialization-expression :
    (Ref(), SimpleSort("File")) -> |[ new File() ]|
*/
rules
  
  java-servlet-element-id : 
    tc@elem|[ inputFile(e)[passign*]{} ]| -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
        ; newid := <newname> "input"

  handle-actions-input-to-java-servlet :
    tc@elem|[ inputFile(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code> 
    bstm*|[
      ident += "~inputident"+uniqueid;
      if (ps.getFileUploads().get(ident)!=null) {
         utils.File x_temp = ps.getFileUploads().get(ident);
         bstm 
      }
    ]|
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; bstm := <input-assignment-to-java-servlet(|x_temp)> e
    
  elem-to-java-servlet : 
    tc@elem|[ inputFile(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code>
    bstm* |[ 
      String x_temp = ident+"~inputident"+uniqueid;
      out.print("<input name=\""+x_temp+"\" "+e_attrs1+" type=\"file\" />"); 
    ]|
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs> passign*        
    
  
  elem-to-java-servlet :
    elem|[ inputFile(e)[passign*]{} ]| ->
    java |[ out.print("todo: inputfile"); ]|
    /*
    %>
      <div>
      <s:fileUpload id="<%= label%>"
      data="#{<%= estring %>.data}"
      contentType="#{<%= estring %>.contenttype}"
      fileName="#{<%= estring %>.name}" required="<%= req %>"/>
      </div>
    <%
    with estring := <arg-to-el> e
       ; label := <newname> "inputFileId"
       ; req := <input-of-required-property(|e)>
    */
    
  elem-to-java-servlet :
    elem|[ outputFile(e)[passign*]{} ]| ->
    java |[ out.print("todo: outputfile"); ]|
  /*
  elem-to-java-servlet :
    elem |[ outputString(e)[passign*]{} ]| ->
    java |[ out.println(utils.HTMLFilter.filter(e1)); ]|
    with  e1 := <arg-to-value-string-java-servlet> e
    */   
    
  elem-to-java-servlet :
    elem|[ inputBinary(e)[passign*]{} ]| ->
    java |[ out.print("todo: inputbinary"); ]|

  elem-to-java-servlet :
    elem|[ outputBinary(e)[passign*]{} ]| ->
    java |[ out.print("todo: outputbinary"); ]|
    
    
rules //file download   
    
 call-to-java-servlet :
   exp  |[ e.download() ]| ->   java |[ ps.setDownload(e2) ]|
   with  e2    := <expression-to-java-servlet> e
