module org/webdsl/dsl/to-java-servlet/types/image

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front

rules // types

  builtin-java-type :
    SimpleSort("Image") -> type|[ utils.File ]|

  //used in entity generation
  //hibernate has a built-in mapping for java.sql.Blob
  type-specific-annotations :
    Property(x_prop, k, s, annos) -> <file-specific-annotations>
    where <?SimpleSort("Image")> s

rules
  
  java-servlet-element-id :
    tc@OutputImage(_,_,_){anno*} -> tc{ActionNumber(newid),anno*} 
    where  newid := <newname> "action"

rules

  //for displaying images, modified action call is used, the src of the image needs to be a call to the page with the arguments that invoke a download action
     
  elem-to-java-servlet :
    tc@OutputImage(ActionCall(name, args),passign*,elem*) ->
    bstm* |[ 
        out.print("<img alt=\"");
        bstm*
        out.print("\""+e_attrs1+"src='"+ThreadLocalPage.get().getAbsoluteLocation()+"/" + ThreadLocalPage.get().getActionTarget()  +"?"+ e_ident +"=1&"+"~<action-call-with-get-param-name>"+"=1&"+ThreadLocalPage.get().getHiddenPostParams()+"' >");
        out.print("</img>");
    ]|
    with  tcident := <get-actionnumber> tc   
        ; bstm* := <elems-to-java-servlet> elem*      
        ; e5 := <actual-action-args-to-state-enc> args
        ; e_attrs1 := <to-html-attrs(|"outputimage")> passign*
        ; e_ident := <for-loop-counter-wrap-code-expr> java:expr|["~tcident"+e5]|
        
  handle-actions-to-java-servlet: 
    tc@OutputImage(call@ActionCall(x_name, args),passign*,elem*) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
        ident += "~tcident"+e5;
        if(ThreadLocalPage.get().getParammap().get(ident)!=null)
        {
            x_name temp = (x_name)getAction("~x_name");
            temp.run(e*,ident);
        }
    ]|
    with  tcident := <get-actionnumber> tc   
        ; <get-anno(?ActionFargAnno(fargcalled))> call
        ; e* := <action-args-to-java-exp-list(|args,fargcalled)>
        ; e5 := <actual-action-args-to-state-enc> args

  //in first traversal, for input data binding, already register which action is executed, in order to know about ignore-validation
  //we need handle-actions traversal as well to get the right arguments for the action, which may depend on input data binding
  handle-actions-input-to-java-servlet:
    tc@OutputImage(call@ActionCall(x_name, args),passign*,elem*) ->
    bstm*|[
        ident += "~tcident"+e5;
        if(ThreadLocalPage.get().getParammap().get(ident)!=null)
        {
            x_name temp = (x_name)getAction("~x_name");
            ThreadLocalPage.get().setActionToBeExecuted(temp);
        }
    ]|
    with  tcident := <get-actionnumber> tc   
        ; e5 := <actual-action-args-to-state-enc> args

rules //image download   
    
  call-to-java-servlet :
    exp|[ e.download() ]| -> java|[ ThreadLocalPage.get().setDownload(e2) ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
    
  call-to-java-servlet :
    exp  |[ e.fileName() ]| -> java |[ e2.getFileName() ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e

  call-to-java-servlet :
    exp  |[ e.resize(e_width, e_height) ]| -> java |[ utils.ImageSizeUtils.resizeImage(e_HibSession, e2, e3, e4) ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
       ;  e3 := <expression-to-java-servlet> e_width
       ;  e4 := <expression-to-java-servlet> e_height

  call-to-java-servlet :
    exp  |[ e.crop(e_x, e_y, e_width, e_height) ]| -> java |[ utils.ImageSizeUtils.cropImage(e_HibSession, e2, e3, e4, e5, e6) ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
       ;  e3 := <expression-to-java-servlet> e_x
       ;  e4 := <expression-to-java-servlet> e_y
       ;  e5 := <expression-to-java-servlet> e_width
       ;  e6 := <expression-to-java-servlet> e_height

  call-to-java-servlet :
    exp  |[ e.getWidth() ]| -> java |[ utils.ImageSizeUtils.getWidth(e_HibSession, e2) ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
  
  call-to-java-servlet :
    exp  |[ e.getHeight() ]| -> java |[ utils.ImageSizeUtils.getHeight(e_HibSession, e2) ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e

  call-to-java-servlet :
    exp  |[ e.clone() ]| -> java |[ e2.makeClone() ]|
    where SimpleSort("Image") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
