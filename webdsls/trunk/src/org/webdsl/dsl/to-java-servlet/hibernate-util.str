module org/webdsl/dsl/to-java-servlet/hibernate-util

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules

  hibernate-forall-criteria :
    (term{JoinProperties(joinproperties)}, t, x, srt, Filter(wh,ob,lim)) -> e_criteria
    with  e_criteria := <foldr(!expr|[ hibSession.createCriteria(t.class).setCacheable(true) ]|,hibernate-forall-criteria-join)> joinproperties
        //try on next line since not all ordering can be translated to query
        /** ; e_criteria := <foldr(!e0,hibernate-forall-criteria-filter(|x,srt));where(rules(OrderAndLimitApplied:=True())) <+ !e0> [lim,ob]  */
    
  hibernate-forall-criteria-join:
    (str, e) -> expr|[ e.setFetchMode("~str", org.hibernate.FetchMode.JOIN) ]|

  /**
   * Hibernate optimization below on hold, Zef is working on a replacement ORM
   */
  hibernate-forall-criteria-filter(|x,srt) = hibernate-forall-criteria-filter
  
  hibernate-forall-criteria-filter: 
    (Limit(limit,first), e) -> expr|[ e.setFirstResult(e_first).setMaxResults(e_limit) ]|
    with  e_limit := <expression-to-java-servlet> limit
        ; e_first := <expression-to-java-servlet> first

  hibernate-forall-criteria-filter(|x,srt) =
    // if the order clause is simply a property, then the query can do the ordering   
    hibernate-forall-criteria-order-is-prop(|x,srt)
  <+\(OrderDescending(Null()), e) -> e\
  <+\(OrderAscending(Null()), e) -> e\
  
  hibernate-forall-criteria-order-is-prop(|x,srt) :
    (OrderDescending(orderexp), e) -> <hibernate-forall-criteria-order-is-prop-helper(|x,srt,"desc")> (orderexp, e)
     
  hibernate-forall-criteria-order-is-prop(|x,srt) :
    (OrderAscending(orderexp), e) -> <hibernate-forall-criteria-order-is-prop-helper(|x,srt,"asc")> (orderexp, e)

  hibernate-forall-criteria-order-is-prop-helper(|x,srt,x_order) :
    (orderexp, e) -> expr|[ e.addOrder(org.hibernate.criterion.Order.x_order("~<concat-strings> ["_",prop]")) ]|
    with  SimpleSort(ent) := srt
    where FieldAccess(var,prop) := orderexp
        ; Var(x) := var
        ; <type-of-property> (ent,prop)

rules

  GenerateCodeJavaServlet = generate-java-servlet-hibernate-util; fail

  generate-java-servlet-hibernate-util :
    Application(qid, sections) ->
    <emit-java-code> compilation-unit|[
    package utils;
    
    import java.util.Properties;
    
    import org.hibernate.*;
    import org.hibernate.cfg.*;
    
    import pkgname.*;
    public class HibernateUtilConfigured {
        private static final SessionFactory sessionFactory;
    
        static {
    
            try {
                //Properties prop = HibernateUtil.getProperties();
    
                AnnotationConfiguration annotationConfiguration = new AnnotationConfiguration();
    

                annotationConfiguration.addPackage("utils");    
                annotationConfiguration.addAnnotatedClass(utils.ApplicationContextProperty.class);
                annotationConfiguration.addAnnotatedClass(utils.File.class);

                annotationConfiguration.addPackage("~domainpack");
                //annotationConfiguration.addAnnotatedClass(User.class);
                bstm*
    
                //annotationConfiguration.addProperties(prop);
                
                //bstm1*
    
                sessionFactory = annotationConfiguration.buildSessionFactory();
                
            } catch (Throwable ex) {
                throw new ExceptionInInitializerError(ex);
            }
        }
    
        public static SessionFactory getSessionFactory() {
            return sessionFactory;
        }
    
    }
    ]|
    with pkgname := <DomainPackage>
       ; domainpack := <pp-java5-to-string> <DomainPackage>
       ; bstm* := <map({\ 
                           x -> bstm |[ annotationConfiguration.addAnnotatedClass(x_class); ]| 
                           where x_class := <concat-strings> [<DomainPackage;pp-java5-to-string>,".",x,".class"]
                       \})> 
                       <bagof-Entities;make-set>
      /* ; if not([] := <AllGlobalVars>) 
         then bstm1* := [ bstm |[ annotationConfiguration.addAnnotatedClass(ApplicationContextProperty.class); ]| ]
         else bstm1* := [] end
 */
