module org/webdsl/dsl/to-java-servlet/search

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front

strategies

  property-to-index-annos :
    Property(x, _, s, anno*) -> [anno|[ @org.hibernate.search.annotations.Field(name="~x") ]|]
    where not([] := <filter(?SimpleAnno("searchable"))> anno*)

  property-to-index-annos :
    Property(x, _, s, anno*) -> []
    where [] := <filter(?SimpleAnno("searchable"))> anno*

  property-to-index-annos :
    DerivedProperty(x, _, s, anno*, e) -> []

strategies // utilities

  get-all-indexed-entities =
      ?Application(_, <id>)
    ; filter(
          ?Section(_,<id>)
        ; filter(
            ?Entity(_,_,_) <+ ?EntityNoSuper(_,_)
          ; where(get-anno(?IndexedAnno())))
      )
      ; concat

  entity-to-class = ?Entity(<id>,_,_) <+ ?EntityNoSuper(<id>,_)

strategies

  generate-java-search-functions =
    entities := <get-all-indexed-entities>
    ; !<map(entity-to-java-search-function);concat> entities

  entity-to-java-search-function :
    entity -> class-body-dec* |[
      public static java.util.List<x_Class> x#_(org.hibernate.Session hibSession, Environment env, String searchQuery, PrintWriter out)  {
        return x#_(hibSession, env, searchQuery, 1000, 0, out);
      }
      public static java.util.List<x_Class> x#_(org.hibernate.Session hibSession, Environment env, String searchQuery, int limit, PrintWriter out)  {
        return x#_(hibSession, env, searchQuery, limit, 0, out);
      }
      public static java.util.List<x_Class> x#_(org.hibernate.Session hibSession, Environment env, String searchQuery, int limit, int offset, PrintWriter out)  {
        String[] searchFields = { e_sf* };
        org.apache.lucene.queryParser.QueryParser parser = new org.apache.lucene.queryParser.MultiFieldQueryParser(searchFields, new org.apache.lucene.analysis.standard.StandardAnalyzer());
        try {
          org.apache.lucene.search.Query luceneQuery = parser.parse(searchQuery);
          org.hibernate.search.FullTextSession fts = org.hibernate.search.Search.getFullTextSession(hibSession);
          org.hibernate.Query query = fts.createFullTextQuery(luceneQuery, x_Class.class).setMaxResults(limit).setFirstResult(offset);
          
          return query.list();
        } catch (org.apache.lucene.queryParser.ParseException pe) {
          return new java.util.ArrayList<x_Class>();
        }
      }
    ]|
    with x_Class := <entity-to-class> entity
       ; x := <concat-strings> ["search", x_Class]
       ; e_sf* := <bagof-Properties; concat; filter(\ Property(name, _, _, anno*) -> expr|[ "~name" ]|
                                        where not([] := <filter(?SimpleAnno("searchable"))> anno*) \); make-set> x_Class

strategies

  GenerateCodeJavaServlet = generate-java-servlet-reindexer; fail

  generate-java-servlet-reindexer :
    app@Application(qid, sections) ->
    <emit-java-code> compilation-unit|[
      package utils;
  
      import java.util.List;
  
      import javax.servlet.*;
      import javax.servlet.http.*;
  
      import utils.*;
      import pkgname.*;
  
      public class ReIndex {
        public static void main(String[] args) {
          bstm*
          System.exit(0);
        }

        ~*cbd*
      }
    ]|
    with pkgname := <DomainPackage>
       ; classes := <get-all-indexed-entities; map(entity-to-class)> app
       ; bstm* := <map(\ x_name -> java|[ for(int p = 0; index#x_name(p); p++); ]|\)> classes
       ; cbd* := <map(generate-java-servlet-indexer)> classes

  generate-java-servlet-indexer :
    x_Class -> class-body-dec |[
        private static boolean index#x_Class(int page) {
          System.out.println("Indexing " + "~x_Class" + ": " + (page * 1000) + " - " + ((page + 1) * 1000));
          org.hibernate.Session session = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
          session.beginTransaction();
          List<x_Class> results = session.createQuery("from " + "~x_Class").setFirstResult(1000*page).setMaxResults(1000).list();
          org.hibernate.search.FullTextSession ftem = org.hibernate.search.Search.getFullTextSession(session);
          ftem.getTransaction().begin();
          for(x_Class r : results) {
            ftem.index(r);
          }
          int resultLength = results.size();
          ftem.getTransaction().commit();
          return resultLength == 1000;
        }
      ]|
