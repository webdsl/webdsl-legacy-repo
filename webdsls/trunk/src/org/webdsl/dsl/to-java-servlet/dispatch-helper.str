module org/webdsl/dsl/to-java-servlet/dispatch-helper

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/to-java-servlet
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet

rules

  generate-code-java-servlet-once: _ ->
    <emit-java-code; fail> compilation-unit|[
      package utils;

      import java.io.*;
      import java.util.HashMap;
      import java.util.Map;
      import java.util.List;
      import java.util.LinkedList;
      import java.util.ArrayList;
      import java.util.TimeZone;
        import java.text.SimpleDateFormat;
        import java.text.DateFormat;
        import java.util.Date;

      import javax.servlet.*;
      import javax.servlet.http.*;

      import utils.*;
      import pkgname.*;
      import org.webdsl.lang.Environment;
      import org.webdsl.WebDSLEntity;
      import pkgtname2.RequestLogEntry;
      import pkgtname2.SessionManager;

      @SuppressWarnings({"unused","unchecked","rawtypes"})
      public class DispatchServletHelper extends AbstractDispatchServletHelper{
          static{
            utils.EntityReflectionHelper.init(); // in separate file to improve caching
          }
          pkgtname2.SessionManager sessionManager = null;
          public pkgtname2.SessionManager getSessionManager(){
            return sessionManager;
          }
          public void loadSessionManager(org.hibernate.Session hses){
            loadSessionManager(hses, null);
          }
          public void loadSessionManager(org.hibernate.Session hses, String[] joins) {
            String basicCookieInfo = "WEBDSLSESSIONID=" + utils.UUIDUserType.persistUUIDString(sessionId) + "; HttpOnly; path=/";
            String setCookie = "SET-COOKIE";
            try{
              /*if(joins == null || joins.length == 0) {*/
                sessionManager = (SessionManager)hses.get(SessionManager.class, sessionId); //from org.hibernate.Session documentation: you should not use load() to determine if an instance exists (use get() instead)
              /*} else {
	              List<SessionManager> results = utils.QueryOptimization.addJoinsIfOptimizationEnabled(hses.createCriteria(SessionManager.class), joins)
	                .add( org.hibernate.criterion.Restrictions.idEq(sessionId) )
	                .list();
				        if(results.size() != 0){
				          sessionManager = results.get(0);
				        }
			        }*/
              if(sessionManager == null){
                throw new RuntimeException();
              }
            }
            catch(Exception ex){
              ~*<![];if-debug(!bstm*|[  org.webdsl.logging.Logger.info("session entity could not be loaded, creating new");  ]|)>
              sessionManager = new SessionManager();
              sessionManager.setId(sessionId);
              sessionManager.setLastUseNoEventsOrValidation(new java.util.Date());
              sessionManager.setChanged();
              hses.save(sessionManager);
              // new SessionManager means new Cookie
              response.setHeader(setCookie, basicCookieInfo);
            }
            if(sessionManager.getStayLoggedIn() != null && sessionManager.getStayLoggedIn()){
                Date expdate = utils.DateType.addMinutes(new Date(), 10000);
                DateFormat df = new SimpleDateFormat("dd MMM yyyy kk:mm:ss z");
                df.setTimeZone(TimeZone.getTimeZone("GMT"));
                   response.setHeader(setCookie, basicCookieInfo+ "; expires=" + df.format(expdate));
            }
            //internalUpdateSessionManagerTimeout is defined in WebDSL code (built-in.app)
            webdsl.generated.functions.internalUpdateSessionManagerTimeout_.internalUpdateSessionManagerTimeout_();
          }
          public void storeOutgoingMessagesInHttpSession(){
            if(sessionManager.getMessages().size() > 0){
              sessionManager.removeAllFromMessages();
            }
            if(outgoingSuccessMessages.size() > 0){
              //session.setAttribute("___messages___",outgoingSuccessMessages);
              for(String s : outgoingSuccessMessages){
                pkgtname2.SessionMessage m = ambname2.SessionMessage._static_createEmpty_();
                m.setTextNoEventsOrValidation(s);
                sessionManager.getMessages().add(m);
              }
            }
          }
          public void retrieveIncomingMessagesFromHttpSession(){
            /*List<String> temp = null;//(List<String>) session.getAttribute("___messages___");
            if(temp != null){
              incomingSuccessMessages = temp;
            }*/
            for(pkgtname2.SessionMessage m : sessionManager.getMessages()){
              incomingSuccessMessages.add(m.getText());
            }
          }
          //List<String> messages;
          RequestLogEntry requestLogEntry = null;
          public RequestLogEntry getRequestLogEntry(){
            return requestLogEntry;
          }

          static
          {
            try{
              java.util.Properties props = new java.util.Properties();
              props.load(DispatchServletHelper.class.getResourceAsStream("/tomcat.properties"));
              httpsPort = Integer.parseInt(props.getProperty("webdsl.tomcat.https.port"));
              httpPort = Integer.parseInt(props.getProperty("webdsl.tomcat.http.port"));
            }
            catch(Exception ex){
              org.webdsl.logging.Logger.error("Could not read tomcat.properties file, custom http(s) port settings are ignored in the currently deployed application.");
            }
          }

          DispatchServlet servlet;

          public DispatchServletHelper(DispatchServlet servlet, boolean isPost, String contextPath) {
            this.servlet = servlet;
            this.isPostRequest = isPost;
            this.contextPath = contextPath;
          }

          DispatchServlet getServlet() { return servlet; }

          static{
              bstm*
              bstm1*
          }


          /**
           *  uses separate session/transaction to push log to database
           */
          /*public void storeRequestLogEntryinSeparateSession(){
            if(utils.BuildProperties.isRequestLoggingEnabled()){
              org.hibernate.Session hibSession = utils.HibernateUtil.getCurrentSession();
              try
              {
                hibSession.beginTransaction();
                storeRequestLogEntry(hibSession);
                hibSession.getTransaction().commit();
              }
              catch(Exception se)
              {
                org.webdsl.logging.Logger.error("Exception occured while storing request log entry.");
                org.webdsl.logging.Logger.error("EXCEPTION",se);
                hibSession.getTransaction().rollback();
              }
            }
          }*/
          public void storeRequestLogEntry(org.hibernate.Session hibSession){
            hibSession.saveOrUpdate(requestLogEntry);
          }
          public void setEndTimeAndStoreRequestLog(org.hibernate.Session hibSession){
            if(utils.BuildProperties.isRequestLoggingEnabled()){
              requestLogEntry.setEndNoEventsOrValidation(new java.util.Date());
              storeRequestLogEntry(hibSession);
            }
          }

          public void doServe(HttpServletRequest request, HttpServletResponse response)
          throws IOException, ServletException
          {
            requestLogEntry = RequestLogEntry._static_createEmpty_();
            requestLogEntry.setStartNoEventsOrValidation(new java.util.Date());

            if(request.getCookies() != null) {
              for(Cookie c : request.getCookies()){
                if("WEBDSLSESSIONID".equals(c.getName())){
                  try{
                    sessionId = utils.UUIDUserType.retrieveUUID(c.getValue());
                  }
                  catch(Exception ex){
                    org.webdsl.logging.Logger.error("Could not create UUID from String, new session will be created");
                  }
                }
              }
            }
            if(sessionId == null) {
                sessionId = java.util.UUID.randomUUID();
            }

            this.request=request;
            this.response=response;
            response.setCharacterEncoding("UTF-8");

            ThreadLocalServlet.set(this);

            //org.webdsl.logging.Logger.error("dispatch" + request.getRequestURL().toString());

            boolean showerrorpage = false;
            boolean showvalidationerror = false;
            MultipleValidationExceptions validationExceptions = null;
            try{
              String url = request.getRequestURL().toString();
              String baseUrl = url.substring(0, url.length() - request.getRequestURI().length()) + request.getContextPath() + "/";
              String[] req = url.split("/");
     
              /*
              for(int ci=0; ci < req.length; ci++) {
              //it is an issue which replacements should be applied in input and output of URLS
              //, since urlencoding interprets + as a space,
              //but in the output of applications + signs seems not to be converted %2B....
              // +  to %2B
              // + to ' '
              // ' ' to %20
              // + to '%20'
                 req[ci] = paramDecode(request, java.net.URLDecoder.decode(req[ci].replaceAll("\\+", "%2B"), "ISO-8859-1"));
              }
              */
              int count;
              boolean first = false;
              if(ThreadLocalServlet.getContextPath().length() > 1){ // not deployed as ROOT.war
                for(count=0;count<req.length;count++)
                {
                  if(req[count].equals("~<AppName>"))
                  {
                    count++;
                    break;
                  }
                }
              }
              else{
                count = 3;
              }

              String[] argnames;
              String[] args;
              urlComponents = new ArrayList<String>();
              
              if(count > req.length-1) { // root page, no page name
                requested = "root";
                args = new String[0]; // root page takes no arguments
                urlComponents.add("root");
              } else {
                requested = req[count];
                args = java.util.Arrays.copyOfRange(req, count+1, req.length);
                urlComponents.add(requested);
                urlComponents.addAll(java.util.Arrays.asList(args));
              }
              
              // page dispatch custom routing rules
		      List<String> customRoutingList = Routing.processRequest(urlComponents);
		      if(customRoutingList != null)
		      { 
		        requested = customRoutingList.get(0);
		        customRoutingList.remove(0);
		        args = new String[customRoutingList.size()];
                customRoutingList.toArray(args); 
		      }
      
              // retrieve the page argument names to make one map of url arguments and GET parameters
              argnames = pages.get(requested).getArgs();

              fileUploads = new HashMap<String, utils.File>();
              parammap = new HashMap<String, String>();
              parammapvalues = new HashMap<String, List<String>>();

              for(java.util.Enumeration en = request.getParameterNames();en.hasMoreElements(); ){
                String parameterName = (String)en.nextElement();
                parammap.put(parameterName,paramDecode(request, request.getParameter(parameterName)));
              //  parammap.put(parameterName,request.getParameter(parameterName));
                for(String paramval : request.getParameterValues(parameterName)){
                  addToValues(parameterName, paramDecode(request,paramval), parammapvalues);
                 // addToValues(parameterName, paramval, parammapvalues);
                }
              }
              int count2 = 0;
              for(count2 = 0; count2<args.length;count2++)
              {
                if(count2 >= argnames.length){
                  /*
                  // previous message implementation appended messages at end of url, might still be useful for variable argcount
                  try {
                    messages.add(java.net.URLDecoder.decode(args[count2],"UTF-8"));
                  } catch (java.io.UnsupportedEncodingException uee) {
                    org.webdsl.logging.Logger.error("EXCEPTION",uee);
                  }*/
                }
                else
                {
                  String decoded = utils.URLFilter.unfilter(args[count2]);
                  parammap.put(argnames[count2],decoded);
                  addToValues(argnames[count2],decoded,parammapvalues);
                }
              }
              if(count2 < argnames.length){
                if(!isPostRequest && parammap.get("~<action-call-with-get-param-name>") == null){
                //ajax calls, which are always post, only have the page name in the url
                //action-call-with-get-param-name is used in imageOutput, to indicate a 'get' request containing an action call
                  if(unspecifiedArgumentsContainEntityTypes(argnames,count2)){
                    throw new utils.TooFewArgumentsException();
                  }
                }
              }

              //http://commons.apache.org/fileupload/using.html
              // Check that we have a file upload request
              boolean isMultipart = org.apache.commons.fileupload.servlet.ServletFileUpload.isMultipartContent(request);
              if(isMultipart){

                  // Create a factory for disk-based file items
                  org.apache.commons.fileupload.FileItemFactory factory = new org.apache.commons.fileupload.disk.DiskFileItemFactory();

                  // Set factory constraints
                  //factory.setSizeThreshold(yourMaxMemorySize);//make configurable
                  //factory.setRepository(yourTempDirectory);//make configurable

                  // Create a new file upload handler
                  org.apache.commons.fileupload.servlet.ServletFileUpload upload = new org.apache.commons.fileupload.servlet.ServletFileUpload(factory);

                  // Set overall request size constraint
                  //upload.setSizeMax(); //make configurable

                  // Parse the request
                  try {
                      java.util.List<org.apache.commons.fileupload.FileItem> items = (java.util.List<org.apache.commons.fileupload.FileItem>) upload.parseRequest(request);

                      // Process the uploaded items
                      java.util.Iterator<org.apache.commons.fileupload.FileItem> iter = items.iterator();
                      while (iter.hasNext()) {
                          org.apache.commons.fileupload.FileItem item = (org.apache.commons.fileupload.FileItem) iter.next();

                          if (item.isFormField()) {
                              String name = item.getFieldName();
                              String value = item.getString();
                              parammap.put(name, paramDecode(request,value));
                              addToValues(name, paramDecode(request,value), parammapvalues);
                              //parammap.put(name, value);
                              //addToValues(name, value, parammapvalues);
                          } else {
                              String fieldName = item.getFieldName();
                              String fileName = item.getName();
                              String contentType = item.getContentType();
                              boolean isInMemory = item.isInMemory();
                              long sizeInBytes = item.getSize();
                              utils.File temp = new utils.File();
                              temp.setFileName(fileName);
                              temp.setContentType(contentType);

                              temp.setContentStream(item.getInputStream());

                              fileUploads.put(fieldName, temp);
                          }
                      }
                  } catch (org.apache.commons.fileupload.FileUploadException ex) {
                      org.webdsl.logging.Logger.error("exception occured in file upload handling DispatchServlet");
                      org.webdsl.logging.Logger.error("EXCEPTION",ex);
                  }
              }

              utils.PageDispatch pd = pages.get(requested);
              if(pd == null) {
                requested = "pagenotfound";
                pd = pages.get(requested);
                pc = pd.getPageClass(); //pagenotfound is always generated
              }
              else{
                pc = pd.getPageClass();
              }

              if(utils.BuildProperties.isRequestLoggingEnabled()){
                requestLogEntry.setRequestedURLNoEventsOrValidation(request.getRequestURL().toString());
                requestLogEntry.setNameNoEventsOrValidation(requested);
                requestLogEntry.setClientIPNoEventsOrValidation(request.getRemoteAddr());
                requestLogEntry.setClientPortNoEventsOrValidation(request.getRemotePort());
                if(this.isPostRequest){
                  requestLogEntry.setMethodNoEventsOrValidation("POST");
                }
                else{
                  requestLogEntry.setMethodNoEventsOrValidation("GET");
                }
                requestLogEntry.setUserAgentNoEventsOrValidation(request.getHeader("User-Agent"));
                requestLogEntry.setRefererNoEventsOrValidation(request.getHeader("Referer"));
              }
              showerrorpage = !handlePage();
            }
            catch(utils.TooFewArgumentsException ex){
              ~*<![];if-debug(!bstm*|[
                org.webdsl.logging.Logger.error("Too few arguments in page request, showing 404.");
              ]|)>
              showerrorpage=true;
            }
            catch(utils.AjaxWithGetRequestException ex){
              ~*<![];if-debug(!bstm*|[
                org.webdsl.logging.Logger.info("Ajax template request using 'GET' method is not allowed, showing 404.");
              ]|)>
              showerrorpage=true;
            }
            catch(utils.MultipleValidationExceptions ex){
            	showvalidationerror = true;
            	validationExceptions = ex;
            }
            catch(Exception ex){
              org.webdsl.logging.Logger.error("Exception in dispatch servlet: "+ex.getMessage());
              org.webdsl.logging.Logger.error("EXCEPTION",ex);
              showerrorpage=true;
            }

            if(showerrorpage){
              if(parammap.get("__ajax_runtime_request__") == null){ // ajax runtime expects JSON, not regular page content
                pc = pages.get("pagenotfound").getPageClass();
                if(!handlePage()){
                  response.setStatus(404);
                  response.getWriter().write("<h3>404 Not Found</h3>");
                }
              }
            } else if(showvalidationerror){
            	if(parammap.get("__ajax_runtime_request__") == null){ // ajax runtime expects JSON, not regular page content
              		response.setStatus(500);
              		response.getWriter().write( utils.ValidationErrorPopupCreator.getErrorPopup( validationExceptions ) );
              }
            }

            cleanupThreadLocals();
          }

          private boolean handlePage() {
            if(pc != null)
            {
              try
              {
                PageServlet pageservlet = (PageServlet)pc.newInstance();
                //pageservlet.getIncomingSuccessMessages().addAll(messages);
                pageservlet.serve(request, response, parammap, parammapvalues, fileUploads);
                bstm_buildid*
              }
              catch(IllegalAccessException iae)
              {
                org.webdsl.logging.Logger.error("Problem in dispatch servlet page lookup: " + iae.getMessage());
                org.webdsl.logging.Logger.error("EXCEPTION",iae);
                return false;
              }
              catch(InstantiationException ie)
              {
                org.webdsl.logging.Logger.error("Problem in dispatch servlet page lookup: " + ie.getMessage());
                org.webdsl.logging.Logger.error("EXCEPTION",ie);
                return false;
              }
              catch(MultipleValidationExceptions mve ){
              	throw mve; //just rethrow so caller can handle validation exceptions
              }
              catch(RuntimeException re)
              {
                return false;
              }
            }
            else
            {
              return false;
            }
            return true;
          }

       }
    ]|
    with  pkgname    := <TemplatePackage>
        ; pkgtname2   := <DomainPackage>
        ; ambname2 := pkgtname2
        ; bstm*  := <mapconcat({\
                           x -> bstm* |[
                           {
                             String[] s = { e* };
                             Boolean[] b = { e1* };
                             pages.put(x_key, new utils.PageDispatch(x_value, s, b, false));
                           }
                           ]|
                           with  x_key := <concat-strings> ["\"",<string-replace(|"$Override$","")>x,"\""]
                               ; x_value := <concat-strings> [<java-servlet-page-name> x,".class"]
                               ; e1*:= <TemplateFormalArguments;map(true-when-entity-type-arg)> x
                               ; e* := <TemplateFormalArguments;map( \Arg(y,_)-> e|[ "~<get-original-name> y" ]|\ )> x
                               //TemplateFormalArguments is defined in back-end after rename of templates and variables, for vars must give unrenamed versions so get-original-name is used
                        \})>
                        <bagof-AllPageNames; handle-page-overrides>
        ; bstm1*  := <mapconcat({\
                           x -> bstm* |[
                           {
                             String[] s = { e* };
                             Boolean[] b = { e1* };
                             pages.put(x_key, new utils.PageDispatch(x_value, s, b, true));
                           }
                           ]|
                           with  x_key := <concat-strings> ["\"",x,"\""]
                               ; x_value := <concat-strings> [<java-servlet-page-name> x,".class"]
                               ; e1*:= <TemplateFormalArguments;map(true-when-entity-type-arg)> x
                               ; e* := <TemplateFormalArguments;map( \Arg(y,_)-> e|[ "~<get-original-name> y" ]|\ )> x // must use unrenamed versions
                        \})>
                        <bagof-AllTopLevelTemplateNamesWithAjax; string-sort-annos>
         ; if build-id := <BuildIdOption> then
           build-id-request-var := <build-id-request-var-name>
         ; bstm_buildid* :=
             bstm*|[
               if(parammap.get("~build-id-request-var")!=null){
                 try {
                   response.getWriter().write("build-id:"+"~build-id");
                 } catch (IOException ioe) {
                   org.webdsl.logging.Logger.error("EXCEPTION",ioe);
                 }
               }
             ]|
         else
           bstm_buildid* := []
         end


  true-when-entity-type-arg :
    Arg(_,srt)-> e|[ true ]|
    where <has-entity-anno> srt
  true-when-entity-type-arg :
    Arg(_,srt)-> e|[ false ]|
    where not(<has-entity-anno> srt)

  handle-page-overrides = string-sort-desc-annos // add the overrides to hashmap last to override original entry

