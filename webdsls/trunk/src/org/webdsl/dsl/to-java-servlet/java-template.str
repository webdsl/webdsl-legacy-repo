module org/webdsl/dsl/to-java-servlet/java-template

imports 
  libstrategolib 
  libwebdsl-front


rules

  generate-java-servlet-template-partial =
    ? cbds
    //; where(not(ThisEmail)) also used for common parts in email
    ; with(
        pkgname    := <BeanPackage>
      ; x_Page  := <ThisTemplateClassName>
      ; if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
      ; <emit-java-code>
          compilation-unit|[
            package pkgname;
            @Partial
            public class x_Page{
              ~*cbds*
            }
          ]|
      )


rules
    
  GenerateCodeJavaServlet = where(not(ThisEmail)); generate-java-servlet-template; fail

  generate-java-servlet-template :
    def@def |[ define mod* x(farg*) req* { elem* } ]| ->
    <emit-java-code> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.Map;
        
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        import org.apache.commons.lang.ArrayUtils;
        
        import utils.*;
        import org.webdsl.tools.Utils;
        import org.webdsl.lang.Environment;
        import org.webdsl.WebDSLEntity;
        
        import pkgname2.*;
        import pkgname3.*;

        @Partial
        public class x_Page implements TemplateServlet
        {
          private void storeArguments(Object[] args) {
            bstm1*
          } 
    
          public int storeInputs(final PageServlet ps, Object[] args, int templatecounter, Environment env, utils.TemplateCall templateArg, Map<String, utils.TemplateCall> withcallsmap,  Map<String,String> attrs) {
            if(!skipThisTemplate){
              bstm2*
              storeInputsInternal();
            }
            return this.templatecounter;
          }         
          @Partial
          private void storeInputsInternal() {
          }
          
          public int validateInputs(final PageServlet ps, Object[] args, int templatecounter, Environment env, utils.TemplateCall templateArg, Map<String, utils.TemplateCall> withcallsmap,  Map<String,String> attrs) {
            if(!skipThisTemplate){
              bstm2*
              validateInputsInternal();
            }
            return this.templatecounter;
          }         
          @Partial
          private void validateInputsInternal() {
          }
          
          @Partial
          protected void initialize() {}
          
          @Partial void initActions() {}

          @Partial
          private void initializePassOn() {}

          @Partial
          private void initializeLocalVars() {}
                
          public int handleActions(final PageServlet ps, Object[] args, int templatecounter, Environment env, utils.TemplateCall templateArg , Map<String, utils.TemplateCall> withcallsmap, Map<String,String> attrs,  PrintWriter out) {          
            if(!skipThisTemplate){
              bstm2*
              this.out = out;         
              handleActionsInternal();
            }
            return this.templatecounter;
          }    
          
          @Partial
          private void handleActionsInternal() { }
          
          @Partial
          private void callTemplates() { }

          protected String[] pageArguments = null;
          public void setPageArguments(String[] pa) {
            pageArguments = pa;
          }
          public String[] getPageArguments() {
            return pageArguments;
          }
          
          boolean validated=true;
      
          PageServlet ps;

          int templatecounter;
          
          String uniqueid;
          
          Environment env;
          
          // cancels further handling of this template, e.g. when validation error occurs in init
          boolean skipThisTemplate = false;
          
          private java.util.Map<String, Object> templatecalls = new java.util.HashMap<String, Object>();
          //HashMap<String,Object> inputs = new HashMap<String,Object>();
          
          PrintWriter out;
          private org.hibernate.Session hibSession;
          private HttpServletRequest request;
          private HttpServletResponse response;
          private boolean initialized = false;
          private utils.TemplateCall templateArg;
          public Map<String, utils.TemplateCall> withcallsmap = null;
          Map<String,String> attrs = null;
          public Map<String, utils.TemplateCall> withcallsmapout = null;
          String form_ident = "";
          
          HttpSession session;
         
          public void cleanup(){
            templateArg = null;
            hibSession = null;
            out = null;
            ps = null;
            request = null;
            response = null;
            session = null;
            templatecalls.clear();
            templatecalls = null;
            env = null;
            uniqueid = null;
            cleanupGlobalAndSession();
            cleanupTemplateArgAndVar();
          }

          @Partial private void cleanupGlobalAndSession(){ }
          @Partial private void cleanupTemplateArgAndVar(){ }
          
          @Partial private void renderInternal(){ }

          public int render(final PageServlet ps,Object[] args,int templatecounter, Environment env, utils.TemplateCall templateArg , Map<String, utils.TemplateCall> withcallsmap, Map<String,String> attrs, PrintWriter out) { 
            if(!skipThisTemplate){
              bstm2*
           
              java.io.PrintWriter outtemp = out;
              java.io.StringWriter s = new java.io.StringWriter();
              this.out = new java.io.PrintWriter(s); 
              
              renderInternal();
              bstm_so*
              outtemp.write(s.toString());
              bstm_sc*
              
              cleanup();
            }
            return this.templatecounter;
          }
          
          public String getUniqueName() {
            return "~x";
          }
        }
          
      ]|
    with pkgname    := <BeanPackage>
       ; pkgname2   := <DomainPackage>
       ; pkgname3   := <ActionPackage>
       ; x_Page  := <ThisTemplateClassName>
       ; x_TemplateName := <OriginalNonUniqueName> x
       ; x_TemplateSig := <concat-strings> [x_TemplateName,"(",<map(\Arg(nm,srt)->Arg(<OriginalNonUniqueName> nm,srt)\;pp-webdsl-to-string);separate-by(|", ");concat-strings> farg*,")"]
       ; x_pnamequoted := <double-quote> x_Page
       ; if <fetch(?NoSpan())> mod* <+ JavaThisPage; not(NestedTemplate) then //no span for templates with no-span modifier, or pages
            bstm_so* := []
          ; bstm_sc* := []
          else
            bstm_so* := bstm* |[ if(ps.templateSpans()) outtemp.write("<span id=\""+"~x_TemplateName" + "\" class=\"scopediv "+"~x_TemplateName"+"\">"); ]|
          ; bstm_sc* := bstm* |[ if(ps.templateSpans()) outtemp.write("</span>"); ]|
          end
       ; bstm* := <local-defined-templates-to-hashmap> elem*
       ; bstm1* := <formal-arguments-to-store-statements> farg*
       ; e_argrepr := <formal-action-args-to-state-enc> farg*
       ; bstm2* := bstm* |[
            if(!initialized || ps.hibernateCacheCleared)
            {
              //System.out.println("template init "+"~x_Page"+"init: "+initialized+ " hibcache: "+ps.hibernateCacheCleared);
              initialized=true;
              
              this.env = env;
              bstm*
              this.ps = ps;
              this.templatecounter = templatecounter;
              this.request = ps.getRequest();
              this.response = ps.getResponse();
              this.session = request.getSession(true);
              this.hibSession = ps.getHibSession();
              this.templateArg = templateArg;
              this.withcallsmap = withcallsmap;
              this.attrs = attrs;
     
              try {
                storeArguments(args);
                this.uniqueid = Encoders.encodeTemplateId(x_pnamequoted, e_argrepr, PageServlet.isAjaxApp? 0 : templatecounter);
                initialize();
                initializeLocalVars();
                initializePassOn();
                initActions();
              }
              catch(utils.ValidationException ve){
                ps.getValidationExceptions().add(ve.setName(ps.getValidationContext()));
                ps.setValidated(false);
                utils.Warning.warn("Validation failed in initialization of "+"~x_TemplateSig"+": "+ve.getErrorMessage());  
                skipThisTemplate = true;
                return this.templatecounter;
              }
              catch(utils.MultipleValidationExceptions ve){
                for(utils.ValidationException vex : ve.getValidationExceptions()){
                  ps.getValidationExceptions().add(vex.setName(ps.getValidationContext()));
                  utils.Warning.warn("Validation failed in initialization of "+"~x_TemplateSig"+": "+vex.getErrorMessage());  
                }
                ps.setValidated(false); 
                skipThisTemplate = true;
                return this.templatecounter;
              }
            } 
       ]|
       
rules
  local-defined-templates-to-hashmap :
    elem* -> result
    with  localtemplates := <collect({\def@webdsl|[ define mod* x(farg*)  req* { elem* } ]| -> (x,<get-template-class-name> def)\})> elem*
        ; result := <map({\ (x,xclass) -> bstm |[ env.putTemplate(x_key, x_value); ]| 
                             where x_key := <concat-strings> ["\"",x,"\""]
                                 ; x_value := <concat-strings> [xclass,".class"]
                          \})> localtemplates 
 
  formal-arguments-to-store-statements :
    farg* -> result
    where  result := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> bstm|[ x = (x_arg) args[x_index]; ]|
                                            where x_index := <subti;int-to-string> (index,1)
                                                ; x_arg := <argument-java-servlet-type> arg
                                          \})> farg* //variables are generated in java-template-vars
