module org/webdsl/dsl/to-java-servlet/java-template

imports 
  libstrategolib 
  libwebdsl-front


rules

  generate-java-servlet-template-partial =
    ? cbds
    ; pkgname    := <BeanPackage>
    ; if NestedTemplate
      then x_Page    := <java-servlet-local-template-name> (<ThisPage>,<ThisTemplateName>)
      else
        if ThisPage
        then x_Page    := <java-servlet-page-template-name> <ThisTemplateName>
        else x_Page     := <java-servlet-template-name> <ThisTemplateName> end
      end
    //also allow a single class-body-declaration
    ; if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
    ; <emit-java-code>
        compilation-unit|[
          package pkgname;
          @Partial
          public class x_Page{
            ~*cbds*
          }
        ]|


rules
    
  GenerateCodeJavaServlet = generate-java-servlet-template; fail

  generate-java-servlet-template :
    def |[ define mod* x(farg*) { elem* } ]| ->
    <emit-java-code> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        
        import utils.*;
        
        import pkgname2.*;

        @Partial
        public class x_Page implements TemplateServlet
        {
          private void storeArguments(Object[] args) {
            bstm1*
          } 
    
    
          public int storeInputs(PageServlet ps,Object[] args,int templatecounter,HashMap<String, Class> templates) {
            bstm2*
            storeInputsInternal();

            return this.templatecounter;
          }         
          @Partial
          private void storeInputsInternal() {
          }
          
          @Partial
          private void initialize() {
          }
                
                
          public int handleActions(PageServlet ps,Object[] args,int templatecounter,HashMap<String, Class> templates) {          
            bstm2*

            handleActionsInternal();

            return this.templatecounter;
          }    
          @Partial
          private void handleActionsInternal() {
          }
          
          
          
          @Partial
          private void callTemplates() {
          }

          
          boolean validated=true;
      
          PageServlet ps;

          int templatecounter;
          
          String uniqueid;

          HashMap<String, Class> templates;
          HashMap<String,Object> inputs = new HashMap<String,Object>();
          
          PrintWriter out;
          private org.hibernate.Session hibSession;
          private HttpServletRequest request;
          private HttpServletResponse response;
          private boolean initialized = false;

          /*
          public int serve(PageServlet ps,Object[] args,int templatecounter,HashMap<String, Class> templates) {
            this.templates=templates;
            bstm*
            this.ps=ps;
            this.uniqueid=Encoders.encodeTemplateId(x_pnamequoted,args,templatecounter);
            this.templatecounter = templatecounter;
            this.request=ps.getRequest();
            this.response=ps.getResponse();
            
            if(!initialized)
            {
              initialized=true;
              storeArguments(args);
              
              initialize();
            } 
            //assumptions (@todo add checks):
            //- no nested forms  
              
            // for each form
            // with things like:     String action = request.getParameter("~x_action"+uniqueid);
            //  if(action != null)
            
            //these should be called from the page class
            storeInputs();
            
            handleActions();
            
            //callTemplates();
            
            return this.templatecounter;
          }
          */
          
          @Partial
          private void renderInternal()
          {
          
          }

          public int render(PageServlet ps,Object[] args,int templatecounter,HashMap<String, Class> templates) { 
            bstm2*
            try
            {            
              this.out = response.getWriter();
              renderInternal();
            }
            catch(java.io.IOException ex)
            {
              System.out.println("IOException in render: "+ex.getMessage());
            }
            return this.templatecounter;
          }
        }
          
      ]|
    //where x_page     := <ThisPage>
    with pkgname    := <BeanPackage>
       ; pkgname2   := <DomainPackage>
       ; if NestedTemplate
         then x_Page    := <java-servlet-local-template-name> (<ThisPage>,x)
         else
           if ThisPage
           then x_Page    := <java-servlet-page-template-name> x
           else x_Page     := <java-servlet-template-name> x end
         end
   /*    ; if x_page := <ThisPage> 
         then 
           if <elem> (Page(), mod*)
           then  x_Page    := <java-servlet-page-template-name> x
           else  x_Page    := <java-servlet-local-template-name> (<ThisPage>,x) end
         else x_Page     := <java-servlet-template-name> x end*/
       ; x_pnamequoted := <double-quote> x_Page
       ; if ThisPage then // for now only local def in pages supported
         bstm* := <map(\
                           x -> bstm |[ templates.put(x_key, x_value); ]| 
                           where x_key := <concat-strings> ["\"",x,"\""]
                               ; x_value := <concat-strings> [<java-servlet-local-template-name> (<ThisPage>,x),".class"]
                       \)> 
                       <!x;bagof-LocalTemplateNames;make-set>
         else bstm* := [] 
         end
       ; bstm1* := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> bstm|[ x = (x_arg) args[x_index]; ]|
                                         where x_index := <subti;int-to-string> (index,1)
                                             ; x_arg := <argument-java-servlet-type> arg
                                      \})> farg* //variables are generated in java-template-vars
       ; bstm2* := bstm* |[
            if(!initialized)
            {
            
              initialized=true;
              
              this.templates=templates;
              bstm*
              this.ps=ps;
              this.uniqueid=Encoders.encodeTemplateId(x_pnamequoted,args,templatecounter);
              this.templatecounter = templatecounter;
              this.request=ps.getRequest();
              this.response=ps.getResponse();
              this.hibSession=ps.getHibSession();
              storeArguments(args);
              
              initialize();
            } 
       ]|
                                      
   
rules // give a java type AST

  argument-java-servlet-java-type:
    arg@farg|[ x : srt ]| -> type |[ x_Class ]|
    where <defined-java-type> srt
        ; <?SimpleSort(x_Class)> srt

  argument-java-servlet-java-type:
    arg@farg|[ x : srt ]| -> x_Class
    where x_Class := <builtin-java-type> srt

rules // give just the name of the type, (eg. for use in a cast)

  argument-java-servlet-type:
    arg@farg|[ x : srt ]| -> x_Class
    where <defined-java-type> srt
        ; <?SimpleSort(x_Class)> srt

  argument-java-servlet-type:
    arg@farg|[ x : srt ]| -> x_Class
    where x_Class := <builtin-java-type;pp-java5-to-string> srt      
   
  java-servlet-type-name : 
    srt -> x_Class
    where <defined-java-type> srt
        ; <?SimpleSort(x_Class)> srt

  java-servlet-type-name :
    srt -> x_Class
    where x_Class := <builtin-java-type;pp-java5-to-string> srt     
  
rules //give a java farg list
  
  arguments-to-java-servlet :  
    arg@farg|[ x : srt ]| -> param |[ t x ]|
    with  t := <argument-java-servlet-java-type> arg