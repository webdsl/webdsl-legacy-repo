module org/webdsl/dsl/to-java-servlet/java-template

imports 
  libstrategolib 
  libwebdsl-front


rules

  generate-java-servlet-template-partial =
    ? cbds
    //; where(not(ThisEmail)) also used for common parts in email
    ; with(
        pkgname    := <BeanPackage>
      ; x_Page  := <ThisTemplateClassName>
      ; if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
      ; <emit-java-code>
          compilation-unit|[
            package pkgname;
            @Partial
            public class x_Page{
              ~*cbds*
            }
          ]|
      )


rules
    
  GenerateCodeJavaServlet = where(not(ThisEmail));generate-java-servlet-template; fail

  generate-java-servlet-template :
    def |[ define mod* x(farg*) { elem* } ]| ->
    <emit-java-code> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        
        import utils.*;
        
        import pkgname2.*;
        import pkgname3.*;

        @Partial
        public class x_Page implements TemplateServlet
        {
          private void storeArguments(Object[] args) {
            bstm1*
          } 
    
          public int storeInputs(PageServlet ps,Object[] args,int templatecounter,HashMap<String, Class> templates,HashMap<String, Object> variables,HashMap<String, Object> actionclasses) {
            bstm2*
            storeInputsInternal();

            return this.templatecounter;
          }         
          @Partial
          private void storeInputsInternal() {
          }
          
          public int validateInputs(PageServlet ps,Object[] args,int templatecounter,HashMap<String, Class> templates,HashMap<String, Object> variables,HashMap<String, Object> actionclasses) {
            bstm2*
            validateInputsInternal();

            return this.templatecounter;
          }         
          @Partial
          private void validateInputsInternal() {
          }
          
          @Partial
          protected void initialize() {}
          
          @Partial void initActions() {}

          @Partial
          private void initializePassOn() {}

          @Partial
          private void initializeLocalVars() {}
                
          public int handleActions(PageServlet ps,Object[] args,int templatecounter,HashMap<String, Class> templates,HashMap<String, Object> variables,HashMap<String, Object> actionclasses, java.io.PrintWriter out) {          
            bstm2*
          this.out = out;         
            handleActionsInternal();

            return this.templatecounter;
          }    
          @Partial
          private void handleActionsInternal() {
          }
          
          
          
          @Partial
          private void callTemplates() {
          }

          
          boolean validated=true;
      
          PageServlet ps;

          int templatecounter;
          
          String uniqueid;

          HashMap<String, Object> variables;
          HashMap<String, Object> actionclasses;
          
          HashMap<String, Class> templates;
          private java.util.Map<String, TemplateServlet> templatecalls = new java.util.HashMap<String,TemplateServlet>();
          //HashMap<String,Object> inputs = new HashMap<String,Object>();
          
          PrintWriter out;
          private org.hibernate.Session hibSession;
          private HttpServletRequest request;
          private HttpServletResponse response;
          private boolean initialized = false;
          
          HttpSession session;
         
          public void cleanup(){
            actionclasses.clear();
            actionclasses = null;
            hibSession = null;
            out = null;
            ps = null;
            request = null;
            response = null;
            session = null;
            templatecalls.clear();
            templatecalls = null;
            templates.clear();
            templates = null;
            uniqueid = null;
            variables.clear();
            variables = null;
            cleanupGlobalAndSession();
            cleanupTemplateArgAndVar();
          }

          @Partial private void cleanupGlobalAndSession(){ }
          @Partial private void cleanupTemplateArgAndVar(){ }
          
          @Partial private void renderInternal(){ }

          public int render(PageServlet ps,Object[] args,int templatecounter,HashMap<String, Class> templates,HashMap<String, Object> variables,HashMap<String, Object> actionclasses, java.io.PrintWriter out) { 
            bstm2*
         
            this.out = out;
            
            out.write("<span id=\"this\" class=\"scopediv\">");
            renderInternal();
            out.write("</span>");
            
            cleanup();
            return this.templatecounter;
          }
        }
          
      ]|
    with pkgname    := <BeanPackage>
       ; pkgname2   := <DomainPackage>
       ; pkgname3   := <ActionPackage>
       ; x_Page  := <ThisTemplateClassName>
       ; x_pnamequoted := <double-quote> x_Page
       ; bstm* := <local-defined-templates-to-hashmap> elem*
       ; bstm1* := <formal-arguments-to-store-statements> farg*
       ; bstm2* := bstm* |[
            if(!initialized || ps.hibernateCacheCleared)
            {
              //System.out.println("template init "+"~x_Page"+"init: "+initialized+ " hibcache: "+ps.hibernateCacheCleared);
              initialized=true;
              
              this.templates=templates;
              this.actionclasses=actionclasses;
              bstm*
              this.ps=ps;
              this.uniqueid=Encoders.encodeTemplateId(x_pnamequoted,args,templatecounter);
              this.templatecounter = templatecounter;
              this.request=ps.getRequest();
              this.response=ps.getResponse();
              this.session = request.getSession(true);
              this.hibSession=ps.getHibSession();
              this.variables=variables;
              storeArguments(args);
              
              initialize();
              initializeLocalVars();
              initializePassOn();
              initActions();
            } 
       ]|
       
rules
  local-defined-templates-to-hashmap :
    elem* -> result
    with  localtemplates := <collect({\def@webdsl|[ define mod* x(farg*) { elem* } ]| -> (x,<get-template-class-name> def)\})> elem*
        ; result := <map({\ (x,xclass) -> bstm |[ templates.put(x_key, x_value); ]| 
                             where x_key := <concat-strings> ["\"",x,"\""]
                                 ; x_value := <concat-strings> [xclass,".class"]
                          \})> localtemplates 
 
  formal-arguments-to-store-statements :
    farg* -> result
    where  result := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> bstm|[ x = (x_arg) args[x_index]; ]|
                                            where x_index := <subti;int-to-string> (index,1)
                                                ; x_arg := <argument-java-servlet-type> arg
                                          \})> farg* //variables are generated in java-template-vars
