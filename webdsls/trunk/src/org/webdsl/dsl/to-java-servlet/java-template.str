module org/webdsl/dsl/to-java-servlet/java-template

imports 
  libstrategolib 
  libwebdsl-front

imports
  org/webdsl/dsl/to-java-servlet/to-java-servlet

rules

  generate-java-servlet-template-partial =
    ? cbds
    //; where(not(ThisEmail)) also used for common parts in email
    ; with(
        pkgname    := <BeanPackage>
      ; x_Page  := <ThisTemplateClassName>
      ; if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
      ; <emit-java-code-local>
          compilation-unit|[
            package pkgname;
            @Partial
            public class x_Page{
              ~*cbds*
            }
          ]|
      )


rules
    
  GenerateCodeJavaServlet =  
    where(not(ThisEmail)); generate-java-servlet-template; fail

  generate-java-servlet-template :
    def@def |[ define mod* x(farg*) req* { elem* } ]| ->
    <emit-java-code-local> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.Map;
        
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        import org.apache.commons.lang.ArrayUtils;
        
        import utils.*;
        import org.webdsl.tools.Utils;
        import org.webdsl.lang.Environment;
        import org.webdsl.WebDSLEntity;
        
        import pkgname2.*;
        import pkgname3.*;

        @Partial
        public class x_Page extends TemplateServlet
        {
          protected void storeArguments(Object[] args) {
            bstm1*
          } 
        
          @Partial
          protected void storeInputsInternal() {
          }
                 
          @Partial
          protected void validateInputsInternal() {
          }
          
          @Partial
          protected void initialize() {}
          
          @Partial 
          protected void initActions() {}

          @Partial
          protected void initializePassOn() {}

          @Partial
          protected void initializeLocalVars() {}
          
          @Partial
          protected void handleActionsInternal() { }
          
          @Partial
          private void callTemplates() { }

          public void setPageArguments(String[] pa) {
            pageArguments = pa;
          }
          public String[] getPageArguments() {
            return pageArguments;
          }
         
          @Partial 
          protected void renderInternal(){ }
          
          public String getUniqueName() {
            return "~x";
          }
          
          public String getTemplateClassName(){
            return "~x_Page";
          }
          
          public String getStateEncodingOfArgument(){
            return e_argrepr;
          }
          
          public String getTemplateContext(){
            return ThreadLocalPage.get().getTemplateContextString();
          } 
                
          public String getUniqueId(){
            return this.uniqueid;
          }
          
          public String debugStateEncodingAll(){
            return "TemplateClass: "+getTemplateClassName()+"\n"+
              "TemplateArgument: "+getStateEncodingOfArgument()+"\n"+
              "ContextString: "+getTemplateContext()+"\n"+
              "UniqueId: "+getUniqueId()+"\n";
          }
          
          public String getTemplateSignature(){
            return "~x_TemplateSig";
          }
          
          protected void tryWriteSpanOpen(PrintWriter outtemp){
            bstm_so*
          }
          protected void tryWriteSpanClose(PrintWriter outtemp){
            bstm_sc*
          }

          protected void putLocalDefinesInEnv(){
            ~*<![]> // added to prevent segmentation fault during compilation
            bstm*
          }
          
          protected boolean isAjaxTemplate(){
            return e_isajaxtemplate;
          }
        }
      ]|
    with pkgname    := <BeanPackage>
       ; pkgname2   := <DomainPackage>
       ; pkgname3   := <ActionPackage>
       ; x_Page  := <ThisTemplateClassName>
       ; x_TemplateName := <get-original-name> x
       ; x_TemplateSig := <concat-strings> [x_TemplateName,"(",<map(\Arg(nm,srt)->Arg(<get-original-name> nm,srt)\;pp-webdsl-to-string);separate-by(|", ");concat-strings> farg*,")"]
       ; if <fetch(?NoSpan())> mod* <+ JavaThisPage; not(NestedTemplate) then //no span for templates with no-span modifier, or pages
            bstm_so* := []
          ; bstm_sc* := []
          else
            bstm_so* := bstm* |[ 
              if(ThreadLocalPage.get().templateSpans()){
                outtemp.write("<span id=\""+"~x" + "\" class=\"scopediv "); //@TODO this could generate duplicate ids in resulting html
                if("~x".equals("~x_TemplateName")){
                   outtemp.write("~x");
                }
                else{
                   outtemp.write("~x"+" "+"~x_TemplateName");
                }
                outtemp.write("\">"); 
              }
            ]| 
          ; bstm_sc* := bstm* |[ 
              if(ThreadLocalPage.get().templateSpans()){
                outtemp.write("</span>"); 
              }
            ]|
          end
       ; bstm* := <local-defined-templates-to-hashmap> elem*
       ; bstm1* := <formal-arguments-to-store-statements> farg*
       ; e_argrepr := <formal-action-args-to-state-enc> farg*
       ; if <fetch(AjaxTemplate)> mod* 
         then e_isajaxtemplate := java:expr |[ true ]|
         else e_isajaxtemplate := java:expr |[ false ]|
         end
       
rules
  
  local-defined-templates-to-hashmap :
    elem* -> result
    with  localtemplates := <collect(local-defined-templates-to-hashmap-helper)> elem*
        ; result := <map({\ (x,xclass) -> bstm |[ env.putTemplate(x_key, x_value); ]| 
                             where x_key := <concat-strings> ["\"",x,"\""]
                                 ; x_value := <concat-strings> [xclass,".class"]
                          \})> localtemplates
                          
  local-defined-templates-to-hashmap-helper :
    def@webdsl|[ define mod* x(farg*)  req* { elem* } ]| -> (x,clsname)
    with  clsname := <get-template-class-name> def
    
  //local template redef
  local-defined-templates-to-hashmap-helper :
    def@webdsl|[ define mod* x(farg*) = y ]| -> (xWithOverloadRenaming,clsname)
    with  clsname := <template-class-name-parents(|[],<generate-template-name-fargs> (y,farg*))>
        ; xWithOverloadRenaming := <generate-template-name-fargs> (x,farg*)
 
rules 
 
  formal-arguments-to-store-statements :
    farg* -> result
    where  result := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> bstm|[ x = (x_arg) args[x_index]; ]|
                                            where x_index := <subti;int-to-string> (index,1)
                                                ; if <?Arg(_,RefSort(_))> arg 
                                                  then x_arg := "utils.RefArg"
                                                  else x_arg := <argument-java-servlet-type> arg end
                                          \})> farg* //variables are generated in java-template-vars
