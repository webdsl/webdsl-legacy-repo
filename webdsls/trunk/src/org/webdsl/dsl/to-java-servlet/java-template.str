module org/webdsl/dsl/to-java-servlet/java-template

imports 
  libstrategolib 
  libwebdsl-front

rules
    
  GenerateCodeJavaServlet = generate-java-servlet-template; fail

  generate-java-servlet-template :
    def |[ define mod* x(farg*) { elem* } ]| ->
    <emit-java-code> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        
        import utils.*;
        
        import pkgname2.*;

        @Partial
        public class x_Page implements TemplateServlet
        {
          
          @Partial
          private void storeArguments(Object[] args) {
          } 
    
          @Partial
          private void storeInputs() {
          }
          
          @Partial
          private void handleActions() {
          }
          
          @Partial
          private void callTemplates() {
          }

          
          boolean validated=true;
      
          PageServlet ps;

          int templatecounter;
          
          String uniqueid;

          HashMap<String, Class> templates;

          
          public int serve(PageServlet ps,Object[] args,int templatecounter,HashMap<String, Class> templates) {
            this.templates=templates;
            bstm*
            this.ps=ps;
            this.uniqueid=Encoders.encodeTemplateId(x_pnamequoted,args,templatecounter);
            this.templatecounter = templatecounter;
            
            
            storeArguments(args);
            
            storeInputs();
            
            handleActions();
            
            callTemplates();
            
            return this.templatecounter;
          }
          
          @Partial
          private void render()
          {
          
          }

          public int render(PageServlet ps,Object[] args,int templatecounter,HashMap<String, Class> templates) throws ServletException, IOException { 
            this.templates=templates;
            bstm*
            this.ps=ps;
            this.uniqueid=Encoders.encodeTemplateId(x_pnamequoted,args,templatecounter);
            this.templatecounter = templatecounter;
            
            storeArguments(args);
            
            storeInputs();
            
            render();
            
            return this.templatecounter;
          }
        }
          
      ]|
    //where x_page     := <ThisPage>
    with pkgname    := <BeanPackage>
       ; pkgname2   := <DomainPackage>
       ; if x_page := <ThisPage> 
         then 
           if <elem> (Page(), mod*)
           then  x_Page    := <java-servlet-page-template-name> x
           else  x_Page    := <java-servlet-local-template-name> (<ThisPage>,x) end
         else x_Page     := <java-servlet-template-name> x end
       ; x_pnamequoted := <double-quote> x_Page
       ; if ThisPage then // for now only local def in pages supported
         bstm* := <map(\
                           x -> bstm |[ templates.put(x_key, x_value); ]| 
                           where x_key := <concat-strings> ["\"",x,"\""]
                               ; x_value := <concat-strings> [<java-servlet-local-template-name> (x_page,x),".class"]
                       \)> 
                       <!x;bagof-LocalTemplateNames;make-set>
         else bstm* := [] 
         end
                      