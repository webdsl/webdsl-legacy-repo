module org/webdsl/dsl/to-java-servlet/java-template

imports 
  libstrategolib 
  libwebdsl-front

imports
  org/webdsl/dsl/to-java-servlet/to-java-servlet

rules

  generate-java-servlet-template-partial =
    ? cbds
    //; where(not(ThisEmail)) also used for common parts in email
    ; with(
        pkgname    := <TemplatePackage>
      ; x_Page  := <ThisTemplateClassName>
      ; if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
      ; <emit-java-code-local>
          compilation-unit|[
            package pkgname;
            @Partial
            public class x_Page{
              ~*cbds*
            }
          ]|
      )


rules
    
  GenerateCodeJavaServlet =  
    where(not(ThisEmail)); generate-java-servlet-template; fail

  generate-java-servlet-template :
    def@def |[ define mod* x(farg*) req* { elem* } ]| ->
    <emit-java-code-local> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.Map;
        
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        import org.apache.commons.lang.ArrayUtils;
        
        import utils.*;
        import org.webdsl.tools.Utils;
        import org.webdsl.lang.Environment;
        import org.webdsl.WebDSLEntity;
        
        import pkgname2.*;
        import pkgname3.*;

        @Partial
        @SuppressWarnings("all")
        public class x_Page extends TemplateServlet
        {
          public static void loadTemplateMap(org.webdsl.lang.Environment staticEnv){
            loadTemplateMap(null,staticEnv);
          }
          public static void loadTemplateMap(String keyOverwrite, org.webdsl.lang.Environment staticEnv){
            staticEnv.putTemplate(keyOverwrite==null?"~x":keyOverwrite, x_Page.class);
            bstm_lifted*
          }
          public static void loadRefArgClasses(Map<String, Class<?>> refargclasses){
            bstm_refargclasses*
            bstm_liftedrefarg*
            // in the ref arg class lookup map, a unique name is always used as key, 
            // hence it does not need to go in the Environment class (that keeps a stack of local template overrides)
            // they are already loaded with the initial template load in java-base-page.str/PageServlet.java
            bstm_refarginlocaldef*
          }
          
          protected void storeArguments(Object[] args) {
            bstm_arguments*
          } 
        
          @Partial
          protected void storeInputsInternal() {
          }
                 
          @Partial
          protected void validateInputsInternal() {
          }
          
          @Partial
          protected void initialize() {}
          
          @Partial
          protected void initSubmitActions(){}
          
          @Partial 
          protected void initActions() {}

          @Partial
          protected void initializeLocalVars() {}
          
          @Partial
          protected void initializeLocalVarsOnce() {}
          
          @Partial
          protected void handleActionsInternal() { }
          
          @Partial
          private void callTemplates() { }

          public void setPageArguments(String[] pa) {
            pageArguments = pa;
          }
          public String[] getPageArguments() {
            return pageArguments;
          }
         
          @Partial 
          protected void renderInternal(){ }
          
          public String getUniqueName() {
            return "~x";
          }
          
          public String getTemplateClassName(){
            return "~x_Page";
          }
          
          public String getStateEncodingOfArgument(){
            return e_argrepr;
          }
          
          public String debugStateEncodingAll(){
            return "TemplateClass: "+getTemplateClassName()+"\n"+
              "TemplateArgument: "+getStateEncodingOfArgument()+"\n"+
              "ContextString: "+getTemplateContext()+"\n"+
              "UniqueId: "+getUniqueId()+"\n";
          }
          
          public String getTemplateSignature(){
            return "~x_TemplateSig";
          }
          
          protected void tryWriteSpanOpen(PrintWriter outtemp){
            bstm_so*
          }
          protected void tryWriteSpanClose(PrintWriter outtemp){
            bstm_sc*
          }

          protected void putLocalDefinesInEnv(){
            bstm_localtplredefs*
          }
          
          protected boolean isAjaxTemplate(){
            return e_isajaxtemplate;
          }
          
          protected String getElementsContext(){
            if(calledName==null){
            ~*<if <fetch(?TemplateDefineNameBeforeLifting(namebeforelift))> mod* 
               then !bstm* |[ return "~namebeforelift"; ]|
               else !bstm* |[ return "~x"; ]|
               end>
             }
             else{
               return calledName;
             }
          }
        }
      ]|
    with pkgname    := <TemplatePackage>
       ; pkgname2   := <DomainPackage>
       ; pkgname3   := <ActionPackage>
       ; x_Page  := <ThisTemplateClassName>
       ; x_TemplateName := <get-original-name> x
       ; x_TemplateSig := <concat-strings> [x_TemplateName,"(",<map(\Arg(nm,srt)->Arg(<get-original-name> nm,srt)\);pp-args> farg*,")"]
       ; if <fetch(?TemplateModSpan())> mod*; not(JavaThisPage) then //only add span to templates with 'span' modifier
            x_actualname := <newname> "name"
          ; x_uniquename := <newname> "uniqname"
          ; bstm_so* := bstm* |[ 
              if(ThreadLocalPage.get().templateSpans()){
                String x_actualname = "~x_TemplateName";
                String x_uniquename = "~x";
                if(ltas != null){
                  x_actualname = ltas.spanName;
                  x_uniquename = ltas.spanNameUnique;
                }
                outtemp.write("<span id=\""+ x_uniquename + "\" class=\"scopediv "); //@TODO this could generate duplicate ids in resulting html
                if(x_uniquename.equals(x_actualname)){
                   outtemp.write(x_uniquename);
                }
                else{
                   outtemp.write(x_uniquename +" "+ x_actualname);
                }
                outtemp.write("\">"); 
              }
            ]| 
          ; bstm_sc* := bstm* |[ 
              if(ThreadLocalPage.get().templateSpans()){
                outtemp.write("</span>"); 
              }
            ]|
          else
            bstm_so* := []
          ; bstm_sc* := []
          end
       ; (bstm_localtplredefs*,bstm_refarginlocaldef*) := <local-defined-templates-to-hashmap> elem*
       ; bstm_arguments* := <formal-arguments-to-store-statements> farg*
       ; e_argrepr := <formal-action-args-to-state-enc> farg*
       ; if <fetch(AjaxTemplate)> mod* 
         then e_isajaxtemplate := java:expr |[ true ]|
         else e_isajaxtemplate := java:expr |[ false ]|
         end
       ; liftedtemplates := <collect(?TemplateCall(_,_,<filter(?TemplateCall(_,_,_,_))>,_);not([]));concat> def // with arguments
       ; bstm_lifted* := <map({\ 
                           TemplateCall(z,_,_,_) -> bstm |[ z_value.loadTemplateMap(staticEnv); ]| // the lifted template might have lifted elements itself, recursively call loadTemplateMap 
                           with  z_value := <TopLevelTemplateClassName> z
                       \})> 
                       liftedtemplates
       ; bstm_liftedrefarg* := <map({\ 
                           TemplateCall(z,_,_,_) -> bstm |[ z_value.loadRefArgClasses(refargclasses); ]| // the lifted template might have lifted elements itself, recursively call loadRefArgClasses 
                           with  z_value := <TopLevelTemplateClassName> z
                       \})> 
                       liftedtemplates
       ; pagecallrefargclass* := <collect(?PageCall(_,<filter({?arg{anno*};<filter(?RefArgClassName(<id>));not([])> anno*})>);not([]));concat;concat> def // with arguments  
       ; ajaxcallrefargclass* := <collect(?TemplateCall(_,<filter({?arg{anno*};<filter(?RefArgClassName(<id>));not([])> anno*})>,_,_);not([]));concat;concat> def // with arguments  
       ; bstm_refargclasses* := <map({\ 
                           z -> bstm |[ refargclasses.put("~z", z_value); ]| 
                           with  z_value := <concat-strings> [z,".class"]
                         \})> 
                         [pagecallrefargclass*,ajaxcallrefargclass*]
       
rules
  
  local-defined-templates-to-hashmap :
    elem* -> (tplmap,refargmap)
    with  localtemplates := <collect(local-defined-templates-to-hashmap-helper)> elem*
        ; tplmap := <mapconcat(add-template-binding)> localtemplates
        ; refargmap := <map(add-template-ref-arg-binding)> localtemplates
    
  //local template redef
  local-defined-templates-to-hashmap-helper :
    def@LocalRedefine(mod*,x,farg*,y,extraArg*) -> (xWithOverloadRenaming,clsname, argwithref*, spanname1, spanname2)
    with  xWithOverloadRenaming := <generate-template-name-fargs> (x,farg*)
        ; ( <get-anno(?ExtraLocalDefineArgs(extraFormalArg*))> def <+ extraFormalArg* := [] )
        ; ( <?LocalRedefineArgs(eArg*)> extraArg* <+ eArg* := [] )
        ; ( <get-anno(?SpanNames(spanname1,spanname2))> def <+ spanname1 := ""; spanname2 := "")
        ; clsname := <generate-template-name-fargs; template-name-to-classname> (y,[farg*,extraFormalArg*])
        ; argwithref* := <handle-ref-arg> (extraFormalArg*,eArg*)

  add-template-binding:        
    (x,xclass,e_argswithref*, spanname1, spanname2) -> 
      bstm* |[ 
        x_value.loadTemplateMap(x_key, env); 
        Object[] x_array = { e_argswithref* };
        env.putExtraLocalTemplateArguments(x_key, new utils.LocalTemplateArguments(x_array,"~spanname1","~spanname2")); 
      ]| 
    with  x_key := <concat-strings> ["\"",x,"\""]
        ; x_value := xclass
        ; x_array := <newname> "arg" //doesn't need to be globally unique, no issue for caching when using newname here
          
  add-template-ref-arg-binding:        
    (x,xclass,e_argswithref*, spanname1, spanname2) -> 
      bstm |[ 
        x_value.loadRefArgClasses(refargclasses); 
      ]| 
    with  x_value := xclass

rules 
 
  formal-arguments-to-store-statements :
    farg* -> result
    where  result := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> bstm|[ x = (x_arg) args[x_index]; ]|
                                            where x_index := <subti;int-to-string> (index,1)
                                                ; if <?Arg(_,RefSort(_))> arg 
                                                  then x_arg := "utils.RefArg"
                                                  else x_arg := <argument-java-servlet-type> arg end
                                          \})> farg* //variables are generated in java-template-vars
