module org/webdsl/dsl/languages/ui/submit

rules

  rename-ui :
    t@ActionCall(origname, e1*){annoorig*} -> result
    with if t2@ActionCall(renamedname, e2*){anno*} := <RenameActionCall> t
         then
           //add a unique id to each call, which will be used as name attribute, see wrap desugaring below
           nameattr := <toplevel-rename> renamedname
         ; parent := <fetch-elem(?DirectEnclosingDefine(<id>))> anno*
         ; result := ActionCall(renamedname, e2*){ThisCallParent(parent),ActionCallNameAttribute(nameattr),anno*}
         else //the action call is being renamed, but the outer definition is not.
              // in this case RenameActionCall fails, the action is not visible, and only the expression
              // arguments are renamed
           e3* := <rename-all> e1* 
         ; result := ActionCall(origname, e3*){annoorig*}
         end

rules

  constraint-error-ui :
    tc@ActionCall(f, e2*) -> <add-error(|["Cannot find action with signature ", sig, "."])>
    where not(type-of)
        ; argtypes := <map(type-of)> e2* // don't report when sub-expression was already wrong
    with  sig := <pretty-print-call(|f,argtypes)>

  eq-type-of-ui :
    ActionCall(f,e*){anno*} -> <eq-type-of-this-call-local> ThisCall(f,e*){anno*}

rules //convert deprecated submit constructors to new style

  desugar-in-define-context :     
    Submit(e,call,passign*) -> SubmitElem(call, passign*, elem*)
    with elem* := [TemplateCall("output", [e], [], TemplateBody([]))]
       
  desugar-in-define-context :     
    SubmitLink(e,call,passign*) -> SubmitLinkElem(call, passign*, elem*)
    with elem* := [TemplateCall("output", [e], [], TemplateBody([]))]
    
rules //wrap submit/submitlink in template that handles validation output

  signature constructors SubmitElementWrapped : Term 
                         ActionCallNameAttribute : Term -> Term 
  rules

  desugar-in-define-context :     
    SubmitElem(call, passign*, elem*){anno*} ->
    TemplateCall("wrapsubmit",[e_nameprop],[],TemplateWith([ArgDefine("s",[Arg("x",SimpleSort("String"))],[SubmitElem(call, passign2*, elem*){anno2*}])]))
    where (e_nameprop,passign2*,anno2*) := <submit-elem-wrap-aux> (call,passign*,anno*) 
    
  desugar-in-define-context :     
    SubmitLinkElem(call, passign*, elem*){anno*} -> 
    TemplateCall("wrapsubmit",[e_nameprop],[],TemplateWith([ArgDefine("s",[Arg("x",SimpleSort("String"))],[SubmitLinkElem(call, passign2*, elem*){anno2*}])]))
    where (e_nameprop,passign2*,anno2*) := <submit-elem-wrap-aux> (call,passign*,anno*) 
    
  submit-elem-wrap-aux :
    (call{anno_call*},passign*,anno*) -> (e_nameprop,passign2*,anno2*)
    where not(<fetch(SubmitElementWrapped)> anno*)
    with  <fetch(?ActionCallNameAttribute(uniqname))> anno_call*
        ; e_nameprop := Add(String(uniqname),ThisCall("getUniqueTemplateId",[])) 
        ; passign2* := [PropertyAssignment("name", Var("x"))|passign*]
        ; anno2* := [SubmitElementWrapped()|anno*] 
    
rules
      
  add-backend-annotation :
    a@ActionCall(f, e2*){anno*} -> a{ActionFargAnno(called-action-fargs),anno*}
    where has-no-anno(?ActionFargAnno(_))
    with  parent := <fetch-elem(?DirectEnclosingDefine(<id>))> anno*
        ; t* := <map(type-of; strip-ref-sort)> e2*
        ; called-action-fargs := <CheckActionSignature> (parent, f, t*)
