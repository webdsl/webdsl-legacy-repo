/**

  Type rules for WebDSL

*/

module org/webdsl/dsl/typechecker/typechecker

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  libsepcomp
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/transformation/-

strategies

  typecheck =
    // Typecheck modified data (updates dependency data)
    in-typechecking-phase(
        typecheck-init
      ; log-time(typecheck-declare | "declare")
      ; typechecker-after-declare
      ; log-time(load-dependent-typecheck-modules | "find and load dependent modules")
      ; log-time(typecheck-rename | "rename")
		  ; if-typechecking(
		      where(
		          log-time(typecheck-constraints | "constraint-error" )
		        // do not apply on Application, it would show the entire AST with the error at command line
		        ; log-time(not(<constraint-error-global> "") | "constraint-error-global")
		        ; update-typecheck-dependencies
		      )
		     , 
		      id)
    )
    ; cleanup-dependency-rules
    ; clear-used-rules
    ; clear-rule-tracking-array
    
	// TODO: move to rename.str
	typecheck-rename =
	 transform-defs-tracked(rename-top)
		  
  typecheck-constraints =
      map-defs(
      	track-rules(constraint-error-def | <CurrentDefinitionKey>)
      )
  
  //call resolving/overloading is done during rename, typechecking errors are produced by constraint-error strategy
  //when no longer in typechecking, but e.g. during desugaring a failed resolve should give an error
  in-typechecking-phase(s) =
    {| InTypeCheckingPhase:
        rules(InTypeCheckingPhase := True())
      ; s
    |}
    
  // This must be called *before* any declares as it sets up the built-in types
  typecheck-init = 
    {| CurrentModule:
        rules(CurrentModule := "___BUILTIN___")
      ; not(built-in-template-rule-setup
         ; fatal-err-msg(|"error in typechecker.str, failure should not occur here, make sure built-in-template-setup rules end with ';fail'")
       ) // setup dyn rules for checks
    |}
  
  // Declare globally visible webdsl elements
  typecheck-declare =
  	  // Declare modified files
      map-defs(
        with(
          track-rules-with-creates(declare-all | <CurrentDefinitionKey>)
        )
     )
     // Store new signatures
    ; store-signatures
    
  typechecker-after-declare =
      log-time(declare-all-override | "declare-all-override")
    ; log-time(
        not(
            track-rules-with-creates(
              after-tc-declare-hook
              | <global-definition>)
          ; fatal-err-msg(|"error in typechecker.str, failure should not occur here, make sure after-tc-declare-hook rules end with ';fail'")
        ) // setup dyn rules for checks
        | "after-tc-declare-hook")
    ; store-global-signature

  constraint-error-def =
    bottomup(try(constraint-error; where(stage-newline-once); debug(!"INTERNAL ERROR: constraint-error succeeded for: ")))
  
  catch-errors-editor(s) = 
    {| AllErrors, AllWarnings:
      rules(
        // Override the error reporting behavior to collect errors
        AddError(|msgs):   node -> node where rules(AllErrors   :+= (node, <error-to-string> msgs))
        AddWarning(|msgs): node -> node where rules(AllWarnings :+= (node, <error-to-string> msgs))
      )
      ; s
      ; !(<bagof-AllErrors <+ ![]>, <bagof-AllWarnings <+ ![]>)
    |}
  
rules

  //fallback implementation, get-toplevel-name is defined for important toplevel constructs such as Define(_,_,_,_)
  get-toplevel-name = get-anno(?TopLevelName(<id>))

rules // with-toplevel-name
  
  //prefer toplevel name based on file name
  create-toplevel-name = 
     create-toplevel-name-loc 
  <+ create-toplevel-name-no-loc 
  
  create-toplevel-name-loc = 
      modname := <get-anno(?At(<id>, _, _); clean-module-name)>
    ; <concat-strings; newname-webdsl> [modname, "_topdef"]
  
  // in desugaring, new elements do not have position information
  create-toplevel-name-no-loc = <concat-strings; newname> ["topdef"]
    
  clean-module-name = string-as-chars(filter(is-alpha))
    
  // Find toplevel name for element and do s
  with-toplevel-name(s) =
    (		where(name := <get-toplevel-name>)
    <+	where(name := <create-toplevel-name>)
      ; add-anno(|TopLevelName(name))
    )
    ; with-toplevel-name(s|name)
    
  with-toplevel-name(s|name) = {| TopLevelDefineName:
      rules(TopLevelDefineName := name)
    ; s
  |}
