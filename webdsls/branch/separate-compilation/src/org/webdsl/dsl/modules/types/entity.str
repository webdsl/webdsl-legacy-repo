module org/webdsl/dsl/modules/types/entity

imports
  libstrategolib
  libwebdsl-front

rules //built-in Entity type

  is-entity-type = ?SimpleSort("Entity") 
  reserved-entity-name = ?"Entity"
  extends-builtin : "Entity" -> "Object"  
  
rules
  
  built-in-template-rule-setup =
    <declare-function(|"Entity");fail> def|[ function getTypeString():String {return "";} ]|
  
  built-in-template-rule-setup =
    <map(declare-property(|"Entity"));fail> [VersionProperty(), IdProperty(), NameProperty()]
  
rules //defined entities and built-in Entity type

  type-default-value :
    s@SimpleSort(y) -> exp |[ null ]|
    where <is-entity-type> s

rules

  check-builtin-signature :
    (s@SimpleSort(_), "delete", []) -> SimpleSort("Void")
    where <is-entity-type> s
        ; <not(IsSessionEntityType)> s

  check-builtin-signature :
    (s@SimpleSort(_), "save", []) -> SimpleSort("Void")
    where <is-entity-type> s
        ; <not(IsSessionEntityType)> s
  
  desugar-data :
    Entity(x_class, sup, entbodydecs1){anno*} -> <rename> Entity(x_class, sup, entbodydecs2){anno*}
    where entbodydecs2 := <oncetd(desugar-save-delete-call);alltd(desugar-save-delete-call)> entbodydecs1
  desugar-data :
    EntityNoSuper(x_class, entbodydecs1){anno*} -> <rename> EntityNoSuper(x_class, entbodydecs2){anno*}
    where entbodydecs2 := <oncetd(desugar-save-delete-call);alltd(desugar-save-delete-call)> entbodydecs1
    
  desugar-save-delete-call : ThisCall("save",[])   -> Call(Var("this"),"save",[])  
  desugar-save-delete-call : ThisCall("delete",[]) -> Call(Var("this"),"delete",[]) 
    
  constraint-error : e@Entity(x, _, entbodydecs)    -> <filter(constraint-error-ent-fun-name);fail> entbodydecs
  constraint-error : e@EntityNoSuper(x,entbodydecs) -> <filter(constraint-error-ent-fun-name);fail> entbodydecs

  constraint-error-ent-fun-name :
    FunctionNoReturn(name,_,_) -> <constraint-error-ent-fun-name-error(|name)>
    where <not-allowed-ent-fun-name> name

  constraint-error-ent-fun-name :  
    Function(name,_,_,_) -> <constraint-error-ent-fun-name-error(|name)>
    where <not-allowed-ent-fun-name> name
    
  constraint-error-ent-fun-name-error(|name) = 
    add-error(|["Entity function with name '", name, "' collides with a built-in function that you are not allowed to overwrite."])

  not-allowed-ent-fun-name = ?"save"
  not-allowed-ent-fun-name = ?"delete"

rules

  desugar-types :
    TemplateCall(x,arg*,passign*,elem*) -> result
    where <?"output"> x //"output" string not in lhs because the x with annotations is needed to check whether it is a call to built-in output
        ; <CallToBuiltInTemplate> x
        ; [e] := arg*
        ; SimpleSort(x_ent) := <type-of> e
        ; <IsEntity> x_ent
    with  x_view := <decapitalize-string> x_ent
        // if there is a view page with lowercase entityname and 1 argument of that entitytype, 
        // then show navigate, otherwise just show name
        ; if <CheckPageSignature> (Page(), <decapitalize-string; strip-annos> x_ent, [<strip-annos>SimpleSort(<strip-annos>x_ent)])
          then result := <rename-all> elem|[ navigate(x_view(e))[passign*]{output(e.name)} ]|
          else result := <rename-all> elem|[ output(e.name) ]|
          end

  desugar-types :
    TemplateCall(x,arg*,passign*,elem*) -> result
    where <?"output"> x
        ; <CallToBuiltInTemplate> x
        ; [e] := arg*
        ; GenericSort(<?"List" <+ ?"Set">,[SimpleSort(x_ent)]) := <type-of> e
    with  x1 := <toplevel-rename> "outputlist"
        ; e2 := Var(x1)
        ; result := <rename-all> elem|[ list { for(x1 : x_ent in e){ listitem{ output(e2)[passign*] } } } ]|
  
  desugar-types :
    TemplateCall("input"{ianno*},[e],passign*,TemplateBody(elem*)){anno*} -> result
    where srt@SimpleSort(x_ent) := <type-of> e
        ; <IsEntity> x_ent
    with  ent_var_name := <decapitalize-string> x_ent
        ; ent_var_name2 := <toplevel-rename> ent_var_name
        ; result := <rename-all> Select(ent_var_name2, srt, "Select", e, passign*, elem*){anno*}

  desugar-types :
    TemplateCall("input"{ianno*},[e],passign*,TemplateBody(elem*)){anno*} -> result
    where GenericSort(coll, [srt@SimpleSort(x_ent)]) := <type-of> e
    with  ent_var_name  := <decapitalize-string; toplevel-rename> x_ent
        ; str := <concat-strings>["Add ", x_ent]
        ; result := <rename-all> Select(ent_var_name, srt, str, e, passign*, elem*){anno*}
