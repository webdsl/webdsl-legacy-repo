module org/webdsl/dsl/modules/derive-crud

imports
  libstrategolib
  libwebdsl-front

strategies

rules

  constraint-error = constraint-error-crud

  constraint-error-crud :
    DeriveCrud(ent) -> <add-error(|["The entity ", ent, " does not exist"])>
    where not(<IsEntity> ent)
  
rules

  desugar = desugar-crud 
 
  desugar-crud :
    DeriveCrud(ent) -> RemoveMe()
    with  (x_create, x_view, x_edit, x_manage) := <crud-page-names> ent
        ; srt := SimpleSort(ent)
        ; x_ent := ent
        ; <emit-webdsl-code> def|[ 
            define page x_create(){
              //derive createPage from temp
              main()
              define body() {
                var temp := x_ent{}
                header{"Create " output(temp.name) } 
                form { 
                  group("Details") { 
                    derive editRows from temp
                  } 
                  action("Save", save())
                }
                action save() { 
                  temp.save(); 
                  return x_manage();
                }
              }
            } 
          ]|
        ; <emit-webdsl-code> def|[ 
            define page x_view(arg : srt){
              derive viewPage from arg
            } 
          ]|
        ; <emit-webdsl-code> def|[ 
            define page x_edit(arg : srt){
              //derive editPage from arg
              main()
              define body() {
                header{"Edit " output(arg.name) } 
                form { 
                  group("Details") { 
                    derive editRows from arg
                  } 
                  action("Save", save())
                }
                action save() { 
                  arg.save(); 
                  return x_manage();
                }
              }
            }
          ]|
        ; <emit-webdsl-code> def|[ 
            define page x_manage(){
              main()
              define body(){
                navigate(x_create()){ "create" }
                list{
                  for(elem : srt){
                    listitem{ 
                      output(elem)
                      " "
                      navigate(x_edit(elem)){ "edit" }
                      " "
                      form{action("remove",remove(elem))}
                    }
                  }
                }
                action remove(arg :srt){
                  arg.delete();
                }
              }
            } 
          ]|
rules

  declare = declare-crud
  
  declare-crud :
    DeriveCrud(ent) -> DeriveCrud(ent)
    with  (x_create, x_view, x_edit, x_manage) := <crud-page-names> ent
        ; srt := SimpleSort(ent)
        ; <declare> def|[ define page x_create(){} ]|
        ; <declare> def|[ define page x_view(arg : srt){} ]|
        ; <declare> def|[ define page x_edit(arg : srt){} ]|
        ; <declare> def|[ define page x_manage(){} ]|
        ; rules(DeriveUsed := True())
          
  declare-in-template =
    (
      ?Derive("viewPage",_)
    <+?Derive("viewPage",_,_)
    <+?Derive("createPage",_)
    <+?Derive("createPage",_,_)
    <+?Derive("editPage",_)  
    <+?Derive("editPage",_,_)
     )
    ; rules(DeriveUsed := True())
    ; fail
          
  declare-override =
    DeriveUsed 
  ; emit-and-declare-body-template
  ; emit-and-declare-main-template
  ; fail
    
  emit-and-declare-body-template =
    with(<emit-webdsl-code> def|[
      define body(){
        "default body"
      } 
    ]|)

  emit-and-declare-main-template =
    with(<emit-webdsl-code> def|[
      define main(){
        body()
      } 
    ]|)
  
rules //util
 
  crud-page-names :
    ent -> (create, view, edit, manage)
    with  create := <concat-strings> ["create",ent]
        ; view := <decapitalize-string> ent
        ; edit := <concat-strings> ["edit",ent]
        ; manage := <concat-strings> ["manage",ent]
