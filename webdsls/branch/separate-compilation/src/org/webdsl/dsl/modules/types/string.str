module org/webdsl/dsl/modules/types/string

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  libwebdsl-front

rules
  is-simple-sort = ?SimpleSort("String")  
  extends-builtin : "String" -> "Object"
  built-in-template-rule-setup = <declare-built-in-template-rules> ("inputString",[SimpleSort("String")]);fail
  built-in-template-rule-setup = <declare-built-in-template-rules> ("outputString",[SimpleSort("String")]);fail
  
  //to allow static functions
  built-in-template-rule-setup = declare-native-class-static-functions(|"String","java.lang.String");fail
  
rules

  type-default-value :
    SimpleSort("String") -> exp|[ "" ]|
  
  eq-type-of :
    String(x) -> SimpleSort("String")

  check-builtin-signature :
    (_, "toString", []) -> SimpleSort("String")

rules // Desugar

  DeriveInput :
    elem|[ input(e)[passign*]{elem*} ]| -> elem|[ inputString(e)[passign*]{elem*} ]|
    where SimpleSort("String") := <type-of> e
        ; not(<get-select-anno> e)

  DeriveInput : // for an inputSelectString, the property has an annotation 'select' that points to the values to select from
    elem|[ input(e)[passign*]{elem*} ]| -> elem|[ inputSelectString(e)[passign*]{elem*} ]|
    where SimpleSort("String") := <type-of> e
        ; SelectAnno(srt) := <get-select-anno> e

  get-select-anno = // gets the select anno or fails if there is none
    ?exp|[ e_object.x_property ]|
    ; SimpleSort(srt) := <type-of> e_object
    ; <PropertyAnnos> (srt, x_property)
    ; fetch-elem(?SelectAnno(_))

  DeriveOutput :
    elem|[ output(e)[passign*]{} ]| -> elem|[ text(e)[passign*]{} ]|
    where SimpleSort("String") := <type-of> e

rules //native string operations
  
  after-tc-declare-hook = //depends on declare of String compatible types 
    <declare-type-def> //only declare, native function imports in type def do not have to be in the AST 
    def |[ 
      type String {
        length():Int
        toLowerCase():String
        toUpperCase():String
        replace(String,String):String
        utils.StringType.parseUUID                   as parseUUID():UUID
        org.webdsl.tools.Utils.containsDigit         as containsDigit():Bool
        org.webdsl.tools.Utils.containsLowerCase     as containsLowerCase():Bool
        org.webdsl.tools.Utils.containsUpperCase     as containsUpperCase():Bool
        org.webdsl.tools.Utils.isCleanUrl            as isCleanUrl():Bool
        org.apache.commons.lang.StringUtils.contains as contains(String):Bool // this 'contains' function handles null, null as either arg will produce false 
        utils.StringType.parseInt                    as parseInt():Int
        utils.StringType.split                       as split():List<String>
        utils.StringType.splitWithSeparator          as split(String):List<String> //TODO Regex as argument
      }
    ]|
  ; fail

 check-builtin-signature :
    (GenericSort("List",[SimpleSort("String")]), "concat", []) ->  SimpleSort("String")
    
 check-builtin-signature :
    (GenericSort("List",[SimpleSort("String")]), "concat", [SimpleSort("String")]) ->  SimpleSort("String")

 check-builtin-signature :
    (None(), "log", [s]) ->  SimpleSort("Void")
    where <type-compatible> (s, SimpleSort("String"))
     
rules // hook to specify string-compatible types, e.g. 'string-compatible = ?SimpleSort("Text")'

  type-compatible = ?(<StringCompatible>, <StringCompatible>)

  make-string-compatible =
    typename := <id>
  ; rules( 
      StringCompatible : SimpleSort(typename)
      StringCompatibleTypeNames :+= typename
    )
  
  built-in-template-rule-setup = <make-string-compatible> "String"; fail
  