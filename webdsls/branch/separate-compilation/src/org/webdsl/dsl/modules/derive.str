/**
 * Derive
 * 
 * Derive a page from an entity and a list of properties - only for the given properties, form fields are generated
 *
 * derive editPage for p (name, comment)
 *   => Derive(EditPage(), p, [name, comment])
 * derive editPage for p
 *   => Derive(EditRows(), p, [])
 */


// @todo : enable customization of header, title, description of derived pages
//
// e.g. derive editPage from foo for (bar, baz) with { header{"Provide Bar/Baz Info"} }

module org/webdsl/dsl/modules/derive

imports
  libstrategolib
  libwebdsl-front

strategies

  constraint-error = constraint-error-derive
rules // typechecking derive statements

  constraint-error-derive =
    (		 ?elem|[ derive x_deriveType from e ]|
      <+ ?elem|[ derive x_deriveType from e for (dprop*) ]| )
    ; constraint-error-derive(|x_deriveType, e)
    
  constraint-error-derive(|x_deriveType, e) =
      where(not(SimpleSort(_) := <type-of> e))
    ; add-error(|["Cannot derive for non-entity types."])
    ; fail
  
  /**
   * checks whether the given entity e has a property with name prop
   * fails so that the other constraints with this left-hand side also fire
   */
  constraint-error-derive =
    ?elem|[ derive x_deriveType from e for (dprop*) ]|
    ; SimpleSort(srt) := <type-of> e
    ; <map(try(check-derive-property-exists(|srt)))> dprop*
    ; fail
  
  check-derive-property-exists(|srt) :
    DeriveDefault(prop) -> <add-error(|["entity '", srt, "' has no property '", prop, "'"])>
    where not(<type-of-property> (srt, prop))

  /**
   * checks whether the given property is not a derived property
   * fails so that the other constraints with this left-hand side also fire
   */
  constraint-error-derive =
    ?elem|[ derive x_deriveType from e for (dprop*) ]|
    ; where(
        <is-derive-edit-type> x_deriveType
        ; SimpleSort(srt) := <type-of> e
        ; <map(try(check-derive-derivedproperty(|srt)))> dprop*
        ; fail
      )

  check-derive-derivedproperty(|srt) :
    DeriveDefault(prop) -> <add-error(|["property ", prop, " is a derived property and hence cannot be edited"])>
    where <IsDerivedProperty> (srt, prop)

  /**
   * checks for unknown derive types
   */
  constraint-error-derive(|x_deriveType, e) =
    where (not(<is-derive-type> x_deriveType))
    ; add-error(|[x_deriveType, " is an unknown derive type"])
    ; fail

rules // desugaring

  desugar = desugar-derive

  //rename must be called on outermost define (handled by desugar-in-define-context), in order to have everything in scope 
  desugar-in-define-context = derive-page 
  desugar-in-define-context = derive-edit-rows 
  desugar-in-define-context = derive-view-rows
  
  /**
   * If no properties given, add all properties
   *
   * The difference between viewPage and other pages is that for viewPage, derived properties
   *   are included.
   */
  desugar-derive : // gather properties for derive editPage and createPage
    elem|[ derive x_deriveType from e ]| -> 
    elem|[ derive x_deriveType from e for (dprop*) ]|
    where <is-derive-edit-type> x_deriveType
    with  SimpleSort(t) := <type-of> e
        ; dprop* := <all-properties; filter(
               \Property(name,_,_,_) -> DeriveDefault(name) \ 
            <+ \PropertyNoAnno(name,_,_) -> DeriveDefault(name)\ 
          );uniq> t
  
  desugar-derive : // gather properties for derive viewPage
    elem|[ derive x_deriveType from e ]| -> 
    elem|[ derive x_deriveType from e for (dprop*) ]|
    where <is-derive-view-type> x_deriveType
    with  SimpleSort(t) := <type-of> e
        ; dprop* := <all-properties; filter( 
               \Property(name,_,_,_) -> DeriveDefault(name) \
            <+ \PropertyNoAnno(name,_,_) -> DeriveDefault(name) \
            <+ \DerivedProperty(name,_,_,_,_) -> DeriveDefault(name) \
            <+ \DerivedPropertyNoAnno(name,_,_,_) -> DeriveDefault(name) \
          );uniq> t
          
  // used for typechecking: giving an error for not-supported derive types
  is-derive-type = is-derive-edit-type <+ is-derive-view-type

  is-derive-view-type = ?"viewPage"
  is-derive-view-type = ?"viewRows"

  is-derive-edit-type = ?"editPage"
  is-derive-edit-type = ?"createPage"
  is-derive-edit-type = ?"editRows"
  is-derive-edit-type = ?"editRowsInline"

  is-derive-edit-type = ?"initFunction"

rules // deriving pages

  // derive editPage from e for (property1, property2)
  derive-page : 
    elem|[ derive editPage from e for (dprop*) ]| -> 
    <rename-all> elem|[ 
      dummy() {
        main()
        define local body() {
          header{"Edit " text(e.name) } 
          form { 
            group("Details") { 
              derive editRows from e for (dprop*)
            } 
            group() {
              action("Save", save())
            }
          }
          action save() { 
            e.save(); 
            //return x_view (e ); @todo: what pages do exist at this time?
            return root();
          }
        }
      } 
    ]| 
    with  SimpleSort(srt) := <type-of> e
        ; x_view := <decapitalize-string> srt
        ; try-create-main-body-templates 

  // derive createPage from e for (property1, property2)
  derive-page : 
    elem|[ derive createPage from e for (dprop*) ]| ->
    <rename-all> elem|[ 
      dummy() {
        main()
        define local body() {
          header{"Create " text(e.name) } 
          form { 
            group("Details") { 
              derive editRows from e for (dprop*)
            } 
            group() {
              action("Save", save())
            }
          }
          action save() { 
            e.save(); 
            //return x_view (e ); @todo: what pages do exist at this time?
            return root();
          }
        }
      } 
    ]| 
    with  SimpleSort(srt) := <type-of> e
        ; x_view := <decapitalize-string> srt
        ; try-create-main-body-templates

  // derive viewPage from e for (property1, property2)
  derive-page : 
    elem|[ derive viewPage from e for (dprop*) ]| ->
    <rename-all> elem|[ 
      dummy() {
        main()
        define local body() {
          header{text(e.name) } 
          group("Details") { 
            derive viewRows from e for (dprop*)
          }
        } 
      }
    ]| 
    with  SimpleSort(srt) := <type-of> e
        ; x_view := <decapitalize-string> srt
        ; try-create-main-body-templates

rules // derives edit rows for specified properties

  derive-edit-rows :
    elem|[ derive editRows from e for (dprop*) ]| -> <rename-all> elem|[ dummy() [] { elem* } ]| 
    with if <gt>(<length> dprop*, 10) then
           elem* := <filter-warn(derive-edit-row-template-def(|e)|"not a valid mode for edit row")> dprop*
         else
           elem* := <filter-warn(derive-edit-row(|e)|"not a valid mode for edit row")> dprop*
         end

  derive-edit-row(|e) : 
    DeriveDefault(y) -> <derive-edit-row(|e)> DeriveMode("edit", y)
    
  derive-edit-row(|e ) : 
    DeriveMode("view", y) -> <derive-view-row(|e)>

  derive-edit-row(|e) : 
    DeriveMode("edit", y) -> elem|[ groupitem[] { label(str)[] { input(e.y)[class:=x_class]{} } } ]| 
    with str := <concat-strings> [<make-human-readable> y , ": "]
       ; x_class := <concat-strings> ["input", y]
    
  derive-edit-row-template-def(|e) : 
    DeriveDefault(y) -> <derive-edit-row-template-def(|e)> DeriveMode("edit", y)
    
  derive-edit-row-template-def(|e ) : 
    DeriveMode("view", y) -> <derive-view-row(|e)>

  derive-edit-row-template-def(|e) : 
    DeriveMode("edit", y) -> elem|[ x_template(e) ]| 
    with str := <concat-strings> [<make-human-readable> y , ": "]
       ; x_class := <concat-strings> ["input", y]
       ; srt@SimpleSort(type) := <type-of> e
       ; x_template := <prefix-rename(|type)> x_class
       ; x := <toplevel-rename> "arg"
       ; <emit-webdsl-code> def|[
           define x_template(x : srt) {
             groupitem[] { label(str)[] { input(x.y)[class:=x_class]{} } }
           }
         ]|

  derive-edit-rows :
    elem|[ derive editRowsInline from e for (dprop*) ]| -> elem|[ dummy() [] { elem* } ]| 
    with elem* := <filter-warn(derive-edit-row-inline(|e) <+ derive-edit-row(|e)|"not a valid mode for edit row inline")> dprop*

  derive-edit-row-inline(|e) : 
    DeriveDefault(y) -> <derive-edit-row-inline(|e)> DeriveMode("edit", y)

  derive-edit-row-inline(|e) : 
    DeriveMode("edit", y) -> elem|[ x_template(str, e.y) ]| 
    with SimpleSort(t) := <type-of> |[ e.y ]|
       ; x_template := <concat-strings> ["edit", t]
       ; str := <make-human-readable> y

rules // derives view rows for specified properties

  derive-view-rows :
    elem|[ derive viewRows from e for (dprop*) ]| -> <rename-all> elem|[ dummy()[]{elem*} ]| 
    with  elem* := <filter-warn(derive-view-row(|e )|"not a valid mode for view row")> dprop*

  derive-view-row(|e) : 
    DeriveDefault(y) -> <derive-view-row(|e)> DeriveMode("view", y)
    
  derive-view-row(|e ) : 
    DeriveMode("view", y) ->  elem|[ if(e.y != null) { groupitem[] { label(str)[] { output(e.y)[class:=x_class]{} } } } ]| 
    with str := <concat-strings> [<make-human-readable> y , ": "]
       ; x_class := <concat-strings> ["output", y]

rules 
  
  /**
   *  'derive initFunction' seems to require initialize and init method?
   *
   *   new action def requires a rename of whole page/template define for the init() call to be correctly resolved during rename
   *   after desugaring, 'desugar-in-define-context' calls rename on the whole define
   */
  desugar-in-define-context :
    elem|[ derive initFunction from e for (dprop*) ]| -> elem|[ 
      form{
        action("Initialize", init())
        action init(){ e.initialize(); }
      }
    ]|
    with SimpleSort(x_class) := <type-of> e
       ; stat* := <filter-warn(derive-init-property(|e)|"not a valid mode for init property")> dprop*
       ; <emit-webdsl-code> def|[
            extend entity x_class { 
              extend function init() { stat* }
            }
         ]|

  derive-init-property(|e) : 
    DeriveDefault(y) -> stat|[ if(this.y == null) { this.y := x_init(); } ]| 
    with SimpleSort(x) := <type-of> |[ e.y ]|
       ; x_init := <concat-strings> ["default", x]
    