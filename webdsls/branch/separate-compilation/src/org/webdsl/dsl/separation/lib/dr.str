module separation/dr

imports
  org/webdsl/dsl/separation/-

strategies  
  
  is-ignored-rule = ?"DR_BREAK" <+ ?"DR_EXCEPTION"
  is-ignored-rule = ?"LogTimeSection"

  all-dynamic-rule-names =
      <hashtable-keys> Hashtable(<dr-rule-sets-hashtable>) 
    ; remove-all(is-ignored-rule)

  start-record-dynamic-rules =
    with(
        rules(RecordDR_Enabled := 1)
      ; all-dynamic-rule-names
      ; map(dr-start-change-set(|<id>))
   )
  
  end-record-dynamic-rules =
    with(
        all-dynamic-rule-names
      ; map(\x -> <dr-get-rule-set(|x); commit-and-store-rules(|x)> \)
        // some rules like DR_BREAK are created but have no keys??
      ; remove-all(?(_,[])) => recorded
      ; rules(RecordDR_Enabled :- _)
      ; try(is-record-dynamic-rules-enabled; debug(!"ERROR: RECORD_DR NOT DISABLED"))
    )
    ; !recorded
      
  is-record-dynamic-rules-enabled = RecordDR_Enabled => 1
  
  remove-dr-dummies = map(remove-dr-dummy)
  
  remove-dr-dummy: x{anno*} -> x{anno2*}
    with  anno2* := <remove-all(?DR_DUMMY())> anno*
 
  commit-and-store-rules(|name): rulesets -> (name, keyvals)
    where Hd; ?RuleScope(_, table)
    with  <hashtable-keys> table
          // reverse to keep the same ordering for bagof- when loaded  
        ; keyvals := <map(\x -> (x, <hashtable-get(|x); reverse> table)\)>
       
  changeset-key-to-rules(|table, oldrules): key@(scopeid, rulekey) -> keyvals
    with  values := <hashtable-get(|key)> table
        ; if oldvals := <dr-lookup-rule(|rulekey)> oldrules then
              n_newvals := <max> (0, <subti> (<length> values, <length> oldvals))
            ; newvals := <take(|n_newvals)> values
          else
              newvals := values
          end
        ; keyvals := (rulekey, <reverse> newvals)
  
  commit-and-store-rules(|name): rulesets@[changeset@ChangeSet(_, rmset, h@Hashtable(csid)) | rs] -> (name, keyvals)
    with
        // Store changeset as ruleset
        // [extended rules contain *all* values in the changeset, we only want
        //    the newly added]
          <hashtable-keys> h
        ; keyvals := <map(\x -> <changeset-key-to-rules(|h, rs)>\); remove-all(?(_, []))>
          // Commit change set
        ; !rulesets
        ; dr-commit-change-set  // TODO: this takes too long
        //; where(!(name, <id>); debug(!"Ruleset is now: "))
        ; dr-set-rule-set(|name)
        
  load-dynamic-rule-closure: rulelist -> <map(load-dynamic-rule)> rulelist
  
  load-dynamic-rule: (name, keyvals) -> <id>
    with  dr-get-rule-set(|name) => ruleset;
          if is-record-dynamic-rules-enabled then
            // First scope has tracking enabled; put in second scope
            if length => 1 then
              // No scopes before recording. Have to create a new scope behind the current
              dr-new-scope => newscope;
              <concat> [ruleset, [newscope]];
              dr-set-rule-set(|name)
            end;
            ?[_ | <id>]
          end;
          if ?[RuleScope(lbl, table) | xs] then
            <map(\(key, vals) -> <map(\val -> <hashtable-push(|key, val)> table\)> vals\)> keyvals
          else
            // find rule scope
            ?[ChangeSet(lbls, rmset, table) | xs];
            <fetch-elem(?RuleScope(_, tbl@Hashtable(scopeid)))> xs;
            <map(\(key, vals) -> <map(\val -> <hashtable-push(|(scopeid,key), val)> table\)> vals\)> keyvals
          end
          
  load-flat-dynamic-rule-closure: rulelist -> <map(\((name,key), vals) -> <load-dynamic-rule> (name,[(key,vals)])\)> rulelist
          
rules // helpers for dynamic rule set traversal
  
  rules-as-key-val-pairs(s) =
      mapconcat(\(name, keyvals) -> <mapconcat(\(key,vals) -> <map(\val -> <s> ((name,key),val)\)> vals \)> keyvals \)
   
  rules-to-keys =
      mapconcat(\(name,keyvals) -> <map(\(key,vals) -> (name,key)\)> keyvals\)
  
  map-dr-values(s) =
      map(\(name,keyvals) -> (name, <map(\(key,vals) -> (key,<map(s)> vals) \)> keyvals )\)
  
  map-dr-values-with-key(s) =
      map(\(name,keyvals) -> (name, <map(\(key,vals) -> (key,<map(s(|name,key))> vals) \)> keyvals )\)
  
rules // Track usage of DR's and return position info

  enable-dr-usage-tracking =
    where(table-hashtable; hashtable-put(|"__TRACK_RULE_USAGE__", 1))
      
  disable-dr-usage-tracking =
    where(table-hashtable; hashtable-remove(|"__TRACK_RULE_USAGE__"))
  
  is-dr-usage-tracking-enabled =
    where(table-hashtable; hashtable-get(|"__TRACK_RULE_USAGE__"))
  
  ignore-dr-tracking = fail
  
  override dr-lookup-rule(|name, key) =
      mark-rule-use(|name,key)
    ; proceed
  
  // once-
  override dr-lookup-rule-pointer(|name, key) =
      mark-rule-use(|name,key)
    ; proceed
   
  // bigbag-
  override dr-lookup-rule-pointer(|name, key) =
      mark-rule-use(|name,key)
    ; proceed
  
  // all-keys-
  override dr-all-keys(|name) =
      key := DR_DUMMY()
    ; mark-rule-use(|name,key)
    ; proceed
  
  rule-tracking-table = lookup-table(|"RULE_TRACKING_TABLE")
  
  mark-rule-use(|name, key) =
   where(try(
          is-dr-usage-tracking-enabled
        ; <is-used-dr; not(ignore-dr-tracking)> name
        ; <try(dynamic-rule-resolver)> (name, key)
        ; rule-tracking-table
        ; hashtable-put(|(name,key), 1) 
      ))
 
  // TODO: fold-
  
rules // Callback on dynamic rule lookup
  
  dynamic-rule-resolver = fail
  
  is-used-dr = fail
