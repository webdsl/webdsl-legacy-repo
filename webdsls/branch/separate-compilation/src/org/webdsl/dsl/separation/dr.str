module org/webdsl/dsl/separation/dr

imports
  org/webdsl/dsl/separation/-

strategies  
  
  is-ignored-rule = ?"DR_BREAK" <+ ?"DR_EXCEPTION"
  record-dr-internals = !["RecordDR_ExistingRules","RecordDR_NewRuleSets"]
  is-record-dr-internal = ?x; where(<fetch-elem(?x)> (<record-dr-internals>))

  start-record-dynamic-rules =
    where(
        <map(dr-begin-scope(|<id>))> (<record-dr-internals>)
      ; all-dynamic-rules; remove-all(is-record-dr-internal <+ is-ignored-rule)
      ; string-sort; ?rulenames   //sort for easy debugging (compare)
      ; rules(RecordDR_ExistingRules := rulenames)
      ; map(dr-start-change-set(|<id>))
   )
   
  end-record-dynamic-rules =
    where(
        existing-rules := <RecordDR_ExistingRules>
      ; <map(commit-and-store-changes)> existing-rules
      ; <diff> (<all-dynamic-rules; remove-all(is-record-dr-internal <+ is-ignored-rule)>, existing-rules)
      ; string-sort; ?newrules    // sort for easy debugging (compare)
      ; <map(commit-and-store-rules)> newrules
      ; recorded := <bagof-RecordDR_NewRuleSets>
      ; <map(dr-end-scope(|<id>))> (<record-dr-internals>)  // cleanup
    )
    ; !recorded
 
  all-dynamic-rules = <hashtable-keys> Hashtable(<dr-rule-sets-hashtable>) 
  
  remove-dr-dummies = map(remove-dr-dummy)
  
  remove-dr-dummy: x{anno*} -> x{anno2*}
    with  anno2* := <remove-all(?DR_DUMMY())> anno*
 
  commit-and-store-rules: name -> name
    with  dr-get-rule-set(|name); Hd
        ; ?RuleScope(_, table)
        ; <hashtable-keys> table
          // reverse to keep the same ordering for bagof- when loaded  
        ; keyvals := <map(\x -> (x, <hashtable-get(|x); reverse> table)\)>
             // some rules like DR_BREAK are created but have no keys??
        ; if not([] := keyvals) then 
            //where(!name; debug(!"New rule: ")); debug(!"... keyvals:" )
            rules(RecordDR_NewRuleSets :+= (name, keyvals))
          end
            
  changeset-key-to-rules(|table, oldrules): key@(scopeid, rulekey) -> keyvals
    with  values := <hashtable-get(|key)> table
          // see if any values were in the hashtable before
        ; try(
            oldvals := <dr-lookup-rule(|rulekey)> oldrules
          ; <diff> (values, oldvals)
          )
        ; keyvals := (rulekey, <reverse>)
  
  commit-and-store-changes: name -> (name, changeset)
    with  dr-get-rule-set(|name) => ruleset@[changeset@ChangeSet(_, _, h@Hashtable(csid)) | rs]
        
        // Store changeset as ruleset
        // [extended rules contain *all* values in the changeset, we only want
        //    the newly added]
        ; <hashtable-keys> h
        ; keyvals := <map(\x -> <changeset-key-to-rules(|h, rs)>\); remove-all(?(_, []))>
        ; if not([] := keyvals) then
            //where(!name; debug(!"Changeset for: "))
          //; debug(!"... rules are: ")
            rules(RecordDR_NewRuleSets :+= (name, keyvals))
          end
          // Commit change set
        ; !ruleset
        ; dr-commit-change-set
        ; dr-set-rule-set(|name)
        
  load-dynamic-rule-closure: rulelist -> <map(load-dynamic-rule)> rulelist
  
  load-dynamic-rule: (name, keyvals) -> <id>
    with  [RuleScope(lbl, table) | xs] := <dr-get-rule-set(|name)>
        ; <map(\(key, vals) -> <map(\val -> <hashtable-push(|key, val); !(name,key)/*; store-dr-module*/> table\)> vals\)> keyvals
/*
  store-dr-module: a@(rulename, key) -> a
    with  file := <CurrentFile>
        ; rules(RuleToModule : a -> file)
          
  set-module-for-rule-closure: rulelist -> rulelist
    with  CurrentFile => file
        ; <map(\(name, keyvals) ->
            <map({ruleid: \(key, vals) ->
              <rules(RuleToModule : ruleid -> file)> 
              with ruleid := (name, key) \})> 
            keyvals \)>
          rulelist
*/
rules // helpers for dynamic rule set traversal
  
  rules-as-key-val-pairs(s) =
      mapconcat(\(name, keyvals) -> <mapconcat(\(key,vals) -> <map(\val -> <s> ((name,key),val)\)> vals \)> keyvals \)
   
  rules-to-keys =
      mapconcat(\(name,keyvals) -> <map(\(key,vals) -> (name,key)\)> keyvals\)
  
  map-dr-values(s) =
      map(\(name,keyvals) -> (name, <map(\(key,vals) -> (key,<map(s)> vals) \)> keyvals )\)
  
  map-dr-values-with-key(s) =
      map(\(name,keyvals) -> (name, <map(\(key,vals) -> (key,<map(s(|name,key))> vals) \)> keyvals )\)
  
rules // Track usage of DR's and return position info

  TrackRuleUsage = !"__TRACK_RULE_USAGE__"

  enable-dr-usage-tracking =
      where(prim("SSL_hashtable_put", <dr-rule-sets-hashtable>, <TrackRuleUsage>, 1))
  
  disable-dr-usage-tracking =
      where(prim("SSL_hashtable_remove", <dr-rule-sets-hashtable>, <TrackRuleUsage>))
  
  is-dr-usage-tracking-enabled =
      where(prim("SSL_hashtable_get", <dr-rule-sets-hashtable>, <TrackRuleUsage>))
    // DUMMY
    //; rules(DynamicRulesUsed : ("TestRule", "testKey"))
  
  override dr-lookup-rule(|name, key) =
      where(try(
          is-dr-usage-tracking-enabled
        ; <is-used-dr> name                             // avoid overhead
        ; rules(DynamicRulesUsed : (name,key))
    ))
    ; proceed
  
  