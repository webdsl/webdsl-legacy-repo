module org/webdsl/dsl/transformation/separate-desugar

imports 
  libstrategolib 
  libwebdsl-front
  org/webdsl/dsl/separation/-
  org/webdsl/dsl/separation/lib/-
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/typechecker/-
  
rules
  
  desugar-dependency-file = <path-to-cache-path> "$deps-desugar.aterm"
  
  with-rule-resolving(s) = {| RuleResolvingEnabled:
    rules(RuleResolvingEnabled := 1);
    s
  |}
  
  load-desugar-rules =
    // Load desugar dependencies of unmodified file
    file := <desugar-dependency-file>;
    ts := <file-exists; modification-time <+ !0> file;
    rules(DependenciesTimestamp := ts);
    if (all-old-defs,used-rules,created-rules) := <file-exists; read-file> file then
      <map(\(key, defs) -> <filter(is-cacheable); {defs2: ?defs2; rules(RuleUsers : key -> defs2)}> defs\)> used-rules;
      <map(\(key, defvals*) -> <filter(\(def,vals) -> <rules(RuleProvider :+ key -> def)> where <is-cacheable> def \)> defvals* \)> created-rules;
      // for all-keys
      <map(\((rulename,rulekey), defvals*) -> <filter(\(def,vals) -> <rules(RuleProvider :+ (rulename,DR_DUMMY()) -> def)> where <is-cacheable> def \)> defvals* \)> created-rules;
      <map(\(key, defvals*) -> <filter(\(def,vals) -> <rules(RuleVals :+ def -> (key,vals))> where <is-cacheable> def \)> defvals* \)> created-rules;
      // TODO: RuleValsToKey can be optimized out
      <map(\(key, defvals*) -> <filter(\(def,vals) -> <rules(RuleValsForKey :+ key -> (def,vals))> where <is-cacheable> def \)> defvals* \)> created-rules;
      all-defs := <filter(is-cacheable)> all-old-defs;
      //<load-new-files> all-defs;
      rules(PreviousAllDefs := all-defs)
    else
      <debug> "Cannot load dr rules!";
      load-all-definitions
    end
  
  is-emitted-def = ?At(<string-starts-with(|"(gen)")>, _, _)
  
  // Succeed if the cached version of the definition is still valid
  is-cacheable = where(
      not(TopLevelDefinitions)        // definition is read from cache
    ; def-key-to-file; ModuleToDefs   // file is still imported
  )
  
  dynamic-rule-resolver: (rulename, key) -> (rulename, key)
     where RuleResolvingEnabled
     /*
        ; if DR_DUMMY() := key then
              defs := <bagof-RuleProvider> rulename
     */       
        ; defs := <bagof-RuleProvider> (rulename, key)
        ; not(?[])
     with   
          not-loaded := <filter(where(not(RulesForDefinitionLoaded); not(is-emitted-def)))> defs
        ; if not([] := not-loaded) then
            <verbose-msg> ["Got rule: ", (rulename, key)];
            <verbose-msg> ["Providers: ", defs];
            <verbose-msg> ["Loading defs: ", not-loaded];
            <map(load-rules-for-def)> not-loaded;
            rules(InnermostApplied := True()) // something changed, need new desugar phase
          end
  
  load-rules-for-def: defkey -> defkey
    with  ruleset := <bagof-RuleVals> defkey;
          load-flat-dynamic-rule-closure;
          rules(RulesForDefinitionLoaded : defkey) 
            
  ignore-dr-tracking =
      ?"RuleResolvingEnabled"
   <+ ?"RuleUsers"
   <+ ?"RuleProvider"
   <+ ?"Definition"
   <+ ?"RulesForDefinitionLoaded"
   <+ ?"CurrentDefinitionKey"
   <+ ?"MemoOpenParseTable"     // whole parse table!
   
   ignore-dr-tracking = 
       ?"TopLevelDefinitions"
    <+ ?"ProcedureEntities"
    <+ ?"DoneOnce"
    <+ ?"InTypeCheckingPhase"
    <+ ?"InPage"
    <+ ?"InnermostNormalForm"
    <+ ?"DesugarInDefineContextApplied"
    <+ ?"InTemplate"
    <+ ?"InnermostApplied"
    //<+ ?"AddWebDSLDefs"   need emits from <declare> phase!
  
  // Load files for which we don't have a cache
  /*
  load-new-files: olddefs -> olddefs
  with
    oldmods := <map(def-key-to-file)> olddefs;
    all-keys-ModuleToDefs;
    filter(\x -> x where not(<fetch(?x)> oldmods)\);
    try(not(?[]); debug(!"No rule dependencies found for: "));
    map(load-def-during-desugar)
  */
  
  hashed-uniq =
    where(lookup-table(|"hashed-uniq") => table);
    map(\x -> <hashtable-put(|x,1)> table \);
    <hashtable-keys> table;
    where(<hashtable-clear> table)
  
  create-rule-index =
    all-used-rules;
    map(\(x, y) -> <rules(RuleUsageIndex :+ y -> x)> \)
  
  flatten-and-combine-rule-index =
    all-keys-RuleUsageIndex;
    map({key,defs2: 
      ?key;
      bagof-RuleUsageIndex;
      try(
        <concat;hashed-uniq> [<id>, <RuleUsers> key]  // add old users
      );
      ?defs2;
      rules(RuleUsers : key -> defs2);
      rules(RuleUsageIndex :- key)
    })
  
  save-desugar-rules =
     	  all-defs := <concat; hashed-uniq> [<all-used-rules; map(Fst)>, <PreviousAllDefs <+ ![]>] // new and old
      // Add new rule-usage info
      ; {| RuleUsageIndex:
        log-time(create-rule-index | "Create usage index");
        log-time(flatten-and-combine-rule-index | "Flatten and combine usage")
        |}
      ; log-time(
      // Purge old rule-creation info
        all-keys-RuleValsForKey
      ; map({key,defs2:
          ?key;
          bagof-RuleValsForKey;
          rules(RuleValsForKey :- key);
          filter(where(Fst;is-cacheable));
          map(\defvals -> <rules(RuleValsForKey :+ key -> defvals)> \)
        })
      // Add new rule-creation info
      ; all-keys-CreatedRules
      ; map({def:
            ?def
          ; bagof-CreatedRules
          ; concat
          ; map({rulename:
                ?(rulename, <id>)
              ; map({rulekey, vals, drkey:
                  ?(rulekey,vals)
                ; drkey := (rulename, rulekey)
                ; rules(RuleValsForKey :+ drkey -> (def, vals))
                })
            })
        })
        | "prepare creates")
        // And save...
      // Rule -> defs
      ; uses := <all-keys-RuleUsers; map(\key -> (key, <RuleUsers>)\)>
      ; creates := <all-keys-RuleValsForKey; map(\key -> (key, <bagof-RuleValsForKey>) \)>
      ; <log-time(write-file(|<desugar-dependency-file>) | "write desugar deps")> (all-defs, uses, creates)

  desugar-check-dependencies: def -> def
    with(
	    CreatedRules;
	    // Get a list of (name, keys*) pairs
	    map(\(name, keyvals) -> <map(\(key,vals) -> (name, key)\)> keyvals \);
	    concat;
	    //; remove-all({x: ?(_, [DR_DUMMY()]); Fst; ?x; rules(EmptyLeftHand : x) })
	    hashed-uniq;
	    // term: list of dr-keys that were created
	    filter(\key -> (key, <RuleUsers; filter(not(TopLevelDefinitions)); not(?[]); uniq> key)\);
	    // term: list of (dr-key, list-of-users)
	    where(map({key, defs: ?(key, defs); <verbose-msg> ["Dependent: ", defs, " on rule: ", key, " created in ", def]}));
	    map(Snd);
	    concat;
	    remove-all(RulesForDefinitionLoaded; debug(!"WARNING: invalid cache used for definition: "));
	    // filter: don't load the same def twice
	    filter(where(not(TopLevelDefinitions)); with(load-def-during-desugar))
	  )

  load-def-during-desugar =
    load-unmodified-def;    // get ast
    rename-and-store