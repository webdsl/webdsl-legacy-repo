module org/webdsl/dsl/transformation/separate-desugar

imports 
  libstrategolib 
  libwebdsl-front
  org/webdsl/dsl/separation/-
  org/webdsl/dsl/separation/lib/-
  org/webdsl/dsl/transformation/-
  
rules
  
  with-rule-resolving(s) = {| RuleResolvingEnabled:
    rules(RuleResolvingEnabled := 1);
    s
  |}
  
  load-desugar-rules =
    // Load desugar dependencies
    if (all-old-defs,used-rules,created-rules) := <path-to-cache-path; file-exists; ReadFromFile> "$testdr-rev.aterm" then
        <map(\(key, defs) -> <rules(RuleUser : key -> defs)> defs\)> used-rules
      //; <map(\(key, defs) -> <rules(RuleProvider : key -> defs)> defs\)> created-rules
      ; <map(\(key, defvals*) -> <map(\(def,vals) -> <rules(RuleProvider :+ key -> def)>\)> defvals* \)> created-rules
          // all-keys
      ; <map(\((rulename,rulekey), defvals*) -> <map(\(def,vals) -> <rules(RuleProvider :+ (rulename,DR_DUMMY()) -> def)>\)> defvals* \)> created-rules
      ; <map(\(key, defvals*) -> <map(\(def,vals) -> <rules(RuleVals :+ def -> (key,vals))>\)> defvals* \)> created-rules
      ; all-defs := <filter(is-cacheable)> all-old-defs
      //; <load-new-files> all-defs
      ; rules(PreviousAllDefs := all-defs)
    else
        <debug> "Cannot load dr rules!"
      ; load-all-definitions
    end
  
  is-emitted-def = ?At(<string-starts-with(|"(gen)")>, _, _)
  
  dynamic-rule-resolver: (rulename, key) -> (rulename, key)
     where RuleResolvingEnabled
     /*
        ; if DR_DUMMY() := key then
              defs := <bagof-RuleProvider> rulename
     */       
        ; defs := <bagof-RuleProvider> (rulename, key)
        ; not(?[])
     with   
          not-loaded := <filter(where(not(DefinitionLoaded); not(is-emitted-def)))> defs
        ; if not([] := not-loaded) then
            <verbose-msg> ["Got rule: ", (rulename, key)];
            <verbose-msg> ["Providers: ", defs];
            <verbose-msg> ["Loading defs: ", not-loaded];
            <map(load-rules-for-def)> not-loaded;
            rules(InnermostApplied := True()) // something changed, need new desugar phase
          end
  
  load-rules-for-def: defkey -> defkey
    with  ruleset := <bagof-RuleVals> defkey;
          load-flat-dynamic-rule-closure;
          rules(DefinitionLoaded : defkey) 
            
  ignore-dr-tracking =
      ?"RuleResolvingEnabled"
   <+ ?"RuleUser"
   <+ ?"RuleProvider"
   <+ ?"Definition"
   <+ ?"DefinitionLoaded"
   <+ ?"CurrentDefinitionKey"
   <+ ?"MemoOpenParseTable"     // whole parse table!
   
   ignore-dr-tracking = 
       ?"TopLevelDefinitions"
    <+ ?"ProcedureEntities"
    <+ ?"DoneOnce"
    <+ ?"InTypeCheckingPhase"
    <+ ?"InPage"
    <+ ?"InnermostNormalForm"
    <+ ?"DesugarInDefineContextApplied"
    <+ ?"InTemplate"
    <+ ?"InnermostApplied"
    //<+ ?"AddWebDSLDefs"   need emits from <declare> phase!
  
  // Load files for which we don't have a cache
  /*
  load-new-files: olddefs -> olddefs
  with
    oldmods := <map(def-key-to-file)> olddefs;
    all-keys-ModuleToDefs;
    filter(\x -> x where not(<fetch(?x)> oldmods)\);
    try(not(?[]); debug(!"No rule dependencies found for: "));
    map(load-unmodified-def-with-rename)
  */
  
  // Succeed if the cached version of the definition is still valid
  is-cacheable = where(
      not(TopLevelDefinitions)        // definition is read from cache
    ; def-key-to-file; ModuleToDefs   // file is still imported
  )
  
  save-desugar-rules =
      // Purge old rule-usage info
        all-keys-RuleUsers
      ; map({defs: \key -> <RuleUsers; filter(is-cacheable; {?def; rules(TempRule :+ key -> def)})> \})
      // Add new rule-usage info
      ; all-keys-DesugarRulesUsed
      ; map({def: 
            ?def
          ; bagof-DesugarRulesUsed    // list of list of dr keys
          ; concat                    // list of dr keys
          ; map({key:
              ?key
            ; rules(TempRule :+ key -> def)
            })
        })
      ; all-keys-TempRule
      ; where(length; debug(!"n-TempRule: "))
        // uniq gives OutOfMemory at webdslorg + researchr
      ; map({defs: \key -> <debug(!"Key: "); bagof-TempRule; where(length;debug(!"Count:")); uniq; ?defs; rules(RuleUsers : key -> defs)>\})
      // Purge old rule-creation info
      ; all-keys-RuleValsForKey
      ; map({key,defs2:
          ?key;
          bagof-RuleValsForKey;
          rules(RuleValsForKey :- key);
          filter(where(Fst;is-cacheable));
          map(\defvals -> <rules(RuleValsForKey :+ key -> defvals)> \)
        })
      // Add new rule-creation info
      ; all-keys-CreatedRules
      ; map({def:
            ?def
          ; bagof-CreatedRules
          ; concat
          ; map({rulename:
                ?(rulename, <id>)
              ; map({rulekey, vals, drkey:
                  ?(rulekey,vals)
                ; drkey := (rulename, rulekey)
                ; rules(RuleValsForKey :+ drkey -> (def, vals))
                })
            })
        })
        // And save...
      ; all-defs := <concat; uniq> [<all-keys-DesugarRulesUsed>, <PreviousAllDefs <+ ![]>] // new and old
      // Rule -> defs
      ; uses := <all-keys-RuleUsers; map(\key -> (key, <RuleUsers>)\)>
      ; creates := <all-keys-RuleValsForKey; map(\key -> (key, <bagof-RuleValsForKey>) \)>
      ; <WriteToBinaryFile> (<path-to-cache-path> "$testdr-rev.aterm", (all-defs, uses, creates))

  desugar-check-dependencies = with(
    all-keys-DesugarRulesCreated;
    mapconcat(\key -> (<bagof-DesugarRulesCreated; concat>)\);   
    uniq;
    // term: list of dr-keys that were created
    filter(\key -> (key, <RuleUser; filter(not(DefinitionLoaded)); not(?[])> key)\);
    // term: list of (dr-key, list-of-users)
    where(map({?(key, defs); <verbose-msg> ["Dependent: ", defs, " on rule: ", key]}))
    //map(\(rulekey, defkeys) -> <map(load-cached-def)> defkeys \)
  )
