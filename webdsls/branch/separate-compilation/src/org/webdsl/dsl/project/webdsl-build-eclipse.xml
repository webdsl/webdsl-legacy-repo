<project name="webdsl-build-eclipse" default="eclipse-build">

  <condition property="stratego-jar-cp" value="${eclipse.strategoxt.strategojar}">
    <isset property="eclipse.running"/>
  </condition>

  <target name="generate-uuid" description="Generates a UUID">
    <script language="javascript">
      <![CDATA[
                importClass(java.util.UUID);
                var id = UUID.randomUUID();
                project.setProperty("build-id",id.toString());
        ]]>
    </script>
    <echo>generated uuid: ${build-id}</echo>
  </target>

  <target name="get-build-id">
    <if>
      <not><isset property="build-id" /></not>
    <then>
      <antcallback target="generate-uuid" return="build-id"/>
    </then>
    </if>
    <echo>build-id: ${build-id}</echo>
  </target>

  <target name="eclipse-build" depends="clean-if-editor-updated, clean-if-project-converted, get-build-id">
    <!-- remove completed build id -->
    <property name="path.build.completed" value="${currentdir}/.servletapp/.last-build-id-completed" />
    <delete file="${path.build.completed}" failonerror="false" />

    <!-- write build-id, so the java-based webdsl builder (that starts the server) can pick it up -->
    <property name="path.build.id" value="${currentdir}/.servletapp/.last-build-id" />
  	<mkdir dir="${currentdir}/.servletapp/"/>
    <echo file="${path.build.id}">${build-id}</echo>

    <antcall target="build-without-java-compile"/>

    <property name="servletappdir" value="${currentdir}/.servletapp"/>
    <property name="webcontentdir" value="${currentdir}/WebContent"/>

    <copy preservelastmodified="true" todir="${webcontentdir}/WEB-INF/lib">
      <fileset dir="${servletappdir}/bin/WEB-INF/lib">
        <exclude name="javaee.jar" />
      </fileset>
    </copy>
    <copy file="${servletappdir}/web.xml" preservelastmodified="true" todir="${webcontentdir}/WEB-INF"/>
    <copy preservelastmodified="true" todir="${webcontentdir}">
      <fileset dir="${servletappdir}/html"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}/images">
      <fileset dir="${servletappdir}/images"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}/stylesheets">
      <fileset dir="${servletappdir}/stylesheets"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}/javascript">
      <fileset dir="${servletappdir}/javascript"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}">
      <fileset dir="${servletappdir}">
        <include name="webdsl-reindex"/>
        <include name="build.reindex.xml"/>
        <include name="build.properties"/>
        <include name="html/index.jsp"/>
        <include name="html/favicon.ico"/>
        <include name="build.properties"/>
      </fileset>
    </copy>

    <ant dir="${currentdir}/.servletapp" antfile="${currentdir}/.servletapp/build.xml" target="configure"/>
    <copy overwrite="true" todir="${webcontentdir}/WEB-INF/classes">
      <fileset dir="${servletappdir}/src-template">
        <include name="hibernate.properties"/>
        <include name="email.properties"/>
        <include name="log4j.properties"/>
      </fileset>
    </copy>

    <antcall target="fix-classpath"/>
    <antcall target="generate-ant-build-files"/>
    <antcall target="run-eclipse-build"/>
    <!--<antcall target="poll-deployed-app-for-new-build-id"/>-->

    <antcall target="refresh"/>

  	<!-- show that build has finished -->
    <echo file="${path.build.completed}">${build-id}</echo>
  </target>

  <target name="poll-deployed-app-for-new-build-id" depends="load-config">
    <script language="javascript"><![CDATA[
      importClass(java.net.URL);
      importClass(java.io.BufferedReader);
      importClass(java.io.InputStreamReader);
      importClass(java.lang.Thread);

      echo = project.createTask("echo");
      var projectname = project.getProperty("appname");
      var buildid = project.getProperty("build-id");

      var url = new URL("http://localhost:8080/"+projectname+"/?show_build_id=true");
      echo.setMessage("URL: "+url);
      echo.perform();
      var searchfor = "build-id:"+buildid;
      echo.setMessage("searching for: "+searchfor);
      echo.perform();

      var found = false;
      var tries = 10;
      while(tries > 0 && !found){
        tries = tries - 1;
        try {
          var instream = new InputStreamReader(url.openStream());
          var inreader = new BufferedReader(instream);
          var inputLine = inreader.readLine();
          while (inputLine != null) {
            if(inputLine.contains(searchfor)){ found=true; }
            inputLine = inreader.readLine();
          }
          inreader.close();
        } catch (e) {
          //echo.setMessage(e);
          //echo.perform();
        }

        try {
          Thread.sleep (1000);
        } catch (e) {
          //echo.setMessage(e);
          //echo.perform();
        }
      }
      if(found){
        echo.setMessage("Application deployed.");
      }
      else{
        echo.setMessage("Application not deployed yet.");
      }
      echo.perform();
      if(found){
      project.setProperty("found-newly-deployed-app","true");
      }
    ]]></script>
    <if>
      <isset property="found-newly-deployed-app" />
    <then>
      <antcall target="open-app-in-browser" />
    </then>
    <else>
      <echo>(Re)start the Tomcat server in the 'Servers' view.</echo>
    </else>
    </if>
  </target>

    <target name="open-app-in-browser">

      <script language="javascript"><![CDATA[
        importClass(org.eclipse.ui.browser.IWorkbenchBrowserSupport);
        importClass(org.eclipse.wst.server.ui.internal.ServerUIPlugin);
        importClass(org.eclipse.ui.browser.IWebBrowser);
        importClass(java.net.URL);
        var projectname = project.getProperty("appname");
        try {
          var browserSupport = ServerUIPlugin().getWorkbench().getBrowserSupport();
          var browser = browserSupport.createBrowser(IWorkbenchBrowserSupport.LOCATION_BAR | IWorkbenchBrowserSupport.NAVIGATION_BAR, null, null, null);
          browser.openURL(new URL("http://localhost:8080/"+projectname));
        } catch (e) {
          echo = project.createTask("echo");
          echo.setMessage(e);
          echo.perform();
        }
      ]]></script>
    </target>

	<target name="check-remove-command-file">
	    <available file="${currentdir}/.servletapp/.clean-project-required" property="check-remove-command-file-present"/>
        <if><isset property="check-remove-command-file-present" /><then>
		    <delete file="${currentdir}/.servletapp/.clean-project-required" />
        </then></if>
	</target>
    <target name="clean-if-project-converted" depends="check-remove-command-file" if="check-remove-command-file-present">
    	<antcall target="clean-eclipse-project" />
    </target>

    <target name="clean-eclipse-project">
		<antcall target="clean-all" />
    	<mkdir dir="${currentdir}/WebContent"/>
		<delete includeemptydirs="true">
			<fileset dir="${currentdir}/WebContent" includes="**/*"/>
		</delete>
  	</target>

  <target name="clean-if-editor-updated" unless="editor.update.build.performed">
    <property name="path.build.version" value="${currentdir}/.servletapp/.last-build-version" />
    <available file="${path.build.version}" property="build.is.completed" />
    <loadfile srcFile="${path.build.version}" property="build.last.version" quiet="true" />

    <if>
      <not>
        <and>
          <isset property="build.is.completed" />
          <equals arg1="${build.last.version}" arg2="${webdsl.plugin.version}" />
        </and>
      </not>
      <then>
        <echo>Editor updated to version ${webdsl.plugin.version}. Performing a clean build...</echo>
        <antcall target="clean-all" />
        <property name="editor.update.build.performed" value="1" />
        <dirname property="dir.build.version" file="${path.build.version}" />
        <mkdir dir="${dir.build.version}" />
        <echo file="${path.build.version}">${webdsl.plugin.version}</echo>
      </then>
    </if>
  </target>

  <target name="refresh">
    <eclipse.convertPath fileSystemPath="${basedir}" property="resourcePath"/>
    <eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
  </target>

  <target name="run-eclipse-build">
    <!-- invoke incremental build of java code in eclipse
    <basename property="projectname" file="${basedir}"/>
    <eclipse.incrementalBuild project="${projectname}" kind="incremental" builder="org.eclipse.jdt.core.javabuilder"/>
    -->

    <!-- invoke eclipse java compiler -->
    <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
      <isset property="eclipse.running"/>
    </condition>
    <property name="ant.build.javac.target" value="1.5"/>
    <property name="ant.build.javac.source" value="1.5"/>
    <javac destdir="${webcontentdir}/WEB-INF/classes/"
      failonerror="true"
      classpathref="libraries"
      debug="on"
      fork="true"
      nowarn="true"
      memoryinitialsize="256m"
      memorymaximumsize="1024m">
      <!-- fork= and memory sizes fix problem with javac throwing outofmemory heap space exception caused by ant 64mb default limit -->
      <!--     verbose="yes">
<compilerarg value="-Xlint"/> -->
      <src path="${servletappdir}/src-generated" />
      <src path="${servletappdir}/src-native" />
      <src path="${servletappdir}/src-template" />
    </javac>
  </target>


  <path id="libraries">
    <fileset dir="${servletappdir}/bin/WEB-INF/lib/" includes="*.jar"/>
  </path>


  <target name="eclipse-build-code-only" depends="clean-if-editor-updated">

    <if>
      <isset property="editor.update.build.performed" />
      <then>
        <antcall target="eclipse-build" />
      </then>
      <!-- TODO: Build will run again, need graceful abort... -->
    </if>

    <antcall target="build-without-java-compile-code-only"/>

    <!-- update web.xml, in case of new pages -->
    <property name="webcontentdir" value="${currentdir}/WebContent"/>
    <property name="servletappdir" value="${currentdir}/.servletapp"/>
    <copy file="${servletappdir}/web.xml" preservelastmodified="true" todir="${webcontentdir}/WEB-INF"/>

    <antcall target="run-eclipse-build"/>
  </target>


  <target name="fix-classpath">
    <script language="javascript">
      <![CDATA[
        importClass(java.io.File);
        importClass(java.io.BufferedReader);
        importClass(java.io.FileReader);
        importClass(java.io.BufferedWriter);
        importClass(java.io.FileWriter);
        importClass(java.lang.StringBuffer);

        // Access to Ant-Properties by their names
        var currentdir = project.getProperty("currentdir");

      classpathFile = new StringBuffer();
        classpathFile.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      classpathFile.append("<classpath>\n");
      classpathFile.append("\t<classpathentry kind=\"src\" path=\".servletapp/src-template\"/>\n");
        classpathFile.append("\t<classpathentry kind=\"src\" path=\".servletapp/src-generated\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"src\" path=\".servletapp/src-native\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.web.container\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.module.container\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"output\" path=\"WebContent/WEB-INF/classes\"/>\n");

        var appdir = new File(currentdir+"/.servletapp/bin/WEB-INF/lib");
      var libfiles = appdir.listFiles();
      for ( i = 0 ; i < libfiles.length ; i ++ ) {
      if ( libfiles[i].isFile ( ) ){
        classpathFile.append("\t<classpathentry kind=\"lib\" path=\".servletapp/bin/WEB-INF/lib/"+libfiles[i].getName()+"\"/>\n");
        }
        }

      classpathFile.append("</classpath>\n");

      try {
            //write result
            fw = new FileWriter(currentdir+"/.classpath");
            bw = new BufferedWriter(fw);
            bw.write(classpathFile.toString());
            bw.close();
            fw.close();
          } catch (e) {
            echo = project.createTask("echo");
            echo.setMessage(e);
            echo.perform();
          }
      ]]>
        </script>
        <echo>generated .classpath</echo>
      </target>

      <target name="generate-ant-build-files">
        <script language="javascript">
          <![CDATA[
              importClass(java.io.File);
              importClass(java.io.BufferedReader);
              importClass(java.io.FileReader);
              importClass(java.io.BufferedWriter);
              importClass(java.io.FileWriter);
              importClass(java.lang.StringBuffer);
              importClass(org.eclipse.core.resources.ResourcesPlugin);

              // Access to Ant-Properties by their names
              var currentdir = project.getProperty("basedir");
            var projectname = (new File(currentdir)).getName(); //basename

            buildfile = new StringBuffer();
            buildfile.append("<project name=\"clean-project\" default=\"clean-project\">\n");
            buildfile.append("\t<target name=\"clean-project\">\n");
            buildfile.append("\t\t<delete dir=\"${basedir}/.webdsl-parsecache\" />\n");
            buildfile.append("\t\t<delete dir=\"${basedir}/.servletapp\" />\n");
            buildfile.append("\t\t<delete dir=\"${basedir}/.webdsl-fragment-cache\" />\n");
            buildfile.append("\t\t<delete includeemptydirs=\"true\">\n");
            buildfile.append("\t\t\t<fileset dir=\"${basedir}/WebContent\" includes=\"**/*\"/>\n");
            buildfile.append("\t\t</delete>\n");
            buildfile.append("\t\t<eclipse.convertPath fileSystemPath=\"${basedir}\" property=\"resourcePath\" />\n");
            buildfile.append("\t\t<eclipse.refreshLocal resource=\"${resourcePath}\" depth=\"infinite\" />\n");
            buildfile.append("\t</target>\n");
            buildfile.append("</project>\n");

            try {
                  //write result
                  fw = new FileWriter(currentdir+"/clean-project.xml");
                  bw = new BufferedWriter(fw);
                  bw.write(buildfile.toString());
                  bw.close();
                  fw.close();
                } catch (e) {
                  echo = project.createTask("echo");
                  echo.setMessage(e);
                  echo.perform();
                }
               ]]>
    </script>
      <echo>generated clean-project.xml</echo>
      <antcall target="generate-ant-build-file-launcher">
        <param name="buildfilename" value="clean-project"/>
      </antcall>

      <antcall target="generate-ant-build-file-for-invoking-webdsl">
        <param name="taskname" value="eclipse-build"/>
        <param name="buildfilename" value="full-build"/>
      </antcall>

      <antcall target="generate-ant-build-file-for-invoking-webdsl">
        <param name="taskname" value="eclipse-build-code-only"/>
        <param name="buildfilename" value="build-code-only"/>
      </antcall>

      <!--<antcall target="refresh"/>-->
    </target>

    <target name="generate-ant-build-file-for-invoking-webdsl">
      <fail unless="taskname" />
      <fail unless="buildfilename" />
      <script language="javascript">
        <![CDATA[
              importClass(java.io.File);
              importClass(java.io.BufferedReader);
              importClass(java.io.FileReader);
              importClass(java.io.BufferedWriter);
              importClass(java.io.FileWriter);
              importClass(java.lang.StringBuffer);
              importClass(org.eclipse.core.resources.ResourcesPlugin);

              // Access to Ant-Properties by their names
              var buildfilename = project.getProperty("buildfilename");
              var taskname = project.getProperty("taskname");
              var currentdir = project.getProperty("basedir");
            var projectname = (new File(currentdir)).getName(); //basename

            buildfile = new StringBuffer();
            buildfile.append("<project name=\""+buildfilename+"\" default=\""+buildfilename+"\">\n");
            buildfile.append("\t<fail unless=\"plugindir\" message=\"WebDSL plugin is not correctly installed. The 'plugindir' property is not available.\" />\n");
            buildfile.append("\t<property name=\"templatedir\" value=\"${plugindir}/webdsl-template\"/>\n");
            buildfile.append("\t<property name=\"currentdir\" value=\"${basedir}\"/>\n");
            buildfile.append("\t<property name=\"webdsl-java-cp\" value=\"${plugindir}/include/webdsl.jar\"/>\n");
            buildfile.append("\t<property name=\"webdslexec\" value=\"java\"/>\n");
            buildfile.append("\t<import file=\"${plugindir}/webdsl-template/webdsl-build.xml\"/>\n");
            buildfile.append("\t<target name=\""+buildfilename+"\">\n");
            buildfile.append("\t\t<antcall target=\""+taskname+"\"/>\n");
            buildfile.append("\t</target>\n");
            buildfile.append("</project>\n");

            try {
                  //write result
                genfilename = buildfilename+".xml";
                  fw = new FileWriter(currentdir+"/"+genfilename);
                  bw = new BufferedWriter(fw);
                  bw.write(buildfile.toString());
                  bw.close();
                  fw.close();
                  echo = project.createTask("echo");
                  echo.setMessage(genfilename);
                  echo.perform();
                } catch (e) {
                  echo = project.createTask("echo");
                  echo.setMessage(e);
                  echo.perform();
                }
               ]]>
    </script>
    <antcall target="generate-ant-build-file-launcher" />
  </target>

    <target name="generate-ant-build-file-launcher">
      <fail unless="buildfilename" />
      <script language="javascript">
        <![CDATA[
                importClass(java.io.File);
                importClass(java.io.BufferedReader);
                importClass(java.io.FileReader);
                importClass(java.io.BufferedWriter);
                importClass(java.io.FileWriter);
                importClass(java.lang.StringBuffer);
                importClass(org.eclipse.core.resources.ResourcesPlugin);

                // Access to Ant-Properties by their names
                var buildfilename = project.getProperty("buildfilename");
                var currentdir = project.getProperty("basedir");
                var plugindir = project.getProperty("plugindir");
              var projectname = (new File(currentdir)).getName(); //basename

              buildfile = new StringBuffer();
              buildfile.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n");
              buildfile.append("<launchConfiguration type=\"org.eclipse.ant.AntLaunchConfigurationType\">\n");
              buildfile.append("<booleanAttribute key=\"org.eclipse.ant.ui.DEFAULT_VM_INSTALL\" value=\"false\"/>\n");
              buildfile.append("<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">\n");
              buildfile.append("<listEntry value=\"/"+projectname+"/"+buildfilename+".xml\"/>\n");
              buildfile.append("</listAttribute>\n");
              buildfile.append("<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">\n");
              buildfile.append("<listEntry value=\"1\"/>\n");
              buildfile.append("</listAttribute>\n");
              buildfile.append("<listAttribute key=\"org.eclipse.jdt.launching.CLASSPATH\">\n");
              <!--buildfile.append("<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;\"/>\n");-->
              buildfile.append("<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>\n");
              buildfile.append("<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>\n");
              buildfile.append("<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;"+plugindir+"/webdsl-template/template-java-servlet/lib-test/org.eclipse.wst.server.core_1.1.102.v20100123.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;\"/>\n");
              buildfile.append("<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;"+plugindir+"/webdsl-template/template-java-servlet/lib-test/org.eclipse.wst.server.ui_1.1.103.v20100123.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;\"/>\n");
              buildfile.append("</listAttribute>\n");
              buildfile.append("<booleanAttribute key=\"org.eclipse.jdt.launching.DEFAULT_CLASSPATH\" value=\"false\"/>\n");
              buildfile.append("<stringAttribute key=\"org.eclipse.jdt.launching.CLASSPATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>\n");
              buildfile.append("<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\""+projectname+"\"/>\n");
              buildfile.append("<stringAttribute key=\"org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>\n");
              buildfile.append("<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE\" value=\"${none}\"/>");
              buildfile.append("<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${workspace_loc:/"+projectname+"/"+buildfilename+".xml}\"/>\n");
              buildfile.append("<stringAttribute key=\"process_factory_id\" value=\"org.eclipse.ant.ui.remoteAntProcessFactory\"/>\n");
              buildfile.append("</launchConfiguration>\n");

              try {
                    //write result
                  genfilename = projectname+" "+buildfilename+".xml.launch";
                    fw = new FileWriter(currentdir+"/"+genfilename);
                    bw = new BufferedWriter(fw);
                    bw.write(buildfile.toString());
                    bw.close();
                    fw.close();
                    echo = project.createTask("echo");
                    echo.setMessage("generated "+genfilename);
                    echo.perform();
                  } catch (e) {
                    echo = project.createTask("echo");
                    echo.setMessage(e);
                    echo.perform();
                  }
              ]]>
      </script>
    </target>

</project>
