module org/webdsl/dsl/transformation/dsl-to-core

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  libsepcomp
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/analysis/-
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/modules/-
  org/webdsl/dsl/languages/composition

signature constructors
  
  ApplicationName : Term -> Term
  
strategies

  dsl-to-core =
      if FoundErrors then <exit> 1 end //exit if parsing error in modules, exit here instead of in dsl-to-core-analysis for compatibility with editor support
    ; with( 
          if-only-typechecking(<exit> 0)
        ; add-builtins-to-ast
        ; dsl-to-core-generation
      )
    ; get-all-toplevel-definitions
  
  dsl-to-core-analysis =
      if not(FoundErrors) //stop if parsing error in modules
      then
          stage(typecheck|"typechecking")
      end
    ; transform-defs(remove-position-annos)
      
  dsl-to-core-generation =
    with(
      stage(
        desugar-top
        |"model-to-model")
    ; if-extra-typechecking(stage(typecheck|"extra typechecking"))
    ; stage(access-control-stage | "access control")
    ; check-for-ajax
    ; stage(
      		dependency-phase(
		        analyze-all | "analyze-all")
		   	; dependency-phase(
		      //collect all the functions in a dynamic rule and handles overloading
		     		aggregate-and-combine-functions
		     		| "aggregate funcs")
		    ; dependency-phase(
		      	transform-defs-tracked(add-backend-annotations)
		      	| "add-backend-annos")
		    ; stage(rename-identifiers-top|"renaming identifiers")
		   |"performing analysis")
    )
  
  // Used during desugar if the desugar dependency file is unavailable
  load-all-definitions = with(
      // Make sure all files are loaded
      all-keys-CachedFile
    ; map(
          (ParsedFile <+ load-unmodified-file)
        ; map(
            get-def-key; get-toplevel-definition
          <+
            rename-and-store
          )
      )
  )
  
  rename-and-store: ast -> ast'
    with  where(with-toplevel-name(get-def-key) => key)
        ; remove-string-position-annos
        ; rename-top => ast'             // TODO: track rules
        ; remove-position-annos
        ; store-module-def(|key)
  
  load-unmodified-def: key -> def
    with  path := <def-key-to-file> key
        ; defs := <ParsedFile <+ load-unmodified-file> path
        ; filter(where(get-def-key; ?key))
        ; if length; not(?1) then
             <debug(!"Multiple or no definitions found in file: ")> (<id>, key)
            ; <exit> 1
          end
        ; def := <Hd>
        
  // Load ast for an unmodified (cached) file
  load-unmodified-file: path -> defs
    with  path-to-cache-path => cachepath
        ; !FILE(path)
        ; ast := <parse-file-without-cache(|path,cachepath)>
        ; module-ast-to-toplevel-defs(|path)
        ; remove-string-position-annos
        ; ?defs
        ; rules(ParsedFile : path -> defs)
       
strategies // IDE Plugin stuff

  webdsl-collect-all-errors =
    {| AllErrors, AllWarnings:
      rules(
        // Override the error reporting behavior to collect errors
        AddError(|msgs):   node -> node where rules(AllErrors   :+= (node, <error-to-string> msgs))
        AddWarning(|msgs): node -> node where rules(AllWarnings :+= (node, <error-to-string> msgs))
      )
    ; with(
        dsl-to-core-analysis
      )
    ; !(<bagof-AllErrors <+ ![]>, <bagof-AllWarnings <+ ![]>, [])
    |}
    
strategies // module imports

  emit-import :
    x -> <rules( ExtraModulesToImport :+= x )>

  import-module: Imports(name) -> file
    with  path := <concat-strings>[<DirName>, "/", name, ".app"]
        ; file := <import-module(|path)> name
          
  import-module(|path): name -> Note([])
    where <Imported> path
    
  import-module(|path): name -> file
    with  xtcfile := FILE(path)
        ; name1 := <strip-annos> name
        ; {| ImportedBy:
              rules(ImportedBy := name)
            ; file := <read-webdsl-file> xtcfile
          |}
        
  read-webdsl-application =
    {| ModuleAst:
    	// Read modified files, starting at the main app file
    	where(?FILE(path); rules(Imported : path))
    ; read-webdsl-file
      // Import builtin files
    ; {| ExtraModulesToImport:
         try(import-extra-modules-hook; debug(!"INTERNAL ERROR: import-extra-modules-hook strategies must fail");<exit>1)
       ; extramodules := <bagof-ExtraModulesToImport>
      |}
    ; <map(import-module)> extramodules
      // Store top-level elements
    ; all-keys-ModuleAst
    ; map(\path -> <ModuleAst; module-ast-to-toplevel-defs(|path); remove-string-position-annos; map(store-module-def)> \)
    |}

  read-webdsl-file = with(
      // Read main app
      ?xtcfile
    ; where(
          path := <path-of-xtc-file>
        ; rules(Imported : path)
      )
    ; xtc-parse-webdsl
    ; ?content
    ; if <CachedFile> path then
          ?(defkeys, imports, ruleset)
        ; <load-dynamic-rule-closure> ruleset
        ; <map(import-module)> imports
        ; rules(ModuleToDefs : path -> defkeys)
      else
          rules(ModuleAst : path -> content)
        ; rules(ModifiedFile : path)
        ; if not(ImportedBy) then // main app file
            ?Application(<id>,_); set-qualified-appname 
            <+
            not(add-error(|"Main .app file needs to start with \"application\""))
          end
        ; imports := <collect-all(?Imports(_))> content
        ; rules(ModuleImports : path -> imports)
        ; <alltd(?Imports(_); import-module)> content
      end
  )

	set-qualified-appname = ?name; rules(QualifiedAppName := name)

strategies // toplevel definitions
  
  // dynamic rule oddity: removing with :- does not remove the key
  // so all-keys-X; map(x) will fails for 'removed' keys
  toplevel-definition-keys =    
      all-keys-TopLevelDefinitions
    ; filter(is-definition-loaded)
  
  // Perform s on all definitions, without changing the definitions
  map-defs(s) =
      toplevel-definition-keys 
    ; map(with-definition-key(s))

  // Get a list of all toplevel definitions
  get-all-toplevel-definitions = 
    map-defs(id)

  // Filter all definitions for which s succeeds, without actually removing them from the list of definitions 
  filter-defs(s) =
      toplevel-definition-keys 
    ; filter(with-definition-key(s))
      
  transform-defs(s) = 
      toplevel-definition-keys 
    ; map(
        ?RemoveMe() <+ 
        { key, newdef:
            ?key
          ; with-definition-key(s)
          ; ?newdef
          ; rules(TopLevelDefinitions : key -> newdef) } )
  
   // Remove all defs for which s succeeds
   // NOTE: don't actually remove the definition using rules(ToplevelDefintiions :- key),
   // because the dependency mechanism needs to know that this definition was once loaded.
  remove-defs(s) =
      toplevel-definition-keys 
    ; filter(\key -> <try(with-definition-key(s); rules(TopLevelDefinitions : key -> RemoveMe()))> key\)  
  
  with-definition-key(s) =
      ?key
    ; get-toplevel-definition
    ; {| CurrentDefinitionKey:
        rules(CurrentDefinitionKey := key)
      ; s
      |}
   
  /*
    TopLevelDefinitions : toplevel definition name -> definition
  */ 
    
  module-ast-to-toplevel-defs(|path): ast -> defs
    with  if ?Application(appname, appdefs) then
            ![Section("", [ApplicationName(appname){At(path,0,0)}]) | appdefs]
          else
            ?Module(_, <id>)
          end
        //; try(?[]; ![Section("", [])])     // at least on section so module gets stored
        ; defs := <mapconcat(module-section-to-toplevel-defs)>
        ; map(get-def-key)
        ; ?defkeys
        ; rules(ModuleToDefs : path -> defkeys)
    
  module-section-to-toplevel-defs: Section(_, defs*) -> defs*
  module-section-to-toplevel-defs: def@AccessControlDefinition(_, _) -> [def] 
        
  declare =
      ?ApplicationName(name)
    ; <set-qualified-appname> name
  
  store-module-def(|defname): def -> defname
    with  try(<is-definition-loaded> defname; !defname; debug(!"Two definitions with the same unique name: ")) 
        ; rules(TopLevelDefinitions : defname -> def)
  
  //give each toplevel definition a name before storing
  store-module-def = 
      where(with-toplevel-name(get-def-key => key))
    ; store-module-def(|key)

  get-def-key: def -> key
    with  key := <get-anno(?At(_,_,_)) <+ !At(<concat-strings; newname> ["(gen)",<TopLevelDefineName>], 0, 0)> def
        
  def-key-to-file = ?At(<id>,_,_)
  
strategies  // position info
    
  remove-position-annos =
    topdown-l(try(keep-position-anno <+ remove-position-anno))

  remove-string-position-annos =
    topdown(try(remove-string-position-anno))

  remove-string-position-anno =
    (is-string + ?SimpleSort(_) + ?GenericSort(_, _))
    ; strip-annos

  remove-position-anno :
    s{anno*} -> result
    where anno2* := <remove-all(?At(_, _, _))> anno*
        ; if [] := anno2* then
            result := s{}
          else
            result := s{anno2*}
          end

