module org/webdsl/dsl/transformation/emit

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/transformation/-
  
signature constructors
  
  IsGenerated : Term
  
rules	// emit top-level definition

	// @TODO: rename to emit-webdsl-def
	emit-webdsl-code = 
      declare-all
    ; emit-webdsl-code-no-declare
    
  // Used for separate declare / emit phase
	emit-webdsl-code-no-declare =
      where(InTypeCheckingPhase);
      emit-webdsl-code-no-rename
  <+  with-toplevel-name(
	        rename-all
	      ; emit-webdsl-code-no-rename
	    )
	  
	//used to support syntax variations and backwards compatibility, rename strategy will need to cope with the variations, desugar can normalize to one
  // renaming is not needed for these one-to-one transformations that have the same semantics
	emit-webdsl-code-no-rename: def -> def
    with  (CurrentDefinitionKey <+ !"") => owner
        ; if InTypeCheckingPhase then
            rules(TypecheckEmits :+ owner -> def)
          else
            rules(AddWebDSLDefs :+= (owner, def))
          end
          
	// Emit all defs, fail if no emits available
	emit-all-defs =
      bagof-AddWebDSLDefs
    ; not(?[])
    ; map(\(owner, def) -> <emit-with-owner(|owner)> def\)
    ; rules(AddWebDSLDefs :- _)
      
  emit-with-owner(|owner): def -> def
    where
      if <?At(mod,y,z)> owner; <not(is-emitted-mod)> mod then
        // Emitted from an ast definition
       	if <is-definition-loaded> owner then
            // Definition is recompiling, emit
            key := At(mod,"emit",<newname>"emit"){owner}
          ; <store-module-def(|key)> def
        else
            // Some declare rules emit definitions for each entity/page, these emit should not be
            // emitted until the originating definition is loaded.
            fatal-err(|"Emit from cached def in desugar")
        end
      else
        // Emitted from another compiler emit
        <store-module-def> def
      end
		
rules // emit section
  
  // TODO: dr is never actually applied
  emit-webdsl-section =
      declare-all
    ; rename-section
    ; ?sec
    ; rules(
        AddWebDSLSection :+ Application(qid, sections) -> Application(qid, [sec|sections])
      )
  
rules // emit builtins (during declare)
	
	add-builtin-rule = ?rule; rules(AddWebDSLRules :+= rule)
	
	add-typecheck-emit(|owner): def -> def
	 with  // TODO: track rules during rename ?
	       def' := <rename-top> def
	     ; <emit-with-owner(|owner)> def'
	
	// loaded def: emit and clear 
	add-typecheck-emits: owner -> owner
	 where <?"" <+ is-definition-loaded> owner
	 with  <bagof-TypecheckEmits; map(add-typecheck-emit(|owner))> owner
	     ; rules(TypecheckEmits :- owner)
	
	// cached defs: don't emit, but store for when triggered for recompilation
  add-typecheck-emits: owner -> owner
   where not(is-definition-loaded)
         
	add-builtins-to-ast =
			all-keys-TypecheckEmits
	  ; !["" | <id>]     // add emits that have no owner
	  ; map(add-typecheck-emits)
      // TODO: same as defs
		; !AccessControlDefinition(None(), <bagof-AddWebDSLRules>)
		; rename-and-store
		; rules(AddWebDSLRules :- _)
	
	/*
	get-builtin-sections: _ -> [defsec,rulesec]
    with  defsec := Section("builtins", <bagof-AddWebDSLDefs; map(rename-toplevel)>)
        ; rulesec := AccessControlDefinition(None(), <bagof-AddWebDSLRules; map(rename-toplevel)>)
        ; rules(AddWebDSLDefs :- _)
        ; rules(AddWebDSLRules :- _)
	*/