module org/webdsl/dsl/transformation/emit

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  
signature constructors
  
  IsGenerated : Term
  
rules	// emit top-level definition

	// @TODO: rename to emit-webdsl-def
	emit-webdsl-code = 
      declare-all
    ; emit-webdsl-code-no-declare
    
  // Used for separate declare / emit phase
	emit-webdsl-code-no-declare =
      where(InTypeCheckingPhase); emit-webdsl-code-no-rename
  <+  with-toplevel-name(
	        rename-all
	      ; emit-webdsl-code-no-rename
	    )
	  
	//used to support syntax variations and backwards compatibility, rename strategy will need to cope with the variations, desugar can normalize to one
  // renaming is not needed for these one-to-one transformations that have the same semantics
	emit-webdsl-code-no-rename =
			?def
		; rules(AddWebDSLDefs :+= def)
	
	// emit a new section with all collected defs
	desugar-emit-all-defs =
			defs := <bagof-AddWebDSLDefs>
		; not([] := defs)
		; map(store-module-def)
		; rules(AddWebDSLDefs :- _) 	// hack to clear dr
		
rules // emit section
  
  emit-webdsl-section =
      declare-all
    ; rename-section
    ; ?sec
    ; rules(
        AddWebDSLSection :+ Application(qid, sections) -> Application(qid, [sec|sections])
      )
  
rules // emit builtins (during declare)
	
	add-builtin-rule = ?rule; rules(AddWebDSLRules :+= rule)
	
	add-builtins-to-ast =
			bagof-AddWebDSLDefs
		; map(rename-top; store-module-def)
		; !AccessControlDefinition(None(), <bagof-AddWebDSLRules; map(rename-top)>)
		; store-module-def
		; rules(AddWebDSLDefs :- _)
    ; rules(AddWebDSLRules :- _)
	
	/*
	get-builtin-sections: _ -> [defsec,rulesec]
    with  defsec := Section("builtins", <bagof-AddWebDSLDefs; map(rename-toplevel)>)
        ; rulesec := AccessControlDefinition(None(), <bagof-AddWebDSLRules; map(rename-toplevel)>)
        ; rules(AddWebDSLDefs :- _)
        ; rules(AddWebDSLRules :- _)
	*/