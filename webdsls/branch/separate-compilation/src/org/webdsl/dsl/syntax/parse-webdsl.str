/**
 * Parsing WebDSL web application definitions.
 */

module org/webdsl/dsl/syntax/parse-webdsl

imports
  libstratego-lib
  libstratego-sglr
  org/webdsl/dsl/utils/-

signature
  constructors
    At : File * Row * Column -> Location

/**
 * Main parsing strategies.
 */
strategies

  xtc-parse-webdsl =
    xtc-ensure-file;
    where(id
      ; path := <path-of-xtc-file>
      ; (appname, _) := <split-before> (path, ".app")
    )
    ; xtc-parse-webdsl-unit(|path)
  
  implode-with-location-annos(|path) =
    asfix-anno-location
  ; implode-asfix
  ; topdown(
        try(\t {Location(r, c, _, _)} -> t {At(path, r, c)}\)
      )
  
  path-to-cache-path =
      ?path
    ; <concat-strings> [<DirName>,"/.webdsl-parsecache/",<trim-initial-dots-slashes> path,".parsecache"]
  
  xtc-parse-webdsl-unit(|path) =
  	  ?file
    ; if <file-exists> path
      then
      	<parse-file-try-cache(|path)> file
      else
        <debug> "File does not exist: "
      ; <trim-initial-dots-slashes;debug> path
      ; <exit> 1
      end
      
  // (from spoofax' lib/editor-common.generated)
  is-newer:
    (file1, file2) -> <id>
    where
      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
      
  parse-file-try-cache(|filename): file -> content
    with  cachepath := <path-to-cache-path> filename
        ; dirs := <dirname; string-tokenize(|['/'])> cachepath
        ; <create-dirs> dirs
        ; if cached-content := <parse-file-with-cache(|filename,cachepath)> filename then
            rules(CachedVersion : filename -> cached-content)
          end
        ; if <CachedFile> filename then
            content := cached-content
          else
            // no cache, or outdated
            content := <parse-file-without-cache(|filename,cachepath)> file
          end
         
  parse-file-with-cache(|filename,cache): file -> content
    where <file-exists> cache;
          (webdsl-version, cache-content) := <read-file> cache;
          <eq> (webdsl-version, <get-webdsl-version>)
    with  content := cache-content;
          if <is-newer> (cache, filename) then
            rules(CachedFile : filename)
          end
          
  parse-file-without-cache(|filename,cache): file -> content
    with  <debug(!"Parsing: ")> filename; 
          content := <parse-webdsl-file(|filename,cache)> file;
          check-for-ambiguities(|filename);
          rules(LoadedFile : filename)

	parse-webdsl-file(|path,cachepath) =
	   with(tbl := <get-webdsl-parse-table>)
	 ; ( parse-xtc-file-pt(err(|["cannot open file ", <trim-initial-dots-slashes> path]), strsglr-report-parse-error | tbl, "Unit", path) 
     <+ not(is-verbose-2); <exit> 1 
   )
   ; implode-with-location-annos(|path)
   ; try(simplify-application-constructor)
   ; try(simplify-module-constructor)
          
   
  parse-and-write-cache(|path,cachepath) =
   	 parse-webdsl-file(|path,cachepath)
   ; where(
       <WriteToBinaryFile> (cachepath,<id>)
     )

  xtc-parse-webdsl-unit-override(|path) =
    fail // may be overridden externally

  simplify-module-constructor :
    ModuleDefs(qid, defs, sections) -> Module(qid, [Section("definitions", defs)|sections])

	simplify-application-constructor :
    ApplicationDefs(qid, defs, sections) -> Application(qid, [Section("definitions", defs)|sections])

  /**
   * @type String -> ParseTree(sort)
   */
  parse-webdsl-string-pt =
    where(tbl := <get-webdsl-parse-table>)
    ; parse-string-pt(strsglr-report-parse-error | tbl, "Unit", "string")
    ; implode-with-location-annos(|"")

  /**
   * Returns an open parse table for the given sort.
   *
   * @type Sort -> OpenParseTable
   */
  get-webdsl-parse-table =
    <jfr-memo-open-parse-table(import-term(WebDSL.tbl))> "WebDSL.tbl"
    
  //report amb terms  
  check-for-ambiguities(|path) = 
    if collect(?amb(_)) => [_ | _] => ambs then
      !ambs
    ; map(strip-annos; pp-aterm(|"Ambiguities found during parsing of ",path))
    ; fatal-err-msg(|["Internal error - ambiguities found in module ", path])
    end
   
