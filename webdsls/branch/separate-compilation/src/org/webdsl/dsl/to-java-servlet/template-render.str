module org/webdsl/dsl/to-java-servlet/template-render

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules

  GenerateCodeJavaServlet = log-time(render-java-servlet-template|"render-java-servlet-template"); fail
  
  render-java-servlet-template =
    ?def@def |[ define mod* x(farg*)  req*  { elem* } ]|
    ; with(
        elemfiltered* := <filter-elements-for-java-servlet-handling> elem* //removes local defines
        ; {| CurrentTemplateRender:
            rules(CurrentTemplateRender := def)
          ; bstm1* := <elems-to-java-servlet> elemfiltered*
          |}
      )
    ; with(
        if where(<fetch(ValidatesRefArgs)> mod*) 
        then bstm_validated* := <render-error-messages-with-error-template(|java:expr|[ this.getUniqueId() ]|,<ErrorTemplateInput>)> bstm1*
        else bstm_validated* := bstm1* end
      )
    ; with(
        <generate-java-servlet-template-partial> 
        java |[ 
            @Partial
            protected void renderInternal()
            {
              ~*<java-servlet-template-phase-inits>
              
              bstm_validated*
            }
        ]|
      )
      
  java-servlet-template-phase-inits =
    ! bstm* |[
      String ident = "";
      String forelementcounter = "0";
      int fallbackcounter = 0;      
      boolean inForLoop=false;
      int forLoopCounter = 0;
      PrintWriter out = ThreadLocalOut.peek();
    ]|
 
//coming from elements to xhtml
strategies // lists of elements

  elems-to-java-servlet = //filter because other non-visible stuff is in there like vardecl
    filter(elem-to-java-servlet <+ undefined-template-call)
    ; concat-with-sublists //accept both bstm and bstm*
  
  elems-to-java-servlet :   
    TemplateBody(elems) -> <elems-to-java-servlet> elems
    
  undefined-template-call :
    t@TemplateCall(f, args,passign*, body) -> []
    where log(|Warning(), ["no definition for template ", t])
        ; try(CurrentTemplateRender)
        ; fatal-err(|"error occured in following template")

