module org/webdsl/dsl/to-java-servlet/types/file

imports 
  libstrategolib 
  Java-15 
  libjava-front 
  
imports 
  libwebdsl-front

rules  

  builtin-java-type :
    SimpleSort("File") -> type|[ utils.File ]|

  //used in entity generation
  //hibernate has a built-in mapping for java.sql.Blob
  type-specific-annotations :
    Property(x_prop, k, s, annos) -> <file-specific-annotations>
    where <?SimpleSort("File")> s
    
  file-specific-annotations =
    ![ anno |[ @OneToOne(fetch = javax.persistence.FetchType.LAZY) ]|
     , anno |[ @org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.PERSIST, org.hibernate.annotations.CascadeType.SAVE_UPDATE, org.hibernate.annotations.CascadeType.MERGE}) ]|
     ]
 
rules
    
  java-servlet-element-id :
    tc@DownloadLink(_,_,_){anno*} -> tc{ActionNumber(newid),anno*} 
    where  newid := <newname> "action"
    
rules
  
  java-servlet-element-id : 
    tc@elem|[ inputFile(e)[passign*]{elem*} ]| -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
        ; newid := <newname> "input"

  requires-multipart-encoded-form = ?TemplateCall("inputFile",_,_,_) //?elem|[inputFile(e)[passign*]{}]|
  
  handle-actions-input-to-java-servlet :
    tc@elem|[ inputFile(e)[passign*]{elem*} ]| ->
    <wrap-input-java-code(|passign*)>
    bstm*|[
      ident += "~inputident"+uniqueid;
      if (   ThreadLocalPage.get().getFileUploads().get(ident)!=null 
          && !ThreadLocalPage.get().getFileUploads().get(ident).getFileName().equals("")) {
        ~*<wrap-validation-context-code-store-inputs> bstm*|[
         utils.File x_temp = ThreadLocalPage.get().getFileUploads().get(ident);
         bstm* 
       ]|
      }
    ]|
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; bstm* := <input-assignment-to-java-servlet(|x_temp)> e
    
  elem-to-java-servlet : 
    tc@elem|[ inputFile(e)[passign*]{elem*} ]| ->
    <wrap-input-render-java-code>
    bstm* |[ 
      ThreadLocalPage.get().formRequiresMultipartEnc = true; //make sure the form gets multipart encoding, see uicomponents/form.str
      String x_temp = ident+"~inputident"+uniqueid;
      ~*<render-error-messages-with-error-template(|java:expr|[ x_temp ]|,<ErrorTemplateInput>)> bstm*|[
        out.print("<input name=\""+x_temp+"\" type=\"file\""+e_attrs1);
        ~*<connect-with-enclosing-label>
        out.print("/>"); 
      ]| 
    ]|
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs(|"inputFile")> passign*
        
  data-validation-to-java-servlet : 
    tc@elem|[ inputFile(e)[passign*]{elem*} ]| -> result
    with  result := <validation-context-wrapper-for-input(data-validation-to-java-servlet)> tc        
        
  //outputFile is already desugared, see modules/types/file.str
 
  //for downloading files, a modified action call is used
   
   elem-to-java-servlet :
    tc@DownloadLink(e3@ActionCall(name, args),passign*,elem*) ->
    <wrap-input-render-java-code>
    bstm* |[ 
    ident += "~actionident"+uniqueid+e5;
    out.print("<a href=\"javascript:void(0)\" "+e_attrs1+" onclick='javascript:serverInvokeDownloadCompatible(\""+ThreadLocalServlet.getContextPath()+"/" + ThreadLocalPage.get().getActionTarget()  +"\",\""+ ident+"\", ["+ThreadLocalPage.get().getHiddenPostParamsJson()+"],\""+ThreadLocalPage.get().getFormIdent()+"\", this)' >");
    bstm*
    out.print("</a>");
    ]|
    with  bstm* := <elems-to-java-servlet> elem*
        ; actionident := <get-actionnumber> tc   
        ; e5 := <actual-action-args-to-state-enc> args
        ; e_attrs1 := <to-html-attrs(|"downloadlink")> passign*
        
  handle-actions-to-java-servlet: 
    tc@DownloadLink(e1,passign*,elem*) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
        ident += "~actionident"+uniqueid+e5;
        if(ThreadLocalPage.get().getParammap().get(ident)!=null ) // not necessary: && ThreadLocalPage.get().getParammap().get(ident).equals("1") )
        {
            x_action temp = (x_action)getAction("~x_action");
            temp.run(e*,ident);
        }
    ]|
    with  actionident := <get-actionnumber> tc   
        ; x_action := <?ActionCall(name,args);!name> e1
        ; <get-anno(?ActionFargAnno(fargcalled))> e1
        ; e* := <action-args-to-java-exp-list(|args,fargcalled)>
        ; e5 := <actual-action-args-to-state-enc> args   
    
rules //file download   
    
  call-to-java-servlet :
    exp  |[ e.download() ]| -> java |[ ThreadLocalPage.get().setDownload(e2) ]|
    where SimpleSort("File") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
      
  call-to-java-servlet :
    exp  |[ e.fileName() ]| -> java |[ e2.getFileName() ]|
    where SimpleSort("File") := <get-type-anno> e
    with  e2 := <expression-to-java-servlet> e
    