module org/webdsl/dsl/to-seam/data-validation-render

imports 
  libstrategolib  
  Java-15
  libjava-front 
  
imports 
  libwebdsl-front
  
rules

  /**
   *  term arguments:
   *    e_id: Java expression: unique identifier of the template element being validated, used to connect messages for rendering
   *    messagestemplate: WebDSL template: the (error) message template
   *  lhs:
   *    input_elements: Java statements: the template element being validated
   *
   */
  render-error-messages-with-error-template(|e_id,messagestemplate) :  
    input_elements -> 
    bstm* |[  
      java.util.List<String> x_list = new java.util.LinkedList<String>();
      java.util.List<utils.ValidationException> x = new java.util.LinkedList<utils.ValidationException>();
      for(utils.ValidationException ve : ThreadLocalPage.get().getValidationExceptions()){
        if(ve.getName() != null && ve.getName().equals(e_id)){
          x.add(ve);
        }
      }
      for(utils.ValidationException ve : x){
        x_list.add(ve.getErrorMessage());
        ThreadLocalPage.get().getValidationExceptions().remove(ve);
      }
      if(x_list.size() > 0){
        bstm_error*
      }
      else {
        bstm*
      }
    ]|
    with x_list := <newname> "messagesList"
       ; bstm_error* := <inline-error-template> (x_list,input_elements,messagestemplate)
       ; bstm* := input_elements
       ; x := <newname> "ve"
  /*
  render-error-messages-with-error-template :  
    (elem*,input_elements,messagestemplate) -> 
    bstm* |[  
      java.util.List<String> x_list = new java.util.LinkedList<String>();
      bstm_messages*
      if(x_list.size() > 0){
        bstm_error*
      }
      else {
        bstm*
      }
    ]|
    with x_list := <newname> "messagesList"
       ; bstm_messages* := <collect(validation-message-production(|x_list));concat-with-sublists> elem*
       ; bstm_error* := <inline-error-template> (x_list,input_elements,messagestemplate)
       ; bstm* := <elems-to-java-servlet> input_elements
*/
  /**
   *  x_list: Java variable: that will replace uses of messages argument
   *  input_elements: Java statements: will replace uses of elements template call
   *  messagestemplate: WebDSL template definition: the (error) message 
   *  ->
   *  bstm_error*: Java statements: code that produces the input_elements normally or wrapped in error template
   */
  inline-error-template :
    (x_list,input_elements,messagestemplate) -> bstm_error*
    with Define(mods, name,[Arg(nm,srt)], targs, body) := messagestemplate 
       ; body3 := <alltd(insert-input-fields-in-error-template(|input_elements))> body
       ; bstm_error* := <elems-to-java-servlet;alltd(inline-error-template-helper(|x_list))> body3

  inline-error-template-helper(|x_list) :
    ExprName(Id(x)) -> ExprName(Id(x_list))
    where "messages" := <get-original-name> x

  insert-input-fields-in-error-template(|input_elements) :
    TemplateCall("elements",a,b,c) -> TemplateCall("elements#validation#inlining",a,b,TemplateBody(input_elements))
  elem-to-java-servlet:
    TemplateCall("elements#validation#inlining",_,_,TemplateBody(input_elements)) -> input_elements

rules
  
  elem-to-java-servlet :
    RemoveMe() -> []

rules //TODO these are relevant for error messages not connected to inputs
         
  elem-to-java-servlet :
    tc@elem|[ validationErrorsForInput(e1)[passign*]{} ]| -> []
  elem-to-java-servlet :
    tc@elem|[ validationErrorsFor(e1)[passign*]{} ]| -> []
  elem-to-java-servlet :       
    ValidationErrors(x1) -> <with(debug(!"ValidationErrors in back-end");fail)> //<render-error-messages-with-error-template(|java:expr|[ "~x1" ]|, <ErrorTemplateForm>)> []

rules // add messages to list

  validation-message-production(|x_list) :
    tc@TemplateCall("validate",[e1,e2],passign*,_) -> 
    bstm* |[
      if(ThreadLocalPage.get().inSubmittedForm() && !e3){
        x_list.add(e4);
      }
    ]|
    with  e4 := <expression-to-java-servlet> e2
        ; e3 := <expression-to-java-servlet> e1
  
  validation-message-production(|x_list) :
    tc@elem|[ validationErrorsForInput(e)[passign*]{} ]| -> 
    //<for-loop-counter-wrap-code> 
    bstm* |[
      if(ThreadLocalPage.get().inSubmittedForm()){
        bstm*
      }
    ]|
    with  bstm* := <validation-message-production-helper(|x_list)> java:expr |[ ident + "~<pp-webdsl-to-string> e" ]|
/*        
  validation-message-production(|x_list) :
    tc@elem|[ validationErrorsFor(e1)[passign*]{} ]| -> 
    bstm* |[
      if(ThreadLocalPage.get().inSubmittedForm()){
        java.util.List<utils.ValidationException> x = new java.util.LinkedList<utils.ValidationException>();
        for(utils.ValidationException ve : ThreadLocalPage.get().getValidationExceptions()){
          Object x1 = ThreadLocalPage.get().getOldValuesForInputs().get(e3);
          if(ve.getName() == null && x1==null?ve.isRelevantObject(e3):ve.isRelevantObject(x1)){
            x.add(ve);
          }
        }
        for(utils.ValidationException ve : x){
          x_list.add(ve.getErrorMessage());
          ThreadLocalPage.get().getValidationExceptions().remove(ve);
        }
      }
    ]|
    with  e2 := <expression-to-java-servlet> e1
        ; if GenericSort(_,_) := <get-type-anno> e1 
          then e3 := java:expr |[ e2.hashCode() ]|
          else e3 := e2
          end
        ; x := <newname> "ve"
        ; x1 := <newname> "object"
*/ 
  validation-message-production(|x_list) : 
    ValidationErrors(x1) -> 
    <validation-message-production-helper(|x_list)> e
    with  e := java:expr |[ "~x1" ]|
    
  validation-message-production-helper(|x_list) : 
    e -> 
    bstm* |[
      java.util.List<utils.ValidationException> x = new java.util.LinkedList<utils.ValidationException>();
      for(utils.ValidationException ve : ThreadLocalPage.get().getValidationExceptions()){
        if(ve.getName() != null && ve.getName().equals(e)){
          x.add(ve);
        }
      }
      for(utils.ValidationException ve : x){
        x_list.add(ve.getErrorMessage());
        ThreadLocalPage.get().getValidationExceptions().remove(ve);
      }
    ]|
    with  x := <newname> "ve"  
      
  validation-message-production(|x_list) : 
    ValidationErrors() -> 
    bstm* |[
      for(utils.ValidationException ve : ThreadLocalPage.get().getValidationExceptions()){
        x_list.add(ve.getErrorMessage());
      }
      ThreadLocalPage.get().getValidationExceptions().clear();
    ]|

rules

  call-to-java-servlet :
    call@exp|[ getValidationErrorsByName(e) ]| -> java |[ utils.ThreadLocalPage.get().getValidationErrorsByName(e1) ]|
    with e1 := <expression-to-java-servlet> e    
    