module org/webdsl/dsl/to-java-servlet/ajax/html-utils

imports
  libstrategolib
  libjava-front

rules

  to-html-attrs(|classattr) :
    passign* -> java:expr|[" class=\""+"~classattr"+e_attrs2+"\" "+e_attrs1+" "]|
    with (e_attrs1, e_attrs2) := <to-html-attrs-separate-class> passign*

  to-html-attrs-separate-class :
    passign* -> (<to-html-attrs> noclass, class)
    with  noclass := <remove-all(?PropertyAssignment("class", _))> passign*
        ; class-attr-list := <filter(    ?PropertyAssignment("class", _)
                               ; (string-assignment-to-html-attr <+ expression-assignment-to-html-attr)
                               ; ?(_,<id>))> passign*
        ; class := <?[];!java:expr|[ "" ]| <+ ![java:expr|[" "]| |<id;separate-by(|java:expr|[" "]|)>]; generate-addition-exp> class-attr-list

  //rewrites a list of assignments to a list of attributes. It can be extended by adding alternatives
  //to the assignment-to-html-attr rules. Those rules are of the format PropertyAssignment(x, y) ->(Id, Java-Expression-Resulting-In-String)
  //author: Michel
  to-html-attrs :
    attrs -> attrs3
    with attrs1 := <generate-property-assignments> attrs
        ;attrs3 := <generate-addition-exp > attrs1

  generate-property-assignments=
    remove-all(exclude-from-property-assignment)
  ; map(convert-single-property-assignment-to-java-exp
        <+ convert-attribute-selectors-to-java-exp
        <+ fatal-err(|"Cannot convert propertyassignment: "))

  convert-single-property-assignment-to-java-exp =
  (  assignment-to-html-attr 
  <+ string-assignment-to-html-attr
  <+ expression-assignment-to-html-attr
  ); assignmentexp-to-html-attr
  
  exclude-from-property-assignment = TemplateCallPropertyAjax
    
  //final (private) conversion: converts a String assignment to html    
  assignmentexp-to-html-attr :
    (x, e_y) -> e |[ org.webdsl.tools.Utils.showAttributeEscapeHtml("~x",e_y) ]|
    
  //escape behaviour, when assignments cannot be converted with a useful strategy, test if its
  //a string and insert directly
  string-assignment-to-html-attr:
    PropertyAssignment(x, String(y)) -> (x, e|[ "~y"]|)  
    
  //object id attribute is accepted, and already a valid assignment
  assignment-to-html-attr :
    PropertyAssignment("id", y) -> ("id", e|[ "~y" ]| )
    where <is-string> y
  assignment-to-html-attr :
    PropertyAssignment("id", y1) -> ("id", y2 )
    where not(<is-string> y1)
    with  y2 := <expression-to-java-servlet> y1

  assignment-to-html-attr :
    PropertyAssignment("height", StyleValue(val, unit)) -> ("height", e|[ "~val"+"~unit" ]| )

  assignment-to-html-attr :
    PropertyAssignment("width", StyleValue(val, unit)) -> ("width", e|[ "~val"+"~unit" ]| )

    
  /*
  assignment-to-html-attr :
    PropertyAssignment("class", y) -> ("class", e|[ "~y" ]| )
    where not (PropertyValueList(_) := y)
    */
    
  assignment-to-html-attr :
    //concatenates a list of id's to a class attribute
    PropertyAssignment("class", y) -> ("class", e|[ e1 ]| )
    where PropertyValueList(x) := y
    with  e1 := <map(\q -> e|[ "~q" + " "]|\ ); generate-addition-exp> x
    
  assignment-to-html-attr : // hack (?) to deal with case PropertyAssignment("class","profileSidebar")
    PropertyAssignment("class", x) -> ("class", e|[ e1 ]| )
    where <is-string>x
    with  e1 := <\q -> e|[ "~q" ]|\> x
    
  assignment-to-html-attr : // hack (?) to deal with case PropertyAssignment("class",StyleValue("profileSidebar"))
    PropertyAssignment("class", StyleValue(x)) -> ("class", e|[ e1 ]| )
    where <is-string>x
    with  e1 := <\q -> e|[ "~q" ]|\> x
    
  expression-assignment-to-html-attr :
    PropertyAssignment(x, e) -> (x, e1)
    where e1 := <expression-to-java-servlet> e
    
  expression-assignment-to-html-attr :
    PropertyAssignment(x, e) -> (x, java:expr|[ "~e" ]|)
    where <is-string> e
    
  call-to-java-servlet :
    exp |[ baseURL() ]| -> expr |[ ThreadLocalServlet.getContextPath() ]|
