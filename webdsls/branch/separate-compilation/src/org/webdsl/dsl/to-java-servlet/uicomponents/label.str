module org/webdsl/dsl/to-java-servlet/uicomponents/label

imports
  libstrategolib

imports
  libwebdsl-front
  
rules 
  
  java-servlet-element-id :
    tc@TemplateCall("label", [arg],passign*, elem*)-> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"  
  
rules // label

  elem-to-java-servlet :
    tc@TemplateCall("label", [arg],passign*, elem*) ->
    <for-loop-counter-wrap-code> 
    <wrap-row-context-code>
    bstm* |[ 
      String x_labelname = e_id;
      ThreadLocalPage.get().enterLabelContext(x_labelname); // register name for input components inside label
      ~*<render-error-messages-with-error-template(|java:expr|[ x_labelname ]|,<ErrorTemplateInput>)> bstm*|[
        ~*<wrap-column-context-code;wrap-formgroup-left-context-code> bstm*|[ //special handling for labels, contents in next column
          out.print("<label for=\""+x_labelname+"\" "+e_attrs1+">");
          bstm_exptostring*
          out.print("</label>");
        ]|
        ~*<wrap-column-context-code;wrap-formgroup-right-context-code> bstm*|[ 
          bstm_elem*
        ]|
      ]|   
      ThreadLocalPage.get().leaveLabelContext();
    ]|
    with bstm_exptostring* := <to-page-string-java-servlet> arg
       ; e_attrs1 := <to-html-attrs> passign* 
       ; x_labelname := <newname> "label"
       ; inputident := <get-inputnumber> tc
       ; e_id := <id-encoding> inputident
       ; bstm_elem* := <elems-to-java-servlet> elem*
       
  handle-actions-input-to-java-servlet = validation-context-wrapper-for-label(handle-actions-input-to-java-servlet) 
  data-validation-to-java-servlet      = validation-context-wrapper-for-label(data-validation-to-java-servlet)       

  validation-context-wrapper-for-label(s) :
    tc@TemplateCall("label", [arg],passign*, TemplateBody(elem*)) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
      ident = e_id;
      ~*<?[] <+ wrap-validation-context-code-store-inputs> bstm* |[
        bstm* 
      ]|
    ]|
    with  inputident := <get-inputnumber> tc
        ; bstm* := <collect-om(s);concat-with-sublists> elem*
        ; e_id := <id-encoding> inputident
    
rules // to be included in input element translations

  connect-with-enclosing-label =
  ! bstm* |[
    if(ThreadLocalPage.get().inLabelContext()){
      out.print(" id=\""+ThreadLocalPage.get().getLabelString()+"\" ");
    }
  ]|
  
rules // same function as connect-with-enclosing-label, but for (built-in) defined templates
      
  call-to-java-servlet : 
    ThisCall("inLabelContext",[]) -> java |[ ThreadLocalPage.get().inLabelContext() ]|
    
  call-to-java-servlet : 
    ThisCall("getLabelString",[]) -> java |[ ThreadLocalPage.get().getLabelStringForTemplateContext(this.getUniqueId()) ]|
    