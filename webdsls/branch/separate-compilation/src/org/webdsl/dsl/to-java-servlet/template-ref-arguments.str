module org/webdsl/dsl/to-java-servlet/template-ref-arguments

imports
  libstratego-lib
  libjava-front
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
  org/webdsl/dsl/to-java-servlet/type-utils
  org/webdsl/dsl/to-java-servlet/java-code
  org/webdsl/dsl/to-java-servlet/emit-java-local
  org/webdsl/dsl/to-java-servlet/hibernate-util

rules

  handle-ref-arg =
    zip(create-assigns-for-ref-arg-helper <+ ?(_,<expression-to-java-servlet>)) //either put the ref arg exp as the result or keep the old arg exp

  //called from control-flow-to-java-servlet template call translation
  create-assigns-for-ref-arg=
    zip(create-assigns-for-ref-arg-helper <+ !None())
       
  /*generate-ref-arg-storage-class :
    e_webdsl -> x_refstorageclass
    where key := (<ThisTemplateName>,e_webdsl)
        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
*/
  generate-ref-arg-class-name : 
    (templatename,e_webdsl) -> <!["RefArg_",templatename];concat-strings;newname>
  
rules // case of template var      

  //for passing on refarg don't use regular expression translation, since it will add a call to `get`    
  create-assigns-for-ref-arg-helper = pass-on-ref-arg
    
  pass-on-ref-arg :
    (Arg(_,RefSort(_)), e_webdsl@Var(x)) -> e|[ x ]|
    where <has-ref-type> e_webdsl
    
  create-assigns-for-ref-arg-helper :
    (Arg(_,RefSort(_)), e_webdsl@Var(_)) -> e|[ new x_refstorageclass(e_this) ]| //`this` is the template class
    where not(<has-ref-type> e_webdsl)
    with  if x_tclass := <ThisTemplateClassName> 
          then e_this := java:expr|[ x_tclass.this ]| //avoid `this` issue when call occurs in an inner class, e.g. used for actions
          else e_this := java:expr|[ this ]| end
    with  x_refstorageclass := <generate-ref-arg-storage-class-template-var> e_webdsl
      
  generate-ref-arg-storage-class-template-var :
    e_webdsl@Var(_) -> x_refstorageclass
    where key := (<ThisTemplateName>,e_webdsl)
        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
          
  generate-ref-arg-storage-class-template-var :
    e_webdsl@Var(_) -> x_refstorageclass
    where key := (<ThisTemplateName>,e_webdsl)
        ; not(<GeneratedRefArgStorageClass> key)
    with  srt_webdsltype := <get-type-anno> e_webdsl
        ; x_type := <java-type-name> srt_webdsltype 
        ; e_webdsl2 := <wrap-exp-in-fieldaccess(|"template")> e_webdsl
        ; e_java := <expression-to-java-servlet> e_webdsl2
        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl2,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype))){DirectCollectionReplace()}
        ; pkgname2 := <DomainPackage>
        ; pkgname3 := <BeanPackage>
        ; x_class := <ThisTemplateClassName>
        ; x_refstorageclass := <generate-ref-arg-class-name> key
        ; <emit-java-code-local>
            compilation-unit|[
              package pkgname3;
              import pkgname2.*;
              public class x_refstorageclass implements utils.RefArg{
                public x_class template;
                public x_refstorageclass(x_class templ){
                  this.template = templ;
                }
                public Object set(Object obj){
                  bstm
                  return this;
                }
                public Object get(){
                  return e_java;
                }
                public void load(String uuid){}//not used for this case
                public org.webdsl.WebDSLEntity getEntity(){return null;}
                public String get_WebDslEntityType(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
                public String getUrlString(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
                  //no property validation necessary for this type of ref arg
                }
              }
            ]|
        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
    
  create-webdsl-dummy-var : //construct the var with annotations so it can be translated by exp/stm-to-java
    x -> Var(x{OriginalNameAnno(x{x})}){TypeAnno(SimpleSort("Object"))}
  
  wrap-exp-in-fieldaccess(|name):
    Var(x){anno*} -> FieldAccess(<create-webdsl-dummy-var> name,x){anno*}
  wrap-exp-in-fieldaccess(|name):
    FieldAccess(exp,ident) -> FieldAccess(<wrap-exp-in-fieldaccess(|name)> exp, ident)
/*
rules //case of object field access
    
  create-assigns-for-ref-arg-helper :
    (Arg(_,RefSort(_)), e_webdsl@FieldAccess(e_obj,f)) -> e|[ new x_refstorageclass(e_javaobj) ]|
    where not(<has-ref-type> e_webdsl)
    with  x_refstorageclass := <generate-ref-arg-storage-class> e_webdsl
        ; e_java := <expression-to-java-servlet> e_webdsl
        ; e_javaobj := <expression-to-java-servlet> e_obj
  */
rules //object field access, page specific rules 
  
  create-assigns-for-ref-arg-helper-page-ref-arg = pass-on-ref-arg

  create-assigns-for-ref-arg-helper-page-ref-arg :
    (Arg(_,RefSort(farg_type)), e_webdsl@FieldAccess(e_obj,f)) -> e|[ e_javaobj.getId()+"!"+"~classname" ]|
    where not(<has-ref-type> e_webdsl) 
    with  classnamefirst := <get-refargclassname-first> e_webdsl
        ; classnamesecond := <get-refargclassname-second> e_webdsl
        ; classname := <concat-strings> [classnamefirst, classnamesecond]
        ; <try(generate-ref-arg-storage-class(|classname,farg_type))> e_webdsl
        ; e_javaobj := <expression-to-java-servlet> e_obj

rules //case of object field access, regular and ajax template
         
  create-assigns-for-ref-arg-helper :
    (Arg(_,RefSort(farg_type)), e_webdsl@FieldAccess(e_obj,f)) -> e|[ new x_classname(e_javaobj) ]| 
    where not(<has-ref-type> e_webdsl)
    with  classnamefirst := <get-refargclassname-first> e_webdsl
        ; classnamesecond := <get-refargclassname-second> e_webdsl
        ; x_classname := <concat-strings> [classnamefirst, classnamesecond]
        ; <try(generate-ref-arg-storage-class(|x_classname,farg_type))> e_webdsl
        ; e_javaobj := <expression-to-java-servlet> e_obj
        /* 
  generate-ref-arg-storage-class :
    e_webdsl@FieldAccess(e_object,f) -> x_refstorageclass
    with  key := (<ThisTemplateName>,e_webdsl)
        ; x_refstorageclass := <generate-ref-arg-class-name> key
        ; <generate-ref-arg-storage-class(|x_refstorageclass)> e_webdsl
    */
rules //general rules for creating ref arg class 
    
  generate-ref-arg-storage-class(|x_refstorageclass,farg_type) :
    e_webdsl@FieldAccess(e_object,f) -> x_refstorageclass
    where key := (<ThisTemplateName>,e_webdsl)
        ; not(<GeneratedRefArgStorageClass> key)
    with  srt_webdsltype := <get-type-anno> e_webdsl
        ; x_type := <java-type-name> srt_webdsltype
        ; if not(SimpleSort(x_webdslsrtname) := srt_webdsltype) then x_webdslsrtname := "not an entity type" end  
        ; e_java := <expression-to-java-servlet> e_webdsl
        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype)))
        ; pkgname2 := <DomainPackage>
        ; pkgname3 := <BeanPackage>
        ; x_class := <get-type-anno;java-type-name> e_object
        ; (<?Var(x_name)> e_object <+ x_name := <newname> "obj")
        //;(classnamesecond := <get-refargclassname-second> e_webdsl <+ classnamesecond := "")
        ; x_domain := <pp-java5-to-string> <DomainPackage>
        ; x_validatefunction := <get-internal-validate-func-name-int(|f)>
        ; <emit-java-code-local>
            compilation-unit|[
              package pkgname3;
              import pkgname2.*;
              import utils.*;
              public class x_refstorageclass implements utils.RefArg{
                public x_class x_name;
                public x_refstorageclass(){//used for page and ajax args
                }
                public x_refstorageclass(Object x_name){
                  this.x_name = (x_class) x_name;
                }
                public x_class set(Object obj){
                  bstm
                  return x_name;
                }
                public Object get(){
                  return (x_type) e_java;
                }
                public void load(String uuid){//used for page and ajax args
                  if(uuid.contains(":")){ //used for page and ajax args, and argument type "Entity"
                    x_name = (x_class) utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",uuid); 
                  }
                  else{
                    try { 
                      Class<?> cl = org.hibernate.util.ReflectHelper.classForName("~x_class");
                      x_name = (x_class) e_HibSession.load(cl, java.util.UUID.fromString(uuid));
                    } 
                    catch (ClassNotFoundException cnfe) { 
                      throw new RuntimeException(cnfe); 
                    } 
                  }
                }
                public String getUrlString(){
                  return x_name.getId()+"!"+"~x_refstorageclass";
                }
                // only called when the type is defined Entity
                public String get_WebDslEntityType(){
                  if(get() == null){ //so it can be used to determine what kind of entity to load in loadEntity
                    return "~x_webdslsrtname";
                  }
                  else{
                    return ((org.webdsl.WebDSLEntity)get()).get_WebDslEntityType();
                  }
                }
                public org.webdsl.WebDSLEntity getEntity(){
                  return x_name;
                }
                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
                  x_domain.ValidationExceptionMultiple vem = new x_domain.ValidationExceptionMultiple();
                  x_name.x_validatefunction#_(vem);
                  for(x_domain.ValidationException v : vem.getExceptions()){
                    exceptions.add(new utils.ValidationException(location,v.getMessage()));
                  }
                }
              }
            ]|
        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
          
  
rules
  
  call-to-java-servlet : 
    Call(a,"getEntity",[]) -> java |[ x_refvar.getEntity() ]|
    where <has-ref-type> a
    with  Var(x_refvar) := a
    