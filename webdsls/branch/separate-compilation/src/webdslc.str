module webdslc

imports
  libstratego-lib
  libjava-front
  libstratego-sglr
  libstratego-tool-doc
  libstratego-xtc
imports
  libwebdsl-generator
  libwebdsl-front
  libto-java-servlet
  libwrite-files
  libjava-transformations
  libback-end-transformations
  libsepcomp
  
// inspiration:
// https://svn.cs.uu.nl:12443/repos/StrategoXT/java-front/trunk/tools/parse-java.str
// https://svn.cs.uu.nl:12443/repos/StrategoXT/dryad/trunk/compiler/main/dryad-front.str
// https://svn.cs.uu.nl:12443/repos/StrategoXT/dryad/trunk/tools/class2aterm.str

// ? xtc-multi-io-wrap

strategies

  webdslc-main =
    set-default-config
    ; xtc-io-wrap(
        webdslc-options
      , webdslc-usage
      , webdslc-about
      , ![] // xtc dependencies
      , xtc-webdslc; <exit> 0
    )
    
  xtc-webdslc = id
      ; if WebDSLShowVersion then get-webdsl-version; debug(!"WebDSL version: "); <exit> 0 end
      ; set-appname-and-dirs
      ; stage(with(read-webdsl-application) | "reading modified files")
        // TODO: print source tree
      ; try(where(
          DebugPrintSourceTree
        ; get-all-toplevel-definitions
        ; pp-aterm(!"Modified source AST: ")
        ; debug)
       )
      ; dsl-to-core-analysis
      
      ; {| CreatedRules:
          with-rule-resolving(
		        transform-defs-tracked(add-backend-annotations)
		      ; stage(rename-identifiers-top|"renaming identifiers")
		      ; ast := <get-global-ast>
          )
        ; stage(save-desugar-rules | "save dependencies")
        |}
      ; clean-rule-tracking
                  
      ; try(where(
            DebugPrintBackendTree
          ; get-all-toplevel-definitions
          ; pp-aterm(!"Application AST:")
          ; debug))
        // clean dynamic rules
      ; try(dr-scope-all-end)
      ; dr-scope-all-start
        // BACKEND START
      ; stage(
            <load-global-ast> ast
          ; back-end-transformations
          | "generation analysis")
      ; stage(
            if JavaServletBackend then
              where(java-package-name-for-generated-code := Qualified("webdsl","generated"))
              ; core-to-java-servlet(|java-package-name-for-generated-code)
            else
              print-total-log-time
            ; <fatal-error> ["\n", "No backend specified. Use --servlet for the Java servlet backend."]
            end
        |"code generation")
      ; stage(
            filenames := 
              <where(CachingEnabled); output-generated-files-caching
               <+ output-generated-files>
          ; where([] := filenames <+ <verbose-msg-newline> ["Written: ", filenames])
          |"writing files")
		    /*
      ; if CachingEnabled then
            cleanup-generated-files
          ; prune-fragment-dir
        end
    		*/
      ; print-total-log-time
     

  output-generated-files-caching = filter(cache-aux-file(file-to-filename, output-generated-file))
  