module statements

imports include/nwl
imports utils
imports parameters
imports entities
imports expressions

rules

  is-lvalue = 
    ?Var(_) <+ ?PropertyAccess(_, _)
    
//rules
  
  // rename :
    // For(x, t, e1, stat1*) -> For(y, t, e2, stat2*)
    // with e2 := <rename-all> e1
    // with {| RenameId 
          // : y := <rename-var>(x, t)
          // ; stat2* := <rename-all> stat1*
          // |}
//rules
  
  // check :
    // Assign(e1, e2) -> (e1, $[Left-hand side of assignment should be variable or property access])
    // where require(<is-lvalue> e1)

  //check :
    // Assign(e1, e2) -> (<id>, $[Type of lhs ('[<pp>t1]') does not match type of rhs ('[<pp>t2]')])
    // where t1 := <type-of>e1
    // where t2 := <type-of>e2
    // where require(<eq>(t1, t2))

  //check :
    // For(x, t, e, elem*) -> (e, $[[<pp>SetType(t)] expected])
    // where t2 := <type-of> e
    // where require(<eq>(t2,SetType(t)))
    
  //check :
    // While(e, b) -> (e, $[Expression should have type Bool])
    // where t := <type-of> e
    // where require(!t => SimpleType("Bool"))
 
  //check :
    // If(e, b1, b2) -> (e, $[Expression should have type Bool])
    // where t := <type-of> e
    // where require(!t => SimpleType("Bool"))
    
//rules
  

  //normalize :
    // For(x, t, e, b) -> 
    // Block([
      // Stat(VarDeclInit(i, SimpleType("Int"), IntLit("0"))),
      // Stat(VarDeclInit(c, SimpleType("Dummy"), e)),
      // Stat(VarDeclInit(l, SimpleType("Int"), BinOp(MethodCall(Var(c), "length", []), "-", IntLit("1")))),
      // While(BinOp(Var(i), "<", Var(l)), Block([
        // Stat(VarDeclInit(x, t, IndexAccess(Var(c), Var(i)))),
        // b,
        // Assign(Var(i), BinOp(Var(i), "+", IntLit("1")))
      // ]))
    // ])
    // where i := <newname> "i";
          // c := <newname> "c";
          // l := <newname> "l"
          
  // normalize :
    // Block([Block(stat*)]) -> Block(stat*)
