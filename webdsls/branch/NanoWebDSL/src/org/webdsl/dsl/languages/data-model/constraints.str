module org/webdsl/dsl/languages/data-model/constraints

imports
  libstrategolib

imports
  libwebdsl-front

rules

  constraint-error-data :
    Application(nm, sections) -> <add-error(|["Entities ", ent*, " are defined multiple times."])>
    where entities := <collect(?Entity(_, _, _, _)); map(\ Entity(nm, _, _, _) -> nm \)> sections
        ; ent* := <find-doubles> entities
        ; not([] := ent*)
    
  constraint-error-data :
    Application(nm, sections) -> <add-error(|["Entities ", ent*, " are defined multiple times."])>
    where entities := <collect(?EntityNoSuper(_, _, _)); map(\ EntityNoSuper(nm, _, _) -> nm \)> sections
        ; ent* := <find-doubles> entities
        ; not([] := ent*)

  // check for double properties and functions within entities
  constraint-error-data =
    (?Entity(x_id, _, properties, functions) <+ ?EntityNoSuper(x_id, properties, functions))
    ; names := <map(entity-get-propfunc)> properties
    ; doubles := <find-doubles> names
    ; not([] := doubles)
    ; <add-error(|["Properties are defined multiple times - ", <separate-by(|", "); concat-strings> doubles])> x_id
  
  constraint-error-data =
    (?ent@Entity(x_id, _, properties, functions) <+ ?ent@EntityNoSuper(x_id, properties, functions))
    ; names := <concat> [<map(entity-get-propfunc)> properties, <map(entity-get-propfunc)> functions]
    ; fail

  entity-get-propfunc : Property(x_id, _, _, _) -> x_id
  entity-get-propfunc : PropertyNoAnno(x_id, _, _) -> x_id

  constraint-error-data :
    Entity(x_class, s, _, _) -> <add-error(|["Super entity ", <pp-webdsl> s, " for ", x_class, " does not exist."])>
    where not(<typecheck-supertype> s)

  typecheck-supertype =
    ?s
    ; if not(IsEntity <+ ?"Object") then
        add-error(|["supertype ", s, " is not a defined entity"])
      end

  constraint-error-data =
    (  ?Property(x, propkind, srt, _)
    <+ ?PropertyNoAnno(x, propkind, srt))
    ; where(
           check-no-null-attribute(|x, srt)          // check for wrong attribute types
        <+ check-no-void-attribute(|x, srt) 
        <+ check-simple-propkind(|propkind, srt)    // check for incompatible propkinds, such as :: Set<User> (which should be -> Set<User>)
        <+ check-complex-propkind(|propkind, srt) 
      )
  
  check-no-null-attribute(|x, srt) :
    _ -> <add-error(|["Attribute type Null is not allowed in attribute ", <pp-webdsl> x])>
    where srt := SimpleSort("Null")

  check-no-void-attribute(|x, srt) :
    _ -> <add-error(|["Attribute type Void is not allowed in attribute ", <pp-webdsl> x])>
    where srt := SimpleSort("Void")
    
  check-simple-propkind(|propkind, srt) :
    _ -> <add-error(|["Expected: Simple type. Encountered: ", <pp-webdsl> srt])>
    where not(<is-simple-sort> srt)
        ; Simple() := propkind

  check-complex-propkind(|propkind, srt) :
    _ -> <add-error(|["Expected: Reference type. Encountered: ", <pp-webdsl> srt])>
    where <?Ref()> propkind
        ; <is-simple-sort> srt
    
  check-complex-propkind(|propkind, srt) :
    _ -> <add-error(|["Property type ", <pp-webdsl> SimpleSort(s), " unknown"])>
    where <?Ref()> propkind
        ; <?SimpleSort(s) <+ ?GenericSort(_, [SimpleSort(s)])> srt
        ; not(<is-webdsl-type> SimpleSort(s))
      
