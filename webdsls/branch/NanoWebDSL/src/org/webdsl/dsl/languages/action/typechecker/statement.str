module org/webdsl/dsl/languages/action/typechecker/statement

imports
  libstrategolib

imports
  libwebdsl-front

rules // Utilities for typechecking Qualifieds

  translate-qualified :
    Qualified(l, r) -> FieldAccess(l2, r)
    where l2 := <translate-qualified> l

  translate-qualified =
    ?Var(_)

  translate-qualified =
    not(?Qualified(_, _) <+ ?Var(_))
    ; !Var(<id>)

rules 

  is-constant-type = 
    ?SimpleSort("Int")
    <+ ?SimpleSort("Float")
    <+ ?SimpleSort("String")

rules // typechecking statements

  constraint-error-action :
    Stat(Assignment(qid, e)) -> <add-error(|["invalid left-hand side in assignment: ", <pp-webdsl> qid])>
    where not(<translate-qualified;type-of> qid)

  constraint-error-action :
    Stat(Assignment(qid, e)) -> <add-error(|["invalid right-hand side in assignment: ", e])>
    where not(<type-of> e)

  constraint-error-action :
    Stat(Assignment(qid, e)) -> <add-error(|["expression ", e, " cannot be assigned to ", <pp-webdsl> qid, " due to type-incompatibility."])>
    where not(<type-compatible> (<translate-qualified; type-of> qid, <type-of> e))

  constraint-error-action =
    (?If(e, bif, belse) + ?IfNoElse(e, bif))
    ; not(SimpleSort("Bool") := <type-of> e)
    ; add-error(|["expression ", <pp-webdsl> e, " should be of type Bool"])

  constraint-error-action =
    ?WhileStmt(e, b)
    ; not(SimpleSort("Bool") := <type-of> e)
    ; add-error(|["expression ", <pp-webdsl> e, " should be of type Bool"])

  constraint-error-action :
    Case(e, alt*) -> <add-error(|["case expression should have value type instead of ", t])>
    where t := <type-of> e
  ; not(<is-constant-type> t)

  constraint-error-action :
    s@Case(e, alt*) -> s
    where t := <type-of> e
  ; not(<filter(constraint-error-case-alt(|t))> alt* => [])

  constraint-error-case-alt(|t1) :
    s@CaseAlt(e, alt*) -> <add-error(|["constant in case alternative ", e, 
                         " should have same type as case expression ", t1])>
    where t2 := <type-of> e
        ; not(<type-compatible>(t1,t2))
        
  constraint-error-action :
    VarDecl(x, srt) -> <add-error(|["No such type ", <pp-webdsl> srt])>
    where not(<type-exists> srt) //not(<java-type> srt <+ GenericSort("EntityTypeNamed", _) := srt)

  constraint-error-action :
    VarDeclInit(x, srt, e) -> <add-error(|["No such type ", <pp-webdsl> srt])>
    where not(<type-exists> srt) //not(<java-type> srt <+ GenericSort("EntityTypeNamed", _) := srt)
    
  constraint-error-action :
    VarDeclInit(x, srt, e) -> <add-error(|["Expression ", e, " is not of type ", srt])>
    where not(<type-compatible> (srt, <type-of> e))
