module org/webdsl/dsl/languages/ui/templatecall

/**
 *  Rename and constraints on template calls. All template call variants are covered here.
 *  A new name for defined templates is stored in a dynamic rule, to cope with overloading.
 *  When a tcall calls a defined template the new name is stored in a dynamic rule which can be accessed using the renamed tcall name.
 *  This new name is applied in the rename-identifiers phase.
 */


rules //rename rule for each templatecall variant
            
  rename-ui :
    tc@TemplateCall(x1, arg1*, elem1*) 
    -> TemplateCall(x2, arg2*, elem2*)
    with  arg2*     := <rename-all> arg1*
        ; elem2*    := <rename-all> elem1*    
        ; x2 := <resolve-template-call-name> (x1,arg2*)
   
  rename-ui :
    tc@TemplateCallNoBody(x1, arg1*) 
    -> TemplateCallNoBody(x2, arg2*)
    with  arg2* := <rename-all> arg1*
        ; x2 := <resolve-template-call-name> (x1,arg2*)
        
  rename-ui : 
    tc@TemplateCallNoArgs(x1) 
    -> TemplateCallNoArgs(x2)
    with  x2 := <resolve-template-call-name> (x1,[])
  
  rename-ui : 
    tc@TemplateCallBody(x1, elem1*) 
    -> TemplateCallBody(x2, elem2*)
    with  elem2* := <rename-all> elem1*
        ; x2 := <resolve-template-call-name> (x1,[])

rules //template call either refers to a defined template, or to a built-in template, otherwise it is an error

  resolve-template-call-name :
    (x,arg*) -> x1
    with  x1 := x{<newname> x}
        ; if not(InTypeCheckingPhase) then with(<map(type-of)> arg*) end //extra check in case model-to-model produces bad code
        ; !(x1,arg*)
        ; (  rename-template-call-name-defined
           <+rename-template-call-name-builtin
           <+rename-template-call-name-error
          )

  rename-template-call-name-defined : 
    (x,arg*) -> x
    where xsa := <strip-annos> x
        ; name := <resolve-overloaded-template> (xsa,arg*,x) 
    with  rules ( CallToDefinedTemplate : x -> name )     

  rename-template-call-name-builtin :
    (x,arg*) -> x
    where t* := <map(type-of)> arg*
        ; xsa := <strip-annos> x
        ; <CompatibleWithBuiltInTemplate> (xsa,t*)
    with  rules ( CallToBuiltInTemplate : x )
  
  rename-template-call-name-error : 
    (x,arg*) -> x
    with  rules ( IncorrectTemplateCall : x )
        ; if not(InTypeCheckingPhase) then //if no longer typechecking this is an error in the compiler
            <debug> "Error found during compilation: template call is not valid: "
          ; <debug> (x,arg*)
          ; <exit> 1
          end
     
  /**
   *  overloading resolution for template calls, resolved during rename
   *  template arguments needs explicit types no overloading resolution there
   *  x:strip-annos name
   *  arg* : farglist
   *  x1 : name with anno
   */
  resolve-overloaded-template :
  (x,arg*,x1) -> name
  where templates := <bagof-TopLevelTemplateArguments> x
      ; t_target := <map(type-of)> arg* 
      ; resolvedarg* := <find-most-specific-signature(|t_target,x1)> templates
      //each template is renamed for overloading, the arg types are appended to the name:
      ; name := <TemplateNewName>(x,resolvedarg*)     

strategies

/*
  //given a list of property assignmenst and a corresponding templatecall, it declares HtmlEntityId if a "id" property exists
  declare-template-html-id(|tc) =
     all({x, y : 
         ?PropertyAssignment("id", x) ;rules( HtmlEntityId :+ x -> tc )
         <+ !"something" //build something
         })
*/

rules // using page as template produces warning; tested in fail/pageastemplate.app

  constraint-error-page-as-template(|p) :
    x -> <add-error(|["Cannot use page as template: ",<pp-webdsl> p])>
    where <strip-annos;IsPage> p
  
  //not all templatecall variants can be calls to defined templates    
  constraint-error-tc = ?tc@TemplateCallNoBody(p,_)       ;where(<constraint-error-page-as-template(|p)> tc)
  constraint-error-ui = ?tc@TemplateCall(p,_,_)  ;where(<constraint-error-page-as-template(|p)> tc) //has a body

rules //template not defined

  constraint-error-template-not-defined(|p,arg*) :
    x -> <add-error(|err*)>
    where try(constraint-error-tc) // hook for extra checks on templates, such as navigate
        ; <IncorrectTemplateCall> p
        ; if <ErrorDuringOverloadResolution> p
          then err* := <ErrorDuringOverloadResolution>
          else err* := ["Template with this signature not defined "] end
    
  constraint-error-ui = ?tc@TemplateCallNoBody(p,arg*)       ;where(<constraint-error-template-not-defined(|p,arg*)> tc)
  constraint-error-ui = ?tc@TemplateCallNoArgs(p)            ;where(<constraint-error-template-not-defined(|p,[]  )> tc)
  constraint-error-ui = ?tc@TemplateCall(p,arg*,_)  ;where(<constraint-error-template-not-defined(|p,arg*)> tc)
  constraint-error-ui = ?tc@TemplateCallBody(p,_)            ;where(<constraint-error-template-not-defined(|p,[]  )> tc)
