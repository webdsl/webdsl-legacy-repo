module org/webdsl/dsl/languages/data-model/desugar

rules
  desugar-data :
    Entity(x_class, sup, prop*, fun1*) -> Entity(x_class, sup, prop*, fun2*)
    where fun2* := <desugar-extend-entity-functions-create-dr> (x_class,fun1*)
  desugar-data :
    EntityNoSuper(x_class, prop*, fun1*) -> EntityNoSuper(x_class, prop*, fun2*)
    where fun2* := <desugar-extend-entity-functions-create-dr> (x_class,fun1*)
        
  desugar-extend-entity-functions-create-dr :
    (x_class,fun1*) -> fun2*
    where extendfunctions := <filter(?ExtendFunction(_))> fun1*
        ; not(?[])
    with  <map(extend-entity-function-dr(|x_class))> extendfunctions
        ; fun2* := <remove-all(?ExtendFunction(_))> fun1*

  extend-entity-function-dr(|x_class) =
    ?ExtendFunction(Function(fun, fargs, _, Block(stats)))
    ; with(
          rules (
            ExtendEntityFunction :+
              (x_class,Function(fun, fargs2, SimpleSort("Void"), Block(stats2))) -> Function(fun, fargs2, SimpleSort("Void"), Block(newstats))
              with  newstats := <rename-vars-in-added-stmts-with-fargs> (fargs,fargs2,stats,stats2)
            )
          )
          
  rename-vars-in-added-stmts-with-fargs :
    (currentfargs,otherfargs,currentstmts,otherstmts) -> newstmts
    with  renamepairs := <zip> (<map(?Arg(<id>,_))> currentfargs, <map(?Arg(<id>,_))> otherfargs)
        ; (stats3, []) := <rename-all-vars> (currentstmts, renamepairs)
        ; newstmts := <concat> [otherstmts, stats3]

rules //apply extend entity functions

  desugar-data :
    Entity(x_class, sup, prop*, fun1*) -> Entity(x_class, sup, prop*, fun2*)
    where fun2* := <desugar-extend-entity-functions-apply-dr> (x_class,fun1*)
  desugar-data :
    EntityNoSuper(x_class, prop*, fun1*) -> EntityNoSuper(x_class, prop*, fun2*)
    where fun2* := <desugar-extend-entity-functions-apply-dr> (x_class,fun1*)
 
  desugar-extend-entity-functions-apply-dr :
    (x_class,fun1*) -> fun2*
    where fun2* := <map(try(<once-ExtendEntityFunction;where(applied:=True())> (x_class,<id>)))> fun1*
        ; !applied

      