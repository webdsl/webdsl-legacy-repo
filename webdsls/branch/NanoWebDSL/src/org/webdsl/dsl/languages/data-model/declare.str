module org/webdsl/dsl/languages/data-model/declare

overlays

  NameProperty =
    Property("name", Simple(), SimpleSort("String"), [])

  IdProperty =
    Property("id", Simple(), SimpleSort("UUID"), [])

  VersionProperty =
    Property("version", Simple(), SimpleSort("Int"), [])

strategies

  declare-data = declare-entity  

strategies // register all declared entities

  inherit-object :
    EntityNoSuper(x_class, props, functions) -> Entity(x_class, "Object", props, functions)

  all-properties =
    ?x_class
    ; props := <bagof-Properties; concat> x_class
    ; if not("Object" := <Extends> x_class) then
        !<concat> [props, <Extends; all-properties> x_class]
      end
    ; uniq

  all-functions =
    ?x_class
    ; functions := <bagof-Functions; concat> x_class
    ; if not("Object" := <Extends> x_class) then
        !<concat> [functions, <Extends; all-functions> x_class]
      end
    ; uniq

rules

  is-entity-type = ?SimpleSort(<IsEntity>)

  declare-entity = 
    where ( try(inherit-object)
        ; ?Entity(x_class, x_super, props, funcs) )
    ; with (id
      ; rules(
          Entities :+= x_class

          IsEntity :+
            x_class -> x_class

          Properties :+
            x_class -> props

          Functions :+
            x_class -> funcs

          Extends :
            x_class -> x_super

          SubClasses :+
            l -> [(x_super, x_class)|l] where not(<elem> ((x_super, x_class), l))

          SubClass :+
            x_super -> x_class
        )
      ; <map(declare-property(|x_class))> [VersionProperty(), IdProperty(), NameProperty() | props]
      ; <map(declare-function(|x_class))> funcs
      ; <handle-entity-id(|x_class)> props      
    )

  declare-property(|x_class) =
    ?prop@Property(x, k, s, annos)
    ; where( y := x{<newname> x})
    ; rules( TypeOfProperty : (x_class, x) -> s 
             PropertyAnnos  : (x_class, x) -> annos
             IsProperty     : (x_class, x)
             //renaming to allow direct references to properties in entity functions/derived properties
             //RenameProperty : (x_class,x) -> y
             Rename :+ Var(x) -> Var(y) where x_class := <InEntity>
             Rename :+ Qualified(x, z) -> Qualified(y, z) where x_class := <InEntity>
             Rename :+ Stat(Assignment(x, e)) -> Stat(Assignment(y, <rename-all> e)) where x_class := <InEntity>
             TypeOf : y -> s
           )
    ; where( escapedname := <concat-strings> ["_",x]
           ; y1 := escapedname{y} 
           )
    ; rules( //don't add the new name in the generated code
             ExcludeFromVarRenaming : Var(y) -> Var(y1)
             ExcludeFromVarRenaming : Qualified(y, z) -> Qualified(y1, z)
             ExcludeFromVarRenaming : Stat(Assignment(y, e)) -> Stat(Assignment(y1, <rename-identifiers> e))
             TypeOf : y1 -> s
             OriginalNonUniqueName : y1 -> x
           )
    ; try(declare-list-property(|x_class))
    ; !prop
    
  declare-property(|x_class) =
    ?PropertyNoAnno(x, k, s)
    ; <declare-property(|x_class)> Property(x, k, s, [])

  declare-list-property(|x_class) =
    ?Property(x, k, GenericSort(coll, [s@SimpleSort(_)]), annos)
    ; where(
             y := <concat-strings>[x, "List"]
           ; t := GenericSort("List", [s])
           )
        ; rules(
            TypeOfProperty : (x_class, y) -> t
          )
    
  declare-property(|x_class) =
    ?PropertyNoAnno(x, k, srt)
    ; <declare-property(|x_class)> Property(x, k, srt, [])

  is-property =
    ?(x_class, x)
    ; (IsProperty <+ <is-property> (<Extends> x_class, x))

  type-of-property =
    ?(x_class, x)
    ; (TypeOfProperty <+ <type-of-property> (<Extends> x_class, x))

