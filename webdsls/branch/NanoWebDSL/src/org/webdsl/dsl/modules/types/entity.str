module org/webdsl/dsl/modules/types/entity

imports
  libstrategolib

imports
  libwebdsl-front

rules

  type-default-value :
    s@SimpleSort(y) -> exp |[ null ]|
    where <is-entity-type> s

rules

  desugar-types :
    TemplateCall(x,arg*,passign*,elem*) -> <rename-all> elem|[ 
      dummy() {
        if (e != null) {
          navigate($viewY(e))[passign*]{text(e.name)} 
        } 
        if (e == null) {
          text("null")
        }
      }
    ]|
    where <?"output"> x //"output" string not in lhs because the x with annotations is needed to check whether it is a call to built-in output
        ; <CallToBuiltInTemplate> x
        ; [e] := arg*
        ; SimpleSort($Y) := <type-of> e
        ; <IsEntity> $Y
    with  $viewY := <decapitalize-string> $Y

  desugar-types :
    TemplateCall(x,arg*,passign*,elem*) -> <rename-all> elem|[ list { for(x1 : $X in e){ listitem{ output(e2)[passign*] } } } ]|
    where <?"output"> x
        ; <CallToBuiltInTemplate> x
        ; [e] := arg*
        ; GenericSort("List",[SimpleSort($X)]) := <type-of> e
    with  x1 := <newname> "outputlist"
        ; e2 := Var(x1)

  desugar-types :
    TemplateCall(x,arg*,passign*,elem*) -> <rename-all> elem|[ list { for(x1 : $X in e){ listitem{ output(e2)[passign*] } } } ]|
    where <?"output"> x
        ; <CallToBuiltInTemplate> x
        ; [e] := arg*
        ; GenericSort("Set",[SimpleSort($X)]) := <type-of> e
    with  x1 := <newname> "outputset"
        ; e2 := Var(x1)
    
  desugar-types :
    elem|[ input(e)[passign*]{elem*} ]| ->
    <rename-all> elem|[
      select( y1 : $Y, "Select", e)[passign*]{elem*}
    ]|
    where SimpleSort($Y) := <type-of> e
        ; <IsEntity> $Y
        ; y      := <decapitalize-string> $Y
        ; y1     := <newname> y

  desugar-types :
    elem|[ input(e)[passign*]{elem*} ]| ->
    <rename-all> elem|[
      select(x1 : $X, str, e)[passign*]{elem*}
    ]|
    where GenericSort(coll, [SimpleSort(X)]) := <type-of> e
        ; $X  := X
        ; x1  := <decapitalize-string; newname> X
        ; str := <concat-strings>["Add ", X]
