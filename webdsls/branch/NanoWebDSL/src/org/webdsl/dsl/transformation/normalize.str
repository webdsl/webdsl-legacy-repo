/**

 Syntactic normalization rules for WebDSL

*/

module org/webdsl/dsl/transformation/normalize

imports
  libstrategolib
  Java-15
  libjava-front

imports
  libwebdsl-front

strategies
    
  /**
   * syntactically normalize WebDSL constructs
   */
  
  desugar = normalize

rules // functions

  normalize-action : 
    FunctionNoReturn(x, farg*, stat*) -> Function(x, farg*, SimpleSort("Void"), stat*)

  normalize-action :
    IfNoElse(e, bit) -> If(e, bit, Block([]))

  normalize-ui :
    IfNoElseTempl(e, elem*) -> IfTempl(e, elem*, [])

rules // literals

  normalize-action :
    String(x) -> String(<un-double-quote> x)
   
  normalize-ui :
    Text(x) -> Text(<un-double-quote> x)

rules // case statement

  // TODO: Try rename-all here?
  normalize-action :
    stat|[ case(e) { alt* } ]| -> <rename-closed> stat|[ { var x : srt := e; stat } ]|
    where srt := <type-of> e
        ; x := <newname> "caseval"
        ; stat := <case-to-if(|x)> alt*

  case-to-if(|x) :
    [] -> stat|[ { } ]|

  case-to-if(|x) :
    [ |[ const { stat1* } ]|, alt* ] -> stat|[ if(x == const) { stat1* } else { stat2 } ]|
    where stat2 := <case-to-if(|x)> alt*

  case-to-if(|x) :
    [ |[ default { stat1* } ]|, alt* ] -> stat|[ { stat1* } ]|

rules // case template element

  // TODO: Try rename-all here?
  normalize-ui :
    elem|[ case(e) { talt* } ]| -> <rename-closed> elem|[ dummy(){ var x : srt := e; elem } ]|
    where srt  := <type-of> e
        ; x    := <newname> "caseval"
        ; elem := <template-case-to-if(|x)> talt*

  template-case-to-if(|x) :
    [] -> elem|[ dummy(){ } ]|

  template-case-to-if(|x) :
    [ TemplateCaseAlt(const, elem1*), talt* ] -> elem|[ if(x == const) { elem1* } else { elem2 } ]|
    where elem2 := <template-case-to-if(|x)> talt*

  template-case-to-if(|x) :
    [ TemplateCaseAltDefault(elem1*), talt* ] -> elem|[ dummy(){ elem1* } ]|

rules // templates

  normalize-ui :
    def |[ define x(farg*) { elem* } ]| -> def |[ define template x(farg*) { elem* } ]|
    where not(<EnclosingDefinition> x)        

  normalize-ui :
    def |[ define x(farg*) { elem* } ]| -> def |[ define local x(farg*) { elem* } ]|
    where <EnclosingDefinition> x

rules // template elements

  normalize-ui :
    elem|[ navigate(url(e)){} ]| -> elem|[ navigate(url(e)){url(e)} ]|

//MW: those two should be necessary?
  normalize-ui :
    elem|[ navigate(url(e)) ]| -> elem|[ navigate(url(e)){url(e)} ]|

  normalize-ui :
    elem|[ navigate(url(e)) ]| -> elem|[ navigate(url(e)){url(e)} ]|

  normalize-ui :
    elem|[ navigate(e1, e2){} ]| -> elem|[ navigate(e2){text(e1)} ]|

  // Works only for strings. Making generic is difficult, because argument to a 
  // TemplateCall are Exp* and the body of a TemplateCall is TemplateElement*
  normalize-ui :
    elem|[ section(e){elem*} ]| -> elem|[ section(){ header{output(e)} elem* } ]|

  normalize-ui :
    elem|[ x ]| -> elem|[ x(){} ]|

  normalize-ui :
    elem|[ x(e*) ]| -> elem|[ x(e*){} ]|

  normalize-ui :
    elem|[ x{elem*} ]| -> elem|[ x(){elem*} ]|

  normalize-ui :
    elem|[ text(x) ]| -> elem|[ text(y){} ]| 
    with y := <un-double-quote> x
    
  normalize-ui :
    elem*|[ text(e1,e2,e*){} elem* ]| -> elem*|[ text(e1){} text(e2,e*){ } elem* ]|

  normalize-ui :
    elem|[ menubar(){ elem* } ]| -> elem|[ menubar("horizontal"){ elem* } ]|

  normalize-ui :
    elem|[ from(e1){} ]| -> elem|[ from(e1,e1){} ]|
