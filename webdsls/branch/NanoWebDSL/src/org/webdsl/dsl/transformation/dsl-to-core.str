module org/webdsl/dsl/transformation/dsl-to-core

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/modules/-
  org/webdsl/dsl/languages/composition

strategies

  dsl-to-core =
      dsl-to-core-analysis
    ; if FoundErrors then <exit> 1 end //exit if parsing error in modules, exit here instead of in dsl-to-core-analysis for compatibility with editor support
    ; dsl-to-core-generation
  
  dsl-to-core-analysis =
    if not(FoundErrors) //stop if parsing error in modules
    then
      remove-string-position-annos
      ; stage(typecheck|"typechecking")
    end
  
  dsl-to-core-generation =
      remove-position-annos
    ; stage(desugar-top|"model-to-model")
    ; stage(rename-identifiers|"renaming identifiers")

    ; stage(
      //collect all the functions in a dynamic rule and handles overloading
      aggregate-and-combine-functions
      //collect all the global variables in a dynamic rule
      //; collect-global-vars
      //collect all the session variables in a dynamic rule
      //; collect-session-vars   
      |"performing analysis")
    
strategies // IDE Plugin stuff

  webdsl-collect-all-errors =
    {| AllErrors, AllWarnings:
      rules(
        // Override the error reporting behavior to collect errors
        AddError(|msgs):   node -> node where rules(AllErrors   :+= (node, <error-to-string> msgs))
        AddWarning(|msgs): node -> node where rules(AllWarnings :+= (node, <error-to-string> msgs))
      )
    ; with(
        dsl-to-core-analysis
      )
    ; !(<bagof-AllErrors <+ ![]>, <bagof-AllWarnings <+ ![]>, [])
    |}
    
strategies

  remove-position-annos =
    topdown-l(try(remove-position-anno))

  remove-string-position-annos =
    topdown(try(remove-string-position-anno))

  remove-string-position-anno =
    (is-string + ?SimpleSort(_) + ?GenericSort(_, _))
    ; strip-annos

  remove-position-anno :
    s{anno*} -> result
    where anno2* := <remove-all(?At(_, _, _))> anno*
        ; if [] := anno2* then
            result := s{}
          else
            result := s{anno2*}
          end

