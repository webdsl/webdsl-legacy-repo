module org/webdsl/dsl/to-java-servlet/control-flow-to-java-servlet

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
    
// control flow page elements   : for, if, templatecall 

rules // iteration

  for-loop-counter-wrap-code:
    bstm* -> result
    with  if <?[]> bstm* 
          then result :=  []
          else result :=  bstm*|[
                            ident = "";
                            if(inForLoop) {
                              ident += forelementcounter;
                            }
                            bstm*
                          ]| end
    
  wrap-in-for-loop(|x,t,e) :
    bstm -> res
    with  x_i := <newname> "i"
        ; res := <wrap-in-for-loop(|x_i,x,t,e)> bstm
  
  wrap-in-for-loop(|x_i,x,t,e) :
    bstm ->
    bstm* |[
      Object[] x_array = e.toArray(); // need to iterate set too without iterator, this copied array also makes sure a remove on the collection doesn't cause skipped elements
      for(int x_i = 0; x_i < x_array.length; x_i++)
      { 
        t x = (x_argtype) x_array[x_i];
        bstm*
      }
    ]|
    with  x_array := <newname> "array"
        ; x_argtype := <pp-java5-to-string> t
        ; if <is-list> bstm
          then bstm* := bstm
          else bstm* := [bstm] end

  handle-actions-input-to-java-servlet  =
    control-flow-for(collect-om(handle-actions-input-to-java-servlet)|)

  handle-actions-to-java-servlet =
    control-flow-for(collect-om(handle-actions-to-java-servlet)|)

  elem-to-java-servlet =
    control-flow-for(elems-to-java-servlet|)

  control-flow-for(s|) :
    ForNoFilter(x, srt, e1, elems) -> result
    with  bstm* := <s;concat-with-sublists> elems
        ; e2 := <expression-to-java-servlet> e1
        ; t := <java-type> srt
        ; x_list := <newname> "list"
        ; GenericSort(x_setorlist,[SimpleSort(_)]) := <type-of> e1
        ; if <?[]> bstm*
          then result :=  [] 
          else result :=  bstm* |[
                            java.util.ArrayList<t> x_list = new java.util.ArrayList<t>(e2);
                            ~*<control-flow-for-common(s | x_list, x, srt, t)> bstm* |[    
                              bstm*
                            ]|
                          ]| end

  control-flow-for(s|) :
    fa@ForAllNoFilter(x, srt, elems) -> result
    with  bstm*   := <s;concat-with-sublists> elems
        ; t       := <java-type> srt
        ; x_list := <newname> "list"
        //; e_criteria := <hibernate-forall-criteria> (fa, t, x, srt, fltr)
        ; if <?[]> bstm*
          then result :=  [] 
          else result :=  bstm* |[ 
                            java.util.List<t> x_list = hibSession.createCriteria(t.class).list();
                            ~*<control-flow-for-common(s | x_list, x, srt, t)> bstm*|[
                              bstm*
                            ]|
                          ]| end
        
  control-flow-for-common(s | x_list, x, srt, t) :
    bstm* ->
    bstm* |[
      inForLoop = true;
      forLoopCounter++;
      ~*<wrap-in-for-loop(|x,t,expr|[ x_list ]|)>
      bstm* |[  
        forelementcounter++;
        bstm*
      ]|
      forLoopCounter--;
      if(forLoopCounter == 0)
      inForLoop = false;
    ]|

rules // if

  handle-actions-input-to-java-servlet  =
    control-flow-if(collect-om(handle-actions-input-to-java-servlet)|)

  handle-actions-to-java-servlet =
    control-flow-if(collect-om(handle-actions-to-java-servlet)|)

  elem-to-java-servlet =
    control-flow-if(elems-to-java-servlet|)

  control-flow-if(s|) :
    IfTempl(e, elems, elems2) -> result
    with  bstm* := <s;concat-with-sublists> elems
        ; bstm2* := <s;concat-with-sublists> elems2
        ; e1 := <expression-to-java-servlet> e
        ; if <?([],[])> (bstm*,bstm2*)
          then result :=  [] 
          else result :=  bstm |[
                            if(e1){ 
                              bstm*
                            } else {
                              bstm2*
                            }
                          ]| end

