module org/webdsl/dsl/to-java-servlet/core-to-java-servlet

imports
  org/webdsl/dsl/to-java-servlet/-
  org/webdsl/dsl/to-java-servlet/types/-
  org/webdsl/dsl/to-java-servlet/uicomponents/-

strategies

  //set-DomainPackage(|pkg) = 
  //  rules( DomainPackage := pkg )
  
  core-to-java-servlet =
    ?Application(qid, sections)
    ; rules(
        Package       := <qid-to-package-name> qid        
        BeanPackage   := <qid-to-package-name> Qualified(qid, "beans")
        ActionPackage := <qid-to-package-name> Qualified(qid, "actions")
        DomainPackage := <qid-to-package-name> Qualified(qid, "domain")
      )
    //; where( set-DomainPackage(|<qid-to-package-name> Qualified(qid, "domain")) )
    ; log-time( get-all-top-level-template-names | "get-all-top-level-template-names" ) //TODO should be available in a dynamic rule somewhere
    ; log-time( annotate-with-unique-element-ids | "annotate-with-unique-element-ids" )
    ; log-time( generate-code-java-servlet       | "generate-code-java-servlet" )

   generate-code-java-servlet =
     generate-code-java-servlet-aux
     <+ log-time(not(GenerateCodeJavaServlet)|"generate code other")
        ; all(generate-code-java-servlet)

   generate-code-java-servlet-aux =
     ?def@Define(mods, name, args, elems)
     ; {| JavaThisPage, NestedTemplate, ThisTemplateName,ThisTemplateClassName, Variables: 
            //Variables: to hold arguments/variables of parent templates/pages
         with(
           if ThisTemplateName       then rules ( NestedTemplate := name ) end
         ; if <elem> (Page(), mods)  then rules ( JavaThisPage := name ) end
         ; rules ( 
             ThisTemplateName := name
             ThisTemplateClassName := <get-template-class-name> def
           )
         )
         ; log-time(not(GenerateCodeJavaServlet)|"generate code define")
         ; all(generate-code-java-servlet)
         |}

   generate-code-java-servlet-aux =
     ?Action(_, _, _)
     ; {| InAction, Variables
        : rules ( InAction := True() )
        ; log-time(not(GenerateCodeJavaServlet)|"generate code action")
        ; all(generate-code-java-servlet)
        |}

   generate-code-java-servle-aux =
     ?Function(_,_,_,_) 

   generate-code-java-servlet-aux =
     (?Entity(ent_name,_,_,_)<+?EntityNoSuper(ent_name,_,_)) 
     ; {| JavaInEntity, ClassName //needs refactoring, should be only one dr to check in-entity status
        : rules ( JavaInEntity := True() ClassName := ent_name )
        ; log-time(not(GenerateCodeJavaServlet)|"generate code entity")
        ; all(generate-code-java-servlet)
        |}

// some helping annotations to create uniqueness among the static elements

signature
  constructors
    TemplateCallNumber : String -> Annotation
    FormNumber         : String -> Annotation
    InputNumber        : String -> Annotation
    ActionNumber       : String -> Annotation //action calls/actionLink
    TemplateClassName  : String -> Annotation
        
rules

  get-templatecallnumber :
    _{anno*} -> compid
    where TemplateCallNumber(compid) := <collect(?TemplateCallNumber(_));Hd> anno*
 
  get-formnumber :
    _{anno*} -> compid
    where FormNumber(compid) := <collect(?FormNumber(_));Hd> anno* 
    
  get-inputnumber :
    _{anno*} -> compid
    where InputNumber(compid) := <collect(?InputNumber(_));Hd> anno* 
    
  get-actionnumber :
    _{anno*} -> compid
    where ActionNumber(compid) := <collect(?ActionNumber(_));Hd> anno* 
    
  get-template-class-name :
    _{anno*} -> compid
    where TemplateClassName(compid) := <collect(?TemplateClassName(_));Hd> anno* 

strategies

  annotate-with-unique-element-ids = 
    topdown(try(java-servlet-element-id))

rules

  java-servlet-element-id :
    tc@TemplateCall(name, args,_){anno*} -> tc{TemplateCallNumber(newid),anno*} 
    where t* := <map(type-of)> args 
        ; <CallToDefinedTemplateAfterIdRename> name
        ; newid := <newname> "tcall"
    
  java-servlet-element-id :
    tc@TemplateCall("form", attrs,elems){anno*} -> tc{FormNumber(newid),anno*} 
    where  newid := <newname> "form"
    
  java-servlet-element-id :
    tc@TemplateCall("action",[e1,e2],[]){anno*} -> tc{ActionNumber(newid),anno*} 
    where  newid := <newname> "action"
      
  java-servlet-element-id :
    tc@TemplateCall("actionLink",[e1,e2],[]){anno*} -> tc{ActionNumber(newid),anno*} 
    where  newid := <newname> "action"

  java-servlet-element-id-template-call : 
    tc -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
        ; newid := <newname> "input"

  get-all-top-level-template-names =
    alltd(register-top-level-template-name)

  register-top-level-template-name = 
    ?tmplt@webdsl|[ define mod* x(farg*) { elem* } ]|
    ; with(
        if <not(fetch(?Page()))> mod*
        then rules(AllTopLevelTemplateNamesJavaServlet :+= x  // used to create lookup hashmap in java-base-page.str
                   IsTopLevelTemplateNameJavaServlet : x
                   TopLevelTemplateArgumentsJavaServlet : x -> farg* 
                   GetTopLevelTemplateJavaServlet : x -> tmplt
                   )
        end
        ; if "errorTemplateInputListString"  := x then rules ( ErrorTemplateInput := tmplt ) end
        ; if "errorTemplateFormListString"   := x then rules ( ErrorTemplateForm := tmplt ) end
        ; if "errorTemplateActionListString" := x then rules ( ErrorTemplateAction := tmplt ) end
        ; if "templateSuccessListString"     := x then rules ( TemplateSuccess := tmplt ) end
      )
    ; !<register-template-name(|True())> tmplt
    
  register-template-name(|toplevel)  :
    tc@Define(mod*,x,farg*,elem*) -> Define(mod*,x1,farg*,elem1*){TemplateClassName(newid),anno*} 
    with  _{anno*} := tc
        ; x1 := <strip-annos> x
        ; newid := <concat-strings;newname> [x,"Template"] // TODO add context page to the name for easier debugging
        ; if True() := toplevel then rules( TopLevelTemplateClassName : x -> newid ) end
        ; if <elem> (Page(),mod*)
          then rules( AllPageNames  :+= x 
                      PageClassName : x -> newid) // used to create lookup hashmap in java-base-page.str 
                                                  // TODO needs renaming, used for any type of template now
          end
        ; elem1* := <alltd(register-template-name(|False()))> elem*