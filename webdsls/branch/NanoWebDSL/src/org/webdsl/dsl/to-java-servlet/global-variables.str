module org/webdsl/dsl/to-java-servlet/global-variables

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules

  GenerateCodeJavaServlet = generate-java-servlet-global-vars; fail

  generate-java-servlet-global-vars :
    Application(qid, sections) ->
    <emit-java-code> compilation-unit|[
      package utils;
  
      import java.io.*;
      import java.util.HashMap;
  
      import javax.servlet.*;
      import javax.servlet.http.*;
      import java.util.*;
      import utils.*;
      import pkgname.*;
      import pkgname2.*;
  
      public class GlobalVariables {
        private static org.hibernate.Session hibSession;
        private static HashMap<String, Object> variables = new HashMap<String, Object>();
        private static PageServlet ps = new GlobalsPageServlet(variables);
        private static java.io.PrintWriter out = null;

          //private static HashMap<String, Long> ids = new HashMap<String, Long>();
          
          //cope with either primary key types as well? or keep consistent, always Long primary key
          
        ~*cbds*
        ~*cbds1*
          /*public static void getGlobalVariable(org.hibernate.Session hibSession, String ident)
          {
              hibSession.load(ids.get(ident));
          }*/
      
        //private static HashMap<String, Object> variables = new HashMap<String, Object>();
    
        static boolean applicationContextPropertyExists(String name, List<ApplicationContextProperty> res){
          for(ApplicationContextProperty a : res){
            if(a.getName().equals(name))	
              return true;
          }
          return false;
        } 
    
        static{
            //start hibsession
            hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();

            org.hibernate.Query q = hibSession.createQuery("from ApplicationContextProperty");
            List<ApplicationContextProperty> res = q.list();
    
            bstm3*
            bstm1*
            bstm2*

            org.hibernate.Query q2 = hibSession.createQuery("from ApplicationContextProperty");
            List<ApplicationContextProperty> results = q2.list();
            for(ApplicationContextProperty a : results)
            {
              bstm4*
            }
        }
      }
    ]|
    where not([] := <AllGlobalVars>) // fails if there are no global vars, wont generate anything then
    with  pkgname    := <BeanPackage>
        ; pkgname2   := <DomainPackage>
        ; cbds* := <map({\ 
                           elem |[ var x : srt := e ]| -> 
                           class-body-dec*|[ 
                             //private static t x = null;
                             private static String x#id = null;
                              
                             public static x_class get#x(org.hibernate.Session hibSession)
                             {
                                 t x = (x_class) hibSession.load(x_class.class, x_type.x_conversionmethod(x#id));
                                 return x;
                             }
                              
                           ]| 
                           with  t := <java-type> srt
                               ; SimpleSort(typename) := srt
                               ; x_class := <java-type-name> srt
                               ; x_type := "java.util.UUID"
                               ; x_conversionmethod := "fromString"                                   
                       \});concat> 
                       <AllGlobalVars<+ ![]>
        ; vardeclinits := <AllGlobalVars <+ ![]>
        // persist right away to get an id
        ; bstm3* := <map(vardeclinit-to-persist-statement-java-servlet <+ pp-aterm(!"vardeclinit-to-persist-statement-java-servlet: ");fail);concat-with-sublists> vardeclinits
        //update with assignments
        ; bstm1* := <map(vardeclinit-to-method-call-java-servlet <+ pp-aterm(!"vardeclinit-to-method-call-java-servlet: ");fail)> vardeclinits
        //persist updates
        ; bstm2* := <map(vardeclinit-to-method-persist-call-java-servlet <+ pp-aterm(!"vardeclinit-to-method-persist-call-java-servlet: ");fail)> vardeclinits
        ; bstm4* := <map(vardeclinit-to-id-load <+ pp-aterm(!"vardeclinit-to-id-load: ");fail)> vardeclinits
        ; cbds1* := <map(vardeclinit-to-method-java-servlet <+ pp-aterm(!"vardeclinit-to-method-java-servlet: ");fail); concat-with-sublists> vardeclinits
 

  vardeclinit-to-persist-statement-java-servlet:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),exps) -> resultwrapped
    with  result := 
          bstm* |[ 
            //hibSession.save(x_ident); no longer necessary here because of generated UUID for keys
            variables.put("~x_ident",x_ident); //necessary for set/list creations in globals which use globals
          ]| 
        ; resultwrapped := 
          bstm |[
            if(!applicationContextPropertyExists("~x_ident",res)){
              ~*result
            }
          ]|                 

  vardeclinit-to-id-load:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[	
      if(a.getName().equals("~x_ident"))
      {
        x_ident#id = a.getDatabaseId();
      }  
    ]|

  vardeclinit-to-method-call-java-servlet:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[	
      if(!applicationContextPropertyExists("~x_ident",res))  
        globalDeclaration#x_ident(); 
    ]|

  vardeclinit-to-method-persist-call-java-servlet:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[ 
      if(!applicationContextPropertyExists("~x_ident",res))
        globalDeclaration#x_ident#Persist(); 
    ]|

  vardeclinit-to-method-java-servlet:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class), ObjectCreation(SimpleSort(x_classcreated),assigns)) ->
      class-body-dec* |[
        private static t x_ident = new x_t();

        private static void globalDeclaration#x_ident() {
          try {
            ~*bstmvardeclinit*
            //call constructor for entity-events:
            x_ident.x_classcreated#_(hibSession, variables, ps, out);
          }
          catch(Exception iea) {
            throw new RuntimeException("Catched in globalDeclaration: ",iea);
          }
        }

        private static void globalDeclaration#x_ident#Persist() {
          hibSession.save(x_ident);
          ApplicationContextProperty x_acpident = new ApplicationContextProperty();
          x_acpident.setName("~x_ident");
          x_acpident.setDatabaseId(String.valueOf(x_ident.getId()));
          hibSession.save(x_acpident);
          GlobalVariables.x_ident#id = x_acpident.getDatabaseId();
        }
  ]|
  with  x_acpident := <newname> "id"
      ; t := <defined-java-type> SimpleSort(x_classcreated)
      ; x_t := <java-type-name> SimpleSort(x_classcreated)
      ; digests := <filter(secret-assigns-to-digest-java-servlet(|x_ident,x_classcreated))> assigns
      ; bstmvardeclinit* := <conc>
                         (<map(\ ObjectPropertyAssignment(x_prop, e) -> webdsl |[ x_ident.x_prop := e; ]| \)//Assign(Assignment(Qualified(x_ident, f), e)) \)
                           ; /*desugar-any;*/ statements-to-java-servlet> assigns
                         , digests)

  secret-assigns-to-digest-java-servlet(|x_ident,class):
    ObjectPropertyAssignment(x_prop,String(anystring)) ->
     bstm|[
       {
         org.jasypt.util.password.StrongPasswordEncryptor x_var2 =
           new org.jasypt.util.password.StrongPasswordEncryptor();
         x_ident.x_set(x_var2.encryptPassword(x_anystring));
       }
     ]|
     where SimpleSort("String") := <type-of> String(anystring) 
         ; SimpleSort("Secret") := <type-of-property> (class,x_prop)
     with  x_var2 := <newname> "_passwordEncryptor"
         ; x_set := <property-setter> x_prop
         ; x_anystring := <concat-strings> ["\"",anystring,"\""]

strategies //handle global vars in templates and pages     

  GenerateCodeJavaServlet = generate-java-servlet-global-vars-page-part; fail
  
  generate-java-servlet-global-vars-page-part :
    def |[ define mod* x(farg*) { elem* } ]| -> result
    where x := <JavaThisPage>
    with result := <map(generate-java-servlet-global-vars-page-part-helper)> <AllGlobalVars> 
    
  generate-java-servlet-global-vars-page-part-helper :   
    elem |[ var x : srt := e ]| -> 
    <generate-java-servlet-partial>
    class-body-dec|[
       @Partial
       protected void initialize()
       {
           t x = null;
           x = GlobalVariables.get#x(hibSession);
           variables.put("~x",x);
       }
     ]| 
     with  t := <java-type> srt
                      
  GenerateCodeJavaServlet = generate-java-servlet-global-template-part; fail
  
  generate-java-servlet-global-template-part :
    def |[ define mod* x(farg*) { elem* } ]| -> result
    with result := <map(generate-java-servlet-global-vars-template-helper)> <AllGlobalVars> 
    
  generate-java-servlet-global-vars-template-helper :
    elem |[ var x : srt := e ]| -> 
    <generate-java-servlet-template-partial> 
    class-body-dec*|[ 
      private t x = null;
      @Partial
      protected void initialize()
      {
        x = (x_class) variables.get("~x");
      }
    ]| 
    with  t := <java-type> srt
        ; x_class := <java-type-name> srt
