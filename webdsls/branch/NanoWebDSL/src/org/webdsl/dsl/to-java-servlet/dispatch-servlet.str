module org/webdsl/dsl/to-java-servlet/dispatch-servlet

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules

  GenerateCodeJavaServlet = generate-java-servlet-dispatcher; fail

  generate-java-servlet-dispatcher :
    Application(qid, sections) ->
    <emit-java-code> compilation-unit|[
      package utils;
  
      import java.io.*;
      import java.util.HashMap;
      import java.util.Map;
      import java.util.List;
      import java.util.LinkedList;
  
      import javax.servlet.*;
      import javax.servlet.http.*;
  
      import utils.*;
      import pkgname.*;
  
      public class DispatchServlet extends HttpServlet {
  
          public static HashMap<String, Class> pages = new HashMap<String, Class>();
          private static HashMap<String, String[]> pagearguments = new HashMap<String, String[]>();
          static{
              bstm*
              bstm1*
          }
          
          private void addToValues(String key, String val,Map<String, List<String>> parammapvalues){
            List<String> current = parammapvalues.get(key); 
            if(current==null){
              List<String> newlist = new LinkedList<String>();
              newlist.add(val);
              parammapvalues.put(key,newlist) ; 
            }
            else{
             current.add(val);
            }
          }
            
          public void doGet(HttpServletRequest request, HttpServletResponse response)
          throws IOException, ServletException
          {
            boolean showerrorpage = false;
            try{
              String[] req = request.getRequestURL().toString().split("/");
              int count;
              boolean first = false;
              ~*<where(not(IsRootApp)) <+ ![]> bstm* |[
                for(count=0;count<req.length;count++)
                {
                  if(req[count].equals("~<AppName>"))
                  {
                    count++;
                    break;
                  }
                }
              ]|
              ~*<where(IsRootApp) <+ ![]> bstm* |[
                count = 3;
              ]|
             
              String requested = req[count];
              String[] args = java.util.Arrays.copyOfRange(req, count+1, req.length);
              String[] argnames = pagearguments.get(requested);

              java.util.Map<String, utils.File> fileUploads = new HashMap<String, utils.File>();
              java.util.Map<String, String> parammap = new HashMap<String, String>();
              java.util.Map<String, List<String>> parammapvalues = new HashMap<String, List<String>>();

              for(java.util.Enumeration en = request.getParameterNames();en.hasMoreElements(); ){
                String parameterName = (String)en.nextElement();
                parammap.put(parameterName,request.getParameter(parameterName)); 
                for(String paramval : request.getParameterValues(parameterName)){
                  addToValues(parameterName, paramval, parammapvalues);
                } 
              }
    
              List<String> messages = new LinkedList<String>();
              for(int count2=0; count2<args.length;count2++)
              {
                if(count2 < argnames.length){
                  parammap.put(argnames[count2],args[count2]);
                  addToValues(argnames[count2],args[count2],parammapvalues);
                }
              }
              
              Class pc = pages.get(requested);

            if(pc == null) {
                pc = pages.get("pagenotfound");
            }
             
              if(pc != null) {
                  try{
                      PageServlet pageservlet = (PageServlet)pc.newInstance();
                      pageservlet.serve(request,response,parammap,parammapvalues,fileUploads);
                  }
                  catch(IllegalAccessException iae){
                      System.out.println("Problem in dispatch servlet page lookup: "+iae.getMessage());
                      iae.printStackTrace();
                      showerrorpage=true;
                  }
                  catch(InstantiationException ie){
                      System.out.println("Problem in dispatch servlet page lookup: "+ie.getMessage());
                      ie.printStackTrace();
                      showerrorpage=true;
                  }
                  catch(RuntimeException re){   
                    showerrorpage=true;
                  }	  
              }
              else{showerrorpage=true;}
            }
            catch(Exception ex){
              System.out.println("Exception in dispatch servlet: "+ex.getMessage());
              ex.printStackTrace();
              showerrorpage=true;
            }
            
            if(showerrorpage)
            {
                response.sendError(javax.servlet.http.HttpServletResponse.SC_NOT_FOUND);
            }
          }
  
          public void doPost(HttpServletRequest request, HttpServletResponse response)
          throws IOException, ServletException
          {
              doGet(request, response);
          }
      }
    ]|
    with  pkgname    := <BeanPackage>
        ; pkgname2   := <DomainPackage>
        ; page-names := <bagof-PageNames; make-set>
        ; bstm*      := <map(make-page-table)> page-names
        ; bstm1*     := <map({register-page-arguments});concat> page-names

  make-page-table :
    x -> bstm |[ pages.put(x_key, x_value); ]| 
    with x_key   := <concat-strings> ["\"",x,"\""]
       ; x_value := <concat-strings> [<java-servlet-page-name> x,".class"]
                        
  register-page-arguments :
    x -> bstm* |[ {
           String[] s = { e* };
           pagearguments.put(x_key, s); 
         }]| 
    with x_key := <concat-strings> ["\"",x,"\""]
       ; e* := <TemplateArguments; map( \ Arg(y,_) -> e|[ "~y" ]| \ )> x  //TemplateArguments must give unrenamed versions
                         