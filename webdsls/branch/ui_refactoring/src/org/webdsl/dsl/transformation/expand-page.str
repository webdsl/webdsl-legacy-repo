module expand-page

imports 
  libstrategolib
  
imports 
  libwebdsl-front

rules

  expand-page-templates =
    alltd-l(expand-page)

  expand-page =
    //?Define([Page()], name, args, body1)
    {| ThisPage :
    [ ?tdef|[ define page x(farg*) { elem* } ]| ; rules ( ThisPage := x )
         ; expand-template-definition | expand-page-templates ] |}

  expand-page =
    ?[tdef|[ define x(farg*) { elem* } ]| | <expand-page-templates>]

/*  expand-template-definition :
    tdef|[ define mod* x(farg*){elem1*} ]| -> tdef|[ define mod* x(farg*){elem2*} ]|
    where {| TemplateDefinition, TemplateArguments, IsPage, IsEmail
           : elem2* := <filter(not(declare-template-definition)); map(expand-element)> elem1*
           ; <filter(?Define([], _, _, _)); map(bla(|<ThisPage>))> elem1*
           |}*/

  expand-template-definition :
    tdef|[ define mod* x(farg*){elem1*} ]| -> tdef|[ define mod* x(farg*){elem1*} ]|
    where {| TemplateDefinition, TemplateArguments, IsPage, IsEmail
           : <filter(?Define([], _, _, _)); map(bla(|<ThisPage>))> elem1*
           |}

  bla(|page) =
    ?def@Define([], _, _, _)
    ; rules( TemplateDefinitionsInPage :+ page -> def )
    
  expand-template-definition-old :
    Define(mods, name, args, body1) -> <dbg(|"expanded")> Define(mods, name, args, body2)
    where dbg(|"expanding definition")
        ; {| TemplateDefinition, TemplateArguments, IsPage, IsEmail
           : elems := <filter(not(declare-template-definition))> body1
           ; body2 := <map(expand-element)> elems
           |}
           
  expand-element = dbg(|"expand-element: "); (
    expand-template-call2
    <+ expand-template-call
    <+ Subst
    <+ all(expand-element)
  )
  
  expand-template-call2 =
//    <debug> ["layoutdef: ", <LayoutDefinition> <DeclaredLayout> <Page>]
//      layout := <LayoutDefinition> <DeclaredLayout> <Page>
//    ; <debug> layout
      <collect(expand-layout-definitions); concat> <LayoutDefinition> <DeclaredLayout> <ThisPage>

  expand-layout-definitions =
    ?HorLayoutDeclaration(name, declaration)
    ; <expand-layout-definition> declaration

  expand-layout-definitions =
    ?HorLayoutDeclaration(names)
    ; <mapconcat(expand-layout-definition)> names

  expand-layout-definition :
    template -> elem* |[ elem3* ]|
    where tdef|[ define mod* x(farg*) { elem3* } ]| := <TemplateDefinition; rename-bound-variables> template
//          ; {| Subst, TypeOf, Elems
//             : <zip(bind-variable)> (farg*, <alltd(Subst)> e*)
//             ; rules( Elems := elem1* )
//             : elem2* := <map(expand-element)> elem3*
//             ; str := x
//             |}
//          ; <debug> ["template_def: ", elem3*]
//    ; ![]
             
  expand-template-call :
    elem|[ x(e*){elem1*} ]| -> elem|[ dummy() {elem2*} ]| // @todo: fixme!!!!!
    where tdef|[ define mod* x(farg*) { elem3* } ]| := <TemplateDefinition; rename-bound-variables> x
        ; {| Subst, TypeOf, Elems
           : <zip(bind-variable)> (farg*, <alltd(Subst)> e*)
           ; rules( Elems := elem1* )
           ; elem2* := <map(expand-element)> elem3*
           ; str := x
           |}
  
  expand-template-call-old :
    call@TemplateCall(name, args, elems1) -> <dbg(|"expanded")> TemplateCall("div", [String(name)], elems2)
    where <dbg(|"expanding")> call
        ; Define(mods, name, fargs, body) := <TemplateDefinition; dbg(|"rename in"); rename-bound-variables; dbg(|"rename out")> name
        ; {| Subst, TypeOf, Elems
           : <zip(bind-variable)> (fargs, <alltd(Subst)> args)
           ; rules( Elems := elems1 )
           ; elems2 := <map(expand-element)> body
           |}
           
    // @todo template definitions in included definitions are not used
          
   bind-variable =
     ?(Arg(x, s), e)
     ; rules( 
         Subst  : Var(x) -> e 
         Subst  : Qualified(x, y) -> Qualified(e, y)
         TypeOf : x -> s 
       )


     
    