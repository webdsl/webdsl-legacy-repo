/**
 * Transformation of a WebDSL application to a collection of XML and Java files
 *
 * @author Eelco Visser
 */

module org/webdsl/dsl/transformation/dsl-to-core

imports
  libstrategolib
  //Java-15
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/typechecker/-

strategies
  info(|msg) = log(|Info(), msg)

strategies

  dsl-to-core = id
    ; stop-before-importing
    ; info(|"importing modules")
    ; import-modules

    ; stop-before-desugaring
    ; info(|"desugaring")
    ; desugar
      ; stop-after



//    ; declare-template-definitions3
      
    ; declare-definitions
      ; stop-after

//    ; add-view-edit-pages-to-app
//      ; stop-after

    ; process-access-control
    ; aggregate-subclass-info
    ; desugar
      ; stop-after
    ; declare-definitions
      ; stop-after

    ; stop-before-typechecking
    ; info(|"typechecking")
    ; typecheck
      ; stop-after

//    ; stop-before-template-expansion
//    ; info(|"template expansion")
//    ; expand-page-templates
//      ; stop-after
    ; desugar
      ; stop-after
    ; typecheck
      ; stop-after

    ; access-control-weaving-after-template-expansion

    ; derive
      ; stop-after
    ; desugar
      ; stop-after
    ; typecheck
      ; stop-after

    ; declare-template-definitions3

    ; propagate-component-names
      ; stop-after

    ; declare-template-definitions5
    
    ; search-templates-defined-in-pages
    ; declare-template-definitions4



strategies

  search-templates-defined-in-pages =
    where (
      alltd(search-page-defs)
    )



// only pick out toplevel template definitions    
  declare-template-definitions5 =
    where (
      sometd(test-temp-defs)
    )
      
  test-temp-defs :
    Define([], name, fargs, body) -> Define([], name, fargs, body)
    
  test-temp-defs :
    Define(mods, name, fargs, body) -> Define(mods, name, fargs, body)
    where not([] := mods)
//


    
  declare-template-definitions3 =
    where (
      alltd(search-template-defs)
    )
  
  declare-template-definitions4 =
    alltd(rename-vars)
  
  search-page-defs :
    def@Define([Page()], name, fargs, body) -> Define([Page()], name, fargs, body)
    where <collect(search-template-def)> body
    
  search-template-def =
    ?def@Define([], name, fargs, body)
    ; if is-toplevel-template then
        rules( TemplatesDefinedInPage :+= def )
      end
  
  search-template-defs:
    Define([], name, fargs, body) -> Define([], name, fargs, body)
    where if is-toplevel-template then
//            <debug> ["________template", name]
//            ; <alltd(search-template-calls)> body
            <map(declare-template-arg(|name))> fargs
//            ; <debug> ""
          end
          
  is-toplevel-template =
    where (
      ?def
      ; not(<elem> (def, <bagof-TemplatesDefinedInPage <+ ![]>))
    )
  
  contains-template-call =
    one(?TemplateCall(name, _, _))
    ; <TemplateDefinition> name
  
    
  
  
  declare-template-arg(|page) =
    ?Arg(x, s)
    ; x' := <newname> x
    ; rules ( TemplateArgument : (page, x) -> x'
              IsTemplateArgument : x' -> x )
    
  
  rename-vars :
    def@Define([], name, fargs, body) -> Define([], name, fargs, body')
    where {| CurrentTemplate
           : rules ( CurrentTemplate := name )
//           ; <debug> name
           ; if is-toplevel-template then
               body' := <alltd(search-vars)> body
             else
               body' := body
             end
//           ; <debug> body
//           ; <debug> ""
           |}
  
  search-vars :
    Var(x){Type(t)} -> Var(y){Type(t)}
    where y := <TemplateArgument> (<CurrentTemplate>, x)
//        ; <debug> Var(y)
  
/*  search-template-calls =
    ?TemplateCall(name, args, elems)
    ; <TemplateDefinition> name
    ; <debug> [name, args]*/

  
  
//  declare-definition =
//    declare-page-definition

  declare-definitions =
    where(
      alltd(declare-definition)
      ; ?Application(qid, sections)
      ; ents := <collect(?SessionEntity(_, _, _))> sections
      ; rules ( SessionEntities := ents )
    )

  declare-definition =
    declare-entity

  declare-definition =
    declare-template-definition

  declare-definition =
    declare-action

  declare-definition =
    declare-globals


   // Creates <AllSubClasses> rule to be used in desugar.str (DeriveOutputSimpleRefAssociation)
   aggregate-subclass-info =
     where(
        allsubclasses := <repeat(once-SubClasses)> []
        ; rules( AllSubClasses := allsubclasses ))
