/**

 Styling rules for WebDSL

*/

module org/webdsl/dsl/modules/styling

imports
  libstrategolib

imports
  org/webdsl/dsl/modules/styling/-

rules

/*  process-style:
    Application(qid, sections) -> files'
    where files' := <collect(style-to-css)> sections*/

//  process-theme:


strategies

 /* is-toplevel-template =
    where (
      ?def
      ; not(<elem> (def, <bagof-TemplatesDefinedInPage <+ ![]>))
    )*/
    
  contains-template-call =
    sometd(?TemplateCall(name, _, _))
    ; <IsToplevelTemplate> name

rules

  declare-definition =
    declare-theme
    
  declare-definition =
    declare-layout

  declare-template-definition =
    declare-toplevel-template-definition
  
  declare-toplevel-template-definition =
    ?def@Define([Template()], name, fargs, body)
    ; t1* := <map(?Arg(_,<id>))> fargs
    ; rules (
              TemplateSignature : (name, t1*) -> def
              IsToplevelTemplate : name
              TemplateDefinition: (name, fargs) -> def
            )
    ; if not(<elem> ((name, fargs), <bagof-TopLevelTemplateDefinitions> name)) then
        rules ( TopLevelTemplateDefinitions :+ name -> (name, fargs) )
      end
    ; if not(<TemplateArguments> name) then
        fargs' := <map(declare-template-args)> fargs
        ; rules ( TemplateArguments  : name -> fargs' )
      end
    ; <zip(declare-template-arg(|name))> (fargs, <TemplateArguments> name)

  declare-template-args =
    <newname> "param"

  declare-template-arg(|template) =
    ?(Arg(x, SimpleSort(s)), y)
    ; rules ( TemplateArgument : (template, x) -> y
              IsTemplateArgument : y -> x
              TypeOf : y -> t' where t' := SimpleSort(<get-superclass> s) )


  declare-layout =
    ?LayoutDefinition(name, declarations)
    ; rules ( LayoutDefinition : name -> declarations )

  declare-theme =
    ?ThemeDefinition(mod, name, args, declarations)
    ; <fetch(?StyleDeclaration(StyleProperty("layout"), StyleValue(val1)))> declarations
    ; rules ( DeclaredLayout : name -> val1 )
    ; <fetch(?StyleDeclaration(StyleProperty("style"), StyleValue(val2)))> declarations
    ; if not( <elem> (<concat-strings> [val2, ".css"], <bagof-StylesheetsToInclude>) ) then
        rules ( StylesheetsToInclude :+= <concat-strings> [val2, ".css"] )
      end
    

rules

  typecheck-section =
    typecheck-style-section

  typecheck-definition =
    typecheck-theme-definition
    
  typecheck-definition =
    typecheck-layout-definition    
  
  
  typecheck-style-section =
    ?StyleSection(_, _)
  
  typecheck-theme-definition =
    ?ThemeDefinition(mods, name, args, decls)
    
  typecheck-layout-definition =
    ?LayoutDefinition(_, _)
    
/*  typecheck-style-definition:
    StyleSection(name, definitions) -> StyleSection(name, definitions) */


strategies

  gather-overloaded-templates =
    alltd(gather-overloaded-template)

  gather-overloaded-template =
    ?def@Define([Template()], name, fargs, body)
    ; if not(<elem> (def, <bagof-TopLevelTemplateDefinitions> name)) then
        rules (
          TopLevelTemplateDefinitions :+ name -> def
        )
      end


rules
  output-generated-file =
    css-file-to-file

signature
  constructors
    CssFile : String * String * Document -> File

strategies

  css-file-to-file =
    css-file-to-text-file
    ; try(text-file-to-file)

  css-file-to-text-file :
    CssFile(pkg, name, doc) -> TextFile(filename, text)
    where path := <create-dirs> pkg
            ; filename := <concat-strings> [path, "/", name]
            ; text := <pp-css-to-string <+ write-to-string> doc

