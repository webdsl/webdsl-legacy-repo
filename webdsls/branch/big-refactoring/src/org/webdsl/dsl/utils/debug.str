/**
 * Debugging strategies, originally defined in dryad-compiler/lib-ext/debug.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module org/webdsl/dsl/generation/utils/debug // dryad-compiler/lib-ext/debug

imports
  libstratego-lib

strategies

  /**
   * Writes a message to the standard output, without failing or changing the current term.
   * Only executed if the verbosity level is 2.
   */
  verbose-msg(a) = where(if-verbose2(<debug> <as-string(a)>))
  verbose-msg(a, b) =
    where(if-verbose2(<verbose-msg> [<as-string(a)>, <as-string(b)>]))
  verbose-msg(a, b, c) =
    where(if-verbose2(<verbose-msg> [<as-string(a)>, <as-string(b)>, <as-string(c)>]))
  verbose-msg(a, b, c, d) =
    where(if-verbose2(<verbose-msg> [<as-string(a)>, <as-string(b)>, <as-string(c)>,
                      <as-string(d)>]))
  verbose-msg(a, b, c, d, e) =
    where(if-verbose2(<verbose-msg> [<as-string(a)>, <as-string(b)>, <as-string(c)>,
                     <as-string(d)>, <as-string(e)>]))
  verbose-msg(a, b, c, d, e, f) =
    where(if-verbose2(<verbose-msg> [<as-string(a)>, <as-string(b)>, <as-string(c)>,
                     <as-string(d)>, <as-string(e)>, <as-string(f)>]))

  as-string(s) = s; as-string <+ !"<?>"
  as-string = is-string <+ write-to-string

  verbose-msg = 
    if-verbose2(
      map(is-string <+ write-to-string);
      separate-by(|" ");
      concat-strings;
      debug
    )

  verify(s) =
    ?input; verify(s, !"Internal error: failure unexpected")
  verify(s,message) =
    s <+ fatal-err(|<as-string(message)>)
  verify(s,m1,m2) =
    verify(s, <conc-strings> (<as-string(m1)>, " ", <as-string(m2)>))
  verify(s,m1,m2,m3) =
    verify(s, <conc-strings> (<as-string(m1)>, " ", <as-string(m2)>, " ", <as-string(m3)>))

  /**
   * Same as debug, but prints a abbreviated representation of the ATerm.
   * @see to-tiny-string
   */
  tiny-debug = where(to-tiny-string; debug)
  tiny-debug(prefix) = 
    where(<conc-strings; debug> (<as-string(prefix)>, <to-tiny-string>))

  /** Example: <to-tiny-string> [Invoke(Foo(x), [1,2]) => "[Invoke(Foo,[..])]" */
  to-tiny-string =
    map(to-tiny-string); 
    
    separate-by(|",");
    try(take(!6); <conc> (<id>, ["..."]));
    
    <conc-strings> ("[", <concat-strings>, "]")
  <+
    ?name#(<id>);
    if [] then
      <as-string> name
    else
      map( // Simplify each subterm
         [id]; !"[_]"
      <+ Hd; !"[..]"
      <+ Fst; !"(..)"
      <+ (); !"()"
      <+ []; !"[]"
      <+ ?<as-string>#(_)
      );
      
      separate-by(|",");      
      try(take(!6); <conc> (<id>, ["..."]));
      
      <conc-strings> (name, "(", <concat-strings>, ")")
    end
