/**
 * Generate a Seam EntityHome class for a declared entity
 */

module org/webdsl/dsl/generation/java-page

imports
  libstrategolib
  Java-15
  libjava-front

imports
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/syntax/HQL
  org/webdsl/dsl/utils/utils

rules // session bean from page definition

  GenerateCode = page-to-java; fail

  page-to-java =
    ?Define([Page()], x_page, args, elems1)
    ; info(|"Running page-to-java!")
    ; where( pkgname    := <BeanPackage>
           ; pkgname2   := <DomainPackage>
           ; x_Page     := <capitalize-string> x_page
           ; x_PageBean := <concat-strings> [x_Page, "Bean"]
           ; x_PageBeanInterface := <concat-strings> [x_Page, "BeanInterface"]
/*
           ; sents := <SessionEntities
                       ; filter(\ se@SessionEntity(nm, _, _) -> se
                                  where <oncetd(?Var(nm) <+ ?Qualified(nm, _))> elems1 \)>

           ; bstm0* := <map(session-entity-property-to-merge);concat> sents
           ; cbds6  := <map(session-inouts);concat> sents */

           ; cbds1  := <filter-concat-warn(argument-to-bean-property | "cannot generate bean property for argument: ")> args
           ; bstm1* := <filter-concat-warn(argument-to-initialization | "cannot generate initialization code for argument: ")> args
           ; cbds2  := <collect(action-to-bean-method)> elems1
           ; cbds3  := <collect(select-to-declarations); concat> elems1
           ; bstm3* := <collect(select-to-initialization); concat> elems1
           ; cbds4  := <collect-all(collection-to-declarations); concat> elems1
           ; bstm4* := <collect-all(collection-to-initialization); concat> elems1
           ; vdc*   := <get-page-vardecls> elems1
           ; cbds5  := <map(vardecl-to-member-variable); concat> vdc*
           ; bstm5* := <map(vardecl-to-initialization); concat> vdc*
           // @todo scoping of variables, conflicts between session, global and page vars
           ; bstm6* := <collect(initaction-to-initialization);concat> elems1
           ; cbds7 := <template-functions-to-java> <decapitalize-string> x_Page
           ; cbds8  := <add-email-properties(|x_page)> elems1
           ; cbds9  := <email-to-code(|x_page)> elems1
           ; cbds12 := <download-helper-function> elems1
           ; (class, interface) := <create-local-interface(|pkgname, pkgname2, x_PageBeanInterface)> JavaFile(["src"],compilation-unit|[
      package pkgname;
      import java.util.*;
      import java.io.Serializable;

      import static javax.persistence.PersistenceContextType.EXTENDED;

      import javax.persistence.PersistenceContext;
      import javax.persistence.EntityManager;

      import javax.faces.event.ValueChangeEvent;
      import javax.faces.context.FacesContext;
      import javax.faces.application.FacesMessage;

      import javax.ejb.Stateless;
      import javax.ejb.Stateful;
      import javax.ejb.Remove;

      import org.jboss.seam.ScopeType;
      import org.jboss.seam.annotations.Begin;
      import org.jboss.seam.annotations.End;
      import org.jboss.seam.annotations.Destroy;
      import org.jboss.seam.annotations.Name;
      import org.jboss.seam.annotations.Scope;
      import org.jboss.seam.annotations.Create;
      import org.jboss.seam.annotations.Logger;
      import org.jboss.seam.annotations.web.RequestParameter;
      import org.jboss.seam.annotations.datamodel.DataModel;
      import org.jboss.seam.annotations.datamodel.DataModelSelection;
      import org.jboss.seam.faces.FacesMessages;
      import org.jboss.seam.faces.Renderer;
      import org.jboss.seam.faces.Redirect;
      import org.jboss.seam.log.Log;

      import org.jboss.seam.annotations.In;
      import org.jboss.seam.annotations.Out;

      import org.jboss.seam.annotations.Factory;

      import pkgname2.*;

      @Stateful
      @Name(~string:String([Chars(x_page)]))
      public class x_PageBean implements x_PageBeanInterface {

        @Logger
        private Log log;

        //@PersistenceContext(type = EXTENDED)
        @In EntityManager entityManager;

        @In
        private FacesMessages facesMessages;
        
        @In
        private FacesContext facesContext;

        @In
        private Renderer renderer;

        @Create @Begin(join=true) @Partial
            public void initialize() {
              //log.info("~x_page" + ".initalize()");
              bstm1*
              bstm5*
              bstm3*
              bstm4*
              bstm6*
            }

        /* By calling forceInitialization the initialization of a bean is forced
             * This also enforces the execution of @Create annotated methods such as initialize()
             * When a bean is already active, nothing happens.
             */
        public void forceInitialization() {}

            @Destroy @Remove
            public void destroy() {}

            ~*cbds1
            ~*cbds2
            ~*cbds3
            ~*cbds4
            ~*cbds5
            ~*cbds7
            ~*cbds8
            ~*cbds9
            ~cbds12
            
            public FacesContext getFacesContext() {
              return this.facesContext;
            }
            
            public String getHostName() {
              return "http://" + this.facesContext.getExternalContext().getRequestHeaderMap().get("host");
            }
      }
    ]|)
           //; <emit-java-code> interface
           ; <emit-java-code> class)
           

        // @todo not all beans need to declare initialize to @Begin a conversation

  //only include global functions that are actually used
  used-global-functions-code(|x_page,elems1)=
    <map(function-to-function-code(|[]))> <used-global-functions-defs(|x_page,elems1)>
    
  used-global-functions-defs(|x_page,elems1)=
    <filter(add-functions-referenced-in-functions); !<once-all-functions-used-in-page <+ ![]> > //need to get all the functions referenced in functions
      <filter(\ fu@Function(nm, _, _, _) -> fu where <oncetd(?ThisCall(nm, _))> elems1  //call to function in page
                                                  <+ <oncetd(?ThisCall(nm, _))>
                                                       <retain-all(?(x_page, _, _, _))>
                                                         <AllTemplateFunctions> \)>     //call to function in if-template
        <global-functions <+ ![]>
          

               
  add-functions-referenced-in-functions:
    fu@Function(nm,fa,s,bl) -> fu
    where if <elem> (fu,<all-functions-used-in-page <+ ![]>) then fail end //stop recursion
        ; referenced := <filter(\fu@Function(nm, _, _, _) -> fu where <oncetd(?ThisCall(nm, _))> bl \)> <global-functions <+ ![]>
        ; rules (all-functions-used-in-page := <concat> [[fu],<all-functions-used-in-page <+ ![] > ])
        ; <filter(add-functions-referenced-in-functions)> referenced //recursion

rules
  global-var-retrieval-for-xhtml :
    VarDeclInit(x_name, x_sort, e1) ->
    class-body-dec |[
       public x_thetype x_methodname()
       {
         return (x_thetype) entityManager.find (x_thetype.class, x_type.valueOf((String)org.jboss.seam.contexts.Contexts.getApplicationContext().get(x_varname)));
       }
    ]|
    where x_methodname := <property-getter> x_name
        ; SimpleSort(x_thetype) := x_sort
        ; if <EntityIdName> x_thetype then
            x_type := <sort-to-java-type-string> <EntityIdType> x_thetype
          else
            x_type := "Long"
          end
        ; x_varname := <concat-strings> ["\"global-declaration-",x_name,"\""]

rules //session variables
  GenerateCode = // generate session entity code
    ?Define([Page()], x_page, args, elems1)
    ; info(|"Generating session variable code")
    ; where(pkgname    := <BeanPackage>
          ; x_Page     := <capitalize-string> x_page
          ; x_PageBean := <concat-strings> [x_Page, "Bean"]
          ; sents := <SessionEntities; filter(\ se@SessionEntity(nm, _, _) -> se
               where <oncetd(?Var(nm) <+ ?Qualified(nm, _))> elems1 \)>
          ; bstm1* := <map(session-entity-property-to-merge);concat> sents
          ; cbds1  := <map(session-inouts);concat> sents
          ; <emit-java-code> JavaFile(["src"], compilation-unit|[
		      package pkgname;
		
		      public class x_PageBean {
    	         @Partial
		         public void initialize() {
		           ~*bstm1*
		         }
		         ~*cbds1
		      } ]|))
    ; fail


  session-inouts :
    SessionEntity(x_ident, _, _) ->
        class-body-dec*
        |[
               @org.jboss.seam.annotations.In(create=true) @org.jboss.seam.annotations.Out private x_ent x_ident;

               public void x_set(x_ent x_ident) {
                 this.x_ident = x_ident;
               }

               public x_ent x_get() {
                 return x_ident;
               }
                ]|
    where x_get := <property-getter> x_ident
        ; x_set := <property-setter> x_ident
        ; x_ent := <capitalize-string> x_ident

  //merge references inside session entities at page initialization
  session-entity-property-to-merge:
    SessionEntity(x_ident, _, _) -> bstm0*
    where classofsession := <TypeOf> x_ident
        ; SimpleSort(classname) := classofsession
        ; props := <Properties> classname
        ; bstm0* := <filter(session-entity-property-to-merge(|x_ident))> props

  session-entity-property-to-merge(|x_ident):
    Property(x, k, s, annos) -> |[
         if (x_ident.x_get()!=null) {
           //x_ident.x_set(entityManager.merge(x_ident.x_get())); old setup, slower(?)
           x_ident.x_set(entityManager.find(x_class.class,x_ident.x_get().x_getid())); 
         }
     ]|
    where <defined-java-type> s
         ; x_get := <concat-strings>["get", <capitalize-string> x]
         ; x_set := <concat-strings>["set", <capitalize-string> x]
         ; SimpleSort(t) := s
         ; if <EntityIdName> t then
             x_type := <sort-to-java-type-string> <EntityIdType> t
           ; x_getid := <concat-strings>["get", <capitalize-string> <EntityIdName> t]
           else
             x_type := "Long"
           ; x_getid := "getId"
           end
         ; x_class := <sort-to-java-type-string> s
        
rules // bean parameters

  argument-to-bean-property :
    Arg(x, s@SimpleSort(x_Class)) ->
    |[
       @RequestParameter("~x")
       private t x_Id;

       private x_Class x;

       public void x_set(x_Class x) {
         //log.info("~x_set");
         this.x = x;
       }

       public x_Class x_get() {
         //log.info("~x_get");
         return x;
       }
    ]|
    where <defined-java-type> s
        ; x_Id := <concat-strings>[x, "Id"]
        ; x_get := <property-getter> x
        ; x_set := <property-setter> x
        ; if <EntityIdName> x_Class then
            t := <java-wrapper-type> <EntityIdType> x_Class
          else
            t := type|[ Long ]|
          end

  argument-to-bean-property :
    Arg(x, s@SimpleSort(x_Class)) ->
    |[
       @RequestParameter("~x")
       private x_Class x;

       public void x_set(x_Class x) {
         //log.info("~x_set");
         this.x = x;
       }

       public x_Class x_get() {
         //log.info("~x_get");
         return x;
       }
    ]|
    where <builtin-java-type> s
        ; x_get := <property-getter> x
        ; x_set := <property-setter> x

  argument-to-initialization :
    Arg(x, s@SimpleSort(x_Class)) ->
    bstm*|[
          if (x_Id == null) {
            //log.info("No " + "~x_Id" + " defined, creating new " + "~x_Class");
            x = new x_Class();
          } else {
            x = entityManager.find(x_Class.class, x_Id);
            if(x == null) { // Is this a good idea?
              x = new x_Class();
              x.setId(x_Id);
            }
         }
    ]|
    where <defined-java-type> s
        ; x_Id := <concat-strings>[x, "Id"]
        ; rules( Parameter :+= x )

  argument-to-initialization :
    Arg(x, s@SimpleSort(x_Class)) ->
    bstm*|[
          if (x == null) {
            x = new x_Class();
          }
    ]|
    where <builtin-java-type> s
        ; rules( Parameter :+= x )

rules // action methods

  action-to-bean-method =
    action-to-java-method

  // @todo what does it mean to delete an object?

  initaction-to-initialization:
    InitAction(Block(statements)) -> <statements-to-java> statements

rules // view transition

//  call-to-view-string :
//    ThisCall(p,args) -> e
//    where <IsPage> p
//        ; fargs := <TemplateArguments> p
//        ; params := <zip(view-string-bind-param)> (fargs, args)
//        ; e := <page-call-to-java-url> (p, params)
//
  call-to-view-string :
    ThisCall(p,args) -> |[ "/" + "~p" + ".seam?" + e ]|
    where <IsPage> p
        ; fargs := <TemplateArguments> p
        ; params := <zip(view-string-bind-param)> (fargs, args)
        ; e := <foldr(!|[ "" ]|, add-string-expressions)> params

  add-string-expressions :
    (e1, e2) -> |[ e1 + e2 ]|

//  view-string-bind-param :
//    (Arg(x, s@SimpleSort(x_Class)), e) -> (x, e)
//    where <defined-java-type> s
//
//  page-call-to-java-url :
//    (fn, []) -> |[ "/" + "~fn" ]|
//
//  page-call-to-java-url :
//    (fn, [fst]) -> |[ "/" + "~fn" + "/" + e.getId() ]|
//    where (_, fid) := fst
//        ; e := <arg-to-java-exp> fid
//
//  page-call-to-java-url =
//    ?(fn, [fst|[snd|rest]])
//    ; info(|["page calls with more than one argument are not implemented yet."])
//    ; fail
//
//  param-to-request-param :
//    (param, value) -> <concat-strings> [param, "=", value]
//
  view-string-bind-param :
    (Arg(x, s@SimpleSort(x_Class)), e1) -> |[ "~x" + "=" + e2 ]|
    where <builtin-java-type> s
        ; e2 := <arg-to-java-exp> e1

  view-string-bind-param :
    (Arg(x, s@SimpleSort(x_Class)), e1) -> |[ "~x" + "=" + e2.getId() ]|
    where <defined-java-type> s
        ; e2 := <arg-to-java-exp> e1

  arg-to-java-exp :
    Var(x){Type(t)} -> |[ x ]|
    where not(<eq>(t, "Component"))

  arg-to-java-exp :
    FieldAccess(Var(x){Type("Component")}, y) -> |[ y ]|

  arg-to-java-exp :
    FieldAccess(e1, y) -> |[ e2.y_get() ]|
    where e2 := <arg-to-java-exp> e1
        ; y_get := <concat-strings>["get", <capitalize-string> y]

  arg-to-java-exp :
    Call(e1, x, e2*) -> |[ e3.x(e4*) ]|
    where e3 := <arg-to-java-exp> e1
        ; e4* := <map(arg-to-java-exp)> e2*

  arg-to-java-exp :
    ThisCall(x, e1*) -> |[ x(e2*) ]|
    where e2* := <map(arg-to-java-exp)> e1*


rules // collections

  collection-to-java(|x, x_Class) =
      dbg(|"select-declarations match: ")
    ; X          := <capitalize-string> x
    ; x_List     := <concat-strings>[x, "List"]
    ; x_getList  := <concat-strings>["get", X, "List"]
    ; x_initList := <concat-strings>["init", X, "List"]
    ; !|[
          @DataModel(~string:String([Chars(x_List)]))
          private List<x_Class> x_List;

          public List<x_Class> x_getList() {
            //log.info("~x_getList");
            return x_List;
          }

          @Factory(~string:String([Chars(x_List)]))
          public void x_initList() {
            //log.info("~x_initList");
            x_List = entityManager.createQuery("from " + "~x_Class").getResultList();
          }
       ]|

  collection-init-to-java(|x) =
      X          := <capitalize-string> x
    ; x_initList := <concat-strings>["init", X, "List"]
    ; ! bstm*|[ x_initList(); ]|

rules // tables

  collection-to-declarations :
    TemplateCallDeclaredType("table", x, SimpleSort(x_Class), columns) ->
      <collection-to-java(|x, x_Class)>

  collection-to-initialization :
    TemplateCallDeclaredType("table", x, SimpleSort(x_Class), columns) ->
      <collection-init-to-java(|x)>

rules // for all: for(x : s) { ... }

  collection-to-declarations :
    ForAll(x, SimpleSort(x_Class), _, elems) ->
      <dbg(|"forall-declarations success: ")
        ; collection-to-java(|x, x_Class)>

  collection-to-initialization :
    ForAll(x, SimpleSort(x_Class), _, elems) ->
      <collection-init-to-java(|x)>

rules // select

  select-to-declarations :
    Select(x, SimpleSort(x_Class), label, e1) -> <dbg(|"select-declarations success: ")>
    |[
/*      private String x_new;

          public void x_setNew(String p) {
                x_new = p;
          }

          public String x_getNew() {
                return x_new;
          }


    public void addPerson(ValueChangeEvent event) {
        log.info("addPerson" + " " + newPerson22);
        log.info("addPerson: new value = " + event.getNewValue());
        Person person22 = entityManager.find(Person.class, new Long((String)event.getNewValue()));
        addPerson0(person22);
    }

      public void x_select(ValueChangeEvent event) {
        log.info("~x_select" + ": new value = " + " " + event.getNewValue());
        Long id = new Long((String)event.getNewValue());
        if (id > 0) {
          x_Class x = entityManager.find(x_Class.class, id);
          e2;
        }

      }
*/

      @DataModel(~string:String([Chars(x_List)]))
      private List<x_Class> x_List;

      public List<x_Class> x_getList() {
        return x_List;
      }

      @Factory(~string:String([Chars(x_List)]))
      public void x_initList() {
        //log.info("~x_initList");
        x_List = entityManager.createQuery("from " + "~x_Class").getResultList();
      }

/*	  @Factory(~string:String([Chars(x_List)]))
      public void x_initList() {
        log.info("~x_initList");
        x_List = new HashMap<String, String>();
        for (Object o : entityManager.createQuery("from " + "~x_Class").getResultList()) {
            x_Class p = (x_Class) o;
            x_List.put(p.getName(), p.getId().toString());
        }
      }*/
    ]|
    where dbg(|"select-declarations match: ")
        ; X          := <capitalize-string> x
        ; x_new      := <concat-strings>["new", X]
        ; x_getNew   := <concat-strings>["getNew", X]
        ; x_setNew   := <concat-strings>["setNew", X]
        ; x_select   := <concat-strings>["select", X]
        ; x_List     := <concat-strings>[x, "List"]
        ; x_getList  := <concat-strings>["get", X, "List"]
        ; x_initList := <concat-strings>["init", X, "List"]
        ; dbg(|"select-to-declarations names: ")
        ; e2          := <arg-to-java-exp> e1
        ; dbg(|"select-to-declarations java-exp: ")

  select-to-initialization :
    Select(x, SimpleSort(x_Class), label, e) ->
    bstm*|[ x_initList(); ]|
    where X          := <capitalize-string> x
        ; x_initList := <concat-strings>["init", X, "List"]

rules // template expression functions
   template-functions-to-code = []
//     (x_fn, e) -> |[
//       public boolean x_fn(
rules // page variables


  vardecl-to-initialization :
    VarDecl(x, s) -> bstm*|[ ]|

  vardecl-to-initialization :
    VarDeclInit(x, s, e1) -> bstm*|[ x = e2; ]|
    where not(HqlQuery(_) := e1)
        ; e2 := <expression-to-java> e1

  vardecl-to-member-variable :
    VarDecl(x, s) -> |[
      private t x;

      public t x_get() {
        //log.info("~x_get");
        return x;
      }

      public void x_set(t x) {
        //log.info("~x_set");
        this.x = x;
      }
    ]|
    where t     := <java-type> s
        ; X     := <capitalize-string> x
        ; x_get := <concat-strings>["get", X]
        ; x_set := <concat-strings>["set", X]

  vardecl-to-member-variable :
    VarDeclInit(x, s, e) -> <vardecl-to-member-variable> VarDecl(x, s)
    where not(HqlQuery(_) := e)

rules // page-level variables with query initializers

  vardecl-to-member-variable :
    VarDeclInit(x, s, HqlQuery(e1)) ->
    |[
       @DataModel(~string:String([Chars(x)]))
       private t x;

       public t x_get() {
         //log.info("~x_get");
         return x;
       }

       public void x_set(t x) {
         //log.info("~x_set");
         this.x = x;
       }

           @Factory(~string:String([Chars(x)]))
       public void x_init() {
         //log.info("~x_init");
         x = e2.getResultList();
       }
    ]|
    where t      := <java-type> s
        ; e2     := <query-to-create-query> e1
        ; X      := <capitalize-string> x
        ; x_init := <concat-strings>["init", X]
        ; x_get  := <concat-strings>["get", X]
        ; x_set  := <concat-strings>["set", X]

  vardecl-to-initialization :
    VarDeclInit(x, s, HqlQuery(_)) -> bstm*|[
      x_init();
    ]|
    where x_init := <concat-strings>["init", <capitalize-string>x]

  query-to-create-query :
    e -> <repeat(once-AddQueryParameter)> |[ entityManager.createQuery("~q") ]|
    where q := <alltd(replace-parameter); pp-hql-to-string; trim-chars('\n')> e

  replace-parameter :
    DslExp(e1) -> IdParam(x2)
    where x1  := <newname> "param"
        ; x2 := <concat-strings>[":", x1]
        ; e2 := <expression-to-java> e1
        ; rules(
            AddQueryParameter :+ e -> |[ e.setParameter("~x1", e2) ]|
          )

rules // For generating template functions

   template-functions-to-java :
     page -> function*
     where  pkgname := <Package>
         ; pkgname2 := <DomainPackage>
         ; functions := <retain-all(?(page, _, _, _))> <AllTemplateFunctions>
         ; function* := <map(template-function-to-java)> functions

   template-function-to-java :
     (page, x_fn, params, e) -> |[
       public t x_fn(param*) {
         stm
       } ]|
     where {| InFunction, TransformParameterName
            : param* := <map(template-function-param-to-java)> params
            ; <?_{Type(wt)}> e
            ; t := <java-type> wt
            ; rules ( InFunction := "Yes" )
            ; e2 := <try(sometd(replace-template-call-params))> e
            ; stm := <statement-to-java> <try(desugar-any)> Return(e2)
            |}

   replace-template-call-params :
     FieldAccess(e, x) {Type(s)} -> Var(y) {Type(s)}
     where y := <TransformParameterName> x

   replace-template-call-params :
     Var(x) {Type(s)} -> Var(y) {Type(s)}
     where y := <TransformParameterName> x

   template-function-param-to-java :
     FieldAccess(_, x) {Type(s)} -> |[ t y ]|
     where t := <java-type> s
         ; y := <newname> "param"
         ; rules ( TransformParameterName : x -> y )

   template-function-param-to-java :
     Var(x) {Type(s)} -> |[ t y ]|
     where t := <java-type> s
         ; y := <newname> "param"
         ; rules ( TransformParameterName : x -> y )


rules // Email functionality

  email-to-code(|page) =
    if <oncetd(?ThisCall("email", [_]))> <id> then
      list_property := <GetEmailArgumentsList> page
      ; x_set := <property-setter> list_property
      ; ! class-body-dec* |[
        public void sendEmail(String template, ArrayList _list) {
          x_set(_list);
              try {
                renderer.render(template);
                facesMessages.add("Email sent successfully");
              } catch (Exception ex) {
                 log.error("Error sending mail", ex);
                 facesMessages.add(FacesMessage.SEVERITY_INFO, "Email sending failed: " + ex.getMessage());
              }
        }
      ]|
    else
      ![]
    end

  add-email-properties(|page) =
    if <oncetd(?ThisCall("email", [_]))> <id> then
            x := <GetEmailArgumentsList> page
        ; X     := <capitalize-string> x
        ; x_get := <concat-strings>["get", X]
        ; x_set := <concat-strings>["set", X]
        ; ! |[
              private ArrayList x;

              public ArrayList x_get() {
                //log.info("~x_get");
                return x;
              }

              public void x_set(ArrayList x) {
                //log.info("~x_set");
                this.x = x;
              }
            ]|
    else
      ![]
    end

  download-helper-function = 
    if <oncetd(?TemplateCall("outputFile",[e],[]))> <id> then
      e0 := <expression-to-java> e ; 
      ! |[
        public void download() {
          org.webdsl.tools.Utils.download(facesContext, e0.getData(), e0.getName(), e0.getContenttype());
        }
      ]|
    else
      ![]
    end
