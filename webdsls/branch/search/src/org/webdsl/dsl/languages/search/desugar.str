module org/webdsl/dsl/languages/search/desugar

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/languages/search/-

rules

  desugar-search:
	p@Property(name,propkind,srt,anno*) -> Property(name,propkind,srt,anno')
	where(<fetch(anno-needs-desugaring)> anno*
	 ; anno' := <map(try(desugar-searchable-anno(|name)))> anno*)

  desugar-search:
	p@DerivedProperty(name, propkind, srt, anno*, e) -> DerivedProperty(name, propkind, srt, anno', e)
	where(<fetch(anno-needs-desugaring)> anno*
	 ; anno' := <map(try(desugar-searchable-anno(|name)))> anno*)
	       
  desugar-search:
  	TokenFilterNoArgs(t) -> TokenFilter(t, [])
  desugar-search:
  	TokenizerNoArgs(t) -> Tokenizer(t, [])
  desugar-search:
  	CharFilterNoArgs(t) -> CharFilter(t, [])
  
  desugar-search:
  	CharFilter(name,args) -> CharFilter(name',args)
  	where not (<string-ends-with(|"Factory")> name)
  		; name' := <concat-strings> [name,"Factory"]
  		  
  desugar-search:
  	Tokenizer(name,args) -> Tokenizer(name',args)
  	where not (<string-ends-with(|"Factory")> name)
  		; name' := <concat-strings> [name,"Factory"]
  		  
  desugar-search:
  	TokenFilter(name,args) -> TokenFilter(name',args)
  	where not (<string-ends-with(|"Factory")> name)
  		; name' := <concat-strings> [name,"Factory"]
  	
  desugar-searchable-anno(|name):
    SearchableAnno() -> SearchableAnno([SA-Argument("name", name),SA-Argument("analyzer", "default")])

  desugar-searchable-anno(|name):
    SearchableAnno -> SearchableAnno([SA-Argument("name", name),SA-Argument("analyzer", "default")])	

  desugar-searchable-anno(|name):
  	SearchableAnno() -> SearchableAnno([SA-Argument("name", name),SA-Argument("analyzer", "default")])

  desugar-searchable-anno(|name):
  	SearchableAnnoBoost(SearchableAnno(sa-args),boost) -> SearchableAnno([SA-Argument("boost", boost) | sa-args])
  
  desugar-searchable-anno(|name):
  	SearchableAnnoBoost(SearchableAnno ,boost) -> SearchableAnno([SA-Argument("boost", boost)])  
  	
  desugar-searchable-anno(|name):
  	SearchableAnno(sa-args) -> SearchableAnno([SA-Argument("name", name) | sa-args])
  	where not (<fetch(?SA-Argument("name", _))> sa-args)
  	
 desugar-searchable-anno(|name):
  	SearchableAnno(sa-args) -> SearchableAnno([SA-Argument("analyzer", "default") | sa-args])
  	where not (<fetch(?SA-Argument("analyzer", _))> sa-args)
  
  anno-needs-desugaring= ?SearchableAnno()
  anno-needs-desugaring= ?SearchableAnno(sa-args);not (<fetch(?SA-Argument("name", _))> sa-args;<fetch(?SA-Argument("analyzer", _))> sa-args)
  anno-needs-desugaring= ?SearchableAnnoBoost(_,_)