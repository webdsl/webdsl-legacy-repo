module org/webdsl/dsl/languages/data-model/static-functions

imports
  libstrategolib

imports
  libwebdsl-front

rules

  static-function-name: f -> $[_static_[f]]

	// x_class 			classname of entity to declare function in
	// x_funcname 	name of static function in entity
	// This declares the given global function, but calls to it are desugared to x_class.x_funcname() 
	declare-static-function(|x_class, x_funcname) =
	   (?f@Function(globalname,args,retsrt,body){anno*}
	    <+ ?f@FunctionNoReturn(globalname,args,body){anno*})
	  ; with (
	        // Declare global version
		      <declare> f
          // Store static version to rewrite calls
        ; argtypes := <map(\Arg(_,srt) -> srt\)> args
          // Rename the function to avoid collision with user-defined functions
          // (there is no way to declare or reserve static functions yet)
        ; x_funcname2 := <static-function-name> x_funcname
        ; rules(
            StaticSignatures :+ globalname -> (x_class, x_funcname2, argtypes)
          )
     )
          
  declare-emit-static-function(|x_class, x_funcname) =
      (?f@Function(globalname,args,retsrt,body){anno*}
      <+ ?f@FunctionNoReturn(globalname,args,body){anno*})
    ; with (
          declare-static-function(|x_class, x_funcname)
        ; anno2* := <concat> [anno*, [StaticFunctionAnno()]]
        ; fun2 := Function(<static-function-name> x_funcname,args,(<!retsrt<+!Void()>),body){anno2*}
        ; <emit-webdsl-code-no-declare> def|[
            extend entity x_class {
              fun2
            }
          ]|
		)
		
rules

	add-backend-annotation =
			?ThisCall(name, args)
		; has-no-anno(?StaticFunctionCallAnno(_,_))
		; where(
				argtypes := <map(type-of)> args 
			; sigs := <bagof-StaticSignatures> name
			; anno := <filter(signature-to-static-anno(|argtypes)); Hd> sigs
		)
		; add-anno(|anno)
	
	signature-to-static-anno(|args):
		(entname, funcname, fargs) -> StaticFunctionCallAnno(entname, funcname)
		where(<zip(type-compatible)> (fargs,args))
