module org/webdsl/dsl/languages/search/declare

imports
  libstrategolib

imports
  libwebdsl-front
  libjava-front
  org/webdsl/dsl/languages/search/-

rules

//   declare-search:
//     s@SearchConfig(name, body) -> s
//     with analyzer-def := <to-analyzer-def> body
//     	; rules(
//     	
//     )
//     
//   to-analyzer-def:
//   	SearchConfigBody(charFilters*, tokenizer, tokenFilters*) -> result
//   	with charFiltersDefs := <map(to-char-filter-def)> charFilters*
//   	; tokenizerDef := <to-tokenizer-def> tokenizer
//   	; tokenFilterDefs := <map(to-token-filter-def)> tokenFilters*  	  
//   	; result := []
//   	  
// //   	@AnalyzerDef(name="standardanalyzer",
// //			tokenizer =
// // 				@TokenizerDef(factory = StandardTokenizerFactory.class ),
// // 			filters = {
// // 		  @TokenFilterDef(factory = StandardFilterFactory.class),
// // 		  @TokenFilterDef(factory = LowerCaseFilterFactory.class),
// // 		  @TokenFilterDef(factory = StopFilterFactory.class) 
// //			} 
// //		)
// 
//   	  
//   to-char-filter-def:
//   	CharFilter(x_filtername, args) -> []
//   	with
//   		factoryarg* := anno|[ @CharFilterDef(factory = ~x_filtername , ) ]|
//   	
//   to-tokenizer-def:
//   	Tokenizer(filtername, args) -> []
//   	
//   to-token-filter-def:
//   	TokenFilter(filtername, args) -> []