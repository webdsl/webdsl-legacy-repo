module org/webdsl/dsl/languages/data-model/entity-events

imports
  libstratego-lib
imports
  libwebdsl-front

rules

  desugar-data = desugar-entity-events

  desugar-entity-events :
    ent@SessionEntity(x_class, _) -> ent
    where <desugar-entity-events-helper> x_class

  desugar-entity-events :
    ent@Entity(x_class, _, _) -> ent
    where <desugar-entity-events-helper> x_class

  desugar-entity-events :
    ent@EntityNoSuper(x_class, _) -> ent
    where <desugar-entity-events-helper> x_class

  desugar-entity-events-helper :
    x_class -> x_class
    where not(<EntityEventFunctionsGenerated> x_class )
        ; ebd* := <get-extensible-functions-for-entity-events> x_class
        ; not(?[])
    with  <emit-webdsl-code> def |[
            extend entity x_class {
              ebd*
            }
          ]|
        ; rules ( EntityEventFunctionsGenerated : x_class )

strategies //declare

  extend-entity-declare =
      ?Entity(x_class,_,_)
    ; funcs := <get-extensible-functions-for-entity-events> x_class
    ; <map(declare-no-overloading(|x_class))> funcs
    ; <map(declare-function(|x_class))> funcs
    ; fail

rules  // also used in transformation/entity-events

  get-extensible-functions-for-entity-events :
    x_class -> result
    with  x_namecons := x_class
        ; result := [
            fun |[
              function x_namecons():Void {}
            ]|
          ]
        // ; rules ( EntityEvents :+ x_class -> "constructor") //not used?

