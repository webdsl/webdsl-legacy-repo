module org/webdsl/dsl/languages/action/for-stmt

imports
  libstrategolib

imports
  libwebdsl-front

rules

  normalize-constructor :
    ForStmtNoFilter(x, s, e, block){anno*} -> ForStmt(x, s, e, None(), block){anno*}

  normalize-constructor :
    ForAllStmtNoFilter(x, s, block){anno*} -> ForAllStmt(x, s, None(), block){anno*}

rules

  rename-action :
    fs@ForStmt(x, srt, e1, f1, b1) -> ForStmt(y, srt2, e2, f2, b2)
    with e2 := <rename-all> e1
       ; {| Rename, VarInTemplateContext
          : srt2 := <rename-all> srt
          ; y := <rename-bound-immutable(|srt2)> x
          ; rules(VarDecl : y -> fs)
          ; <declare-vars-in-entity-context> y
          ; f2 := <rename-all> f1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    fs@ForAllStmt(x, srt, f1, b1) -> ForAllStmt(y, srt2, f2, b2)
    with {| Rename, VarInTemplateContext
          : srt2 := <rename-all> srt
          ; y := <rename-bound-immutable(|srt2)> x
          ; rules(VarDecl : y -> fs)
          ; <declare-vars-in-entity-context> y
          ; f2 := <rename-all> f1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    fs@ForCountStmt(x, e1, e2, b1) -> ForCountStmt(y, e3, e4, b2)
    with e3 := <rename-all> e1
       ; e4 := <rename-all> e2
       ; {| Rename, VarInTemplateContext
          : y := <rename-bound-immutable(|SimpleSort("Int"))> x
          ; rules(VarDecl : y -> fs)
          ; <declare-vars-in-entity-context> y
          ; b2 := <rename-all> b1
          |}

rules

  constraint-error-action : ForCountStmt(x, e1, e2, b) -> <expression-type-constraint(|SimpleSort("Int"))> e1
  constraint-error-action : ForCountStmt(x, e1, e2, b) -> <expression-type-constraint(|SimpleSort("Int"))> e2

  expression-type-constraint(|type) :
    e -> <add-error(|["Expression should be of type ",typename])>
    with  SimpleSort(typename) := type
    where not(<type-compatible> (type, <type-of> e))

  constraint-error-action : ForStmt(_, srt, e, _, _)      -> <for-constraint-error(|srt, e)>
