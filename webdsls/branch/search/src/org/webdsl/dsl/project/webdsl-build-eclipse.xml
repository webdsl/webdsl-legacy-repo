<project name="webdsl-build-eclipse" default="eclipse-build">

  
  <condition property="stratego-jar-cp" value="${eclipse.strategoxt.strategojar}">
    <isset property="eclipse.running"/>
  </condition>

  
  <target name="generate-uuid" description="Generates a UUID">
    <script language="javascript">
      <![CDATA[
                importClass(java.util.UUID);
                var id = UUID.randomUUID();
                project.setProperty("build-id",id.toString());
        ]]>
    </script>
    <echo>generated uuid: ${build-id}</echo>
  </target>

  
  <target name="get-build-id">
    <if>
      <not><isset property="build-id" /></not>
    <then>
      <antcallback target="generate-uuid" return="build-id"/>
    </then>
    </if>
    <echo>build-id: ${build-id}</echo>
  </target>

  
  <property name="path.saved.but.not.built" value="${currentdir}/.saved-but-not-built" />

  <target name="check-app-file-changed">
     <available file="${path.saved.but.not.built}" property="is-saved-but-not-built"/>
     <fail status="0" unless="is-saved-but-not-built" message="Build stopped because no .app file was changed."/>
  </target>
  
  
  <target name="eclipse-build" depends="clean-if-editor-updated, clean-if-project-converted, check-app-file-changed, get-build-id">
    <!-- command-line builds use .servletapp, plugin uses WebContent -->
    <property name="generate-dir" value="WebContent"/>

    <!-- remove completed build id -->
    <property name="path.build.completed" value="${currentdir}/.servletapp/.last-build-id-completed" />
    <property name="path.builder.started" value="${currentdir}/.servletapp/.webdsl-project-builder-started" />
    <available file="${path.build.completed}" property="previous-build-was-completed"/>
    <!--<echo>CURRENT BUILD ${previous-build-was-completed}</echo>-->
    <delete file="${path.build.completed}" failonerror="false" />
    <!-- now that ${path.build.completed} is removed the webdsl builder lock file ${path.builder.started} can be removed as well, that way the builder can execute once again -->
    <delete file="${path.builder.started}" failonerror="false" />
    
    <!-- write build-id, so the java-based webdsl builder (that starts the server) can pick it up -->
    <property name="path.build.id" value="${currentdir}/.servletapp/.last-build-id" />
    <mkdir dir="${currentdir}/${generate-dir}/"/>
    <echo file="${path.build.id}">${build-id}</echo>

    <if>
      <equals arg1="${previous-build-was-completed}" arg2="$${previous-build-was-completed}" />
      <then>
        <antcall target="build-without-java-compile"/>
      </then>
      <else>
        <antcall target="build-without-java-compile-without-template-copy"/>
      </else>
    </if>

    <property name="webcontentdir" value="${currentdir}/WebContent"/>

    <copy file=".servletapp/web.xml" preservelastmodified="true" todir="WebContent/WEB-INF"/>

    <!--
    <copy preservelastmodified="true" todir="${webcontentdir}/WEB-INF/lib">
      <fileset dir="${generate-dir}/WEB-INF/lib">
        <exclude name="javaee.jar" />
      </fileset>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}">
      <fileset dir="${generate-dir}/html"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}/images">
      <fileset dir="${generate-dir}/images"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}/stylesheets">
      <fileset dir="${generate-dir}/stylesheets"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}/javascript">
      <fileset dir="${generate-dir}/javascript"/>
    </copy>
    <copy preservelastmodified="true" todir="${webcontentdir}">
      <fileset dir="${generate-dir}">
        <include name="webdsl-reindex"/>
        <include name="build.reindex.xml"/>
        <include name="build.properties"/>
        <include name="html/index.jsp"/>
        <include name="html/favicon.ico"/>
        <include name="build.properties"/>
      </fileset>
    </copy>
    -->
    <ant dir="${currentdir}/.servletapp" antfile="${currentdir}/.servletapp/build.xml" target="configure"/>
    <copy overwrite="true" todir="${webcontentdir}/WEB-INF/classes">
      <fileset dir=".servletapp/src-template">
        <include name="hibernate.properties"/>
        <include name="email.properties"/>
        <include name="log4j.properties"/>
      </fileset>
    </copy>

    <antcall target="fix-classpath"/>
    <!-- generate xml files if clean build -->
    <!--
    <if>
      <equals arg1="${previous-build-was-completed}" arg2="$${previous-build-was-completed}" />
      <then>
        <antcall target="generate-ant-build-files"/>
      </then>
    </if>
    -->
    
    <!-- refresh before running the Eclipse Java compiler, otherwise not all java files will be compiled (occasionally) -->
    <antcall target="refresh"/>
    <antcall target="run-eclipse-build"/>
    <!--<antcall target="poll-deployed-app-for-new-build-id"/>  now handled in webdsl builder, which runs after this -->

    <!-- show that build has finished -->
    <echo file="${path.build.completed}">${build-id}</echo>
    <delete file="${path.saved.but.not.built}" failonerror="false" />
    
    <antcall target="schedule-refresh"/>
  </target>

  <!--
  <target name="poll-deployed-app-for-new-build-id" depends="load-config">
    <script language="javascript"><![CDATA[
      importClass(java.net.URL);
      importClass(java.io.BufferedReader);
      importClass(java.io.InputStreamReader);
      importClass(java.lang.Thread);

      echo = project.createTask("echo");
      var projectname = project.getProperty("appname");
      var buildid = project.getProperty("build-id");

      var url = new URL("http://localhost:8080/"+projectname+"/?show_build_id=true");
      echo.setMessage("URL: "+url);
      echo.perform();
      var searchfor = "build-id:"+buildid;
      echo.setMessage("searching for: "+searchfor);
      echo.perform();

      var found = false;
      var tries = 10;
      while(tries > 0 && !found){
        tries = tries - 1;
        try {
          var instream = new InputStreamReader(url.openStream());
          var inreader = new BufferedReader(instream);
          var inputLine = inreader.readLine();
          while (inputLine != null) {
            if(inputLine.contains(searchfor)){ found=true; }
            inputLine = inreader.readLine();
          }
          inreader.close();
        } catch (e) {
          //echo.setMessage(e);
          //echo.perform();
        }

        try {
          Thread.sleep (1000);
        } catch (e) {
          //echo.setMessage(e);
          //echo.perform();
        }
      }
      if(found){
        echo.setMessage("Application deployed.");
      }
      else{
        echo.setMessage("Application not deployed yet.");
      }
      echo.perform();
      if(found){
      project.setProperty("found-newly-deployed-app","true");
      }
    ]]></script>
    <if>
      <isset property="found-newly-deployed-app" />
    <then>
      <antcall target="open-app-in-browser" />
    </then>
    <else>
      <echo>(Re)start the Tomcat server in the 'Servers' view.</echo>
    </else>
    </if>
  </target>
  -->
  <!--
  <target name="open-app-in-browser">
    <script language="javascript"><![CDATA[
      importClass(org.eclipse.ui.browser.IWorkbenchBrowserSupport);
      importClass(org.eclipse.wst.server.ui.internal.ServerUIPlugin);
      importClass(org.eclipse.ui.browser.IWebBrowser);
      importClass(java.net.URL);
      var projectname = project.getProperty("appname");
      try {
        var browserSupport = ServerUIPlugin().getWorkbench().getBrowserSupport();
        var browser = browserSupport.createBrowser(IWorkbenchBrowserSupport.LOCATION_BAR | IWorkbenchBrowserSupport.NAVIGATION_BAR, null, null, null);
        browser.openURL(new URL("http://localhost:8080/"+projectname));
      } catch (e) {
        echo = project.createTask("echo");
        echo.setMessage(e);
        echo.perform();
      }
    ]]></script>
  </target>
  -->
  
  <target name="check-remove-command-file">
      <available file="${currentdir}/${generate-dir}/.clean-project-required" property="check-remove-command-file-present"/>
        <if><isset property="check-remove-command-file-present" /><then>
        <delete file="${currentdir}/${generate-dir}/.clean-project-required" />
        </then></if>
  </target>
  
  
  <target name="clean-if-project-converted" depends="check-remove-command-file" if="check-remove-command-file-present">
    <antcall target="clean-eclipse-project" />
  </target>
  
  <target name="clean-eclipse-project">
    <delete dir="${basedir}/.webdsl-parsecache" />
    <delete dir="${basedir}/.cache" />
    <delete dir="${basedir}/.servletapp" />
    <delete dir="${basedir}/.webdsl-fragment-cache" />
    <delete file="${basedir}/.dependencies.webdsl" />
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${basedir}/WebContent" includes="**/*"/>
    </delete>
    <echo file=".saved-but-not-built"/>
    <eclipse.convertPath fileSystemPath="${basedir}" property="resourcePath" />
    <eclipse.refreshLocal resource="${resourcePath}" depth="infinite" />
  </target>
  
  <target name="clean-if-editor-updated" unless="editor.update.build.performed">
    <property name="path.build.version" value="${currentdir}/.servletapp/.last-build-version" />
    <available file="${path.build.version}" property="build.is.completed" />
    <loadfile srcFile="${path.build.version}" property="build.last.version" quiet="true" />
    <if>
      <not>
        <and>
          <isset property="build.is.completed" />
          <equals arg1="${build.last.version}" arg2="${webdsl.plugin.version}" />
        </and>
      </not>
      <then>
        <echo>Editor updated to version ${webdsl.plugin.version}. Performing a clean build...</echo>
        <antcall target="clean-eclipse-project" />
        <property name="editor.update.build.performed" value="1" />
        <dirname property="dir.build.version" file="${path.build.version}" />
        <mkdir dir="${dir.build.version}" />
        <echo file="${path.build.version}">${webdsl.plugin.version}</echo>
      </then>
    </if>
  </target>
  
  
  <target name="refresh">
    <eclipse.convertPath fileSystemPath="${basedir}" property="resourcePath"/>
    <eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
  </target>
  
  
  <taskdef name="schedulerefresh" classname="webdsl.ScheduleRefreshTask">
      <classpath>
        <pathelement location="${plugindir}/bin/"/>
      </classpath>
  </taskdef>
  
  <target name="schedule-refresh">
    <basename property="projectname" file="${basedir}"/>
    <schedulerefresh projectname="${projectname}" />
  </target>
  
  <!--
  <taskdef name="startserver" classname="webdsl.StartServerTask">
      <classpath>
        <pathelement location="${plugindir}/bin/"/>
      </classpath>
  </taskdef>

  <target name="start-server">
    <basename property="projectname" file="${basedir}"/>
    <startserver projectname="${projectname}" />
  </target>
  
  
  <taskdef name="polldeployedapp" classname="webdsl.PollDeployedAppTask">
      <classpath>
        <pathelement location="${plugindir}/bin/"/>
      </classpath>
  </taskdef>

  <target name="poll-deployed-app">
    <basename property="projectname" file="${basedir}"/>
    <polldeployedapp projectname="${projectname}" />
  </target>
-->
  
  <target name="run-eclipse-build">
    <!-- invoke incremental build of java code in eclipse
    <basename property="projectname" file="${basedir}"/>
    <eclipse.incrementalBuild project="${projectname}" kind="incremental" builder="org.eclipse.jdt.core.javabuilder"/>
    -->
    
    <mkdir dir="${webcontentdir}/WEB-INF/classes/"/>
        
    <path id="libraries">
      <fileset dir="${generate-dir}/WEB-INF/lib/" includes="*.jar"/>
    </path>
    
    <!-- invoke eclipse java compiler -->
    <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
      <isset property="eclipse.running"/>
    </condition>
    <property name="ant.build.javac.target" value="1.5"/>
    <property name="ant.build.javac.source" value="1.5"/>
    <javac destdir="${webcontentdir}/WEB-INF/classes/"
      failonerror="true"
      classpathref="libraries"
      debug="on"
      fork="true"
      nowarn="true"
      memoryinitialsize="256m"
      memorymaximumsize="1024m">
      <!-- fork= and memory sizes fix problem with javac throwing outofmemory heap space exception caused by ant 64mb default limit -->
      <!--     verbose="yes">
<compilerarg value="-Xlint"/> -->
      <src path=".servletapp/src-generated" />
      <src path="nativejava" />
      <src path=".servletapp/src-template" />
    </javac>
  </target>


  <target name="eclipse-build-code-only" depends="clean-if-editor-updated">

    <if>
      <isset property="editor.update.build.performed" />
      <then>
        <antcall target="eclipse-build" />
      </then>
      <!-- TODO: Build will run again, need graceful abort... -->
    </if>

    <antcall target="build-without-java-compile-code-only"/>

    <!-- update web.xml, in case of new pages -->
    <copy file=".servletapp/web.xml" preservelastmodified="true" todir="WebContent/WEB-INF"/>

    <antcall target="run-eclipse-build"/>
  </target>


  <target name="fix-classpath">
    <script language="javascript">
      <![CDATA[
        importClass(java.io.File);
        importClass(java.io.BufferedReader);
        importClass(java.io.FileReader);
        importClass(java.io.BufferedWriter);
        importClass(java.io.FileWriter);
        importClass(java.lang.StringBuffer);

        // Access to Ant-Properties by their names
        var currentdir = project.getProperty("currentdir");

      classpathFile = new StringBuffer();
      classpathFile.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      classpathFile.append("<classpath>\n");
      classpathFile.append("\t<classpathentry kind=\"src\" path=\".servletapp/src-template\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"src\" path=\".servletapp/src-generated\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"src\" path=\"nativejava\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.web.container\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.module.container\"/>\n");
      classpathFile.append("\t<classpathentry kind=\"output\" path=\"WebContent/WEB-INF/classes\"/>\n");

      var filedir = currentdir+"/WebContent/WEB-INF/lib";
      var appdir = new File(filedir);
      echo = project.createTask("echo");
      echo.setMessage(filedir);
      echo.perform();
      var libfiles = appdir.listFiles();
      for ( i = 0 ; i < libfiles.length ; i ++ ) {
      if ( libfiles[i].isFile ( ) ){
        classpathFile.append("\t<classpathentry kind=\"lib\" path=\"WebContent/WEB-INF/lib/"+libfiles[i].getName()+"\"/>\n");
        }
        }

      classpathFile.append("</classpath>\n");

      try {
            //write result
            fw = new FileWriter(currentdir+"/.classpath");
            bw = new BufferedWriter(fw);
            bw.write(classpathFile.toString());
            bw.close();
            fw.close();
          } catch (e) {
            echo = project.createTask("echo");
            echo.setMessage(e);
            echo.perform();
          }
      ]]>
        </script>
        <echo>generated .classpath</echo>
      </target>

</project>
