module org/webdsl/dsl/modules/search

imports
  libstrategolib
  libwebdsl-front
  org/webdsl/dsl/languages/search/desugar

strategies

  // Do after normal declare; we now know whether there is a searchable property is an extend entity
  declare-override = all-keys-EntDecl; filter(declare-search-functions); fail
  
  declare-search-functions: x_class -> x_class
    where <IndexedEntity> x_class
    with  x_fun := <concat-strings> ["search", x_class]
        ; <declare-static-function(|x_class,x_fun)> fun |[ function x_fun(query : String) : List<x_class> {} ]|
        ; <declare-static-function(|x_class,x_fun)> fun |[ function x_fun(query : String, limit : Int) : List<x_class> {} ]|
        ; <declare-static-function(|x_class,x_fun)> fun |[ function x_fun(query : String, limit : Int, offset : Int) : List<x_class> {} ]|
        
rules

	add-backend-annotation =
			?ent
		; where(
		  	    (x_class, body) := <get-entity-def> ent
				; <has-no-anno(?IndexedAnno(_,_,_,_,_))> ent
       			; props := <get-searchable-props> x_class
				; searchable := <filter(searchable-property-to-name(|x_class)); flatten-list; uniq> props
				; not([] := searchable)
				; untokenizedfields := <bagof-UntokenizedFields;uniq> x_class
				; spellcheckfields := <bagof-SpellCheckFields;uniq> x_class
				  ; debug(!"spellcheckfields: ")
				; autocompletefields := <bagof-AutoCompleteFields;uniq> x_class
				; debug(!"autocompletefields: ")
				; lucenesorttypes := <map(fieldname-to-java-type-name(|x_class))> untokenizedfields
			)
		; add-anno(|IndexedAnno(searchable,untokenizedfields,lucenesorttypes,spellcheckfields,autocompletefields))

	get-searchable-props:
	  entityName -> result
	  where myProps := <bagof-EntityNameToSearchableProps; flatten-list> entityName
	  ; if (not("Entity" := <Extends> entityName))
	    then result := <concat> [<Extends; get-searchable-props> entityName, myProps]
	    else result := myProps end
	  	

	fieldname-to-java-type-name(|x_class):
		fieldname -> lst
		with lst := <fieldNameToType; to-java-type-name <+ to-default-java-type-name> (x_class, fieldname)
	    	  
    record-untokenized-fields(|x_class):
    	s@SearchableAnno(sa-args) -> field-name
    	where <fetch(?SA-Argument("analyzer", analyzer-name))> sa-args
    	; <?"no" <+ ?"null"> analyzer-name
    	; field-name := <name-from-searchable-anno> s
    	; <record-untokenized-field>(x_class, field-name)
    
    record-untokenized-field:
    	a@(x_class, field-name) -> a 
    	with rules(UntokenizedFields :+ x_class -> field-name)
    
    record-spellcheck-fields(|x_class):
    	s@SearchableAnno(sa-args) -> s
    	where <fetch(?SA-Argument("spellcheck", _))> sa-args
    	; field-name := <name-from-searchable-anno> s
    	; <record-spellcheck-field>(x_class, field-name)
    
    record-spellcheck-field:
    	a@(x_class, field-name) -> a 
    	with rules(SpellCheckFields :+ x_class -> field-name)
    
    record-autocomplete-fields(|x_class):
    	s@SearchableAnno(sa-args) -> s
    	where <fetch(?SA-Argument("autocomplete", _))> sa-args
    	; field-name := <name-from-searchable-anno> s
    	; <record-autocomplete-field>(x_class, field-name)
    
    record-autocomplete-field:
    	a@(x_class, field-name) -> a 
    	with rules(AutoCompleteFields :+ x_class -> field-name)
    	
	record-field-name-to-type-embedded(|x_class, embedded_type):
		q@(fieldName, embedded_fieldName) -> q
		with type := <fieldNameToType> (embedded_type, fieldName)
		; <record-field-name-to-type(|x_class,type)> embedded_fieldName
    
    searchable-property-to-name(|x_class) :
	    Property(name, propkind, srt, anno*) -> names
	    where not (<?Ref()<+?Comp() > propkind)
	    ; searchable-annos := <filter(?SearchableAnno(_))> anno*
	    ; not(?[])
	    with names := <map(name-from-searchable-anno)> searchable-annos
	    ; untokenizedFields := <filter(record-untokenized-fields(|x_class))> searchable-annos
	    ; tp := <srt-to-type> srt
	    ; <map(record-field-name-to-type(|x_class, tp))> untokenizedFields
	    ; <map(try(record-spellcheck-fields(|x_class));try(record-autocomplete-fields(|x_class)))> searchable-annos
    
    record-field-name-to-type(|x_class,type) :
    	fieldName -> []
    	with rules( fieldNameToType :+ (x_class, fieldName) -> type)
    
    searchable-property-to-name(|x_class) :
	    Property(name, propkind, srt, anno*) -> embeddedNames
	    where (<?Ref()<+?Comp() > propkind; <fetch(?SearchableAnno(_))> anno*)
	    // 1 level of depth right now, so only simple types are supported
	    with embeddedType := <srt-to-type> srt
	    ; embeddedSearchable :=  <get-searchable-props; filter(is-simple-prop); filter(searchable-property-to-name(|embeddedType)); flatten-list; uniq> embeddedType
	    ; embeddedNames := <map(embedded-name(|name))> embeddedSearchable
	    ; embeddedUntokenizedFields := <bagof-UntokenizedFields; map(embedded-name(|name))> embeddedType
	    ; <map(embeddedName2:= <id>; <record-untokenized-field>(x_class, embeddedName2))> embeddedUntokenizedFields
	    ; embeddedSpellcheckFields := <bagof-SpellCheckFields; map(embedded-name(|name))> embeddedType
	    ; <map(embeddedName2:= <id>; <record-spellcheck-field>(x_class, embeddedName2))> embeddedSpellcheckFields
	    ; embeddedAutocompleteFields := <bagof-AutoCompleteFields; map(embedded-name(|name))> embeddedType
	    ; <map(embeddedName2:= <id>; <record-autocomplete-field>(x_class, embeddedName2))> embeddedAutocompleteFields
		; <zip(record-field-name-to-type-embedded(|x_class,embeddedType))> ( <bagof-UntokenizedFields> embeddedType , embeddedUntokenizedFields )
		  
  	searchable-property-to-name(|x_class) :
    	DerivedProperty(name, propkind, srt, anno*, _) -> names
    	where not (<?Ref()<+?Comp() > propkind)
	    ; searchable-annos := <filter(?SearchableAnno(_))> anno*
	    ; not(?[])
	    with names := <map(name-from-searchable-anno)> searchable-annos
	    ; untokenizedFields := <filter(record-untokenized-fields(|x_class))> searchable-annos	    
	    ; tp := <srt-to-type> srt
	    ; <map(record-field-name-to-type(|x_class,tp))> untokenizedFields
	    ; <map(try(record-spellcheck-fields(|x_class));try(record-autocomplete-fields(|x_class)))> searchable-annos

  	searchable-property-to-name(|x_class) :
	    DerivedProperty(name, propkind, srt, anno*, _) -> embeddedNames
	    where (<?Ref()<+?Comp() > propkind; <fetch(?SearchableAnno(_))> anno*)
	    // 1 level of depth right now, so only simple types are supported
	    with embeddedType := <srt-to-type> srt
	    ; embeddedSearchable :=  <get-searchable-props; filter(is-simple-prop);filter(searchable-property-to-name(|embeddedType)); flatten-list; uniq> embeddedType
	    ; embeddedNames := <map(embedded-name(|name))> embeddedSearchable
	    ; embeddedUntokenizedFields := <bagof-UntokenizedFields; map(embedded-name(|name))> embeddedType   
		; <map(embeddedName2:= <id>; <record-untokenized-field>(x_class, embeddedName2))> embeddedUntokenizedFields
	    ; embeddedSpellcheckFields := <bagof-SpellCheckFields; map(embedded-name(|name))> embeddedType
	    ; <map(embeddedName2:= <id>; <record-spellcheck-field>(x_class, embeddedName2))> embeddedSpellcheckFields
	    ; embeddedAutocompleteFields := <bagof-AutoCompleteFields; map(embedded-name(|name))> embeddedType
	    ; <map(embeddedName2:= <id>; <record-autocomplete-field>(x_class, embeddedName2))> embeddedAutocompleteFields
		; <zip(record-field-name-to-type-embedded(|x_class,embeddedType))> ( <bagof-UntokenizedFields> embeddedType , embeddedUntokenizedFields )

    name-from-searchable-anno :
    	SearchableAnno(sa-args) -> field-name
    	with <fetch(?SA-Argument("name", field-name))> sa-args 

  to-java-type-name: "Int" -> "Integer"
  to-java-type-name: "Float" -> "Float"
  to-java-type-name: "WikiText" -> "String"
  to-java-type-name: "Date" -> "Date"
  to-java-type-name: "DateTime" -> "Date"
  to-java-type-name: "Time" -> "Date"
  to-default-java-type-name: _ -> "String"
  	  
  is-simple-prop :
  	p@Property(_, propkind, _, _) -> p
  	where not (<?Ref()> propkind)
  
  srt-to-type:
  	GenericSort(_,[SimpleSort(type)]) -> type
  
  srt-to-type:
  	SimpleSort(type) -> type
  
  embedded-name(|prefix) :
  propname -> <concat-strings> [prefix, ".", propname]
