module WebDSL-Search

imports
    WebDSL-Lexical

exports
    sorts Definition Annotation Exp

    context-free syntax

    FullTextAnalyzer                                            -> Definition

    DEFAULT? "analyzer" Id "{" FullTextAnalyzerBody "}"         -> FullTextAnalyzer{cons("FullTextAnalyzer")}

    FullTextAnalyzerBodyDef                                     -> FullTextAnalyzerBody

    INDEXORQUERY "{" FullTextAnalyzerBodyDef "}"
    INDEXORQUERY "{" FullTextAnalyzerBodyDef "}"                -> FullTextAnalyzerBody{cons("DualFullTextAnalyzerBodyDef")}
    CharFilter* Tokenizer TokenFilter*                          -> FullTextAnalyzerBodyDef{cons("FullTextAnalyzerBodyDef")}

    "char filter" "=" CHARFILTERNAME "(" {Argument ","}* ")"     -> CharFilter{cons("CharFilter")}
    "char filter" "=" CHARFILTERNAME                             -> CharFilter{cons("CharFilterNoArgs")}

    "tokenizer" "=" TOKENIZERNAME "(" {Argument ","}* ")"       -> Tokenizer{cons("Tokenizer")}
    "tokenizer" "=" TOKENIZERNAME                               -> Tokenizer{cons("TokenizerNoArgs")}

    "token filter" "=" TOKENFILTERNAME "(" {Argument ","}* ")"   -> TokenFilter{cons("TokenFilter")}
    "token filter" "=" TOKENFILTERNAME                           -> TokenFilter{cons("TokenFilterNoArgs")}

    Id "=" String                                               -> Argument{cons("Argument")}

    Id    -> CHARFILTERNAME
    Id    -> TOKENIZERNAME
    Id    -> TOKENFILTERNAME

  context-free syntax

    %%searchable without params is left as SimpleAnno, but desugared to SearchableAnno,
    %%because "searchable" won't get rejected as Id (sdf strangeness).
    "searchable"                               -> SearchableAnno         {cons("SearchableAnno"), prefer}
    "searchable" "(" {SA-Argument ","}* ")"    -> SearchableAnno         {cons("SearchableAnno")}
    "search" "namespace"                       -> SearchNamespaceAnno    {cons("SearchNamespaceAnno"), prefer}
    SearchableAnno    "^" Float                -> Annotation             {cons("SearchableAnnoBoost")}
    SearchableAnno                             -> Annotation
    SearchNamespaceAnno                        -> Annotation

    SA-Key "=" SA-Value                        -> SA-Argument            {cons("SA-Argument")}
    "autocomplete"                             -> SA-Argument            {cons("Autocomplete-Argument")}
    "spellcheck"                               -> SA-Argument            {cons("Spellcheck-Argument")}
    "numeric"                                  -> SA-Argument            {cons("Numeric-Argument")}
    "default"                                  -> SA-Argument            {cons("DefaultSF-Argument")}

  context-free syntax
    SearchMapping                                    -> Definition
    SearchMappingEmbedded                            -> EntityBodyDeclaration
    "search" "mapping" "{" SearchMappingContent* "}"    -> SearchMappingEmbedded     {cons("SearchMappingEmbedded")}
    "search" "mapping" Id "{" SearchMappingContent* "}" -> SearchMapping             {cons("SearchMapping")}

    "namespace" "by" Id                              -> SearchMappingContent      {cons("SearchNamespaceMapping"), prefer}
    "namespace" "by" Id    ";"                       -> SearchMappingContent      {cons("SearchNamespaceMapping")}

    DEFAULTSF? KW MappingPart*    ";"                -> SearchMappingContent      {cons("SearchFieldMapping")}
    DEFAULTSF? "index" Id MappingPart*    ";"        -> SearchMappingContent      {cons("SearchFieldMapping")} %% more natural language
    DEFAULTSF? KW MappingPart*                       -> SearchMappingContent      {cons("SearchFieldMapping")}
    DEFAULTSF? "index" Id MappingPart*               -> SearchMappingContent      {cons("SearchFieldMapping")} %% more natural language

    "as" Id                                          -> MappingPart               {cons("FieldName")}
    "using" Id                                       -> MappingPart               {cons("AnalyzerName")}
    "boosted" "to" Float                             -> MappingPart               {cons("Boost")}
    "for" "subclass" Id                              -> MappingPart               {cons("TargetEntity")}
    "^" Float                                        -> MappingPart               {cons("Boost")}
    "(" {SearchMappingAnnoKW ","}* ")"               -> MappingPart               {cons("SearchMappingAnno")}
    "depth" Int                                      -> MappingPart               {cons("EmbeddedDepth")}
    "with" "depth" Int                               -> MappingPart               {cons("EmbeddedDepth")} %% more natural language

    Id           -> KW
    "as"         -> KW {reject}
    "using"      -> KW {reject}
    "boosted"    -> KW {reject}
    "by"         -> KW {reject}
    "with"       -> KW {reject}
    "index"      -> KW {reject}
    "depth"      -> KW {reject}
    "for"        -> KW {reject}

  lexical syntax
    "analyzer"                   -> SA-Key
    "name"                       -> SA-Key
    "boost"                      -> SA-Key
    "subclass"                   -> SA-Key
    "depth"                      -> SA-Key
    "default"                    -> DEFAULT
    "default_builtin_analyzer"   -> DEFAULT
    "+"                          -> DEFAULTSF
    Id                           -> SA-Value
    Float                        -> SA-Value
    Int                          -> SA-Value
    "spellcheck"                 -> SearchMappingAnnoKW
    "autocomplete"               -> SearchMappingAnnoKW
    "index"                      -> INDEXORQUERY
    "query"                      -> INDEXORQUERY

  context-free syntax

    SearcherDef                                      -> Exp

    "search" ENTITY SearcherPart*                    -> SearcherDef         {cons("SearcherInit")}
    "~" Exp SearcherPart+                            -> SearcherDef         {cons("SearcherRefMod")}

    ConstraintFilter    -> SearcherPart
    QueryDef            -> SearcherPart
    Offset              -> SearcherPart
    MaxResults          -> SearcherPart
    SortBy              -> SearcherPart
    FacetDef            -> SearcherPart
    SearchAttributes    -> SearcherPart
    NamespaceConstraint -> SearcherPart

    "matching" MatchGroup*                           -> QueryDef            {cons("QueryDef"),prefer}
    "offset"    Exp                                  -> Offset              {cons("Start")}
    "limit"    Exp                                   -> MaxResults          {cons("MaxResults")}
    "order" "by" {(SortExp) ","}+                    -> SortBy              {cons("SortBy")}
    "with" "filter" {(FilterConstraint) ","}+        -> ConstraintFilter    {cons("ConstraintFilter")}
    "with" "filters" {(FilterConstraint) ","}+       -> ConstraintFilter    {cons("ConstraintFilter")}
    "with" "facet" {FacetExp ","}+                   -> FacetDef            {cons("FacetDef")}
    "with" "facets" {FacetExp ","}+                  -> FacetDef            {cons("FacetDef")}
    "[" {SearchAttribute ","}* "]"                   -> SearchAttributes    {cons("SearchAttributes")}
    "in" "namespace" Exp                             -> NamespaceConstraint {cons("NamespaceConstraint")}

    "no" "lucene"                                    -> SearchAttribute    {cons("NoLucene")}
    "lucene"                                         -> SearchAttribute    {cons("Lucene")}
    "strict" "matching"                              -> SearchAttribute    {cons("DefaultAnd")}
    "loose" "matching"                               -> SearchAttribute    {cons("DefaultOr")}

    "(" FIELD "," Exp ")"                            -> FacetExp           {cons("DiscreteFacetDef")}
    "(" FIELD ":" {Range ","}* ")"                   -> FacetExp           {cons("RangeFacetDef")}

    FIELD ":" Exp                                    -> FilterConstraint   {cons("FieldFilterConstraint")}
    %% Exp                                              -> FilterConstraint   {cons("FacetFilterConstraint")}

    {FIELD "," }+ ":"                                -> FieldsConstraint   {cons("FieldsConstraint")}
    {QueryExp ","}+                                  -> QueryConstraint    {cons("QueryConstraint"), avoid}

    BoolOp? "(" MatchGroup+ ")"                      -> MatchGroup          {cons("Clause"),avoid}
    FieldsConstraint? QueryConstraint                -> MatchGroup          {cons("Query"), avoid}

    BoolOp? "(" QueryExp+ ")"                        -> QueryExp           {cons("GroupDef"), prefer}
    BoolOp? QueryTerm Slop?                          -> QueryExp           {cons("TermDef"), avoid}
    BoolOp? Range                                    -> QueryExp           {cons("RangeDef")}
    "~" Exp                                          -> Slop               {cons("Slop")}
    RangeOpen Exp? "to" Exp? RangeClose              -> Range              {cons("Range")}
    RangeOpen Exp? "TO" Exp? RangeClose              -> Range              {cons("Range")}
    "{"                                              -> RangeOpen          {cons("ExcludingOpen")}
    "}"                                              -> RangeClose         {cons("ExcludingClose")}
    "["                                              -> RangeOpen          {cons("IncludingOpen")}
    "]"                                              -> RangeClose         {cons("IncludingClose")}

    "+"                                              -> BoolOp             {cons("Must")}
    "-"                                              -> BoolOp             {cons("MustNot")}

    Exp                                              -> QueryTerm

    FIELD Direction?                                 -> SortExp            {cons("SortDef")}
    "asc"                                            -> Direction          {cons("Ascending")}
    "ascending"                                      -> Direction          {cons("Ascending")}
    "desc"                                           -> Direction          {cons("Descending")}
    "descending"                                     -> Direction          {cons("Descending")}

    "highlight" Exp "for" Exp "on" FIELD
        "surround" "with" "(" Exp "," Exp ")"        -> RetrievalExp       {cons("HighlightTags")}
    "highlight" Exp "for" Exp "on" FIELD             -> RetrievalExp       {cons("Highlight")}
    "results" "from"  Exp                            -> RetrievalExp       {cons("SearchResults")}
    FIELD "facets" "from" Exp                        -> RetrievalExp       {cons("FacetResults")}
    "all" FIELD "facets" "from" Exp                  -> RetrievalExp       {cons("AllFacetResults")}
    "count" "from" Exp                               -> RetrievalExp       {cons("SearchResultsSize")}
    "searchtime" "from" Exp                          -> RetrievalExp       {cons("SearchTimeString")}
    "~" Exp                                          -> FIELD              {cons("SearchFieldRef")}
    ENTITY SuggestType SuggestionPart+               -> Exp                {cons("Suggest")}
    "completions"                                    -> SuggestType        {cons("AutoComplete")}
    "corrections"                                    -> SuggestType        {cons("SpellCheck")}
    RetrievalExp                                     -> Exp

    "similarity" Exp                 -> SuggestionPart {cons("Similarity")}
    "matching" FieldsConstraint Exp  -> SuggestionPart {cons("SuggestTerm")}
    NamespaceConstraint              -> SuggestionPart
    MaxResults                       -> SuggestionPart

    %% disambiguate over Var("") terms allowed by QueryTerm and SearcherPart keywords, dont allow keywords to be used as varref
    SearcherKW             -> QueryTerm {reject}
    SearcherKW "(" Exp ")" -> QueryTerm {reject}
    "[" {Exp ","}* "]"     -> QueryTerm {reject}

  context-free restrictions
    %% Don't treat -200 as 'must not match 200', but as int '-200' instead
    BoolOp  -/- [0-9]
    %% 'matching tags.name: +tag.replace(" ","\\ ")' , interpret as method call, not as field/prop access followed by a new clause
    QueryTerm -/- [\(]

  context-free priorities
    %% search User matching credit: -(-200) //interpret as 'must not match -200'
    Exp -> QueryTerm
    >
    "(" Exp ")"  -> Exp

  context-free priorities
  %% search Movie matching +"hello" -"goodbye" //Dont treat this as sub
  %% search Movie matching +book.title  //Dont treat '.title' as method-call/property access for whole searcher exp, but restrict to inner exp 'book'.
    {QueryExp ","}+ -> QueryConstraint
    >
    {
      Exp "+" Exp -> Exp
      Exp "-" Exp -> Exp
      Exp "." Id "(" {Exp ","}* ")"  -> Exp
      Exp "." Id                     -> Exp
    }
    >
    {
    RetrievalExp -> Exp
    SearcherDef -> Exp
    }

  lexical syntax
    Id             -> FIELD
    Id "." FIELD   -> FIELD
    Id             -> ENTITY
    Id             -> SEARCHERREF
    "limit"            -> SearcherKW
    "offset"           -> SearcherKW
    "with"             -> SearcherKW
    "order"            -> SearcherKW
    "in"               -> SearcherKW
    "matching"         -> SearcherKW

 context-free restrictions
    "as" "asc" "ascending" "analyzer" "autocomplete" "boost" "boosted" "by"           -/- [a-zA-Z0-9]
    "desc" "descending" "default" "default_builtin_analyzer" "depth" "extend" "for"   -/- [a-zA-Z0-9]
    "facet" "facets" "from" "get" "highlight" "index" "limit"                         -/- [a-zA-Z0-9]
    "matching" "name" "namespace" "nolucene" "on" "query"                             -/- [a-zA-Z0-9]
    "results" "search" "sort" "spellcheck" "start" "subclass"                         -/- [a-zA-Z0-9]
    "using" "with" "where"                                                            -/- [a-zA-Z0-9]


%% DEPRECATED:
  context-free syntax
    "searchmapping" "{" SearchMappingContent* "}"               -> SearchMappingEmbedded{cons("SearchMappingEmbedded"), deprecated("keyword `searchmapping` is replaced with `search mapping`")}
    "searchmapping" Id "{" SearchMappingContent* "}"            -> SearchMapping{cons("SearchMapping"), deprecated("keyword `searchmapping` is replaced with `search mapping`")}
    "charfilter" "=" CHARFILTERNAME "(" {Argument ","}* ")"     -> CharFilter{cons("CharFilter"), deprecated("keyword `charfilter` is replaced with `char filter`")}
    "charfilter" "=" CHARFILTERNAME                             -> CharFilter{cons("CharFilterNoArgs"), deprecated("keyword `charfilter` is replaced with `char filter`")}
    "tokenfilter" "=" TOKENFILTERNAME "(" {Argument ","}* ")"   -> TokenFilter{cons("TokenFilter"), deprecated("keyword `tokenfilter` is replaced with `token filter`")}
    "tokenfilter" "=" TOKENFILTERNAME                           -> TokenFilter{cons("TokenFilterNoArgs"), deprecated("keyword `tokenfilter` is replaced with `token filter`")}

