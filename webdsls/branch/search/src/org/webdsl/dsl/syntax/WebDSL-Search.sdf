module WebDSL-Search

imports
	WebDSL-Lexical
	
exports
	sorts Definition Annotation
	
	context-free syntax
		
	FullTextAnalyzer 			-> Definition
	
	DEFAULT? "analyzer" Id "{" FullTextAnalyzerBody "}" 	-> FullTextAnalyzer{cons("FullTextAnalyzer")}
	
	CharFilter* Tokenizer TokenFilter*	-> FullTextAnalyzerBody{cons("FullTextAnalyzerBody")}
	
	"charfilter" "=" CHARFILTERNAME "(" {Argument ","}* ")"	-> CharFilter{cons("CharFilter")}
	"charfilter" "=" CHARFILTERNAME							-> CharFilter{cons("CharFilterNoArgs")}
	"tokenizer" "=" TOKENIZERNAME "(" {Argument ","}* ")"	-> Tokenizer{cons("Tokenizer")}
	"tokenizer" "=" TOKENIZERNAME 							-> Tokenizer{cons("TokenizerNoArgs")}
	"tokenfilter" "=" TOKENFILTERNAME "(" {Argument ","}* ")"	-> TokenFilter{cons("TokenFilter")}
	"tokenfilter" "=" TOKENFILTERNAME							-> TokenFilter{cons("TokenFilterNoArgs")}
	
	
	
	Id "=" String						-> Argument{cons("Argument")}
	
	Id	-> CHARFILTERNAME
	Id	-> TOKENIZERNAME
	Id	-> TOKENFILTERNAME
		
    context-free syntax
    	
    %%searchable without params is left as SimpleAnno, but desugared to SearchableAnno,
    %%because "searchable" won't get rejected as Id (sdf strangeness).
    "searchable"							-> SearchableAnno {cons("SearchableAnno"), prefer}
    "searchable" "(" {SA-Argument ","}* ")"	-> SearchableAnno {cons("SearchableAnno")}
    SearchableAnno	"*" Float				-> Annotation {cons("SearchableAnnoBoost")}
    SearchableAnno							-> Annotation
    
    SA-Key "=" SA-Value						-> SA-Argument{cons("SA-Argument")}
    
    context-free syntax
    SearchMapping								-> Definition
    SearchMappingEmbedded						-> EntityBodyDeclaration
    "searchmapping" "{" SearchFieldMapping* "}"	-> SearchMappingEmbedded{cons("SearchMappingEmbedded")}
    "searchmapping" Id "{" SearchFieldMapping* "}"-> SearchMapping{cons("SearchMapping")}
    Id MappingPart*	";"							-> SearchFieldMapping{cons("SearchFieldMapping")}
    "as" Id										-> MappingPart{cons("FieldName")}
    "using" Id									-> MappingPart{cons("AnalyzerName")}
    "boosted" "to" Float 						-> MappingPart{cons("Boost")}
    "*" Float 									-> MappingPart{cons("Boost")}
    "(" {SearchMappingAnnoKW ","}* ")"			-> MappingPart{cons("SearchMappingAnno")}
    
  	lexical syntax
  	"spellcheck"				-> SA-Key
  	"autocomplete"				-> SA-Key
  	"numeric"					-> SA-Key
    "analyzer" 					-> SA-Key
    "name" 						-> SA-Key
    "boost"						-> SA-Key
    "default"					-> DEFAULT
    "default_builtin_analyzer"	-> DEFAULT
    Id 							-> SA-Value
    Float						-> SA-Value
    "spellcheck"				-> SearchMappingAnnoKW
    "autocomplete"				-> SearchMappingAnnoKW
    