module org/webdsl/dsl/to-java-servlet/recommend/recommend

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/recommend/-

rules 		// get all properties of an entity, including supertypes (similar to front-end rule: all-roperties)

  get-all-properties-in-recommendconfig:
    ent -> props
    with (_,body) := <get-entity-def> ent
       ; ourprops := <filter(is-property-cons)> body
       ; if <?Entity(_, x_super, _)> ent then
           props := <conc> (ourprops, <EntityFromName; get-all-properties-in-entity> x_super)
         else
          props := ourprops
         end
       
rules
  
  special-static-method-call-to-java-servlet:
	tc@Call(v,"getUserRecommendations",[webdslexp]) -> result
    where EntitySort(x_class) := <get-type-anno> v
    with x_fun := <concat-strings> ["_static_", "getUserRecommendations", x_class]
        ; e := <expression-to-java-servlet> webdslexp
        ; result := expr|[ RecommendSingleton.x_fun#_(e) ]|
  
  special-static-method-call-to-java-servlet:
	tc@Call(v,"getUserRecommendations",[webdslexp, webdslexp2]) -> result
    where EntitySort(x_class) := <get-type-anno> v
    with x_fun := <concat-strings> ["_static_", "getUserRecommendations", x_class]
        ; e := <expression-to-java-servlet> webdslexp
        ; e_2 := <expression-to-java-servlet> webdslexp2
        ; result := expr|[ RecommendSingleton.x_fun#_(e, e_2) ]|
  
  special-static-method-call-to-java-servlet:
	tc@Call(v,"getItemRecommendations",[webdslexp]) -> result
    where EntitySort(x_class) := <get-type-anno> v
    with x_fun := <concat-strings> ["_static_", "getItemRecommendations", x_class]
        ; e := <expression-to-java-servlet> webdslexp
        ; result := expr|[ RecommendSingleton.x_fun#_(e) ]|
  
  special-static-method-call-to-java-servlet:
	tc@Call(v,"getItemRecommendations",[webdslexp, webdslexp2]) -> result
    where EntitySort(x_class) := <get-type-anno> v
    with x_fun := <concat-strings> ["_static_", "getItemRecommendations", x_class]
        ; e := <expression-to-java-servlet> webdslexp
        ; e_2 := <expression-to-java-servlet> webdslexp2
        ; result := expr|[ RecommendSingleton.x_fun#_(e, e_2) ]|
          
          
          
  special-static-method-call-to-java-servlet:
	tc@Call(v,"reconstructRecommendationCache",[]) -> result
    where EntitySort(x_class) := <get-type-anno> v
    with  x_fun := <concat-strings> ["_static_", "reconstructRecommendationCache", x_class]
        ; result := expr|[ RecommendSingleton.x_fun#_() ]|
          
  special-static-method-call-to-java-servlet:
	tc@Call(v,"evaluateIRStats",[]) -> result
    where EntitySort(x_class) := <get-type-anno> v
    with  x_fun := <concat-strings> ["_static_", "evaluateIRStats", x_class]
        ; result := expr|[ RecommendSingleton.x_fun#_() ]|
          
  special-static-method-call-to-java-servlet:
	tc@Call(v,"getExecutionTime",[]) -> result
    where EntitySort(x_class) := <get-type-anno> v
    with  x_fun := <concat-strings> ["_static_", "getExecutionTime", x_class]
        ; result := expr|[ RecommendSingleton.x_fun#_() ]|
     

strategies

GenerateCodeJavaServlet = generate-java-recommend-functions; fail

rules

  generate-java-recommend-functions:
    RecommendConfigStaticOrder(x_idname, x_user{TypeAnno(usertype)}, x_item{TypeAnno(itemtype)}, x_value, x_algor, x_neigh, e_nsize, x_type, _) -> <emit-java-code; fail> compilation-unit |[
    
      	package utils;
      	
      	import utils.RecommendEntityServlet;
      	import utils.RecommendDBConverter;
      	import utils.RecommendDBConverter.RecFieldType;
		import java.util.List;
		import java.util.ArrayList;
      	
      	public class RecommendSingleton
        {
        	private static RecommendEntityServlet st#x_idname = null;
        
        	public static RecommendEntityServlet get#x_idname(){
        		if(st#x_idname == null){
        			st#x_idname = new RecommendEntityServlet("~x_idname", "~x_user", "~x_item", "~x_val", "~x_alg", "~x_nei", e_nsi, "~x_typ");
        		}
        		return st#x_idname;
        	}
        	
        	public static List<t_itemtype> x_u#_(t_usertype user, int howMany)  {
	          return (List<t_itemtype>)RecommendSingleton.get#x_idname().getRecommendations(user, howMany, RecFieldType.USER);
	        }
        	
        	public static List<t_itemtype> x_u#_(t_usertype user)  {
	          return (List<t_itemtype>)RecommendSingleton.get#x_idname().getRecommendations(user, 10, RecFieldType.USER);
	        }
        	
        	public static List<t_itemtype> x_i#_(t_itemtype item, int howMany)  {
	          return (List<t_itemtype>)RecommendSingleton.get#x_idname().getRecommendations(item, howMany, RecFieldType.ITEM);
	        }
        	
        	public static List<t_itemtype> x_i#_(t_itemtype item)  {
	          return (List<t_itemtype>)RecommendSingleton.get#x_idname().getRecommendations(item, 10, RecFieldType.ITEM);
	        }
        	
        	public static void x_r#_()  {
        	  System.err.println("\n*** WARNING ***\nYou are calling the 'reconstructRecommendationCache' function directly, this should only be done for debugging and/or developing purposes.\nDO NOT USE THIS FUNCTION ON PRODUCTION SYSTEMS!\n");
	          RecommendSingleton.get#x_idname().reconstructRecommendationCache();
	        }
        	
        	public static String x_e#_()  {
        	  System.err.println("\n*** WARNING ***\nYou are calling the 'evaluateIRStats' function, this should only be done for debugging and/or developing purposes.\nDO NOT USE THIS FUNCTION ON PRODUCTION SYSTEMS!\n");
	          return RecommendSingleton.get#x_idname().evaluateIRStats();
	        }
        	
        	public static long x_t#_()  {
        	  return RecommendSingleton.get#x_idname().getExecutionTime();
	        }
        }
     ]|
    with x_u := <concat-strings> ["_static_", "getUserRecommendations", x_idname]
    ; x_i := <concat-strings> ["_static_", "getItemRecommendations", x_idname]
    ; x_r := <concat-strings> ["_static_", "reconstructRecommendationCache", x_idname]
    ; x_e := <concat-strings> ["_static_", "evaluateIRStats", x_idname]
    ; x_t := <concat-strings> ["_static_", "getExecutionTime", x_idname]
    ; (<?None()> x_value < x_val := "" + x_val := x_value)
    ; (<?None()> x_algor < x_alg := "" + x_alg := x_algor)
    ; (<?None()> x_neigh < x_nei := "" + x_nei := x_neigh)
    ; (<?None()> e_nsize < e_nsi := Lit(Deci(0)) + e_nsi := Lit(Deci(e_nsize)))
    ; (<?None()> x_type < x_typ := "" + x_typ := x_type)
    ; t_usertype := <java-type-entity> usertype
    ; t_itemtype := <java-type-entity> itemtype
      
      
// TO DO: Implement the scheduling here 
    //   RecommendConfigStaticOrder(x_idname, _, _, _, _, _, _, _, x_schedule) -> webdsl |[
    // 	invoke x_idname#.reconstructRecommendationCache() every x_sched
    //  ]|
    // with (<?None()> x_schedule < x_sched := expr|[ 7 * 24 * 60 * 60 * 1000 ]| + x_sched := x_schedule)
      