module org/webdsl/dsl/to-java-servlet/search/entity-searcher

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/-
  org/webdsl/dsl/to-java-servlet/search/-

strategies

  GenerateCodeJavaServlet = generate-java-search-functions; fail
  GenerateCodeJavaServlet = generate-java-entity-searcher-class; fail

  generate-java-entity-searcher-class :
      ent -> <emit-java-code-local> compilation-unit |[
      package webdsl.generated.search;

      import utils.HibernateUtilConfigured;
      import java.util.ArrayList;
      import java.util.List;
      import java.io.IOException;
      import java.util.HashMap;
      import java.util.Map;
      import java.util.Collection;
      import java.util.Date;
      import org.apache.lucene.index.IndexReader;
      import org.hibernate.search.FullTextSession;
      import org.hibernate.search.SearchFactory;
      import org.hibernate.search.FullTextSession;
      import org.hibernate.search.SearchFactory;
	  import org.hibernate.search.impl.ImmutableSearchFactory;
      import org.hibernate.search.store.DirectoryProvider;
      import org.hibernate.search.engine.spi.EntityIndexBinder;
      import org.apache.lucene.search.BooleanClause.Occur;
      import org.apache.lucene.store.Directory;
      import org.apache.lucene.analysis.PerFieldAnalyzerWrapper;
      import org.apache.lucene.analysis.Analyzer;
      import org.webdsl.search.SearchSuggester;
      import org.webdsl.search.QueryDef;
      import org.apache.lucene.store.Directory;
      import com.browseengine.bobo.api.BoboIndexReader;
      import com.browseengine.bobo.facets.FacetHandler;



    public class x_class#Searcher extends org.webdsl.search.AbstractEntitySearcher<x_Class, x_class#Searcher> {

        private static Analyzer _analyzer;
        private static Analyzer _highlightAnalyzer;
        private static BoboIndexReader _boboReader;

        static{
            _highlightAnalyzer = org.hibernate.search.Search.getFullTextSession( e_HibSession ).getSearchFactory().getAnalyzer( x_Class.class );
            _analyzer = org.hibernate.search.Search.getFullTextSession( e_HibSession ).getSearchFactory().getAnalyzer( x_Class.class );
            bstm2*
        }


        public x_class#Searcher (){
            entityClass = x_Class.class;
            fullTextSession = org.hibernate.search.Search.getFullTextSession( e_HibSession );
            analyzer = _analyzer;
            highlightAnalyzer = _highlightAnalyzer;
            searchFields = defaultSearchFields = new String[]{ e_dsf* };
            untokenizedFields = new String[]{ e_utf* };
            mltSearchFields = new String[]{ e_mltsf* };
            rootQD = parentQD = currentQD = new QueryDef( Occur.SHOULD, new String[]{ e_dsf* } );
        }

        public static x_class#Searcher fromString(String str){
            return (x_class#Searcher) fromParamMap(utils.URLFilter.URLEncodingToParamMap(str));
        }

        public boolean instanceOf(String s){
            return s.equals("~x_name");
        }

        public static ArrayList<String> spellSuggest( String toSuggestOn, List<String> fields, float accuracy, int noSug ){return spellSuggest( toSuggestOn, "", fields, accuracy, noSug );}
        public static ArrayList<String> spellSuggest( String toSuggestOn, String field, float accuracy, int noSug ){return spellSuggest( toSuggestOn, "", field, accuracy, noSug );}
        public static ArrayList<String> spellSuggest( String toSuggestOn, String namespace, List<String> fields, float accuracy, int noSug ){
            String baseDir = IndexManager.indexDirSpellCheck( x_BaseClass.class, "", namespace );
            return SearchSuggester.findSpellSuggestions( x_Class.class, baseDir, fields, noSug, accuracy, true, _analyzer, toSuggestOn );
        }
        public static ArrayList<String> spellSuggest( String toSuggestOn, String namespace, String field, float accuracy, int noSug ){
            String baseDir = IndexManager.indexDirSpellCheck( x_BaseClass.class, "", namespace );
            return SearchSuggester.findSpellSuggestionsForField( x_Class.class, baseDir, field, noSug, accuracy, true, _analyzer, toSuggestOn );
        }

        public static ArrayList<String> autoCompleteSuggest( String toSuggestOn, List<String> fields, int noSug ){return autoCompleteSuggest( toSuggestOn, "", fields, noSug );}
        public static ArrayList<String> autoCompleteSuggest( String toSuggestOn, String field, int noSug ){return autoCompleteSuggest( toSuggestOn, "", field, noSug );}
        public static ArrayList<String> autoCompleteSuggest( String toSuggestOn, String namespace, List<String> fields, int noSug ){
            String baseDir = IndexManager.indexDirAutoComplete( x_BaseClass.class, "", namespace );
            return SearchSuggester.findAutoCompletions( x_Class.class, baseDir, fields, noSug, _analyzer, toSuggestOn );
        }
        public static ArrayList<String> autoCompleteSuggest( String toSuggestOn, String namespace, String field, int noSug ){
            String baseDir = IndexManager.indexDirAutoComplete( x_BaseClass.class, "", namespace );
            return SearchSuggester.findAutoCompletionsForField( x_Class.class, baseDir, field, noSug, _analyzer, toSuggestOn );
        }

        public Class<?> fieldType( String field ){
            bstm*
            return String.class;
        }

        protected FullTextSession getFullTextSession() {
            if( fullTextSession == null ) {
                fullTextSession = org.hibernate.search.Search.getFullTextSession( e_HibSession );
                updateFullTextQuery = true;
            }
            return fullTextSession;
        }

        protected synchronized BoboIndexReader getBoboReader( String field ){
            if( _boboReader == null || _boboReader.getFacetHandler( field ) == null ){
                renewBoboReaders( discreteFacetRequests.keySet() );
            }
            return _boboReader;
        }

        public final synchronized static void renewBoboReaders(){
            if (_boboReader != null){
                //only renew if reader is already used once, that is, faceting is done
                renewBoboReaders(new ArrayList<String>());
            }
        }

        public x_class#Searcher reset(){
            clearFacetSelection();
            clearFieldFilters();
            clearSorting();
            removeNamespace();
            rootQD = parentQD = currentQD = new QueryDef( Occur.SHOULD, new String[]{ e_dsf* } );
            searchFields = defaultSearchFields;
            untokenizedFields = new String[]{ e_utf* };
            mltSearchFields = new String[]{ e_mltsf* };
            searchFieldsChanged = updateLuceneQuery = true;

            return this;

        }

        private final synchronized static void renewBoboReaders( Collection<String> allFields ){
            log("renewing faceting index reader for entity " + "~x_class");
            BoboIndexReader boboReader_OLD = _boboReader;

            List<FacetHandler<?>> facetHandlerList = new ArrayList<FacetHandler<?>>();
            if( _boboReader != null ){
                facetHandlerList.addAll( _boboReader.getFacetHandlerMap().values() );
            }
            Map<String , FacetHandler<?>> facetHandlerMap = new HashMap<String, FacetHandler<?>>();
            for ( FacetHandler<?> facetHandler : facetHandlerList ) {
                facetHandlerMap.put( facetHandler.getName(), facetHandler );
            }
            for ( String fld : allFields ) {
                if ( !facetHandlerMap.containsKey( fld ) )
                    facetHandlerList.add( getFacetHandlerForField( fld ) );
            }
            SearchFactory searchFactory = org.hibernate.search.Search.getFullTextSession( e_HibSession ).getSearchFactory();
			ImmutableSearchFactory isf = (ImmutableSearchFactory) searchFactory;
			EntityIndexBinder<?> entityIndexBinding = isf.getIndexBindingForEntity( x_Class.class );
			org.hibernate.search.indexes.spi.IndexManager indexManager = entityIndexBinding.getIndexManagers()[0];
            try {
                Directory idx = ( (org.hibernate.search.indexes.impl.DirectoryBasedIndexManager)indexManager).getDirectoryProvider().getDirectory();
                IndexReader reader = IndexReader.open( idx, true );
                _boboReader = BoboIndexReader.getInstance( reader, facetHandlerList );
            } catch ( IOException ex ) {
                // TODO Auto-generated catch block
                ex.printStackTrace();
            } finally {
                if(boboReader_OLD != null){
                    try{
                        boboReader_OLD.close();
                    } catch ( IOException ex ) {
                        ex.printStackTrace();
                    }
                }
            }
        }
    }
      ]|
    where ( x_class, _ ) := <get-entity-def> ent
       ; <get-anno( ?IndexedAnno( x_searchFields, x_untokenizedSearchFields, x_javaTypeNames, _, _, x_defaultSearchFields, x_dualAnalyzerFields ))> ent
    with e_sf* := <map( \name -> expr |[ "~name" ]| \ )> x_searchFields
       ; e_utf* := <map( \name -> expr |[ "~name" ]| \ )> x_untokenizedSearchFields
       ; e_dsf* := <map( \name -> expr |[ "~name" ]| \ )> x_defaultSearchFields
       ; e_mltsf* := <diff>( e_dsf*,e_utf* )
       ; bstm* := <zip( field-to-java-type-name-condition )> ( x_untokenizedSearchFields, x_javaTypeNames )
       ; bstm2* := <try( to-analyzer-modification )> x_dualAnalyzerFields
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]
       ; x_BaseClass := <get-searchable-root-class-fq> x_class
       ; x_name := <concat-strings> [x_class, "Searcher"]

  field-to-java-type-name-condition:
      ( fieldName, sortType ) -> java:stm |[ if( field.equals( "~fieldName" )) return e_tp;]|
      where e_tp := ExprName( AmbName( Id( sortType )), Id( "class" ))

  to-analyzer-modification:
      x_dualAnalyzerFields -> bstm*  |[
          PerFieldAnalyzerWrapper fieldAnalyzer = new PerFieldAnalyzerWrapper( _analyzer );
          Analyzer toAdd;
          bstm*
          _analyzer = fieldAnalyzer;
      ]|
      where <not( ?[] )> x_dualAnalyzerFields
      with bstm* := <map( field-to-analyzer-modification ); flatten-list> x_dualAnalyzerFields

  field-to-analyzer-modification:
      ( x_fieldName, analyzerName ) -> bstm* |[
          toAdd = org.hibernate.search.Search.getFullTextSession( e_HibSession ).getSearchFactory().getAnalyzer( "~x_analyzerName" );
          fieldAnalyzer.addAnalyzer( "~x_fieldName", toAdd );
      ]|
      with x_analyzerName := <concat-strings>[analyzerName, "_QUERY"]


  generate-java-search-functions:
    ent -> <emit-java-code-local> compilation-unit |[

      package pkgname;
      import webdsl.generated.search.x_class#Searcher;

      @Partial
      public class x_class {

        public static java.util.List<x_Class> x#_( String searchQuery )  {
          return x#_( searchQuery, 1000, 0 );
        }
        public static java.util.List<x_Class> x#_( String searchQuery, int limit )  {
          return x#_( searchQuery, limit, 0 );
        }
        public static java.util.List<x_Class> x#_( String searchQuery, int limit, int offset )  {
           return new x_class#Searcher().query( searchQuery ).setOffset( offset ).setLimit( limit ).results();
        }
      }
    ]|
    where (
        ( x_class, _ ) := <get-entity-def> ent
      ; <get-anno( ?IndexedAnno( <id>,_,_,_,_,_,_ ))> ent
    )
    with x := <concat-strings> ["_static_", "search", x_class]
       ; pkgname := <DomainPackage>
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]