module org/webdsl/dsl/to-java-servlet/search/entity-searcher

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/-

strategies

  GenerateCodeJavaServlet = generate-java-search-functions; fail
  GenerateCodeJavaServlet = generate-java-entity-searcher-class; fail


  generate-java-entity-searcher-class :
  	ent -> <emit-java-code-local> compilation-unit |[
  	package pkgname;
  	
  	import utils.*;
  	import java.io.File;
  	import java.util.Date;
  	import java.util.ArrayList;
	import java.util.List;
	import org.hibernate.search.FullTextSession;
  	import org.apache.lucene.search.BooleanClause.Occur;
  	import org.apache.lucene.store.Directory;
  	import org.apache.lucene.search.SortField;
  	import org.apache.lucene.analysis.PerFieldAnalyzerWrapper;
  	import org.apache.lucene.analysis.Analyzer;
  	import org.webdsl.search.SearchSuggester;
  	import org.webdsl.search.QueryDef;
  	import org.webdsl.search.SearchNamespaceHelper;
  	
	public class x_class#Searcher extends org.webdsl.search.AbstractEntitySearcher<x_class> {
		
		private static Analyzer singletonAnalyzer;
				
		public x_class#Searcher (){
			entityClass = x_Class.class;
			indexName = "~x_indexName";
			fullTextSession = org.hibernate.search.Search.getFullTextSession(e_HibSession);
			analyzer = getAnalyzer();
			
			searchFields = new String[]{ e_dsf* };
			untokenizedFields = new String[]{ e_utf* };
			mltSearchFields = new String[]{ e_mltsf* };
			rootQD = parentQD = currentQD = new QueryDef(Occur.MUST, new String[]{ e_dsf* });
		}

		public static ArrayList<String> spellSuggest(String toSuggestOn, List<String> fields, float accuracy, int noSug){return spellSuggest(toSuggestOn, "", fields, accuracy, noSug);}
		public static ArrayList<String> spellSuggest(String toSuggestOn, String field, float accuracy, int noSug){return spellSuggest(toSuggestOn, "", field, accuracy, noSug);}		
		public static ArrayList<String> spellSuggest(String toSuggestOn, String namespace, List<String> fields, float accuracy, int noSug){
			String baseDir = utils.IndexManager.indexDirSpellCheck(x_Class.class, "", namespace);
			return SearchSuggester.findSpellSuggestions(x_Class.class, baseDir, getNamespaceIndex(namespace), fields, noSug, accuracy, true, toSuggestOn);
		}	
		public static ArrayList<String> spellSuggest(String toSuggestOn, String namespace, String field, float accuracy, int noSug){
			String baseDir = utils.IndexManager.indexDirSpellCheck(x_Class.class, "", namespace);
			return SearchSuggester.findSpellSuggestionsForField(x_Class.class, baseDir, getNamespaceIndex(namespace), field, noSug, accuracy, true, toSuggestOn);
		}
		
		private static Integer getNamespaceIndex(String namespace){
			return namespace.isEmpty() ? null : SearchNamespaceHelper.namespaceIDToIndex(x_Class.class.toString(), namespace, false);
		}
		
		public static ArrayList<String> autoCompleteSuggest(String toSuggestOn, List<String> fields, int noSug){return autoCompleteSuggest(toSuggestOn, "", fields, noSug);}
		public static ArrayList<String> autoCompleteSuggest(String toSuggestOn, String field, int noSug){return autoCompleteSuggest(toSuggestOn, "", field, noSug);}
		public static ArrayList<String> autoCompleteSuggest(String toSuggestOn, String namespace, List<String> fields, int noSug){
			String baseDir = utils.IndexManager.indexDirAutoComplete(x_Class.class, "", namespace);
			return SearchSuggester.findAutoCompletions(x_Class.class, baseDir, fields, noSug, toSuggestOn);
		}		
		public static ArrayList<String> autoCompleteSuggest(String toSuggestOn, String namespace, String field, int noSug){
			String baseDir = utils.IndexManager.indexDirAutoComplete(x_Class.class, "", namespace);
			return SearchSuggester.findAutoCompletionsForField(x_Class.class, baseDir, field, noSug, toSuggestOn);			
		}
				
		protected int directoryProviderIndexForNamespace(){
			return SearchNamespaceHelper.namespaceIDToIndex(indexName, namespaceConstraint, false);
		}
		
		public Class<?> fieldType(String field){			
			bstm*
			return String.class;
		}
		
		protected FullTextSession getFullTextSession() {
			if(fullTextSession == null) {
				fullTextSession = org.hibernate.search.Search.getFullTextSession(e_HibSession);
				updateFullTextQuery = true;
			}
			return fullTextSession;
		}
		
		private synchronized static Analyzer getAnalyzer(){
			if(singletonAnalyzer == null){
				PerFieldAnalyzerWrapper fieldAnalyzer;
				singletonAnalyzer = org.hibernate.search.Search.getFullTextSession(e_HibSession).getSearchFactory().getAnalyzer(x_Class.class);
				
				bstm2*
			}
			return singletonAnalyzer;
		}
		
	}	
  	]|
    where (x_class, _) := <get-entity-def> ent
       ; <get-anno(?IndexedAnno(x_searchFields, x_untokenizedSearchFields, x_javaTypeNames, _, _, x_defaultSearchFields, x_dualAnalyzerFields))> ent
    with e_sf* := <map(\name -> expr |[ "~name" ]| \)> x_searchFields
       ; e_utf* := <map(\name -> expr |[ "~name" ]| \)> x_untokenizedSearchFields
       ; e_dsf* := <map(\name -> expr |[ "~name" ]| \)> x_defaultSearchFields
       ; e_mltsf* := <diff>(e_dsf*,e_utf*)
       ; pkgname := <DomainPackage>
       ; bstm* := <zip(field-to-java-type-name-condition)> (x_untokenizedSearchFields, x_javaTypeNames)
       ; bstm2* := <try(to-analyzer-modification)> x_dualAnalyzerFields
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]
       ; x_indexName := <get-index-name> ent
         
  field-to-java-type-name-condition:
  	(fieldName, sortType) -> java:stm |[ if(field.equals("~fieldName")) return e_tp;]|
  	where e_tp := ExprName(AmbName(Id(sortType)), Id("class"))

  to-analyzer-modification:
  	x_dualAnalyzerFields -> bstm*  |[
  		Analyzer toAdd;
  		fieldAnalyzer = new PerFieldAnalyzerWrapper( singletonAnalyzer );
  		bstm*
  		singletonAnalyzer = fieldAnalyzer;		
  	]|
  	where <not(?[])> x_dualAnalyzerFields 
  	with bstm* := <map(field-to-analyzer-modification); flatten-list> x_dualAnalyzerFields

  field-to-analyzer-modification:
  	(x_fieldName, analyzerName) -> bstm* |[
  		toAdd = org.hibernate.search.Search.getFullTextSession(e_HibSession).getSearchFactory().getAnalyzer("~x_analyzerName");
  		fieldAnalyzer.addAnalyzer("~x_fieldName", toAdd);  		
  	]|
  	with x_analyzerName := <concat-strings>[analyzerName, "_QUERY"]
  	
  	
  generate-java-search-functions:
    ent -> <emit-java-code-local> compilation-unit |[
  
      package pkgname;
      
      @Partial
      public class x_class {
      
        public static java.util.List<x_Class> x#_(String searchQuery)  {
          return x#_(searchQuery, 1000, 0);
        }
        public static java.util.List<x_Class> x#_(String searchQuery, int limit)  {
          return x#_(searchQuery, limit, 0);
        }
        public static java.util.List<x_Class> x#_(String searchQuery, int limit, int offset)  {
           return new x_Class#Searcher().query(searchQuery).firstResult(offset).maxResults(limit).list();
        }
      }
    ]|
    where (
        (x_class, _) := <get-entity-def> ent
      ; <get-anno(?IndexedAnno(<id>,_,_,_,_,_,_))> ent
    )
    with x := <concat-strings> ["_static_", "search", x_class]
       ; pkgname := <DomainPackage>
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]