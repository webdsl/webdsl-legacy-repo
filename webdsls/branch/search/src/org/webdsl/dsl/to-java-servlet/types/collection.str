module org/webdsl/dsl/to-java-servlet/types/collection

imports 
  libstrategolib 
  libjava-front 
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/-

rules //types

  builtin-java-type :
    GenericSort("List", [s]) -> type|[ java.util.List<t> ]|
    where t := <java-type> s

  builtin-java-type :
    GenericSort("Set", [s]) -> type|[ java.util.Set<t> ]|
    where t := <java-type> s
    
  type-default-value-override-java :
    GenericSort("List", [s]) -> e|[ new java.util.ArrayList<t>() ]|
    where t := <java-type> s
    
  type-default-value-override-java :
    GenericSort("Set", [s]) -> e|[ new java.util.LinkedHashSet<t>() ]|
    where t := <java-type> s

rules //list functions

  call-to-java-servlet :
    Call(e1, "indexOf", [e2]) -> java|[ e3.indexOf(e4) ]|
    where GenericSort("List",[s]) := <get-type-anno> e1
    with e3 := <expression-to-java-servlet> e1
       ; e4 := <expression-to-java-servlet> e2

  call-to-java-servlet :
    Call(e1, "get", [e2]) -> java|[ (x_type) e3.get(e4) ]|
    where GenericSort("List",[s]) := <get-type-anno> e1
    with e3 := <expression-to-java-servlet> e1
       ; e4 := <expression-to-java-servlet> e2
       ; x_type := <java-type-name> s
         
  void-call-statement-to-java-servlet :
    Stat(Call(e1, "set", [e2,e3])) -> bstm*|[ 
      if(e_index >= 0 && e_index < e_list.size()){
        e_result;
      }
      else{
        utils.Warning.warn("list set(index,entity) function index ("+e_index+") out of bounds (list size is "+e_list.size()+").");
      }
    ]| 
    where <get-type-anno; is-generic-sort> e1
    with  e_index := <expression-to-java-servlet> e2
        ; e_list := <expression-to-java-servlet> e1
        ; e_result := <list-call-to-java-servlet> (e1,e2,e3,"set","setIn")
    
  void-call-statement-to-java-servlet :
    Stat(Call(e1, "insert", [e2,e3])) -> bstm*|[ 
      if(e_index >= 0 && e_index < e_list.size()){
        e_result;
      }
      else{
        utils.Warning.warn("list insert(index,entity) function index ("+e_index+") out of bounds (list size is "+e_list.size()+").");
      }
    ]| 
    where <get-type-anno; is-generic-sort> e1
    with  e_index := <expression-to-java-servlet> e2
        ; e_list := <expression-to-java-servlet> e1
        ; e_result := <list-call-to-java-servlet> (e1,e2,e3,"add","insertIn")
  
  void-call-statement-to-java-servlet :
    Stat(Call(e1, "removeAt", [e2])) -> bstm*|[ 
      if(e_index >= 0 && e_index < e_list.size()){
        e_result;
      }
      else{
        utils.Warning.warn("list removeAt(index) function index ("+e_index+") out of bounds (list size is "+e_list.size()+").");
      }
    ]| 
    where <get-type-anno; is-generic-sort> e1
    with  e_index := <expression-to-java-servlet> e2
        ; e_list := <expression-to-java-servlet> e1
        ; e_result := <remove-at-call-to-java-servlet> (e1,e2,"remove","removeAt") 
   
  remove-at-call-to-java-servlet :
    (e1,e2,x_regular,x_pevents) -> java|[ e3.x_regular(e4) ]|
    where <check-collection-not-in-entity> e1
    with  e3 := <expression-to-java-servlet> e1
        ; e4 := <convert-to-integer-primitive> e2
   
  remove-at-call-to-java-servlet :
    (e1,e2,x_regular,x_pevents) -> java|[ e4.x_pevents#x_field(e5) ]|
    where (e4,x_field) := <check-collection-in-entity> e1
    with  e5 := <convert-to-integer-primitive> e2
         
rules 

  /** 
   * Reusable translation dealing with whether this collection belongs to an entity with property events or is an ordinary collection 
   * This needs to be improved by adding collection classes that represent both of these types, 
   * then 'escaped' collections (eg collection property passed to function) still handle property events. 
   * Maybe there is a way to do this with hibernate collections directly.
  */    
  list-call-to-java-servlet :
    (e1,e2,e3,x_regular,x_pevents) -> <collection-call-to-java-servlet> (e1,e2,e3,x_regular,x_pevents)
    where GenericSort("List",[s]) := <get-type-anno> e1

  collection-call-to-java-servlet :
    (e1,x_regular,x_pevents) -> <collection-call-to-java-servlet> (e1,"none","none",x_regular,x_pevents) 
  
  collection-call-to-java-servlet :
    (e1,e2,x_regular,x_pevents) -> <collection-call-to-java-servlet> (e1,e2,"none",x_regular,x_pevents) 
  
  collection-call-to-java-servlet :
    (e1,e2,e3,x_regular,x_pevents) -> java|[ e4.x_regular(e*) ]|
    where <check-collection-not-in-entity> e1
    with  e4 := <expression-to-java-servlet> e1
        ; e* := <expression-arguments-for-collection-call> (e2,e3)
  
  check-collection-not-in-entity :
    e1 -> e1       
    where GenericSort(_,_) := <get-type-anno> e1
        ; not(<?FieldAccess(_,_)> e1)
        ; not(
            prop := <?Var(<id>)> e1
          ; <get-property-of-entity> (<JavaInEntity>, <remove-first-character-in-string> prop)
        )
    
  collection-call-to-java-servlet :
    (e1,e2,e3,x_regular,x_pevents) -> java|[ e4.x_pevents#x_field(e*) ]|
    where (e4,x_field) := <check-collection-in-entity> e1
    with  e* := <expression-arguments-for-collection-call> (e2,e3)
        
  check-collection-in-entity :        
    e1 -> (e2,x_field)
    where GenericSort(_,_) := <get-type-anno> e1
        ; ( <?FieldAccess(e_entity,x_field)> e1
          ; e2 := <expression-to-java-servlet> e_entity
         <+ x_field := <?Var(<id>);remove-first-character-in-string> e1
          ; <get-property-of-entity> (<JavaInEntity>,x_field) //is inside an entity (otherwise <JavaInEntity> fails) and is a property of that entity (otherwise <is-property-of-entity> fails)
          ; e2 := java:expr|[ this ]| 
          )  
          
  expression-arguments-for-collection-call :
    (e1,e2) -> e1*
    where if "none" := e2
          then e* := []
          else e* := [<expression-to-java-servlet> e2]
          end
        ; if "none" := e1
          then e1* := e*
          else e1* := [<expression-to-java-servlet> e1 | e*]
          end

rules //general collection functions

  call-to-java-servlet :
    Call(e1, "add", [e2]) -> <collection-call-to-java-servlet> (e1,e2,"add","addTo")
    
  call-to-java-servlet :
    Call(e1, "remove", [e2]) -> <remove-call-to-java-servlet> (e1,e2,"remove","removeFrom")
   
  remove-call-to-java-servlet :
    (e1,e2,x_regular,x_pevents) -> java|[ e3.x_regular(e4) ]|
    where <check-collection-not-in-entity> e1
    with  e3 := <expression-to-java-servlet> e1
        ; e4 := <convert-to-integer-class> e2
   
  remove-call-to-java-servlet :
    (e1,e2,x_regular,x_pevents) -> java|[ e4.x_pevents#x_field(e5) ]|
    where (e4,x_field) := <check-collection-in-entity> e1
    with  e5 := <convert-to-integer-class> e2

  // java has inconveniently overloaded remove, a primitive int means remove at index and a Integer class means remove first occurence
  // in WebDSL both primitive int and class Integer can occur, so it has to be forced 
  convert-to-integer-class :
    e_webdsl -> e_java
    with  e := <expression-to-java-servlet> e_webdsl
        ; if SimpleSort("Int") := <get-type-anno> e_webdsl
          then e_java := java:expr|[ new Integer(e) ]|
          else e_java := e end
  convert-to-integer-primitive :
    e_webdsl -> e_java
    with  e := <expression-to-java-servlet> e_webdsl
        ; if SimpleSort("Int") := <get-type-anno> e_webdsl
          then e_java := java:expr|[ (new Integer(e)).intValue() ]|
          else e_java := e end

  call-to-java-servlet :
    Call(e1, "clear", []) -> <collection-call-to-java-servlet> (e1,"clear","removeAllFrom")

  call-to-java-servlet :
    Call(e1, "addAll", [e2]) -> java|[ e3.addAllTo#x_field(e4) ]|
    where (e3,x_field) := <check-collection-in-entity> e1
    with  e4 := <expression-to-java-servlet> e2  
         
  call-to-java-servlet :
     Call(e1, "addAll", [e2]) -> java|[ utils.CollectionType.addAll(e3,e4) ]|
     where <check-collection-not-in-entity> e1
     with  e3 := <expression-to-java-servlet> e1
         ; e4 := <expression-to-java-servlet> e2
         ; t_tmp := <get-type-anno;java-type> e1
         ; x_tmp := <newname> "tmp"

rules //typed collection creations

   expression-to-java-servlet : // The version with items (!= []) will be desugared in desugar.str
     TypedListCreation(s, []) -> java|[ new java.util.ArrayList<t>() ]|
     with  t := <java-type> s

   expression-to-java-servlet :
     TypedSetCreation(s, []) -> java|[ new java.util.LinkedHashSet<t>() ]|
     with  t := <java-type> s

rules //fields

  field-access-to-java-servlet :
    FieldAccess(e1, "length") -> expr|[ e2.size() ]|
    with  e2 := <expression-to-java-servlet> e1
        ; GenericSort(_, _) := <get-type-anno> e1
