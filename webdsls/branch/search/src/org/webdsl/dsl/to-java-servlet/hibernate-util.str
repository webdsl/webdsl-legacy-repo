module org/webdsl/dsl/to-java-servlet/hibernate-util

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

overlays

  e_HibSession =
    java:expr |[ HibernateUtilConfigured.getSessionFactory().getCurrentSession() ]|

rules

  hibernate-forall-criteria :
    (term{JoinProperties(joinproperties)}, t, x, srt, fltr) -> e_criteria
    with  e_criteria := <foldr(!expr|[ e_HibSession.createCriteria(t.class).setCacheable(true) ]|,hibernate-forall-criteria-join)> joinproperties
        //try on next line since not all ordering can be translated to query
        /** ; e_criteria := <foldr(!e0,hibernate-forall-criteria-filter(|x,srt));where(rules(OrderAndLimitApplied:=True())) <+ !e0> [lim,ob]  */
    
  hibernate-forall-criteria-join:
    (str, e) -> expr|[ e.setFetchMode("~str", org.hibernate.FetchMode.JOIN) ]|

  /**
   * Hibernate optimization below on hold, Zef is working on a replacement ORM
   */
  /* 
  hibernate-forall-criteria-filter(|x,srt) = hibernate-forall-criteria-filter
  
  hibernate-forall-criteria-filter: 
    (Limit(limit,first), e) -> expr|[ e.setFirstResult(e_first).setMaxResults(e_limit) ]|
    with  e_limit := <expression-to-java-servlet> limit
        ; e_first := <expression-to-java-servlet> first

  hibernate-forall-criteria-filter(|x,srt) =
    // if the order clause is simply a property, then the query can do the ordering   
    hibernate-forall-criteria-order-is-prop(|x,srt)
  <+\(OrderDescending(Null()), e) -> e\
  <+\(OrderAscending(Null()), e) -> e\
  
  hibernate-forall-criteria-order-is-prop(|x,srt) :
    (OrderDescending(orderexp), e) -> <hibernate-forall-criteria-order-is-prop-helper(|x,srt,"desc")> (orderexp, e)
     
  hibernate-forall-criteria-order-is-prop(|x,srt) :
    (OrderAscending(orderexp), e) -> <hibernate-forall-criteria-order-is-prop-helper(|x,srt,"asc")> (orderexp, e)

  hibernate-forall-criteria-order-is-prop-helper(|x,srt,x_order) :
    (orderexp, e) -> expr|[ e.addOrder(org.hibernate.criterion.Order.x_order("~<concat-strings> ["_",prop]")) ]|
    with  SimpleSort(ent) := srt
    where FieldAccess(var,prop) := orderexp
        ; Var(x) := var
        ; <type-of-property> (ent,prop)
  */

rules

  generate-code-java-servlet-once = 
      bagof-AllEntityNames; string-sort-annos
    ; cached-generate(generate-java-servlet-hibernate-util | "internal_HibernateUtil")
    ; fail
    
  generate-java-servlet-hibernate-util :
    all-entity-names -> <emit-java-code-local> compilation-unit|[
	package utils;
	
	import java.util.Properties;
	
	import org.hibernate.*;
	import org.hibernate.cfg.*;
	import org.webdsl.*;
	import org.hibernate.event.internal.DefaultFlushEntityEventListener;
	import org.hibernate.event.internal.DefaultSaveOrUpdateEventListener;
	import org.hibernate.event.service.spi.EventListenerRegistry;
	import org.hibernate.event.spi.EventType;
	import org.hibernate.event.spi.FlushEntityEvent;
	import org.hibernate.event.spi.SaveOrUpdateEvent;
	import org.hibernate.metamodel.Metadata;
	import org.hibernate.metamodel.MetadataSources;
	import org.hibernate.metamodel.source.internal.MetadataImpl;
	import org.hibernate.service.BasicServiceRegistry;
	import org.hibernate.service.ServiceRegistryBuilder;
	import java.util.*;
	
    import pkgname.*;
    @SuppressWarnings("unused") 
    public class HibernateUtilConfigured {
        private static final SessionFactory sessionFactory;
	    private static MetadataSources metadatasources;
	    private static BasicServiceRegistry registry;
	    static
	    { 
	      try
	      { 
	    	  	registry  = new ServiceRegistryBuilder().buildServiceRegistry();
	
	            //Properties prop = HibernateUtil.getProperties();
	    	  	metadatasources = new MetadataSources( registry );
	    	  	
	    	  	metadatasources.addPackage("utils");
	    	  	metadatasources.addAnnotatedClass(utils.ApplicationContextProperty.class);
	    	  	metadatasources.addAnnotatedClass(utils.File.class);
	            
	    	  	metadatasources.addPackage("org.webdsl.search");
	    	  	metadatasources.addAnnotatedClass(org.webdsl.search.SearchNamespace.class);
	            
	
	    	  	metadatasources.addPackage("org.webdsl.generated");
	            //annotationConfiguration.addAnnotatedClass(User.class);
	            bstm*
	
	            //annotationConfiguration.addProperties(prop);
	            //bstm1*
	            registry.getService(EventListenerRegistry.class).getEventListenerGroup(EventType.SAVE_UPDATE)
	            .appendListener(new SetVersionSaveOrUpdateEventListener());
	                
	            registry.getService(EventListenerRegistry.class).getEventListenerGroup(EventType.FLUSH_ENTITY)
	            .appendListener(new SetValidationEventListener());
	            
	            sessionFactory = metadatasources.buildMetadata().buildSessionFactory();
	            
	        } catch (Throwable ex) {
	            throw new ExceptionInInitializerError(ex);
	        }
	    }
	
	    public static SessionFactory getSessionFactory() {
	        return sessionFactory;
	    }
	    
	    public static MetadataSources getMetaDataSources()
	    { 
	      return metadatasources;
	    }
	    
	    // references that will be implicitly stored in the db need version set to at least 1 as well to indicate a persisted entity     
	    @SuppressWarnings("serial")
	    private static class SetVersionSaveOrUpdateEventListener extends DefaultSaveOrUpdateEventListener 
	    {
	      public void onSaveOrUpdate(SaveOrUpdateEvent event)  throws HibernateException
	      { 
	        setVersion(event.getObject());
	        super.onSaveOrUpdate(event);
	      }
	  
	      public void setVersion(Object o)
	      { 
	        if(org.hibernate.Hibernate.isInitialized(o) && o instanceof WebDSLEntity)
	        { 
	          WebDSLEntity we = (WebDSLEntity)o;
	          if(we.getVersion() <= 0)
	          { 
	            we.setVersion(1);
	          }
	        }
	      }
	    } 
	    
	    //register which objects need to be validated at the end of an action
	    @SuppressWarnings("serial")
	    private static class SetValidationEventListener extends DefaultFlushEntityEventListener
	    { 
	        public void onFlushEntity(FlushEntityEvent event) throws HibernateException
	        { 
	          validate(event.getEntity());
	          super.onFlushEntity(event);
	        }
	        
	        public void validate(Object o)
	        { 
	            if(o instanceof WebDSLEntity)
	            { 
	                WebDSLEntity we = (WebDSLEntity)o;
	                AbstractPageServlet aps = ThreadLocalPage.get();
	                if(aps != null){
	                  aps.addEntityToValidateAfterAction(we); 
	                }
	            }
	        }
	    }
	}
    ]|
    with pkgname := <DomainPackage>
       ; domainpack := <pp-java5-to-string> <DomainPackage>
       ; bstm* := <map({\ 
                           x -> bstm |[ metadatasources.addAnnotatedClass(x_class); ]| 
                           where x_class := <concat-strings> [<DomainPackage;pp-java5-to-string>,".",x,".class"]
                       \})> all-entity-names
      /* ; if not([] := <bagof-AllGlobalVars>) 
         then bstm1* := [ bstm |[ annotationConfiguration.addAnnotatedClass(ApplicationContextProperty.class); ]| ]
         else bstm1* := [] end
 */
