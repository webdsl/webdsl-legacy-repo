module org/webdsl/dsl/to-java-servlet/template-action

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet

rules // action methods

  /**
   * Generate action method code
   */
  GenerateCodeJavaServlet = where(not(ThisEmail));log-time(generate-action-java-servlet-code|"generate-action-java-servlet-code"); fail

  //should only generate an action function
  generate-action-java-servlet-code :
    Action(amod*, x_action, farg*, Block(stat*)) ->
    (<generate-java-servlet-template-partial>
    java |[
      @Partial
      protected void initSubmitActions()
      {
        putAction(
          "~x_action"
        ,
          new x_action(){  
            ~*cbds_ignorevalidation*
            /*
            public org.webdsl.lang.Environment getEnv(){
              return env;
            } 
            */
            public void run(param*)
            {
              ThreadLocalAction.set(this);
              
              if (!ThreadLocalPage.get().hasExecutedAction)
              {
                
                boolean actionFailed = false;
                ThreadLocalPage.get().hasExecutedAction = true; 
                try {
                  bstm*
                  
                  //trigger data invariant validations
                  hibSession.flush();
                  if(!ThreadLocalPage.get().isRollback()){
                    ThreadLocalPage.get().validateEntitiesAfterAction();
                  }
                } 
                catch(utils.ValidationException ve){
                  ThreadLocalPage.get().getValidationExceptions().add(ve.setName(actionident));
                  ThreadLocalPage.get().setValidated(false);
                  actionFailed = true;                 
                }
                catch(utils.MultipleValidationExceptions ve){
                  for(utils.ValidationException vex : ve.getValidationExceptions()){
                    ThreadLocalPage.get().getValidationExceptions().add(vex.setName(actionident));
                  }
                  ThreadLocalPage.get().setValidated(false);
                  actionFailed = true;
                }
                catch(Exception excep)  {
                  System.out.println("exception during execution of action");
                  excep.printStackTrace();
                  ThreadLocalPage.get().setValidated(false);
                  ThreadLocalPage.get().getValidationExceptions().add(new utils.ValidationException(actionident,"An error occured while processing your request"));
                  actionFailed = true;
                  //throw new RuntimeException(excep);
                }
                //redirect to current page by default
                finally{
                  if(!isRedirected && !ThreadLocalPage.get().isDownloadSet() && !actionFailed){
                    try {
                      if (!ThreadLocalPage.get().isAjaxActionExecuted()) {
                        ThreadLocalPage.get().setRedirectUrl(ThreadLocalPage.get().getPageUrlWithParams());
                        if(!ThreadLocalPage.get().isActionLinkUsed()){ response.sendRedirect(ThreadLocalPage.get().getRedirectUrl()); }
                      }
                      else if (!isRedirected) { //nothing updated, 
                        ThreadLocalOut.peek().print("{ action: \"refresh\" },");           
                      }
                    } catch (IOException ioe) {
                      System.out.println("redirect failed");
                      ioe.printStackTrace();
                    }
                  }
                }
              }
            }
          }  
        );
      }
    
    ]|
    ,<emit-java-code-local>
    compilation-unit|[
      package pkgname3;
      import pkgname2.*;
      
      @SuppressWarnings("unused") 
      public abstract class x_action extends utils.ActionClass{
        public abstract void run(param*);
      }
    ]|
    )
    with  
    {| InAction :
         rules(InAction := <id>)
       ; param* := <add-input-id-for-action-as-param;map(arguments-to-java-servlet<+debug(!"map failed in template-action.str"))> farg*
       ; bstm* := <statements-to-java-servlet> stat*
    |}
    ; pkgname2 := <DomainPackage>
    ; pkgname3 := <ActionPackage>
    ; if <fetch(ActionModifierIgnoreValidation)> amod*
      then cbds_ignorevalidation* := [ class-body-dec|[ public boolean isValidationDisabled(){ return true; } ]| ]
      else cbds_ignorevalidation* := [] end 
  
  add-input-id-for-action-as-param :
    params -> <concat> [params,[Arg("actionident",SimpleSort("String"))]]
    