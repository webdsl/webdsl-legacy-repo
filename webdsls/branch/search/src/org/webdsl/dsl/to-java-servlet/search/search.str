module org/webdsl/dsl/to-java-servlet/search/search

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/-

strategies

  property-to-index-annos :
    Property(x, propkind, s, anno*) -> [anno|[ @org.hibernate.search.annotations.Field(name="~x") ]|]
    where not([] := <filter(?SimpleAnno("searchable"))> anno*)
    ; not (<?Ref()<+?Comp() > propkind)
  
  //Reference/Composite properties are embedded index fields, one level of depth right now
  property-to-index-annos :
    p@Property(x, propkind, s, anno*) -> [anno|[ @org.hibernate.search.annotations.IndexedEmbedded(depth=1, prefix="~x" + ".") ]|]
    where not([] := <filter(?SimpleAnno("searchable"))> anno*)    
    ; <?Ref()<+?Comp() > propkind

  property-to-index-annos :
    DerivedProperty(x, _, s, anno*, _) -> [anno|[ @org.hibernate.search.annotations.Field(name="~x") ]|]
    where not([] := <filter(?SimpleAnno("searchable"))> anno*)

  property-to-index-annos :
    DerivedProperty(x, _, s, anno*, _) -> []
    where [] := <filter(?SimpleAnno("searchable"))> anno*

  property-to-index-annos :
    DerivedProperty(x, _, s, anno*, e) -> []
  
  //other side (inverse) of embedded index field  
  property-to-contained-in:
  	p@Property(_, _, _, anno*) -> [anno|[ @org.hibernate.search.annotations.ContainedIn]|]
	where <has-anno(InverseOfSearchable)> p
       
strategies

  GenerateCodeJavaServlet = generate-java-search-functions; fail
  GenerateCodeJavaServlet = generate-java-searchquery-class ; fail


  generate-java-searchquery-class :
  	ent -> <emit-java-code-local> compilation-unit |[
  	package pkgname;
  	
  	import utils.*;
  	
	public class x_class#SearchQuery extends org.webdsl.search.SearchQuery<x_class> {
		
		public x_class#SearchQuery (){
			entityClass = x_class.class;
			searchFields = new String[]{ e_sf* };
			fulltextsession = org.hibernate.search.Search.getFullTextSession(e_HibSession);
		}
	}	
  	]|
    where ((x_class, _) := <get-entity-def> ent
       ; x_props := <get-anno(?IndexedAnno(<id>))> ent)
    with e_sf* := <map(\name -> expr |[ "~name" ]| \)> x_props
       ; pkgname := <DomainPackage>
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]

  generate-java-search-functions:
    ent -> <emit-java-code-local> compilation-unit |[
  
      package pkgname;
      
      @Partial
      public class x_class {
      
        public static java.util.List<x_Class> x#_(String searchQuery)  {
          return x#_(searchQuery, 1000, 0);
        }
        public static java.util.List<x_Class> x#_(String searchQuery, int limit)  {
          return x#_(searchQuery, limit, 0);
        }
        public static java.util.List<x_Class> x#_(String searchQuery, int limit, int offset)  {
           return new x_Class#SearchQuery().setSearchTerms(searchQuery).setFirstResult(offset).setMaxResults(limit).getResultList();
        }
      }
    ]|
    where (
        (x_class, _) := <get-entity-def> ent
      ; x_props := <get-anno(?IndexedAnno(<id>))> ent
    )
    with x := <concat-strings> ["_static_", "search", x_class]
       ; e_sf* := <map(\name -> expr |[ "~name" ]| \)> x_props
       ; pkgname := <DomainPackage>
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]

strategies

  generate-code-java-servlet-once =
      bagof-IndexedEntities
    ; string-sort-annos
    ; cached-generate(generate-java-servlet-indexmanager | "internal_IndexManager")
    ; fail


  generate-java-servlet-indexmanager :
    x_class* ->
    <emit-java-code-local> compilation-unit|[
      package utils;
  
      import java.util.List;
  
      import utils.*;
      import pkgname.*;
      
      import org.webdsl.lang.*;
  
      @SuppressWarnings("all")
      public class IndexManager {
        public static void main(String[] args) {
        	reindex();
        	System.exit(0);
        }
        
        private static void reindex() {
          java.io.PrintWriter out = new java.io.PrintWriter(System.out);
          ThreadLocalOut.push(out);
          // @TODO Globals are not loaded yet
          System.out.println("Starting reindexing of all searchable data...");
          long time = System.currentTimeMillis();
          
          org.hibernate.search.FullTextSession session = org.hibernate.search.Search.getFullTextSession(HibernateUtilConfigured.getSessionFactory().getCurrentSession());
		  
		  bstm*
			 			
		  time = System.currentTimeMillis() - time;
	      System.out.println("Reindexing finished in " + time + "ms total.");
        }
        
        private static boolean reindexEntityClass(Class c, org.hibernate.search.FullTextSession session){
        	System.out.println("reindexing: " + c + "...");
        	long time = System.currentTimeMillis();
        	try {
        		session.createIndexer(c)
 				.batchSizeToLoadObjects( 100 )
				.threadsToLoadObjects( 3 )
 				.threadsForSubsequentFetching( 4 )
 				.startAndWait();
 			}
 			catch(java.lang.InterruptedException ex){
 				System.out.println(ex);
 				return false;
 			}
 			time = System.currentTimeMillis() - time;
 			System.out.println("done in " + time + "ms.");
 			return true;
        }
        public static void optimizeIndex(){
        	System.out.println(new java.util.Date() + ": Optimizing search index ...");
        	org.hibernate.search.Search.getFullTextSession(HibernateUtilConfigured.getSessionFactory().getCurrentSession()).getSearchFactory().optimize();
        	System.out.println(new java.util.Date() + ": Optimizing search index finished succesfully.");
        }
      }
    ]|
    with pkgname := <DomainPackage>
    ; x_class_set := <make-set> x_class*
    ; bstm* := <map(\ x_name -> java|[ reindexEntityClass(x_name.class, session); ]|\)> x_class_set 