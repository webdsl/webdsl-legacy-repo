module org/webdsl/dsl/to-java-servlet/search/search

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/-

strategies

  property-to-index-annos :
    Property(x, propkind, _, anno*) -> <searchable-annos-to-index-annos> searchable-annos
    where not (<?Ref()<+?Comp() > propkind)
    	; searchable-annos := <filter(is-searchable-anno)> anno*
    	; not(?[])
  
  property-to-index-annos :
    DerivedProperty(x, _, _, anno*, _) -> <searchable-annos-to-index-annos> searchable-annos
    where searchable-annos := <filter(is-searchable-anno)> anno*
        ; not(?[])
    	  
  //Reference/Composite properties are embedded index fields, one level of depth right now
  property-to-index-annos :
    Property(x, propkind, srt, anno*) -> [anno|[ @org.hibernate.search.annotations.IndexedEmbedded(depth=1, prefix="~x" + ".") ]|]
    where  <?Ref()<+?Comp() > propkind
    	; <fetch(?SearchableAnno(_))> anno*
  
  //Other side (inverse) of embedded index field needs containedin annotation 
  property-to-contained-in:
  	p@Property(_, _, _, anno*) -> [anno|[ @org.hibernate.search.annotations.ContainedIn]|]
	where <has-anno(InverseOfSearchable)> p

strategies //field annotations
	
  searchable-annos-to-index-annos:
  	searchable-annos -> index-annos
  	with rules(CurrentAnalyzerAnnoDef := []) 
	    ; fields-anno := Anno(TypeName(Id("org.hibernate.search.annotations.Fields")), [ElemValArrayInit(<map(searchable-to-field-anno);flatten-list> searchable-annos)])
	    ; analyzer-def-annos := <bagof-CurrentAnalyzerAnnoDef;flatten-list;wrap-in-analyzer-defs-anno>
	    ; index-annos := <flatten-list>[fields-anno, analyzer-def-annos]

  searchable-to-field-anno :
  	SearchableAnno(sa-args) -> field-anno
  	with  field-args := <map(to-java-field-arg)> sa-args
  	    ; field-anno := Anno(TypeName(Id("org.hibernate.search.annotations.Field")),field-args)
  
  to-java-field-arg :
  	SA-Argument("analyzer", analyzer-name) -> ElemValPair(Id("analyzer"),anno|[ @org.hibernate.search.annotations.Analyzer(definition="~analyzer-name") ]|)
  	where not(<?"no" <+ ?"null"> analyzer-name)
  	with <do-once(create-and-record-analyzer-definition|"create analyzer def")<+ ![]> analyzer-name

  to-java-field-arg :
	SA-Argument("analyzer", analyzer-name) -> ElemValPair(Id("index"),ExprName(AmbName(Id("org.hibernate.search.annotations.Index")), Id("UN_TOKENIZED")))
	where (<?"no" <+ ?"null"> analyzer-name)
	
  to-java-field-arg :
  	SA-Argument("name", field-name) -> ElemValPair(Id("name"),Lit(String([Chars(field-name)])))
  
  to-java-field-arg :
  	SA-Argument("boost", field-boost) -> ElemValPair(Id("boost"),anno|[ @org.hibernate.search.annotations.Boost(e_boost) ]|) 
  	with e_boost := expr |[ ~float:Float(<concat-strings> [field-boost,"f"]) ]| 	

strategies //searchconfigs, analyzers

  create-and-record-analyzer-definition = 
  	SearchConfigFromName; analyzer-def-anno := <search-config-to-analyzer-def>; rules(CurrentAnalyzerAnnoDef :+= analyzer-def-anno)
  	
  search-config-to-analyzer-def:
  	SearchConfig(_,name, body) -> <to-analyzer-def(|name)> body

  to-analyzer-def(|analyzerName):
  	SearchConfigBody(charFilters*, tokenizer, tokenFilters*) -> result
  	with charFiltersDef* := <map(to-char-filter-def)> charFilters*
  	   ; tokenizerDef := <to-tokenizer-def> tokenizer
  	   ; tokenFilterDef* := <map(to-token-filter-def)> tokenFilters*
  	   ; name_arg := ElemValPair(Id("name"),Lit(String([Chars(analyzerName)])))
  	   ; charfilter_arg := ElemValPair(Id("charFilters"),ElemValArrayInit(charFiltersDef*))
  	   ; tokenizer_arg := ElemValPair(Id("tokenizer"), tokenizerDef)
  	   ; tokenfilter_arg := ElemValPair(Id("filters"),ElemValArrayInit(tokenFilterDef*))
  	   ; result := Anno(TypeName(Id("org.hibernate.search.annotations.AnalyzerDef")),[name_arg, charfilter_arg,tokenizer_arg,tokenfilter_arg])     

  to-tokenizer-def:
  	Tokenizer(tokenizername, args) -> result
  	with   e_analyzerargs := <map(to-analyzer-arg)> args
  		; tokenizername' := <to-fully-qlfd-name> tokenizername
  		; result := Anno(TypeName(Id("org.hibernate.search.annotations.TokenizerDef")), [ ElemValPair(Id("factory"), Lit(Class(ClassOrInterfaceType(TypeName(Id(tokenizername')),None()))))
                              , ElemValPair(Id("params"), ElemValArrayInit(e_analyzerargs))
                              ])
  
  to-token-filter-def:
  	TokenFilter(filtername, args) -> result
  	with  e_analyzerargs := <map(to-analyzer-arg)> args
		; filtername' := <to-fully-qlfd-name> filtername
  		; result := Anno(TypeName(Id("org.hibernate.search.annotations.TokenFilterDef")), [ ElemValPair(Id("factory"), Lit(Class(ClassOrInterfaceType(TypeName(Id(filtername')),None()))))
                              , ElemValPair(Id("params"), ElemValArrayInit(e_analyzerargs))
                              ])
  	
  to-char-filter-def:
  	CharFilter(filtername, args) -> result
  	with  e_analyzerargs := <map(to-analyzer-arg)> args
  		; filtername' := <to-fully-qlfd-name> filtername
  		; result := Anno(TypeName(Id("org.hibernate.search.annotations.CharFilterDef")), [ ElemValPair(Id("factory"), Lit(Class(ClassOrInterfaceType(TypeName(Id(filtername')),None()))))
                              , ElemValPair(Id("params"), ElemValArrayInit(e_analyzerargs))
                              ])
                                
  to-analyzer-arg:
  	Argument(x_name, x_value) ->   anno|[ @org.hibernate.search.annotations.Parameter(name = "~x_name", value = x_value) ]|
  
  to-fully-qlfd-name:
  	name -> name'
  	with
  		if (<string-starts-with(|String("org.apache.solr.analysis."))>name) then name' := name
  		else name' := <conc-strings>("org.apache.solr.analysis.",name) end
  		
  wrap-in-analyzer-defs-anno:
  	list-> Anno(TypeName(Id("org.hibernate.search.annotations.AnalyzerDefs")), [ElemValArrayInit(list)])
  	where not (?[])
 
  wrap-in-analyzer-defs-anno:
  	list -> list
  	where ?[]

strategies

  GenerateCodeJavaServlet = generate-java-search-functions; fail
  GenerateCodeJavaServlet = generate-java-searchquery-class ; fail


  generate-java-searchquery-class :
  	ent -> <emit-java-code-local> compilation-unit |[
  	package pkgname;
  	
  	import utils.*;
  	
	public class x_class#SearchQuery extends org.webdsl.search.SearchQuery<x_class> {
		
		public x_class#SearchQuery (){
			entityClass = x_Class.class;
			nonNGramSearchFields = new String[]{ e_sf* };
			nGramSearchFields = nGramFilterFields = new String[]{ e_ngff* };
			untokenizedFields = new String[]{ e_utf* };
			mltSearchFields = new String[]{ e_mltsf* };
			fullTextSession = org.hibernate.search.Search.getFullTextSession(e_HibSession);
		}
	}	
  	]|
    where ((x_class, _) := <get-entity-def> ent
       ; x_props := <get-anno(?IndexedAnno(<id>,_,_))> ent
       ; x_propsNgram := <get-anno(?IndexedAnno(_,<id>,_))> ent
       ; x_propsUntokenized := <get-anno(?IndexedAnno(_,_,<id>))> ent)
    with e_ngff* := <map(\name -> expr |[ "~name" ]| \)> x_propsNgram
       ; e_sf* := <diff>(<map(\name -> expr |[ "~name" ]| \)> x_props,e_ngff*)
       ; e_utf* := <map(\name -> expr |[ "~name" ]| \)> x_propsUntokenized
       ; e_mltsf* := <diff>(e_sf*,e_utf*)
       ; pkgname := <DomainPackage>
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]
         

  generate-java-search-functions:
    ent -> <emit-java-code-local> compilation-unit |[
  
      package pkgname;
      
      @Partial
      public class x_class {
      
        public static java.util.List<x_Class> x#_(String searchQuery)  {
          return x#_(searchQuery, 1000, 0);
        }
        public static java.util.List<x_Class> x#_(String searchQuery, int limit)  {
          return x#_(searchQuery, limit, 0);
        }
        public static java.util.List<x_Class> x#_(String searchQuery, int limit, int offset)  {
           return new x_Class#SearchQuery().terms(searchQuery).firstResult(offset).maxResults(limit).list();
        }
      }
    ]|
    where (
        (x_class, _) := <get-entity-def> ent
      ; x_props := <get-anno(?IndexedAnno(<id>,_,_))> ent
    )
    with x := <concat-strings> ["_static_", "search", x_class]
       ; pkgname := <DomainPackage>
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]

strategies

  generate-code-java-servlet-once =
      bagof-IndexedEntities
    ; string-sort-annos
    ; cached-generate(generate-java-servlet-indexmanager | "internal_IndexManager")
    ; fail


  generate-java-servlet-indexmanager :
    x_class* ->
    <emit-java-code-local> compilation-unit|[
      package utils;
  
      import java.util.List;
  
      import utils.*;
      import pkgname.*;
      
      import org.webdsl.lang.*;
  
      @SuppressWarnings("all")
      public class IndexManager {
        public static void main(String[] args) {
        	reindex();
        	System.exit(0);
        }
        
        private static void reindex() {
          java.io.PrintWriter out = new java.io.PrintWriter(System.out);
          ThreadLocalOut.push(out);
          // @TODO Globals are not loaded yet
          System.out.println("Starting reindexing of all searchable data...");
          long time = System.currentTimeMillis();
          
          org.hibernate.search.FullTextSession session = org.hibernate.search.Search.getFullTextSession(HibernateUtilConfigured.getSessionFactory().getCurrentSession());
		  
		  bstm*
			 			
		  time = System.currentTimeMillis() - time;
	      System.out.println("Reindexing finished in " + time + "ms total.");
        }
        
        private static boolean reindexEntityClass(Class c, org.hibernate.search.FullTextSession session){
        	System.out.println("reindexing: " + c + "...");
        	long time = System.currentTimeMillis();
        	try {
        		session.createIndexer(c)
 				.batchSizeToLoadObjects( 50 )
				.threadsToLoadObjects( 3 )
 				.threadsForSubsequentFetching( 4 )
 				.startAndWait();
 			}
 			catch(java.lang.InterruptedException ex){
 				System.out.println(ex);
 				return false;
 			}
 			time = System.currentTimeMillis() - time;
 			System.out.println("done in " + time + "ms.");
 			return true;
        }
        public static void optimizeIndex(){
        	System.out.println(new java.util.Date() + ": Optimizing search index started.");
        	org.hibernate.search.Search.getFullTextSession(HibernateUtilConfigured.getSessionFactory().getCurrentSession()).getSearchFactory().optimize();
        	System.out.println(new java.util.Date() + ": Optimizing search index finished succesfully.");
        }
      }
    ]|
    with pkgname := <DomainPackage>
	    ; x_class_set := <make-set> x_class*
	    ; bstm* := <map(\ x_name -> java|[ reindexEntityClass(x_name.class, session); ]|\)> x_class_set 

strategies

is-searchable-anno = ?SearchableAnno(_)
