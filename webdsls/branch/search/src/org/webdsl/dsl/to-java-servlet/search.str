module org/webdsl/dsl/to-java-servlet/search

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/-

strategies

  property-to-index-annos :
    Property(x, propkind, s, anno*) -> [anno|[ @org.hibernate.search.annotations.Field(name="~x") ]|]
    where not([] := <filter(?SimpleAnno("searchable"))> anno*)
    ; not (<?Ref()<+?Comp() > propkind)
  
  //Reference/Composite properties are embedded index fields, one level of depth right now
  property-to-index-annos :
    Property(x, propkind, s, anno*) -> [anno|[ @org.hibernate.search.annotations.IndexedEmbedded(depth=1) ]|]
    where not([] := <filter(?SimpleAnno("searchable"))> anno*)    
    ; <?Ref()<+?Comp() > propkind

  property-to-index-annos :
    Property(x, _, s, anno*) -> []
    where [] := <filter(?SimpleAnno("searchable"))> anno*

  property-to-index-annos :
    DerivedProperty(x, _, s, anno*, _) -> [anno|[ @org.hibernate.search.annotations.Field(name="~x") ]|]
    where not([] := <filter(?SimpleAnno("searchable"))> anno*)

  property-to-index-annos :
    DerivedProperty(x, _, s, anno*, _) -> []
    where [] := <filter(?SimpleAnno("searchable"))> anno*


  property-to-index-annos :
    DerivedProperty(x, _, s, anno*, e) -> []

rules 		// get all properties of an entity, including supertypes (similar to front-end rule: all-properties)

  get-all-properties-in-entity:
    ent -> props
    with (_,body) := <get-entity-def> ent
       ; ourprops := <filter(is-property-cons)> body
       ; if <?Entity(_, x_super, _)> ent then
           props := <conc> (ourprops, <EntityFromName; get-all-properties-in-entity> x_super)
         else
          props := ourprops
         end
       
strategies

  GenerateCodeJavaServlet = generate-java-search-functions; fail

  generate-java-search-functions:
    ent -> <emit-java-code-local> compilation-unit |[
  
      package pkgname;
      
      @Partial
      public class x_class {
      
        public static java.util.List<x_Class> x#_(String searchQuery)  {
          return x#_(searchQuery, 1000, 0);
        }
        public static java.util.List<x_Class> x#_(String searchQuery, int limit)  {
          return x#_(searchQuery, limit, 0);
        }
        public static java.util.List<x_Class> x#_(String searchQuery, int limit, int offset)  {
          String[] searchFields = { e_sf* };
          org.apache.lucene.queryParser.QueryParser parser = new org.apache.lucene.queryParser.MultiFieldQueryParser(org.apache.lucene.util.Version.LUCENE_30, searchFields, new org.apache.lucene.analysis.standard.StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_30));
          try {
            org.apache.lucene.search.Query luceneQuery = parser.parse(searchQuery);
            org.hibernate.search.FullTextSession fts = org.hibernate.search.Search.getFullTextSession(e_HibSession);
            org.hibernate.Query query = fts.createFullTextQuery(luceneQuery, x_Class.class).setMaxResults(limit).setFirstResult(offset);
            
            return query.list();
          } catch (org.apache.lucene.queryParser.ParseException pe) {
            return new java.util.ArrayList<x_Class>();
          }
        }
      }
    ]|
    where (
        (x_class, _) := <get-entity-def> ent
      ; x_props := <get-anno(?IndexedAnno(<id>))> ent
      //; x_props_ref := <
    )
    with x := <concat-strings> ["_static_", "search", x_class]
       ; e_sf* := <map(\name -> expr |[ "~name" ]| \)> x_props
       ; pkgname := <DomainPackage>
       ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]

strategies

  generate-code-java-servlet-once =
      bagof-IndexedEntities
    ; string-sort-annos
    ; cached-generate(generate-java-servlet-reindexer | "internal_ReIndex")
    ; fail

  generate-java-servlet-reindexer :
    x_class* ->
    <emit-java-code-local> compilation-unit|[
      package utils;
  
      import java.util.List;
  
      import utils.*;
      import pkgname.*;
      
      import org.webdsl.lang.*;
  
      @SuppressWarnings("all")
      public class ReIndex {
        public static void main(String[] args) {
          java.io.PrintWriter out = new java.io.PrintWriter(System.out);
          ThreadLocalOut.push(out);
          // @TODO Globals are not loaded yet
          
          bstm*
          System.exit(0);
        }

        ~*cbd*
      }
    ]|
    with pkgname := <DomainPackage>
       ; x_class_set := <make-set> x_class*
       ; bstm* := <map(\ x_name -> java|[ for(int p = 0; index#x_name(p); p++); ]|\)> x_class_set 
       ; cbd* := <map(generate-java-servlet-indexer)> x_class_set

  generate-java-servlet-indexer :
    x_Class -> class-body-dec |[
        private static boolean index#x_Class(int page) {
          System.out.println("Indexing " + "~x_Class" + ": " + (page * 1000) + " - " + ((page + 1) * 1000));
          org.hibernate.Session session = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
          session.beginTransaction();
          List<x_Class> results = session.createQuery("from " + "~x_Class").setFirstResult(1000*page).setMaxResults(1000).list();
          org.hibernate.search.FullTextSession ftem = org.hibernate.search.Search.getFullTextSession(session);
          ftem.getTransaction().begin();
          for(x_Class r : results) {
            ftem.index(r);
          }
          int resultLength = results.size();
          ftem.getSearchFactory().optimize( x_Class.class );
          ftem.getTransaction().commit();
          return resultLength == 1000;
        }
      ]|

