module org/webdsl/dsl/languages/action/rename

rules

  rename-action :
    VarDecl(x, srt) -> VarDecl(y, srt2)
    with  srt2 := <rename-all> srt //no check for InDef since this type of var decl cannot be global
        ; y := <rename-bound(|srt2)> x
        ; <declare-vars-in-context> y

  rename-action :
    v@VarDeclInit(x, srt, e) -> VarDeclInit(y, srt2, e')
    where InDef
    with  srt2 := <rename-all> srt
        ; e' := <rename-all> e
        ; y := <rename-bound(|srt2)> x
        ; <declare-vars-in-context> y
        
  rename-action :
    v@VarDeclInitInferred(x, e) -> VarDeclInitInferred(y, e')
    where InDef
    with  e' := <rename-all> e
        ; srt := <type-of <+ !"unknown"> e' // type-of can fail if the expression cannot be typed, in that case the var will not be declared and constraint error triggers
        ; y := <rename-bound(|srt)> x
        ; <declare-vars-in-context> y

  rename-action :
    v@VarDeclInit(x, srt, e) -> VarDeclInit(x, srt, e')
    where not(InDef)//needed for inital rename
        ; not(IsGlobal)//needed for rename from model-to-model innermost without context
    with e' := <rename-all> e
       ; rules ( TypeOf : x -> srt )
       ; rules ( IsGlobal : x )
       
  rename-action :
    v@VarDeclInitInferred(x, e) -> VarDeclInitInferred(x, e')
    where not(InDef)//needed for inital rename
        ; not(IsGlobal)//needed for rename from model-to-model innermost without context
    with  e' := <rename-all> e
        ; srt := <type-of <+ !"unknown"> e'  // type-of can fail if the expression cannot be typed, in that case the var will not be declared and constraint error triggers
        ; rules ( TypeOf : x -> srt )
        ; rules ( IsGlobal : x )
  
   rename-action :
     s@SimpleSort(_) -> s2
     with  s3 := <rename-type> s
         ; s2 := <rename-sort-for-generic> s3
         
   rename-action :
     GenericSort(g, types) -> GenericSort(g, types2)
     where not( g := "SDFInput")
     with  types2 := <rename-all> types

   rename-action :
    Block(stat1*) -> Block(stat2*)
    with {| Rename
          : stat2* := <rename-all> stat1*
          |}
  rename-action :
    Function(x, args1, srt, b1) -> <declare-global-func <+ debug> Function(x, args2, srt, b2)
    where not(InEntity)
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    FunctionNoReturn(x, args1, b1) -> <declare-global-func <+ debug> FunctionNoReturn(x, args2, b2)
    where not(InEntity)
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    Function(x, args1, srt, b1) -> Function(x, args2, srt, b2)
    where InEntity
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    FunctionNoReturn(x, args1, b1) -> FunctionNoReturn(x, args2, b2)
    where InEntity
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}

  rename-action :
    Arg(x, srt) -> Arg(y, srt2)
    with srt2 := <rename-type> srt
       ; y := <rename-bound(|srt2)> x
