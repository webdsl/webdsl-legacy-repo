module org/webdsl/dsl/languages/data-model/entity-events

imports
  libstratego-lib
imports
  libwebdsl-front

rules

  desugar-data = desugar-entity-events

  desugar-entity-events :
    SessionEntity(x_class, props, functions) -> SessionEntity(x_class, props, functions)
    where <desugar-entity-events-helper> x_class
    
  desugar-entity-events :
    Entity(x_class,superclass, props, functions) -> Entity(x_class,superclass, props, functions)
    where <desugar-entity-events-helper> x_class
    
  desugar-entity-events :
    EntityNoSuper(x_class, props, functions) -> EntityNoSuper(x_class, props, functions)
    where <desugar-entity-events-helper> x_class 

  desugar-entity-events-helper :
    x_class -> x_class
    where not(<EntityEventFunctionsGenerated> x_class )
        ; fun* := <get-extensible-functions-for-entity-events> x_class
        ; not(?[])
    with  <emit-webdsl-code> def |[
            extend entity x_class {
              fun*
            }         
          ]|
        ; rules ( EntityEventFunctionsGenerated : x_class )

strategies //declare

  extend-entity-declare = ?Entity(x_class,_,_,_);!x_class;get-extensible-functions-for-entity-events;map(declare-function(|x_class));fail

rules  // also used in transformation/entity-events

  get-extensible-functions-for-entity-events :  
    x_class -> result
    with  x_namecons := x_class
        ; result := [
            fun |[ 
              function x_namecons():Void {} 
            ]|
          ]
        ; rules ( HasEntityEvent : (x_class,"constructor") )

