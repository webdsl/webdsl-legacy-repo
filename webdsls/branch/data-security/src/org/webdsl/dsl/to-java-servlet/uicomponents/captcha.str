module org/webdsl/dsl/to-java-servlet/uicomponents/captcha

imports
  libstrategolib

imports
  libwebdsl-front

rules // captcha should only be checked when a form is submitted that contained a captcha

  handle-actions-input-to-java-servlet :
    tc@elem|[ captcha()[passign*]{} ]| ->
    <for-loop-counter-wrap-code> 
    bstm*|[
           Boolean isResponseCorrect =Boolean.FALSE;
           //remenber that we need an id to validate!
           String captchaId = request.getSession().getId();
           //retrieve the response
           String response = ps.getParammap().get("j_captcha_response");
           if(response!=null){
             // Call the Service method
             try {
                  isResponseCorrect = utils.CaptchaServiceSingleton.getInstance().validateResponseForID(captchaId,
                          response);
             } catch (com.octo.captcha.service.CaptchaServiceException cse) {
                   //should not happen, may be thrown if the id is not valid
             }
             if(!isResponseCorrect){
               ps.setValidated(false);
             }
           }
    ]|
    
  elem-to-java-servlet : 
    tc@elem|[ captcha()[passign*]{} ]| ->
    <wrap-common-context-code>
    bstm* |[ 
      out.print("<table><tr><td><img src=\""+ThreadLocalServlet.getContextPath()+"/jcaptcha\"></td></tr>");//TODO use styling for layout instead of tables
      out.print("<tr><td><input type='text' name='j_captcha_response' "+e_attrs1+" value=''></td></tr>");
      if(!ps.isValidated()) { //TODO: fix: message will be shown on all rerendered captchas
        out.print("<tr><td>text entered did not match text in image</td></tr>"); //TODO: use a more flexible message mechanism
      }
      out.print("</table>");
    ]|
    with  e_attrs1 := <to-html-attrs> passign*   