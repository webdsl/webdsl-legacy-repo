module org/webdsl/dsl/modules/types/data-access

rules //validate template call

/*
AllowFieldAccess(
  WriteMode()
, "Person"
, "name"
, LargerThan(Var("salary"), Int("10000"))
)
*/

  rename :
    AllowFieldAccess(mode,entity,field,exp) -> <where(debug)> AllowFieldAccess(mode,entity,field,exp2)  
    with  {| Rename
           : exp3 := <alltd(rename-field-access-exp(|entity))> exp
           ; exp2 := <rename-all> exp3
           |}
           
  rename-field-access-exp(|entity) :
    Var(x) -> Var(y)
    where srt := <TypeOfProperty> (entity,x)
    with escapedname := <concat-strings> ["_",x]
    with y := x{escapedname}
       ; rules ( TypeOf : y -> srt )
  
rules //declare

  declare :
    a @ AllowFieldAccess(mode,entity,field,exp) -> a
 //   with rules ( EntityFieldAccess :+ (entity, field, mode) -> exp ) 

rules

  constraint-error : 
    a@AllowFieldAccess(mode,entity,field,exp) -> <add-error(|["data access entity does not exist: "])>
    where <not(IsEntity)> entity

  constraint-error : 
    a@AllowFieldAccess(mode,entity,field,exp) -> <add-error(|["invalid field for entity "])>
    where <not(is-property)> (entity,field)

  constraint-error : 
    a@AllowFieldAccess(mode,entity,field,exp) -> <add-error(|["data access condition must be boolean: "])>
    where not(SimpleSort("Bool") := <type-of> exp)

rules

  desugar : 
    AllowFieldAccess(WriteMode(),x_entity,x_field,e_cond) -> def |[ 
         extend entity x_entity {
            function x_check(x_field:srt_type) : Bool { return e_cond; }
            extend function x_method(var:srt_type) { 
              if (!this.x_check(var)) { 
                validate(false, "Access control violation"); 
                } 
              }
         }
     ]|
     with x_check := <concat-strings>["canWrite", x_field];
          x_method := <concat-strings>["set", <capitalize-string>x_field];
          srt_type := <TypeOfProperty> (x_entity,x_field);
          rules ( HasPropertyEvent : (x_entity,x_field,"set") )

//          ; debug
/*
  desugar : 
    AllowFieldAccess(ReadMode(),x_entity,x_field,e_cond) -> def |[ 
         extend entity x_entity {
            function x_check() : Bool { return e_cond; }
            extend function x_method() : srt_type { if (!x_check()) { validate(false, "Access control violation"); } }
         }
     ]|
     with x_check := <concat-strings>["canRead", x_field];
          x_method := <concat-strings>["get", <capitalize-string>x_field];
          srt_type := <TypeOfProperty> (x_entity,x_field)
*/
