module org/webdsl/dsl/typechecker/rename

/**
 * Renaming
 * --
 * At the start of the rewriting process, all variables are renamed by annotating them, to make them unique.
 * Declaring is part of the renaming process
 */

imports
  libstrategolib

imports
  libwebdsl-front

rules 

  rename-all = alltd(rename)

  rename-closed = // FIXME: Scope InDef?!
    {| Rename, InDef 
     : rules ( InDef := True() )
     ; rename-all 
     |}

  rename = Rename

  /**
   * rename-bound does the actual renaming. The other rules guide the application of rename-bound
   * 
   * NOTE: Qualified and Assignment are anomalies: because of the non-expression nature of left-hand sides of assignments 
   *   (which Qualified is used for), variables like a are parsed as "a", instead of Var("a"). Therefore, 
   *   the renaming step must take this into account, so that the leftmost item in a Qualified is rewritten
   *   as Vars are.
   */
  rename-bound(|srt) :
    x -> y
    with  y := x{<newname> x}
        ; rename-bound-rules(|x,y,srt)

  rename-bound-rules(|x,y,srt) =
    rules ( 
      Rename : Var(x) -> Var(y)
      RenameType : GenericSort("EntityTypeNamed",[x]) -> GenericSort("EntityTypeNamed",[y])
      RenameType : SimpleSort(x) -> GenericSort("EntityTypeNamed",[y])
      Rename : Qualified(x, z) -> Qualified(y, z)
      Rename : Stat(Assignment(x, e)) -> Stat(Assignment(y, <rename-all> e))
      TypeOf : y -> srt
    )
  //; try(rename-bound-hook(|x,y))
    
  rename-type = ?s; (RenameType <+ !s)
