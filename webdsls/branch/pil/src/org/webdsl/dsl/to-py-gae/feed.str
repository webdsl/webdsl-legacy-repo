module org/webdsl/dsl/to-py-gae/feed

imports
  libstrategolib
  libwebdsl-front

imports 
  org/webdsl/dsl/to-py-gae/-
  
strategies

  PyGenerateCode = py-feed-to-code; fail

  py-feed-to-code =
    ?def@Define([Feed()], x, args, elem*)
    ; with(id
        ; x_cls := <capitalize-string> x
        ; path := <concat-strings> ["'/", x]
        ; e_pattern := String(<concat-strings> [path, <map(\ _ -> "/([^/]+)" \); concat-strings> args, "'"])
        ; e_lst := ListLiteral(<map(py-argument-to-register-tuple)> args)
        ; <emit-python(|"template")> python*|[ webdsl.utils.register_feed(e_pattern, x_cls, e_lst); ]|
        ; stm3* := <map(py-session-var-to-code); concat> <bagof-SessionVariable; make-set>
        ; {| PyThisTemplate, IsScoped
           : rules ( PyThisTemplate := x )
           ; <map(\ Arg(x, _) -> <rules( IsScoped : x )> \)> args
           ; stm2* := <py-feed-elems-to-render> elem*
           |}
        ; <emit-python(|"template")> python*|[
            @partial
            class x_cls(webdsl.utils.RequestHandler): {
              def load_session(self): {
                  session = webdsl.session.Session();
                  stm3*
              };
              def render(self, out): {
                template_call_counter = -1;
                out.write('<?xml version="1.0" encoding="utf-8"?>');
                out.write('<feed xmlns="http://www.w3.org/2005/Atom">');
                stm2*
                out.write('</feed>');
              };
            };
          ]|
      )

  py-feed-elems-to-render =
    map( py-feed-elem-to-render <+ py-page-elem-to-render <+ py-skipped-element)
    ; flatten-list

rules

  py-feed-elem-to-render :
    elem|[ title()[] { elem* } ]| -> python*|[
      from StringIO import StringIO;
      old_out = out;
      out = StringIO();
      stm*
      value = webdsl.remove_tags(out.getvalue());
      out = old_out;
      out.write('<title>' + value + '</title>');
    ]|
    with stm* := <py-feed-elems-to-render> elem*

  py-feed-elem-to-render :
    elem|[ subtitle()[] { elem* } ]| -> python*|[
      from StringIO import StringIO;
      old_out = out;
      out = StringIO();
      stm*
      value = webdsl.remove_tags(out.getvalue());
      out = old_out;
      out.write('<subtitle>' + value + '</subtitle>');
    ]|
    with stm* := <py-feed-elems-to-render> elem*

  py-feed-elem-to-render :
    elem|[ entry()[] { elem* }]| -> python*|[
      out.write('<entry>');
      stm*
      out.write('</entry>');
    ]|
    with stm* := <py-feed-elems-to-render> elem*

  py-feed-elem-to-render :
    elem|[ author()[] { elem* }]| -> python*|[
      out.write('<author><name>');
      stm*
      out.write('</name></author>');
    ]|
    with stm* := <py-feed-elems-to-render> elem*

  py-feed-elem-to-render :
    elem|[ link()[]{ elem* } ]| -> python*|[
      from StringIO import StringIO;
      old_out = out;
      out = StringIO();
      stm*
      value = webdsl.remove_tags(out.getvalue());
      out = old_out;
      out.write('<link href="' + cgi.escape(value, True) + '"/>');
    ]|
    with stm* := <py-feed-elems-to-render> elem*

  py-feed-elem-to-render :
    elem|[ updated(e)[]{} ]| -> python*|[
      out.write('<updated>');
      out.write(e_target.strftime('%Y-%m-%dT%H:%M:%S'));
      out.write('</updated>');
    ]|
    with e_target := <expression-to-python> e

  py-feed-elem-to-render :
    elem|[ id()[] { elem* }]| -> python*|[
      out.write('<id>');
      from StringIO import StringIO;
      old_out = out;
      out = StringIO();
      stm*
      value = webdsl.remove_tags(out.getvalue());
      out = old_out;
      out.write(value);
      out.write('</id>');
    ]|
    with stm* := <py-feed-elems-to-render> elem*

  py-feed-elem-to-render :
    elem|[ content()[]{ elem* } ]| -> python*|[
      out.write('<content type="html">');
      from StringIO import StringIO;
      old_out = out;
      out = StringIO();
      stm*
      value = cgi.escape(out.getvalue(), True);
      out = old_out;
      out.write(value);
      out.write('</content>');
    ]|
    with stm* := <py-feed-elems-to-render> elem*

  py-feed-elem-to-render =
    (?ForAll(_, _, _, _) <+ ?For(_, _, _, _, _) <+ ?IfTempl(_, _, _))
    ; py-page-elem-to-generic(py-feed-elems-to-render)

  py-feed-elem-to-render :
    Text(e) -> python*|[ out.write(cgi.escape(unicode(e2))); ]|
    with e2 := <expression-to-python> e

  py-feed-elem-to-render :
    elem|[ text(e)[]{} ]| -> python*|[ out.write(cgi.escape(unicode(e2))); ]|
    with e2 := <expression-to-python> e

/*
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Example Feed</title>
 <subtitle>A subtitle.</subtitle>
 <link href="http://example.org/feed/" rel="self"/>
 <link href="http://example.org/"/>
 <updated>2003-12-13T18:30:02Z</updated>
 <author>
   <name>John Doe</name>
   <email>johndoe@example.com</email>
 </author>
 <id>urn:uuid:60a76c80-d399-11d9-b91C-0003939e0af6</id>
 
 <entry>
   <title>Atom-Powered Robots Run Amok</title>
   <link href="http://example.org/2003/12/13/atom03"/>
   <id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id>
   <updated>2003-12-13T18:30:02Z</updated>
   <summary>Some text.</summary>
 </entry>
 
</feed>
*/
    
