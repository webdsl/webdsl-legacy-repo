module org/webdsl/dsl/modules/procedures/generate/template

imports
  libstrategolib
  libwebdsl-front

strategies // Generate templates and status and todo pages

  procedure-generate-templates = 
    with(<map(procedure-emit-entity-template)> <bagof-ProcedureEntities; make-set>)

  procedure-emit-entity-template =
    ?SimpleSort(ent)
    ; with(id
      ; procedures := <bagof-Procedures; make-set> SimpleSort(ent)
      ; x1     := <concat-strings> [<decapitalize-string> ent, "Procedures"]
      ; x2     := <concat-strings> [<decapitalize-string> ent, "ProceduresList"]
      ; x_arg  := <decapitalize-string> ent
      ; srt    := SimpleSort(ent)
      ; elem*  := <map(procedure-to-listitem(|x_arg))> procedures
      ; <emit-webdsl-code> def|[
          define x2(x_arg : srt) { // ProceduresList
            list {
              elem*
            }
          }
        ]|
      ; <emit-webdsl-code> def|[
          define x1(x_arg : srt) { // Procedures
            header {output(x_arg)}
            x2(x_arg)
          }
        ]|
    )

  procedure-to-listitem(|x_arg) :
    x_op -> webdsl|[
            if(e) {
              listitem {
                navigate(x_op(x_arg)) { text(e2) }
              }
            }
          ]|
    where not(<IsDoProcedure> x_op)
        ; e := <procedure-rename-var(|<ProcedureArg> x_op, x_arg)> And(<ProcedureWho> x_op, <ProcedureWhen> x_op)
        ; e2 := String(<make-human-readable> x_op)

  procedure-to-listitem(|x_arg) :
    x_op -> webdsl|[
            if(e) {
              listitem {
                navigatebutton(x_op(x_arg), e2)
              }
            }
          ]|
    where <IsDoProcedure> x_op
        ; e := <procedure-rename-var(|<ProcedureArg> x_op, x_arg)> And(<ProcedureWho> x_op, <ProcedureWhen> x_op)
        ; e2 := String(<make-human-readable> x_op)
