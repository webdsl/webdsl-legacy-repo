module org/webdsl/dsl/modules/schedule

imports
  libstrategolib
  libwebdsl-front

rules // typecheck

  constraint-error :
    webdsl|[ schedule e1 for e2; ]| -> <add-error(|["Can only schedule global function calls."])>
    where not(ThisCall(_, _) := e1)

  constraint-error :
    webdsl|[ schedule e1; ]| -> <add-error(|["Can only schedule global function calls."])>
    where not(ThisCall(_, _) := e1)

  constraint-error :
    webdsl|[ schedule e1 for e2; ]| -> <add-error(|["for part of scheduling should return a DateTime."])>
    where not(SimpleSort("DateTime") := <type-of> e2)

  rename :
    webdsl|[ schedule x(e*) for e2; ]| -> webdsl|[ schedule x(e2*) for e3; ]|
    where e2* := <rename-all> e*
        ; e3 := <rename-all> e2
        ; sig := <map(type-of)> e*
        ; rules ( SchedulableFunctions :+= (x,  sig) )

  rename :
    webdsl|[ schedule x(e*); ]| -> webdsl|[ schedule x(e2*); ]|
    where e2* := <rename-all> e*
        ; sig := <remove-position-annos; map(type-of)> e2*
        ; rules ( SchedulableFunctions :+= (x,  sig) )

rules // normalization

  normalize :
    webdsl|[ schedule e; ]| -> webdsl|[ schedule e for now(); ]|

rules // desugaring

  desugar = schedule-translate
  desugar = schedule-generate-entities; fail

  schedule-translate :
    webdsl|[ schedule x(e*) for e2; ]| -> <rename-all> webdsl|[ {
                                           var x_var : x_srt := x_srt{};
                                           x_var.dateScheduled := e2;
                                           stat*
                                           x_var.persist();
                                         } ]|
    with {| ArgCounter
          : rules ( ArgCounter := 0 )
          ; argtypes := <map(\ e -> <type-of> e \)> e*
          ; x_newfunc := <new-function-name> (x, argtypes)
          ; x_var := <newname> "schedule"
          ; x_srt := <concat-strings; capitalize-string> [x_newfunc, "ScheduleStatus"]
          ; stat* := <map({x_arg, c, e:
                        \ e -> webdsl|[ x_var.x_arg := e; ]|
                          where c := <ArgCounter; inc>
                              ; rules ( ArgCounter := c )
                              ; x_arg := <concat-strings> ["arg", <int-to-string> c]
                        \})> e*
          |}
  
  schedule-generate-entities =
    <do-once(
      bagof-SchedulableFunctions
      ; make-set
      ; with(map(\ f -> <schedule-generate-entity> f \))
      ; with(map(\ f -> <schedule-generate-page> f \))
     | "schedule-generate-entities")> None()

rules // Entity

  schedule-generate-entity :
    (x, argtypes) -> 
    <emit-webdsl-code> webdsl|[
      entity x_ent {
        prop*
        completed     :: Bool
        running       :: Bool
        status        :: Int
        dateScheduled :: DateTime
      }
    ]|
    with {| ArgCounter
          : rules ( ArgCounter := 0 )
          ; x_newfunc := <new-function-name> (x, argtypes)
          ; x_ent := <concat-strings; capitalize-string> [x_newfunc, "ScheduleStatus"]
          ; prop* := <map(schedule-argument-to-property)> argtypes
          |}

  schedule-argument-to-property :
    srt -> webdsl|[ x_arg :: srt ]|
    where is-simple-sort
    with c := <ArgCounter; inc>
        ; rules ( ArgCounter := c )
        ; x_arg := <concat-strings> ["arg", <int-to-string> c]

  schedule-argument-to-property :
    srt -> webdsl|[ x_arg -> srt ]|
    where not(is-simple-sort)
    with c := <ArgCounter; inc>
        ; rules ( ArgCounter := c )
        ; x_arg := <concat-strings> ["arg", <int-to-string> c]

rules // Pages

  schedule-generate-page :
    (x, argtypes) -> 
    <emit-webdsl-section> webdsl|[
      section generated schedule code

        define page x_page() {
          init {
            x_process();
          }
          "Done."
        }

        function x_process() {
          for(s : srt where s.running == false && s.completed == false && s.dateScheduled <= now() order by s.dateScheduled asc) {
            s.running := true;
            s.save();
            x(e*);
            s.running := false;
            s.completed := true;
            s.save();
          }
        }
    ]|
    with {| ArgCounter
          : rules ( ArgCounter := 0 )
          ; x_call := <new-function-name> (x, argtypes)
          ; x_page := <concat-strings> ["process__", x_call]
          ; x_process := <concat-strings> ["process", <capitalize-string> x_call]
          ; srt := SimpleSort(<concat-strings; capitalize-string> [x_call, "ScheduleStatus"])
          ; info(|["Generating batch processing page for ", x, " calls at http://host/", x_page])
          ; e* := <map({x_arg, c, srt:
                        \ srt -> exp|[ s.x_arg ]|
                          where c := <ArgCounter; inc>
                              ; rules ( ArgCounter := c )
                              ; x_arg := <concat-strings> ["arg", <int-to-string> c]
                        \})> argtypes
          |}
