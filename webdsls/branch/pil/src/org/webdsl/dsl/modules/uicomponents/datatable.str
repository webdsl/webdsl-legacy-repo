module org/webdsl/dsl/modules/uicomponents/datatable

imports
  libstrategolib

imports
  libwebdsl-front
/*
rules // datatables

  elem-to-xhtml :
    t@TemplateCallDeclaredType("table", x, s, elems) ->
    %>
      <rich:dataTable id="<%= table-id %>" var="<%= x %>" value="#{<%= <ThisPage> %>.<%= x %>List}">

        <f:facet name="header">
      <rich:columnGroup>
            <%= headers ::*%>
          </rich:columnGroup>
        </f:facet>

        <%= columns ::*%>

      </rich:dataTable>
    <%
  where {| DataTable, SubColumnCount, Subtable
         : table-id := <newname> "datatable"
         ; rules ( DataTable := table-id )
         ; header-elems := <collect(?TemplateCall("header", _,_, _))> elems
         ; column-elems := <filter(not(?TemplateCall("header", _, _, _)))> elems
         ; columns := <mapconcat(column-to-xhtml)> column-elems
         ; headers := <mapconcat(elem-to-xhtml)> header-elems
         |}
*/
/*      ; hideColumn :=  <HideSubTableColumn <+ ![]>
      ; if HideSubTableColumn then
          att0 := @> varDetailToggler="detailToggler" <@
        else
          att0 := []
        end*/
/*
   elem-to-xhtml :
     TemplateCall("header", attrs,passign*, elems) -> elems'
     where DataTable
         ; info(|<SubColumnCount>)
         ; elems' := <mapconcat(header-to-xhtml)> elems
        
   header-to-xhtml :
     e ->
     %>
       <rich:column><%= headername::* %></rich:column>
     <%
     where headername := <elem-to-xhtml> e

   column-to-xhtml :
    elem -> column
    where el := <elem-to-xhtml> elem
        ; if (not(Subtable(x, _, _, _) := elem)) then
            column := %>
          <rich:column>
            <%= el ::*%>
          </rich:column>
          <%
          ; if SubTable then
                rules( SubColumnCount := <(SubColumnCount <+ !0); inc> )
              end
        else
          column := el
          end
*/

/*  column-to-xhtml :
    elem -> enclosed-columns
  where el := <elem-to-xhtml> elem
      ; columns := %>
        <rich:column>
          <%= el ::*%>
        </rich:column>
        <%
      ; enclosed-columns := <enclose-subtable-column> columns

/*  enclose-subtable-column :
     elem -> %> <f:facet name="detailStamp"> <%= elem::* %> </f:facet> <%
     where HideSubTableColumn

  enclose-subtable-column :
     elem -> elem
     where not(HideSubTableColumn) */
/*
  elem-to-xhtml :
    Subtable(x, s, e, elems) ->
    %>
        <rich:subTable id="<%= subtable-id %>" var="<%=x%>" value="<%=x_col%>" colspan="">
          <%= columns ::*%>
        </rich:subTable>
    <%
  where x_col := <arg-to-value-string> e
      ; subtable-id := <newname> "subtable"
      ; rules ( SubTable := subtable-id )
 //     ; FieldAccess(exp, ident) := field
 //     ; itemVarName := <concat-strings>[ <decapitalize-string> ident, "Item"]
 //     ; columnsWithVar := <map(add-var-to-template-call(|itemVarName))> columns
 //     ; <debug> elems
      ; exp := TemplateCall("spacer", [],[], [])
      ; elems2 := <MkCons> (exp, elems)
      ; columns := <mapconcat(column-to-xhtml)> elems2



  add-var-to-property(|var) :
    Var(var1) -> Var(var2)
    where var2 := <concat-strings> [var, ".", var1]

  add-var-to-property(|var) :
    FieldAccess(e1, x) -> FieldAccess(e2, x)
    where e2 := <add-var-to-property(|var)> e1

  add-var-to-template-call(|var) :
    TemplateCall(a, [exp], passign*, []) -> TemplateCall(a, [exp2] ,passign* ,[])
    where exp2 := <add-var-to-property(|var)> exp
*/    