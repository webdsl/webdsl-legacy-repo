module org/webdsl/dsl/typechecker/rename

/**
 * Renaming
 * --
 * At the start of the rewriting process, all variables are renamed by annotating them, to make them unique.
 * Declaring is part of the renaming process
 */

imports
  libstrategolib

imports
  libwebdsl-front

rules 

  rename-all = alltd(rename)

  rename-closed = // FIXME: Scope InDef?!
    {| Rename, InDef 
     : rules ( InDef := True() )
     ; rename-all 
     |}

  rename = Rename

  /**
   * rename-bound does the actual renaming. The other rules guide the application of rename-bound
   * 
   * NOTE: Qualified and Assignment are anomalies: because of the non-expression nature of left-hand sides of assignments 
   *   (which Qualified is used for), variables like a are parsed as "a", instead of Var("a"). Therefore, 
   *   the renaming step must take this into account, so that the leftmost item in a Qualified is rewritten
   *   as Vars are.
   */
  rename-bound(|srt) :
    x -> y
    with  y := x{<newname> x}
        ; rename-bound-rules(|x,y,srt) 

  rename-bound-rules(|x,y,srt) =
    rules ( 
      Rename : Var(x) -> Var(y)
      RenameType : GenericSort("EntityTypeNamed",[x]) -> GenericSort("EntityTypeNamed",[y])
      RenameType : SimpleSort(x) -> GenericSort("EntityTypeNamed",[y])
      Rename : Qualified(x, z) -> Qualified(y, z)
      Rename : Stat(Assignment(x, e)) -> Stat(Assignment(y, <rename-all> e))
      TypeOf : y -> srt
    )
    
  rename-type = ?s; (RenameType <+ !s)

  rename :
    VarDecl(x, srt) -> VarDecl(y, srt2)
    with  srt2 := <rename-all> srt 
        ; y := <rename-bound(|srt2)> x

  rename :
    v@VarDeclInit(x, srt, e) -> VarDeclInit(y, srt2, e')
    where InDef
    with  srt2 := <rename-all> srt
        ; e' := <rename-all> e
        ; y := <rename-bound(|srt2)> x
        
  rename :
    v@VarDeclInitInferred(x, e) -> VarDeclInitInferred(y, e')
    where InDef
    with  e' := <rename-all> e
        ; srt := <type-of> e'
        ; y := <rename-bound(|srt)> x

  rename :
    v@VarDeclInit(x, srt, e) -> VarDeclInit(x, srt, e')
    where not(InDef)//needed for inital rename
        ; not(IsGlobal)//needed for rename from model-to-model innermost without context
    with e' := <rename-all> e
       ; rules ( TypeOf : x -> srt )
       ; rules ( IsGlobal : x )
       
  rename :
    v@VarDeclInitInferred(x, e) -> VarDeclInitInferred(x, e')
    where not(InDef)//needed for inital rename
        ; not(IsGlobal)//needed for rename from model-to-model innermost without context
    with e' := <rename-all> e
       ; srt := <type-of> e'
       ; rules ( TypeOf : x -> srt )
       ; rules ( IsGlobal : x )
  
   rename :
     s@SimpleSort(_) -> s2
     with  s3 := <rename-type> s
         ; s2 := <rename-sort-for-generic> s3
         
   rename :
     GenericSort(g, types) -> GenericSort(g, types2)
     where not( g := "SDFInput")
     with  types2 := <rename-all> types

 rename :
    Block(stat1*) -> Block(stat2*)
    with {| Rename
          : stat2* := <rename-all> stat1*
          |}

  rename :
    def |[ define page x(farg1*) { elem1* } ]| -> <declare-page-definition> def |[ define page x(farg2*) { elem2* } ]|
    with {| Rename, InDef, InPage, RenameActionCall
          : rules ( InDef := True() )
          ; rules ( InPage := x )
          ; farg2* := <map(rename)> farg1*
          ; elem2* := <alltd(rename-action); rename-all> elem1*
          ; <try(alltd(rename))> elem1*
          ; rules ( TypeOf : x -> "Component" )
          |}

  rename :
    def |[ define mod* x(farg1*) { elem1* } ]| -> <declare-toplevel-template-definition> def |[ define mod* y(farg2*) { elem2* } ]|
    where not(InPage)
        ; not(<elem> (Page(), mod*))
        ; not(<elem> (Email(), mod*))
    with {| Rename, InDef, InTemplate, RenameActionCall
          : rules ( InDef := True() )
          ; rules ( InTemplate := x )
          ; y := x{<newname> x}
          ; genargs := <get-generictype-args> farg1*
          ; farg3* := <map(rebind-generic-in-farg(|genargs))> farg1*
          ; farg2* := <map(rename; declare-template-arg)> farg3*
          ; elem2* := <alltd(rename-action); rename-all> elem1*
          |}
        
  rename :
    def |[ define mod* x(farg1*) { elem1* } ]| -> <declare-local-template-definition> def |[ define mod* y(farg2*) { elem2* } ]|
    where (InPage <+ InTemplate)
        ; not(<elem> (Page(), mod*))
        ; not(<elem> (Email(), mod*))
    with {| Rename, InDef, InTemplate, RenameActionCall
         : rules ( InDef := True() )
         ; rules ( InTemplate := x )
         ; y := x{<newname> x}
         ; farg2* := <map(rename)> farg1*
         ; elem2* := <alltd(rename-action); rename-all> elem1*
         |}

  rename :
    Function(x, args1, srt, b1) -> <declare-global-func <+ debug> Function(x, args2, srt, b2)
    where not(InEntity)
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}

  rename :
    FunctionNoReturn(x, args1, b1) -> <declare-global-func <+ debug> FunctionNoReturn(x, args2, b2)
    where not(InEntity)
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}

  rename :
    Function(x, args1, srt, b1) -> Function(x, args2, srt, b2)
    where InEntity
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}

  rename :
    FunctionNoReturn(x, args1, b1) -> FunctionNoReturn(x, args2, b2)
    where InEntity
    with {| Rename, InDef
          : rules ( InDef := True() )
          ; args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}

  rename :
    Entity(x_class, s, props1, functions1) -> <declare-entity> Entity(x_class, s, props2, functions2)
    with {| Rename, InEntity
          : rules ( InEntity := x_class )
          ; y := <rename-bound(|SimpleSort(x_class))> "this"
          ; props2 := <rename-all> props1
          ; functions2 := <rename-all> functions1
          |}

  rename :
    EntityNoSuper(x_class, props1, functions1) -> <declare-entity> EntityNoSuper(x_class, props2, functions2)
    with {| Rename, InEntity
          : rules ( InEntity := x_class )
          ; y := <rename-bound(|SimpleSort(x_class))> "this"
          ; props2 := <rename-all> props1
          ; functions2 := <rename-all> functions1
          |}

  rename :
    SessionEntity(nm, props1, functions1) -> <declare-entity> SessionEntity(nm, props2, functions2)
    with {| Rename, InEntity
          : rules ( InEntity := nm )
          ; x_class := <capitalize-string> nm
          ; y := <rename-bound(|SimpleSort(x_class))> "this"
          ; props2 := <rename-all> props1
          ; functions2 := <rename-all> functions1
          |}
           
  rename :         
    ExtendSessionEntity(x_class, props1, funcs1) -> <declare-extend-entity> ExtendSessionEntity(x_class, props2, funcs2) 
    with {| Rename, InEntity
          : rules ( InEntity := x_class )
          // removed because extend session matches on original name: x_class := <capitalize-string> x_class1 
          ; y := <rename-bound(|SimpleSort(<capitalize-string> x_class))> "this"
          ; props2 := <rename-all> props1
          ; funcs2 := <rename-all> funcs1
          |}
          
  rename :
    t@ThisCall(_, _) -> t3
    with (t2@ThisCall(f, e2*){anno*} := <RenameActionCall> t //try to invoke renameActionCall first...
          <+ t2@ThisCall(f,e2*){anno*} := t)
       ; e3* := <rename-all> e2*       
       ;  (   //try to find a parent, and put it in the annotations
           ( ( parent := SimpleSort(<InEntity>)
               <+ parent:= <InPage> 
               <+ parent:= <InTemplate> )
             ; t3 := ThisCall(f, e3*){ThisCallParent(parent),anno*} // might add multiple annos, TODO check whether parent declared and/or changed.
           )
          <+ //no parent found
            t3 := ThisCall(f, e3*){anno*}
         )

  rename :
    ExtendEntity(x_class, props1, funcs1) ->  <declare-extend-entity> ExtendEntity(x_class, props2, funcs2) 
    with {| Rename, InEntity
          : rules ( InEntity := x_class )
          ; y := <rename-bound(|SimpleSort(x_class))> "this"
          ; props2 := <rename-all> props1
          ; funcs2 := <rename-all> funcs1
          |}

  rename-action = ?Define(_, _, _, _) // End of scope

  rename-action :
    Action(nm1, args1, b1) -> Action(nm2, args2, b2)
    with
       {| Rename
          : args2 := <map(rename)> args1
          ; b2 := <rename-all> b1
          |}
       ; nm2 := nm1{<newname> nm1}
       ; rules ( RenameActionCall :
                  ThisCall(nm1, a1*){anno*} -> ThisCall(nm2, a2*){anno*}
                  with  a2* := <rename-all> a1* )
       ; <declare-action> Action(nm2, args2, b1)

//  rename = RenameActionCall

  rename :
    For(x, srt, e1, f1, elems1) -> For(y, srt2, e2, f2, elems2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; e2 := <rename-all> e1
          ; f2 := <rename-all> f1
          ; elems2 := <rename-all> elems1
          |}

  rename :
    ForNoFilter(x, srt, e1, elems1) -> ForNoFilter(y, srt2, e2, elems2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; e2 := <rename-all> e1
          ; elems2 := <rename-all> elems1
          |}

  rename :
    ForSep(x, srt, e1, f1, elems1, elems2) -> ForSep(y, srt2, e2, f2, elems3, elems4)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; e2 := <rename-all> e1
          ; f2 := <rename-all> f1
          ; elems3 := <rename-all> elems1
          |}
          ; elems4 := <rename-all> elems2 // separator cannot refer to loop index

  rename :
    ForSepNoFilter(x, srt, e1, elems1, elems2) -> ForSepNoFilter(y, srt2, e2, elems3, elems4)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; e2 := <rename-all> e1
          ; elems3 := <rename-all> elems1
          |}
          ; elems4 := <rename-all> elems2 // separator cannot refer to loop index

  rename :
    ForAll(x, srt, f1, elems1) -> ForAll(y, srt2, f2, elems2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; f2 := <rename-all> f1
          ; elems2 := <rename-all> elems1
          |}


  rename :
    ForAllNoFilter(x, srt, elems1) -> ForAllNoFilter(y, srt2, elems2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; elems2 := <rename-all> elems1
          |}


  rename :
    ForStmt(x, srt, e1, f1, b1) -> ForStmt(y, srt2, e2, f2, b2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; e2 := <rename-all> e1
          ; f2 := <rename-all> f1
          ; b2 := <rename-all> b1
          |}

  rename :
    ForStmtNoFilter(x, srt, e1, b1) -> ForStmtNoFilter(y, srt2, e2, b2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; e2 := <rename-all> e1
          ; b2 := <rename-all> b1
          |}

  rename :
    ForAllStmt(x, srt, f1, b1) -> ForAllStmt(y, srt2, f2, b2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; f2 := <rename-all> f1
          ; b2 := <rename-all> b1
          |}

  rename :
    ForAllStmtNoFilter(x, srt, b1) -> ForAllStmtNoFilter(y, srt2, b2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; b2 := <rename-all> b1
          |}

  rename :
    ForExp(oe1, x, srt, ie1, f1) -> ForExp(oe2, y, srt2, ie2, f2)
    with  {| Rename
           : srt2 := <rename-all> srt
           ; y := <rename-bound(|srt2)> x
           ; oe2 := <rename-all> oe1
           ; f2 := <rename-all> f1
           |}
          ; ie2 := <rename-all> ie1

  rename :
    ForExpNoFilter(oe1, x, srt, ie1) -> ForExpNoFilter(oe2, y, srt2, ie2)
    with {| Rename
          : srt2 := <rename-all> srt
          ; y := <rename-bound(|srt2)> x
          ; oe2 := <rename-all> oe1
          |}
         ; ie2 := <rename-all> ie1

  rename :
    ForCountStmt(x, e1, e2, b1) -> ForCountStmt(y, e3, e4, b2)
    with {| Rename
          : y := <rename-bound(|SimpleSort("Int"))> x
          ; e3 := <rename-all> e1
          ; e4 := <rename-all> e2
          ; b2 := <rename-all> b1
          |}

  rename :
    Select(x, s, lab1, e1) -> Select(y, s, lab2, e2) 
    with {| Rename
            : y := <rename-bound(|s)> x
            ; e2 := <rename-all> e1
            ; lab2 := <rename-all> lab1
          |} 

  rename :
    Arg(x, srt) -> Arg(y, srt2)
    with  srt2 := <rename-type> srt
        ; y := <rename-bound(|srt2)> x
  
  rename :
    InitAction(bl) -> InitAction(bl2)
    where not(InDef)
    with {|InDef :
          rules (InDef := True())
          ; bl2 := <rename-all> bl
        |}
  
  //template call id renaming
   
  rename :
    tc@TemplateCallPropsNoBody(x1, e1*,passign*) -> TemplateCallPropsNoBody(x1, e2*,passign2*)
    with  e2* := <rename-all> e1*
        ; passign2* := <rename-all> passign*
        ; <declare-template-html-id(|tc)> passign*

  rename :
    tc@TemplateCallProps(x1, passign*) -> TemplateCallProps(x1, passign2*)
    with passign2* := <rename-all> passign*
        ; <declare-template-html-id(|tc)> passign*

  rename :
    tc@TemplateCallPropsNoArgs(x1, passign*, elem1*) -> TemplateCallPropsNoArgs(x1,passign2*, elem2*)
    with  elem2* := <rename-all> elem1*
        ; passign2* := <rename-all> passign*
        ; <declare-template-html-id(|tc)> passign*
    
  rename :
    tc@TemplateCall(x1, e1*,passign*, elem1*) -> TemplateCall(x1, e2*,passign2*, elem2*)
    with  e2* := <rename-all> e1*
        ; elem2* := <rename-all> elem1*
        ; passign2* := <rename-all> passign*        
        ; <declare-template-html-id(|tc)> passign*


rules

  // rename hack to avoid checks on argument type

  rename :
    GenericSort("SDFInput", [SimpleSort(x{anno1*})]){anno2*} -> 
    GenericSort("SDFInput", [x{anno1*}]){anno2*}
//    where debug(!"using SDFInput")
