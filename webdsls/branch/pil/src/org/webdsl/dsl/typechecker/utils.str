module org/webdsl/dsl/typechecker/utils

imports
  libstrategolib

imports
  libwebdsl-front

rules // typechecking context

  tc-context =
    TcContext <+ !""

  add-tc-context = ?msg;
    if x := <TcContext> then
      <concat-strings>[x | msg]
    else
      <concat-strings>msg
    end

  in-tc-context(s|msg) =
    {| TcContext
     : rules( TcContext := <add-tc-context> msg )
     ; s
     |}
     
rules

  is-webdsl-type = is-entity-type <+ is-simple-sort <+ is-generic-sort

rules

  type-of :
    e{t*} -> t
    where t := <fetch-elem(?Type(<id>))> t*

rules // type compatibility

  /**
   * <type-compatible> (t1, t2) if a value of type t2 can be assigned
   * to a variable of type t1
   */

  type-compatible =
    ?(t, t)

  type-compatible =
    ?(t1, t2)
    ; where(<subtype-of> (t2, t1))
    
  subtype-of =
    eq

  subtype-of =
    ?(SimpleSort(t1), SimpleSort(t2))
    ; where( <extends>(t1, t2) )

  extends-check = Extends
  extends-check = extends-builtin

  extends =
    while-not(eq, (extends-check, id))

rules
                  
   unId : Id(x) -> x

   packagename-to-string :
     PackageName(parts) -> <map(unId); separate-by(|"."); concat-strings> parts
