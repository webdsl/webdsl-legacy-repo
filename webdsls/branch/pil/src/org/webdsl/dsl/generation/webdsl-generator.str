/*

  @todo input-wrap or xtc-input-wrap

  @todo use sglr library

  @todo derive filename from compilation unit


*/

module org/webdsl/dsl/generation/webdsl-generator

imports
  libstratego-lib
  libjava-front
  libstratego-sglr
  libstratego-tool-doc
  libstratego-xtc
imports
  org/webdsl/dsl/transformation/dsl-to-core
 
strategies
 

  set-appname = where(id
      ; path := <path-of-xtc-file>
      ; (appname, _) := <split-before> (path, ".app")
      ; rules ( AppName := appname )
      ; if PythonBackend then
          rules ( AppRoot := "" )
        else
          rules ( AppRoot := <concat-strings> ["/", appname] )
        end
    )

  output-generated-files =
    if-pretty-printing(
      topdown(try(output-generated-file))
      ; <exit>0
    , <WriteToTextFile>("yyy", <id>)
    )

  output-generated-file =
    java-file-to-file

  output-generated-file =
    xml-file-to-file

  output-webdsl =
    if-pretty-printing(
      output-webdsl-to-file,
      output(id)
    )
    ; <exit> 0

strategies // command-line options

  set-default-config =
    rules(
      OptionImport         := True()
      OptionDesugar        := True()
      OptionTypecheck      := True()
      OptionExpansion      := True()
      OptionGeneration     := True()
      OptionPrettyPrinting := True()
      Stage                := 0
    )

  webdslc-options =
    import-option
    <+ desugar-option
    <+ typecheck-option
    <+ expansion-option
    <+ python-backend-option
    <+ analysis-option
    <+ java-servlet-backend-option
    <+ disable-desugar-option
    <+ disable-typecheck-option
    <+ disable-template-expansion-option
    <+ disable-generation-option
    <+ disable-pretty-print-option
    <+ stage-option
    <+ typecheck-after-model-option
/*    <+ one-strategy-only-option*/

  // @todo check that verbosity and logging is supported by stratego-lib

  // @todo code for option definition is too boilerplate

strategies // desugaring

  import-option =
    Option("--import"
    , disable-desugaring
    , !HelpString("--import", "Only import")
    )
  
  python-backend-option =
    Option("--python"
    , set-python-backend
    , !HelpString("--python", "Use Python back-end.")
    )

  analysis-option =
    Option("--analysis"
    , rules ( EnableAnalysis := True() )
    , !HelpString("--analysis", "Perform various analyses.")
    )

  typecheck-after-model-option =
    Option("--typecheck-after"
    , set-typecheck-after
    , !HelpString("--typecheck-after", "??")
    )
    
  java-servlet-backend-option =
    Option("--servlet"
    , set-java-servlet-backend
    , !HelpString("--servlet", "Use Java Servlet back-end.")
    )

  disable-import-option =
    Option("--no-importing"
    , disable-importing
    , !HelpString("--no-importing", "Stop before importing")
    )
    
/*  one-strategy-only-option =
    Option("--one-strategy-only"
    , set-one-strategy-only
    , !HelpString("--one-strategy-only", "Do only one strategy - which one is specified in the code.")
    )*/
    
  set-typecheck-after = 
    rules(TypeCheckAfterTransformations := True())

  set-python-backend = 
    rules( PythonBackend := True() )
    
  set-java-servlet-backend = 
    rules(JavaServletBackend := True())

  disable-importing =
    rules(OptionImport := False())

  if-importing(s1, s2) =
    if OptionImport => True() then s1 else s2 end

  stop-before-importing =
    if-importing(id, output-webdsl)
    
  set-one-strategy-only =
    <set-config> ("OneStrategyOnly", True())
//    rules(OneStrategyOnly := True())
// True() := <get-config> "OneStrategyOnly"

strategies // desugaring

  desugar-option =
    Option("--desugar"
    , disable-typechecking
    , !HelpString("--desugar", "Only desugar")
    )

  disable-desugar-option =
    Option("--no-desugaring"
    , disable-desugaring
    , !HelpString("--no-desugaring", "Stop before desugaring")
    )

  disable-desugaring =
    rules( OptionDesugar := False() )

  if-desugaring(s1, s2) =
    if OptionDesugar => True() then s1 else s2 end

  stop-before-desugaring =
    if-desugaring(id, output-webdsl)

strategies // typechecking

  typecheck-option =
    Option("--typecheck"
    , disable-template-expansion
    , !HelpString("--typecheck", "Desugar and typecheck")
    )

  disable-typecheck-option =
    Option("--no-typechecking"
    , disable-typechecking
    , !HelpString("--no-typechecking", "Stop before typechecking")
    )

  disable-typechecking =
    rules( OptionTypecheck := False() )

  if-typechecking(s1, s2) =
    if OptionTypecheck => True() then s1 else s2 end

  stop-before-typechecking =
    if-typechecking(id, output-webdsl)

strategies // template expansion

  expansion-option =
    Option("--expand"
    , disable-generation
    , !HelpString("--expand", "Template expansion")
    )

  disable-template-expansion-option =
    Option("--no-expansion"
    , disable-template-expansion
    , !HelpString("--no-expansion", "Stop before template-expansion")
    )

  disable-template-expansion =
    rules( OptionExpansion := False() )

  if-template-expansion(s1, s2) =
    if OptionExpansion => True() then s1 else s2 end

  stop-before-template-expansion =
    if-template-expansion(id, output-webdsl)

strategies

  disable-generation-option =
    Option("--no-generation"
    , disable-generation
    , !HelpString("--no-generation", "Stop before code generation")
    )

  disable-generation =
    rules( OptionGeneration := False() )

  if-generating(s1, s2) =
    if OptionGeneration => True() then s1 else s2 end

  stop-before-generation =
    if-generating(id, output-webdsl)

  disable-pretty-print-option =
    Option("--no-pretty-printing" + "--no-pp"
    , disable-pretty-printing
    , !HelpString("--no-pretty-printing | --no-pp", "Do not pretty-print")
    )

  disable-pretty-printing =
    rules( OptionPrettyPrinting := False() )

  if-pretty-printing(s1, s2) =
    if OptionPrettyPrinting => True() then s1 else s2 end

strategies

  stage-option =
    ArgOption("--stop-after"
    , ?stage; rules( OptionStage := <string-to-int> stage )
    , !HelpString("--stop-after n", "Stop after stage n")
    )

  stop-after =
    if <geq>(<Stage>, <OptionStage>) then
      output-webdsl
    else
      rules( Stage := <Stage; inc> )
      ; info(|["stage ", <Stage>])
    end

   // @todo pass name to stop-after

strategies // tool documentation

  webdslc-usage =
    <tool-doc>
      [ Usage("webdslc [-i foo.app] [OPTIONS]")
      , Summary("Generates a web application from a WebDSL definition")
      , OptionUsage()
      , AutoReportBugs()
      ]

  webdslc-about =
    <tool-doc>
      [ AutoProgram()
      , Program("webdslc")
      , Author(Person("Eelco Visser", "visser@acm.org"))
      , GNU_LGPL("2007", "Eelco Visser <visser@acm.org>")
      , WebHome("http://www.webdsl.org")
      //, Config([
      //    DefaultXTCRepository()
      //  , CurrentXTCRepository()
      //  ])
      ]



