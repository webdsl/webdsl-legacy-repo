definition
module Python-Operators
exports
  sorts Exp
  context-free syntax
    Exp "*" Exp  -> Exp {left, cons("Times")}
    Exp "/" Exp  -> Exp {left, cons("Div")}
    Exp "%" Exp  -> Exp {left, cons("Mod")}
  
    Exp "+" Exp  -> Exp {left, cons("Plus")}
    Exp "-" Exp  -> Exp {left, cons("Minus")}

    Exp "==" Exp -> Exp {cons("Eq")}
    Exp "!=" Exp -> Exp {cons("NotEq")}
    Exp ">" Exp  -> Exp {cons("LargerThan")}
    Exp ">=" Exp -> Exp {cons("LargerThanOrEqual")}
    Exp "<" Exp  -> Exp {cons("SmallerThan")}
    Exp "<=" Exp -> Exp {cons("SmallerThanOrEqual")}
    Exp "in" Exp -> Exp {cons("In")}

  context-free priorities
    Exp "." Id  -> Exp 
  > {left:
      Exp "[" Exp "]" -> Exp}
  > {left:
      Exp "(" {Param ","}* ")" -> Exp}
  > "not" Exp -> Exp
  > {left:
      Exp "in" Exp -> Exp } 
  > {left:
      Exp "*" Exp -> Exp
      Exp "/" Exp -> Exp
      Exp "%" Exp -> Exp
    } 
  > {left:
      Exp "+" Exp -> Exp
      Exp "-" Exp -> Exp
    }
  > {left:
       Exp "==" Exp -> Exp
       Exp "!=" Exp -> Exp
       Exp ">" Exp -> Exp
       Exp ">=" Exp -> Exp
       Exp "<" Exp -> Exp
       Exp "<=" Exp -> Exp }
  > {left:
       Exp "and" Exp -> Exp }
  > {left:
       Exp "or" Exp -> Exp }

module Python-Lexical
exports
  sorts Id IntConst

  lexical syntax
    [\ \t\n]  -> LAYOUT
    "#" ~[\n\r]* [\n\r]   -> LAYOUT
    [a-zA-Z\_][a-zA-Z0-9\_]* -> Id
    "*"                      -> Id
    "-"? [0-9]+              -> Int

    %%"\"" ~[\"\n]* "\""       -> String
    %% "'" ~[\'\n]* "'"         -> String

    "\\" [01] [0-9] [0-9]      -> Char
    "\\" "2" [0-4] [0-9]       -> Char
    "\\" "2" "5" [0-5]         -> Char
    "\\" "x" [0-9A-F][0-9A-F]  -> Char
    "\\" "o" [0-3] [0-7] [0-7] -> Char
    "\\" [ntrvbfa\?\\\"\']     -> Char
    ~[\0-\31\'\\]              -> Char    
    [\t\n\13]                  -> Char

    [\'] Char* [\']            -> String
    

  lexical syntax
    "-"? FloatDigits
     ExponentPart? [fFdD]? -> Float
    [0-9]* "." [0-9]*      -> FloatDigits
    [0-9]+                 -> FloatDigits
    [eE] SignedInteger     -> ExponentPart
    [\+\-]? [0-9]+         -> SignedInteger

    "-"? [0-9]+            -> Float {reject}
    "."                    -> FloatDigits  {reject}
  
  context-free restrictions
    LAYOUT? -/- [\ \t\12\n\r]
    Id      -/- [a-zA-Z0-9]

module Python-Expression
imports
  Python-Lexical Python-Operators

exports
  context-free syntax
    Id                          -> Exp {cons("Var")}
    Int                         -> Exp {cons("Int")}
    Float                       -> Exp {cons("Float")}
    Exp "." Id                  -> Exp {cons("FieldAccess")}
    "(" Exp ")"                 -> Exp {bracket}
    "(" Exp "," {Exp ","}+ ")"  -> Exp {cons("TupleLiteral")}
    "(" Exp "," ")"             -> Exp {cons("TupleLiteralOne")}
    "[" {Exp ","}* "]"          -> Exp {cons("ListLiteral")}
    Exp "[" Exp "]"             -> Exp {cons("ListIndex")}
    Exp "and" Exp               -> Exp {cons("And"), assoc}
    Exp "or" Exp                -> Exp {cons("Or"), assoc}
    "not" Exp                   -> Exp {cons("Not")}
    Exp "(" {Param ","}* ")"    -> Exp {cons("Call")}
    String                      -> Exp {cons("String")}

module Python
imports
  Python-Expression

exports 
  sorts Application Statement
  context-free start-symbols Application

  context-free syntax
    Statement*                                -> Application {cons("Application")}
    Stat ";"                                  -> Statement {cons("Statement")}
    "from" Exp "import" Exp                   -> Stat {cons("FromImport")}
    "import" Exp                              -> Stat {cons("Import")}

    Decorator* "class" Id "(" {Exp ","}* ")" ":" Block   -> Stat {cons("ClassDef")}
    Decorator* "def" Id "(" {Exp ","}* ")" ":" Block     -> Stat {cons("FunctionDef")}

    "if" Exp ":" Block                        -> Stat {cons("IfNoElse")}
    "if" Exp ":" Block "else" ":" Block       -> Stat {cons("If")}
    "for" Exp "in" Exp ":" Block              -> Stat {cons("For")}
    Exp                                       -> Stat {cons("ExpStm")}
    Id "=" Exp                                -> Param {cons("NamedParam"), prefer}
    Exp "=" Exp                               -> Stat {cons("Assignment")}
    "return" Exp                              -> Stat {cons("Return")}
    Exp                                       -> Param {cons("Param")}
    "@" Exp                                   -> Decorator {cons("Decorator")}

  context-free syntax
    "{" Statement* "}" -> Block {cons("Block")}