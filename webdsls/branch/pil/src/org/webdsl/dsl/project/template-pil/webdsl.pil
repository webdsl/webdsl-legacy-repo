import "db.pil"
import "model.pil"
import "dialect.pil"
import "type.pil"
import "collection.pil"
import "query.pil"
import pil::reflect
import pil::db
import pil::db::model

external class NumberFormatException extends Exception {
  String getMessage();
}

class webdsl::util::File { }

external class webdsl::WebDSLEntity { }

external Bool webdsl::util::stringMatches(String str, String regex);

class webdsl::internal::ApplicationContext extends Entity {
  SimpleValue<String> name = new SimpleValue<String>(this, "name", typeof String, "");
  SimpleValue<String> key = new SimpleValue<String>(this, "key", typeof String, "");

  ClassMapping getMapping() {
    var fields = new List<FieldMapping>();
    fields.add(new ValueFieldMapping("name", pil::db::type::stringType, 80));
    fields.add(new ValueFieldMapping("key", pil::db::type::stringType, 36));
    return new ClassMapping(typeof webdsl::internal::ApplicationContext, "ApplicationContext", fields.as<Array<FieldMapping>>);
  }

}

class webdsl::util::StringWriter {
  MutableString str = new MutableString();

  new() {
  }

  void println(Object o) {
    str.append(o.as<String> + "\n");
  }

  void print(Object o) {
    str.append(o.as<String>);
  }

  as<String> {
    return str.as<String>;
  }
}

class webdsl::Request {
  webdsl::Session session = null;
  Map<String, String> requestParams = null;

  new(webdsl::Session session, Map<String, String> requestParams) {
    this.session = session;
    this.requestParams = requestParams;
  }

  String get(String key) {
    return requestParams[key];
  }
}

class webdsl::Response {
  webdsl::util::StringWriter writer = null;
  Map<String, String> headers = new Map<String, String>();

  new(webdsl::util::StringWriter writer) {
    this.writer = writer;
  }

  void redirect(String url) {
    headers["Location"] = url;
  }

  void setContentType(String ct) {
    headers["Content-type"] = ct;
  }
}

class webdsl::Session {
  Map<String, Object> variables = new Map<String, Object>();

  new(Map<String, Object> variables) {
    this.variables = variables;
  }

  void set(String key, Object value) {
    variables[key] = value;
  }

  Object get(String key) {
    return variables[key];
  }
}

external <T> void webdsl::utils::list::addAll(List<T> l, List<T> items);
external <T> void webdsl::utils::list::clear(List<T> l);

external String webdsl::encoders::encodeTemplateId(String template, Array<Object> args, Int templateCounter);
external String webdsl::encoders::encodeHTML(String text);
external String webdsl::encoders::encodeIdList(Object o);
external String webdsl::encoders::eliminateTags(String text);
external String webdsl::encoders::urlDecode(String text);
external String webdsl::encoders::encodeMarkdown(String text);


String webdsl::db::databaseName = "testdb";
String webdsl::db::databaseUsername = "root";
String webdsl::db::databasePassword = "";
String webdsl::db::databaseHost = "localhost";

pil::db::DatabaseSession webdsl::db::getSession() {
  var dialect = new pil::db::dialect::MySQLDialect();
  var db = new pil::db::Database(dialect, webdsl::db::databaseHost, webdsl::db::databaseUsername, webdsl::db::databasePassword, webdsl::db::databaseName);

  return new pil::db::DatabaseSession(db.getConnection(), dialect);
}
