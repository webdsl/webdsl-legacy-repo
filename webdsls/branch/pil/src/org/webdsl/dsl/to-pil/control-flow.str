module org/webdsl/dsl/to-pil/control-flow

imports
  libstratego-lib

imports
  libwebdsl-front
    
// control flow page elements   : for, if, templatecall 

rules // iteration

  for-loop-counter-wrap-code-pil:
    stat* ->
    pil-stat*|[
        ident = "";
        if(inForLoop) {
          ident = ident + forelementcounter;
        }
        stat*
    ]|
    
  wrap-in-for-loop-pil(|x,t,e) :
    bstm ->
    pil-stat*|[
      Array<Object> x_array = e.toArray(); // need to iterate set too without iterator, this copied array also makes sure a remove on the collection doesn't cause skipped elements
      for(Int x_i = 0; x_i < x_array.length; x_i++)
      { 
        t x = (t)x_array[x_i];
        stat*
      }
    ]|
    with  x_array := <newname> "array"
        ; x_i := <newname> "i"
        ; if <is-list> bstm
          then stat* := bstm
          else stat* := [bstm] end
  handle-actions-input-to-pil  =
    control-flow-for-pil(collect-om(handle-actions-input-to-pil)|)

  handle-actions-to-pil =
    control-flow-for-pil(collect-om(handle-actions-to-pil)|)

  elem-to-pil =
    control-flow-for-pil(elems-to-pil|)

  control-flow-for-pil(s|) :
    For(x, srt, e, Filter(we, obe, l), elems) ->
    pil-stat* |[
      inForLoop = true;
      forLoopCounter++;
      ~*<wrap-in-for-loop-pil(|x,t,e1)>
      pil-stat* |[  
        forelementcounter++;
        if(e2){ 
          stat*
        }
      ]|
      forLoopCounter--;
      if(forLoopCounter == 0) {
        inForLoop = false;
      }
    ]|
    with  stat* := <s;concat-with-sublists> elems
        ; e1 := <expression-to-pil> e
        ; e2 := <expression-to-pil> we
        ; t := <pil-type> srt
        ; x_list := <newname> "list"
        ; GenericSort(x_setorlist,[SimpleSort(_)]) := <type-of> e
    
  control-flow-for-pil(s|) :
    ForSep(x, srt, e, Filter(we, obe, l), elems1, elems2) ->
    pil-stat* |[
      inForLoop = true;
      forLoopCounter++;
      Int separatorindex=0;
      ~*<wrap-in-for-loop-pil(|x,t,e1)>
      pil-stat* |[  
        forelementcounter++;
        if(e2){ 
          if(separatorindex > 0) {
            stat2* // place separator if there was an element before this one
          }
          stat1*
          separatorindex++;
        }
      ]|
      forLoopCounter--;
      if(forLoopCounter == 0) {
        inForLoop = false;
      }
    ]|
    with  stat1* := <s;concat-with-sublists> elems1
        ; stat2* := <s;concat-with-sublists> elems2
        ; e1 := <expression-to-pil> e
        ; e2 := <expression-to-pil> we
        ; t     := <pil-type> srt
        ; GenericSort(x_setorlist,[SimpleSort(_)]) := <type-of> e

  control-flow-for-pil(s|) :
    fa@ForAll(x, srt, fltr@Filter(we, obe, l), elems) ->
    pil-stat* |[
      inForLoop = true;
      forLoopCounter++;
      
      List<t> x_list = null;
      if(queryCache.contains(e_queryid)) {
        x_list = queryCache[e_queryid];
      } else {
        x_list = dbSession.getAll(reflect::typeOf#x_ent());
        queryCache[e_queryid] = x_list;
      }
      ~*<wrap-in-for-loop-pil(|x,t,pil-exp|[ x_list ]|)>
      pil-stat* |[  
        forelementcounter++;
        if(e2){ 
          stat*
        }
      ]|
      forLoopCounter--;
      if(forLoopCounter == 0) {
        inForLoop = false;
      }
    ]|
    with  stat*   := <s;concat-with-sublists> elems
        ; t       := <pil-type> srt
        ; SimpleSort(x_ent) := srt
        ; x_list := <newname> "list"
        ; e2 := <expression-to-pil> we
        ; if <HibernateQueryIdPil> fa then
            queryid := <HibernateQueryIdPil> fa
          else
            queryid := <newname> "query"
            ; rules ( HibernateQueryIdPil : fa -> queryid )
          end
        ; e_queryid := pil-exp|[ "~queryid" ]|
        //; e_criteria := <hibernate-forall-criteria> (fa, t, fltr)
        //; info(|["Criteria: ", <topdown(try(strip-annos)); PropertiesToJoin <+ ![]> fa])
//        ; info(|["For ", <pp-webdsl> fa, " join: ", ])
        // setFetchMode("_author", org.hibernate.FetchMode.JOIN)

rules // if

  handle-actions-input-to-pil  =
    control-flow-if-pil(collect-om(handle-actions-input-to-pil))

  handle-actions-to-pil =
    control-flow-if-pil(collect-om(handle-actions-to-pil))

  elem-to-pil =
    control-flow-if-pil(elems-to-pil)

  control-flow-if-pil(s|) :
    IfTempl(e, elems, elems2) ->
    pil-stat|[
    if(e1){ 
      stat1*
    } else {
      stat2*
    }
    ]|
    with  stat1* := <s;concat-with-sublists> elems
        ; stat2* := <s;concat-with-sublists> elems2
        ; e1 := <expression-to-pil> e

rules //templatecall    

  handle-actions-input-to-pil  =
    control-flow-tcall-pil(|"storeInputs")

  handle-actions-to-pil =
    control-flow-tcall-pil(|"handleActions")

  elem-to-pil =
    control-flow-tcall-pil(|"render")

  control-flow-tcall-pil(|x_methodname) :
    tc@TemplateCall(x_name, args,passign*, _) ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat* |[
    ident = ident + "~x_tname";
    if(templatecalls[ident] == null) {
      try{
        templatecalls[ident] = ((webdsl::TemplateServlet)templates["~x_name"]).newInstance();
      }
      catch(Exception iae)
      {
        log("Problem in template servlet template lookup: "+iae);
      }
    }
    Array<Object> x_args = new Array<Object>(e*);
    templatecounter++;
    templatecounter = (templatecalls[ident]).x_methodname(ps, x_args, templatecounter, ((Map<String,pil::reflect::Class>)templates).clone(),((Map<String,Object>)variables).clone(),((Map<String,Object>)actionclasses).clone(), e1*);
    ]|
    where t* := <map(type-of)> args 
        ; <TemplateSignature <+ LocalTemplateSignature <+ !<strip-annos>x_name;TemplateWithGenerics> (x_name,t*)
    with  x_tname := <get-templatecallnumber-pil> tc
        ; e* := <map({\e -> <expression-to-pil> e\})> args
        ; x_args := <newname> "args"
        ; (    !x_methodname; (?"render"<+?"handleActions"); e1* := [ pil-exp|[ out ]| ]
            //<+ x_methodname := "handleActions";e1* := [ e|[ actionclasses ]| ]
            <+ e1* := []
          )
