module org/webdsl/dsl/to-pil/global-variables

imports
  libstratego-lib

imports
  libwebdsl-front

rules

  GenerateCodePil = generate-pil-global-vars; fail

  generate-pil-global-vars :
    Application(qid, sections) ->
    <map(pil-emit)> pil-decl*|[
        decl*
      
        void application::initGlobals(DatabaseSession dbSession) {
          var allGlobals = dbSession.all(typeof webdsl::internal::ApplicationContext);
          for(webdsl::internal::ApplicationContext ctx : allGlobals) {
            stat*
          }
          stat2*
        }
    ]|
    where not([] := <AllGlobalVars>) // fails if there are no global vars, wont generate anything then
    with decl* := <map({\ 
                           elem |[ var x : srt := e ]| -> 
                           pil-decl*|[ 
                             String globals::x#__id = null;
                             t globals::x = null;
                              
                             t globals::get#x(DatabaseSession dbSession) {
                               if(globals::x == null) {
                                 globals::x = dbSession.get(typeof t, globals::x#__id).as<t>;
                               }
                               return globals::x;
                             }
                           ]| 
                           with  t := <pil-type> srt
                       \});concat> 
                       <AllGlobalVars<+ ![]>
        ; stat* := <map({\ 
                           elem |[ var x : srt := e ]| -> 
                           pil-stat*|[ 
                             if(ctx.name.get(dbSession) == e_x) {
                               globals::x#__id = ctx.key.get(dbSession);
                             }
                           ]| 
                           with e_x := <pil-wrap-string> x
                       \});concat> 
                       <AllGlobalVars<+ ![]>
        ; stat2* := <map({\ 
                           elem |[ var x : srt := e ]| -> 
                           pil-stat*|[ 
                             if(globals::x#__id == null) {
                               globals::x = e2;
                               var ctx = new webdsl::internal::ApplicationContext();
                               ctx.name.set(e_x, dbSession);
                               ctx.key.set(globals::x.id, dbSession);
                               dbSession.add(ctx);
                               dbSession.add(globals::x);
                               globals::x#__id = globals::x.id;
                             }
                           ]| 
                           with e_x := <pil-wrap-string> x
                              ; e2 := <expression-to-pil> e
                       \});concat> 
                       <AllGlobalVars<+ ![]>
 

  /*
  vardeclinit-to-persist-statement-pil:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),exps) -> resultwrapped
    with  if <EntityIdName> x_class
          then x_idname := <EntityIdName> x_class
               ; idassign := <collect({e:?ObjectPropertyAssignment(idname, e);!webdsl |[ x_ident.x_idname := e; ]| });Hd> exps
               ; result := [ <statement-to-pil> idassign | bstm*|[ 
                                                                           hibSession.save(x_ident);
                                                                           variables.put("~x_ident",x_ident); //necessary for set/list creations in globals which use globals
                                                                        ]| ]
          else result := bstm* |[ hibSession.save(x_ident);
                                  variables.put("~x_ident",x_ident); //necessary for set/list creations in globals which use globals
                               ]| 
          end
        ; resultwrapped := 
          bstm |[
            if(!applicationContextPropertyExists("~x_ident",res)){
              ~*result
            }
          ]|                 

  vardeclinit-to-id-load:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[	
      if(a.getName().equals("~x_ident"))
      {
        x_ident#id = a.getDatabaseId();
      }  
    ]|

  vardeclinit-to-method-call-pil:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[	
      if(!applicationContextPropertyExists("~x_ident",res))  
        globalDeclaration#x_ident(); 
    ]|

  vardeclinit-to-method-persist-call-pil:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[ 
      if(!applicationContextPropertyExists("~x_ident",res))
        globalDeclaration#x_ident#Persist(); 
    ]|

  vardeclinit-to-method-pil:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class), ObjectCreation(SimpleSort(x_classcreated),assigns)) ->
      class-body-dec* |[
        private static t x_ident = new x_t();

        private static void globalDeclaration#x_ident() {
          try {
            ~*bstmvardeclinit*
            //call constructor for entity-events:
            x_ident.x_classcreated#_(hibSession, variables, ps, out);
          }
          catch(Exception iea) {
            throw new RuntimeException("Catched in globalDeclaration: ",iea);
          }
        }

        private static void globalDeclaration#x_ident#Persist() {
          //entityManager.persist(x_ident); now done beforehand
          ApplicationContextProperty x_acpident = new ApplicationContextProperty();
          x_acpident.setName("~x_ident");
          x_acpident.setDatabaseId(String.valueOf(x_ident.getId()));
          hibSession.save(x_acpident);
          GlobalVariables.x_ident#id = x_acpident.getDatabaseId();
        }
  ]|
  with  x_acpident := <newname> "id"
      ; t := <defined-pil-type> SimpleSort(x_classcreated)
      ; x_t := <pil-type-name> SimpleSort(x_classcreated)
      ; digests := <filter(secret-assigns-to-digest-pil(|x_ident,x_classcreated))> assigns
      ; bstmvardeclinit* := <conc>
                         (<map(\ ObjectPropertyAssignment(x_prop, e) -> webdsl |[ x_ident.x_prop := e; ]| \)//Assign(Assignment(Qualified(x_ident, f), e)) \)
                           ; statements-to-pil> assigns
                         , digests)

  secret-assigns-to-digest-pil(|x_ident,class):
    ObjectPropertyAssignment(x_prop,String(anystring)) ->
     bstm|[
       {
         org.jasypt.util.password.StrongPasswordEncryptor x_var2 =
           new org.jasypt.util.password.StrongPasswordEncryptor();
         x_ident.x_set(x_var2.encryptPassword(x_anystring));
       }
     ]|
     where SimpleSort("String") := <type-of> String(anystring) 
         ; SimpleSort("Secret") := <type-of-property> (class,x_prop)
     with  x_var2 := <newname> "_passwordEncryptor"
         ; x_set := <property-setter> x_prop
         ; x_anystring := <concat-strings> ["\"",anystring,"\""]


     
     
     
     

  GenerateCodeJavaServlet = generate-pil-global-vars-page-part; fail
  
  generate-pil-global-vars-page-part :
    def |[ define mod* x(farg*) { elem* } ]| -> result
    where x := <JavaThisPage>
    with result := <map(generate-pil-global-vars-page-part-helper)> <AllGlobalVars> 
    
  generate-pil-global-vars-page-part-helper :   
    elem |[ var x : srt := e ]| -> 
    <generate-pil-partial>
    class-body-dec|[
       @Partial
       private void initialize()
       {
           t x = null;
           x = GlobalVariables.get#x(hibSession);
           variables.put("~x",x);
       }
     ]| 
     with  t := <pil-type> srt
         ; x_class := <pil-type-name> srt
                      


  GenerateCodeJavaServlet = generate-pil-global-template-page-part; fail
  
  generate-pil-global-template-page-part :
    def |[ define mod* x(farg*) { elem* } ]| ->
    <generate-pil-template-partial> 
    class-body-dec* |[
      ~*cbds
    ]|
    with  cbds := <load-from-variablesmap-global-variables-cbds>
    
  load-from-variablesmap-global-variables-cbds =
    <map({\ 
       elem |[ var x : srt := e ]| -> 
       class-body-dec*|[ 
         private t x = null;
         @Partial
         private void initialize()
         {
             x = (x_class) variables.get("~x");
         }
       ]| 
       with  t := <pil-type> srt
           ; x_class := <pil-type-name> srt
   \});concat-with-sublists> 
   <AllGlobalVars>
   
   */
