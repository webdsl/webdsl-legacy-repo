module org/webdsl-dsl/to-pil/stratego-interface/sdf-interface

imports
  libstrategolib
  libwebdsl-front

/*
strategies
  
  call-to-pil :
    exp  |[ e.parse() ]| ->
    java |[
      org.webdsl.tools.strategoxt.SDF
        .get("~language", utils.AppInfo.class)
        .parse(e2)
    ]|
    where language := <language-of> e
    with e2    := <expression-to-pil> e
       ; x_sdf := <new>
  
  call-to-pil :
    exp  |[ e.isValid() ]| ->
    java |[
      org.webdsl.tools.strategoxt.SDF
        .get("~language", utils.AppInfo.class)
        .isValid(e2)
    ]|
    where language := <language-of> e
    with e2    := <expression-to-pil> e
       ; x_sdf := <new>
  
strategies
    
  pil-element-id : 
    tc@elem|[ inputSDF(e)[passign*]{} ]| -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"
    
  elem-to-pil : 
    tc@elem |[ inputSDF(e)[passign*]{} ]| -> <elem-to-pil>    TemplateCall("inputText",[e],passign*,[]){anno*}//elem |[ inputText(e)[passign*]{} ]|{anno*} 
    with  _{anno*} := tc
    
  //customized from string
  handle-actions-input-to-pil :
    tc@elem|[ inputSDF(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code> 
    bstm*|[
      ident += "~inputident"+uniqueid;
      if (ps.getParammap().get(ident)!=null) {
        String x_temp = ps.getParammap().get(ident);
        if(!org.webdsl.tools.strategoxt.SDF
              .get("~language", utils.AppInfo.class)
              .isValid(x_temp)) {
          ps.getConversionErrorMessages().put("~name",org.webdsl.tools.strategoxt.SDF.getSGLRErrors().get(x_temp));
          x_temp = null;
        }
        bstm 
      }
    ]|
    with  inputident := <get-inputnumber-pil> tc
        ; x_temp := <newname> "temp"
        ; name := <pp-webdsl> e
        ; bstm := <input-assignment-to-pil(|x_temp)> e
        ; language := <language-of> e

strategies // Basic type definitions
  
  builtin-pil-type :
    GenericSort("SDFInput", [_]) -> type |[ String ]|
    */
