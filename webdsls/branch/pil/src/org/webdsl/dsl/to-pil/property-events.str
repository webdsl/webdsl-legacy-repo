module org/webdsl/dsl/to-pil/property-events

imports
  libstratego-lib
imports
  libwebdsl-front

rules

  entity-cbds-property-events-pil(|x_Class) = !
    pil-cbd*|[
      Bool propertyEventsEnabled = false;
      pil::db::DatabaseSession dbSession = null;
      
      Map<String, Object> variables = null;
      
      utils::PageServlet ps = null;
      
      webdsl::util::StringWriter out = null;
      
      data::x_Class setupForPropertyEvents(pil::db::DatabaseSession dbSession, webdsl::util::StringWriter out, utils::PageServlet ps) {
        if(!propertyEventsEnabled) {
          this.dbSession = dbSession;
          this.out = out;
          this.ps = ps;
          this.variables = ps.variablesGlobalAndSession;
          propertyEventsEnabled = true;
        }
        return this;
      }
    ]|         
   
  entity-cbds-property-events-subclass-pil(|x_Class) = !
    pil-cbd*|[
      data::x_Class setupForPropertyEvents(pil::db::DatabaseSession dbSession, webdsl::util::StringWriter out, utils::PageServlet ps) {
        if(!propertyEventsEnabled) {
          this.dbSession = dbSession;
          this.out = out;
          this.ps = ps;
          this.variables = ps.variablesGlobalAndSession;
          propertyEventsEnabled = true;
        }
        return this;
      }
    ]|         
   
  entity-bstm-property-events-pil :
    (x_Class,propname,propsrt,methodnamestart,x_var) -> bstm_extension
    with  oldnameset := <concat-strings> [methodnamestart,<capitalize-string> propname]
        ; if <elem> ((<find-entity-root>x_Class,oldnameset),<RenamedEntityFunctions>) // check whether it was renamed due to overloading
          then mx_setfunname := <new-function-name> (oldnameset,[propsrt])
          else mx_setfunname := oldnameset end 
        ; if <HasPropertyEvent> (x_Class,propname,methodnamestart)
          then bstm_extension := [pil-stat|[ if(propertyEventsEnabled){this.mx_setfunname(dbSession, variables, x_var, ps, out);} ]|]
          else bstm_extension := []
          end 
