 module org/webdsl/dsl/to-pil/entity

 imports
   libstrategolib

 imports
   libwebdsl-front
     
strategies


   GenerateCodePil = entity-to-pil-entity; fail

   GenerateCodePil = entity-to-pil-entity-functions; fail
   
   entity-to-pil-entity-functions :
     EntityNoSuper(x_Class, props, funcs) ->
     <pil-emit> pil-decl|[
       @extend
       class data::x_Class
       {
         ~*cbds*
       }
     ]|
     with 
         //{| JavaInEntity: rules(InEntity := x_Class);
           cbds* := <grab-uniquely-named-functions-pil;map(webdsl-function-to-entity-pil-function <+ debug(!"Could not generate for entity function: "))> funcs
           //|}
      
   entity-to-pil-entity-functions :
    SessionEntity(x_ident, props, funcs) ->
    <pil-emit> pil-decl|[
       @extend
       class data::x_Class {
         ~*cbds*
       }
     ]|
     with  x_Class := <capitalize-string> x_ident
         ; //{| JavaInEntity: rules(InEntity := x_Class);
           cbds* := <grab-uniquely-named-functions-pil;map(webdsl-function-to-entity-pil-function <+ debug(!"Could not generate for entity function: "))> funcs
           //|}
         
        
   entity-to-pil-entity-functions :
     Entity(x_Class, x_super, props, funcs) ->
     <pil-emit> pil-decl|[
       @extend
       class data::x_Class {
         ~*cbds*
       }
     ]|
     with  //{| JavaInEntity: rules(InEntity := x_Class);
           cbds* := <grab-uniquely-named-functions-pil;map(webdsl-function-to-entity-pil-function <+ debug(!"Could not generate for entity function: "))> funcs
           //|}

  grab-uniquely-named-functions-pil : // TODO shouldn't be necessary...
    funcs -> funcs2
    with  {| FuncNameUsedPil, ResultingFunctionsPil:
            filter(grab-uniquely-named-functions-helper-pil)
          ; funcs2 := <bagof-ResultingFunctionsPil>
          |}
     
  grab-uniquely-named-functions-helper-pil :
    fu@Function(name,_,_,_) -> fu
    where not(<FuncNameUsedPil> name)
        ; rules ( FuncNameUsedPil : name
                  ResultingFunctionsPil :+= fu )
    
   
  // entity function
  webdsl-function-to-entity-pil-function:
    function@Function(mx, args, s, Block(stm*)) -> 
    pil-cbd|[
      t mx(pil::db::DatabaseSession dbSession, Map<String, Object> variables, farg*, utils::PageServlet ps, webdsl::util::StringWriter out)  {
        try {
          stat1*
          stat2*
          stat*
          //stat3*
        } catch(Exception excep) {
          throw new Exception(excep);
        }
      }
    ]|
    with  {| InFunctionPil
            : rules( InFunctionPil := <id> )
            ; t      := <pil-type> s
            ; farg* := <map(arguments-to-pil)> args
            ; stat*  := <statements-to-pil> stm*
            ; stat1* := <get-global-vars-into-pil-function>
            ; stat2* := <get-session-vars-into-pil-function>
            |}
