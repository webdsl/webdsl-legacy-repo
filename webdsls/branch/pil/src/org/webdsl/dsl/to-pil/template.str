module org/webdsl/dsl/to-pil/template

imports 
  libstrategolib 
  libwebdsl-front

rules

  generate-pil-template-partial =
    ? cbds
    //; where(not(ThisEmailPil)) also used for common parts in email
    ; with(
      x_Page  := <ThisTemplateClassNamePil>
      ; if <is-list> cbds then cbd* := cbds else cbd* := [cbds] end
      ; <pil-emit>
          pil-decl|[
            @extend
            class template::x_Page{
              cbd*
            }
          ]|
      )


rules
    
  GenerateCodePil = where(not(ThisEmailPil));generate-pil-template; fail

  generate-pil-template :
    def |[ define mod* x(farg*) { elem* } ]| ->
    <pil-emit> pil-decl|[
        class template::x_Page extends webdsl::TemplateServlet
        {
          @private Map<String, List<Object>> queryCache = new Map<String, List<Object>>();
        
          void storeArguments(Array<Object> args) {
            stat1*
          } 
    
          Int storeInputs(webdsl::util::PageServlet ps,Array<Object> args,Int templatecounter,Map<String, pil::reflect::Class> templates,Map<String, Object> variables,Map<String, Object> actionclasses) {
            stat2*
            storeInputsInternal();

            return this.templatecounter;
          }         

          void storeInputsInternal() {
          }
          
          void initialize() {}
          
          void initActions() {}

          void initializePassOn() {}

          void initializeLocalVars() {}
                
          Int handleActions(webdsl::util::PageServlet ps,Array<Object> args,Int templatecounter,Map<String, pil::reflect::Class> templates,Map<String, Object> variables,Map<String, Object> actionclasses, webdsl::util::StringWriter out) {          
            stat2*
            this.out = out;         
            handleActionsInternal();

            return this.templatecounter;
          }    

          void handleActionsInternal() {
          }
          
          void callTemplates() {
          }

          Bool validated = true;
      
          webdsl::util::PageServlet ps = null;

          Int templatecounter = 0;
          
          String uniqueid = "";

          Map<String, Object> variables = null;
          Map<String, Object> actionclasses = null;
          
          Map<String, pil::reflect::Class> templates = null;
          Map<String, webdsl::TemplateServlet> templatecalls = new Map<String,webdsl::TemplateServlet>();
          
          webdsl::util::StringWriter out = null;
          webdsl::db::DatabaseSession dbConn = null;
          webdsl::Request request = null;
          webdsl::Response response = null;
          Bool initialized = false;
          
          webdsl::Session session = null;
         
          
          void renderInternal()
          { }

          Int render(webdsl::util::PageServlet ps, Array<Object> args, Int templatecounter, Map<String, pil::reflect::Class> templates,Map<String, Object> variables,Map<String, Object> actionclasses, webdsl::util::StringWriter out) { 
            stat2*
         
            this.out = out;
            
            out.print("<span id=\"this\" class=\"scopediv\">");
            renderInternal();
            out.print("</span>");
            
            return this.templatecounter;
          }
        }
          
      ]|
    with x_Page  := <ThisTemplateClassNamePil>
       ; e_pnamequoted := StringLit(String([Chars(<double-quote> x_Page)]))
       ; stat* := <local-defined-templates-to-hashmap-pil> elem*
       ; stat1* := <formal-arguments-to-store-statements-pil> farg*
       ; stat2* := pil-stat*|[
            if(!initialized)
            {
            
              initialized=true;
              
              this.templates=templates;
              this.actionclasses=actionclasses;
              stat*
              this.ps=ps;
              this.uniqueid=webdsl::encoders::encodeTemplateId(e_pnamequoted,args,templatecounter);
              this.templatecounter = templatecounter;
              this.request=ps.getRequest();
              this.response=ps.getResponse();
              this.session = request.getSession();
              this.dbConn=ps.getDbConn();
              this.variables=variables;
              storeArguments(args);
              
              initialize();
              initializeLocalVars();
              initializePassOn();
              initActions();
            } 
         ]|
       
rules

  local-defined-templates-to-hashmap-pil :
    elem* -> result
    with  localtemplates := <collect({\def@webdsl|[ define mod* x(farg*) { elem* } ]| -> (x,<get-template-class-name-pil> def)\})> elem*
        ; result := <map({\ (x,x_class) -> pil-stat|[ templates[e_key] = x_class.class; ]| 
                             where e_key := StringLit(String([Chars(<concat-strings> ["\"",x,"\""])]))
                          \})> localtemplates 
 
  formal-arguments-to-store-statements-pil :
    farg* -> result
    where  result := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> pil-stat|[ x = (t_arg) args[e_index]; ]|
                                            where e_index := Int(<subti;int-to-string> (index,1))
                                                ; t_arg := <argument-pil-type> arg
                                          \})> farg* //variables are generated in java-template-vars
