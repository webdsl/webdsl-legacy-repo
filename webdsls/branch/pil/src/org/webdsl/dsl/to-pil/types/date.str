module org/webdsl/dsl/to-pil/types/date

imports 
  libstrategolib 
  
imports 
  libwebdsl-front  

/*
rules // Peristence annotations

  builtin-persistence-annotations :
    SimpleSort("Time") -> [anno|[ @Temporal(TemporalType.TIME) ]|]
    
  builtin-persistence-annotations :
    SimpleSort("Date") -> [anno|[ @Temporal(TemporalType.DATE) ]|]
    
  builtin-persistence-annotations :
    SimpleSort("DateTime") -> [anno|[ @Temporal(TemporalType.TIMESTAMP) ]|]

rules // Typechecking

  builtin-java-type : 
    SimpleSort("Date") -> type|[ java.util.Date ]|
    
  builtin-java-type : 
    SimpleSort("DateTime") -> type|[ java.util.Date ]|
    
  builtin-java-type : 
    SimpleSort("Time") -> type|[ java.util.Date ]|

rules 
  call-to-pil :
    exp|[ now() ]| -> java|[ new java.util.Date() ]|
    //ThisCall("now", []) -> java|[ new java.util.Date() ]|

  call-to-pil :
    exp|[ today() ]| -> java|[ new java.util.Date() ]|
    //ThisCall("now", []) -> java|[ new java.util.Date() ]|

  call-to-pil :
    exp|[ e1.before(e2) ]| -> java|[ e3.before(e4) ]|
    with e3 := <expression-to-pil> e1
        ; e4 := <expression-to-pil> e2

  call-to-pil :
    exp|[ e1.after(e2) ]| -> java|[ e3.after(e4) ]|
    with e3 := <expression-to-pil> e1
        ; e4 := <expression-to-pil> e2

  call-to-pil :
    exp|[ Date(e1, e2) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e3, e4) ]|
    //ThisCall("Date", [d, f]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, e2) ]|
    with e3 := <expression-to-pil> e1
        ; e4 := <expression-to-pil> e2

  call-to-pil :
    exp|[ Date(e1) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e2, "dd/MM/yyyy") ]|
    //ThisCall("Date", [d]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, "dd/MM/yyyy") ]|
    with e2 := <expression-to-pil> e1

  call-to-pil :
    exp|[ Time(e1, e2) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e3, e4) ]|
    //ThisCall("Time", [d, f]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, e2) ]|
    with SimpleSort("Date") := <type-of> e1
        ; e3 := <expression-to-pil> e1
        ; e4 := <expression-to-pil> e2

  call-to-pil :
    exp|[ Time(e1) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e2, "H:mm") ]|
    //ThisCall("Time", [d]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, "H:mm") ]|
    with e2 := <expression-to-pil> e1

  call-to-pil :
    exp|[ DateTime(e1, e2) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e3, e4) ]|
    //ThisCall("DateTime", [d, f]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, e2) ]|
    with e3 := <expression-to-pil> e1
        ; e4 := <expression-to-pil> e2

  call-to-pil :
    exp|[ DateTime(e1) ]| -> java|[ org.webdsl.tools.Utils.parseDate(e2, "dd/MM/yyyy H:mm") ]|
    //ThisCall("DateTime", [d]) -> java|[ org.webdsl.tools.Utils.parseDate(e1, "dd/MM/yyyy H:mm") ]|
    with e2 := <expression-to-pil> e1

rules

  elem-to-pil :
    elem|[ inputDate(e)[passign*]{} ]| ->
    java |[ out.print("todo: inputdate"); ]|
    
  elem-to-pil :
    elem|[ outputDate(e)[passign*]{} ]| ->
    java |[ out.print("todo: outputdate"); ]|

  elem-to-pil :
    elem|[ inputTime(e)[passign*]{} ]| ->
    java |[ out.print("todo: inputtime"); ]|
    
  elem-to-pil :
    elem|[ outputTime(e)[passign*]{} ]| ->
    java |[ out.print("todo: outputtime"); ]|
    
  elem-to-pil :
    elem|[ inputDateTime(e)[passign*]{} ]| ->
    java |[ out.print("todo: inputdatetime"); ]|
    
  elem-to-pil :
    elem|[ outputDateTime(e)[passign*]{} ]| ->
    java |[ out.print("todo: outputdatetime"); ]|
    */
