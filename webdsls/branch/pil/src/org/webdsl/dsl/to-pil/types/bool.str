module org/webdsl/dsl/to-pil/types/bool

imports 
  libstrategolib 
  libwebdsl-front

rules 

  pil-element-id :
    tc@elem|[ inputBool(e)[passign*]{} ]| -> tc{InputNumberPil(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  handle-actions-input-to-pil :
    tc@elem|[ inputBool(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat*|[
        ident = ident+e_inputident+uniqueid;
        if(ps.parammap[ident+"_isinput"]!=null){
          if(ps.parammap[ident]!=null){
              Bool x_temp = true;
              stat 
          }
          else{
              Bool x_temp = false;
              stat 
          }
        }
    ]|
    with  e_inputident := <get-inputnumber-pil; pil-wrap-string> tc
        ; x_temp := <newname> "temp"
        ; stat := <input-assignment-to-pil(|x_temp)> e

  elem-to-pil :
    tc@elem|[ inputBool(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code-pil>
    pil-stat* |[ 
    String x_temp = ident+e_inputident+uniqueid;
    out.print("<input type=\"hidden\" name=\""+x_temp+"_isinput"+"\" />");
    out.print("<input type=\"checkbox\" name=\""+x_temp+"\" class=\"inputBool\" "+e_attrs1+" ");
    if(inSubmittedForm)
    {
      if(ps.parammap[x_temp]!=null)
      {
        out.print(" checked=\"true\" ");
      }
    }
    else
    {
      if(e1)
      {
        out.print(" checked=\"true\" ");
      }
    }
    out.print(" />"); 
    ]|
    with  e_inputident := <get-inputnumber-pil; pil-wrap-string> tc
        ; e1 := <expression-to-pil> e
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs-pil> passign*

  elem-to-pil :
    elem|[ outputBool(e)[passign*]{} ]| ->
    pil-stat* |[ 
    out.print("<input type=\"checkbox\" disabled=\"true\" class=\"inputBool\" "+e_attrs1+" ");
    if(e1)
    {
      out.print(" checked=\"true\" ");
    }
    out.print(" />"); 
    ]|
    with  e1 := <expression-to-pil> e
        ; e_attrs1 := <to-html-attrs-pil> passign*
  
rules

  builtin-pil-type :
    SimpleSort("Bool") -> pil-type|[ Bool ]|
    
rules // literals
  expression-to-pil :
    True() -> pil-exp|[ true ]|

  expression-to-pil :
    False() -> pil-exp|[ false ]|
