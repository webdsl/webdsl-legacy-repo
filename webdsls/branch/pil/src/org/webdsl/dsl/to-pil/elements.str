module org/webdsl/dsl/to-pil/elements

imports
  libstratego-lib

imports
  libwebdsl-front
    
rules // block

  // @obsolete; should have been removed by sugar, however seems to have to do something with menu
  elem-to-pil :
    TemplateCall("dummy", _,passign*, elems) -> <elems-to-pil> elems

  // @obsolete; use block{ ... } instead of div{ ... }
  elem-to-pil :
    TemplateCall("div", [String(x)],passign* , elems) ->
    pil-stat* |[ 
    out.print("<div "+e_attrs1 + ">");
    stat*
    out.print("</div>");
    ]|
    with  stat* := <elems-to-pil> elems 
        ; e_attrs1 := <to-html-attrs-pil> passign* 

  elem-to-pil :
    TemplateCall("block", [],passign*, elems) ->
    pil-stat* |[ 
    out.print("<div "+e_attrs1+" class=\"block\" >");
    stat*
    out.print("</div>");
    ]|
    with stat* := <elems-to-pil> elems 
       ; e_attrs1 := <to-html-attrs-pil> passign*

  elem-to-pil :
    TemplateCall("block", [String(x)],passign*, elems) ->
    pil-stat* |[ 
    out.print("<div class=\"block "+"~x"+"\" "+e_attrs1+" >");
    stat*
    out.print("</div>");
    ]|
    with stat* := <elems-to-pil> elems 
       ; e_attrs1 := <to-html-attrs-pil> passign*
    
  elem-to-pil :
    TemplateCall("block", [String(x), String("")],passign*, elems) ->
    pil-stat* |[ 
    out.print("<div class=\"block "+"~x"+"\" "+e_attrs1+">");
    stat*
    out.print("</div>");
    ]|
    with stat* := <elems-to-pil> elems 
        ;e_attrs1 :=<to-html-attrs-pil> passign*
    
  elem-to-pil :
    TemplateCall("block", [String(x), String(y)],passign*, elems) ->
    pil-stat* |[ 
    out.print("<div class=\""+"~y"+" block "+"~x"+"\"  "+e_attrs1+">");
    stat*
    out.print("</div>");
    ]|  
     where not( <?""> x ) ; not( <?""> y )
     with  stat* := <elems-to-pil> elems 
          ;e_attrs1 := <to-html-attrs-pil> passign*
    
  elem-to-pil :
    TemplateCall("block", [String(""), String(y)],passign*, elems) ->
    pil-stat* |[ 
    out.print("<div class=\""+"~y"+" block\" "+e_attrs1+">"); 
    stat*
    out.print("</div>");
    ]|
    with stat* := <elems-to-pil> elems 
        ;e_attrs1 := <to-html-attrs-pil> passign*

strategies // title

  elem-to-pil :
    TemplateCall("title", _,passign*, elems) ->
    pil-stat|[ 
    {
      var out = new webdsl::util::StringWriter();
      stat*
      ps.pageTitle = out.toString();
    } 
    ]|
    with stat* := <elems-to-pil> elems

rules // text

  elem-to-pil :
    Text(val) -> pil-stat|[ out.print(webdsl::encoders::encodeHTML(e)); ]|
    with e := StringLit(String([Chars(val)]))
rules // text

  // convert an expression to text (string value of the expression)

  elem-to-pil :
    TemplateCall("text", [arg],passign*, []) -> stat*
    with  stat* := <to-page-string-pil(|QId(QId("webdsl", "encoders"), "encodeHTML"))> arg

rules // spacers

  elem-to-pil :
    TemplateCall("spacer", _,passign*, []) -> pil-stat|[ out.print("<hr "+e_attrs1+"/>"); ]|
    with e_attrs1 := <to-html-attrs-pil> passign*

  elem-to-pil :
    TemplateCall("horizontalspacer", _,passign*, []) -> pil-stat|[ out.print("<hr "+e_attrs1+" />"); ]|
    with e_attrs1 := <to-html-attrs-pil> passign*

rules // images

  elem-to-pil :
    TemplateCall("image",[e],passign*,[]) -> 
    pil-stat* |[ 
      out.print("<img src=\"");
      stat*
      out.print("\" "+e_attrs1+" />"); 
    ]|
    where String(url) := e
        ; <is-substring(!"://")> url
    with  stat* := <to-page-string-pil> e
        ; e_attrs1 := <to-html-attrs-pil> passign*

  elem-to-pil :
    TemplateCall("image",[e ],passign*,[]) -> 
    pil-stat*|[ 
      out.print("<img src=\""+e_approot);
      stat*
      out.print("\" "+e_attrs1+" />"); 
    ]|
    where String(url) := e
        ; not(<is-substring(!"://")> url)
    with  stat* := <to-page-string-pil> e
        ; e_attrs1 := <to-html-attrs-pil> passign*
        ; e_approot := StringLit(String([Chars(<AppRoot>)]))

rules // lists

  elem-to-pil :
    TemplateCall("list", [],passign*, elems) ->
    pil-stat* |[ 
      out.print("<ul "+e_attrs1+">");
      stat*
      out.print("</ul>");
    ]|
    with  stat* := <elems-to-pil> elems
        ; e_attrs1 := <to-html-attrs-pil> passign*

  elem-to-pil :
    TemplateCall("listitem", [],passign*, elems) ->
    pil-stat* |[ 
      out.print("<li "+e_attrs1+">");
      stat*
      out.print("</li>");
    ]|
    with  stat* := <elems-to-pil> elems
        ; e_attrs1 := <to-html-attrs-pil> passign*

rules // sections and headers

  elem-to-pil :
    TemplateCall("header", [],passign*, elems) ->
    pil-stat* |[ 
      out.print("<"+e_tag+" class=\"header "+e_sectionlevel+"\" "+e_attrs1+">");
      stat*
      out.print("</"+e_tag+">");
    ]|
    where not(TableScopePil)
    with  n := <(SectionDepthPil <+ !1); int-to-string>
        ; e_tag := StringLit(String([Chars(<concat-strings>["h", n])]))
        ; e_sectionlevel := StringLit(String([Chars(<concat-strings>["section", n])]))
        ; stat* := <elems-to-pil> elems
        ; e_attrs1 := <to-html-attrs-pil> passign*
    
  elem-to-pil :
    TemplateCall("section", [],passign*, elems) ->
    pil-stat* |[ 
      out.print("<span class=\"section "+e_sectionlevel+"\" "+e_attrs1+">");
      stat*
      out.print("</span>");
    ]|
    with  {| SectionDepthPil
           : rules( SectionDepthPil := <(SectionDepthPil <+ !0); inc> )
           ; e_sectionlevel := <pil-wrap-string> <concat-strings>["section", <SectionDepthPil; int-to-string>]
           ; stat* := <elems-to-pil> elems 
           ; e_attrs1 := <to-html-attrs-pil> passign*
           |}
 
  elem-to-pil :
    TemplateCall("par", [],passign*, elems) ->
    pil-stat* |[ 
    out.print("<p "+e_attrs1+">");
    stat*
    out.print("</p>");
    ]|
    with  stat* := <elems-to-pil> elems
        ; e_attrs1 := <to-html-attrs-pil> passign*    
    
  elem-to-pil :
    TemplateCall("container", [],passign*, elems) ->
    pil-stat* |[ 
    out.print("<span "+e_attrs1+">");
    stat*
    out.print("</span>");
    ]|
    with  stat* := <elems-to-pil> elems
        ; e_attrs1 := <to-html-attrs-pil> passign*
        
rules // pre-formatted text

  elem-to-pil :
    TemplateCall("pre", [],passign*, elems) ->
    pil-stat* |[ 
    out.print("<pre "+e_attrs1+">");
    stat*
    out.print("</pre>");
    ]|
    with  stat* := <elems-to-pil> elems
        ; e_attrs1 := <to-html-attrs-pil> passign*

rules // tables

  elem-to-pil :
    TemplateCall("table", [],passign*, elems) ->
    pil-stat* |[ 
    out.print("<table cellspacing='0px' cellpadding='0px' "+e_attrs1+">");
    stat*
    out.print("</table>");
    ]|
    with  {| TableScopePil
           : rules ( TableScopePil := 1 )
           ; stat* := <elems-to-pil> elems
           |}
        ; e_attrs1 := <to-html-attrs-pil> passign*

  elem-to-pil :
    TemplateCall("header", [],passign*, elems) -> 
    pil-stat* |[ 
      out.print("<th "+e_attrs1+">");
      stat*
      out.print("</th>");
    ]|
    where TableScopePil
    with  stat* := <elems-to-pil> elems
        ; e_attrs1 := <to-html-attrs-pil> passign*
    
// elem-to-pil gives either a list of or one bstm

  elem-to-pil :
    TemplateCall("row", [],passign*, elems) ->
    pil-stat* |[ 
    out.print("<tr "+e_attrs1+">");
    stat*
    out.print("</tr>");
    ]|
    with  e_attrs1 := <to-html-attrs-pil> passign*
        ; stat*    := <elems-to-pil> elems

  elem-to-pil :
    TemplateCall("column", [],passign*, elems) ->
    pil-stat* |[ 
    out.print("<td "+e_attrs1+">");
    stat*
    out.print("</td>");
    ]|
    where not([TemplateCall("header",_,_,_)] := elems)
    with  e_attrs1 := <to-html-attrs-pil> passign*
        ; stat*  :=  <elems-to-pil> elems

  //a combination of column { header { ..}} leads to <th>
  elem-to-pil :
    TemplateCall("column", [],passign*, [TemplateCall("header", [], passign2*, elems)]) ->
    pil-stat* |[ 
    out.print("<th "+e_attrs1+" "+e_attrs2+">");
    stat*
    out.print("</th>");
    ]|
    with  e_attrs1 := <to-html-attrs-pil> passign*
        ; e_attrs2 := <to-html-attrs-pil> passign2*
        ; stat*  :=  <elems-to-pil> elems


//for moved to control-flow-to-pil

//select moved to types/collection

//if moved to control-flow-to-pil


//templatecalls moved to control-flow-to-pil

rules // links

  // link to a url, maybe constant, or obtained from an entity field
        
  elem-to-pil : //void navigate, useful for ajax
    TemplateCall("navigate", [],passign*, elems) ->
    pil-stat* |[ 
    out.print("<a class=\"navigate\" href=\"javascript:void()\" "+e_attrs1+">");
    stat*
    out.print("</a>");
    ]|
    with  stat* := <elems-to-pil> elems
        ; e_attrs1 := <to-html-attrs-pil> passign*
        
        
  elem-to-pil :
    TemplateCall("navigate", [ThisCall("url",[e])],passign*, elems) ->
    pil-stat* |[ 
    out.print("<a class=\"navigate\" href=\"");
    stat_exptostring*
    out.print("\" "+e_attrs1+">");
    stat*
    out.print("</a>");
    ]|
    with  stat_exptostring* := <to-page-string-pil> e
        ; stat* := <elems-to-pil> elems
        ; e_attrs1 := <to-html-attrs-pil> passign*

  elem-to-pil :
    TemplateCall("navigate",[call@ThisCall(p,args)],passign*,elems) ->
    pil-stat* |[ 
    out.print("<a class=\"navigate\" href=\""+e_resulturl+"\" "+e_attrs1+">");
    stat*
    out.print("</a>");
    ]|
    where <IsPage> p
    with  e_url := <page-thiscall-to-url-string-pil> call
        ; stat* := <elems-to-pil> elems
        ; e_attrs1 := <to-html-attrs-pil> passign*
        ; if ThisEmailPil 
          then e_resulturl := pil-exp|[ ps.getAbsoluteLocation() + e_url ]|  
          else e_resulturl := e_url end

  elem-to-pil :
    TemplateCall("navigatebutton",[call@ThisCall(p,args), e],passign*,[]) ->
    pil-stat* |[
      out.print("<input type=\"button\" "+e_attrs1+" onclick=\"window.location = '"+e_url+"'\"");
      out.print("value=\"");
      stat*
      out.print("\"");
      out.print(" />");
    ]|
    where <IsPage> p
    with  e_url := <page-thiscall-to-url-string-pil> call
        ; stat* := <to-page-string-pil> e
        ; e_attrs1 := <to-html-attrs-pil> passign*
        

rules

  page-thiscall-to-url-string-pil :
    ThisCall(p,args) -> pil-exp|[ e_url ]|
    with  def |[ define mod* x(farg*) { elem* } ]| := <TemplateSignature> (p, <map(type-of)> args)
        ; params := <zip(bind-param-pil)> (farg*, args)
        ; e_url := <page-call-to-url-pil> (p, params)
        
  bind-param-pil :
    (Arg(x, srt), e) -> (x, el)
    where <is-entity-type> srt
    with  el := <expression-to-pil> FieldAccess(e, "id")
 
  bind-param-pil :
    (Arg(x, srt), e) -> (x, el)
    where <is-simple-sort> srt
    with  el := <expression-to-pil> e

  page-call-to-url-pil :
    (fn, []) -> StringLit(String([Chars(s)]))
    with  s := <concat-strings> [<AppRoot>, "/", fn]

  page-call-to-url-pil :
    (fn, params) -> pil-exp|[ e_s + e1 ]| 
    where not([] := params)
    with  s  := <concat-strings> [<AppRoot>, "/", fn, "/"]
        ; e_s := StringLit(String([Chars(s)]))
        ; e1 := <map(param-to-request-param-pil); combine-params-to-exp-pil> params

  combine-params-to-exp-pil :
    [e] -> e
  
  combine-params-to-exp-pil :
    [e|e*] -> pil-exp|[ e + "/" + e1 ]|
    with  e1 := <combine-params-to-exp-pil> e*

  param-to-request-param-pil :
    (param, value) -> value
    //    (param, value) -> <concat-strings> [param, "=", value]

rules // forms

  elem-to-pil : 
    tc@TemplateCall("form", [],passign*, elems) ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat*|[
      ident = ident + e_formident+uniqueid;
      form_ident = ident; //just for actionLink javascript code    
      if(ps.getParammap().get(ident)!=null)
      {
        inSubmittedForm = true; // ok, because no nested forms, otherwise need to count just like inForLoop variable
      }
      
      out.print("<form "+e_enc+" name=\""+ident+"\" id=\""+ident+"\" action=\""+"/"+application::appName+"/"+ps.getPageName()+"\" method=\"POST\" "+e_attrs1+">");
      out.print("<input type=\"hidden\" name=\""+ident+"\" value=\"1\" />");
      out.print(ps.getHiddenParams()); // page arguments

      stat*

      out.print("</form>");

      inSubmittedForm = false;
      form_ident = "";
    ]|
    with  stat* := <elems-to-pil> elems
        ; e_formident := <get-formnumber-pil; pil-wrap-string> tc
        ; e_attrs1 := <to-html-attrs-pil> passign*
        ; if <oncetd(requires-multipart-encoded-form-pil)> elems
          then e_enc := pil-exp|[ "enctype=\"multipart/form-data\"" ]|
          else e_enc := pil-exp|[ "" ]| end

  handle-actions-to-pil: 
    tc@TemplateCall("form", [],passign*, elems) ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat*|[
        ident = ident + e_formident + uniqueid;
        stat*
    ]|
    with stat* := <collect-om(handle-actions-to-pil); concat-with-sublists> elems
       ; e_formident := <get-formnumber-pil; pil-wrap-string> tc   
   
  elem-to-pil :
    tc@TemplateCall("action",[e2],passign*,[]) ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat* |[ 
      out.print("<input type=\"button\" value=\"");
      stat*
      out.print("\" "+e_attrs1+" />");
    ]|
    where IsAjaxApp
    with  stat* := <to-page-string-pil>  e2
        ; e_attrs1 := <to-html-attrs-pil> passign*    

  elem-to-pil :
    tc@TemplateCall("action",[e2,call@ThisCall(name, args)],passign*,[]) ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat* |[ 
      out.print("<input type=\"button\" value=\"");
      stat*
      out.print("\" "+e_attrs1+" ");
      out.print("onclick='javascript:serverInvoke(\""+e_app+"/" + ps.getPageName()  +"\",\""+ e_actionident+uniqueid+e3 +"\", \""+ps.getHiddenPostParams()+"\",\""+form_ident+"\", this)'/>"); 
    ]|
    where IsAjaxApp
    with  stat* := <to-page-string-pil> e2
        ; e_actionident := <get-actionnumber-pil; pil-wrap-string> tc   
        ; e_app := <pil-wrap-string> <AppRoot>
        ; e3 := <actual-action-args-to-state-enc-pil> args
        ; e_attrs1 := <to-html-attrs-pil> passign*
  
   elem-to-pil :
    tc@TemplateCall("action",[e2,e1],passign*,[]) ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat* |[ 
      out.print("<input type=\"submit\" name=\""+ident+e_actionident+uniqueid+e5+"\" value=\"");
      stat*
      out.print("\" "+e_attrs1+" />"); 
    ]|
    where not(IsAjaxApp)
    with  e3 := <?ThisCall(name,args);!name> e1
        ; stat* := <to-page-string-pil>  e2
        ; e_actionident := <get-actionnumber-pil; pil-wrap-string> tc   
        ; e_attrs1 := <to-html-attrs-pil> passign*        
        ; e5 := <actual-action-args-to-state-enc-pil> args
        
  handle-actions-to-pil: 
    tc@TemplateCall("action",[e2,e1],passign*,[]) ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat*|[
        ident = ident + e_actionident + uniqueid + e5;
        if(ps.getParammap().get(ident)!=null)
        {
            t_action temp = (t_action)actionclasses.get(e_action);
            temp.call(e*);
        }
    ]|
    with  e_actionident := <get-actionnumber-pil; pil-wrap-string> tc   
        ; mx_action := <?ThisCall(name,args);!name> e1
        //; t_action := SimpleType(QId("action", mx_action))
        ; e_action := <pil-wrap-string> mx_action
        ; e* := <map(expression-to-pil)> args
        ; t* := <map(type-of; pil-type)> e*
        ; x_fun := <concat-strings> ["Function", <length; int-to-string> e*]
        ; t_action := pil-type|[ pil::x_fun<void, t*> ]|
        ; e5 := <actual-action-args-to-state-enc-pil> args

  elem-to-pil : //actionLink without call only valid for ajax apps
    tc@TemplateCall("actionLink",[e2],passign*,[]) ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat* |[ 
      out.print("<a href=\"javascript:void()\" "+e_attrs1+">");
      stat*
      out.print("</a>");
    ]|
    where IsAjaxApp
    with  stat* := <to-page-string-pil>  e2
        ; e_attrs1 := <to-html-attrs-pil> passign*        
    
  elem-to-pil :
    tc@TemplateCall("actionLink",[e2,call@ThisCall(name, args)],passign*,[]) ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat* |[ 
      ident = ident + e_actionident +uniqueid+e3 ;
      out.print("<a href=\"javascript:void()\" "+e_attrs1+" onclick='javascript:serverInvoke(\""+e_app+"/" + ps.getPageName()  +"\",\""+ ident+"\", \""+ps.getHiddenPostParams()+"\",\""+form_ident+"\", this)' >");
      bstm_exptostring*
      out.print("</a>");
    ]|
    where IsAjaxApp
    with  bstm_exptostring* := <to-page-string-pil> e2
        ; e_actionident := <get-actionnumber-pil; pil-wrap-string> tc   
        ; e_app := <pil-wrap-string> <AppRoot>
        ; e3 := <actual-action-args-to-state-enc-pil> args
        ; e_attrs1 := <to-html-attrs-pil> passign*        
        
   elem-to-pil :
    tc@TemplateCall("actionLink",[e2,e3@ThisCall(name, args)],passign*,[]) ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat* |[ //this doesn't allow downloads, use special downloadLink (see types/file.str)
      ident = ident + e_actionident +uniqueid+e5;
      out.print("<input type=\"hidden\" name=\""+ident+"\" "+e_attrs1+"/>");
      out.print("<a href=\"#\"");
      out.print("onClick=\"document.getElementsByName('"+ident+"')[0].value='1';"+
                          "document."+form_ident+".submit();"+
                          "document.getElementsByName('"+ident+"')[0].value='0';"+
                          "\">");
      stat*
      out.print("</a>");
    ]|
    where not(IsAjaxApp)
    with  stat* := <to-page-string-pil>  e2
        ; e_actionident := <get-actionnumber-pil; pil-wrap-string> tc
        ; e_attrs1 := <to-html-attrs-pil> passign*        
        ; e5 := <actual-action-args-to-state-enc-pil> args
        
  handle-actions-to-pil: 
    tc@TemplateCall("actionLink",[e2,e1],passign*,[]) ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat*|[
        ident = ident + e_actionident +uniqueid+e5;
        if(ps.getParammap().get(ident)!=null ) // not necessary: && ps.getParammap().get(ident).equals("1") )
        {
            t_action temp = (t_action)actionclasses.get(e_action);
            temp.mx_action(e*);
        }
    ]|
    with  e_actionident := <get-actionnumber-pil; pil-wrap-string> tc   
        ; mx_action := <?ThisCall(name,args);!name> e1
        ; t_action := SimpleType(QId("action", mx_action))
        ; e_action := <pil-wrap-string> mx_action
        ; e* := <map(expression-to-pil)> args
        ; e5 := <actual-action-args-to-state-enc-pil> args
