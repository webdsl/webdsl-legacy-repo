module org/webdsl/dsl/to-pil/page-arguments

imports
  libstratego-lib

imports
  libwebdsl-front

rules // page arguments

  GenerateCodePil = where((ThisPagePil<+ThisTemplateNamePil);not(InActionPil)); argument-to-pil-property; fail
   
   argument-to-pil-property :
    arg@farg|[ x : srt ]| -> 
     <generate-pil-partial> pil-cbd*|[
         @extend
         void conversion(){
           if(parammap[e_original] !=null)
           {
             try{ 
                Array<String> ids = parammap[e_original].split(","); 
                x_ids = e;
                for(String anid : ids) {
                  x_ids.add(anid.as<Int>);
                }
             }
             catch(NumberFormatException nfe){
               println(nfe.getMessage());
             }  
           } 
         }
         
         @extend
         void loadArguments() {
           stat*
         }
        
         t_idstype x_ids = null;
        
         qid1<data::x_Class> x = null;
      ]|    
      where <?GenericSort(qid1,[x2])> srt
      with  <?SimpleSort(x_Class)> x2      
          ; x_id := <concat-strings>[x, "_id"]
          ; e_original := <pil-wrap-string> <OriginalNonUniqueName> x
          /* TODO: Re-enable
          ; if <EntityIdName> x_Class then
              t := <EntityIdType> x_Class
            else */
              ; t := SimpleSort("Int")
            //end
          ; t_idstype := <builtin-pil-type> GenericSort(qid1,[t])
          ; e := <webdsl-pil-type-default-value> GenericSort(qid1, [t])
          ; stat* := <argument-to-pil-initialization> arg
          ; x_ids := <concat-strings>[x,"_ids"]
     
   /* TODO: re-enable
   argument-to-pil-property :
    arg@farg|[ x : srt ]| ->
    <generate-pil-partial> pil-cbd*|[
       @extend
       void conversion(){
         if(parammap[e_original] != null)
         {
           stat1*
         } 
       }
       @extend
       void loadArguments() {
         stat*
       }

       t x_id = e_init;
       
       x_Class x;
       
       public void set#x(x_Class x) {
         this.x = x;
       }
       
       public x_Class get#x() {
         return x;
       }
    ]|
    where <is-entity-type> srt
    with  <?SimpleSort(x_Class)> srt
        ; x_id := <concat-strings>[x, "_id"]
        ; e_original := <pil-wrap-string> <OriginalNonUniqueName> x
        ; if <EntityIdName> x_Class then
            t := <builtin-pil-type> <EntityIdType> x_Class
          else
            t := type|[ Long ]|
          end
        ; bstm* := <argument-to-pil-initialization> arg
        ; bstm1* := <pil-conversion-to-object> (t,x,x_id)
   */ 

   argument-to-pil-property :
    arg@farg|[ x : srt ]| ->
    <generate-pil-partial> pil-cbd*|[
       @extend
       void conversion(){
         if(parammap[e_original] !=null)
         {
           stat1*
         }
       }
       @extend
       void loadArguments() {
         stat*
         stat2*
       }

       t_Class x = e_init;
    ]|
    where t_Class := <builtin-pil-type> srt; not(GenericSort(_,_) := srt)
    with  <?SimpleSort(_)> srt
        ; e_original := <pil-wrap-string> <OriginalNonUniqueName> x
        ; stat* := <argument-to-pil-initialization <+ debug(!"argument-to-pil-init failed: "); fail> arg
        ; stat2* := <string-argument-to-pil-initialization <+ ![]> arg // fix for passing strings decode (eg. %20 -> ' ')
        ; stat1* := <pil-conversion-to-object <+ debug(!"pil-conversion-to-object failed: "); fail> (t_Class,x,x)
        ; e_init := <webdsl-pil-type-default-value <+ debug(!"Default value failed: "); fail> srt

  /* TODO: re-enable
  argument-to-pil-initialization :
    arg@farg|[ x : srt ]| ->
    pil-stat*|[
      if (x_Id == null) {            
         //x = new x_Class();
      } else {
          if (x == null) {
            x = (t_Class) dbConn.load(x_Class.class, x_Id);
          }
      }
    ]|
    where <defined-pil-type> srt
    with <?SimpleSort(x_Class)> srt
        ; x_Id := <concat-strings>[x, "_id"]
        ; e_init := <webdsl-pil-type-default-value> srt
       // ; rules( Parameter :+= x )

  argument-to-pil-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
      if (x_ids == null) {            
         //x_ids = new x3();
      } 
      else {
        if (x == null) {
          x = e;
          for(Integer anid: x_ids) {
            x.add((x_Class) hibSession.load(x_Class.class, anid));
          }
        }
      }
    ]|
    where <?GenericSort(x1,[x2])> srt; <defined-pil-type> x2
    with  <?SimpleSort(x_Class)> x2
        ; e :=    <webdsl-pil-type-default-value> srt
        ; x_ids := <concat-strings>[x, "_ids"]
  */

  argument-to-pil-initialization :
    arg@farg|[ x : srt ]| ->
    pil-stat*|[
          // Don't think this is necessary, values already initialized by default in PIL
          /*
          if (x == null) {
            x = e_init;
          }
          */
    ]|
    where <builtin-pil-type> srt
    with  <?SimpleSort(x_Class)> srt
        ; e_init := <webdsl-pil-type-default-value> srt
       // ; rules( Parameter :+= x )

  string-argument-to-pil-initialization :
    arg@farg|[ x : srt ]| ->
    pil-stat*|[
      try {
          x = webdsl::encoders::urlDecode(x);
      } catch (Exception ex) {
          println(ex);
      }
    ]|
    where <builtin-pil-type> srt
        ; <?SimpleSort("String")> srt

  //hiddens for form
                                   //JavaThisPage
  GenerateCodePil =  where((ThisPagePil<+ThisTemplateNamePil);not(InActionPil)); form-hidden-page-params-pil ; fail
       
  form-hidden-page-params-pil :
    Arg(x_ident, s) -> <generate-pil-partial>
    pil-cbd|[ 
      @extend 
      void hiddenParams(MutableString combinedparams)
      {
        combinedparams.append("<input type=\"hidden\" name=\""+e_original+"\" value=\""+x_ident.as<String>+"\" />");    
      }
    ]|
    where <builtin-pil-type> s
    with e_original := <pil-wrap-string> <OriginalNonUniqueName> x_ident

  /* TODO: re-enable
  form-hidden-page-params-pil :
    Arg(x, s) -> <generate-pil-partial>
    java |[ 
      @Partial 
      public void hiddenParams(java.lang.StringBuffer combinedparams)
      {
        combinedparams.append("<input type=\"hidden\" name=\""+"~<OriginalNonUniqueName> x"+"\" value=\""+x.getId()+"\" />");    
      }
    ]|
    where <defined-pil-type> s; not( GenericSort(_,_) := s)
  */
    
  form-hidden-page-params-pil :
    Arg(x, s) -> <generate-pil-partial>
    pil-cbd |[ 
      @extend 
      void hiddenParams(MutableString combinedparams)
      {
        MutableString x_ids = new MutableString();
        for(webdsl::WebDSLEntity o: x) {
          x_ids.append(o.id+",");
        }        
        combinedparams.append("<input type=\"hidden\" name=\""+e_original+"\" value=\""+x_ids.as<String>+"\" />");    
      }
    ]|
    where GenericSort(_,_):= s    
    with x_ids := <concat-strings> [x, "_ids"]
       ; e_original := <pil-wrap-string> <OriginalNonUniqueName> x
       
  form-hidden-page-params-pil  :
    arg@farg|[ x : srt ]| -> arg
    where <?GenericSort(_,_)> srt // TODO list arguments to page or template       
       
  GenerateCodePil =  where((ThisPagePil<+ThisTemplateNamePil);not(InActionPil)); form-post-page-params-pil ; fail
       
  form-post-page-params-pil :
    Arg(x_ident, s) -> <generate-pil-partial>
    pil-cbd |[ 
      @extend
      void hiddenPostParams(MutableString combinedparams) {
        combinedparams.append(e_original+"="+x_ident.as<String>+"&");    
      }
    ]|
    where <builtin-pil-type> s
    with  e_original := <pil-wrap-string> <OriginalNonUniqueName> x_ident

  form-post-page-params-pil :
    Arg(x_ident, s) -> <generate-pil-partial>
    pil-cbd|[ 
      @extend 
      void hiddenPostParams(MutableString combinedparams) {
        combinedparams.append(e_original +"="+x_ident.id+"&");    
      }
    ]|
    where <defined-pil-type> s
    with  e_original := <pil-wrap-string> <OriginalNonUniqueName> x_ident

  form-post-page-params-pil  :
    arg@farg|[ x_ident : srt ]| -> <generate-pil-partial>
    pil-cbd |[ 
      @extend
      void hiddenPostParams(MutableString combinedparams) {
        combinedparams.append(e_original+"="+webdsl::encoders::encodeIdList(x_ident)+"&");
      }
    ]|
    where <?GenericSort(_,_)> srt 
    with  e_original := <pil-wrap-string> <OriginalNonUniqueName> x_ident
