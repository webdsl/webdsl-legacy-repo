module org/webdsl/dsl/to-pil/core

imports
  PIL

imports
  org/webdsl/dsl/to-pil/-
  org/webdsl/dsl/to-pil/types/-
  org/webdsl/dsl/to-pil/uicomponents/-
  org/webdsl/dsl/to-pil/styling/-
  org/webdsl/dsl/to-pil/ajax/- 
  org/webdsl/dsl/to-pil/email/-
  org/webdsl/dsl/to-pil/stratego-interface/-

rules

  get-templatecallnumber-pil :
    _{anno*} -> compid
    where TemplateCallNumberPil(compid) := <collect(?TemplateCallNumberPil(_));Hd> anno*
 
  get-formnumber-pil :
    _{anno*} -> compid
    where FormNumberPil(compid) := <collect(?FormNumberPil(_));Hd> anno* 
    
  get-inputnumber-pil :
    _{anno*} -> compid
    where InputNumberPil(compid) := <collect(?InputNumberPil(_));Hd> anno* 
    
  get-actionnumber-pil :
    _{anno*} -> compid
    where ActionNumberPil(compid) := <collect(?ActionNumberPil(_));Hd> anno* 
    
  get-template-class-name-pil :
    _{anno*} -> compid
    where TemplateClassNamePil(compid) := <collect(?TemplateClassNamePil(_));Hd> anno* 
strategies

  //set-DomainPackage(|pkg) = rules( DomainPackage := pkg )
  
  core-to-pil =
    ?Application(qid, sections)
    ; info(|"Now going to do code generation")
    /*
    ; rules(
        Package       := <qid-to-package-name> qid        
        BeanPackage   := <qid-to-package-name> Qualified(qid, "beans")
        ActionPackage := <qid-to-package-name> Qualified(qid, "actions")
      )
    ; set-DomainPackage(|<qid-to-package-name> Qualified(qid, "domain")) //strategy/rule shared with seam back-end
    ; !Application(qid, sections)
    */
   
    ; get-all-top-level-template-names-pil //TODO should be available in a dynamic rule somewhere
    ; annotate-with-unique-element-ids-pil
    
    //; pp-aterm(|"program: ")
    ; generate-code-pil

    // generate the application context java files that initialize global variables
    //; where(pkgname1 := <BeanPackage>;pkgname2 := <DomainPackage>;pkgname3 := <ActionPackage>)
    ; pil-get-emitted
    ; where(<pp-pil-to-string; debug> Application(<id>))
    ; pil-generate-java-code(|"out")
    /*
    ; ! [  <get-java-artifacts-pil>
         , <get-web-xml>
         , <get-css-artifacts>
         , JavaFile(["src"],compilation-unit|[package pkgname1 ; public class Force_Bean_Package_Creation {} ]|)
         , JavaFile(["src"],compilation-unit|[package pkgname2 ; public class Force_Domain_Package_Creation {} ]|) 
         , JavaFile(["src"],compilation-unit|[package pkgname3 ; public class Force_Action_Package_Creation {} ]|)                   
        ]
        */

   generate-code-pil =
     ?def@Define(mods, name, args, elems) ;
         {| ThisEmailPil, ThisPagePil, NestedTemplatePil, ThisTemplateNamePil, ThisTemplateClassNamePil, VariablesPil: //Variables: to hold arguments/variables of parent templates/pages
         with(
           if ThisTemplateNamePil       then rules ( NestedTemplatePil := name ) end
         ; if <elem> (Page(), mods)  then rules ( ThisPagePil := name ) end
         ; if <oncetd(?Email())> mods then rules ( ThisEmailPil := name ) end
         ; rules ( 
             ThisTemplateNamePil := name
             ThisTemplateClassNamePil := <get-template-class-name-pil> def
           ) 
         )
         ; not(GenerateCodePil)
         ; all(generate-code-pil)
         |}
   <+?Action(_, _, _) ;
         {| InActionPil, VariablesPil:
           rules ( InActionPil := True() )
         ; not(GenerateCodePil)
         ; all(generate-code-pil)
         |}
   <+?Function(_,_,_,_)  <+(?Entity(_,_,_,_)<+?SessionEntity(_,_,_)<+?EntityNoSuper(_,_,_)) ;
         {| InEntityPil:
           rules ( InEntityPil := True() )
         ; not(GenerateCodePil)
         ; all(generate-code-pil)
         |}
   <+{?el@elem|[ var x : srt := e ]|
         ; where(<elem> (el,<AllGlobalVars>))}
   <+     not(GenerateCodePil)
         ; all(generate-code-pil)

// some helping annotations to create uniqueness among the static elements

signature
  constructors
    TemplateCallNumberPil : String -> Annotation
    FormNumberPil : String -> Annotation
    InputNumberPil : String -> Annotation
    ActionNumberPil : String -> Annotation //action calls/actionLink
    TemplateClassNamePil : String -> Annotation
        

strategies

  annotate-with-unique-element-ids-pil = 
    topdown(try(pil-element-id))

rules

  pil-element-id :
    tc@TemplateCall(name, args,passign*, _){anno*} -> tc{TemplateCallNumberPil(newid),anno*} 
    where
          t* := <map(type-of)> args ; <TemplateSignature <+ LocalTemplateSignature <+ !<strip-annos> name;TemplateWithGenerics> (name,t*)
        ; newid := <newname> "tcall"
    
  pil-element-id :
    tc@TemplateCall("form", attrs,passign*, elems){anno*} -> tc{FormNumberPil(newid),anno*} 
    where  newid := <newname> "form"
    
  pil-element-id :
    tc@TemplateCall("action",[e1,e2],passign*,[]){anno*} -> tc{ActionNumberPil(newid),anno*} 
    where  newid := <newname> "action"
  
  pil-element-id :
    tc@PropertyAssignment(x, ThisCall(event, args)){anno*} -> tc{ActionNumberPil(newid),anno*} 
    where  newid := <newname> "action"
    
  pil-element-id :
    tc@TemplateCall("actionLink",[e1,e2],passign*,[]){anno*} -> tc{ActionNumberPil(newid),anno*} 
    where  newid := <newname> "action"
          
  pil-element-id :
    tc@webdsl|[ define mod* x(farg*) { elem* } ]| -> newtc{TemplateClassNamePil(newid),anno*} 
    where _{anno*} := tc
        ; x1 := <strip-annos> x
        ; newtc := webdsl|[ define mod* x1(farg*) { elem* } ]| 
        ; newid := <concat-strings;newname> [x,"Template"] // TODO add context page to the name for easier debugging
        ; if <oncetd(?Email())> mod* then rules ( EmailClassNamePil : x -> newid ) end
        ; if <IsTopLevelTemplateNamePil> x then rules(TopLevelTemplateClassNamePil : x -> newid) end
        ; if <elem> (Page(),mod*)
          then rules( AllPageNamesPil  :+= x 
                      PageClassNamePil : x -> newid) // used to create lookup hashmap in java-base-page.str 
                                                  // TODO needs renaming, used for any type of template now
          end 

  pil-element-id-template-call : 
    tc -> tc{InputNumberPil(newid),anno*} 
    with  _{anno*} := tc
        ; newid := <newname> "input"

  get-all-top-level-template-names-pil =
    alltd(register-top-level-template-name-pil)

  register-top-level-template-name-pil = 
    ?webdsl|[ define mod* x(farg*) { elem* } ]|
    ; with(
        if <elem> (Template(), mod*)
        then rules(AllTopLevelTemplateNamesPil :+= x  // used to create lookup hashmap in java-base-page.str
                   IsTopLevelTemplateNamePil : x
                   TopLevelTemplateArgumentsPil : x -> farg* )
        end
        ; if <oncetd(?Email())> mod* then rules ( AllEmailNamesPil :+= x ) end
      )
    
