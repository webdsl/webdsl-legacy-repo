module org/webdsl/dsl/to-pil/entity-main

imports
  libstrategolib

imports
  libwebdsl-front
  //org/webdsl/dsl/to-pil/property-events

strategies

   entity-to-pil-entity :
     EntityNoSuper(x_Class, props, functions) ->
     <pil-emit> pil-decl|[

       class data::x_Class extends pil::db::model::Entity {
          new() { }

          //~*idcodes
          
          //~*[<entity-cbds-equals-pil(|x_Class)>]
          //~*cbds_propertyevents

          /*
          public int compareTo(org.webdsl.WebDSLEntity o) {
            return getId().compareTo(((x_Class)o).getId());
          }

          */

          ~*cbds
   
       }
     ]|
     with  {| ClassNamePil
      : rules( ClassNamePil := x_Class )
      ; cbds := <properties-to-code-pil(|x_Class)> props
      |}
      
   entity-to-pil-entity :
     SessionEntity(x_ident, props, functions) ->
     <pil-emit> pil-decl|[
       class data::x_Class extends pil::db::model::Entity {
        new() { }

        ~*cbds
        ~*cbds1
 
       }
     ]|
     with x_Class := <capitalize-string> x_ident
    ; {| ClassNamePil
        : rules( ClassNamePil := x_Class )
        ; cbds := <properties-to-code-pil(|x_Class)> props
        ; cbds1 := <filter(property-to-session-prop-ids-pil(|x_Class));try(concat)> props
        |}

   entity-to-pil-entity :
     Entity(x_Class, x_super, props, functions) ->
     <pil-emit> pil-decl|[
       class data::x_Class extends data::x_super {

         ~*cbds
   
       }
     ]|
     with  {| ClassNamePil
         : rules( ClassNamePil := x_Class )
         ; cbds := <properties-to-code-pil(|x_Class)> props
           |}
      // @note: don't definne setupForPropertyEvents; it is inherited from superclass (EV)
      // @note: don't define id on an entity with a super class; it
      // is inherited from the super class
      
  /*
  get-superclass-names(|x_classname) : 
    x_Class -> <get-superclass-names(|x_classname)> super 
    where super := <Extends> x_Class 
        ; rules(SuperclassNames :+= bstm|[ instanceOfTypes#x_classname.add("~super"); ]| )
        */

 strategies

   properties-to-code-pil(|x_Class) :
     props -> cbds
     where 
         cbds1 := <filter-concat-warn(property-to-property-code-pil(|x_Class)
                                        | "cannot generate code for property: ")> props
         ; cbds2 := <name-property-pil(|x_Class) <+ ![]> props
         ; cbd3 := <property-mappings-pil> (x_Class, props)
         ; cbds  := <concat>[cbds1, cbds2, [cbd3]]

  property-mappings-pil :
    (x_class, prop*) -> pil-cbd|[
      pil::db::model::ClassMapping getMapping() {
        var fields = new List<FieldMapping>();
        stat*
        return new pil::db::model::ClassMapping(typeof data::x_class, e_xclass, fields.as<Array<FieldMapping>>);
      }
    ]|    
    with e_xclass := <pil-wrap-string> x_class
       ; stat* := <map(property-to-mapping-pil(|x_class))> prop*

  // 1:N
  property-to-mapping-pil(|x_class) :
    Property(x, _, GenericSort("Set", [SimpleSort(x_s)]), anno*) ->
    pil-stat|[ fields.add(new pil::db::model::OneToManyFieldMapping(e_x, typeof data::x_s)); ]|
    where e_x := <pil-wrap-string> x
       ; <filter(?InverseAnno(_, nm) <+ ?InverseSlaveAnno(_, nm))> anno* 
       ; not([] := <filter(try(normalize); ?Property(nm, _, SimpleSort(_), _))> <all-properties> x_s)

  // N:M
  property-to-mapping-pil(|x_class) :
    Property(x, _, GenericSort("Set", [SimpleSort(x_s)]), anno*) ->
    pil-stat|[ fields.add(new pil::db::model::ManyToManyFieldMapping(e_x, e_relname, typeof data::x_class, typeof data::x_s, e_managing)); ]|
    where e_x := <pil-wrap-string> x
       ; <filter(?managing@InverseAnno(_, nm) <+ ?InverseSlaveAnno(_, nm))> anno* 
       ; not([] := <filter(try(normalize); ?Property(nm, _, GenericSort("Set", _), _))> <all-properties> x_s)
    with if <?InverseAnno(_, _)> managing then
           e_managing := pil-exp|[ true ]|
           ; e_relname := <pil-wrap-string> x
         else
           e_managing := pil-exp|[ false ]|
           ; e_relname := <pil-wrap-string> nm
         end
       ; e_inverse := <pil-wrap-string> nm

  property-to-mapping-pil(|x_class) :
    Property(x, _, SimpleSort("String"), _) -> pil-stat|[ fields.add(new pil::db::model::ValueFieldMapping(e_x, pil::db::type::stringType, 255)); ]|
    with e_x := <pil-wrap-string> x

  property-to-mapping-pil(|x_class) :
    Property(x, _, SimpleSort("Text"), _) -> pil-stat|[ fields.add(new pil::db::model::ValueFieldMapping(e_x, pil::db::type::stringType, 10000)); ]|
    with e_x := <pil-wrap-string> x

  property-to-mapping-pil(|x_class) :
    Property(x, _, SimpleSort("Secret"), _) -> pil-stat|[ fields.add(new pil::db::model::ValueFieldMapping(e_x, pil::db::type::stringType, 255)); ]|
    with e_x := <pil-wrap-string> x

  property-to-mapping-pil(|x_class) :
    Property(x, _, SimpleSort("Int"), _) -> pil-stat|[ fields.add(new pil::db::model::ValueFieldMapping(e_x, pil::db::type::intType, 0)); ]|
    with e_x := <pil-wrap-string> x

  property-to-mapping-pil(|x_class) :
    Property(x, _, srt@SimpleSort(x_s), anno*) -> pil-stat|[ fields.add(new pil::db::model::SimpleReferenceFieldMapping(e_x, typeof data::x_s)); ]|
    where <defined-pil-type> srt; not(<fetch(?InverseAnno(_, _) <+ ?InverseSlaveAnno(_, _))> anno*)
    with e_x := <pil-wrap-string> x

  property-to-mapping-pil(|x_class) :
    Property(x, _, srt@SimpleSort(x_s), anno*) -> pil-stat|[ fields.add(new pil::db::model::ManyToOneFieldMapping(e_x, typeof data::x_s)); ]|
    where <defined-pil-type> srt; <fetch(?InverseAnno(_, _) <+ ?InverseSlaveAnno(_, _))> anno*
    with e_x := <pil-wrap-string> x

 strategies

   name-property-pil(|x_Class) :
     props -> pil-cbd* |[
       String getName(DatabaseSession dbSession) {
         if(x_prop.get(dbSession) != null) {
           return x_prop.get(dbSession).as<String>;
         }
         else {
           return "";
         }
       }
     ]|
     where x_prop := <get-namefield> props
         ; not("id" := x_prop)

   name-property-pil(|x_Class) :
     props -> pil-cbd* |[
       String getName(DatabaseSession dbSession) {
         return id;
       }
     ]|
     where "id" := <get-namefield> props

 rules

   property-to-property-code-pil(|x_Class) :
     prop@Property(mx@x, k, srt@SimpleSort(_), annos) -> pil-cbd* |[

       SimpleValue<t> x = new SimpleValue<t>(this, e_propname, typeof t, e);

     ]|
    where t      := <builtin-pil-type> srt
    with e      := <webdsl-pil-type-default-value> srt
       ; e_propname := <pil-wrap-string> mx

   property-to-property-code-pil(|x_Class) :
     prop@Property(x, k, GenericSort("Set", [srt@SimpleSort(x_s)]), anno*) -> pil-cbd* |[
       OneToMany<t> x = new OneToMany<t>(this, typeof t, e_invpropname);
     ]|
    where t      := <defined-pil-type> srt
       ; <filter(?InverseAnno(_, nm) <+ ?InverseSlaveAnno(_, nm))> anno* 
       ; not([] := <filter(try(normalize); ?Property(nm, _, SimpleSort(_), _))> <all-properties> x_s)
    with e_invpropname := <pil-wrap-string> nm

   property-to-property-code-pil(|x_Class) :
     prop@Property(x, k, GenericSort("Set", [srt@SimpleSort(x_s)]), anno*) -> pil-cbd* |[
       ManyToMany<t> x = new ManyToMany<t>(this, typeof data::x_s, e_invpropname, e_relname);
     ]|
    where t      := <defined-pil-type> srt
       ; <filter(?managing@InverseAnno(_, nm) <+ ?InverseSlaveAnno(_, nm))> anno* 
       ; not([] := <filter(try(normalize); ?Property(nm, _, GenericSort("Set", _), _))> <all-properties> x_s)
    with e_invpropname := <pil-wrap-string> nm
       ; if <?InverseAnno(_, _)> managing then
           e_relname := <pil-wrap-string> x
         else
           e_relname := <pil-wrap-string> nm
         end

   property-to-property-code-pil(|x_Class) :
     prop@Property(mx@x, k, srt@SimpleSort(s), anno*) -> pil-cbd* |[
       SimpleReference<t> x = new SimpleReference<t>(typeof t);
     ]|
    where t      := <defined-pil-type> srt
        ; not(<fetch(?InverseAnno(_, _) <+ ?InverseSlaveAnno(_, _))> anno*)
    with e      := <webdsl-pil-type-default-value> srt
       ; e_propname := <pil-wrap-string> mx

   property-to-property-code-pil(|x_Class) :
     prop@Property(mx@x, k, srt@SimpleSort(s), anno*) -> pil-cbd* |[
       ManyToOne<t> x = new ManyToOne<t>(this, typeof t, e_inverseprop);
     ]|
    where t      := <defined-pil-type> srt
        ; <fetch(?InverseAnno(_, inverseprop) <+ ?InverseSlaveAnno(_, inverseprop))> anno*
    with e      := <webdsl-pil-type-default-value> srt
       ; e_inverseprop := <pil-wrap-string> inverseprop
          
   property-to-property-code-pil(|x_Class) :
     prop@DerivedProperty(x, k, s, annos, e) -> pil-cbd* |[

       t get#x() {
         return e_gettercode;
       }

     ]|
     where t      := <pil-type> s
         ; e_gettercode := <expression-to-pil> e
         
rules // special session entity props

   property-to-session-prop-ids-pil(|x_Class) :
     prop@Property(x, k, s, annos) -> pil-cbd* |[

       String x#ident = "";

     ]|
     where t := <defined-pil-type> s // only succeeds for entity refs

