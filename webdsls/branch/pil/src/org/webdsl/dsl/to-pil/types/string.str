module org/webdsl/dsl/to-pil/types/string

imports 
  libstrategolib 
  libwebdsl-front

/*
rules
  
  builtin-pil-type :
    SimpleSort("String") -> type|[ String ]|

rules

  expression-to-pil :
    String(x) -> expr|[ "~x" ]|

rules 

  pil-element-id : 
    tc@elem|[ inputString(e)[passign*]{} ]| -> tc{InputNumberPil(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  handle-actions-input-to-pil :
    tc@elem|[ inputString(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code> 
    bstm*|[
      ident += "~inputident"+uniqueid;
      if (ps.getParammap().get(ident)!=null) {
      
        ~*<string-length-check-pil(|x_temp,name)>
      
        bstm 
      }
    ]|
    with  inputident := <get-inputnumber-pil> tc
        ; x_temp := <newname> "temp"
        ; name := <pp-webdsl> e
        ; bstm := <input-assignment-to-pil(|x_temp)> e
        
  string-length-check-pil(|x_temp,name) =
    ! bstm* |[
        String x_temp = ps.getParammap().get(ident);
        if(x_temp.length()>255) { //currently the size of string properties in db (varchar(255))
          ps.getConversionErrorMessages().put("~name",x_temp+" is too long");
          x_temp = null;
        }
    ]|
    
  elem-to-pil : 
    tc@elem|[ inputString(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code>
    bstm* |[ 
      String x_temp = ident+"~inputident"+uniqueid;
      out.print("<input name=\""+x_temp+"\" "+e_attrs1+" type=\"text\" value=\"");
      if(inSubmittedForm) {
        out.print(ps.getParammap().get(x_temp));
      } 
      else {
        bstm_exptostring*
      }
      out.print("\" />"); 
    ]|
    with  inputident := <get-inputnumber-pil> tc
        ; bstm_exptostring* := <to-page-string-pil> e
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs-pil> passign*        
    
  elem-to-pil :
    elem |[ outputString(e)[passign*]{} ]| ->
    bstm_exptostring*
    with  bstm_exptostring* := <to-page-string-pil(|"utils.HTMLFilter.filter")> e
    
rules //native java operations    
    
 call-to-pil :
   exp  |[ e.contains(e1) ]| ->   java |[ e2.contains(e3) ]|
   where SimpleSort("String") := <type-of> e
   with  e2    := <expression-to-pil> e
      ;  e3    := <expression-to-pil> e1

 call-to-pil :
   exp  |[ log(e1) ]| ->   java |[ System.out.println(e2) ]|
   where SimpleSort("String") := <type-of> e1
   with  e2 := <expression-to-pil> e1

*/
