module org/webdsl/dsl/to-pil/types/string

imports 
  libstrategolib 
  libwebdsl-front

rules
  
  builtin-pil-type :
    SimpleSort("String") -> pil-type|[ pil::String ]|

rules

  expression-to-pil :
    String(x) -> <pil-wrap-string> x

rules 

  pil-element-id : 
    tc@elem|[ inputString(e)[passign*]{} ]| -> tc{InputNumberPil(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  handle-actions-input-to-pil :
    tc@elem|[ inputString(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat*|[
      ident = ident + e_inputident+uniqueid;
      if (ps.parammap[ident] != null) {
        ~*<string-length-check-pil(|x_temp,name)>
        stat 
      }
    ]|
    with  e_inputident := <get-inputnumber-pil; pil-wrap-string> tc
        ; x_temp := <newname> "temp"
        ; name := <pp-webdsl> e
        ; stat := <input-assignment-to-pil(|x_temp)> e
        
  string-length-check-pil(|x_temp,name) =
    e_name := <pil-wrap-string> name
    ; !pil-stat* |[
        String x_temp = ps.parammap[ident];
        if(x_temp.length > 255) { //currently the size of string properties in db (varchar(255))
          ps.conversionErrorMessages[e_name] = x_temp+" is too long";
          x_temp = null;
        }
      ]|
    
  elem-to-pil : 
    tc@elem|[ inputString(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code-pil>
    pil-stat* |[ 
      String x_temp = ident+e_inputident+uniqueid;
      out.print("<input name=\""+x_temp+"\" "+e_attrs1+" type=\"text\" value=\"");
      if(inSubmittedForm) {
        out.print(ps.parammap[x_temp]);
      } 
      else {
        stat*
      }
      out.print("\" />"); 
    ]|
    with  e_inputident := <get-inputnumber-pil; pil-wrap-string> tc
        ; stat* := <to-page-string-pil> e
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs-pil> passign*        
    
  elem-to-pil :
    elem |[ outputString(e)[passign*]{} ]| ->
    stat*
    with  stat* := <to-page-string-pil(|QId(QId("webdsl", "encoders"), "encodeHTML"))> e
    
rules //native java operations    
    
 call-to-pil :
   exp  |[ e.contains(e1) ]| ->   pil-exp|[ e2.contains(e3) ]|
   where SimpleSort("String") := <type-of> e
   with  e2    := <expression-to-pil> e
      ;  e3    := <expression-to-pil> e1

 call-to-pil :
   exp  |[ log(e1) ]| ->   pil-exp |[ println(e2) ]|
   where SimpleSort("String") := <type-of> e1
   with  e2 := <expression-to-pil> e1

