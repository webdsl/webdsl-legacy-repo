module org/webdsl/dsl/to-pil/code

imports
  libstrategolib

imports
  libwebdsl-front

rules // statements

   statements-to-pil =
     filter-warn(statement-to-pil | "cannot translate statement"); flatten-list

   statement-to-pil =
     block-to-pil
     <+ assignment-to-pil
     <+ vardecl-to-pil
     <+ while-to-pil
     <+ for-to-pil
     <+ if-to-pil
     <+ stat-to-pil
     <+ return-to-pil
     <+ cancel-to-pil
     <+ goto-to-pil
     <+ ajax-to-pil
     <+ info(|["cannot translate statement:", <id>]); fail

   block-to-pil :
     //Block(stm*) ->
     webdsl|[ { stat* } ]| -> pil-stat|[ { stat* } ]|
     with  stat* := <statements-to-pil> stat*

   stat-to-pil :
     Stat(e1) -> pil-stat|[ e2; ]|
     with  e2 := <expression-to-pil> e1

rules // assignment

   assignment-to-pil :
     Stat(Assignment(x, e1)) -> pil-stat|[ x = e2; ]|
     where <is-string> x
         ; not(<is-property> (<ClassName>, x))
         ; e2 := <expression-to-pil> e1

   assignment-to-pil :
     Stat(Assignment(x, e1)) -> pil-stat|[ x_set(e2); ]|
     where <is-property> (<ClassName>, x)
         ; e2 := <expression-to-pil> e1
         ; x_set := <concat-strings>["set", <capitalize-string> x]

  assignment-to-pil :
    Stat(Assignment(Qualified(qid, x), e1)) -> pil-stat|[ e2.setupForPropertyEvents(hibSession,out,ps).set#x(e3); ]|
    where e2 := <assignment-to-pil-exp-helper> qid
        ; e3 := <expression-to-pil> e1
   
  assignment-to-pil-exp-helper:
    x -> pil-exp|[ x ]|
    where not(<?Qualified(_,_)> x)
          
  assignment-to-pil-exp-helper :
    Qualified(e, x) -> pil-exp|[ e1.get#x() ]|
    where e1 := <assignment-to-pil-exp-helper> e

rules // if

   if-to-pil :
     If(e1, bsit1, bsif1) -> pil-stat|[ if(e2) ~bsit2 else ~bsif2 ]|
     with  bsit2 := <statement-to-pil> bsit1
         ; bsif2 := <statement-to-pil> bsif1
         ; e2 := <expression-to-pil> e1

rules // for

   while-to-pil :
     WhileStmt(e1, Block(stat1*)) -> pil-stat|[ while(e2) { stat2* } ]|
     with e2    := <expression-to-pil> e1
        ; stat2* := <statement-to-pil> stat1*

   for-to-pil :
     ForCountStmt(x, e1, e2, stat1) -> pil-stat|[
       {
         Int x = e3; //x has been renamed already
         Int x_bound = e4;
         while(x < x_bound) {
           ~stat2
           x = x + 1;
         }
       }
     ]|
     with x_bound := <newname> "stop"
        ; e3 := <expression-to-pil> e1
        ; e4 := <expression-to-pil> e2
        ; stat2 := <statement-to-pil> stat1

   for-to-pil : // No where clause, with order by clause
     ForStmt(x, s, e1, Filter(True(), obe1, l), stat1) -> 
     pil-stat|[
        {
          var x_lst = new List<t1>(e2);
          x_lst.sort();
          stat1
          ~*<wrap-in-for-loop-pil(|x,t1, pil-exp|[ x_lst ]|)> stat2
        } 
     ]|
     where not(<?OrderAscending(Null())> obe1)
     with  e2 := <expression-to-pil> e1
         ; t1 := <pil-type> s
         ; x_lst := <newname> "lst"
         ; stat2 := <statement-to-pil> stat1
         ; if <?OrderAscending(_)> obe1 then
             stat1 := pil-stat|[ {} ]|
           else
             stat1 := pil-stat|[ x_lst.reverse(); ]|
           end

   for-to-pil : // No where clause, no order by clause
     ForStmt(x, s, e1, Filter(True(), OrderAscending(Null()), l), stat1) -> 
     pil-stat|[
       {
         ~*<wrap-in-for-loop-pil(|x,t1,e2)> stat2
       }
     ]|
     with  e2 := <expression-to-pil> e1
         ; t1 := <pil-type> s
         ; stat2 := <statement-to-pil> stat1

   for-to-pil : // With where clause
     ForStmt(x, s, e1, Filter(we, obe1, l), stat1) ->
     pil-stat|[
       {
         ~*<wrap-in-for-loop-pil(|x,t1,e2)>
         pil-stat|[  
           if(e3){
             ~stat2
           }
         ]|
       }
     ]|
     where not(True() := we)
     with  e2 := <expression-to-pil> e1
         ; e3 := <expression-to-pil> we
         ; t1 := <pil-type> s
         ; t2 := <pil-type> s
         ; stat2 := <statement-to-pil> stat1
         
  for-to-pil : // No where clause, no order by clause
    fas@ForAllStmt(x, srt, fltr@Filter(we, obe, l), Block(stat*)) ->
    pil-stat* |[
      List<Object> x_list = e_criteria.list();
      ~*<wrap-in-for-loop-pil(|x,t,pil-exp|[ x_list ]|)>
      pil-stat|[  
        if(e2) {
          stat*
        }
      ]|
    ]|
    with  stat*   := <statements-to-pil> stat*
        ; t       := <pil-type> srt
        ; e_criteria := <pil-forall-criteria> (fas, t, fltr)
        ; e2 := <expression-to-pil> we
        ; x_list := <newname> "list"

rules // return

  return-to-pil :
    Return(e1) -> pil-stat* |[ 
      out.println("{ action: \"relocate\", value: \""+e_url+"\" },\n");
      ps.clearHibernateCache(variables);
      return;
    ]|
    where InAction; IsAjaxApp
    with  e_url := <page-thiscall-to-url-string-pil> e1

  return-to-pil :
    Return(e1) -> pil-stat* |[ 
      response.redirect(e_url);
      ps.clearHibernateCache(variables);
      return;
    ]|
    where InAction; not(IsAjaxApp)
    with  e_url := <page-thiscall-to-url-string-pil> e1

  return-to-pil :
    ReturnEmpty() -> pil-stat* |[ 
      ps.clearHibernateCache(variables);
      return;
    ]|
    where InAction 

  return-to-pil :
    Return(e1) -> pil-stat|[ return e2; ]|
    where InFunction
    with  e2 := <expression-to-pil> e1

  cancel-to-pil :
    Cancel(e1) -> pil-stat* |[ println("ugly cancel not implemented"); ]|

  goto-to-pil :  // similar to navigate link code in elements-to-java-servlet
    GoTo(call@ThisCall(p, args)) -> pil-stat* |[ 
      out.println("{ action: \"relocate\", value: \""+e_url+"\" },\n");
      ps.clearHibernateCache(variables);      
      return;
    ]|
    where IsAjaxApp
    with  e_url := <page-thiscall-to-url-string-pil> call
     
  goto-to-pil :  // similar to navigate link code in elements-to-java-servlet
    GoTo(call@ThisCall(p, args)) -> pil-stat* |[ 
      response.redirect(e_url);
      ps.clearHibernateCache(variables);
      return;
    ]|
    where not(IsAjaxApp)
    with  e_url := <page-thiscall-to-url-string-pil> call
       
rules

   qid-to-pil :
     Qualified(qid, x) -> pil-exp|[ e.x_get() ]|
     with  x_get := <concat-strings>["get", <capitalize-string> x]
         ; e := <qid-to-pil> qid

   qid-to-pil :
     x -> pil-exp|[ x ]|
     where <is-string> x

   // @note : this is compensating for an erroneous annotation of component
   // accessess
   qid-to-pil :
     FieldAccess(Var(x),y) -> pil-exp|[ this.y ]|
     where
         "Component" := <type-of> Var(x)

   vardecl-to-pil :
     VarDeclInit(x, s, e1) -> pil-stat|[ t x = e2; ]|
     where t := <pil-type> s
         ; e2 := <expression-to-pil> e1

   vardecl-to-pil :
     VarDecl(x, s) -> pil-stat|[ t x = e; ]|
     where t := <pil-type> s
         ; e := <pil-type-default-value> s

rules // expressions
   expression-to-pil :
     Cast(e1, s) -> pil-exp|[ (t)e2 ]|
     //CastRef(t, java|[ e2 ]|)
     with  e2 := <expression-to-pil> e1
         ; t := <pil-type> s

   expression-to-pil :
     InColl(e1, e2) -> pil-exp|[ e4.contains(e3) ]|
     with  e3 := <expression-to-pil> e1
         ; e4 := <expression-to-pil> e2

   expression-to-pil :
     Add(x, y) -> pil-exp|[ ~xt + ~yt ]|
     with  xt := <expression-to-pil> x
         ; yt := <expression-to-pil> y

   expression-to-pil :
     Sub(x, y) -> pil-exp|[ ~xt - ~yt ]|
     with  xt := <expression-to-pil> x
         ; yt := <expression-to-pil> y

   expression-to-pil :
     Mul(x, y) -> pil-exp|[ ~xt * ~yt ]|
     with  xt := <expression-to-pil> x
         ; yt := <expression-to-pil> y

   expression-to-pil :
     Div(x, y) -> pil-exp|[ ~xt / ~yt ]|
     with  xt := <expression-to-pil> x
         ; yt := <expression-to-pil> y

   expression-to-pil :
     Mod(x, y) -> pil-exp|[ ~xt % ~yt ]|
     with  xt := <expression-to-pil> x
         ; yt := <expression-to-pil> y

   expression-to-pil :
     Eq(x, y) -> pil-exp|[ webdsl::tools::utils::equal(e_x,e_y) ]|
     with  e_x := <expression-to-pil> x
         ; e_y := <expression-to-pil> y

   expression-to-pil :
     NotEq(x, y) -> pil-exp|[ !webdsl::tools::utils::equal(e_x,e_y) ]|
     with  e_x := <expression-to-pil> x
         ; e_y := <expression-to-pil> y

   expression-to-pil :
     LargerThan(x, y) -> pil-exp|[ e_x > e_y ]|
     with  e_x := <expression-to-pil> x
         ; e_y := <expression-to-pil> y

   expression-to-pil :
     LargerThanOrEqual(x, y) -> pil-exp|[ e_x >= e_y ]|
     with  e_x := <expression-to-pil> x
         ; e_y := <expression-to-pil> y

   expression-to-pil :
     SmallerThan(x, y) -> pil-exp|[ e_x < e_y ]|
     with  e_x := <expression-to-pil> x
         ; e_y := <expression-to-pil> y

   expression-to-pil :
     SmallerThanOrEqual(x, y) -> pil-exp|[ e_x <= e_y ]|
     with  e_x := <expression-to-pil> x
         ; e_y := <expression-to-pil> y

   expression-to-pil :
     Not(e1) -> pil-exp|[ !e2 ]|
     with  e2 := <expression-to-pil> e1

   expression-to-pil :
     And(x, y) -> pil-exp|[ ~xt && ~yt ]|
     with  xt := <expression-to-pil> x
         ; yt := <expression-to-pil> y

   expression-to-pil :
     Or(x, y) -> pil-exp|[ ~xt || ~yt ]|
     with  xt := <expression-to-pil> x
         ; yt := <expression-to-pil> y

rules

  expression-to-pil :
    IsA(x, s@SimpleSort(x_name)) -> pil-exp|[ e instanceof t ]|
    with t := <pil-type> s

rules

   expression-to-pil : 
     ObjectCreation(srt, assigns) -> //TODO use desugaring similar to set/list creation
     pil-exp|[
        {| t x_var = new t(); stat* stat_event* | x_var |}
     ]|
     with  x_var := <newname> "var"
         ; stat* := <filter-warn(field-assign-to-pil(|x_var)| "cannot translate asssignment")> assigns
         ; stat_event* := <entity-stat-constructor-entity-event-to-pil> (srt, x_var)
         ; t := <pil-type> srt
     
   field-assign-to-pil(|x_var) :
     ObjectPropertyAssignment(y_field, e1) -> pil-stat|[ x_var.set#y(e2); ]|
     with  e2 := <expression-to-pil> e1
     
rules //vars     

   expression-to-pil =
      var-to-pil

   var-to-pil :
     Var(x) -> pil-exp|[ x ]|
     
   var-to-pil :
     ExternalScopeVar(x) -> pil-exp|[ this.x ]|

   expression-to-pil =
   field-access-to-pil
   <+ generic-field-access-to-pil
   
   generic-field-access-to-pil :
     FieldAccess(e1, x) -> pil-exp|[ e2.x ]|
     with e2 := <expression-to-pil> e1

   expression-to-pil =
     call-to-pil
     <+ generic-call-to-pil

   generic-call-to-pil :
     Call(e1, x, e2*) -> pil-exp|[ e3.x(dbConn, variables, e4*, ps, out) ]|
     with  e3 := <expression-to-pil> e1
         ; e4* := <map(expression-to-pil)> e2*

   generic-call-to-pil :
     tc@ThisCall(x, e1*) -> result
     with  e2* := <map(expression-to-pil)> e1*
 //      ; if ent := <JavaInEntity> then //if the call is inside an entity (entity function)
         ; if (ent := <get-this-call-parent> tc) <+ (ent := <PilInEntity>) then //checkif the call is inside an entity (entity function), however one condition should sufice...!
             if <CheckFunctionSignature> (ent, x, <map(type-of)> e1*)// and the call could be to an entity function of that same entity
             then
               result := pil-exp|[ this.x(dbConn,variables,e2*, ps, out) ]| // then add this.
             else
               result := pil-exp|[ globalFunctions::x(dbConn,variables,e2*, ps, out) ]|
             end
           else
             {| PredicateFoundInCall:
             t2* := <map(type-of)> e1*
           ; x1 := <strip-annos> x
           ; if 
               <IsPredicate> (x1,t2*)
             ; not(PredicateFoundInCall)
             then
               rules(PredicateFoundInCall := True())
             ; result := <add-not-null-checks;expression-to-pil> tc
             else
               result := pil-exp|[ globalFunctions::x(hibSession,variables,e2*, ps, out) ]|
             end
             |}
           end
