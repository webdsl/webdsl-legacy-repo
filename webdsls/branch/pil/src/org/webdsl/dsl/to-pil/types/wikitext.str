module org/webdsl/dsl/to-pil/types/wikitext

imports 
  libstrategolib 
  libwebdsl-front
  
  /*
rules

  builtin-pil-type :
    SimpleSort("WikiText") -> type|[ String ]|

  builtin-persistence-annotations :
    SimpleSort("WikiText") -> [anno|[ @Column(length = 1000000) ]|]  
  
rules 
  pil-element-id : 
    tc@elem|[ inputWikiText(e)[passign*]{} ]| -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  handle-actions-input-to-pil :
    tc@elem|[ inputWikiText(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code> 
    bstm*|[
          
        ident += "~inputident"+uniqueid;
        
        if(ps.getParammap().get(ident)!=null)
        {
            ~*<text-length-check-pil(|x_temp,name)>
            bstm 
        }
      
    ]|
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; name := <pp-webdsl> e
        ; bstm := <input-assignment-to-pil(|x_temp)> e
    
  elem-to-pil : 
    tc@elem|[ inputWikiText(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code>
    bstm* |[ 
    String x_temp = ident+"~inputident"+uniqueid;
    out.print("<textarea name=\""+x_temp+"\" class=\"inputTextarea\" >");
    if(inSubmittedForm)
    {
      out.print(ps.getParammap().get(x_temp));
    }
    else
    {
      bstm_exptostring*
    }
    out.print("</textarea>"); 
    ]|
    with  inputident := <get-inputnumber> tc
        ; bstm_exptostring* := <to-page-string-pil> e
        ; x_temp := <newname> "temp"
    
  elem-to-pil :
    elem |[ outputWikiText(e)[passign*]{} ]| ->
    bstm_exptostring*
    with  bstm_exptostring* := <to-page-string-pil(|"org.webdsl.tools.WikiFormatter.wikiFormat",expr |[ "/"+utils.AppInfo.getAppName() ]|)> e
  
  */
