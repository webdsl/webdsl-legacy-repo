module org/webdsl/dsl/to-pil/base-page

imports
  libstratego-lib

imports
  libwebdsl-front

rules
  /**
   * Generate base bean code
   */
  GenerateCodePil = generate-pil-base-page; fail

  generate-pil-base-page :
    Application(qid, sections) ->
    <map(pil-emit)> pil-decl*|[
      
      Map<String, pil::reflect::Class> templates = new Map<String, pil::reflect::Class>();
      Map<String, pil::reflect::Class> emails = new Map<String, pil::reflect::Class>();

      void initTemplates() {
        stm_templates*
        stm_pages*
        stm_emails*
        GlobalInit.load();
      }

      @abstract
      class utils::PageServlet {
          void serve(pil::web::Request request, pil::web::Response response, Map<String, String> parammap, Map<String, List<String>> parammapvalues, Map<String,utils::File> fileUploads) {
            // dummy
          }
          
          String getPageName() { return null; }
          
          String getHiddenParams() { return null; }
          String getHiddenPostParams() { return null; }
          
          pil::web::Session session = null;
          
          Map<String, Object> variablesGlobalAndSession = null;

          String getAbsoluteLocation() {
            //String[] req = request.getRequestURL().toString().split("~<concat-strings> [<AppRoot>, "/"]");
            //return req[0];
            return "http://someplace.com";
          }
          
          //conversion error messages
          Map<String,String> conversionErrorMessages = new Map<String, String>();

          Bool hasExecutedAction = false;
          
          cbd
          
          void serveAsAjaxResponse(utils::PageServlet ps, pil::utils::PrintWriter theoutStream, Array<Object> ajaxarguments) {}
          
          List<String> ignoreset = new List<String>();
          
          Bool dbCacheCleared = false;
          
          void clearHibernateCache(Map<String, Object> variables) { 
            if(variables["_persist_flag_"] == false) { 
              dbCacheCleared = true;
              Set<String> variables_set = variables.keys;
              var dbSession = pil::db::getSession();
              for(String s : variables_set) {
                if(s != "_persist_flag_" && session[s] == null && !ignoreset.contains(s) && variables[s] instanceof webdsl::WebDSLEntity) {
                    Object o = variables[s];
                    try {
                       dbSession.refresh(o);
                    }
                    catch(Exception e) {
                       //System.out.println("clearHibernateCache needs fix: "+ex.toString()); 
                    }
                }
              }
            }
          }
          
          // atm just used for captcha check
          Bool validated=true;
          pil::db::DatabaseSession dbSession = null;
          pil::web::Request request = null;
          pil::web::Response response = null;
          Array<Object> args = null;
          
          Map<String, String> parammap = null;
          Map<String,utils::File> fileUploads = null;
          Map<String, List<String>> parammapvalues = null;
          String pageTitle ="";
          
          utils::File download = null;

          /*
          void download()
          { 
            try
            { 
              javax.servlet.ServletOutputStream outstream;
          
              outstream = response.getOutputStream();
              
              java.sql.Blob blob = download.getContent();
              java.io.InputStream in;
          
              in = blob.getBinaryStream();
              response.setContentType(download.getContentType());
              response.setHeader("Content-Disposition", "attachment; filename=" + download.getFileName());
              java.io.BufferedOutputStream bufout = new java.io.BufferedOutputStream(outstream);
              byte bytes[] = new byte[32768];
              int index = in.read(bytes, 0, 32768);
              while(index != -1)
              { 
                bufout.write(bytes, 0, index);
                index = in.read(bytes, 0, 32768);
              }
              bufout.flush();
            }
            catch(java.sql.SQLException ex)
            { 
              System.out.println("exception in download serve");
              ex.printStackTrace();
            }
            catch (IOException ex) {
              System.out.println("exception in download serve");
              ex.printStackTrace();
            }
          }
          */
        }
      ]|
    with 
         stm_templates* := <map({\ 
                           x -> pil-stat|[ templates["~key"] = e_value; ]| 
                           with key := <concat-strings> ["\"",x,"\""]
                              ; x_tlcn := <TopLevelTemplateClassNamePil> x
                              ; e_value := pil-exp|[ reflect::typeOf#x_tlcn() ]|
                           \})> 
                       <bagof-AllTopLevelTemplateNamesPil>
       ; stm_pages* := <map({\ 
                           x -> pil-stat|[ templates["~key"] = e_value; ]| 
                           with key := <concat-strings> ["\"",x,"\""]
                              ; x_pcn := <PageClassNamePil> x
                              ; e_value := pil-exp|[ reflect::typeOf#x_pcn() ]|
                       \})> 
                       <bagof-AllPageNamesPil>
       ; stm_emails* := <map({\ 
                           x -> pil-stat|[ emails["~key"] = e_value; ]| 
                           with key := <concat-strings> ["\"",x,"\""]
                              ; x_ecn := <PageClassNamePil> x
                              ; e_value := pil-exp|[ reflect::typeOf#x_ecn() ]|
                       \})> 
                       <bagof-AllEmailNamesPil>
       ;if IsAjaxApp 
        then cbd := pil-cbd|[  Bool isAjaxApp = true; ]|
        else cbd := pil-cbd|[  Bool isAjaxApp = false; ]|
        end
