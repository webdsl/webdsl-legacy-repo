module org/webdsl/dsl/to-pil/types/text

imports 
  libstrategolib 
  libwebdsl-front
  
rules

  builtin-pil-type :
    SimpleSort("Text") -> pil-type|[ String ]|

  builtin-persistence-annotations :
    SimpleSort("Text") -> [pil-anno|[ @pil::db::field::text ]|]  
  
rules 
  pil-element-id : 
    tc@elem|[ inputText(e)[passign*]{} ]| -> tc{InputNumber(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  handle-actions-input-to-pil :
    tc@elem|[ inputText(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat*|[
          
        ident.append("~inputident"+uniqueid);
        
        if(ps.parammap[ident] != null)
        {
            ~*<text-length-check-pil(|x_temp,name)>
            stat 
        }
      
    ]|
    with  inputident := <get-inputnumber> tc
        ; x_temp := <newname> "temp"
        ; name := <pp-webdsl> e
        ; stat := <input-assignment-to-pil(|x_temp)> e
        
  text-length-check-pil(|x_temp,name) =
    ! pil-stat* |[
        String x_temp = ps.parammap[ident];
        if(x_temp.length>1000000) {
          ps.getConversionErrorMessages().set("~name",x_temp+" is too long");
          x_temp = null;
        }
      ]|
    
  elem-to-pil : 
    tc@elem|[ inputText(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code-pil>
    pil-stat* |[ 
    String x_temp = ident+"~inputident"+uniqueid;
    out.print("<textarea name=\""+x_temp+"\" "+e_attrs1+" class=\"inputTextarea\" >");
    if(inSubmittedForm)
    {
      out.print(ps.parammap[x_temp]);
    }
    else
    {
      stat_exptostring*
    }
    out.print("</textarea>"); 
    ]|
    with  inputident := <get-inputnumber> tc
        ; bstm_exptostring* := <to-page-string-pil> e
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs> passign*        
    
  elem-to-pil :
    elem |[ outputText(e)[passign*]{} ]| ->
    pil-stat* |[ 
      webdsl::markdown::MarkdownProcessor x_temp = new webdsl::markdown::MarkdownProcessor();
      stat_exptostring*
    ]|
    with  x_temp := <newname> "temp"
        ; stat_exptostring* := <to-page-string-pil(|<concat-strings>[x_temp,".markdown"])> e
 
