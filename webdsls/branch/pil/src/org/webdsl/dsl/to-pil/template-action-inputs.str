module org/webdsl/dsl/to-pil/template-action-inputs

imports
  libstratego-lib

imports
  libwebdsl-front
  
/*
rules
  filter-elements-for-pil-handling =
    topdown(try(remove-all(?Define(_, _, _, _))))

rules

  GenerateCodeJavaServlet = where(not(ThisEmailPil));actions-inputs-pil-template; fail
  
  actions-inputs-pil-template =
    ?def |[ define mod* x(farg*) { elem* } ]|
    ; where (    
      bstm1* := <  filter-elements-for-pil-handling
                 ; map-handle-actions-input-to-pil> elem*
      ; not(bstm1* := []))
    ; with(
      <generate-pil-template-partial> 
        java |[ 
            @Partial
            private void storeInputsInternal() {
              String ident = "";
              int forelementcounter = 0;
              boolean inForLoop=false;
              int forLoopCounter = 0;
                
              bstm1*          
            }
        ]|)
 
//coming from elements to xhtml
strategies // lists of elements

  map-handle-actions-input-to-pil= //alltd because only interested in control flow
    collect-om(handle-actions-input-to-pil)
    ; concat-with-sublists //accept both bstm and bstm*
    
*/
rules // copy from input string to variable in template class, eg see /types/int.str
  
  input-assignment-to-pil(|x_temp) :
    Var(x) -> pil-stat|[ x = x_temp; ]|     

  input-assignment-to-pil-exp:
    Var(x) -> pil-exp|[ x ]|

  input-assignment-to-pil(|x_temp) :
    FieldAccess(e, x) -> pil-stat|[ e1.setupForPropertyEvents(dbSession,out,ps).x = x_temp; ]|
    where e1 := <input-assignment-to-pil-exp> e
          
  input-assignment-to-pil-exp :
    FieldAccess(e, x) -> pil-exp|[ e1.x ]|
    where e1 := <input-assignment-to-pil-exp> e
