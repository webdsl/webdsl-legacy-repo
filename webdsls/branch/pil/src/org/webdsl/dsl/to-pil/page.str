 module org/webdsl/dsl/to-pil/page

imports
  libstratego-lib

imports
  libwebdsl-front

rules
  
  pil-page-name :
    x -> <concat-strings> [x1,"Page"]
    with  x1     := <capitalize-string> x

rules

  generate-pil-partial =
    ? cbds
    ; x_Page := <ThisPagePil; pil-page-name>
    //also allow a single class-body-declaration
    ; with (
      if <is-list> cbds then cbd* := cbds else cbd* := [cbds] end
      ; <pil-emit>
          pil-decl|[
            class page::x_Page {
              cbd*
            }
          ]|
    ) 

rules
  /**
   * Generate base bean code
   */
  GenerateCodePil = generate-pil-page; fail

  generate-pil-page :
    def|[ define mod* x_page (farg*) { elem* } ]| ->
    <pil-emit> pil-decl|[
        class page::x_Page extends utils::PageServlet
        {
          Map<String, Object> variables = new Map<String, Object>();
          Map<String, Object> actionclasses = new Map<String, Object>();
        
          void initialize(){}   
        
          void conversion(){}     
          
          void loadArguments () {}//previously argumentInitialize
         
          String getPageName()
          {
            return e_pagename;
          }
          

          void hiddenParams(MutableString combinedparams){}
          
          String getHiddenParams()
          {
            var hiddens = new MutableString();
            hiddenParams(hiddens);
            return hiddens.toString();
          }
          
          void hiddenPostParams(MutableString combinedparams){}
          
          String getHiddenPostParams()
          {
            var hiddens = new MutableString();
            hiddenPostParams(hiddens);
            return hiddens.toString();
          }
          
          t_specialpagetemplate templateservlet = new t_specialpagetemplate();
          
          void serve(webdsl::Request request, webdsl::Response response, Map<String, String> parammap, Map<String, List<String>> parammapvalues, Map<String,webdsl::util::File> fileUploads)
          {
            this.request=request;
            this.response=response;
            this.parammap = parammap;
            this.parammapvalues = parammapvalues;
            this.fileUploads=fileUploads;
            session = request.getSession();
            
            dbConn = webdsl::db::getSession();
    
            // hibSession.beginTransaction();
            try {	
              //very dirty and most ugly hibernate hack
              this.variables["_persist_flag_"] = false;
              
              initialize();
              variablesGlobalAndSession = (Map<String, Object>)variables.clone();
              conversion();
              loadArguments();
               
              Array<Object> args = new Array<Object>(e*);
              this.args = args;
              
              //call special pagetemplate
              
              templateservlet.storeInputs(this, args, 1, (Map<String,pil::reflect::Class>)application::templates.clone(),variables,actionclasses);
              
              var s = new webdsl::util::StringWriter();
              if(validated) {
                templateservlet.handleActions(this, args, 1, (Map<String,pil::reflect::Class>)application::templates.clone(),variables,actionclasses, s);
              }
              if ( ( !this.hasExecutedAction || dbCacheCleared ) && !isAjaxApp) {
                render(request,response);
              }
              if (isAjaxApp) {
                response.getWriter().print("[" + s.toString()+ "{}]");
              }
              storeSessionEntities();
              
              dbConn.commit();
    
            }	
            catch (Exception ex) {
              println("exception occured: "+ex.toString());
              //ex.printStackTrace();
              dbConn.rollback();
              
              throw new Exception("serve page request failed");
            }   
          }
          
          void storeSessionEntities(){}     
        
          void render(webdsl::Request request,
                      webdsl::Response response) {
            this.request=request;
            this.response=response;
        
            var s = new webdsl::util::StringWriter();
                
            //call special pagetemplate render
            templateservlet.render(this, args, 1,(Map<String,pil::reflect::Class>)application::templates.clone(),variables,actionclasses,s);
            
            /* TODO: Re-enable this
            if(download != null) { 
              download();
            }

            else {
              */
              
              response.setContentType("text/html");
              
              var sout = response.getWriter();
              sout.println("<html>");
              sout.println("<head>");
              sout.println("<title>"+webdsl::encoders::eliminateTags(getPageTitle())+"</title>");
              
              sout.println("<link href=\"/"+application::appName+"/stylesheets/common_.css\" rel=\"stylesheet\" type=\"text/css\" />");
              sout.println("<link href=\"/"+application::appName+"/stylesheets/dropdownmenu.css\" rel=\"stylesheet\" type=\"text/css\" />");
              stat1*

              sout.println("<script src=\"/"+application::appName+"/javascript/dropdownmenu.js\" type=\"text/javascript\"></script>");
              sout.println("<script src=\"/"+application::appName+"/javascript/ajax.js\" type=\"text/javascript\"></script>");
              sout.println("<script type=\"text/javascript\">window.onload = function () { init_dropdownmenu(); }</script>");
             
              sout.println("</head>");
              sout.print("<body>");
              
              //s.flush();
              sout.print(s.toString());
              
              sout.print("</body>");
              sout.println("</html>");
            //}
                  
          }
        }
      ]|
    where x_page    := <ThisPagePil>
    with x_Page     := <pil-page-name> x_page
       ; e_pagename := StringLit(String([Chars(x_page)]))
       ; t_specialpagetemplate := SimpleType(QId("template", <ThisTemplateClassNamePil>))
       ; e* := <filter({\arg@farg|[ x : srt ]| -> pil-exp|[ x ]| \})> farg* //just pass args of page to special pagetemplate
       ; stat1* :=  <map({\ 
                           x -> pil-stat|[ sout.println("<link href=\"/"+application::appName()+"/stylesheets/"+"~x"+".css\" rel=\"stylesheet\" type=\"text/css\" />"); ]| 
                         \})> 
                         <concat;make-set> [<bagof-AllStylesheets>,<bagof-StyleSheetsAllPages>]
                         
