module org/webdsl/dsl/to-pil/email/email

imports
  libstratego-lib
  libwebdsl-front
    
/*
rules
  
  call-to-pil :
    tc@ThisCall("email", [e@ThisCall(x_name, args)])->   //java |[ "email call" ]|
    //tc@TemplateCall(x_name, args,passign*, _) ->
    expr |[
    {|
      Object[] x_args = { e* };
    |
      ((EmailServlet)(ps.getEmails().get("~x_name").newInstance())).render(ps, x_args, ++templatecounter, (HashMap<String,Class>)templates.clone(),(HashMap<String,Object>)variables.clone(),(HashMap<String,Object>)actionclasses.clone(), out)
    |}
    ]|
    with  e* := <map(expression-to-pil)> args
        ; x_args := <newname> "args"

  elem-to-pil:
    elem|[ to(e)[passign*]{} ]| -> bstm |[ this.receivers = e1;  ]|
    with  e1 := <expression-to-pil> e

  elem-to-pil:
    elem|[ subject(e)[passign*]{} ]| -> bstm |[ this.subject = e1;  ]|
    with  e1 := <expression-to-pil> e

  elem-to-pil:
    elem|[ from(e)[passign*]{} ]| -> bstm |[ this.sender = e1;  ]|
    with  e1 := <expression-to-pil> e
    
 // elem-to-pil:
  //  elem|[ body(e)[passign*]{} ]| -> []
  */
