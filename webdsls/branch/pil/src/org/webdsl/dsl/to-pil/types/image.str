module org/webdsl/dsl/to-pil/types/image

imports 
  libstrategolib 
  libwebdsl-front

/*
rules // types

  builtin-java-type :
    SimpleSort("Image") -> type|[ utils.File ]|

  //used in entity generation
  //hibernate has a built-in mapping for java.sql.Blob
  type-specific-annotations :
    Property(x_prop, k, s, annos) -> <file-specific-annotations>
    where <?SimpleSort("Image")> s

rules

  requires-multipart-encoded-form = ?TemplateCall("inputImage",_,_,_) //?elem|[inputImage(e)[passign*]{}]|
  
  handle-actions-input-to-pil :
    tc@elem|[ inputImage(e)[passign*]{} ]| -> <handle-actions-input-to-pil> TemplateCall("inputFile", [e], passign*, []){anno*} //stratego bug: cannot add annotations with concrete syntax
    where _{anno*} := tc
   
  elem-to-pil :
    tc@elem|[ inputImage(e)[passign*]{} ]| -> <elem-to-pil> TemplateCall("inputFile", [e], passign*, []){anno*} //stratego bug: cannot add annotations with concrete syntax
    where _{anno*} := tc
    
  pil-element-id : 
    tc@elem|[ inputImage(e)[passign*]{} ]| -> <pil-element-id-template-call> tc

  //for displaying images, modified action call is used, the src of the image needs to be a call to the page with the arguments that invoke a download action
   
  pil-element-id : 
    tc@elem|[ outputImage(e,e1)[passign*]{} ]| -> <pil-element-id-template-call> tc
     
  elem-to-pil :
    tc@TemplateCall("outputImage",[e2,ThisCall(name, args)],passign*,[]) ->
    <for-loop-counter-wrap-code> 
    bstm* |[ 
    //out.print("<img alt=\""+e4+"\" "+e_attrs1+" src='javascript:serverInvokeGetImage(\""+"~app"+"/" + ps.getPageName()  +"\",\""+ "~tcident"+ident+e5 +"\", \""+ps.getHiddenPostParams()+"\", this)' >");
    ident += "~tcident"+e5 ;
    out.print("<img alt=\"");
    bstm_exptostring*
    out.print("\" "+e_attrs1+" src='"+"~app"+"/" + ps.getPageName()  +"?"+ ident +"=1&"+ps.getHiddenPostParams()+"' >");
    out.print("</img>");
    ]|
    with  tcident := <get-inputnumber> tc   
        ; e_attrs1 := <to-html-attrs> passign* 
        ; bstm_exptostring* := <to-page-string-pil> e2      
        ; e5 := <actual-action-args-to-state-enc> args
        ; app := <AppRoot>
        
  handle-actions-to-pil: 
    tc@TemplateCall("outputImage",[e2,ThisCall(x_name, args)],passign*,[]) ->
    <for-loop-counter-wrap-code> 
    bstm*|[
        ident += "~tcident"+e5;
        if(ps.getParammap().get(ident)!=null)
        {
            x_name temp = (x_name)actionclasses.get("~x_name");
            temp.x_name(e*);
        }
    ]|
    with  tcident := <get-inputnumber> tc   
        ; e* := <map(expression-to-pil)> args
        ; e5 := <actual-action-args-to-state-enc> args

rules //image download   
    
  call-to-pil :
    exp|[ e.download() ]| -> java|[ ps.setDownload(e2) ]|
    where SimpleSort("Image") := <type-of> e
    with  e2 := <expression-to-pil> e
    
  call-to-pil :
    exp  |[ e.fileName() ]| -> java |[ e2.getFileName() ]|
    where SimpleSort("Image") := <type-of> e
    with  e2 := <expression-to-pil> e
    */
