module org/webdsl/dsl/to-pil/global-functions

imports
  libstratego-lib

imports
  libwebdsl-front

rules

  GenerateCodePil = generate-pil-global-functions; fail

  generate-pil-global-functions =
    ?Application(qid, sections)
    ; with( <map(webdsl-function-to-pil-function)> <AllGlobalFunctions> )
    /*<emit-pil> pil-decl|[
      class utils::GlobalFunctions {
        cbd*
      }
    ]|
    where not([] := <AllGlobalFunctions>) // fails if there are no global funcs, won't generate anything then
    with  pkgname    := <BeanPackage>
        ; pkgname2   := <DomainPackage>
        */
              
  webdsl-function-to-pil-function:
    function@Function(x, args, s, Block(stm*)) -> 
    <pil-emit> pil-decl|[
      t globalFunctions::x(pil::db::DatabaseSession dbSession, Map<String, Object> variables, farg*, utils::PageServlet ps, webdsl::util::StringWriter out)  {
        try {
          stat1*
          stat2*
          stat*
          //stat3*
        } catch(Exception excep) {
          throw new Exception(excep);
        }
      }
    ]|
    with  {| InFunctionPil
            : rules( InFunctionPil := <id> )
            ; t      := <pil-type> s
            ; farg* := <map(arguments-to-pil)> args
            ; stat*  := <statements-to-pil> stm*
            ; stat1* := <get-global-vars-into-pil-function>
            ; stat2* := <get-session-vars-into-pil-function>
            /* @TODO figure this out
            ; if InEntityPil
              then mod* := []
              else mod* := [ mod|[static]| ] end  
            */
            /*
            ; if SimpleSort("Void") := s   //TODO simply make this a void function instead of return int
              then stat3* := [pil-stat|[ return 0; ]| ]
              else stat3* := [] end
            */
            |}
            
  get-global-vars-into-pil-function=
    <map(get-global-vars-into-pil-function-helper)> <AllGlobalVars>
  
  get-global-vars-into-pil-function-helper:
    elem |[ var x : srt := e ]| -> pil-stat|[ t x = variables[e_x].as<t>; ]| 
    with t := <pil-type> srt
       ; e_x := <pil-wrap-string> x

  get-session-vars-into-pil-function=
    <map(get-session-vars-into-pil-function-helper)> <SessionEntities>
   
  get-session-vars-into-pil-function-helper:
    def|[ session x { prop* fun* } ]| -> pil-stat|[ t x = variables[e_x].as<t>; ]| 
    with  x_ent := <capitalize-string> x
        ; t := pil-type |[ entity::x_ent ]|
        ; e_x := <pil-wrap-string> x
