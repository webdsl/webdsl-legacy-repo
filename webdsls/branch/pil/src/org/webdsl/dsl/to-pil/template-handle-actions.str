module org/webdsl/dsl/to-pil/template-handle-actions

imports
  libstratego-lib

imports
  libwebdsl-front

rules

  GenerateCodePil = where(not(ThisEmailPil));handle-actions-pil-template; fail
  
  handle-actions-pil-template =
    ?def |[ define mod* x(farg*) { elem* } ]|
    ; where (    
      stat1* := <filter-elements-for-pil-handling; map-handle-actions-to-pil> elem*
      ; not(stat1* := []))
    ; with(
      <generate-pil-template-partial> 
        pil-cbd|[ 
            @extend
            void handleActionsInternal()
            {
              String ident = "";
              Int forelementcounter = 0;
              Bool inForLoop=false;
              Int forLoopCounter = 0;
                
              stat1*          
            }
        ]|)
 
//coming from elements to xhtml
strategies // lists of elements

  map-handle-actions-to-pil= //alltd because only interested in control flow
    collect-om(handle-actions-to-pil)
    ; concat-with-sublists //accept both bstm and bstm*

  actual-action-args-to-state-enc-pil = 
    filter(action-id-param-encoding-pil)
    ; generate-addition-exp-pil
  
  action-id-param-encoding-pil :
    e -> el
    where <type-of;defined-pil-type> e; not(GenericSort(_,_) := <type-of> e)
    with  el := <expression-to-pil> FieldAccess(e, "id")

  action-id-param-encoding-pil :
    e -> el
    where GenericSort(_,[x]) := <type-of> e; <defined-pil-type> x
    with //e2 := <to-page-string-pil> e 
        e2 := <expression-to-pil> e
      ; el := pil-exp|[ webdsl::encoder::encodeIdList(e2) ]| 

    
   // go through ast if form found, check formid , if button pressed , storinputs ,apply action
   // see control-flow-to-pil and elements-to-java-servlet (form) and types/* (handle-action(-input) strategies)
