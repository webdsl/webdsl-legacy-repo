module org/webdsl/dsl/to-pil/types/int

imports 
  libstrategolib 
  libwebdsl-front
  
rules

  builtin-pil-type :
    SimpleSort("Int") -> pil-type|[ pil::Int ]|
    
rules 

   expression-to-pil :
     Int(x) -> Int(x)
  
rules
    
  pil-element-id :
    tc@elem|[ inputInt(e)[passign*]{} ]| -> tc{InputNumberPil(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"
          
  //load the input string and try to convert it to int, insert null if it fails and specify an error
  handle-actions-input-to-pil :
    tc@elem|[ inputInt(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code-pil> 
    pil-stat*|[
          
        ident = ident + e_inputident +uniqueid;
        
        if(ps.parammap[ident]!=null)
        {
            String name = ps.parammap[ident];

            Int x_temp = 0;
            
            if(!webdsl::util::stringMatches(name, "-?\\d+")){
              ps.conversionErrorMessages[e_name] = name+" is not a valid number";
              x_temp = -1;
            }
            else {
              try {
                x_temp = name.as<Int>;
              }
              catch(Exception ex) {
                ps.conversionErrorMessages[e_name] = name+" is outside of possible number range";
                x_temp = -1;
              }  
            }
            
            stat 
        }
      
    ]|
    with  inputident := <get-inputnumber-pil> tc
        ; e_inputident := <pil-wrap-string> inputident
        ; x_temp := <newname> "temp"
        ; name := <pp-webdsl> e
        ; e_name := <pil-wrap-string> name
        ; stat := <input-assignment-to-pil(|x_temp)> e      
        
  elem-to-pil :
    tc@elem|[ inputInt(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code-pil>
    pil-stat* |[ 
      String x_temp = ident+e_inputident+uniqueid;
      out.print("<input name=\""+x_temp+"\" "+e_attrs1+" value=\"");
      if(inSubmittedForm)
      {
        out.print(ps.parammap[x_temp]);
      }
      else
      {
        stat*
      }
      out.print("\" />"); 
    ]|
    with  inputident := <get-inputnumber-pil> tc
        ; e_inputident := <pil-wrap-string> inputident
        ; stat* := <to-page-string-pil> e
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs-pil> passign*

  elem-to-pil :
    elem|[ outputInt(e)[passign*]{} ]| ->
    pil-stat |[ out.print(webdsl::encoders::encodeHTML(e1.as<String>)); ]|
    with  e1 := <expression-to-pil> e
