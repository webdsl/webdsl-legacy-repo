 module org/webdsl/dsl/to-pil/template-as-page

imports
  libstratego-lib

imports
  libwebdsl-front

/*
//mostly similar to java-page but removed surrounding html body stuff to make them suitable for ajax calls


rules

  generate-pil-partial =  //same as for normal page but this one checks for not(JavaThisPage)
    ? cbds
    ; pkgname    := <BeanPackage>
    ; where (not(JavaThisPage <+ NestedTemplate <+ ThisEmail))
    ; where (IsAjaxApp)
    ; with( x_Page := <ThisTemplateName; pil-page-name>
      //also allow a single class-body-declaration
      ; if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
      ; <emit-java-code>
          compilation-unit|[
            package pkgname;
            @Partial
            public class x_Page{
              ~*cbds*
            }
          ]|
    ) 
    ; !cbds

rules
  GenerateCodeJavaServlet = generate-pil-template-as-page; fail

  generate-pil-template-as-page :
    def|[ define mod* x_page (farg*) { elem* } ]| ->
    <emit-java-code> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.Map;
        import java.util.List;
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        
        import utils.*;
        
        import pkgname2.*;

        @Partial
        public class x_Page extends PageServlet
        {
        
          //templates scope
          private static HashMap<String, Class> templates = PageServlet.getTemplates();
          
          private HashMap<String, Object> variables = new HashMap<String, Object>();
          private HashMap<String, Object> actionclasses = new HashMap<String, Object>();
        
          @Partial
          private void initialize(){}   
        
          @Partial
          private void conversion(){}     
          
          @Partial
          private void loadArguments () {}//previously argumentInitialize
         
          public String getPageName()
          {
            return "~x_page";
          }
          
          @Partial 
          public void hiddenParams(java.lang.StringBuffer combinedparams){}
          
          public String getHiddenParams()
          {
            java.lang.StringBuffer hiddens = new java.lang.StringBuffer();
            hiddenParams(hiddens);
            return hiddens.toString();
          }
          
          @Partial 
          public void hiddenPostParams(java.lang.StringBuffer combinedparams){}
          
          public String getHiddenPostParams()
          {
            java.lang.StringBuffer hiddens = new java.lang.StringBuffer();
            hiddenPostParams(hiddens);
            return hiddens.toString();
          }
          
          x_specialpagetemplate templateservlet = new x_specialpagetemplate();
                 
          public void serveAsAjaxResponse(PageServlet ps, PrintWriter theoutStream, Object[] args)
          { //use passed PageServlet ps here, since this is the context for this type of response
            this.request=ps.getRequest();
            this.response=ps.getResponse();
            this.parammap = ps.getParammap();
            this.parammapvalues = ps.getParammapvalues();
            this.fileUploads=ps.getFileUploads();
            hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
            session = request.getSession(true);
            bstm1*
            
            initialize();
                          
            templateservlet.render(ps, args, 1,(HashMap<String,Class>)PageServlet.getTemplates().clone(),variables,actionclasses,theoutStream);
          }
          
          public void serve(HttpServletRequest request, HttpServletResponse response, Map<String, String> parammap, Map<String, List<String>> parammapvalues, Map<String,utils.File> fileUploads)
          {
              
            this.request=request;
            this.response=response;
            this.parammap = parammap;
            this.parammapvalues = parammapvalues;
            this.fileUploads=fileUploads;
            session = request.getSession(true);
            
            hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
    
            hibSession.beginTransaction();
            try
            {	
              //very dirty and most ugly hibernate hack
              this.variables.put("_persist_flag_", new Boolean(false));
            
              initialize();
              variablesGlobalAndSession = (HashMap<String, Object>)variables.clone();
              conversion();
              loadArguments();
              //initialize();
              
              Object[] args = { e* };
              this.args = args;
              
              //call special pagetemplate
              templateservlet.storeInputs  (this, args, 1, (HashMap<String,Class>)templates.clone(),variables,actionclasses );
             
              java.io.StringWriter s = new java.io.StringWriter();
              java.io.PrintWriter out = new java.io.PrintWriter(s); 
              if(validated) {
                templateservlet.handleActions(this, args, 1, (HashMap<String,Class>)templates.clone(),variables,actionclasses, out);
              }
              if ( ( !this.hasExecutedAction || hibernateCacheCleared ) && !PageServlet.isAjaxApp) {
                render(request,response);
              }
              if (PageServlet.isAjaxApp) {
                response.getWriter().write("[" + s.toString()+ "{}]");
              }
                              
              storeSessionEntities();
              
              hibSession.getTransaction().commit();
    
            }	
            catch (Exception ex) {
              System.out.println("exception occured: "+ex.getMessage());	
              ex.printStackTrace();
              hibSession.getTransaction().rollback();
              
              throw new RuntimeException("serve page request failed");
            }   
          }
          
          
          @Partial
          private void storeSessionEntities(){}
          
          public void render(HttpServletRequest request,
                  HttpServletResponse response)
          throws ServletException, IOException {
            this.request=request;
            this.response=response;
        
            java.io.StringWriter s = new java.io.StringWriter();
            java.io.PrintWriter out = new java.io.PrintWriter(s); 
                
            //call special pagetemplate render
            templateservlet.render(this, args, 1,(HashMap<String,Class>)templates.clone(),variables,actionclasses,out);

            if(download != null) { 
              download();
            }
            else {

              java.io.PrintWriter sout = response.getWriter();
              
              response.setContentType("text/html");
              
              s.flush();
              sout.write(s.toString());
            }   
          }
        }
      ]|
    where x_page    := <ThisTemplateName>; not(JavaThisPage <+ NestedTemplate <+ ThisEmail); IsAjaxApp
    with pkgname    := <BeanPackage>
       ; pkgname2   := <DomainPackage>
       ; x_Page     := <pil-page-name> x_page
       ; x_specialpagetemplate := <ThisTemplateClassName>
       ; e* := <filter({\arg@farg|[ x : srt ]| -> var-init|[ x ]| \})> farg* //just pass args of page to special pagetemplate
       ; bstm1* := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> bstm|[ x = (x_arg) args[x_index]; ]|
                                         where x_index := <subti;int-to-string> (index,1)
                                             ; x_arg := <argument-pil-type> arg
                                      \})> farg* //variables are generated in java-template-vars
                         
                         */
