 module org/webdsl/dsl/to-pil/template-as-page

imports
  libstratego-lib

imports
  libwebdsl-front

rules

  generate-pil-partial =  //same as for normal page but this one checks for not(PilThisPage)
    ? cbds
    ; where (not(ThisPagePil <+ NestedTemplatePil <+ ThisEmailPil))
    ; where (IsAjaxApp)
    ; with( x_Page := <ThisTemplateNamePil; pil-page-name>
      //also allow a single class-body-declaration
      ; if <is-list> cbds then cbd* := cbds else cbd* := [cbds] end
      ; <pil-emit>
          pil-decl|[
            class page::x_Page {
              cbd*
            }
          ]|
    ) 
    ; !cbds

rules

  GenerateCodePil = generate-pil-template-as-page; fail

  generate-pil-template-as-page :
    def|[ define mod* x_page (farg*) { elem* } ]| ->
    <pil-emit> pil-decl|[
        @Partial
        class page::x_Page extends utils::PageServlet
        {
        
          Map<String, Object> variables = new Map<String, Object>();
          Map<String, Object> actionclasses = new Map<String, Object>();
        
          void initialize(){}   
        
          void conversion(){}     
          
          void loadArguments () {}//previously argumentInitialize
         
          String getPageName()
          {
            return e_pagename; //"~x_page";
          }
          
          void hiddenParams(MutableString combinedparams){}
          
          String getHiddenParams()
          {
            var hiddens = new MutableString();
            hiddenParams(hiddens);
            return hiddens.toString();
          }
          
          void hiddenPostParams(MutableString combinedparams){}
          
          String getHiddenPostParams()
          {
            var hiddens = new MutableString();
            hiddenPostParams(hiddens);
            return hiddens.toString();
          }
          
          t_specialpagetemplate templateservlet = new t_specialpagetemplate();
                 
          void serveAsAjaxResponse(webdsl::PageServlet ps, webdsl::util::StringWriter theoutStream, Array<Object> args)
          { //use passed PageServlet ps here, since this is the context for this type of response
            this.request=ps.getRequest();
            this.response=ps.getResponse();
            this.parammap = ps.getParammap();
            this.parammapvalues = ps.getParammapvalues();
            this.fileUploads=ps.getFileUploads();
            dbConn = webdsl::db::getSession();
            session = request.getSession(true);
            stat1*
            
            initialize();
                          
            templateservlet.render(ps, args, 1,(Map<String,Class>)application::templates.clone(),variables,actionclasses,theoutStream);
          }
          
          void serve(webdsl::Request request, webdsl::Response response, Map<String, String> parammap, Map<String, List<String>> parammapvalues, Map<String,webdsl::util::File> fileUploads)
          {
              
            this.request=request;
            this.response=response;
            this.parammap = parammap;
            this.parammapvalues = parammapvalues;
            this.fileUploads=fileUploads;
            session = request.getSession();
            
            dbConn = webdsl::db::getSession();
    
            //dbConn.beginTransaction(); // I think this is done automatically
            try
            {	
              //very dirty and most ugly hibernate hack
              this.variables["_persist_flag_"] = false;
            
              initialize();
              variablesGlobalAndSession = (Map<String, Object>)variables.clone();
              conversion();
              loadArguments();
              //initialize();
              
              var args = Array<Object>(e*);
              this.args = args;
              
              //call special pagetemplate
              templateservlet.storeInputs(this, args, 1, (Map<String,Class>)application::templates.clone(),variables,actionclasses );
             
              var s = new webdsl::util::StringWriter();
              if(validated) {
                templateservlet.handleActions(this, args, 1, (Map<String,Class>)application::templates.clone(),variables,actionclasses, out);
              }
              if ( ( !this.hasExecutedAction || dbCacheCleared ) && !isAjaxApp) {
                render(request,response);
              }
              if (isAjaxApp) {
                response.writer.print("[" + s.toString()+ "{}]");
              }
                              
              storeSessionEntities();
              
              dbConn.commit();
    
            }	
            catch (Exception ex) {
              println("exception occured: "+ex.toString());	
              //ex.printStackTrace();
              dbConn.rollback();
              
              throw new Exception("serve page request failed");
            }   
          }
          
          void storeSessionEntities(){}
          
          void render(webdsl::util::Request request, webdsl::util::Response response) {
            this.request=request;
            this.response=response;
        
            var s = new webdsl::util::StringWriter();
                
            //call special pagetemplate render
            templateservlet.render(this, args, 1,(Map<String,Class>)application::templates.clone(),variables,actionclasses,out);

            if(download != null) { 
              download();
            }
            else {
              var sout = response.writer;
              response.setContentType("text/html");
              
              //s.flush();
              sout.print(s.toString());
            }   
          }
        }
      ]|
    where x_page    := <ThisTemplateNamePil>; not(ThisPagePil <+ NestedTemplatePil <+ ThisEmailPil); IsAjaxApp
    with x_Page     := <pil-page-name> x_page
       ; e_pagename := StringLit(String([Chars(x_page)]))
       ; t_specialpagetemplate := SimpleType(QId("template", <ThisTemplateClassNamePil>))
       ; e* := <filter({\arg@farg|[ x : srt ]| -> pil-exp|[ x ]| \})> farg* //just pass args of page to special pagetemplate
       ; stat1* := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> pil-stat|[ x = (x_arg) args[x_index]; ]|
                                         where x_index := <subti;int-to-string> (index,1)
                                             ; x_arg := <argument-pil-type> arg
                                      \})> farg* //variables are generated in java-template-vars

