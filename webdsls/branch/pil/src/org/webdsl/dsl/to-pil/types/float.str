module org/webdsl/dsl/to-pil/types/float

imports 
  libstrategolib 
  libwebdsl-front

rules

  builtin-pil-type :
    SimpleSort("Float") -> pil-type|[ Float ]|
    
rules // java

  expression-to-pil :
    Float(x) -> Float(<string-replace(|"f", "")> x)

rules

  pil-element-id :
    tc@elem|[ inputFloat(e)[passign*]{} ]| -> tc{InputNumberPil(newid),anno*} 
    with  _{anno*} := tc
          ; newid := <newname> "input"

  //load the input string and try to convert it to float, insert null if it fails and specify an error
  handle-actions-input-to-pil :
    tc@elem|[ inputFloat(e)[passign*]{} ]|->
    <for-loop-counter-wrap-code-pil> 
    pil-stat*|[
          
        ident = ident + e_inputident+uniqueid;
        
        if(ps.parammap[ident]!=null)
        {
            String name = ps.parammap[ident];

            Float x_temp = 0.0;
            
            if(!(webdsl::util::stringMatches(name, "-?\\d\\d*\\.\\d*")||webdsl::util::stringMatches(name, "-?\\d\\d*")||webdsl::util::stringMatches(name, "-?\\.\\d\\d*"))){
              ps.conversionErrorMessages[e_name] = name+" is not a valid decimal number";
              x_temp = -1.0;
            }
            else {
              try {
                x_temp = name.as<Float>;
              }
              catch(Exception nfe) {
                ps.conversionErrorMessages[e_name] = name+" is outside of possible decimal number range";
                x_temp = -1.0;
              }  
            }
            
            stat 
        }
      
    ]|
    with  e_inputident := <get-inputnumber-pil; pil-wrap-string> tc
        ; x_temp := <newname> "temp"
        ; e_name := <pp-webdsl; pil-wrap-string> e
        ; stat := <input-assignment-to-pil(|x_temp)> e      
        
  elem-to-pil :
    tc@elem|[ inputFloat(e)[passign*]{} ]| ->
    <for-loop-counter-wrap-code-pil>
    pil-stat* |[ 
    String x_temp = ident+e_inputident+uniqueid;
    out.print("<input name=\""+x_temp+"\" "+e_attrs1+" value=\"");
    if(inSubmittedForm) {
      out.print(ps.parammap[x_temp]);
    }
    else {
      stat*
    }
    out.print("\" />"); 
    ]|
    with  e_inputident := <get-inputnumber-pil; pil-wrap-string> tc
        ; stat* := <to-page-string-pil> e
        ; x_temp := <newname> "temp"
        ; e_attrs1 := <to-html-attrs-pil> passign*

  elem-to-pil :
    elem|[ outputFloat(e)[passign*]{} ]|->
    pil-stat|[ out.print(webdsl::encoders::encodeHTML(e1.as<String>)); ]|
    with  e1 := <expression-to-pil> e
