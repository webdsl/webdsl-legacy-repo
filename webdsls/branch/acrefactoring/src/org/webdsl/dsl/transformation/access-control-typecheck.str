/**

 Access Control for WebDSL

*/

module org/webdsl/dsl/transformation/access-control-typecheck

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/transformation/-
rules

  typecheck-section =
    AccessControlDefinition(id,map(typecheck-ac-defs
                                <+ ?x;info(|["map failed in ac declarations: ",x]);fail))
    
  typecheck-section =
    ACPolicy(id) // could check referenced names here
    
  typecheck-ac-defs :
    AccessControlPointcut(pname,fa,elems) -> AccessControlPointcut(pname,fa,elems)
    where {| pointcut-formal-argument :
             <filter(\ ar@Arg(ident,thesort)->ar where rules (pointcut-formal-argument : ident -> ar) \)> fa
           ; <map(tc-pointcut-element(|pname))> elems
          |}

  tc-pointcut-element(|pname):
    AccessControlPointcutElement(ident,matchident,faidents,wc) -> AccessControlPointcutElement(ident,matchident,faidents,wc)
    where <map(pointcut-formal-argument<+?x;typecheck-error(|["argument ",x," not in pointcut ",pname]))> faidents

  tc-pointcut-use:
    AccessControlRule("pointcut",matchident,args,checks,childrules) -> AccessControlRule("pointcut",matchident,args,checks,childrules)
    where MatchArgs(fargs,wc) := args
        ; rulematchtuples := <is-access-control-pointcut<+typecheck-error(|["pointcut ",matchident," does not exist"])> (matchident,fargs)

//if found, not desugared yet -> error
 // typecheck-ac-defs:
 //   AccessControlPrincipal(ident,props) -> AccessControlPrincipal(ident,props)
 //   where <IsEntity <+ typecheck-error(|[ident," is not a declared type"])> ident
 //      ; <derive;map(\ pident ->
 //          <TypeOfProperty <+ typecheck-error(|[pident," is not a property of ",ident])> (ident,pident)  \)> props

 // typecheck-definition :
    //Predicate(ident,fargs,exp) -> Predicate(ident,fargs,newexp)
    //where {|TypeOf, ReturnType
     //     : <map(try(create-argument-typeof-rule))> fargs
          //; rules( ReturnType := SimpleSort("Bool") )
     //     ; newexp := <typecheck-expression <+ typecheck-error(|[exp ," failed typechecking"])> exp
    //      ; ( _{Type(SimpleSort("Bool"))} := newexp  <+ typecheck-error(|[newexp ," is not a boolean expression"]) )
    //      |}

  typecheck-ac-defs :
    AccessControlRule(checktype,matchstring,fargs,check,acrules) -> <typecheck-create-rule-classes(|[],[])> AccessControlRule(checktype,matchstring,fargs,check,acrules)
    

  typecheck-create-rule-classes(|ct,oldargs):
    AccessControlRule(checktype,matchstring,fargs,check,acrules) -> AccessControlRule(checktype,matchstring,fargs,newcheck,newrules)
    where newtype := <concat>[ct , [checktype]]
        ; newargs := <concat>[oldargs , [fargs]]
        ; <elem <+ typecheck-error(|[newtype ," is not a valid security check type"])> (newtype,<Security-Check-Types>)
        //; if check := [] then <typecheck-error(|["access control rule ",checktype," ",matchstring," has no checks specified"])> True() end
        ; newfargs := <map( \ MatchArgs(args,wc) -> args \) ;concat> newargs
        ; {| TypeOf :
            <map(try(create-argument-typeof-rule))> newfargs    //try here because it can also be an expression from matching on templates
          ; newcheck := <typecheck-security-checks(|newargs)> check
          ; newrules := <map(typecheck-create-rule-classes(|newtype,newargs))> acrules
          |}

  typecheck-security-checks(|fargs):
    expr -> newexp
    where newexp := <typecheck-expression <+ typecheck-error(|[expr ," failed typechecking"])> expr
        ; ( _{Type(SimpleSort("Bool"))} := newexp  <+ typecheck-error(|[newexp ," is not a boolean expression"]) )

  create-argument-typeof-rule=
    ?Arg(ident,thesort)
    ; rules( TypeOf: ident -> thesort )
    
    
    
    
    
  typecheck-ac-check-elem :
    TemplateCall("acpagecheck", [ident,e1], []) -> TemplateCall("acpagecheck", [ident,e1], [])
  ///  where in-tc-context(id
     //       ; e1' := <typecheck-expression> e1
       ///   | ["acpagecheck", "/"])
  
  typecheck-ac-check-elem :
    TemplateCall("actemplatecheck", [ident,e1], []) -> TemplateCall("actemplatecheck", [ident,e1'], [])
    where in-tc-context(id
            ; e1' := <typecheck-expression> e1
          | ["actemplatecheck", "/"])
          
  typecheck-ac-check-stmt :
    Stat(ThisCall("acactioncheck",[Var(x_rulegroup)|[e]])) -> 
    Stat(ThisCall("acactioncheck",[Var(x_rulegroup)|[e]]))
    
  //typecheck-ac-check-stmt :
 ///   Stat(ThisCall("acfunctioncheck",[Var(x_rulegroup)|e])) -> 
  ///  Stat(ThisCall("acfunctioncheck",[Var(x_rulegroup)|e]))
  typecheck-acfunctioncheck :
    ACFunctionCheck(g,c,e) -> ACFunctionCheck(g,c,e'){t}
    where e' := <typecheck-expression> e
        ; _{t} := e'