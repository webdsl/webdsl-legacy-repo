module org/webdsl/dsl/languages/ui/attributes

rules

  //register the attribute(String, String) function
  built-in-template-rule-setup = 
    x_funname := "attribute"
    ; <register-reserved-function> (x_funname,2)
    ; <declare> fun |[ function x_funname(key:String,default:String):String {} ]| //attribute can be used to inspect the value of an attribute of the original templatecall
    ; fail
      
  //register the attribute(String) function
  built-in-template-rule-setup = 
    x_funname := "attribute"
    ; <register-reserved-function> (x_funname,1)
    ; <declare> fun |[ function x_funname(key:String):String {} ]| //attribute can be used to inspect the value of an attribute of the original templatecall
    ; fail
    
  //register the attribute(String, String) function
  built-in-template-rule-setup = 
    x_funname := "baseURL"
    ; <register-reserved-function> (x_funname,0)
    ; <declare> fun |[ function x_funname():String {} ]| //baseURL can be used to inspect the first part of the applications url
    ; fail

rules    
          
  constraint-error-ajax = ?AllAttributeExceptExp(e); <constraint-error-attribute> e 
  constraint-error-ajax = ?AttributesExp(e); <constraint-error-attribute> e
    
  constraint-error-attribute :
    e -> <add-error(|["Only expression of type String, List<String> or Set<String> is allowed in attribute selector, expression ",<pp-webdsl-to-string> e," has type ",<pp-webdsl-to-string> type])>
    where type := <type-of> e
        ; not(<type-compatible> (type, SimpleSort("String")))
        ; not(<type-compatible> (type, GenericSort("List",[SimpleSort("String")])))
        ; not(<type-compatible> (type, GenericSort("Set",[SimpleSort("String")])))
 
rules // attribute related functions
  
  built-in-template-rule-setup = register-get-bool-function(|"hasNotNullAttribute")
  