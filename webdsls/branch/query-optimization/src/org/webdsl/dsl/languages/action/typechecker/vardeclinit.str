module org/webdsl/dsl/languages/action/typechecker/vardeclinit

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front

rules //globals

  // x{} means it has no rename annotation, meaning (presumably) that this is a global variable
  constraint-error-action :
    VarDeclInit(x{}, srt, e) -> <add-error(|<vardeclinit-global-error-message> x)>
    where not(<is-entity-type> srt)
        ; not(<IsRequestScopedVarDecl> x)
  constraint-error-action :
    VarDeclInitInferred(x{}, e) -> <add-error(|<vardeclinit-global-error-message> x)>
    where not(<type-of;is-entity-type> e)
        ; not(<IsRequestScopedVarDecl> x)
    
  vardeclinit-global-error-message :
    x -> ["Global variable ", x, " has illegal type. Global variables can only be of a defined entity type, not a list, set or builtin type."]

rules

  constraint-error-action :
    VarDeclInitInferred(x, e) -> <add-error(|"Expression has invalid type for variable declaration.")> e
    where <type-of> e
        ; (?ClassSort(_) <+ ?EntitySort(_)) // names like 'String' (ClassSort), 'Entity' (EntitySort) are not allowed as expression, but type-of will succeed, hence the extra check
