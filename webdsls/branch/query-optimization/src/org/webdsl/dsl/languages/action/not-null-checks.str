module org/webdsl/dsl/languages/action/not-null-checks

imports
  libstrategolib
  libjava-front

imports
  libwebdsl-front

signature
  constructors 
    HasNullChecks : Annotation

rules
   add-not-null-checks:
    expr -> e0
    with  e0 := <bottomup(try(match-any-bool-expr-and-add-null-checks))> expr

  get-has-null-checks =
    ?_{anno*} 
    ; where (<collect(?HasNullChecks());Hd> anno*) 
          
  match-any-bool-expr-and-add-null-checks:
    anyexp{anno*} -> newexp{HasNullChecks(),anno*} 
    where //must not contain other bool expressions otherwise not-null checks have already been made
          SimpleSort("Bool") := <type-of> anyexp; not(<oncetd(get-has-null-checks)> anyexp)
    with  newe := <collect(ignore-certain-exp <+ field-access-to-not-null-checks-first);concat> anyexp
        ; if InColl(element,thecol) := anyexp
          then coll-not-null := <field-access-to-not-null-checks <+ var-to-not-null-checks> thecol
          else coll-not-null := []
          end
        ; newexp := <concat;uniq;generate-conjunction-exp>[newe,coll-not-null,[anyexp]]//<concat;generate-conjunction-exp>[coll-not-null]//
 
   var-to-not-null-checks:
    v@Var(x) -> [NotEq(v,Null())]

  ignore-certain-exp :
    ForExp(_, _, _, _, _) -> []

  ignore-certain-exp :
    Call(e1,ident,e2) -> <collect(field-access-to-not-null-checks-first);concat> [e1,e2]

  ignore-certain-exp :
    ThisCall(ident,e) -> <collect(field-access-to-not-null-checks-first);concat> e
      
  field-access-to-not-null-checks-first:
    fa@FieldAccess(ent,prop)-> return // extrachecks
    where if Var(varname) := ent // case of just one property access
          then checks := [NotEq(Var(varname),Null())]
          else checks := []
          end
        ; if newchecks := <field-access-to-not-null-checks> ent
          then return := <concat> [newchecks, checks]
          else return := checks
          end

  field-access-to-not-null-checks:
    fa@FieldAccess(ent,prop)-> return
    where check := NotEq(fa,Null())
        ; if Var(varname) := ent
          then checks := [NotEq(Var(varname),Null()),check]
          else checks := [check]
          end
        ; if newchecks := <field-access-to-not-null-checks> ent
          then return := <concat> [newchecks, checks]
          else return := checks
          end
        
  generate-conjunction-exp :
    [x|xs] ->  And( e0 , e1 )
    where not([] := xs)
        ; e0 := x
        ; e1 := <generate-conjunction-exp> xs

  generate-conjunction-exp :
    [e0] -> |[ e0 ]|
    
  generate-disjunction-exp :
    [x|xs] ->  Or( e0 , e1 )
    where not([] := xs)
        ; e0 := x
        ; e1 := <generate-disjunction-exp> xs

  generate-disjunction-exp :
    [e0] -> |[ e0 ]|
