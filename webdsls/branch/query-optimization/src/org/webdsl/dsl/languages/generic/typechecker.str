module org/webdsl/dsl/languages/generic/typechecker

imports
  libstrategolib

imports
  libwebdsl-front

strategies

  is-simple-sort-generic =  ?"EntityType"
  is-generic-sort-generic = ?"EntityType"
  
  eq-type-of-generic :
    Var(e) -> GenericSort("EntityType",[SimpleSort(e)])
    where <IsEntity> e

/*  type-compatible-generic =
    ?(SimpleSort("EntityType"), GenericSort("EntityType",_))
    
  type-compatible-generic =
    ?(GenericSort("EntityType",[formal]), GenericSort("EntityType",[actual]))    
    ; where (<type-compatible>(formal, actual))
    

//  type-compatible-generic =
//    ?(GenericSort("EntityTypeNamed",[t]), 
//    ; where (<type-is-generic-template-arg> t
    
    
(  type-compatible-generic = 
    ?(t@SimpleSort(a), t2@SimpleSort(b))
    ; where ( a := b
          ; <type-is-generic-template-arg> t
          ; <type-is-generic-template-arg> t2
      )
    

  type-compatible-generic = //define(A: EntityType)  var b: A := A { }
    ?(t@SimpleSort(a), t2@SimpleSort(b))
    ; where ( a := b
          ; <type-is-generic-template-arg> t
          ; <type-is-generic-template-arg> t2
      )    
*/

  type-compatible-generic = 
    ?(t@SimpleSort(a), t2@SimpleSort(b))
    ; where ( a := b
          ; <type-is-generic-template-arg> t
          ; <type-is-generic-template-arg> t2
      )    

  type-compatible-generic = 
    ?(GenericSort("EntityTypeNamed",[a]),GenericSort("EntityTypeNamed",[b]))
    ; where ( a2 := <strip-annos> a 
             ;a2 := <strip-annos> b )

  type-compatible-generic = //for example in obj:T ...  := List<T> { obj }
    ?(SimpleSort(a), GenericSort("EntityTypeNamed", [b]))
    ; where ( a2 := <strip-annos> a
             ;a2 := <strip-annos> b )
    
  get-generictype-args : //currently only available for top-level templates, receives a list of Arg
    list -> list2
    with list2 := <collect(?Arg(_, SimpleSort("EntityType")))> list
    
  type-is-generic-template-arg =
    ?SimpleSort(s1) 
    ; where (       
          list := <GenericTypeArgs> <InTemplate>
        ; <fetch(?Arg(s1,SimpleSort("EntityType")))> list
    )

  type-exists-generic = 
    ?GenericSort("EntityTypeNamed",[bindingname])
//    ; where (debug(!"Checking Type Exists for:")
//            ; <type-is-generic-template-arg> t)// TODO: check bindingname type-is-generic-template-arg required??


  generic-cast-compatible =   //TODO: more sophisticated tests?
    ?(_, GenericSort("EntityTypeNamed",[t]))//; debug(!"Found GenericCast comptable")

  generic-cast-compatible =   //TODO: more sophisticated tests?
    ?(GenericSort("EntityTypeNamed",[t]),_)//; debug(!"Found GenericCast comptable")

/*  generic-cast-compatible =   
    ?(t@SimpleSort(_), _)
    ; where (<type-is-generic-template-arg> t)
*/

  rename-sort-for-generic = ?GenericSort("EntityTypeNamed",_)

  rename-sort-for-generic :
  s@SimpleSort(_) -> b
  with  ( <type-is-generic-template-arg> s
          ; generics := <GenericTypeArgs> <InTemplate>
          ;  b := <rebind-generic-in-sort(|generics)> s
         )
         <+
         ( b:= s )

 rename-sort-for-generic :
  s@GenericSort(g, _) -> b
  where not(g:= "EntityTypeNamed")
  with  ( (x:=  <InTemplate> 
          ; generics := <GenericTypeArgs> x
          ; b := <rebind-generic-in-sort(|generics)> s
        ) <+ b:= s)
    
  rebind-generic-in-sort(|generics) :
      s@SimpleSort(srt){anno*}  -> b
      with ((
            <fetch(?Arg(srt, SimpleSort("EntityType")))> generics
            ; b:= GenericSort("EntityTypeNamed",[srt]){anno*}
            )
           <+ 
           b:= s
           )
  rebind-generic-in-sort(|generics) =
    ?GenericSort("EntityTypeNamed",_)

  rebind-generic-in-sort(|generics) :
      GenericSort(g, args){annos*}  -> GenericSort(g, args2){annos*}
      where not("EntityTypeNamed" := g)
      with args2 := <map(rebind-generic-in-sort(|generics))> args
      
  rebind-generic-in-farg(|generics) :
      Arg(x, srt){annos*} -> Arg(x, srt2){annos*}
      with srt2 := <rebind-generic-in-sort(|generics)> srt
    
  declare-generic-template-args(|x) : 
    farg1* -> farg2*
    with args := <get-generictype-args> farg1*
       ; farg2* := <map(rebind-generic-in-farg(|args))> farg1*
       ; x2 := <strip-annos> x
       ; rules( GenericTypeArgs:+ x2 -> farg2* )    
    

  constraint-error-generic :
    def@Define(mod*,x,farg1*,_,_) -> <add-error(|["Only toplevel templates can use generic types: ", <pp-webdsl> x])>
    where not([] := <get-generictype-args> farg1*)
        ; not(<TopLevelTemplateDefinitions> x)
        
  has-untranslated-generics = oncetd(is-untranslated-generic)

  is-untranslated-generic :
    s -> True()
    where (SimpleSort("EntityType") := s <+ GenericSort("EntityTypeNamed",_) := s <+ GenericSort("EntityType",_) := s )
