module org/webdsl/dsl/languages/action/desugar

rules

  desugar-action :
    ef@ExtendFunction(Function(fun, fargs, _, Block(stats))) -> RemoveMe()
    where <IsGlobalFunctionSignature> (fun,<map(?Arg(_,<id>))> fargs)
    with rules (
           ExtendFunction :+
             f@Function(fun, fargs2, SimpleSort("Void"), Block(stats2)) -> Function(fun, fargs2, SimpleSort("Void"), Block(newstats))
             where <eq> (<map(?Arg(_,<strip-annos>))> fargs, <map(?Arg(_,<strip-annos>))> fargs2)
             with  newstats := <rename-vars-in-added-stmts-with-fargs> (fargs,fargs2,stats,stats2)
         )

  desugar-action = once-ExtendFunction

  desugar-action :
    VarDeclInitInferred(x, e) -> VarDeclInit(x, t, e)
    with t := <type-of; strip-immutable-anno> e //strip ImmutableReference annotation, because x will be assignable even if e wasn't

  // We perform query analysis on entity properties
  desugar-action :
    f@Function(x, farg*, srt, b1){anno*} -> def{newanno*}
    where <fetch-elem(?FunctionEntity(x_class))> anno*
        ; <action-body-ready> b1
        ; thisargs := <get-this-args(|x_class)> b1
        ; args := <conc> (farg*, thisargs)
        ; (b2, newanno*) := <perform-query-analysis(|("EntityFunction", x_class, x), args, True())> (b1, anno*)
        ; def := Function(x, farg*, srt, b2){newanno*}
        ; <store-entity-function(|x_class)> def

  add-backend-annotation :
    f@Function(x, farg1*, srt, b1){anno*} -> Function(x, farg2*, srt, b1){qo,tokeep*}
    where <fetch-elem(?FunctionEntity(x_class))> anno*
    ; <not(fetch-elem(is-query-optimization))> anno*
    with qa := <fetch-elem(is-query-analysis) <+ (<debug(!"NotOptimized:")> ("EntityFunction", x_class, x); get-empty-query-analysis)> anno*
    ; tokeep* := <remove-all(is-query-analysis)> anno*
    ; bindableargs := <filter(query-optimization-bindable-argument)> farg1*
    ; farg2* := <map(try(add-query-optimization-to-argument(|qa,bindableargs)))> farg1*
    ; qo := <get-empty-query-optimization>
