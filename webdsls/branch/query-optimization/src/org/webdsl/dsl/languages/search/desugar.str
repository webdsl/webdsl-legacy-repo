module org/webdsl/dsl/languages/search/desugar

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/languages/search/-
  org/webdsl/dsl/transformation/desugar
  org/webdsl/dsl/modules/search

rules //desugar searcher language to native class interface

  desugar-search:
  	Suggest(ent, AutoComplete(), prts) -> result
  	with x_searcher := <concat-strings>[ent,"Searcher"]
  		; e_searcher := exp |[ x_searcher  ]|
  		; <fetch(?SuggestTerm(FieldsConstraint(fields),e_toSuggest ))> prts
  		; e_fields* := <map(\x -> <field-to-string> x\)> fields
  		; e_limit := <(fetch(?MaxResults(lim)); !lim) <+ !exp |[ 10 ]|> prts
  		; if (<fetch(?NamespaceConstraint(e_ns))> prts)
  		  then result := |[ e_searcher.autoCompleteSuggest(e_toSuggest, e_ns, [e_fields*], e_limit)]|
  		  else result := |[ e_searcher.autoCompleteSuggest(e_toSuggest, [e_fields*], e_limit)]|
  		  end

  desugar-search:
  	Suggest(ent, SpellCheck(), prts) -> result
  	with x_searcher := <concat-strings>[ent,"Searcher"]
  		; e_searcher := exp |[ x_searcher  ]|
  		; <fetch(?SuggestTerm(FieldsConstraint(fields),e_toSuggest ))> prts
  		; e_fields* := <map(\x -> <field-to-string> x\)> fields
  		; e_limit := <(fetch(?MaxResults(lim)); !lim) <+ !exp |[ 10 ]|> prts
  		; e_similarity := <(fetch(?Similarity(sim));!sim) <+ !exp |[ 0.7 ]|> prts
  		; if (<fetch(?NamespaceConstraint(e_ns))> prts)
  		  then result := |[ e_searcher.spellSuggest(e_toSuggest, e_ns, [e_fields*], e_similarity, e_limit)]|
  		  else result := |[ e_searcher.spellSuggest(e_toSuggest, [e_fields*], e_similarity, e_limit)]|
  		  end

  desugar-search:
  	HighlightTags(e_toHighlight, e_searcher, field, e_pretag, e_posttag) -> result
  	with e_field := <field-to-string> field
  	   ; result := exp|[ e_searcher.highlight(e_field, e_toHighlight, e_pretag, e_posttag) ]|
  
  field-to-string = field-to-string-exp <+ ?SearchFieldRef(exp); !exp
    	
  field-to-string-exp: 	
  	x -> String(x)
  	where <not(?SearchFieldRef(_))> x
  	
  desugar-search:
  	Highlight(e_toHighlight, e_searcher, field) -> result
  	with e_field := <field-to-string> field
  	   ; result := exp|[ e_searcher.highlight(e_field, e_toHighlight) ]|  		
  
  desugar-search:
    SearchResults(e_searcher) -> exp|[ e_searcher.list() ]|

  desugar-search:
    FacetResults(e_searcher, field) -> exp|[ e_searcher.getFacets(e_field, false) ]|
    with e_field := <field-to-string> field
    
  desugar-search:
    AllFacetResults(e_searcher, field) -> exp|[ e_searcher.getFacets(e_field, true) ]|
    with e_field := <field-to-string> field
  
  desugar-search:
  	SearchResultsSize(e_searcher) -> exp|[ e_searcher.resultSize() ]|
  	
  desugar-search:
  	SearchTimeString(e_searcher) -> exp|[ e_searcher.searchTimeAsString() ]|
  	
  desugar-search:
  	SearchTimeMS(e_searcher) -> exp|[ e_searcher.searchTimeMillis() ]|
  	
  desugar-search:
  	SearchTimeSec(e_searcher) -> exp|[ e_searcher.searchTimeSeconds() ]|
  	
  desugar-search:
  	SearcherInit(ent, parts) -> result
  	where x_searcher := <concat-strings>[ent,"Searcher"]
  		; nwsearcher := exp|[x_searcher()]|
  		; result := <foldl(part-to-expr)> (parts, nwsearcher)
  		
  desugar-search:
  	SearcherRefMod(e_ref, parts) -> result
  	where result := <foldl(part-to-expr)> (parts, e_ref)
  	
  part-to-expr:
  	(QueryDef(fieldsConstraint, queryConstraint), e_done) -> exp |[ e_query ]|
  	with e_query := <queryConstraint-to-expr> (queryConstraint, e_done, fieldsConstraint)

  fieldsConstraint-to-expr:
  	(FieldsConstraint(fields), e_done) -> e_fields
  	where e* := <map(\x -> <field-to-string> x\)> fields
  		; e_fields := exp|[ e_done.fields([e*]) ]|

  try-fieldsConstraint-to-expr:
  	(Some(fc), e_done) -> result
  	with result := <fieldsConstraint-to-expr> (fc, e_done)

  try-fieldsConstraint-to-expr:
  	(None(), e_done) -> e_done

  part-to-expr:
  	(Start(e_int), e_done) -> exp|[ e_done.firstResult(e_int) ]|
  
  part-to-expr:
  	(MaxResults(e_int), e_done) -> exp|[ e_done.maxResults(e_int) ]|
  
  part-to-expr:
  	(SortBy(sort_exp*), e_done) -> e_sortExps
  	with e_sortExps := <foldl( sortExp-to-expr)> (sort_exp*, e_done)
  		    
  queryConstraint-to-expr:
  	(QueryConstraint(query_exp*), e_done, fields_constraint) -> e_queryExps
  	where //apply field constraint on first clause being defined 
  		e_queryExps := <foldl( queryExp-to-expr )> (query_exp*, (e_done, fields_constraint))
  
  part-to-expr:
  	(QueryConstraint(e_int), e_done) -> exp|[ e_done.firstResult(e_int) ]|
  	
  part-to-expr:
  	(ConstraintFilter(filter_constraint*) , e_done) -> e_filters
  	with e_filters := <foldl(filterConstraint-to-expr)> (filter_constraint*, e_done)
  	
  part-to-expr:
  	(FacetDef(facet_exp*), e_done) -> e_facetSpecs
  	with e_facetSpecs := <foldl(facetExp-to-expr)> (facet_exp*, e_done)
  	
  part-to-expr:
  	(SearchAttributes(attr*), e_done) ->  e_attr
  	with e_attr := <foldl(searchAttribute-to-expr)> (attr*, e_done)
  	
  part-to-expr:
  	(NamespaceConstraint(e_namespace), e_done) -> exp|[e_done.setNamespace(e_namespace)]|
  	
  queryExp-to-expr:
  	(def , e_done) -> <queryExp-to-expr> (def, (e_done, None()))
  	where not(?(_,(_,_)))
  	
  queryExp-to-expr:
  	(GroupDef(boolOp, query_exp*), (e_done, fields_constraint)) -> e_close
  	with e_open := exp|[ e_done.openGroup() ]|
  	   ; e_fields := <try-fieldsConstraint-to-expr> (fields_constraint, e_open)
  	   ; e_queryExps := <foldl( queryExp-to-expr )> (query_exp*, e_fields)
  	   ; e_close := exp|[ e_queryExps.closeGroup() ]|

  queryExp-to-expr:
  	(TermDef(boolOp, e_termExp, None()), (e_done, fields_constraint)) -> exp|[ e_fields.query(e_termExp) ]|
  	with e_bool := <boolOp-to-expr> (boolOp, e_done)
  	   ; e_fields := <try-fieldsConstraint-to-expr> (fields_constraint, e_bool)
  	     
  queryExp-to-expr:
  	(TermDef(boolOp, e_termExp, Some(Slop(e_slop))), (e_done, fields_constraint)) -> exp|[ e_fields.phraseQuery(e_termExp, e_slop) ]|
  	with e_bool := <boolOp-to-expr> (boolOp, e_done)
  	   ; e_fields := <try-fieldsConstraint-to-expr> (fields_constraint, e_bool)
  	
  queryExp-to-expr:
  	(RangeDef(boolOp, e_from, e_to), (e_done, fields_constraint)) -> exp|[ e_fields.range(e_from, e_to) ]|
  	with e_bool := <boolOp-to-expr> (boolOp, e_done)
  	   ; e_fields := <try-fieldsConstraint-to-expr> (fields_constraint, e_bool)

  sortExp-to-expr:
  	(SortDef(field, direction), e_done) -> e_sort
  	with e_field := <field-to-string> field
  	   ; e_sort := <sort-to-expr> (direction, e_field, e_done)
  	     
  filterConstraint-to-expr:
  	(FieldFilterConstraint(field, e_value), e_done) -> exp|[e_done.filterByField(e_field, e_value)]|
  	with e_field := <field-to-string> field
  	
  filterConstraint-to-expr:
  	(FacetFilterConstraint(e_facet), e_done) -> exp|[e_done.filterByFacet(e_facet)]|
  	
  facetExp-to-expr:
  	(FacetDef(field, e_def), e_done) -> exp|[e_done.enableFaceting(e_field, e_def)]|
  	where <type-of; ?SimpleSort(String)> e_def
  	with e_field := <field-to-string> field

  searchAttribute-to-expr:
    (NoLucene(), e_done) -> exp|[ e_done.allowLuceneSyntax(false) ]|
  
  searchAttribute-to-expr:
    (Lucene(), e_done) -> exp|[ e_done.allowLuceneSyntax(true) ]|
    
  searchAttribute-to-expr:
    (DefaultAnd(), e_done) -> exp|[ e_done.defaultAnd() ]|
  
  searchAttribute-to-expr:
    (DefaultOr(), e_done) -> exp|[ e_done.defaultOr() ]|
  

  boolOp-to-expr = ?(Some(MustNot()), e_done); !exp |[ e_done.mustNot() ]|
  boolOp-to-expr = ?(Some(Must()), e_done); !exp |[ e_done.must() ]|
  boolOp-to-expr = ?(None(), e_done); !exp |[ e_done.should() ]|
  sort-to-expr = ?(Some(Ascending()), e_field, e_done); !exp |[ e_done.sortAsc(e_field) ]|
  sort-to-expr = ?(Some(Descending()), e_field, e_done); !exp |[ e_done.sortDesc(e_field) ]|
  sort-to-expr = ?(None(), e_field, e_done); !exp |[ e_done.sortAsc(e_field) ]|
  
rules //desugar analyzer defs
	
  desugar-search:
  	TokenFilterNoArgs( t ) -> TokenFilter( t, [] )
  	
  desugar-search:
  	TokenizerNoArgs( t ) -> Tokenizer( t, [] )
  	
  desugar-search:
  	CharFilterNoArgs( t ) -> CharFilter( t, [] )
  
  desugar-search:
  	CharFilter( name, args ) -> CharFilter( name', args )
  	where not ( <string-ends-with(| "Factory" )> name )
  		; name' := <concat-strings> [name, "Factory"]
  		  
  desugar-search:
  	Tokenizer( name, args ) -> Tokenizer( name', args )
  	where not ( <string-ends-with(| "Factory" )> name )
  		; name' := <concat-strings> [name, "Factory"]
  		  
  desugar-search:
  	TokenFilter( name, args ) -> TokenFilter( name', args )
  	where not ( <string-ends-with(| "Factory" )> name )
  		; name' := <concat-strings> [name, "Factory"]

rules //desugar entity properties  		  
//   desugar-search:
//   	ExtendEntity( name, entbodydecs ){anno*} -> ExtendEntity( name, entbodydecs2 ){anno*}
//   	where entbodydecs2 := <desugar-search-entbody(| name )> entbodydecs
// 
  desugar-search:
    EntityNoSuper( name, entbodydecs ){anno*} -> EntityNoSuper( name, entbodydecs2 ){anno*}
	where entbodydecs2 := <desugar-search-entbody(| name )> entbodydecs
    
  desugar-search : 
    Entity( name, super, entbodydecs ){anno*} -> Entity( name, super, entbodydecs2 ){anno*}
	where entbodydecs2 := <desugar-search-entbody(| name )> entbodydecs

  desugar-search-entbody(| x_class ) :
  	entbodydecs -> <concat> [props1, funcs, validations, rest]
  	where <IndexedEntity> x_class
  	; ( props, funcs, validations, _, rest ) := <split-entity-body> entbodydecs
  	; <not( ?[] )> props
  	; <fetch( has-no-anno( ?DesugarSearchVisited( )))> props
  	; props1 := <map( try( add-new-anno(| DesugarSearchVisited( )); try(desugar-search-prop(| x_class )) ))> props
  	
  desugar-search-prop(| x_class ):
  	prop -> prop3
  	with propname := <get-property-name> prop
  	; mappings := <bagof-SearchMappingForProp> ( x_class, propname )
  	; prop2 := <add-searchable-anno(| mappings ); repeat( desugar-search-prop-annos ); repeat( desugar-search-prop-annos-embed )> prop
  	; <try( record-searchable-prop(| x_class ))> prop2
  	; if ( <SearchNamespaceForProp> ( x_class, propname )) then prop3 := <add-search-namespace-anno> prop2
  	  else prop3 := prop2 end
  
  record-searchable-prop(| x_class ):
  	prop -> prop
  	where <is-searchable-prop> prop
  	with rules( EntityNameToSearchableProps :+ x_class -> prop )
  	; propname := <get-property-name> prop
  	; rules( IsSearchableProp :+ ( x_class, propname ) -> [] )
  		
  
  signature constructors
  	DesugarSearchVisited : Term

rules //desugar search mappings
  	
  add-searchable-anno(| fieldmappings ):
    Property( name, propkind, type, annos ){anno*} -> Property( name, propkind, type, annos1 ){anno*}
    where annos1 := <concat> [annos, <map( mapping-to-searchable-anno )> fieldmappings]
      
  add-searchable-anno(| fieldmappings ):
    PropertyNoAnno( name, propkind, type ){anno*} -> Property( name, propkind, type, annos ){anno*}
    where annos := <map( mapping-to-searchable-anno )> fieldmappings      

  add-searchable-anno(| fieldmappings ):
    DerivedProperty( name, propkind, type, annos, ex ){anno*} -> DerivedProperty( name, propkind, type, annos1, ex ){anno*}
    where annos1 := <concat> [annos, <map( mapping-to-searchable-anno )> fieldmappings]
      
  add-searchable-anno(| fieldmappings ):
    DerivedPropertyNoAnno( name, propkind, type, ex ){anno*}  -> DerivedProperty( name, propkind, type, annos, ex ){anno*}
    where annos := <map( mapping-to-searchable-anno )> fieldmappings
  
  mapping-to-searchable-anno:
    SearchFieldMapping( None( ), _, parts ) -> SearchableAnno( sa-args )
	with sa-args := <map( mapping-part-to-sa-arg <+ mapping-part-to-sa-arg-list ) ; flatten-list> parts
	
  mapping-to-searchable-anno:
    SearchFieldMapping( Some( _ ), _, parts ) -> SearchableAnno( [DefaultSF-Argument( ) | sa-args] )
	with sa-args := <map( mapping-part-to-sa-arg <+ mapping-part-to-sa-arg-list ) ; flatten-list> parts
	
  
  mapping-part-to-sa-arg: FieldName( x ) -> SA-Argument( "name", x )
  mapping-part-to-sa-arg: AnalyzerName( x ) -> SA-Argument( "analyzer", x )
  mapping-part-to-sa-arg: Boost( x ) -> SA-Argument( "boost", x )
  mapping-part-to-sa-arg: TargetEntity( x ) -> SA-Argument( "subclass", x )
  mapping-part-to-sa-arg: EmbeddedDepth( x ) -> SA-Argument( "depth", x )
  mapping-part-to-sa-arg: "autocomplete" -> Autocomplete-Argument( )
  mapping-part-to-sa-arg: "spellcheck" -> Spellcheck-Argument( )
  mapping-part-to-sa-arg-list: SearchMappingAnno( kw* ) -> <map( mapping-part-to-sa-arg )> kw*

rules //search namespaces	
  add-search-namespace-anno :
	p@Property( name, propkind, srt, anno ){anno*} -> Property( name, propkind, srt, anno' ){anno*}
	where anno' := [SearchNamespaceAnno( ) | anno]
	
  add-search-namespace-anno :
  	p@DerivedProperty( name, propkind, srt, anno, ex ){anno*} -> DerivedProperty( name, propkind, srt, anno', ex ){anno*}
  	where anno' := [SearchNamespaceAnno( ) | anno]

rules // desugar searchable annos	
  desugar-search-prop-annos:
	Property( name, propkind, srt, anno ){anno*} -> Property( name, propkind, srt, anno' ){anno*}
	where( <is-untokenized-default-type> srt; <fetch( anno-needs-desugaring )> anno )		
	with if ( <is-numeric-type> srt ) 
	  then anno' := <map( try( desugar-searchable-anno-numeric ); try( desugar-searchable-anno(| name )) )> anno
	  else anno' := <map( try( desugar-searchable-anno-untokenized ); try( desugar-searchable-anno(| name )) )> anno end		
	   
  desugar-search-prop-annos:
	p@Property( name, propkind, srt, anno ){anno*} -> Property( name, propkind, srt, anno' ){anno*}
	where( not( <is-untokenized-default-type> srt ); <fetch( anno-needs-desugaring )> anno
	 ; anno' := <map( try( desugar-searchable-anno(| name )))> anno )

  desugar-search-prop-annos-embed:
	Property( name, propkind, srt, anno ){anno*} -> Property( name, propkind, srt, anno' ){anno*}
	where( <?Ref( )<+?Comp( ) > propkind; <fetch( anno-needs-desugaring-embedded )> anno
	 ; typeName := <srt-to-type> srt
	 ; anno' := <map( try( desugar-searchable-anno-embedded(| typeName )))> anno )

  desugar-search-prop-annos:
	DerivedProperty( name, propkind, srt, anno, ex ){anno*} -> DerivedProperty( name, propkind, srt, anno', ex ){anno*}
	where( <is-untokenized-default-type> srt; <fetch( anno-needs-desugaring )> anno )
	with if ( <is-numeric-type> srt ) 
	  then anno' := <map( try( desugar-searchable-anno-numeric ); try( desugar-searchable-anno(| name )) )> anno
	  else anno' := <map( try( desugar-searchable-anno-untokenized ); try( desugar-searchable-anno(| name )) )> anno end	

  desugar-search-prop-annos:
	DerivedProperty( name, propkind, srt, anno, ex ){anno*}  -> DerivedProperty( name, propkind, srt, anno', ex ){anno*}
	where( not( <is-untokenized-default-type> srt ); <fetch( anno-needs-desugaring )> anno
	 ; anno' := <map( try( desugar-searchable-anno(| name )))> anno )
	   
  desugar-search-prop-annos:
	p@DerivedProperty( name, propkind, srt, anno, ex ){anno*} -> DerivedProperty( name, propkind, srt, anno', ex ){anno*}
	where( <?Ref( )<+?Comp( ) > propkind; <fetch( anno-needs-desugaring-embedded )> anno
	 ; typeName := <srt-to-type> srt
	 ; anno' := <map( try( desugar-searchable-anno-embedded(| typeName )))> anno )

  
  desugar-searchable-anno(| name ):
    SearchableAnno( ) -> SearchableAnno( [SA-Argument( "name", name )] )
    
  desugar-searchable-anno(| name ):
    SimpleAnno( "searchable" ) -> SearchableAnno( [SA-Argument( "name", name ), SA-Argument( "analyzer", "default" )] )

  desugar-searchable-anno(| name ):
  	SearchableAnnoBoost( SearchableAnno( sa-args ), boost ) -> SearchableAnno( [SA-Argument( "boost", boost ) | sa-args] )
  
  desugar-searchable-anno(| name ):
  	SearchableAnnoBoost( SearchableAnno( ) , boost ) -> SearchableAnno( [SA-Argument( "boost", boost )] )  
  	
  desugar-searchable-anno(| name ):
  	SearchableAnno( sa-args ) -> SearchableAnno( [SA-Argument( "name", name ) | sa-args] )
  	where not ( <fetch( ?SA-Argument( "name", _ ))> sa-args )
  	
  desugar-searchable-anno(| name ):
  	SearchableAnno( sa-args ) -> SearchableAnno( [SA-Argument( "analyzer", "default" ) | sa-args] )
  	where not ( <fetch( ?SA-Argument( "analyzer", _ ))> sa-args )
  	
  desugar-searchable-anno-embedded(| typeName ):
  	SearchableAnno( sa-args ) -> SearchableAnno( [SA-Argument( "subclass", typeName ) | sa-args] )
  	where not ( <fetch( ?SA-Argument( "subclass", _ ))> sa-args )
 
  desugar-searchable-anno-embedded(| typeName ):
  	SearchableAnno( sa-args ) -> SearchableAnno( [SA-Argument( "depth", "1" ) | sa-args] )
  	where not ( <fetch( ?SA-Argument( "depth", _ ))> sa-args )
 
  desugar-searchable-anno-untokenized:
 	SearchableAnno( sa-args ) -> SearchableAnno( [SA-Argument( "analyzer", "no" ) | sa-args] )
  	where not ( <fetch( ?SA-Argument( "analyzer", _ ))> sa-args )
 
  desugar-searchable-anno-numeric:
 	SearchableAnno( sa-args ) -> SearchableAnno( [SA-Argument( "analyzer", "no" ), Numeric-Argument( ) | sa-args] )
  	where not ( <fetch( ?SA-Argument( "analyzer", _ ))> sa-args )
  
  anno-needs-desugaring= ?SearchableAnno( )
  anno-needs-desugaring= ?SearchableAnno( sa-args );not ( <fetch( ?SA-Argument( "name", _ ))> sa-args;<fetch( ?SA-Argument( "analyzer", _ ))> sa-args )
  anno-needs-desugaring= ?SearchableAnnoBoost( _, _ )
  anno-needs-desugaring= ?SimpleAnno( "searchable" )
  anno-needs-desugaring-embedded = ?SearchableAnno( sa-args );not( <fetch( ?SA-Argument( "subclass", _ ))>sa-args;<fetch( ?SA-Argument( "depth", _ ))>sa-args )
  
  is-untokenized-default-type = is-numeric-type <+ is-date-type
  is-numeric-type = ?SimpleSort( "Int" )
  is-numeric-type = ?SimpleSort( "Float" )
  is-date-type = ?SimpleSort( "Date" )
  is-date-type = ?SimpleSort( "DateTime" )
  is-date-type = ?SimpleSort( "Time" )