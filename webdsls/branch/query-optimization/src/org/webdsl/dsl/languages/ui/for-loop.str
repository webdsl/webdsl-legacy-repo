module org/webdsl/dsl/languages/ui/for-loop

rules

  normalize-constructor :
    ForNoFilter(x, s, e, te*, sep){anno*} -> For(x, s, e, None(), te*, sep){anno*}

  normalize-constructor :
    ForAllNoFilter(x, s, te*, sep){anno*} -> ForAll(x, s, None(), te*, sep){anno*}

rules

  rename-ui :
    def@For(x, srt, e1, f1, elems1, elems3){anno*} -> For(y, srt2, e2, f2, elems2, elems4){newanno*}
    with e2 := <rename-all> e1
       ; {| Rename, VarInTemplateContext, IteratorContext
          : srt2   := <rename-all> srt
          ; y      := <rename-bound-immutable(|srt2)> x
          ; rules(
              VarDecl : y -> def
              IteratorContext :+= Arg(y, srt2)
            )
          ; <declare-vars-in-context> y
          ; f2     := <rename-all; try(rename-query-condition-anno)> f1
          ; elems2 := <rename-all> elems1
          ; newanno* := <update-iterator-context; update-template-args-anno; rename-query-optimization-annos> anno*
          |}
       ; elems4 := <rename-all> elems3 // separator cannot refer to loop index

  rename-ui :
    def@ForAll(x, srt, f1, elems1, elems3){anno*} -> ForAll(y, srt2, f2, elems2, elems4){newanno*}
    with {| Rename, VarInTemplateContext, IteratorContext
          : srt2   := <rename-all> srt
          ; y      := <rename-bound-immutable(|srt2)> x
          ; rules(
              VarDecl : y -> def
              IteratorContext :+= Arg(y, srt2)
            )
          ; <declare-vars-in-context> y
          ; f2     := <rename-all; try(rename-query-condition-anno)> f1
          ; elems2 := <rename-all> elems1
          ; newanno* := <update-iterator-context; update-template-args-anno; rename-query-optimization-annos> anno*
          |}
        ; elems4 := <rename-all> elems3 // separator cannot refer to loop index

  rename-ui :
    def@ForCount(x, e1, e2, elems1, elems3) -> ForCount(y, e3, e4, elems2, elems4)
    with  e3 := <rename-all> e1
        ; e4 := <rename-all> e2 
        ; {| Rename, VarInTemplateContext
          : y := <rename-bound-immutable(|SimpleSort("Int"))> x
          ; rules(VarDecl : y -> def)
          ; <declare-vars-in-context> y
          ; elems2 := <rename-all> elems1
          |}  
        ; elems4 := <rename-all> elems3 // separator cannot refer to loop index

  update-template-args-anno :
    anno* -> [templName*, templArgs*, tokeep*]
    where tokeep* := <remove-all(?TemplateArgs(_) <+ ?TemplateName(_))> anno*
    ; templArgs* := [TemplateArgs(<TemplateArg <+ ![]>)]
    ; templName* := <![TemplateName(<InTemplate <+ InPage>)] <+ ![]>

  add-backend-annotation :
    def@ForAll(_, SimpleSort(x_class), _, _, _){anno*} -> def{CachedEntity(), anno*}
    where not(<fetch-elem(?CachedEntity())> anno*)
    ; <get-query-optimization-anno; ?QueryOptimizations([], querycondition)> anno* // Only make cacheable if query optimization did not add joins, because they are ignored when the query is cached
    ; <is-cached-entity> x_class

  add-query-optimization :
    def@ForAll(x, srt, f, b, s){anno*} -> ForAll(x, srt, f, b2, s){IsOptimized(),qc,tokeep*}
    where <fetch-elem(?TemplateArgs(args))> anno*
      ; <fetch-elem(?TemplateName(tname))> anno*
      ; <not(fetch-elem(?IsOptimized()))> anno*
    with qa := <fetch-elem(is-query-analysis) <+ (<debug(!"NotOptimized:")> ("ForAll", x, srt); get-empty-query-analysis)> anno* 
      ; bindableargs := <filter(query-optimization-bindable-argument)> args
      ; tokeep* := <remove-all(is-query-analysis)> anno*
      ; (qc, b2) := <query-analysis-to-query-optimizition(|qa,x,srt,bindableargs)> b

  desugar-ui :
    def@ForAll(x, srt, f, body1, sep){anno*} -> ForAll(x, srt, f, body2, sep){newanno*}
    with /*<debug(!"forall1: ")> Var(x); */cond := <?Filter(<id>, _, _) <+ !True()> f
    where <fetch-elem(?TemplateArgs(args*))> anno*
    ; <fetch-elem(?TemplateName(tname))> anno*
    ; <fetch-elem(?IteratorContext(ic*))> anno*
    ; <template-body-ready> body1
    ; tgenname := <normalize-signature; generate-template-name> (tname, args*)
    ; /*info(|"desugar forall");*/
    {| CurrentTemplateName
      : rules( CurrentTemplateName := tgenname )
      ; (body2, newanno*) := <perform-query-analysis(|("ForAll", x ,srt), [args*,ic*],cond)/* <+ (<debug(!"forall1.5: ")> Var(x); fail)*/> (body1, anno*)
    |}
    /*;<debug(!"forall2: ")> Var(x)*/ 

  add-query-optimization :
    For(x, srt, call, f, elems1, elems3){anno*} -> For(x, srt, call, f, elems2, elems3){IsOptimized(),qc,tokeep*}
    where <is-entity-type> srt
      ; <fetch-elem(?TemplateArgs(args))> anno*
      ; <fetch-elem(?TemplateName(tname))> anno*
      ; <not(fetch-elem(?IsOptimized()))> anno*
    with qa := <fetch-elem(is-query-analysis) <+ (<debug(!"NotOptimized:")> ("For", x, srt); get-empty-query-analysis)> anno* 
      ; bindableargs := <filter(query-optimization-bindable-argument)> args
      ; tokeep* := <remove-all(is-query-analysis)> anno*
      ; (qc, elems2) := <query-analysis-to-query-optimizition(|qa,x,srt,bindableargs)> elems1
      //; newcall := /*<try(pass-query-optimization-to-call(|qo))>*/ call

  desugar-ui :
    def@For(x, srt, e, f, elems1, elems3){anno*} -> For(x, srt, e, f, elems2, elems3){qc,newanno2*}
    where <is-entity-type> srt
    ; <fetch-elem(?TemplateArgs(args*))> anno*
    ; <fetch-elem(?TemplateName(tname))> anno*
    ; <fetch-elem(?IteratorContext(ic*))> anno*
    ; <template-body-ready> elems1
    ; cond := <?Filter(<id>, _, _) <+ !True()> f
    ; tgenname := <normalize-signature; generate-template-name> (tname, args*)
    ; {| CurrentTemplateName
      : rules( CurrentTemplateName := tgenname )
      ; (elems2, newanno*) := <perform-query-analysis(|("For", x, srt), [args*,ic*],cond)> (elems1, anno*)
    |}
    ; bindableargs := <filter(query-optimization-bindable-argument)> args*
    ; fltr* := <get-query-condition(|x,srt,bindableargs); ?qc; (define-filter-for-query-condition(|x,srt) < ![<id>] + ![])> newanno*
    ; newanno2* := <conc> (fltr*, newanno*)


rules // ForAll only declared entity types
  
  constraint-error-ui: ForAll(_, srt, _, _, _) -> <forall-constraint-error(|srt)>

  forall-constraint-error(|srt) :
    x -> <add-error(|["'for' without 'in' can only iterate over a defined entity type, incorrect type used: ", <pp-type> srt])>
    where not(<is-entity-type> srt) <+ <?SimpleSort("Entity")> srt

rules

  constraint-error-ui : For(_, srt, e, _, _, _)            -> <for-constraint-error(|srt, e)>
     
  for-constraint-error(|srt, e) :
    x -> <add-error(|[<pp-webdsl> e, " should be a collection of type ", <pp-type> srt])>
    where not(GenericSort(_, [srt]) := <type-of> e)  
    
rules    

  constraint-error-ui : ForCount(x, e1, e2, elems1, sep) -> <expression-type-constraint(|SimpleSort("Int"))> e1
  constraint-error-ui : ForCount(x, e1, e2, elems1, sep) -> <expression-type-constraint(|SimpleSort("Int"))> e2
    