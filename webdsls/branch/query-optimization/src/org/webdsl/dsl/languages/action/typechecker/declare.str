module org/webdsl/dsl/languages/action/typechecker/declare

imports
  libwebdsl-front
  org/webdsl/dsl/generation/webdsl-generator

strategies

// TODO: function resolving is now done for each type-of call and again in aggregate-and-combine-functions.
//        Result can be stored (annotation?).

  declare-function(|x_class) =
    ?ExtendFunction(_)

  normalize-declare: FunctionNoReturn(f, args, body) -> Function(f, args, SimpleSort("Void"), body)
  
  declare-function(|x_class): f@FunctionNoReturn(_,_,_) -> f
    with  f2 := <with-origin(normalize-declare)> f
        ; <declare-function(|x_class)> f2

  // callee can be a SimpleSort(x_entity) or ClassSort(x_native_class) 
  CheckFunctionSignature: p@(callee, f, t*) -> s
    where resolve-function-call-to-decl; ?Function(_,_, s, _)
        
  declare-function(|x_class) =
    ?def@Function(f, args, sort, _)
    ; with(
        t1stripped* := <map(?Arg(_,<id>));prepare-type-list-for-compare> args
      ; fnamestripped := <strip-annos> f
      ; rules( CheckFunctionSignatureArgumentTypes :+
                    (SimpleSort(x_class), fnamestripped, t2*) -> t1stripped*
                       where <zip(type-compatible)> (t1stripped*, t2*)
               EntityFunctionDecl :+ (x_class, fnamestripped, t1stripped*) -> def
               CurrentEntityFunctionDecl : (x_class, fnamestripped, t1stripped*) -> def
             )
      )
      
  normalize-declare: PredicateInEntity(name,args,body) -> Function(name,args,SimpleSort("Bool"),[])
      
  declare-function(|x_class) :
    p@PredicateInEntity(name,args,body) -> p
    with f := <with-origin(normalize-declare)> p
       ; <declare-function(|x_class)> f

  declare-action = declare-global-func

  CheckGlobalFunctionSignature: p@(None(), fname, t*) -> s
    where resolve-function-call-to-decl; ?Function(_,_, s, _)
        
  declare-global-func =
    ?decl@Function(f, fargs, s, b)
  ; with( 
      sig@(n,t*) := <normalize-signature> (f,fargs)
    ; rules(FunctionDecl :+ sig -> decl) 
    ; rules ( 
              CheckGlobalFunctionSignatureArgumentTypes :+ (None(), n, t2*) -> t* // TODO: Mapping of FunctionCall() to Function using this info
                       where <zip(type-compatible)> (t*, t2*)
              IsGlobalFunctionSignature : (n, t*)
              IsGlobalFunction : (n, fargs, s)
              IsGlobalFunction : n
              GlobalFunctionArgs :+ n -> fargs //currently used to suggest correction when function name is known, but arguments types are not correct, see constraint-error-this-call 
      )
    ; if None() := b then
        rules ( IsNativeFunction : n )
      end
    )

  declare-global-func = ?ef@ExtendFunction(_)
      // no declare, but save for constraints
    ; rules(ExtendGlobalFunctions :+= ef)

  normalize-declare: NativeFunction(fname, args, s) -> Function(fname, args, s, None())
  
  declare-global-func = 
    ?FunctionNoReturn(_,_,_); declare-normalized

  declare-global-func =
    ?NativeFunction(_,_,_); declare-normalized
    
  // Do not go into an init action; otherwise the definitions will be declared globally
  declare-action = ?InitAction(_)
  declare-action = ?DataBindAction(_)
  declare-action = ?ValidateAction(_)
  declare-action = ?RenderAction(_)
  