module org/webdsl/dsl/languages/action/for-stmt

imports
  libstrategolib

imports
  libwebdsl-front

rules

  normalize-constructor :
    ForStmtNoFilter(x, s, e, block){anno*} -> ForStmt(x, s, e, None(), block){anno*}

  normalize-constructor :
    ForAllStmtNoFilter(x, s, block){anno*} -> ForAllStmt(x, s, None(), block){anno*}

rules

  rename-action :
    fs@ForStmt(x, srt, e1, f1, b1){anno*} -> ForStmt(y, srt2, e2, f2, b2){newanno*}
    with e2 := <rename-all> e1
       ; {| Rename, VarInTemplateContext
          : srt2 := <rename-all> srt
          ; y := <rename-bound-immutable(|srt2)> x
          ; rules(VarDecl : y -> fs)
          ; <declare-vars-in-entity-context> y
          ; f2 := <rename-all> f1
          ; b2 := <rename-all> b1
          ; newanno* := <forallstmt-annotations-for-query-optimization> anno*
          |}

  rename-action :
    fs@ForAllStmt(x, srt, f1, b1){anno*} -> ForAllStmt(y, srt2, f2, b2){newanno*}
    with {| Rename, VarInTemplateContext
          : srt2 := <rename-all> srt
          ; y := <rename-bound-immutable(|srt2)> x
          ; rules(VarDecl : y -> fs)
          ; <declare-vars-in-entity-context> y
          ; f2 := <rename-all> f1
          ; b2 := <rename-all> b1
          ; newanno* := <forallstmt-annotations-for-query-optimization> anno*
          |}

  forallstmt-annotations-for-query-optimization:
    anno* -> [ qopt*, args*, ent*, plain-anno* ]
    where plain-anno* := <remove-all(?FunctionArgs(_) <+ ?QueryOptimizations(_, _, _, _))> anno*
    ; qopt* := <(fetch-elem(?QueryOptimizations(_, _, _, _)); rename-all; ![<id>]) <+ ![]> anno*
    ; args* := <(FunctionArg; ![FunctionArgs(<id>)]) <+ ![]>
    ; ent* := <fetch-elem(?FunctionEntity(_)) < ![] + ![FunctionEntity(<InEntity <+ !None()>)]> anno*

  rename-action :
    fs@ForCountStmt(x, e1, e2, b1) -> ForCountStmt(y, e3, e4, b2)
    with e3 := <rename-all> e1
       ; e4 := <rename-all> e2
       ; {| Rename, VarInTemplateContext
          : y := <rename-bound-immutable(|SimpleSort("Int"))> x
          ; rules(VarDecl : y -> fs)
          ; <declare-vars-in-entity-context> y
          ; b2 := <rename-all> b1
          |}

  desugar-action :
    ForStmt(x, srt, e, f, b){anno*} -> ForStmt(x, srt, e, f, b){QueryOptimizations(joincandidates, joincandidatesgen, True(), []), anno*}
    where not(<fetch-elem(?QueryOptimizations(_, _, _, _))> anno*)
    ; <is-entity-type> srt
    with args* := <fetch-elem(?FunctionArgs(<id>)) <+ ![]> anno*
    ; (joincandidates, joincandidatesgen) := <get-query-optimizations>(b, x, srt, args*)

  desugar-action :
    def@ForAllStmt(_, SimpleSort(x_class), _, _){anno*} -> def{CachedEntity(), anno*}
    where not(<fetch-elem(?CachedEntity())> anno*)
    ; <fetch-elem(?QueryOptimizations([], [], querycondition, []))> anno* // Only make cacheable if query optimization did not add joins, because they are ignored when the query is cached
    ; <is-cached-entity> x_class

  desugar-action :
    def@ForAllStmt(x, srt, f, body){anno*} -> def{qoanno, anno*}
    where cond := <?Filter(<id>, _, _) <+ !True()> f
    ; qoanno := <common-query-optimization-forallstmt(|x, srt, cond, anno*)> body

  common-query-optimization-forallstmt(|x, srt, cond, anno*) :
    body -> QueryOptimizations(joincandidates, joincandidatesgen, querycondition2, conditionjoins)
    where not(<fetch-elem(?QueryOptimizations(_, _, _, _))> anno*)
    with args* := <fetch-elem(?FunctionArgs(<id>)) <+ ![]> anno*
    ; ent := <fetch-elem(?FunctionEntity(<id>)) <+ !None()> anno*
    ; thisvar := <(collect(?Var("this")); make-set; ?[Var(thisunique)]; ![("this", thisunique, "this"{"queryoptimization_parentarg_this"}, SimpleSort(ent))]) <+ ![]> (body, cond)
    ; props := <?None() < ![] + (get-all-entity-properties-for-rename(|"queryoptimization_parentarg"); <conc>(thisvar, <id>))> ent
    ; propargs* := <map({\ (name, uniquename, safename, srt) -> Arg(safename, srt) \})> props
    ; {| RenamePropInFunction, RenamePropInQueryOptimization // Here we temporarily rename the Var()s in the function body for our analysis
        : <map({\
                  (name, uniquename, safename, srt) -> <id>
                  with rules (
                                RenamePropInFunction : Var(uniquename) -> Var(safename)
                                RenamePropInQueryOptimization : Var(safename) -> Var(uniquename)
                             )
                \})> props
        ; body2 := <alltd(RenamePropInFunction)> body
        ; cond2 := <alltd(RenamePropInFunction)> cond
        ; (joincandidates, joincandidatesgen, querycondition, conditionjoins) := <get-query-optimizations>(body2, x, srt, [args*, propargs*], cond2)
        ; querycondition2 := <alltd(RenamePropInQueryOptimization)> querycondition // Joins do not have to be renamed, because they do not contain vars
      |}

rules

  constraint-error-action : ForCountStmt(x, e1, e2, b) -> <expression-type-constraint(|SimpleSort("Int"))> e1
  constraint-error-action : ForCountStmt(x, e1, e2, b) -> <expression-type-constraint(|SimpleSort("Int"))> e2

  expression-type-constraint(|type) :
    e -> <add-error(|["Expression should be of type ",typename])>
    with  SimpleSort(typename) := type
    where not(<type-compatible> (type, <type-of> e))

  constraint-error-action : ForStmt(_, srt, e, _, _)      -> <for-constraint-error(|srt, e)>
