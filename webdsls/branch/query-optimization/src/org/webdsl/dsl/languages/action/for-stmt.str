module org/webdsl/dsl/languages/action/for-stmt

imports
  libstrategolib

imports
  libwebdsl-front

rules

  normalize-constructor :
    ForStmtNoFilter(x, s, e, block){anno*} -> ForStmt(x, s, e, None(), block){anno*}

  normalize-constructor :
    ForAllStmtNoFilter(x, s, block){anno*} -> ForAllStmt(x, s, None(), block){anno*}

rules

  rename-action :
    fs@ForStmt(x, srt, e1, f1, b1){anno*} -> ForStmt(y, srt2, e2, f2, b2){newanno*}
    with e2 := <rename-all> e1
       ; {| Rename, VarInTemplateContext, IteratorContext
          : srt2 := <rename-all> srt
          ; y := <rename-bound-immutable(|srt2)> x
          ; rules(
              VarDecl : y -> fs
              IteratorContext :+= Arg(y, srt2)
            )
          ; <declare-vars-in-entity-context> y
          ; f2 := <rename-all; try(rename-query-condition-anno)> f1
          ; b2 := <rename-all> b1
          ; newanno* := <update-iterator-context; common-for-stmt-update-annotations; rename-query-optimization-annos> anno*
          |}

  rename-action :
    fs@ForAllStmt(x, srt, f1, b1){anno*} -> ForAllStmt(y, srt2, f2, b2){newanno*}
    with {| Rename, VarInTemplateContext, IteratorContext
          : srt2 := <rename-all> srt
          ; y := <rename-bound-immutable(|srt2)> x
          ; rules(
              VarDecl : y -> fs
              IteratorContext :+= Arg(y, srt2)
            )
          ; <declare-vars-in-entity-context> y
          ; f2 := <rename-all; try(rename-query-condition-anno)> f1
          ; b2 := <rename-all> b1
          ; newanno* := <update-iterator-context; common-for-stmt-update-annotations; rename-query-optimization-annos> anno*
          |}

  common-for-stmt-update-annotations :
    anno* -> [ args*, ent*, templ*, plain-anno* ]
    where plain-anno* := <remove-all(?FunctionArgs(_) <+ ?TemplateArgs(_) <+ ?TemplateName(_))> anno*
    ; if templName := <InTemplate <+ InPage> then // For loop inside action, inside template/page
        templ* := [TemplateName(templName),TemplateArgs(<TemplateArg <+ ![]>)]
        ; args* := []
        ; ent* := []
      else
        templ* := []
        ; args* := <(FunctionArg; ![FunctionArgs(<id>)]) <+ ![]>
        ; if x_class := <InEntity> then
            ent* := <fetch-elem(?FunctionEntity(_)) < ![] + ![FunctionEntity(x_class)]> anno*
          else
            ent* := []
          end
      end

  rename-action :
    fs@ForCountStmt(x, e1, e2, b1) -> ForCountStmt(y, e3, e4, b2)
    with e3 := <rename-all> e1
       ; e4 := <rename-all> e2
       ; {| Rename, VarInTemplateContext
          : y := <rename-bound-immutable(|SimpleSort("Int"))> x
          ; rules(VarDecl : y -> fs)
          ; <declare-vars-in-entity-context> y
          ; b2 := <rename-all> b1
          |}

  add-backend-annotation :
    def@ForStmt(x, srt, e, f, b){anno*} -> ForStmt(x, srt, e, f, b2){IsOptimized(),qc,tokeep*}
    where <is-entity-type> srt
    ; <not(fetch-elem(?IsOptimized()))> anno*
    with qa := <fetch-elem(is-query-analysis) <+ (<debug(!"NotOptimized:")> ("ForStmt", x, srt); get-empty-query-analysis)> anno* 
    ; args := <fetch-elem(?FunctionArgs(<id>)) <+ ![]> anno*
    ; tokeep* := <remove-all(is-query-analysis)> anno*
    ; bindableargs := <filter(query-optimization-bindable-argument)> args
    ; (qc, b2) := <query-analysis-to-query-optimizition(|qa,x,srt,bindableargs)> b

  desugar-action :
    ForStmt(x, srt, e, f, b){anno*} -> ForStmt(x, srt, e, f, b2){newanno*}
    where <is-entity-type> srt
    ; <not(fetch-elem(?TemplateName(_)))> anno*
    ; args* := <fetch-elem(?FunctionArgs(<id>)) <+ ![]> anno*
    ; <fetch-elem(?IteratorContext(ic*))> anno*
    ; thisargs* := <(fetch-elem(?FunctionEntity(x_class)); <get-this-args(|x_class)> b) <+ ![]> anno*
    ; (b2, newanno*) := <with-thisentity(perform-query-analysis(|("ForStmt", x, srt), [args*,ic*,thisargs*],True())|anno*)> (b, anno*)

  desugar-action :
    ForStmt(x, srt, e, f, b){anno*} -> ForStmt(x, srt, e, f, b2){newanno*}
    where <is-entity-type> srt
    ; <fetch-elem(?TemplateArgs(args*))> anno*
    ; <fetch-elem(?TemplateName(tname))> anno*
    ; <fetch-elem(?IteratorContext(ic*))> anno*
    ; tgenname := <normalize-signature; generate-template-name> (tname, args*)
    ; {| CurrentTemplateName
      : rules( CurrentTemplateName := tgenname )
      ; (b2, newanno*) := <perform-query-analysis(|("ForStmt", x, srt), [args*,ic*],True())> (b, anno*)
    |}

  add-backend-annotation :
    def@ForAllStmt(_, SimpleSort(x_class), _, _){anno*} -> def{CachedEntity(), anno*}
    where not(<fetch-elem(?CachedEntity())> anno*)
    ; <get-query-optimization-anno; ?QueryOptimizations([], querycondition)> anno* // Only make cacheable if query optimization did not add joins, because they are ignored when the query is cached
    ; <is-cached-entity> x_class

  add-backend-annotation :
    def@ForAllStmt(x, srt, f, b){anno*} -> ForAllStmt(x, srt, f, b){IsOptimized(),qc,tokeep*}
    where <not(fetch-elem(?IsOptimized()))> anno*
    with qa := <fetch-elem(is-query-analysis) <+ (<debug(!"NotOptimized:")> ("ForAllStmt", x, srt); get-empty-query-analysis)> anno* 
    ; args := <fetch-elem(?FunctionArgs(<id>)) <+ ![]> anno*
    ; tokeep* := <remove-all(is-query-analysis)> anno*
    ; bindableargs := <filter(query-optimization-bindable-argument)> args
    ; (qc, b2) := <query-analysis-to-query-optimizition(|qa,x,srt,bindableargs)> b

  desugar-action :
    def@ForAllStmt(x, srt, f, body1){anno*} -> ForAllStmt(x, srt, f, body2){newanno*}
    where not(<fetch-elem(?TemplateName(_))> anno*)
    ; <fetch-elem(?IteratorContext(ic*))> anno*
    with cond := <?Filter(<id>, _, _) <+ !True()> f
    where args* := <fetch-elem(?FunctionArgs(<id>)) <+ ![]> anno*
    ; thisargs* := <(fetch-elem(?FunctionEntity(x_class)); <get-this-args(|x_class)> body1) <+ ![]> anno*
    ; (body2, newanno*) := <with-thisentity(perform-query-analysis(|("ForAllStmt", x , srt), [args*,ic*,thisargs*],cond)|anno*)> (body1, anno*)

  desugar-action :
    def@ForAllStmt(x, srt, f, body1){anno*} -> ForAllStmt(x, srt, f, body2){newanno*}
    with cond := <?Filter(<id>, _, _) <+ !True()> f
    where <fetch-elem(?TemplateArgs(args*))> anno*
    ; <fetch-elem(?TemplateName(tname))> anno*
    ; <fetch-elem(?IteratorContext(ic*))> anno*
    ; tgenname := <normalize-signature; generate-template-name> (tname, args*)
    ; {| CurrentTemplateName
      : rules( CurrentTemplateName := tgenname )
      ; (body2, newanno*) := <perform-query-analysis(|("ForAllStmt", x , srt), [args*,ic*],cond)> (body1, anno*)
    |}

rules

  constraint-error-action : ForCountStmt(x, e1, e2, b) -> <expression-type-constraint(|SimpleSort("Int"))> e1
  constraint-error-action : ForCountStmt(x, e1, e2, b) -> <expression-type-constraint(|SimpleSort("Int"))> e2

  expression-type-constraint(|type) :
    e -> <add-error(|["Expression should be of type ",typename])>
    with  SimpleSort(typename) := type
    where not(<type-compatible> (type, <type-of> e))

  constraint-error-action : ForStmt(_, srt, e, _, _)      -> <for-constraint-error(|srt, e)>
