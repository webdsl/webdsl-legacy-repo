module org/webdsl/dsl/languages/action/rename

signature
  constructors
    EntityFunctionAnno : Term    

rules

  rename-action :
    v@VarDecl(x, srt){anno*} -> VarDecl(y, srt2){anno*}
    where InDef
    with  srt2 := <rename-all> srt 
        ; y := <rename-bound(|srt2)> x
        ; <declare-vars-in-context> y
        ; rules(VarDecl : y -> v)

  rename-action :
    v@VarDeclInit(x, srt, e){anno*} -> VarDeclInit(y, srt2, e'){anno*}
    where InDef
    with  srt2 := <rename-all> srt
        ; e' := <rename-all> e
        ; y := <rename-bound(|srt2)> x
        ; <declare-vars-in-context> y
        ; rules(VarDecl : y -> v)
        
  rename-action :
    v@VarDeclInitInferred(x, e){anno*} -> VarDeclInitInferred(y, e'){anno*}
    where InDef
    with  e' := <rename-all> e
        ; srt := <type-of;strip-immutable-anno <+ !"unknown"> e'
          // type-of can fail if the expression cannot be typed, in that case the var will not be declared and constraint error triggers
          // strip ImmutableReference annotation, because x will be assignable even if e wasn't
        ; y := <rename-bound(|srt)> x 
        ; <declare-vars-in-context> y
        ; rules(VarDecl : y -> v)

  rename-action :
    v@VarDeclInit(x, srt, e{anno*}){anno_v*} -> VarDeclInit(x, srt, e'{ObjectCreationSecretTypesNeedDigests(),anno*}){anno_v*}
    where not(InDef)//needed for inital rename
        ; not(IsGlobal)//needed for rename from model-to-model innermost without context
    with  e' := <rename-all> e
        
  rename-action :
    v@VarDeclInitInferred(x, e{anno*}){anno_v*} -> VarDeclInitInferred(x, e'{ObjectCreationSecretTypesNeedDigests(),anno*}){anno_v*}
    where not(InDef)//needed for inital rename
        ; not(IsGlobal)//needed for rename from model-to-model innermost without context
    with  e' := <rename-all> e
        
   rename-action :
     s@SimpleSort(_) -> s2
     with  s2 := <rename-type> s
         
   rename-action :
     GenericSort(g, types){anno*} -> GenericSort(g, types2){anno*} 
     where not( g := "SDFInput")
     with  types2 := <rename-all> types

   /**
    *  Important, takes care of scoping if-then-else blocks in action code and in templates
    */ 
   rename-action :
    Block(stat1*){anno*} -> Block(stat2*){anno*}
    with {| Rename, VarInTemplateContext
          : stat2* := <rename-all> stat1*
          |}
          
  rename-action :
    Function(x, farg1*, srt, b1){anno*} -> newfun
    where not(InEntity)
    with {| Rename, InDef, FunctionArg, VarInTemplateContext
          : rules ( InDef := True() )
          ; farg2* := <map(rename)> farg1*
          ; rules ( FunctionArg := farg2* )
          ; <declare-args-in-context> farg2*
          ; b2 := <rename-all> b1
          ; newanno* := <try(update-query-optimization-anno(|"", x, srt, farg1*))> anno*
          |}
        ; newfun := Function(x, farg2*, srt, b2){newanno*}
        ; store-global-function

  update-query-optimization-anno(|ent,x,srt,args):
    anno* -> newanno*
    where not(<fetch-elem(?QueryOptimizationVars(_, _, _, _))> anno*)
    ; GenericSort(_, [<is-entity-type>]) := srt
    with varprefix := <?"" < !x + !<concat-strings>["ent_", ent]> ent
    ; joinvar := "joins"{<concat-strings; newname-webdsl>[varprefix, "_joins"]}
    ; queriesvar := "queries"{<concat-strings; newname-webdsl>[varprefix, "_queries"]}
    ; condvar := "condition"{<concat-strings; newname-webdsl>[varprefix, "_condition"]}
    ; condjoinsvar := "conditionjoins"{<concat-strings; newname-webdsl>[varprefix, "_conditionjoins"]}
    ; newanno* := <conc>([QueryOptimizationVars(joinvar, queriesvar, condvar, condjoinsvar)],[anno*])
    ; t* := <map(?Arg(_,<id>); strip-annos)> args
    ; if "" := ent then
      rules(FunctionHasQueryOptimization: (None(), x, t*) -> QueryOptimizationVars(joinvar, queriesvar, condvar, condjoinsvar))
      else
      rules(FunctionHasQueryOptimization: (ent, x, t*) -> QueryOptimizationVars(joinvar, queriesvar, condvar, condjoinsvar))
      end

  update-query-optimization-anno(|x,srt,args):
    anno* -> newanno*
    where <fetch-elem(?QueryOptimizationVars(joinvar, queriesvar, condvar, condjoinsvar))> anno*
    ; GenericSort(_, [<is-entity-type>]) := srt
    with newanno* := <remove-all(?QueryOptimizationVars(_, _, _, _)); ![QueryOptimizationVars(<rename>joinvar, <rename>queriesvar, <rename>condvar, <rename>condjoinsvar)|<id>]> anno*

  rename-action :
    Function(x, farg1*, srt, b1){anno*} -> newfun
    where x_class := <InEntity>
    with {| Rename, InDef, FunctionArg, VarInTemplateContext
          : rules ( InDef := True() )
          ; farg2* := <map(rename)> farg1*
          ; rules ( FunctionArg := farg2* )
          ; <declare-args-in-context> farg2*
          ; b2 := <rename-all> b1
          ; newanno* := <try(update-query-optimization-anno(|x_class, x, srt, farg1*))> anno*
          |}
        ; newfun := <add-anno(|EntityFunctionAnno());add-anno(|FunctionEntity(x_class))> Function(x, farg2*, srt, b2){newanno*}
        ; store-entity-function(|x_class)

rules
             
  // store current function definition with renamed body       
  store-entity-function(|x_class) =
    ?def@Function(f, fargs, s, b)
    ; with(
        (n, t*) := <normalize-signature> (f, fargs)
      ; x_class_no_anno := <strip-annos> x_class
      ; rules( EntityFunctionDecl : (x_class_no_anno, n, t*) -> def )
      )
  
  // store current function definition with renamed body    
  store-global-function =
    ?def@Function(f, fargs, s, b){anno*}
    ; with( 
        (n, t*) := <normalize-signature> (f, fargs)
      ; rules( FunctionDecl : (n, t*) -> def) 
      )

rules

  /**
   *  Used for rename of many argument types, including templates, functions
   */
  rename-action :
    a@Arg(x, srt){anno*} -> Arg(y, srt2){qo*, qa*, plain-anno*} 
    with srt2 := <rename-type> srt
       ; y := <rename-bound-immutable(|srt2)> x
       ; plain-anno* := <remove-all(is-query-optimization <+ is-query-analysis)> anno*
       ; qo* := <(fetch-elem(is-query-optimization); alltd(\ Var(x) -> Var(y) \); ![<id>]) <+ ![]> anno*
       ; qa* := <(fetch-elem(is-query-analysis); alltd(\ Var(x) -> Var(y) \); ![<id>]) <+ ![]> anno*
       ; rules(VarDecl : y -> a)
