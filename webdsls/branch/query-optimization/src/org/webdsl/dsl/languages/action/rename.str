module org/webdsl/dsl/languages/action/rename

signature
  constructors
    EntityFunctionAnno : Term    

rules

  rename-action :
    v@VarDecl(x, srt) -> VarDecl(y, srt2)
    where InDef
    with  srt2 := <rename-all> srt 
        ; y := <rename-bound(|srt2)> x
        ; <declare-vars-in-context> y
        ; rules(VarDecl : y -> v)

  rename-action :
    v@VarDeclInit(x, srt, e) -> VarDeclInit(y, srt2, e')
    where InDef
    with  srt2 := <rename-all> srt
        ; e' := <rename-all> e
        ; y := <rename-bound(|srt2)> x
        ; <declare-vars-in-context> y
        ; rules(VarDecl : y -> v)
        
  rename-action :
    v@VarDeclInitInferred(x, e) -> VarDeclInitInferred(y, e')
    where InDef
    with  e' := <rename-all> e
        ; srt := <type-of;strip-immutable-anno <+ !"unknown"> e'
          // type-of can fail if the expression cannot be typed, in that case the var will not be declared and constraint error triggers
          // strip ImmutableReference annotation, because x will be assignable even if e wasn't
        ; y := <rename-bound(|srt)> x 
        ; <declare-vars-in-context> y
        ; rules(VarDecl : y -> v)

  rename-action :
    v@VarDeclInit(x, srt, e{anno*}) -> VarDeclInit(x, srt, e'{ObjectCreationSecretTypesNeedDigests(),anno*})
    where not(InDef)//needed for inital rename
        ; not(IsGlobal)//needed for rename from model-to-model innermost without context
    with  e' := <rename-all> e
        
  rename-action :
    v@VarDeclInitInferred(x, e{anno*}) -> VarDeclInitInferred(x, e'{ObjectCreationSecretTypesNeedDigests(),anno*})
    where not(InDef)//needed for inital rename
        ; not(IsGlobal)//needed for rename from model-to-model innermost without context
    with  e' := <rename-all> e
        
   rename-action :
     s@SimpleSort(_) -> s2
     with  s3 := <rename-type> s
         ; s2 := <rename-sort-for-generic> s3
         
   rename-action :
     GenericSort(g, types) -> GenericSort(g, types2)
     where not( g := "SDFInput")
     with  types2 := <rename-all> types

   /**
    *  Important, takes care of scoping if-then-else blocks in action code and in templates
    */ 
   rename-action :
    Block(stat1*) -> Block(stat2*)
    with {| Rename, VarInTemplateContext
          : stat2* := <rename-all> stat1*
          |}
          
  rename-action :
    Function(x, farg1*, srt, b1) -> Function(x, farg2*, srt, b2)
    where not(InEntity)
    with {| Rename, InDef, VarInTemplateContext
          : rules ( InDef := True() )
          ; farg2* := <map(rename)> farg1*
          ; <declare-args-in-context> farg2*
          ; b2 := <rename-all> b1
          |}

  rename-action :
    FunctionNoReturn(x, farg1*, b1) -> FunctionNoReturn(x, farg2*, b2)
    where not(InEntity)
    with {| Rename, InDef, VarInTemplateContext
          : rules ( InDef := True() )
          ; farg2* := <map(rename)> farg1*
          ; <declare-args-in-context> farg2*
          ; b2 := <rename-all> b1
          |}

  rename-action :
    Function(x, farg1*, srt, b1){anno*} -> <add-new-anno(|EntityFunctionAnno())> Function(x, farg2*, srt, b2){anno*}
    where InEntity
    with {| Rename, InDef, VarInTemplateContext
          : rules ( InDef := True() )
          ; farg2* := <map(rename)> farg1*
          ; <declare-args-in-context> farg2*
          ; b2 := <rename-all> b1
          |}

  rename-action :
    FunctionNoReturn(x, farg1*, b1){anno*} -> <add-new-anno(|EntityFunctionAnno())> FunctionNoReturn(x, farg2*, b2){anno*}
    where InEntity
    with {| Rename, InDef, VarInTemplateContext
          : rules ( InDef := True() )
          ; farg2* := <map(rename)> farg1*
          ; <declare-args-in-context> farg2*
          ; b2 := <rename-all> b1
          |}

  /**
   *  Used for rename of many argument types, including templates, functions
   */
  rename-action :
    a@Arg(x, srt){anno*} -> Arg(y, srt2)
    where <not(fetch-elem(?QueryOptimizations(_, _, _, _)))> anno*
    with srt2 := <rename-type> srt
       ; y := <rename-bound-immutable(|srt2)> x
       ; rules(VarDecl : y -> a)

  // we need to keep query optimizations
  rename-action :
    a@Arg(x, srt){anno*} -> Arg(y, srt2){QueryOptimizations(jp, jpgen, newcond, condjoin)}
    where <fetch-elem(?QueryOptimizations(jp, jpgen, cond, condjoin))> anno*
    with srt2 := <rename-type> srt
       ; y := <rename-bound-immutable(|srt2)> x
       ; newcond := <alltd(\ Var(x) -> Var(y) \)> cond
       ; rules(VarDecl : y -> a)
