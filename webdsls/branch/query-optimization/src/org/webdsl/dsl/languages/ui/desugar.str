module org/webdsl/dsl/languages/ui/desugar

strategies

  //desugar-ui = DeriveInput
  desugar-ui = DeriveOutput
  
rules //desugar dummy templatecall

  desugar-ui : 
    Define(mods, name, args, targs, elems){anno*} -> result
    where <oncetd(?TemplateCall("dummy",_,_,TemplateBody(_)))> elems
    with  elems2 := <topdown(try(inline-dummy-contents))> elems
        ; not(<oncetd(?TemplateCall("dummy",_,_,TemplateBody(_)))> elems2; debug(!"Internal error: dummy templates should have been removed."))
        ; result := Define(mods, name, args, targs, elems2){anno*}
         
  inline-dummy-contents =
    is-list
  ; fetch(?TemplateCall("dummy",_,_,TemplateBody(_)))
  ; map(try(?TemplateCall("dummy",_,_,TemplateBody(<id>))))
  ; flatten-list

  desugar-ui :
    inp@Define(mod*, x,farg1*, req*, elem1*){anno*} -> def{newanno*}
    where not(<fetch-elem(is-query-analysis)> anno*)
        ; genname := <generate-template-name-fargs>(x, farg1*)
        ; not(<fetch(Local)> mod*) // We analyze local redefines after they have been lifted
        ; <template-body-ready> elem1*
		    ; {| CurrentTemplateName
		      : rules(CurrentTemplateName := genname )
		      ; (elem2*, newanno*) := <perform-query-analysis(|("Define", genname), farg1*,True())> (elem1*, anno*)
		    |}
        ; def := Define(mod*, x, farg1*, req*, elem2*){newanno*}
        ; rules ( CurrentTemplateDecl : genname -> def) // We need the argument annotations in other desugar rules, so do not wait for rename to update

  add-backend-annotation :
    def@Define(mod*, x,farg1*, req*, elem1*){anno*} -> Define(mod*, x,farg2*, req*, elem1*){qo,tokeep*}
    where <not(fetch-elem(is-query-optimization))> anno*
    with analysis := <fetch-elem(is-query-analysis) <+ (<debug(!"NotOptimized:")> ("Define", <generate-template-name-fargs>(x, farg1*)); get-empty-query-analysis)> anno*
      ; tokeep* := <remove-all(is-query-analysis)> anno*
      ; qo := <get-empty-query-optimization>
      ; bindableargs := <filter(query-optimization-bindable-argument)/*;debug(!"bindable:")*/> farg1*
      ; farg2* := <map(try(add-query-optimization-to-argument(|analysis,bindableargs)))/*;debug(!"argout:")*/> farg1*
      /*; try(<strip-annos; ?"bibliography"> x; <filter(get-anno(is-query-optimization)); debug(!"bibliographyarg:")> farg2*)*/
