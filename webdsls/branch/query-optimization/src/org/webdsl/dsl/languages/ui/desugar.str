module org/webdsl/dsl/languages/ui/desugar

strategies

  //desugar-ui = DeriveInput
  desugar-ui = DeriveOutput
  
rules //desugar dummy templatecall

  desugar-ui : 
    Define(mods, name, args, targs, elems){anno*} -> result
    where <oncetd(?TemplateCall("dummy",_,_,TemplateBody(_)))> elems
    with  elems2 := <topdown(try(inline-dummy-contents))> elems
        ; not(<oncetd(?TemplateCall("dummy",_,_,TemplateBody(_)))> elems2; debug(!"Internal error: dummy templates should have been removed."))
        ; result := Define(mods, name, args, targs, elems2){anno*}
         
  inline-dummy-contents =
    is-list
  ; fetch(?TemplateCall("dummy",_,_,TemplateBody(_)))
  ; map(try(?TemplateCall("dummy",_,_,TemplateBody(<id>))))
  ; flatten-list


  desugar-ui :
    Define(mod*, x,farg1*, req*, elem1*){anno*} -> Define(mod*, x,farg2*, req*, elem1*){QueryOptimizations([], [], True(), []), anno*}
    where not(InPage <+ InTemplate)
        ; not(<fetch(Page)> mod*)
        ; not(<fetch(Email)> mod*)
        ; not(<fetch-elem(?TemplateDefineNameBeforeLifting(_))> mod*)
        ; not(<fetch-elem(?QueryOptimizations(_, _, _, _))> anno*)
        ; genname := <generate-template-name-fargs> (x, farg1*)
        ; args := <filter(not(?Arg(_, <is-entity-type; not(?SimpleSort("Entity"))>)))> farg1*
        ; farg2* := <map(/*try(where(?Arg(_, <is-entity-type; not(?SimpleSort("Entity"))>));info(|[x, "#", <id>])); id*/try(add-optimization-to-template-argument(|genname,elem1*,args)))> farg1*
          
  add-optimization-to-template-argument(|genname,def,args) :
    arg@Arg(x, srt){anno*} -> arg{QueryOptimizations([], [], True(), []), anno*}
/*    arg@Arg(x, srt){anno*} -> arg{QueryOptimizations(joincandidates, joincandidatesgen, True(), []), anno*}
    where <is-entity-type; not(?SimpleSort("Entity")); ?SimpleSort(x_class)> srt//; info(|[genname, "#(", x, " as ", x_class, ")..."])
    with {| PassedTemplate
          : rules( PassedTemplate : genname )
          ; (joincandidates, joincandidatesgen) := <get-query-optimizations>(def, x, srt, args)
          |}*/
    //; info(|[genname, "#(", x, " as ", x_class, ").", checkprop, "  =>  ", joincandidates2, "  =>  ", joincandidatesgen2])


  get-check-prop-normal(|x_class) :
    (joincandidates, joincandidatesgen) -> (checkprop, joincandidates2, joincandidatesgen) 
    where checkprop := <filter(string-tokenize(|['.']); ?[<ltrim-chars(?'_')>|_]; where(<PropertyDecl> (x_class, <id>))); ?[<id>|_]> joincandidates
    ; checkelem := <concat-strings>["_", checkprop]
    ; joincandidates2 := <where(fetch-elem(?checkelem)); remove-all(?checkelem); ![checkelem|<id>]> joincandidates
      
  get-check-prop-generic(|x_class) :
    ([], joincandidatesgen) -> (checkprop, [], joincandidatesgen2) 
    where checkprop := <flatten-list; filter(string-tokenize(|['.']); ?[<ltrim-chars(?'_')>|_]; where(<PropertyDecl> (x_class, <id>))); ?[<id>|_]> joincandidatesgen
    ; checkelem := <concat-strings>["_", checkprop]
    ; [gen] := <filter(where(fetch-elem(?checkelem)))>joincandidatesgen
    ; newgen := <remove-all(?checkelem); ![checkelem|<id>]> gen 
    ; joincandidatesgen2 := <remove-all(?gen); ![newgen|<id>]> joincandidatesgen
