module org/webdsl/dsl/transformation/rename-identifiers

imports 
  libstrategolib
  
imports 
  libwebdsl-front
  org/webdsl/dsl/transformation/-
  org/webdsl/dsl/typechecker/-
  org/webdsl/dsl/languages/data-model/-
  org/webdsl/dsl/languages/ui/-

rules

  rename-identifiers-top =
    map-toplevel(
      fail,
      {| ExistingRenamings, GlobalToLocalMap:
        with-toplevel-name(
          rename-identifiers
        )
      |}
    )
    
  rename-identifiers = alltd(rename-bound-variables)

  rename-bound-variables =
       exclude-from-var-renaming
    <+ ExcludeFromVarRenaming  
    //<+ Define(id,id,rename-identifiers,rename-identifiers) // otherwise local template definitions get renamed and dynamic scoping breaks (eg the local body will be inserted as body12 in the lookup hashmap)
    <+ check-for-templatebody-cons
    <+ rename-template-def-id
    <+ rename-template-call-id
    <+ rename-action-def-id
    <+ rename-test-id
    <+ rename-query-optimizations-anno
    <+ use-local-renaming
  
  exclude-from-var-renaming = ?"this"
  
  use-local-renaming :
    x{anno*} -> z{new-anno*}
    where <is-string> x
        ; y := <fetch-elem(is-string)> anno*
        ; <remove-all(?y)> anno*
        ; ![OriginalNameAnno(x{}) | <id>]
        ; ?new-anno*
        ; z := <global-to-local-name(|<strip-annos> x)> y
        
  // I have to rename variables inside the QueryOptimizations annotation, the others do not do this, for example use-local-renaming works only on strings not on loops 
  rename-query-optimizations-anno :
  	x{anno*} -> x2{new-anno*}
  	where <?ForAll(_, _, _, _, _) <+ ?For(_, _, _, _, _, _) <+ ?ForAllStmt(_, _, _, _) <+ ?ForStmt(_, _, _, _, _)>x
  	  ; y := <fetch-elem(?QueryOptimizations(_, _))> anno*
  	  ; toKeep := <remove-all(?QueryOptimizations(_, _) <+ ?QueryOptimizationVars(_, _, _, _))> anno*
  	  ; newOpt := <rename-identifiers> y
      ; <(fetch-elem(?QueryOptimizationVars(_, _, _, _)); rename-identifiers; !<concat>[ [newOpt], [<id>], toKeep]) <+ ![newOpt | toKeep]> anno*
      ; ?new-anno*
      ; x2 := <all(rename-identifiers)> x

  rename-query-optimizations-anno :
    tc@ThisCall(_, _){anno*} -> tc2{newanno*}
    where y := <fetch-elem(?QueryOptimizations(_, _, _, _, _, _)); rename-identifiers> anno*
    ; toKeep := <remove-all(?QueryOptimizations(_, _, _, _, _, _))> anno*
    ; newanno* := [y|toKeep]
    ; tc2 := <all(rename-identifiers)> tc

  rename-query-optimizations-anno :
    function@Function(_, _, _, _){anno*} -> function2{newanno*}
    where y := <fetch-elem(?QueryOptimizationVars(_, _, _, _)); rename-identifiers> anno*
    ; toKeep := <remove-all(?QueryOptimizationVars(_, _, _, _))> anno*
    ; newanno* := [y|toKeep]
    ; function2 := <all(rename-identifiers)> function

  rename-query-optimizations-anno :
    Arg(x, srt){anno*} -> Arg(z, srt2){new-anno*}
    where  y := <fetch-elem(?QueryOptimizations(_, _))> anno*
			; <remove-all(?y)> anno*
			; ![<rename-identifiers> y | <id>]
			; ?new-anno*
			; z := <rename-identifiers> x
			; srt2 := <rename-identifiers> srt
  
  // Make a locally unique name from a globally unique name
  global-to-local-name(|x) = GlobalToLocalMap
    
  global-to-local-name(|x): y -> z
    where TopLevelDefineName => toplevel
        ; n := <ExistingRenamings; inc <+ !0> x
    with  z := <concat-strings> [x, <int-to-string> n]
        ; rules(
            ExistingRenamings : x -> n
            GlobalToLocalMap : y -> z
          )
          
   use-global-renaming: x{anno*} -> y{anno2*, OriginalNameAnno(x)}
    with  y := <fetch-elem(is-string)> anno*
        ; anno2* := <remove-all(?y)> anno*
    
rules // templates

  rename-template-def-id :
    Define(mod*, x, farg*, targs, elem*){anno*} ->
    Define(mod*, x1{orig}, <rename-identifiers> farg*, targs, <rename-identifiers> elem*){anno*}
    where <fetch(?Page())> mod*
       <+ <fetch(?Email())> mod* //no overloading for emails yet
    with  x1 := <if <fetch(TemplateModOverride)> mod* then <concat-strings>["$Override$",x] else !x end>
    with  orig := OriginalNameAnno(x{})
                 
  rename-template-def-id :
    Define(mod*, x, farg*, targs, elem*){anno*} ->
    Define(mod*, y{orig}, <rename-identifiers> farg*, targs, <rename-identifiers> elem*){anno*}
    where not(<fetch(?Page())> mod*)
        ; not(<fetch(?Email())> mod*)
    with  sig@(n,t*) := <normalize-signature> (x,farg*)
        ; y := <TemplateNewName> sig
        ; orig := OriginalNameAnno(x{})
    
  check-for-templatebody-cons : // catches typical omission in desugaring rules: missing TemplateBody
    TemplateCall(x, arg*, passign*, elem*) -> <debug(!"INTERNAL ERROR: found template that is missing TemplateBody constructor around its elements: "); <exit> 1> 
    where not(<?TemplateBody(_)> elem*) 
    
  rename-template-call-id :
    tc@TemplateCall(x, arg*, passign*, TemplateBody(elem*)){anno*}
    -> TemplateCall(y{orig}, <rename-identifiers> arg*, <rename-identifiers> passign*, TemplateBody(<rename-identifiers> elem*)){new-anno*}
    where y := <CallToDefinedTemplate> x
    with  orig := OriginalNameAnno(x{})
        ; <rename-identifiers> anno*
        ; ![CallToDefinedAnno() | <id>]
        ; ![CalledTemplateArgs(<TemplateArguments> y) | <id>]
        ; ?new-anno*

  rename-template-call-id :
    tc@TemplateCall(x, arg*, passign*, TemplateBody(elem*)){anno*} 
    -> TemplateCall(x{orig}, <rename-identifiers> arg*, <rename-identifiers> passign*, TemplateBody(<rename-identifiers> elem*)){new-anno*} 
    where types := <CallToRequiredTemplate> x
    with  orig := OriginalNameAnno(x{})
        ; <rename-identifiers> anno*
        ; ![CallToRequiredAnno() | <id>]
        ; ![CalledTemplateArgs(<map(!Arg("dummyname",<id>))> types) | <id>]
        ; ?new-anno*

  rename-template-call-id :
    tc@TemplateCall(x, arg*, passign*, TemplateBody(elem*)){anno*}
    -> TemplateCall(y, <rename-identifiers> arg*, <rename-identifiers> passign*, TemplateBody(<rename-identifiers> elem*)){<rename-identifiers> anno*}
    where <CallToBuiltInTemplate> x
    with  y := <strip-annos> x //code generator assumes that built-in templates don't have annotations on the name
  
  /** many desugarings, such as output(String) -> text(String) currently do not rename the resulting call, 
   *  therefore this sanity check is disabled for now. 
   *  @TODO call rename on all generated templatecalls and enable this rule, it will catch template lookup issues early
  rename-template-call-id :
    tc@TemplateCall(x, arg*, passign*, TemplateBody(elem*)){anno*} -> tc
    where not(<CallToBuiltInTemplate <+ CallToBuiltInTemplate <+ CallToRequiredTemplate> x)
    with  debug(!"Internal error in transformation/rename-identifiers.str: templatecall could not be resolved as declared, built-in, or required: ");<exit> 1
   */ 
      
  // Actions are lifted to toplevel elements, so their names should remain globally unique
  rename-action-def-id: 
      Action(amod*, nm1, args, b) ->
      Action(amod*, <use-global-renaming> nm1, <rename-identifiers> args, <rename-identifiers> b)

  rename-action-def-id:
      ActionCall(name, args){anno*} -> ActionCall(<use-global-renaming> name, <rename-identifiers> args){anno*}
       
  rename-test-id:
      Test(nm1, body) -> Test(<use-global-renaming> nm1, <rename-identifiers> body)
