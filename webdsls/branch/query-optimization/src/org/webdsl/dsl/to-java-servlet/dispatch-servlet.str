module org/webdsl/dsl/to-java-servlet/dispatch-servlet

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules

  generate-code-java-servlet-once = 
    bagof-AllInvokeEvery // TODO should be sorted to improve caching
  ; if ?[] then disable-if-not-first-build end // if list is empty (no changes or no invokes at all) and file has been generated before, then don't regenerate
  ; cached-generate(generate-java-servlet-dispatch-servlet | "internal_DispatchServlet")
  ; fail
  
  generate-java-servlet-dispatch-servlet: 
    bagof_all_invokeevery -> 
      <emit-java-code-local> compilation-unit|[
      package utils;
  
      import java.io.*;
      import java.util.HashMap;
      import java.util.Map;
      import java.util.List;
      import java.util.LinkedList;
  
      import javax.servlet.*;
      import javax.servlet.http.*;
  
      import utils.*;
      import pkgname.*;
      import pkgname2.*;
      import org.webdsl.lang.Environment;
  
      @SuppressWarnings({"serial","unused"})
      public class DispatchServlet extends HttpServlet {

          public static void tryLoadGlobalsAndPerformInit(){
            org.hibernate.Session hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
            try
            { 
              hibSession.beginTransaction();
              GlobalVariables.load();
              GlobalInit.load();
              hibSession.getTransaction().commit();
            }
            catch(Exception se)
            { 
              System.out.println("*** Exception occured in application init. WebDSL application will not run correctly. ***");
              se.printStackTrace();
              hibSession.getTransaction().rollback();
            }
          }
          
          private java.util.Timer timer;
          public void init() {
            tryLoadGlobalsAndPerformInit();
            
            timer = new java.util.Timer();
            bstm*
          }

          public void destroy() {
            timer.cancel();
          }

          public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException
          {
              DispatchServletHelper d = new DispatchServletHelper(this, true, getServletConfig().getServletContext().getContextPath());
              d.doServe(request, response);
          }

          public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException
          {
              DispatchServletHelper d = new DispatchServletHelper(this, false, getServletConfig().getServletContext().getContextPath());
              d.doServe(request, response);
          }
          
          public void doPut(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException
          {
              DispatchServletHelper d = new DispatchServletHelper(this, false, getServletConfig().getServletContext().getContextPath());
              d.doServe(request, response);
          }
      }
    ]|
    with  pkgname    := <TemplatePackage>
        ; pkgname2   := <DomainPackage>
        ; bstm*      := <map(invoke-every-to-init); concat> bagof_all_invokeevery
