module org/webdsl/dsl/to-java-servlet/uicomponents/navigate

imports
  libstratego-lib
  libjava-front
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/type-utils
  org/webdsl/dsl/to-java-servlet/page-utils
  org/webdsl/dsl/to-java-servlet/template-render
  org/webdsl/dsl/to-java-servlet/java-code
  org/webdsl/dsl/to-java-servlet/template-ref-arguments
  org/webdsl/dsl/to-java-servlet/ajax/html-utils

rules // links

  // link to a url, maybe constant, or obtained from an entity field
        
  elem-to-java-servlet : //void navigate, useful for ajax
    tc@TemplateCall("navigate", [],passign*, elems) ->
    <hide-bstms-on-null-pointer-exception>
    bstm* |[ 
    out.print("<a class=\"navigate\" href=\"javascript:void(0)\" "+e_attrs1+">");
    bstm*
    out.print("</a>");
    ]|
    with  bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*
        
        
  elem-to-java-servlet :
    tc@TemplateCall("navigate", [PageCall("url",[e])],passign*, elems) ->
    <hide-bstms-on-null-pointer-exception>
    bstm* |[ 
    out.print("<a class=\"navigate\" href=\"");
    bstm_exptostring*
    out.print("\" "+e_attrs1+">");
    bstm*
    out.print("</a>");
    ]|
    with  bstm_exptostring* := <to-page-string-java-servlet> e
        ; bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*

  elem-to-java-servlet :
    tc@TemplateCall("navigate",[call@PageCall(p,args)],passign*,elems) ->
    <hide-bstms-on-null-pointer-exception>
    bstm* |[ 
      out.print("<a href=\"");
      if(ThreadLocalEmailContext.inEmailContext()){
        out.print(e_resulturlemail);
      }
      else{
        out.print(e_resulturl);
      }
      out.print("\" "+e_attrs1+" class=\"navigate\">");
      bstm*
      out.print("</a>");
    ]|
    where InternalSort("Page") := <get-type-anno> call
    with  e_url := <page-thiscall-to-url-string-java-servlet> call
        ; bstm* := <elems-to-java-servlet> elems
        ; e_attrs1 := <to-html-attrs> passign*
        ; e_resulturlemail := expr|[ utils.HTMLFilter.filter(ThreadLocalPage.get().getAbsoluteLocation()) + e_url ]|  
        ; e_resulturl := <convert-rel-url-based-on-secure-modifier(|passign*)> e_url

  elem-to-java-servlet :
    tc@TemplateCall("navigatebutton",[call@PageCall(p,args), e],passign*,TemplateBody([])) ->
    <hide-bstms-on-null-pointer-exception>
    bstm* |[
      out.print("<input type=\"button\" "+e_attrs1+" onclick=\"window.location = '"+e_resulturl+"'\"");
      out.print("value=\"");
      bstm_exptostring*
      out.print("\"");
      out.print(" />");
    ]|
    where InternalSort("Page") := <get-type-anno> call
    with  e_url := <page-thiscall-to-url-string-java-servlet> call
        ; bstm_exptostring* := <to-page-string-java-servlet> e
        ; e_attrs1 := <to-html-attrs> passign*
        ; e_resulturl := <convert-rel-url-based-on-secure-modifier(|passign*)> e_url
      
rules

  convert-rel-url-based-on-secure-modifier(|passign*) :
    e_url -> e_resulturl 
    with  if <fetch(TemplateCallPropertySecure <+ TemplateCallPropertyNotSecure)> passign*
          then e_resulturl := <convert-abs-url-based-on-secure-modifier(|passign*)> java:expr|[ utils.HTMLFilter.filter(ThreadLocalPage.get().getAbsoluteLocation()) + e_url ]|
          else e_resulturl := e_url //keep link relative when no conversion is needed, that way the browser stays in the current protocol (https/http)
          end 
  
  convert-abs-url-based-on-secure-modifier(|passign*) :
    e_url -> e_resulturl
    with  if <fetch(TemplateCallPropertySecure)> passign*
          then e_resulturl := <url-https-conversion-helper> e_url
          else 
            if <fetch(TemplateCallPropertyNotSecure)> passign*
            then e_resulturl := <url-http-conversion-helper> e_url
            else e_resulturl := e_url
            end
          end   
          
  url-http-conversion-helper :
    e_url -> java|[ utils.UrlTransform.convertToHttpUrl(e_url) ]|
     
  url-https-conversion-helper :
    e_url -> java|[ utils.UrlTransform.convertToHttpsUrl(e_url) ]|
      
rules      
       
  page-thiscall-to-url-string-java-servlet :
    pc@PageCall(p,args) -> e |[ utils.HTMLFilter.filter(e_url) ]|
    with  get-anno(?PageArgsAnno(farg*))
        ; farg1* := <add-farg-numbers> farg*
        ; params := <zip(bind-param-java-servlet)> (farg1*, args)
        ; e_url := <page-call-to-url-java-servlet> (p, params, farg1*)
  
  bind-param-java-servlet =
     bind-param-java-servlet-entity-id-anno 
  <+ bind-param-java-servlet-entity-type
  <+ bind-param-java-servlet-date-time
  <+ bind-param-java-servlet-ref-arg
  <+ bind-param-java-servlet-native
  <+ bind-param-java-servlet-default      
  
  bind-param-java-servlet-entity-id-anno :
    (Arg(x, srt), e) -> (x, e|[ utils.URLFilter.filter(e1.getNaturalId()) ]|)
    where <get-type-anno;has-entity-anno> e
        ; not(SimpleSort("Entity") := srt)
    with  SimpleSort(x_class) := srt
        ; e1 := <expression-to-java-servlet> e
 
  bind-param-java-servlet-entity-type :
    (Arg(x, srt), e) -> (x, e|[ utils.URLFilter.filter(e1.get_WebDslEntityType() + ":" + e1.getId()) ]|)
    where SimpleSort("Entity") := srt
    with  e1 := <expression-to-java-servlet> e
    
  bind-param-java-servlet-date-time :
    (Arg(x, SimpleSort(<?"Date"<+?"DateTime"<+?"Time">)), e) -> (x, e|[ utils.URLFilter.filter(e1.getTime()) ]|)
    with  e1 := <expression-to-java-servlet> e
    
  bind-param-java-servlet-ref-arg :
    (Arg(x, RefSort(srt)), e) -> (x,res)
    with  res := <create-assigns-for-ref-arg-helper-page-ref-arg>
    
  bind-param-java-servlet-default :
    (Arg(x, srt), e) -> (x, e|[ utils.URLFilter.filter(e1) ]|)
    with  e1 := <expression-to-java-servlet> e
    
  bind-param-java-servlet-native :
  	(Arg(x, srt), e) -> (x, e|[ utils.URLFilter.paramMapToURLEncoding(e1.toParamMap()) ]|)
  	where (<is-native-class> e)
  	with e1 := <expression-to-java-servlet> e  	

  page-call-to-url-java-servlet :
    (fn, [], []) -> java:expr |[ ThreadLocalServlet.getContextPath() + "~s" ]| //java:expr |[ e1 + e2 ]|
    where not("root" := fn)
    with  s := <concat-strings> ["/", fn]
        //; [e1,e2] := <add-success-messages-to-url> [e |[ "~s" ]| ]

  page-call-to-url-java-servlet :
    ("root", [], []) -> java:expr |[ ThreadLocalServlet.getContextPath() + "/" ]|

  page-call-to-url-java-servlet :
    (fn, params, farg*) -> e |[ ThreadLocalServlet.getContextPath() + "~s" + utils.URLFilter.removeTrailingDefaultValues(String.valueOf(e1),e*) ]| 
    where not([] := params)
    with  s  := <concat-strings> ["/", fn]
        ; e1 := <map(param-to-request-param-java-servlet);combine-params-to-exp> params // add-success-messages-to-url;
        ; e* := <map(param-tuple-type-java-string)> farg*
        
  param-tuple-type-java-string :
    Arg(x, srt) -> java:expr|[ "~<pp-type> srt" ]|

  combine-params-to-exp :
    [e] -> e |[ e ]|
  
  combine-params-to-exp :
    [e|e*] -> e |[ e + "/" + e1 ]|
    with  e1 := <combine-params-to-exp> e*

  param-to-request-param-java-servlet :
    (param, value) -> value
    //    (param, value) -> <concat-strings> [param, "=", value]
