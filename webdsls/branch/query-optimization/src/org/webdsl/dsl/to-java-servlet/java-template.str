module org/webdsl/dsl/to-java-servlet/java-template

imports 
  libstrategolib 
  libwebdsl-front

imports
  org/webdsl/dsl/to-java-servlet/to-java-servlet

rules

  generate-java-servlet-template-partial =
    ? cbds
    //; where(not(ThisEmail)) also used for common parts in email
    ; with(
        pkgname    := <TemplatePackage>
      ; x_Page  := <ThisTemplateClassName>
      ; if <is-list> cbds then cbds* := cbds else cbds* := [cbds] end
      ; <emit-java-code-local>
          compilation-unit|[
            package pkgname;
            @Partial
            public class x_Page{
              ~*cbds*
            }
          ]|
      )


rules
    
  GenerateCodeJavaServlet =  
    where(not(ThisEmail)); generate-java-servlet-template; fail

  generate-java-servlet-template :
    def@def |[ define mod* x(farg*) req* { elem* } ]| ->
    <emit-java-code-local> compilation-unit|[
        package pkgname;
        
        import java.io.IOException;
        import java.io.PrintWriter;
        import java.util.HashMap;
        import java.util.Iterator;
        import java.util.Map;
        
        
        import javax.servlet.ServletException;
        import javax.servlet.http.HttpServletRequest;
        import javax.servlet.http.HttpServletResponse;
        import javax.servlet.http.HttpSession;
        
        import org.hibernate.Session;
        import org.apache.commons.lang.ArrayUtils;
        
        import utils.*;
        import org.webdsl.tools.Utils;
        import org.webdsl.lang.Environment;
        import org.webdsl.WebDSLEntity;
        
        import pkgname2.*;
        import pkgname3.*;

        @Partial
        @SuppressWarnings("all")
        public class x_Page extends TemplateServlet
        {
          protected void storeArguments(Object[] args) {
            bstm1*
          } 
        
          @Partial
          protected void storeInputsInternal() {
          }
                 
          @Partial
          protected void validateInputsInternal() {
          }
          
          @Partial
          protected void initialize() {}
          
          @Partial
          protected void initSubmitActions(){}
          
          @Partial 
          protected void initActions() {}

          @Partial
          protected void initializeLocalVars() {}
          
          @Partial
          protected void initializeLocalVarsOnce() {}
          
          @Partial
          protected void handleActionsInternal() { }
          
          @Partial
          private void callTemplates() { }

          public void setPageArguments(String[] pa) {
            pageArguments = pa;
          }
          public String[] getPageArguments() {
            return pageArguments;
          }
         
          @Partial 
          protected void renderInternal(){ }
          
          public String getUniqueName() {
            return "~x";
          }
          
          public String getTemplateClassName(){
            return "~x_Page";
          }
          
          public String getStateEncodingOfArgument(){
            return e_argrepr;
          }
          
          public String debugStateEncodingAll(){
            return "TemplateClass: "+getTemplateClassName()+"\n"+
              "TemplateArgument: "+getStateEncodingOfArgument()+"\n"+
              "ContextString: "+getTemplateContext()+"\n"+
              "UniqueId: "+getUniqueId()+"\n";
          }
          
          public String getTemplateSignature(){
            return "~x_TemplateSig";
          }
          
          protected void tryWriteSpanOpen(PrintWriter outtemp){
            bstm_so*
          }
          protected void tryWriteSpanClose(PrintWriter outtemp){
            bstm_sc*
          }

          protected void putLocalDefinesInEnv(){
            bstm*
          }
          
          protected boolean isAjaxTemplate(){
            return e_isajaxtemplate;
          }
          
          protected String getElementsContext(){
            if(calledName==null){
            ~*<if <fetch(?TemplateDefineNameBeforeLifting(namebeforelift))> mod* 
               then !bstm* |[ return "~namebeforelift"; ]|
               else !bstm* |[ return "~x"; ]|
               end>
             }
             else{
               return calledName;
             }
          }
        }
      ]|
    with pkgname    := <TemplatePackage>
       ; pkgname2   := <DomainPackage>
       ; pkgname3   := <ActionPackage>
       ; x_Page  := <ThisTemplateClassName>
       ; x_TemplateName := <get-original-name> x
       ; x_TemplateSig := <concat-strings> [x_TemplateName,"(",<map(\Arg(nm,srt)->Arg(<get-original-name> nm,srt)\);pp-args> farg*,")"]
       ; if <fetch(?TemplateModSpan())> mod*; not(JavaThisPage) then //only add span to templates with 'span' modifier
            x_actualname := <newname> "name"
          ; x_uniquename := <newname> "uniqname"
          ; bstm_so* := bstm* |[ 
              if(ThreadLocalPage.get().templateSpans()){
                String x_actualname = "~x_TemplateName";
                String x_uniquename = "~x";
                if(ltas != null){
                  x_actualname = ltas.spanName;
                  x_uniquename = ltas.spanNameUnique;
                }
                outtemp.write("<span id=\""+ x_uniquename + "\" class=\"scopediv "); //@TODO this could generate duplicate ids in resulting html
                if(x_uniquename.equals(x_actualname)){
                   outtemp.write(x_uniquename);
                }
                else{
                   outtemp.write(x_uniquename +" "+ x_actualname);
                }
                outtemp.write("\">"); 
              }
            ]| 
          ; bstm_sc* := bstm* |[ 
              if(ThreadLocalPage.get().templateSpans()){
                outtemp.write("</span>"); 
              }
            ]|
          else
            bstm_so* := []
          ; bstm_sc* := []
          end
       ; bstm* := <local-defined-templates-to-hashmap> elem*
       ; if <fetch(Page)> mod* 
         then bstm1* := <formal-arguments-to-store-statements> farg*
         else bstm1* := <formal-arguments-to-store-statements-with-optimization> farg*
         end
       ; e_argrepr := <formal-action-args-to-state-enc> farg*
       ; if <fetch(AjaxTemplate)> mod* 
         then e_isajaxtemplate := java:expr |[ true ]|
         else e_isajaxtemplate := java:expr |[ false ]|
         end
       
rules
  
  local-defined-templates-to-hashmap :
    elem* -> result
    with  localtemplates := <collect(local-defined-templates-to-hashmap-helper)> elem*
        ; result := <map(add-template-binding); concat> localtemplates
                          
  local-defined-templates-to-hashmap-helper :
    def@webdsl|[ define mod* x(farg*)  req* { elem* } ]| -> (x,clsname)
    with  clsname := <get-template-class-name> def
    
  add-template-binding:        
    (x,xclass) -> bstm* |[ env.putTemplate(x_key, x_value); ]| 
    with  x_key := <concat-strings> ["\"",x,"\""]
        ; x_value := <concat-strings> [xclass,".class"]
  
  //local template redef
  local-defined-templates-to-hashmap-helper :
    def@LocalRedefine(mod*,x,farg*,y,extraArg*) -> (xWithOverloadRenaming,clsname, argwithref*, spanname1, spanname2)
    with  xWithOverloadRenaming := <generate-template-name-fargs> (x,farg*)
        ; ( <get-anno(?ExtraLocalDefineArgs(extraFormalArg*))> def <+ extraFormalArg* := [] )
        ; ( <?LocalRedefineArgs(eArg*)> extraArg* <+ eArg* := [] )
        ; ( <get-anno(?SpanNames(spanname1,spanname2))> def <+ spanname1 := ""; spanname2 := "")
        ; clsname := <generate-template-name-fargs; template-name-to-classname> (y,[farg*,extraFormalArg*])
        ; argwithref* := <handle-ref-arg> (extraFormalArg*,eArg*)

  add-template-binding:        
    (x,xclass,e_argswithref*, spanname1, spanname2) -> 
      bstm* |[ 
        env.putTemplate(x_key, x_value);
        Object[] x_array = { e_argswithref* };
        env.putExtraLocalTemplateArguments(x_key, new utils.LocalTemplateArguments(x_array,"~spanname1","~spanname2")); 
      ]| 
    with  x_key := <concat-strings> ["\"",x,"\""]
        ; x_value := <concat-strings> [xclass,".class"]
        ; x_array := <newname> "arg" //doesn't need to be globally unique, no issue for caching when using newname here

rules 
 
  formal-arguments-to-store-statements :
    farg* -> result
    where  result := <add-indices;filter({\(index,arg@farg|[ x : srt ]|) -> bstm|[ x = (x_arg) args[x_index]; ]|
                                            where x_index := <subti;int-to-string> (index,1)
                                                ; if <?Arg(_,RefSort(_))> arg 
                                                  then x_arg := "utils.RefArg"
                                                  else x_arg := <argument-java-servlet-type> arg end
                                          \})> farg* //variables are generated in java-template-vars


  formal-arguments-to-store-statements-with-optimization :
    farg* -> result
    where result2 := <filter({\ arg@Arg(x, srt){anno*} -> bstm* |[
                                  if(!org.hibernate.Hibernate.isInitialized(x) || !org.hibernate.Hibernate.isInitialized(x.get#x_checkprop())) {
																	  bstm_criteria*
                                    bstm_criterias*
                                  }
                              ]|
                             where <has-entity-anno> srt
                             ; <not(fetch-elem(?QueryOptimizations([], [], _, _)))> anno*
                             ; <fetch-elem(?QueryOptimizations(joinproperties, joinpropertiesgen, querycondition, conditionjoins))> anno*
                             ; <conc; flatten-list; length; not(?1)> (joinproperties, joinpropertiesgen) // If we only eagerly fetch one property then we might as well leave it to Hibernate to do it the lazy way
                             with
                               x_idprop := <concat-strings>["_", <get-entity-id-name> srt]
                             ; x_class := <java-type-name> srt
                             ; x_get := <concat-strings>["get", <get-entity-id-name; capitalize-string> srt]
                             ; if [] := joinproperties
                               then x_checkprop := <?[<id>|_]; ?[<string-tokenize(|['.'])>|_]; ?[<ltrim-chars(?'_')>|_]> joinpropertiesgen
                                  ; bstm_criteria* := []
                                  ; joinpropertiesgen2 := [[]|joinpropertiesgen] // because hibernate-extra-criteria skips the first
                               else x_checkprop := <?[<string-tokenize(|['.'])>|_]; ?[<ltrim-chars(?'_')>|_]> joinproperties
                                  ; genjoins := <?[<id>|_] <+ ![]> joinpropertiesgen
                                  ; e_criteria := <conc; foldr(!expr|[ ThreadLocalPage.get().getHibSession().createCriteria(x_class.class).setResultTransformer(org.hibernate.Criteria.DISTINCT_ROOT_ENTITY) ]|,hibernate-criteria-join); hibernate-criteria-add-condition(|querycondition,x,srt)> (genjoins, joinproperties, conditionjoins)
                                  ; joinpropertiesgen2 := joinpropertiesgen
                                  ; bstm_criteria* := bstm* |[e_criteria.add( org.hibernate.criterion.Restrictions.idEq(x.getId()) ).list();]|
                               end
                             ; bstm_criterias* := <hibernate-extra-criteria(|expr|[ ThreadLocalPage.get().getHibSession() ]|)> (arg{QueryOptimizations(joinproperties, joinpropertiesgen2, querycondition, conditionjoins), anno*}, expr|[x_class]|, expr|[ org.hibernate.criterion.Restrictions.idEq(x.getId()) ]|)
                           \})> farg*
    ; result1 := <formal-arguments-to-store-statements> farg*
    ; result := <conc; flatten-list> (result1, result2)
