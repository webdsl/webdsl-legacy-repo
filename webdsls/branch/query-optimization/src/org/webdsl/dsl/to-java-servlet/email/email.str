module org/webdsl/dsl/to-java-servlet/email/email

imports
  libstratego-lib
  libjava-front
  libwebdsl-front
  org/webdsl/dsl/to-java-servlet/- 
 
rules
  
  call-to-java-servlet :
    tc@SendEmailFunctionCall(EmailCall(x_name, args)) ->
    expr |[ ThreadLocalPage.get().sendEmail("~x_name", new Object[]{ e* }, new Environment(ThreadLocalPage.getEnv())) ]|
    with  e* := <map(expression-to-java-servlet)> args
    
  call-to-java-servlet :
    tc@RenderEmailFunctionCall(EmailCall(x_name, args)) ->
    expr |[ ((utils.PageServlet)ThreadLocalPage.get()).renderEmailAndCreateQueuedEmail("~x_name", new Object[]{ e* }, new Environment(ThreadLocalPage.getEnv())) ]|
    with  e* := <map(expression-to-java-servlet)> args

  elem-to-java-servlet:
    elem |[ to(e)[passign*]{} ]| -> 
    bstm |[ this.receivers = e1;  ]|
    with  e1 := <expression-to-java-servlet> e

  elem-to-java-servlet:
    elem |[ subject(e)[passign*]{} ]| -> 
    bstm |[ this.subject = e1;  ]|
    with  e1 := <expression-to-java-servlet> e

  elem-to-java-servlet:
    elem |[ from(e)[passign*]{} ]| -> 
    bstm |[ this.sender = e1;  ]|
    with  e1 := <expression-to-java-servlet> e
    
  elem-to-java-servlet:
    elem |[ cc(e)[passign*]{} ]| -> 
    bstm |[ this.cc = e1;  ]|
    with  e1 := <expression-to-java-servlet> e
    
  elem-to-java-servlet:
    elem |[ bcc(e)[passign*]{} ]| -> 
    bstm |[ this.bcc = e1;  ]|
    with  e1 := <expression-to-java-servlet> e
    
  elem-to-java-servlet:
    elem |[ replyTo(e)[passign*]{} ]| -> 
    bstm |[ this.replyTo = e1;  ]|
    with  e1 := <expression-to-java-servlet> e
    