module org/webdsl/dsl/to-java-servlet/hibernate-util

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

overlays

  e_HibSession =
    java:expr |[ HibernateUtilConfigured.getSessionFactory().getCurrentSession() ]|

rules

  hibernate-forall-criteria :
    (term{anno*}, t, x, srt, fltr) -> e_criteria
    with <fetch-elem(?QueryOptimizations(joinproperties, joinpropertiesgen, querycondition, conditionjoins))> anno*
    ; e_criteria := <concat; ?joins; foldr(!<try(hibernate-add-cacheable(|anno*))>expr|[ e_HibSession.createCriteria(t.class) ]|,hibernate-criteria-join); hibernate-criteria-add-condition(|querycondition,x,srt); try(hibernate-criteria-add-extra(|anno*,joins,None(),True()))> [joinproperties, conditionjoins]
        //try on next line since not all ordering can be translated to query
        /** ; e_criteria := <foldr(!e0,hibernate-forall-criteria-filter(|x,srt));where(rules(OrderAndLimitApplied:=True())) <+ !e0> [lim,ob]  */

  hibernate-add-cacheable(|anno*) :
    e -> expr |[ e.setCacheable(true) ]|
    where <fetch-elem(?CachedEntity())> anno*

   hibernate-extra-criteria = hibernate-extra-criteria(|e_HibSession) 

   // Uses the query condition from the annotation (also adds condition joins)
   hibernate-extra-criteria(|e_Session) :
   	(term{anno*}, t, x, srt) -> e_criterias*
    with <fetch-elem(?QueryOptimizations(joinproperties, joinpropertiesgen, querycondition, conditionjoins))> anno*
   	; e_base := <foldr(!expr|[ e_Session.createCriteria(t.class) ]|,hibernate-criteria-join)> conditionjoins
   	; e_criterias* := <map(hibernate-extra-criteria-helper(|e_base, x, srt, querycondition, conditionjoins, anno*))> joinpropertiesgen

   // Uses the specified condition (does not add condition joins)
   hibernate-extra-criteria(|e_Session) :
    (term{anno*}, t, e_Cond) -> e_criterias*
    with <fetch-elem(?QueryOptimizations(joinproperties, joinpropertiesgen, querycondition, conditionjoins))> anno*
    ; e_base := expr|[ e_Session.createCriteria(t.class) ]|
    ; e_criterias* := <map(hibernate-extra-criteria-helper(|e_base, e_Cond, anno*))> joinpropertiesgen

  hibernate-extra-criteria-helper(|e_base, x, srt, querycondition, conditionjoins, anno*) :
    joinproperties -> e_criteria
    with <?[gen|_]> joinproperties
    ; joins := <conc> (conditionjoins, joinproperties)
    ; e_criteria := <foldr(!e_base, hibernate-criteria-join); hibernate-criteria-add-condition(|querycondition,x,srt); try(hibernate-criteria-add-extra(|anno*,joins,gen,False())); \ e_WithoutList -> bstm |[ e_WithoutList.list(); ]|\> joinproperties

  hibernate-extra-criteria-helper(|e_base, e_Cond, anno*) :
  	joinproperties -> e_criteria
  	with <?[gen|_]> joinproperties
  	; e_criteria := <foldr(!e_base, hibernate-criteria-join); \ e_Crit -> expr |[ e_Crit.add( e_Cond ) ]| \; try(hibernate-criteria-add-extra(|anno*,joinproperties,gen,False())); \ e_WithoutList -> bstm |[ e_WithoutList.list(); ]|\> joinproperties

  hibernate-extra-generic-criteria(|e_Session) = hibernate-extra-generic-criteria(hibernate-extra-generic-criteria-default-cond|e_Session)

  hibernate-extra-generic-criteria(make-condition|e_Session) =
    filter(hibernate-extra-generic-criteria-helper(make-condition|e_Session))
    ; rewrite-tuples-to-if-elseif

	hibernate-extra-generic-criteria-helper(make-condition|e_Session):
	  lst@[head|tail] -> (e_Cond, bstm |[ e_Criteria.add(org.hibernate.criterion.Restrictions.idEq(e_owner.getId())).list(); ]|)
	  where <gt>(<length> lst, 1)
	  with FieldAccess(Cast(p, SimpleSort(srt)), f){anno*} := head
	  ; x_class := <java-type-entity-name> srt
	  ; e_base := expr |[ e_Session.createCriteria(x_class.class) ]|
	  ; owner := <repeat(oncetd(add-fake-entity-anno))> p
	  ; e_owner := <expression-to-java-servlet> owner
	  ; root := FieldAccess(p, f){anno*}
	  ; e_Criteria := <alltd(?p; !Var("owner")); foldr(!e_base, hibernate-criteria-fetchmode)> [root|tail]
	  ; e_Cond := <make-condition> (owner, e_owner, srt, head)

  hibernate-extra-generic-criteria-default-cond:
    (owner, e_owner, x_ownerclass, root) -> expr |[ e_Cond && e_owner.instanceOf("~x_ownerclass") ]|
    with e_Cond := <hibernate-extra-generic-criteria-default-cond> owner

  hibernate-extra-generic-criteria-default-cond:
    fa@FieldAccess(p, _) -> expr |[ e_Cond && e_fa != null ]|
    with e_fa := <expression-to-java-servlet> fa
    ; e_Cond := <hibernate-extra-generic-criteria-default-cond> p

  hibernate-extra-generic-criteria-default-cond:
    Cast(p, SimpleSort(x_class)) -> expr |[ e_Cond && e_p.instanceOf("~x_class") ]|
    with e_p := <expression-to-java-servlet> p
    ; e_Cond := <hibernate-extra-generic-criteria-default-cond> p

  hibernate-extra-generic-criteria-default-cond:
    v@Var(_) -> expr |[ e_v != null ]|
    with e_v := <expression-to-java-servlet> v

  rewrite-tuples-to-if-elseif:
    [(e_Cond, bstm_Block)|elseBlock] -> bstm |[ if(e_Cond) { bstm_Block } else { bstm_Else } ]|
    where bstm_Else := <rewrite-tuples-to-if-elseif> elseBlock

  rewrite-tuples-to-if-elseif:
    [(e_Cond, bstm_Block)] -> bstm |[ if(e_Cond) { bstm_Block } ]|

  hibernate-criteria-fetchmode :
    (expr, e) -> expr |[ e.setFetchMode("~str", org.hibernate.FetchMode.JOIN) ]|
    with str := <fieldaccess-to-fetchmode> expr

	fieldaccess-to-fetchmode:
	  fa@FieldAccess(p, f) -> str
	  with prev := <fieldaccess-to-fetchmode> p
	  ; str := <concat-strings> [prev, <?"" < !"_" + !"._"> prev, f]
	
	fieldaccess-to-fetchmode:
	  Cast(p, _) -> <fieldaccess-to-fetchmode> p
	
	fieldaccess-to-fetchmode:
	  Var(_) -> ""

  hibernate-criteria-join :
  	(str{UseFetchMode()}, e) -> expr|[ e.setFetchMode("~str", org.hibernate.FetchMode.JOIN) ]|

  hibernate-criteria-join :
    //(str, e) -> expr|[ e.setFetchMode("~str", org.hibernate.FetchMode.JOIN) ]|
  	//((str, _, alias), e) -> expr|[ e.createAlias("~str", "~alias") ]|
  	(str{}, e) -> expr|[ e.createAlias("~assaciation", "~alias", org.hibernate.criterion.CriteriaSpecification.LEFT_JOIN) ]|
  	with varList := <string-tokenize(|['.'])> str
  	; prevAliasList := <reverse; ?[joinProp|<id>]; reverse> varList
  	; prevAlias := <?[] < !"" + (separate-by(!"_"); !["_"|<id>]; concat-strings)> prevAliasList
  	; alias := <concat-strings>[prevAlias, "_", joinProp]
  	; assaciation := <?"" < !joinProp + <concat-strings>[prevAlias, ".", joinProp]> prevAlias

  hibernate-criteria-add-condition(|cond,x,srt) :
  	e_criteria -> <id>
  	where <?True()> cond

  hibernate-criteria-add-condition(|cond,x,srt) :
  	e_criteria -> expr|[ e_criteria.add(e_Cond) ]|
  	where <not(?True())> cond
  	with {| IsRootVar
  	      : rules( IsRootVar : Var(x) -> srt )
        	; e_Cond := <hibernate-criteria-transform-condition> cond
          |}

  hibernate-criteria-add-extra(|anno*, joins, gen, ismain) :
    e_criteria -> expr|[ utils.QueryOptimization.addQueryOptimization(e_criteria, e_CurJoins, e_CurGen, e_IsMain, e_Join, e_Queries, e_Cond, e_CondJoins) ]|
    where <fetch-elem(?QueryOptimizationVars(joinvar, queriesvar, condvar, condjoinsvar))> anno*
    ; e_CurJoins :=  <string-list-to-java-servlet; try(\ expr |[ new String[] {} ]| -> expr |[ null ]| \)> joins
    ; e_CurGen :=    <?None() < !expr |[ null ]| + !expr |[ "~gen" ]|> gen
    ; e_IsMain :=    <expression-to-java-servlet> ismain
    ; e_Join :=      <expression-to-java-servlet> Var(joinvar)
    ; e_Queries :=   <expression-to-java-servlet> Var(queriesvar)
    ; e_Cond :=      <expression-to-java-servlet> Var(condvar)
    ; e_CondJoins := <expression-to-java-servlet> Var(condjoinsvar)

  property-pair-to-string =
    ?FieldAccess(l, fld){anno*}
    ; where(not(<fetch-elem(?HasAlias())> anno*))
    ; if Var(x) := l then
        !<concat-strings> ["_", fld]
      else
        !<concat-strings> [<property-pair-to-string> l, "._", fld]
      end

  property-pair-to-string =
    ?fa@FieldAccess(l, fld){anno*}
    ; where(<fetch-elem(?HasAlias())> anno*)
    ; <property-pair-to-string> fa{}
    ; string-replace(|".", "_")
    ; !<concat-strings> ["_", <id>]

  property-to-string:
  	fa@FieldAccess(_, _) -> expr|[ "~str" ]|
  	with str := <property-pair-to-string> fa

  hibernate-criteria-transform-condition:
    Not(expr1) -> expr|[ org.hibernate.criterion.Restrictions.not(e_expr1new) ]|
    with e_expr1new := <hibernate-criteria-transform-condition> expr1

  hibernate-criteria-transform-condition:
    Or(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.or(e_expr1new, e_expr2new) ]|
    with e_expr1new := <hibernate-criteria-transform-condition> expr1
    ; e_expr2new := <hibernate-criteria-transform-condition> expr2

  hibernate-criteria-transform-condition:
    And(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.and(e_expr1new, e_expr2new) ]|
    with e_expr1new := <hibernate-criteria-transform-condition> expr1
    ; e_expr2new := <hibernate-criteria-transform-condition> expr2

  hibernate-criteria-transform-condition:
    SmallerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.leProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props>(expr1, expr2) // Both expressions are database fields

  hibernate-criteria-transform-condition:
    SmallerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.le(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop>(expr1, expr2) // expr1 is a database field, expr2 is not

  hibernate-criteria-transform-condition:
    SmallerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.gt(e_expr2new, e_expr1new) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop>(expr1, expr2) // expr2 is a database field, expr1 is not

  hibernate-criteria-transform-condition:
    SmallerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.ltProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props>(expr1, expr2)

  hibernate-criteria-transform-condition:
    SmallerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.lt(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop>(expr1, expr2)

  hibernate-criteria-transform-condition:
    SmallerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.ge(e_expr2new, e_expr1new) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop>(expr1, expr2)

  hibernate-criteria-transform-condition:
    LargerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.geProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props>(expr1, expr2)

  hibernate-criteria-transform-condition:
    LargerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.ge(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop>(expr1, expr2)

  hibernate-criteria-transform-condition:
    LargerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.lt(e_expr2new, e_expr1new) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop>(expr1, expr2)

  hibernate-criteria-transform-condition:
    LargerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.gtProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props>(expr1, expr2)

  hibernate-criteria-transform-condition:
    LargerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.gt(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop>(expr1, expr2)

  hibernate-criteria-transform-condition:
    LargerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.le(e_expr2new, e_expr1new) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop>(expr1, expr2)

  hibernate-criteria-transform-condition:
    NotEq(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.neProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props>(expr1, expr2)

  hibernate-criteria-transform-condition:
    NotEq(expr1, expr2) -> expr|[ utils.QueryOptimization.getNotEqCondition(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop>(expr1, expr2)

  hibernate-criteria-transform-condition:
    NotEq(expr1, expr2) -> expr|[ utils.QueryOptimization.getNotEqCondition(e_expr2new, e_expr1new) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop>(expr1, expr2)

  hibernate-criteria-transform-condition:
    Eq(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.eqProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props>(expr1, expr2)

  hibernate-criteria-transform-condition:
    Eq(expr1{anno*}, expr2) -> expr|[ utils.QueryOptimization.getEqCondition(e_expr1new, e_expr2new, e_naturalId) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop>(expr1, expr2)
    ; e_naturalId := <fetch-elem(?IsNaturalId()) < !expr|[true]| + !expr|[false]|> anno*

  hibernate-criteria-transform-condition:
    Eq(expr1, expr2{anno*}) -> expr|[ utils.QueryOptimization.getEqCondition(e_expr2new, e_expr1new, e_naturalId) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop>(expr1, expr2)
    ; e_naturalId := <fetch-elem(?IsNaturalId()) < !expr|[true]| + !expr|[false]|> anno*

  transform-both-props:
  	(expr1, expr2) -> (e_expr1new, e_expr2new)
    where not([] := <collect(IsRootVar)>expr1); not([] := <collect(IsRootVar)>expr2) 
    with e_expr1new := <property-to-string> expr1
    ; e_expr2new := <property-to-string> expr2

  transform-param1-prop:
    (expr1, expr2) -> (e_expr1new, e_expr2new)
    where not([] := <collect(IsRootVar)>expr1); [] := <collect(IsRootVar)>expr2
    with e_expr1new := <property-to-string> expr1
    ; e_expr2new := <expression-to-java-servlet> expr2

  transform-param2-prop:
    (expr1, expr2) -> (e_expr2new, e_expr1new)
    where [] := <collect(IsRootVar)>expr1; not([] := <collect(IsRootVar)>expr2) 
    with e_expr1new := <expression-to-java-servlet> expr1
    ; e_expr2new := <property-to-string> expr2

  get-direct-fetches(|x) = get-direct-fetches(string-list-to-java-servlet; try(\ expr |[ new String[] {} ]| -> expr |[ null ]| \)|x)

  add-direct-fetches(|x, e_criteria) = get-direct-fetches(foldr(!e_criteria, \ (str, e) -> expr |[ e.setFetchMode("~str", org.hibernate.FetchMode.JOIN) ]| \)|x)

  get-direct-fetches(s|x) :
    qo@QueryOptimizations(joincandidates, joincandidatesgen, _, _) -> e_joins
    with allprops := <map(alltd(?Var(x); !Var(x)))> joincandidates
    ; e_joins := <filter(simple-joins-to-array(|Var(x))); map(Snd); flatten-list; make-set; s> allprops
      
  get-batch-fetches(|x, srt, x_list) =
    ?qo@QueryOptimizations(joincandidates, joincandidatesgen, _, _)
    ; allprops := <conc; map(alltd(?Var(x); !Var(x)))>(joincandidates, joincandidatesgen)
    ; !(Var(x), x_list, <java-type> srt, [], [], [], [])
    ; build-sub-batches(|allprops, x_list)
/*
  get-batch-fetches(|x, srt, x_list):
    qo@QueryOptimizations(joincandidates, joincandidatesgen, _, _) -> bstm* |[
      bstm_batch*
	    for(t x : x_list) {
	      bstm_addbatch*
	    }
	    bstm_fetch*
	    bstm_after2*
	    bstm_subbatch*
    ]|
    where t := <java-type> srt
    ; allprops := <conc> (joincandidates, joincandidatesgen)
    ; not([] := allprops)
    ; tmp := <build-direct-batches(|x, srt, t, x_list)> allprops
    ; bstm_batch* :=    <map(?(_, _, _, <id>, _, _, _));flatten-list> tmp
    ; bstm_addbatch* := <map(?(_, _, _, _, <id>, _, _))> tmp
    ; bstm_fetch* :=    <map(?(_, _, _, _, _, <id>, _))> tmp
    ; bstm_after* :=    <map(?(_, _, _, _, _, _, <id>))> tmp
    ; bstm_subbatch* := <filter(build-sub-batches(|allprops,x_list)); flatten-list> tmp 
    ; if <flatten-list; not(?[])> bstm_after*; not([] := bstm_subbatch*) then
        bstm_after2* := [bstm |[
          for(t x : x_list) {
            if(x == null) continue;
            bstm_after*
          }
        ]|]
      else
        bstm_after2* := []
      end

	build-direct-batches(|x, srt, t, x_list) =
	  ?paths
	  ; collect(?FieldAccess(Var(_), _) <+ ?FieldAccess(Cast(Var(_), _), _))
	  ; make-set
	  ; map(build-batch(|t, x_list, paths))*/

  build-sub-batches(|allprops, x_list) = 
    ?(fa, x_batch, t, _, _, _, _)
    ; x_batchelem := <concat-strings>[x_batch, "Elem"]
    ; <collect(?FieldAccess(fa, _) <+ ?FieldAccess(Cast(fa, _), _))> allprops
    ; not(?[])
    ; make-set
    ; ?nextsub
    ; newallprops := <map(alltd(?fa; !Var(x_batchelem)))> allprops
    ; tmp := <map(alltd(?fa; !Var(x_batchelem)); build-batch(|t, x_batch, newallprops))> nextsub
    ; bstm_batch* :=    <map(?(_, _, _, <id>, _, _, _));flatten-list> tmp
    ; bstm_addbatch* := <map(?(_, _, _, _, <id>, _, _))> tmp
    ; bstm_fetch* :=    <map(?(_, _, _, _, _, <id>, _))> tmp
    ; bstm_after* :=    <map(?(_, _, _, _, _, _, <id>))> tmp
    ; bstm_subbatch* := <filter(build-sub-batches(|newallprops,x_list)); flatten-list> tmp 
    ; if <flatten-list; not(?[])> bstm_after*; not([] := bstm_subbatch*) then
        bstm_after2* := [bstm |[
          for(t x_batchelem : x_batch) {
            if(x_batchelem == null) continue;
            bstm_after*
          }
        ]|]
      else
        bstm_after2* := []
      end
    ; !bstm* |[
        bstm_batch*
        for(t x_batchelem : x_batch) {
          if(x_batchelem == null) continue;
          bstm_addbatch*
        }
        bstm_fetch*
        bstm_after2*
        bstm_subbatch*
      ]|
    //; with(where(pp-java5-to-string; debug(!"bstm_subbatch:")))

  build-batch(|it, x_list, allprops):
    fa@FieldAccess(c, _){anno*} -> (fa{anno*}, x_batch, t, bstm_batch, bstm_addbatch, bstm_fetch, [])
    where <fetch-elem(?SimpleSort(x_class))> anno*
    ; not(<fetch-elem(?IsLazyFetch())> anno*)
    ; t := <java-type-entity> x_class
    ; str := <java-type-entity-name> x_class
    ; x_batch := <fa-to-uniquename(|x_list)> fa
    ; e_joins := <filter(simple-joins-to-array(|fa)); map(Snd); flatten-list; make-set; string-list-to-java-servlet; try(\ expr |[ new String[] {} ]| -> expr |[ null ]| \)> allprops
    ; bstm_batch := bstm |[ java.util.ArrayList<t> x_batch = new java.util.ArrayList<t>(); ]|
    ; e_expr := <topdown(try(add-fake-entity-anno));expression-to-java-servlet> fa
    ; if Cast(p, SimpleSort(x_class2)) := c then
        e_p := <topdown(try(add-fake-entity-anno));expression-to-java-servlet> p
        ; bstm_addbatch := bstm |[ if (e_p.instanceOf("~x_class2")) x_batch.add(e_expr); ]|
      else
        bstm_addbatch := bstm |[ x_batch.add(e_expr); ]|
      end
    ; bstm_fetch := bstm |[ utils.QueryOptimization.prefetchEntities(utils.HibernateUtilConfigured.getSessionFactory().getCurrentSession(), "~str", x_batch, e_joins); ]|

  build-batch(|it, x_list, allprops):
    fa@FieldAccess(c, f{annof*}){anno*} -> (fa{anno*}, x_batch, t, bstm_batch, bstm_addbatch, bstm_fetch, bstm_after)
    where <fetch-elem(?SimpleSort(x_class))> anno*
    ; <fetch-elem(?IsLazyFetch())> anno*
    ; <fetch-elem(?DeclaringEntity(x_ent))> annof*
    ; t := <java-type-entity> x_class
    ; str := <java-type-entity-name> x_ent
    ; field := <concat-strings>["_", f]
    ; x_f := <capitalize-string> f
    ; x_batch := <fa-to-uniquename(|x_list)> fa
    ; x_ownerids := <concat-strings> [x_batch, "OwnerIds"]
    ; e_joins := <filter(simple-joins-to-array(|fa)); map(Snd); flatten-list; make-set; string-list-to-java-servlet; try(\ expr |[ new String[] {} ]| -> expr |[ null ]| \)> allprops
    ; bstm_batch := bstm* |[
          java.util.Set<java.io.Serializable> x_ownerids = new java.util.HashSet<java.io.Serializable>();
          java.util.ArrayList<t> x_batch = new java.util.ArrayList<t>();
        ]|
    ; e_expr := <topdown(try(add-fake-entity-anno));expression-to-java-servlet> fa
    ; if Cast(p, SimpleSort(x_class2)) := c then
        e_p := <topdown(try(add-fake-entity-anno));expression-to-java-servlet> p
        ; bstm_addbatch := bstm |[ if (e_p.instanceOf("~x_class2") && e_p.is#x_f#Uninitialized()) x_ownerids.add(e_p.getId()); ]|
        ; bstm_after := bstm |[ if (e_p.instanceOf("~x_class2")) x_batch.add(e_expr); ]|
      else
        e_p := <topdown(try(add-fake-entity-anno));expression-to-java-servlet> c
        ; bstm_addbatch := bstm |[ if (e_p.is#x_f#Uninitialized()) x_ownerids.add(e_p.getId()); ]|
        ; bstm_after := bstm |[ x_batch.add(e_expr); ]|
      end
    ; bstm_fetch := bstm |[ utils.QueryOptimization.prefetchLazyProperties(utils.HibernateUtilConfigured.getSessionFactory().getCurrentSession(), "~str", "~field", x_ownerids, e_joins); ]|

  build-batch(|t_Owner, x_list, allprops):
    fa@FieldAccess(c, f{annof*}){anno*} -> (fa{anno*}, x_batch, t, bstm_batch, bstm_addbatch, bstm_fetch, bstm_after)
    where <fetch-elem(?GenericSort(_, [SimpleSort(x_class)]))> anno*
    ; <fetch-elem(?DeclaringEntity(x_ent))> annof*
    ; t := <java-type-entity> x_class
    ; x_batch := <fa-to-uniquename(|x_list)> fa
    ; x_owner := <concat-strings> [x_batch, "Owner"]
    ; e_joins := <filter(simple-joins-to-array(|fa)); map(Snd); flatten-list; make-set; string-list-to-java-servlet; try(\ expr |[ new String[] {} ]| -> expr |[ null ]| \)> allprops
    ; bstm_batch := bstm* |[ java.util.ArrayList<t_Owner> x_owner = new java.util.ArrayList<t_Owner>();
                            java.util.HashSet<t> x_batch = new java.util.HashSet<t>();
                          ]|
    ; e_expr := <topdown(try(add-fake-entity-anno));expression-to-java-servlet> fa
    ; strRole := <concat-strings>[<java-type-entity-name> x_ent, "._", f]
    ; if Cast(p, SimpleSort(x_class2)) := c then
        e_p := <topdown(try(add-fake-entity-anno));expression-to-java-servlet> p
        ; bstm_addbatch := bstm |[ if (e_p.instanceOf("~x_class2") && e_expr instanceof org.hibernate.collection.PersistentCollection && !((org.hibernate.collection.PersistentCollection)e_expr).wasInitialized()) x_owner.add(e_p); ]|
        ; bstm_after := bstm |[ if (e_p.instanceOf("~x_class2")) x_batch.addAll(e_expr); ]|
      else
        e_p := <topdown(try(add-fake-entity-anno));expression-to-java-servlet> c
        ; bstm_addbatch := bstm |[ if(e_expr instanceof org.hibernate.collection.PersistentCollection && !((org.hibernate.collection.PersistentCollection)e_expr).wasInitialized()) x_owner.add(e_p); ]|
        ; bstm_after := bstm |[ x_batch.addAll(e_expr); ]|
      end
    ; bstm_fetch := bstm |[
        utils.QueryOptimization.prefetchCollections(utils.HibernateUtilConfigured.getSessionFactory().getCurrentSession(), "~strRole", x_owner, e_joins);
      ]|
/*     with
     	<pp-java5-to-string; debug(!"bstm_batch:")> bstm_batch
     	; <pp-java5-to-string; debug(!"bstm_addbatch:")> bstm_addbatch
     	; <pp-java5-to-string; debug(!"bstm_fetch:")> bstm_fetch*/
/*
  buidl-batch(|x, srt, x_list):
    fa@FieldAccess(_, _){anno*} -> bstm
    where <fetch-elem(?GenericSort(_, [SimpleSort(x_class)]))> anno*
    ; SimpleSort(x_class) := srt
    ; t := <java-type-entity> x_class
    ; x_batch := <fa-to-uniquename(|x_list)> fa
    ; bstm_batch := bstm |[ java.util.ArrayList<t> x_batch = new java.util.ArrayList<t>(); ]|
    ; bstm_addbatch := bstm |[ x_batch.add(x_lst); ]|
    ; bstm_fetch := bstm |[ utils.prefetchEntities(utils.HibernateUtilConfigured.getSessionFactory().getCurrentSession(), "~t", x_batch); ]|
*/
  get-sub-paths(|paths) :
    path -> (path, subpaths)
    with subpaths := <filter(where(collect(?path); ?[_]))> paths

  fa-to-uniquename(|x_list):
    FieldAccess(p, f) -> str
    with strp := <fa-to-uniquename(|x_list)> p
    ; str := <concat-strings> [strp, "_", f]

  fa-to-uniquename(|x_list):
    Cast(p, SimpleSort(x_class)) -> str
    with strp := <fa-to-uniquename(|x_list)> p
    ; str := <concat-strings> [strp, "_as_", x_class, "_"]

  fa-to-uniquename(|x_list):
    Var(_) -> x_list

  simple-joins-to-array(|rootfa):
    rootfa -> ("_", [])

  simple-joins-to-array(|rootfa):
    fa@FieldAccess(p, f){anno*} -> (newprefix, joins)
    where not(rootfa := fa)
    ; (prefix, otherjoins) := <simple-joins-to-array(|rootfa)> p
    ; if not(None() := prefix); <fetch-elem(?SimpleSort(_))> anno* then
	      newjoin := <concat-strings> [prefix, f]
	      ; newprefix := <concat-strings> [newjoin, "._"]
	      ; joins := [newjoin | otherjoins]
      else
        newprefix := None()
        ; joins := otherjoins
      end

  simple-joins-to-array(|rootfa):
    c@Cast(p, srt){anno*} -> result
    where result := <simple-joins-to-array(|rootfa)> p

  /**
   * Hibernate optimization below on hold, Zef is working on a replacement ORM
   */
  /* 
  hibernate-forall-criteria-filter(|x,srt) = hibernate-forall-criteria-filter
  
  hibernate-forall-criteria-filter: 
    (Limit(limit,first), e) -> expr|[ e.setFirstResult(e_first).setMaxResults(e_limit) ]|
    with  e_limit := <expression-to-java-servlet> limit
        ; e_first := <expression-to-java-servlet> first

  hibernate-forall-criteria-filter(|x,srt) =
    // if the order clause is simply a property, then the query can do the ordering   
    hibernate-forall-criteria-order-is-prop(|x,srt)
  <+\(OrderDescending(Null()), e) -> e\
  <+\(OrderAscending(Null()), e) -> e\
  
  hibernate-forall-criteria-order-is-prop(|x,srt) :
    (OrderDescending(orderexp), e) -> <hibernate-forall-criteria-order-is-prop-helper(|x,srt,"desc")> (orderexp, e)
     
  hibernate-forall-criteria-order-is-prop(|x,srt) :
    (OrderAscending(orderexp), e) -> <hibernate-forall-criteria-order-is-prop-helper(|x,srt,"asc")> (orderexp, e)

  hibernate-forall-criteria-order-is-prop-helper(|x,srt,x_order) :
    (orderexp, e) -> expr|[ e.addOrder(org.hibernate.criterion.Order.x_order("~<concat-strings> ["_",prop]")) ]|
    with  SimpleSort(ent) := srt
    where FieldAccess(var,prop) := orderexp
        ; Var(x) := var
        ; <type-of-property> (ent,prop)
  */

rules

  generate-code-java-servlet-once = 
      bagof-AllEntityNames; string-sort-annos
    ; cached-generate(generate-java-servlet-hibernate-util | "internal_HibernateUtil")
    ; fail
    
  generate-java-servlet-hibernate-util :
    all-entity-names -> <emit-java-code-local> compilation-unit|[
    package utils;
    
    import java.util.Properties;
    
    import org.hibernate.*;
    import org.hibernate.cfg.*;
    import org.webdsl.*;
    import org.hibernate.event.*;
    import org.hibernate.event.def.*;
    import java.util.*;
    
    import pkgname.*;
    @SuppressWarnings("unused") 
    public class HibernateUtilConfigured {
        private static final SessionFactory sessionFactory;
        private static Configuration annotationConfiguration;
        static
        { 
          try
          { 
                annotationConfiguration = new Configuration();
    
                //Properties prop = HibernateUtil.getProperties();

                annotationConfiguration.addPackage("utils");
                annotationConfiguration.addAnnotatedClass(utils.ApplicationContextProperty.class);
                annotationConfiguration.addAnnotatedClass(utils.File.class);
                
                annotationConfiguration.addPackage("org.webdsl.search");
                annotationConfiguration.addAnnotatedClass(org.webdsl.search.SearchNamespace.class);
                

                annotationConfiguration.addPackage("~domainpack");
                //annotationConfiguration.addAnnotatedClass(User.class);
                bstm*
    
                //annotationConfiguration.addProperties(prop);
                //bstm1*
                annotationConfiguration.setListener("save-update", new SetVersionSaveOrUpdateEventListener());
                annotationConfiguration.setListener("flush-entity", new SetValidationEventListener());
                annotationConfiguration.setListener("auto-flush", new FastAutoFlushEventListener());
                annotationConfiguration.setInterceptor(new DirtyCheckInterceptor());

                annotationConfiguration.buildMappings();
                bstm1*
    
                sessionFactory = annotationConfiguration.buildSessionFactory();
                
            } catch (Throwable ex) {
                throw new ExceptionInInitializerError(ex);
            }
        }
    
        public static SessionFactory getSessionFactory() {
            return sessionFactory;
        }
        
        public static Configuration getAnnotationConfiguration()
        { 
          return annotationConfiguration;
        }

        // references that will be implicitly stored in the db need version set to at least 1 as well to indicate a persisted entity     
        @SuppressWarnings("serial")
        private static class SetVersionSaveOrUpdateEventListener extends DefaultSaveOrUpdateEventListener 
        {
          public void onSaveOrUpdate(SaveOrUpdateEvent event)  throws HibernateException
          { 
            setVersion(event.getObject());
            super.onSaveOrUpdate(event);
          }
      
          public void setVersion(Object o)
          { 
            if(org.hibernate.Hibernate.isInitialized(o) && o instanceof WebDSLEntity)
            { 
              WebDSLEntity we = (WebDSLEntity)o;
              if(we.getVersion() <= 0)
              { 
                we.setVersion(1);
              }
            }
          }
        } 
        
        //register which objects need to be validated at the end of an action
        @SuppressWarnings("serial")
        private static class SetValidationEventListener extends DefaultFlushEntityEventListener
        { 
            public void onFlushEntity(FlushEntityEvent event) throws HibernateException
            { 
              validate(event.getEntity());
              super.onFlushEntity(event);
            }
            
            public void validate(Object o)
            { 
                if(o instanceof WebDSLEntity)
                { 
                    WebDSLEntity we = (WebDSLEntity)o;
                    AbstractPageServlet aps = ThreadLocalPage.get();
                    if(aps != null){
                      aps.addEntityToValidateAfterAction(we); 
                    }
                }
            }
        }

			  private static class FastAutoFlushEventListener implements org.hibernate.event.AutoFlushEventListener {
			    public void onAutoFlush(org.hibernate.event.AutoFlushEvent event) throws HibernateException {
			      if(!event.getSession().getFlushMode().lessThan(org.hibernate.FlushMode.AUTO)) {
				      //System.out.println("onAutoFlush");
				      event.getSession().flush();
				      event.getSession().setFlushMode(org.hibernate.FlushMode.COMMIT);
			      }
			    }
			  }

			  public static class DirtyCheckInterceptor extends org.hibernate.EmptyInterceptor {
			    @Override
			    public int[] findDirty(Object entity, java.io.Serializable id, Object[] currentState, Object[] previousState, String[] propertyNames, org.hibernate.type.Type[] types) {
			      if(entity instanceof WebDSLEntity && !((WebDSLEntity)entity).isChanged()) {
			        return new int[0]; // Entity is not dirty
			      }
			      return null; // Use default dirty checking
			    }
			  }

    }
    ]|
    with pkgname := <DomainPackage>
       ; domainpack := <pp-java5-to-string> <DomainPackage>
       ; bstm* := <map({\ 
                           x -> bstm |[ annotationConfiguration.addAnnotatedClass(x_class); ]| 
                           where x_class := <concat-strings> [<DomainPackage;pp-java5-to-string>,".",x,".class"]
                       \})> all-entity-names
       ; bstm1* := <bagof-AllEntities; filter(generate-java-servlet-hibernate-util-collection-helper1); flatten-list; filter({\ 
		                           (x_class, x_coltype, x_prop) -> bstm |[ annotationConfiguration.getCollectionMapping("~strRole").setTypeName("~strType"); ]| 
		                           with strRole := <concat-strings> [<DomainPackage;pp-java5-to-string>,".",<capitalize-string>x_class,"._",x_prop]
		                           ; strType := <concat-strings> [<DomainPackage;pp-java5-to-string>,".",<capitalize-string>x_class,<capitalize-string>x_prop, "Owned",x_coltype,"Type"]
                            \})>
      /* ; if not([] := <bagof-AllGlobalVars>) 
         then bstm1* := [ bstm |[ annotationConfiguration.addAnnotatedClass(ApplicationContextProperty.class); ]| ]
         else bstm1* := [] end
 */
 
  generate-java-servlet-hibernate-util-collection-helper2(|x_class) :
    Property(x_prop, _, GenericSort(x_coltype, [SimpleSort(_)]), annos) -> (x_class, x_coltype, x_prop)
    where <?"List" <+ ?"Set"> x_coltype

strategies
  generate-java-servlet-hibernate-util-collection-helper1 =
    get-entity-def
    ; ?(x_class, <id>)
    ; filter(generate-java-servlet-hibernate-util-collection-helper2(|x_class))
