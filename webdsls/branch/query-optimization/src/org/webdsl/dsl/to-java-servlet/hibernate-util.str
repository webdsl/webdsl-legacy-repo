module org/webdsl/dsl/to-java-servlet/hibernate-util

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

overlays

  e_HibSession =
    java:expr |[ HibernateUtilConfigured.getSessionFactory().getCurrentSession() ]|

rules

  hibernate-forall-criteria :
    (term{anno*}, t, x, srt, fltr, prefetch) -> e_criteria
    with e_basecriteria := <try(hibernate-add-cacheable(|anno*))> expr|[ e_HibSession.createCriteria(t.class) ]|
    ; toonejoins := <where(QueryOptimizationMode; ?QueryOptimizationNoJoins()) < get-alias-joins + get-to-one-joins> prefetch
    ; QueryCondition(querycondition) := <fetch-elem(?QueryCondition(_)) <+ !QueryCondition(True())> anno*
    ; e_criteria := <foldr(!e_basecriteria,hibernate-criteria-join); hibernate-criteria-add-condition(|querycondition,x,srt)> toonejoins
        //try on next line since not all ordering can be translated to query
        /** ; e_criteria := <foldr(!e0,hibernate-forall-criteria-filter(|x,srt));where(rules(OrderAndLimitApplied:=True())) <+ !e0> [lim,ob]  */
        
  hibernate-add-cacheable(|anno*) :
    e -> expr |[ e.setCacheable(true) ]|
    where <fetch-elem(?CachedEntity())> anno*

  condition-to-query-string(|x) :
    FieldAccess(p, f) -> expr |[ "~str" ]|
    where <collect(?Var(x)); not(?[])> p
    with alias := <property-to-alias> p
    ; if alias := "" then
        str := <concat-strings> ["_", f]
      else
        str := <concat-strings> [alias, "._", f]
      end

  simple-sort-to-hibernate-type-string : SimpleSort("Int") -> "integer"
  simple-sort-to-hibernate-type-string : SimpleSort("Long") -> "long"
  simple-sort-to-hibernate-type-string : SimpleSort("Bool") -> "boolean"
  simple-sort-to-hibernate-type-string : SimpleSort("Float") -> "float"
  simple-sort-to-hibernate-type-string : SimpleSort("String") -> "string"

  try-get-query-condition-filter = get-anno(get-query-condition-filter) <+ !([], [])

  get-query-condition-filter :
    QueryConditionFilter(name, vars, types) -> /*(expr |[ x_lqi ]|, bstm* |[
      org.hibernate.engine.LoadQueryInfluencers x_lqi = new org.hibernate.engine.LoadQueryInfluencers((org.hibernate.engine.SessionFactoryImplementor)HibernateUtilConfigured.getSessionFactory());
      e_expr;
    ]|)*/
    (bstm* |[ e_expr; ]|, bstm* |[ e_HibSession.disableFilter("~name"); ]|)
    with params := <zip>(<length; range> types, <zip> (vars, types))
    ; e_expr := <foldr(!expr |[ e_HibSession.enableFilter("~name") ]|, add-filter-param)> params

  hibernate-criteria-join :
	  (str{anno*}, e) -> expr|[ e.setFetchMode("~str", org.hibernate.FetchMode.JOIN) ]|
	  where not(<fetch-elem(?RequiresAlias())> anno*)

  hibernate-criteria-join :
    (str{anno*}, e) -> expr|[ e.createAlias("~str", "~alias", org.hibernate.criterion.CriteriaSpecification.LEFT_JOIN) ]|
    where <fetch-elem(?RequiresAlias())> anno*
    with alias := <join-fetch-to-alias> str

  hibernate-criteria-add-condition(|cond,x,srt) :
  	e_criteria -> <id>
  	where <?True()> cond

  hibernate-criteria-add-condition(|cond,x,srt) :
  	e_criteria -> expr|[ e_criteria.add(e_Cond) ]|
  	where not(True() := cond)
  	with e_Cond := <hibernate-criteria-transform-condition(|x,srt)> cond

  hibernate-criteria-add-extra(|anno*, joins, gen, ismain) :
    e_criteria -> expr|[ utils.QueryOptimization.addQueryOptimization(e_criteria, e_CurJoins, e_CurGen, e_IsMain, e_Join, e_Queries, e_Cond, e_CondJoins) ]|
    where <fetch-elem(?QueryOptimizationVars(joinvar, queriesvar, condvar, condjoinsvar))> anno*
    ; e_CurJoins :=  <string-list-to-java-servlet; try(\ expr |[ new String[] {} ]| -> expr |[ null ]| \)> joins
    ; e_CurGen :=    <?None() < !expr |[ null ]| + !expr |[ "~gen" ]|> gen
    ; e_IsMain :=    <expression-to-java-servlet> ismain
    ; e_Join :=      <expression-to-java-servlet> Var(joinvar)
    ; e_Queries :=   <expression-to-java-servlet> Var(queriesvar)
    ; e_Cond :=      <expression-to-java-servlet> Var(condvar)
    ; e_CondJoins := <expression-to-java-servlet> Var(condjoinsvar)

  hibernate-criteria-transform-condition(|x,srt):
    Not(expr1) -> expr|[ org.hibernate.criterion.Restrictions.not(e_expr1new) ]|
    with e_expr1new := <hibernate-criteria-transform-condition(|x,srt)> expr1

  hibernate-criteria-transform-condition(|x,srt):
    Or(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.or(e_expr1new, e_expr2new) ]|
    with e_expr1new := <hibernate-criteria-transform-condition(|x,srt)> expr1
    ; e_expr2new := <hibernate-criteria-transform-condition(|x,srt)> expr2

  hibernate-criteria-transform-condition(|x,srt):
    And(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.and(e_expr1new, e_expr2new) ]|
    with e_expr1new := <hibernate-criteria-transform-condition(|x,srt)> expr1
    ; e_expr2new := <hibernate-criteria-transform-condition(|x,srt)> expr2

  hibernate-criteria-transform-condition(|x,srt):
    SmallerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.leProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props(|x,srt)>(expr1, expr2) // Both expressions are database fields

  hibernate-criteria-transform-condition(|x,srt):
    SmallerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.le(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop(|x,srt)>(expr1, expr2) // expr1 is a database field, expr2 is not

  hibernate-criteria-transform-condition(|x,srt):
    SmallerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.gt(e_expr2new, e_expr1new) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop(|x,srt)>(expr1, expr2) // expr2 is a database field, expr1 is not

  hibernate-criteria-transform-condition(|x,srt):
    SmallerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.ltProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    SmallerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.lt(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    SmallerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.ge(e_expr2new, e_expr1new) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    LargerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.geProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    LargerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.ge(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    LargerThanOrEqual(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.lt(e_expr2new, e_expr1new) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    LargerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.gtProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    LargerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.gt(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    LargerThan(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.le(e_expr2new, e_expr1new) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    NotEq(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.neProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    NotEq(expr1, expr2) -> expr|[ utils.QueryOptimization.getNotEqCondition(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    NotEq(expr1, expr2) -> expr|[ utils.QueryOptimization.getNotEqCondition(e_expr2new, e_expr1new) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    Eq(expr1, expr2) -> expr|[ org.hibernate.criterion.Restrictions.eqProperty(e_expr1new, e_expr2new) ]|
    where (e_expr1new, e_expr2new) := <transform-both-props(|x,srt)>(expr1, expr2)

  hibernate-criteria-transform-condition(|x,srt):
    Eq(expr1{anno*}, expr2) -> expr|[ utils.QueryOptimization.getEqCondition(e_expr1new, e_expr2new, e_naturalId) ]|
    where (e_expr1new, e_expr2new) := <transform-param1-prop(|x,srt)>(expr1, expr2)
    ; e_naturalId := <fetch-elem(?IsNaturalId()) < !expr|[true]| + !expr|[false]|> anno*

  hibernate-criteria-transform-condition(|x,srt):
    Eq(expr1, expr2{anno*}) -> expr|[ utils.QueryOptimization.getEqCondition(e_expr2new, e_expr1new, e_naturalId) ]|
    where (e_expr1new, e_expr2new) := <transform-param2-prop(|x,srt)>(expr1, expr2)
    ; e_naturalId := <fetch-elem(?IsNaturalId()) < !expr|[true]| + !expr|[false]|> anno*

  transform-both-props(|x,srt):
  	(expr1, expr2) -> (e_expr1new, e_expr2new)
    where not([] := <collect(?Var(x))>expr1); not([] := <collect(?Var(x))>expr2) 
    with e_expr1new := <condition-to-query-string(|x)> expr1
    ; e_expr2new := <condition-to-query-string(|x)> expr2

  transform-param1-prop(|x,srt):
    (expr1, expr2) -> (e_expr1new, e_expr2new)
    where not([] := <collect(?Var(x))>expr1); [] := <collect(?Var(x))>expr2
    with e_expr1new := <condition-to-query-string(|x)> expr1
    ; e_expr2new := <expression-to-java-servlet> expr2

  transform-param2-prop(|x,srt):
    (expr1, expr2) -> (e_expr2new, e_expr1new)
    where [] := <collect(?Var(x))>expr1; not([] := <collect(?Var(x))>expr2) 
    with e_expr1new := <expression-to-java-servlet> expr1
    ; e_expr2new := <condition-to-query-string(|x)> expr2

  add-direct-fetches(|e_criteria) :
    PrefetchFor(_, _, _, PrefetchChildren(tree)) -> e_newcriteria
    with toonejoins := <get-to-one-joins> tree
    ; e_newcriteria := <foldr(!e_criteria, \ (str, e) -> expr |[ e.setFetchMode("~str", org.hibernate.FetchMode.JOIN) ]| \)> toonejoins

  get-direct-fetches :
    prefetch -> e_joins
    with toonejoins := <get-to-one-joins> prefetch
    ; e_joins := <string-list-to-java-servlet-or-null> toonejoins

  get-batch-fetches(|x_list, srt) =
    ?PrefetchFor(_, templ, _, <get-prefetch-children>)
    //; where(<debug(!"build:")>(x_list, srt))
    ; bstm_sub* := <build-sub-batches(|x_list, srt)>
    ; bstm_templ* := <get-prefetch-for-template(|x_list) <+ ![]> templ
    ; !bstm* |[ bstm_templ* bstm_sub* ]|
    //; where(not(?[]; info(|"skip")))
    //; debug(!"builddone:")

  get-batch-fetches-single(|x, srt) :
    PrefetchFor(_, _, _, tree) -> bstm* |[
														        if(x != null) {
														          java.util.ArrayList<t> x_list = new java.util.ArrayList<t>();
														          x_list.add(x);
														          utils.QueryOptimization.prefetchEntities(utils.HibernateUtilConfigured.getSessionFactory().getCurrentSession(), "~str", x_list, e_joins);          
														          bstm_sub*
														        }
														      ]|
    where t := <java-type> srt
    ; str := <java-type-name> srt
    ; e_joins := <get-prefetch-children; get-direct-fetches> tree
    ; x_list := <concat-strings; newname>[x, "Lst"]
    ; bstm_sub* := <get-prefetch-children; build-sub-batches(|x_list, srt)> tree

  get-batch-fetches-single-simple(|x, srt) :
    PrefetchFor(_, _, _, tree) -> bstm* |[
                                    if(x instanceof org.hibernate.proxy.HibernateProxy) utils.QueryOptimization.prefetchEntity(utils.HibernateUtilConfigured.getSessionFactory().getCurrentSession(), "~str", (org.hibernate.proxy.HibernateProxy)x, e_joins);          
                                  ]|
    where str := <java-type-name> srt
    ; e_joins := <get-prefetch-children; get-direct-fetches; where(not(?expr |[ null ]|))> tree // If no joins are present then this would just be a hibSession.get()

  get-generic-batch-fetches(|x_list, srt) =
    ?PrefetchFor(_, _, _, <get-prefetch-children>)
    ; (where(QueryOptimizationMode; ?QueryOptimizationNoJoins()) <+ filter(has-generic-batch-fetch))
    ; build-sub-batches(|x_list, srt)
    /*
    ?qo@QueryOptimizations(joincandidates, joincandidatesgen, cond)
    ; <get-batch-fetches(|x, srt, x_list)> QueryOptimizations([], joincandidatesgen, cond)*/

  has-generic-batch-fetch = where(?PrefetchNode(_, _{PrefetchPropAnno(_,<id>)}, _, _, _, _); is-generic-sort)

  has-generic-batch-fetch :
    PrefetchNode(castsrt, name{PrefetchPropAnno(decsrt,fsrt)}, deftempl, cond, elemcond, children){anno*} ->
    PrefetchNode(castsrt, name{PrefetchPropAnno(decsrt,fsrt)}, deftempl, cond, elemcond, PrefetchChildren(newchildren)){anno*}
    where not(<is-generic-sort> fsrt)
    ; newchildren := <get-prefetch-children; filter(has-generic-batch-fetch)> children
    ; not([] := newchildren)

  build-sub-batches(|x_list, srt) :
    [] -> []

  truncate-keep-right(|len) = where(!(<strlen>, len); not(gt))

  truncate-keep-right(|len) = where(!(<strlen>, len); gt); explode-string; reverse; take(|95); reverse; implode-string

  truncate-keep-left(|len) = where(!(<strlen>, len); not(gt))

  truncate-keep-left(|len) = where(!(<strlen>, len); gt); explode-string; take(|95); implode-string

  build-sub-batches(|x_list, srt) :
    children -> bstm* |[
        bstm_batch*
        for(t x_batchelem : x_list) {
          if(x_batchelem == null) continue;
          bstm_addbatch*
        }
        bstm_fetch*
        bstm_after2*
        bstm_final*
        bstm_subbatch*
      ]|
    with t := <java-type> srt
    ; x_batchelem := <concat-strings; truncate-keep-right(|95); newname>[x_list, "Elem"]
    ; tmp := <map(build-batch(|x_batchelem, srt, x_list))> children
    ; bstm_batch* :=    <map(?(<id>, _, _, _, _, _)); flatten-list> tmp
    ; bstm_addbatch* := <map(?(_, <id>, _, _, _, _))> tmp
    ; bstm_fetch* :=    <map(?(_, _, <id>, _, _, _)); flatten-list> tmp
    ; bstm_after* :=    <map(?(_, _, _, <id>, _, _)); flatten-list> tmp
    ; bstm_final* :=    <map(?(_, _, _, _, <id>, _)); flatten-list> tmp 
    ; bstm_subbatch* := <map(?(_, _, _, _, _, <id>)); flatten-list> tmp 
    ; if not([] := bstm_after*); not([] := bstm_subbatch*) then 
        bstm_after2* := [bstm |[
          for(t x_batchelem : x_list) {
            if(x_batchelem == null) continue;
            bstm_after*
          }
        ]|]
      else
        bstm_after2* := []
      end
    //; with(where(pp-java5-to-string; debug(!"bstm_subbatch:")))
/*
  get-default-template-condition :
    PrefetchIfDefault(templ) -> expr |[ ( e_Conds ) ]|
    where [cond|conds] := <map(\ TemplateArg(n, t*) -> genname with genname := <generate-template-name>(n, t*) \)> templ
    ; e_Cond := <get-default-template-condition-helper> cond
    ; e_Conds := <foldr(!e_Cond, get-default-template-condition-helper)> conds
*/
  get-prefetch-for-template(|x_list) :
    PrefetchTemplateArgs(lst) -> bstm* |[ try{ bstm* } catch(Exception ex) {} ]|
    with bstm* := <map(get-prefetch-for-template(|x_list)); flatten-list> lst

  get-prefetch-for-template(|x_list) :
    TemplateArgOrThis(n, arg){anno*} -> bstm* |[ e_newtemplateinstance.prefetchFor(~i:stri, x_list); ]|
    with <fetch-elem(?TemplateName(genname))> anno*
    ; e_newtemplateinstance := java:expr|[ (TemplateServlet) env.getTemplate("~genname").newInstance() ]|
    ; (i, e) := <add-indices; fetch-elem(?(_, Cast(PrefetchThis(), _)) <+ ?(_, PrefetchThis()))> arg
    ; stri := <int-to-string> i
/*
  get-default-template-condition-helper :
    genname -> expr |[ !env.isRedefinedTemplate("~genname") ]|

  get-default-template-condition-helper :
    (genname, e) -> expr |[ e || !env.isRedefinedTemplate("~genname") ]|
*/
  add-conditions-to-prefetch(|cond, v) :
    e_Cond -> e_NewCond
    with e_NewCond := <try(add-join-condition(|cond, v))> e_Cond

  add-condition-checks-to-prefetch(|cond, v) :
    stm_Expr -> bstm |[ if(e_JoinCond) stm_Expr ]|
    where e_JoinCond := <get-join-condition(|v)> cond

  /*
  elemsrt : The sort of x_elem
  decsrt : The subsort of elemsrt that declares f
  castsrt : The sort which x_elem should be cast to (or None), this can also be a subsort of decsrt
  fsrt : The sort of f, which can be a generic-sort
  */
    //fa@FieldAccess(c, _){anno*} -> (fa{anno*}, x_batch, t, bstm_batch, bstm_addbatch, bstm_fetch, [])
  build-batch(|x_elem, elemsrt, x_list):
    PrefetchNode(castsrt, f{PrefetchPropAnno(decsrt, fsrt)}, templ, cond, elemcond, children){anno*} -> (bstm_batch, bstm_addbatch, bstm_fetch*, [], bstm_final*, bstm_sub*)
    where not(<fetch-elem(?IsLazyFetch())> anno*)
    ; SimpleSort(x_class) := fsrt
    with t := <java-type> fsrt
    ; str := <java-type-name> fsrt
    ; x_batch := <concat-strings; truncate-keep-left(|95); newname>[x_list, "_", f]
    ; bstm_batch := bstm |[ java.util.ArrayList<t> x_batch = new java.util.ArrayList<t>(); ]|
    ; e_joins := <get-prefetch-children; get-to-one-joins; string-list-to-java-servlet-or-null> children
    //; x_get := <concat-strings>["get", <capitalize-string> f]
    ; v := Var(x_elem){TypeAnno(elemsrt)}
    ; if Some(simplecastsrt@SimpleSort(x_castclass)) := castsrt then
        e_expr := <expression-to-java-servlet> FieldAccess(Cast(v, simplecastsrt), f)
        ; e_Cond := <add-conditions-to-prefetch(|cond, v)> expr |[ x_elem.instanceOf("~x_castclass") ]|
        ; bstm_addbatch := bstm |[ if (e_Cond) x_batch.add(e_expr); ]|
      else
        e_expr := <expression-to-java-servlet> FieldAccess(v, f)
        ; bstm_addbatch := <try(add-condition-checks-to-prefetch(|cond, v))> bstm |[ x_batch.add(e_expr); ]|
      end
    ; bstm_fetch* := bstm* |[ utils.QueryOptimization.prefetchEntities(utils.HibernateUtilConfigured.getSessionFactory().getCurrentSession(), "~str", x_batch, e_joins); ]|
    ; bstm_final* := <get-prefetch-for-template(|x_batch) <+ ![]> templ
    ; bstm_sub* := <get-prefetch-children; build-sub-batches(|x_batch, fsrt)> children

  build-batch(|x_elem, elemsrt, x_list):
    PrefetchNode(castsrt, f{PrefetchPropAnno(decsrt, fsrt)}, templ, cond, elemcond, children){anno*} -> (bstm_batch, bstm_addbatch, bstm_fetch*, bstm_after*, bstm_final*, bstm_sub*)
    where <fetch-elem(?IsLazyFetch())> anno*
    ; SimpleSort(x_class) := fsrt
    with t := <java-type> fsrt
    ; str := <java-type-name> decsrt
    ; field := <concat-strings>["_", f]
    ; x_f := <capitalize-string> f
    ; x_batch := <concat-strings; truncate-keep-left(|95); newname>[x_list, "_", f]
    ; x_ownerids := <concat-strings; truncate-keep-left(|95); newname> [x_list, "_", f, "OwnerIds"]
    ; e_joins := <get-prefetch-children; get-to-one-joins; string-list-to-java-servlet-or-null> children
    ; bstm_batch := bstm* |[
          java.util.Set<java.io.Serializable> x_ownerids = new java.util.HashSet<java.io.Serializable>();
          java.util.ArrayList<t> x_batch = new java.util.ArrayList<t>();
        ]|
    ; v := Var(x_elem){TypeAnno(elemsrt)}
    ; if Some(simplecastsrt@SimpleSort(x_castclass)) := castsrt then
        e_c := <expression-to-java-servlet> Cast(v, simplecastsrt)
        ; e_expr := <expression-to-java-servlet> FieldAccess(Cast(v, simplecastsrt), f)
        ; e_Cond := <add-conditions-to-prefetch(|cond, v)> expr |[ x_elem.instanceOf("~x_castclass") ]|
        ; bstm_addbatch := bstm |[ if ( e_Cond && e_c.is#x_f#Uninitialized() ) x_ownerids.add(x_elem.getId()); ]|
        ; bstm_after* := bstm* |[ if (e_Cond) x_batch.add(e_expr); ]|
      else
        e_expr := <expression-to-java-servlet> FieldAccess(v, f)
        ; e_Cond := <add-conditions-to-prefetch(|cond, v)> expr |[ x_elem.is#x_f#Uninitialized() ]|
        ; bstm_addbatch := bstm |[ if (e_Cond) x_ownerids.add(x_elem.getId()); ]|
        ; bstm_after* := <try(add-condition-checks-to-prefetch(|cond, v))> bstm* |[ x_batch.add(e_expr); ]|
      end
    ; bstm_fetch* := bstm* |[ utils.QueryOptimization.prefetchLazyProperties(utils.HibernateUtilConfigured.getSessionFactory().getCurrentSession(), "~str", "~field", x_ownerids, e_joins); ]|
    ; bstm_final* := <get-prefetch-for-template(|x_batch) <+ ![]> templ
    ; bstm_sub* := <get-prefetch-children; build-sub-batches(|x_batch, fsrt)> children

  build-batch(|x_elem, elemsrt, x_list):
    PrefetchNode(castsrt, f{PrefetchPropAnno(decsrt, fsrt)}, templ, cond, elemcond, children){anno*} -> (bstm_batch, bstm_addbatch, bstm_fetch*, bstm_after*, bstm_disable*, bstm_sub*)
    where GenericSort(_, [fsimplesrt]) := fsrt
    with t_Owner := <java-type> decsrt
    ; t := <java-type> fsimplesrt
    ; x_batch := <concat-strings; truncate-keep-left(|95); newname>[x_list, "_", f]
    ; x_owner := <concat-strings; truncate-keep-left(|95); newname>[x_list, "_", f, "Owner"]
    ; e_joins := <get-prefetch-children; get-to-one-joins; string-list-to-java-servlet-or-null> children
    ; bstm_batch := bstm* |[ java.util.ArrayList<t_Owner> x_owner = new java.util.ArrayList<t_Owner>();
                            java.util.HashSet<t> x_batch = new java.util.HashSet<t>();
                          ]|
    ; strRole := <concat-strings>[<java-type-name> decsrt, "._", f]
    ; v := Var(x_elem){TypeAnno(elemsrt)}
    ; (bstm_enable*, bstm_disable*) := <try-get-query-condition-filter> elemcond
    ; if Some(simplecastsrt@SimpleSort(x_castclass)) := castsrt then
        e_c := <expression-to-java-servlet> Cast(v, simplecastsrt)
        ; e_expr := <expression-to-java-servlet> FieldAccess(Cast(v, simplecastsrt), f)
        ; e_Cond := <add-conditions-to-prefetch(|cond, v)> expr |[ x_elem.instanceOf("~x_castclass") ]|
        ; bstm_addbatch := bstm |[ if (e_Cond && e_expr instanceof org.hibernate.collection.PersistentCollection && !((org.hibernate.collection.PersistentCollection)e_expr).wasInitialized()) x_owner.add(e_c); ]|
        ; bstm_after* := bstm* |[ if (e_Cond) x_batch.addAll(e_expr); ]|
      else
        e_expr := <expression-to-java-servlet> FieldAccess(v, f)
        ; e_Cond := <add-conditions-to-prefetch(|cond, v)> expr |[ e_expr instanceof org.hibernate.collection.PersistentCollection && !((org.hibernate.collection.PersistentCollection)e_expr).wasInitialized() ]|
        ; bstm_addbatch := bstm |[ if(e_Cond) x_owner.add(x_elem); ]|
        ; bstm_after* := <try(add-condition-checks-to-prefetch(|cond, v))> bstm* |[ x_batch.addAll(e_expr); ]|
      end
    ; bstm_fetchtmp := bstm |[ utils.QueryOptimization.prefetchCollections(utils.HibernateUtilConfigured.getSessionFactory().getCurrentSession(), "~strRole", x_owner, e_joins, null); ]|
    ; bstm_fetch* := bstm* |[
        bstm_enable*
        bstm_fetchtmp
      ]|
    ; bstm_templ* := <get-prefetch-for-template(|x_batch) <+ ![]> templ
    ; bstm_final* := [bstm_disable*,bstm_templ*]
    ; bstm_sub* := <get-prefetch-children; build-sub-batches(|x_batch, fsimplesrt)> children

  get-join-condition(|v) :
    PrefetchCondition(cond) -> e_JoinCond
    with e_JoinCond := <alltd(replace-relative-fa(|v)); expression-to-java-servlet> cond

  add-join-condition(|cond, v) :
    e_Cond -> expr |[ e_Cond && (e_JoinCond) ]|
    where e_JoinCond := <get-join-condition(|v)> cond

  replace-relative-fa(|v) :
    expr@c#([expr1, expr2]) -> exprwithtypechecks
    where <elem> (c, ["Eq", "NotEq", "SmallerThan", "SmallerThanOrEqual", "LargerThan", "LargerThanOrEqual"])
    ; newexpr := <all(alltd(replace-relative-fa(|v)))> expr // Replace all relative-fa in subexpression to get casts
    ; [first|other] := <collect(\Cast(e, srt) -> IsA(e, srt)\); make-set> newexpr // Convert the casts to typechecks
    with exprwithtypechecks := <foldr(!And(first,newexpr), \ (check, cond) -> And(check, cond) \)> other // Add the type checks to the condition

  replace-relative-fa(|v) :
    RelativeFieldAccess(castsrt, f) -> FieldAccess(Cast(v, castsrt), f) // A cast in a relative fa is not wrapped in a Some constructor
    where not(None() := castsrt)

  replace-relative-fa(|v) :
    RelativeFieldAccess(None(), f) -> FieldAccess(v, f)

  get-sub-paths(|paths) :
    path -> (path, subpaths)
    with subpaths := <filter(where(collect(?path); ?[_]))> paths

  fa-to-uniquename(|x_list):
    FieldAccess(p, f) -> str
    with strp := <fa-to-uniquename(|x_list)> p
    ; str := <concat-strings> [strp, "_", f]

  fa-to-uniquename(|x_list):
    Cast(p, SimpleSort(x_class)) -> str
    with strp := <fa-to-uniquename(|x_list)> p
    ; str := <concat-strings> [strp, "_as_", x_class, "_"]

  fa-to-uniquename(|x_list):
    Var(_) -> x_list

  simple-joins-to-array(|rootfa) = where(AllJoins() := <QueryOptimizationMode>) < all-joins-to-array(|rootfa) + real-simple-joins-to-array(|rootfa)

  real-simple-joins-to-array(|rootfa):
    rootfa -> ("_", [])

  real-simple-joins-to-array(|rootfa):
    fa@FieldAccess(p, f){anno*} -> (newprefix, joins)
    where not(rootfa := fa)
    ; (prefix, otherjoins) := <real-simple-joins-to-array(|rootfa)> p
    ; if not(None() := prefix); <fetch-elem(?SimpleSort(_))> anno* then
	      newjoin := <concat-strings> [prefix, f]
	      ; newprefix := <concat-strings> [newjoin, "._"]
	      ; joins := [newjoin | otherjoins]
      else
        newprefix := None()
        ; joins := otherjoins
      end

  real-simple-joins-to-array(|rootfa):
    c@Cast(p, srt){anno*} -> result
    where result := <real-simple-joins-to-array(|rootfa)> p

  all-joins-to-array(|rootfa):
    rootfa -> ("_", [])

  all-joins-to-array(|rootfa):
    fa@FieldAccess(p, f){anno*} -> (newprefix, joins)
    where not(rootfa := fa)
    ; (prefix, otherjoins) := <all-joins-to-array(|rootfa)> p
	  ; newjoin := <concat-strings> [prefix, f]
	  ; newprefix := <concat-strings> [newjoin, "._"]
	  ; joins := [newjoin | otherjoins]

  all-joins-to-array(|rootfa):
    c@Cast(p, srt){anno*} -> result
    where result := <all-joins-to-array(|rootfa)> p

  /**
   * Hibernate optimization below on hold, Zef is working on a replacement ORM
   */
  /* 
  hibernate-forall-criteria-filter(|x,srt) = hibernate-forall-criteria-filter
  
  hibernate-forall-criteria-filter: 
    (Limit(limit,first), e) -> expr|[ e.setFirstResult(e_first).setMaxResults(e_limit) ]|
    with  e_limit := <expression-to-java-servlet> limit
        ; e_first := <expression-to-java-servlet> first

  hibernate-forall-criteria-filter(|x,srt) =
    // if the order clause is simply a property, then the query can do the ordering   
    hibernate-forall-criteria-order-is-prop(|x,srt)
  <+\(OrderDescending(Null()), e) -> e\
  <+\(OrderAscending(Null()), e) -> e\
  
  hibernate-forall-criteria-order-is-prop(|x,srt) :
    (OrderDescending(orderexp), e) -> <hibernate-forall-criteria-order-is-prop-helper(|x,srt,"desc")> (orderexp, e)
     
  hibernate-forall-criteria-order-is-prop(|x,srt) :
    (OrderAscending(orderexp), e) -> <hibernate-forall-criteria-order-is-prop-helper(|x,srt,"asc")> (orderexp, e)

  hibernate-forall-criteria-order-is-prop-helper(|x,srt,x_order) :
    (orderexp, e) -> expr|[ e.addOrder(org.hibernate.criterion.Order.x_order("~<concat-strings> ["_",prop]")) ]|
    with  SimpleSort(ent) := srt
    where FieldAccess(var,prop) := orderexp
        ; Var(x) := var
        ; <type-of-property> (ent,prop)
  */

rules

  generate-code-java-servlet-once = 
      bagof-AllEntityNames; string-sort-annos
    ; cached-generate(generate-java-servlet-hibernate-util | "internal_HibernateUtil")
    ; fail
    
  generate-java-servlet-hibernate-util :
    all-entity-names -> <emit-java-code-local> compilation-unit|[
    package utils;
    
    import java.util.Properties;
    
    import org.hibernate.*;
    import org.hibernate.cfg.*;
    import org.webdsl.*;
    import org.hibernate.event.*;
    import org.hibernate.event.def.*;
    import java.util.*;
    
    import pkgname.*;
    @SuppressWarnings("unused") 
    public class HibernateUtilConfigured {
        private static final SessionFactory sessionFactory;
        private static Configuration annotationConfiguration;
        static
        { 
          try
          { 
                bstm_optimizationMode*
                annotationConfiguration = new Configuration();
                bstm_setprops*
    
                //Properties prop = HibernateUtil.getProperties();

                annotationConfiguration.addPackage("utils");
                annotationConfiguration.addAnnotatedClass(utils.ApplicationContextProperty.class);
                annotationConfiguration.addAnnotatedClass(utils.File.class);

                annotationConfiguration.addPackage("~domainpack");
                //annotationConfiguration.addAnnotatedClass(User.class);
                bstm*
    
                //annotationConfiguration.addProperties(prop);
                //bstm1*
                annotationConfiguration.setListener("save-update", new SetVersionSaveOrUpdateEventListener());
                annotationConfiguration.setListener("flush-entity", new SetValidationEventListener());
                annotationConfiguration.setListener("auto-flush", new FastAutoFlushEventListener());
                annotationConfiguration.setInterceptor(new DirtyCheckInterceptor());

                annotationConfiguration.buildMappings();
                bstm1*
    
                sessionFactory = annotationConfiguration.buildSessionFactory();
                
            } catch (Throwable ex) {
                throw new ExceptionInInitializerError(ex);
            }
        }
    
        public static SessionFactory getSessionFactory() {
            return sessionFactory;
        }
        
        public static Configuration getAnnotationConfiguration()
        { 
          return annotationConfiguration;
        }

        // references that will be implicitly stored in the db need version set to at least 1 as well to indicate a persisted entity     
        @SuppressWarnings("serial")
        private static class SetVersionSaveOrUpdateEventListener extends DefaultSaveOrUpdateEventListener 
        {
          public void onSaveOrUpdate(SaveOrUpdateEvent event)  throws HibernateException
          { 
            setVersion(event.getObject());
            super.onSaveOrUpdate(event);
          }
      
          public void setVersion(Object o)
          { 
            if(org.hibernate.Hibernate.isInitialized(o) && o instanceof WebDSLEntity)
            { 
              WebDSLEntity we = (WebDSLEntity)o;
              if(we.getVersion() <= 0)
              { 
                we.setVersion(1);
              }
            }
          }
        } 
        
        //register which objects need to be validated at the end of an action
        @SuppressWarnings("serial")
        private static class SetValidationEventListener extends DefaultFlushEntityEventListener
        { 
            public void onFlushEntity(FlushEntityEvent event) throws HibernateException
            { 
              validate(event.getEntity());
              super.onFlushEntity(event);
            }
            
            public void validate(Object o)
            { 
                if(o instanceof WebDSLEntity)
                { 
                    WebDSLEntity we = (WebDSLEntity)o;
                    AbstractPageServlet aps = ThreadLocalPage.get();
                    if(aps != null){
                      aps.addEntityToValidateAfterAction(we); 
                    }
                }
            }
        }

			  private static class FastAutoFlushEventListener implements org.hibernate.event.AutoFlushEventListener {
			    public void onAutoFlush(org.hibernate.event.AutoFlushEvent event) throws HibernateException {
			      if(!event.getSession().getFlushMode().lessThan(org.hibernate.FlushMode.AUTO)) {
				      //System.out.println("onAutoFlush");
				      event.getSession().flush();
				      event.getSession().setFlushMode(org.hibernate.FlushMode.COMMIT);
			      }
			    }
			  }

			  public static class DirtyCheckInterceptor extends org.hibernate.EmptyInterceptor {
			    @Override
			    public int[] findDirty(Object entity, java.io.Serializable id, Object[] currentState, Object[] previousState, String[] propertyNames, org.hibernate.type.Type[] types) {
			      if(entity instanceof WebDSLEntity && !((WebDSLEntity)entity).isChanged()) {
			        return new int[0]; // Entity is not dirty
			      }
			      return null; // Use default dirty checking
			    }
			  }

    }
    ]|
    with pkgname := <DomainPackage>
       ; domainpack := <pp-java5-to-string> <DomainPackage>
       ; bstm* := <map({\ 
                           x -> bstm |[ annotationConfiguration.addAnnotatedClass(x_class); ]| 
                           where x_class := <concat-strings> [<DomainPackage;pp-java5-to-string>,".",x,".class"]
                       \})> all-entity-names
       ; bstm1* := <bagof-AllEntities; filter(generate-java-servlet-hibernate-util-collection-helper1); flatten-list; filter({\ 
		                           (x_class, x_coltype, x_prop) -> bstm |[ annotationConfiguration.getCollectionMapping("~strRole").setTypeName("~strType"); ]| 
		                           with strRole := <concat-strings> [<DomainPackage;pp-java5-to-string>,".",<capitalize-string>x_class,"._",x_prop]
		                           ; strType := <concat-strings> [<DomainPackage;pp-java5-to-string>,".",<capitalize-string>x_class,<capitalize-string>x_prop, "Owned",x_coltype,"Type"]
                            \})>
       ; bstm_setprops* := <QueryOptimizationMode; ((?HibernateBatch() <+ ?HibernateSubselectWithBatching()) < !bstm*|[annotationConfiguration.setProperty("hibernate.default_batch_fetch_size", "10");]| + ![])>
       ; bstm_optimizationMode* := <QueryOptimizationMode; optimization-mode-to-java>
      /* ; if not([] := <bagof-AllGlobalVars>) 
         then bstm1* := [ bstm |[ annotationConfiguration.addAnnotatedClass(ApplicationContextProperty.class); ]| ]
         else bstm1* := [] end
 */

  optimization-mode-to-java : NoQueryOptimization() -> bstm* |[utils.QueryOptimization.optimizationMode = 0; ]|
  optimization-mode-to-java : QueryOptimization() -> bstm* |[utils.QueryOptimization.optimizationMode = 1; ]|
  optimization-mode-to-java : HibernateBatch() -> bstm* |[utils.QueryOptimization.optimizationMode = 2; ]|
  optimization-mode-to-java : GuidedBatch() -> bstm* |[utils.QueryOptimization.optimizationMode = 3; ]|
  optimization-mode-to-java : AllJoins() -> bstm* |[utils.QueryOptimization.optimizationMode = 4; ]|
  optimization-mode-to-java : AtArguments() -> bstm* |[utils.QueryOptimization.optimizationMode = 5; ]|
  //optimization-mode-to-java : AndSimpleArguments() -> bstm* |[utils.QueryOptimization.optimizationMode = 6; ]|
  optimization-mode-to-java : HibernateSubselect() -> bstm* |[utils.QueryOptimization.optimizationMode = 7; ]|
  optimization-mode-to-java : QueryOptimizationNoJoins() -> bstm* |[utils.QueryOptimization.optimizationMode = 8; ]|
  optimization-mode-to-java : HibernateSubselectWithBatching() -> bstm* |[utils.QueryOptimization.optimizationMode = 9; ]|
 
  generate-java-servlet-hibernate-util-collection-helper2(|x_class) :
    Property(x_prop, _, GenericSort(x_coltype, [SimpleSort(_)]), annos) -> (x_class, x_coltype, x_prop)
    where <?"List" <+ ?"Set"> x_coltype

strategies
  generate-java-servlet-hibernate-util-collection-helper1 =
    get-entity-def
    ; ?(x_class, <id>)
    ; filter(generate-java-servlet-hibernate-util-collection-helper2(|x_class))
