module org/webdsl/dsl/to-java-servlet/native/declare-class

rules

  native-class-java-type: 
    sort -> type|[ x ]|
    where x := <native-class-name-from-type; pp-qualified>
 
  pp-qualified: 
    x -> x where is-string
  pp-qualified:
    Qualified(q,name) -> res
    with res := <concat-strings> [<pp-qualified> q,".",name]
 
  //static function
  call-to-java-servlet :
    Call(Var(x),x_funcname,args) -> java |[ x_classname.x_funcname(e*) ]|
    where <is-native-class> x
    with  x_classname := <native-class-name; pp-webdsl-to-string> x
        ; e* := <map(expression-to-java-servlet)> args
  
  call-to-java-servlet :
    Call(e,x,args) ->   java |[ e1.x(e*) ]|
    where <is-native-class> e
    where not(get-anno(?TypeNativeFunction(staticfuncname)))
    with  e1 := <expression-to-java-servlet> e 
        ; e* := <map(expression-to-java-servlet)> args      
          
  call-to-java-servlet :
    Call(e,x,args) -> result
    where get-anno(?TypeNativeFunction(staticfuncname))
    with  e1 := <expression-to-java-servlet> e 
        ; e* := <map(expression-to-java-servlet)> args      
    with  if <?None()> staticfuncname
          then result := java |[ e1.x(e*) ]|
          else x_staticmethod := <pp-webdsl-to-string> staticfuncname
             ; result := java |[ x_staticmethod(e1,e*) ]|
          end
          
  call-to-java-servlet :
    ThisCall(x,args) ->   java |[ new x_cons(e*) ]|
    where qualifiedname := <native-class-name> x
    with  x_cons := <pp-webdsl-to-string> qualifiedname
        ; e* := <map(expression-to-java-servlet)> args
        
  assignment-to-java-servlet-specific :
    Stat(Assignment(q@FieldAccess(qid, x), e1)) -> bstm |[ e2.x = e3; ]|
    where <is-native-class> qid
    with  e2 := <expression-to-java-servlet> qid
        ; e3 := <expression-to-java-servlet> e1
        
  field-access-to-java-servlet :
    FieldAccess(e1, x) -> expr|[ e2.x ]|
    where <is-native-class> e1
    with  e2 := <expression-to-java-servlet> e1
    
    
    
    