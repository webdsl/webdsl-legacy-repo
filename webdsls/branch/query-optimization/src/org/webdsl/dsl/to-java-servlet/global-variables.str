module org/webdsl/dsl/to-java-servlet/global-variables

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front

rules //global var use

  expression-to-java-servlet :
    gv@GlobalVar(x) -> expr|[ (x_class) env.getVariable("~x") ]|
    where x_class := <get-type-anno; java-type-name> gv

rules

  generate-code-java-servlet-once: _ ->
    <emit-java-code; fail> compilation-unit|[
      package utils;
  
      import java.io.*;
      import java.util.HashMap;
  
      import javax.servlet.*;
      import javax.servlet.http.*;
      import java.util.*;
      import utils.*;
      import pkgname.*;
      import pkgname2.*;
      
      import org.webdsl.lang.Environment;
  
      @SuppressWarnings({"unused","unchecked"})
      public class GlobalVariables {
      
        private static org.hibernate.Session hibSession;
        
        private static Environment env; 
        
        private static java.io.PrintWriter out = null;
          
        ~*cbds*
        ~*cbds1*
        ~*cbds2*
    
        static boolean applicationContextPropertyExists(String name, List<ApplicationContextProperty> res){
          for(ApplicationContextProperty a : res){
            if(a.getName().equals(name))	
              return true;
          }
          return false;
        } 
        
        public static boolean globalvarsChecked = false;
        
        public static void forceLoad(){
          globalvarsChecked = false;
          load();
        }
        
        public static void load(){
          if(!globalvarsChecked){
              out = new java.io.PrintWriter(System.out);
              ThreadLocalOut.push(out);
              
              bstm_initobjects*
            
              //assumes session already started a transaction
              hibSession = HibernateUtilConfigured.getSessionFactory().getCurrentSession();
              
              env = PageServlet.staticEnv;
        
              boolean pageServletIsNotSet = ThreadLocalPage.get()==null;
              if(pageServletIsNotSet){
                ThreadLocalPage.set(new GlobalsPageServlet(env));
              }
              
              org.hibernate.Query q = hibSession.createQuery("from ApplicationContextProperty");
              List<ApplicationContextProperty> res = q.list();
      
              bstm3*
              bstm1*
              bstm2*
  
              org.hibernate.Query q2 = hibSession.createQuery("from ApplicationContextProperty");
              List<ApplicationContextProperty> results = q2.list();
              for(ApplicationContextProperty a : results)
              {
                bstm4*
              }
              
              hibSession = null;
              env = null;
              if(pageServletIsNotSet){
                ThreadLocalPage.set(null);
              }
              ThreadLocalOut.popChecked(out);
              out = null;
              globalvarsChecked = true;
          }
        }
      }
    ]|
    //where not([] := <bagof-AllGlobalVars>) // fails if there are no global vars, wont generate anything then
    with  pkgname    := <TemplatePackage>
        ; pkgname2   := <DomainPackage>
        ; cbds* := <map({\ 
                           elem |[ var x : srt := e ]| -> 
                           class-body-dec*|[ 
                             //private static t x = null;
                             private static UUID x#id = null;
                              
                             public static x_class get#x(org.hibernate.Session hibSession)
                             {
                                 t x = (x_class) hibSession.get(x_class.class, x#id);
                                 return x;
                             }
                              
                           ]| 
                           with  t := <java-type> srt
                               ; SimpleSort(typename) := srt
                               ; x_class := <java-type-name> srt
                               //; x_type := "java.util.UUID"
                               //; x_conversionmethod := "fromString"                                   
                       \});concat> 
                       <bagof-AllGlobalVars <+ ![]>
        ; vardeclinits := <bagof-AllGlobalVars <+ ![]>
        ; cbds2* := <map({\ elem |[ var x : srt := e ]| -> srt{entanno, defanno} with entanno := <get-anno(?EntityAnno(_, _, _))> srt; defanno := <get-anno(?DefValueAnno(_))> srt \}); make-set; map(vardeclinit-to-load-by-class-java-servlet)> vardeclinits
        // persist right away to get an id
        ; bstm3* := <map(vardeclinit-to-persist-statement-java-servlet <+ pp-aterm(!"vardeclinit-to-persist-statement-java-servlet: ");fail);concat-with-sublists> vardeclinits
        //update with assignments
        ; bstm1* := <map(vardeclinit-to-method-call-java-servlet <+ pp-aterm(!"vardeclinit-to-method-call-java-servlet: ");fail)> vardeclinits
        //persist updates
        ; bstm2* := <map(vardeclinit-to-method-persist-call-java-servlet <+ pp-aterm(!"vardeclinit-to-method-persist-call-java-servlet: ");fail)> vardeclinits
        ; bstm4* := <map(vardeclinit-to-id-load <+ pp-aterm(!"vardeclinit-to-id-load: ");fail)> vardeclinits
        ; cbds1* := <map(vardeclinit-to-method-java-servlet <+ pp-aterm(!"vardeclinit-to-method-java-servlet: ");fail); concat-with-sublists> vardeclinits
        ; bstm_initobjects* := <map(vardeclinit-to-init-object-java)> vardeclinits
 
  vardeclinit-to-init-object-java :
    vdi@VarDeclInit(x_ident,srt@SimpleSort(x_class), e) -> 
    bstm|[ x_ident = new x_t(); ]|
    with  x_t := <java-type-name> srt

  vardeclinit-to-persist-statement-java-servlet:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),exps) -> resultwrapped
    with  result := 
          bstm* |[ 
            //hibSession.save(x_ident); no longer necessary here because of generated UUID for keys
            env.putVariable("~x_ident",x_ident); //necessary for set/list creations in globals which use globals
          ]| 
        ; resultwrapped := 
          bstm |[
            if(!applicationContextPropertyExists("~x_ident",res)){
              ~*result
            }
          ]|                 

  vardeclinit-to-id-load:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[	
      if(a.getName().equals("~x_ident"))
      {
        x_ident#id = a.getDatabaseId();
      }  
    ]|

  vardeclinit-to-method-call-java-servlet:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[	
      if(!applicationContextPropertyExists("~x_ident",res))  
        globalDeclaration#x_ident(); 
    ]|

  vardeclinit-to-method-persist-call-java-servlet:
    vdi@VarDeclInit(x_ident,SimpleSort(x_class),expressions) ->
    bstm |[ 
      if(!applicationContextPropertyExists("~x_ident",res))
        globalDeclaration#x_ident#Persist(); 
    ]|

  vardeclinit-to-method-java-servlet:
    vdi@VarDeclInit(x_ident,srt@SimpleSort(x_class), e) ->
      class-body-dec* |[
        private static t x_ident = null;

        private static void globalDeclaration#x_ident() {
          try {
            x_ident = e_vardeclinit;
          }
          catch(Exception iea) {
            throw new RuntimeException("Catched in globalDeclaration: ",iea);
          }
        }

        private static void globalDeclaration#x_ident#Persist() {
          hibSession.save(x_ident);
          ApplicationContextProperty x_acpident = new ApplicationContextProperty();
          x_acpident.setName("~x_ident");
          x_acpident.setDatabaseId(x_ident.getId());
          hibSession.save(x_acpident);
          GlobalVariables.x_ident#id = x_acpident.getDatabaseId();
          
          //set version property to 1, which indicates a persisted entity
          x_ident.setVersion(1);
          hibSession.flush();

          x_ident = null;
        }
  ]|
  with  x_acpident := <newname> "id"
      ; t := <defined-java-type> srt
      ; x_t := <java-type-name> srt
      ; e_vardeclinit := <expression-to-java-servlet> e

  vardeclinit-to-load-by-class-java-servlet :
    srt@SimpleSort(x_typename) -> class-body-dec* |[
        public static void initGlobal#x_typename(Environment env, org.hibernate.Session hibSession) {
          java.util.List<UUID> ids = new java.util.ArrayList<UUID>();
          bstm1*
          if(ids.size() > 0) {
            List<x_class> results;
            if(ids.size() == 1) {
	            results = new java.util.ArrayList<x_class>();
	            results.add((x_class)hibSession.get(x_class.class, ids.get(0)));
            }
            else {
              results = hibSession.createCriteria(x_class.class).add(org.hibernate.criterion.Restrictions.in("~x_idprop", ids)).list();
	          }
	          for(x_class a : results)
	          {
	            bstm2*
	          }
          }
          bstm3*
        }
    ]|
    with entanno := <get-anno(?EntityAnno(_, _, _))> srt
    ; defanno := <get-anno(?DefValueAnno(_))> srt
    ; vardeclinits := <(bagof-AllGlobalVars <+ ![]); filter(where(?VarDeclInit(_, <id>, _); has-anno(|entanno); has-anno(|defanno); strip-annos; ?SimpleSort(x_typename))); map({\ decl@VarDeclInit(ident, _, _) -> (decl, newident) with newident := <newname> ident \})>
    ; x_class := <java-type-name> srt
    ; t := <java-type> srt
    ; x_idprop := <concat-strings>["_", <get-entity-id-name> srt]
    ; x_getid := <concat-strings>["get", <get-entity-id-name; capitalize-string> srt]
    ; bstm1* := <map({x_ident:\
								      (VarDeclInit(x_ident, srt, _), x_newident) ->
								      bstm* |[
								        t x_newident = (x_class)hibSession.load(x_class.class, x_ident#id);
								        if(!org.hibernate.Hibernate.isInitialized(x_newident)) {
								          x_newident = null;
								          ids.add(x_ident#id);
								        }
								      ]|
								      \}); flatten-list> vardeclinits
    ; bstm2* := <map({x_ident:\
                      (VarDeclInit(x_ident, srt, _), x_newident) -> 
                      bstm |[ 
                        if(org.webdsl.tools.Utils.equal(x_ident#id, a.x_getid()))
                        {
                          x_newident = a;
                        }
                      ]|
                      \})> vardeclinits
    ; bstm3* := <map({\ (VarDeclInit(x_ident, srt, _), x_newident) -> bstm |[ env.putVariable("~x_ident", x_newident); ]| \})> vardeclinits
