module org/webdsl/dsl/to-java-servlet/java-code

imports
  libstrategolib
  libjava-front
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/type-utils
  org/webdsl/dsl/to-java-servlet/for-filter

rules // statements

   statements-to-java-servlet =
     filter-warn(statement-to-java-servlet | "cannot translate statement"); flatten-list

   statement-to-java-servlet =
     block-to-java-servlet
     <+ assignment-to-java-servlet-all
     <+ vardecl-to-java-servlet
     <+ while-to-java-servlet
     <+ for-to-java-servlet
     <+ if-to-java-servlet
     //<+ email-to-java
     <+ void-call-statement-to-java-servlet
     <+ stat-to-java-servlet
     <+ return-to-java-servlet
     <+ goto-to-java-servlet
     <+ ajax-to-java-servlet
     <+ validate-to-java-servlet(data-validation-to-java-servlet-throw)
     <+ info(|["cannot translate statement:", <id>]); fail

   block-to-java-servlet :
     //Block(stm*) ->
     webdsl|[ { stat* } ]| -> bstm|[ { bstm* } ]|
     with  bstm* := <statements-to-java-servlet> stat*

   stat-to-java-servlet :
     Stat(e1) -> java|[ e2; ]|
     with  e2 := <expression-to-java-servlet> e1

rules // assignment

  assignment-to-java-servlet-all =
     assignment-to-java-servlet-specific
  <+ assignment-to-java-servlet-ref
  <+ assignment-to-java-servlet

  assignment-to-java-servlet-ref :
    Stat(Assignment(v@Var(x), e1)) -> java|[ x.set(e2); ]|
    where <has-ref-type> v
    with  e2 := <expression-to-java-servlet> e1

  assignment-to-java-servlet :
    Stat(Assignment(Var(x), e1)) -> java|[ x = e2; ]|
    where <is-string> x 
        ; not(<get-property-of-entity> (<JavaInEntity>, <remove-first-character-in-string> x))
        ; e2 := <expression-to-java-servlet> e1
        
  remove-first-character-in-string = // _ is in front of property names at this point
    explode-string;?[_|<id>];implode-string
    
  assignment-to-java-servlet :
    Stat(Assignment(Var(x), e1)) -> java|[ x_set(e2); ]|
    where prop := <get-property-of-entity> (<JavaInEntity>, <remove-first-character-in-string> x) //is inside an entity and is a property of that entity
        ; not(GenericSort(_,_) := <property-type> prop)
    with  e2 := <expression-to-java-servlet> e1
        ; x_set := <concat-strings>["set", <remove-first-character-in-string;capitalize-string> x]
  
  assignment-to-java-servlet : //special handling of setter of collections, makes sure events fire and proxy isn't replaced
    Stat(Assignment(Var(x), e1)) -> 
    bstm |[ this.replaceAllIn#x2(e2); ]|
    where prop := <get-property-of-entity> (<JavaInEntity>, <remove-first-character-in-string> x) //is inside an entity and is a property of that entity
        ; GenericSort(_,_) := <property-type> prop
    with  e2 := <expression-to-java-servlet> e1
        ; x2 := <remove-first-character-in-string> x

  assignment-to-java-servlet :
    Stat(Assignment(q@FieldAccess(qid, x), e1)){anno*} -> bstm |[ e2.set#x(e3); ]|
    where not(GenericSort(_,_) := <get-type-anno> q) 
       <+ GenericSort(_,_) := <get-type-anno> q;<fetch(DirectCollectionReplace)> anno*
    with  e2 := <expression-to-java-servlet> qid
        ; e3 := <expression-to-java-servlet> e1

  assignment-to-java-servlet : //special handling of setter of collections, makes sure events fire and proxy isn't replaced
    Stat(Assignment(q@FieldAccess(qid, x), e1)){anno*} -> 
    bstm |[ e2.replaceAllIn#x(e3); ]|
    where GenericSort(_,_) := <get-type-anno> q
        ; not(<fetch(DirectCollectionReplace)> anno*)
    with  e2 := <expression-to-java-servlet> qid
        ; e3 := <expression-to-java-servlet> e1  

rules // if

   if-to-java-servlet :
     If(e1, bsit1, bsif1) -> java|[ if(e2) ~bsit2 else ~bsif2 ]|
     with  bsit2 := <statement-to-java-servlet> bsit1
         ; bsif2 := <statement-to-java-servlet> bsif1
         ; e2 := <expression-to-java-servlet> e1

rules // for

   while-to-java-servlet :
     WhileStmt(e1, bstm1) -> 
     stm|[ 
       while(e2) { 
         ~bstm2 
       } 
     ]|
     with e2    := <expression-to-java-servlet> e1
        ; bstm2 := <statement-to-java-servlet> bstm1

   for-to-java-servlet :
     ForCountStmt(x, e1, e2, Block(stat*)) -> 
     bstm*|[
       int x = e3; //x has been renamed already
       int x_bound = e4;
       int x_delta = (x < x_bound? 1 : -1);
       while(x != x_bound) {
         bstm*
         x += x_delta;
       }
     ]|
     with x_bound := <newname> "stop"
        ; x_delta := <newname> "delta"
        ; e3 := <expression-to-java-servlet> e1
        ; e4 := <expression-to-java-servlet> e2
        ; bstm* := <statements-to-java-servlet> stat*

   for-to-java-servlet : // No where clause, with order by clause
     ForStmt(x, srt, e1, fltr, Block(stat*)){anno*} ->
     bstm*|[
        java.util.ArrayList<t> x_list = new java.util.ArrayList<t>(e_expr);
        bstm_for*
     ]|
     with  x_list := <newname> "lst"
         ; t      := <java-type> srt
         ; e2 := <expression-to-java-servlet> e1
         ; qo := <get-query-optimization-anno> anno*
         ; e_joins := <get-direct-fetches(|x) <+ !expr|[null]|> qo
         ; e_expr := <(AtArguments() := <QueryOptimizationMode>) < !e2 + !expr |[ utils.QueryOptimization.prefetchCollection(e_HibSession, e2, e_joins) ]|>
         ; bstm_batch* := <get-batch-fetches(|x, srt, x_list) < try(where(AtArguments() := <QueryOptimizationMode>); ![]) + ![]> qo
         ; bstm_for* := <for-translation-common(|x_list, stat*, srt, t, x, fltr, bstm_batch*)>
         
  for-to-java-servlet :
    fa@ForAllStmt(x, srt, fltr, Block(stat*)){anno*} ->
    bstm* |[
      java.util.List<t> x_list = e_criteria.list();
      bstm_for*
    ]|
    with  x_list := <newname> "list"
        ; t      := <java-type> srt
        ; e_criteria := <hibernate-forall-criteria> (fa, t, x, srt, fltr)
        ; qo := <get-query-optimization-anno> anno*
        ; bstm_batch* := <get-generic-batch-fetches(|x, srt, x_list) <+ ![]> qo
        ; bstm_for* := <for-translation-common(|x_list, stat*, srt, t, x, fltr, bstm_batch*)>
        
  for-translation-common(|x_list, stat*, srt, t, x, fltr, bstm_batch*) :
    _ ->
    bstm* |[
      bstm_order*
      bstm_batch*
      ~*<wrap-in-for-loop(|x,t,expr|[ x_list ]|)> bstm*|[ 
        bstm* 
      ]|
    ]|
    with  bstm*   := <statements-to-java-servlet> stat*
        ; bstm_order* := <for-filter-by-code(|x, srt, t, x_list)> fltr
                  
rules // return

  normal-redirect-statements :
    e_url -> bstm* |[
    try {
      ThreadLocalPage.get().setRedirectUrl(utils.HTMLFilter.unfilter(e_url));
      if(!ThreadLocalPage.get().isActionLinkUsed()){ 
        response.sendRedirect(ThreadLocalPage.get().getRedirectUrl()); 
      }
    } catch (IOException ioe) {
      System.out.println("redirect failed");
      ioe.printStackTrace();
    }
  ]|
  
  ajax-redirect-statements :
    e_url -> bstm* |[
      //redirect in init action can be triggered with get as well, 
      //should not use ajax response in this case since the page wasn't accessed through the ajax run-time
      if(!ThreadLocalServlet.get().isPostRequest){ 
        ~*<normal-redirect-statements> e_url
      }
      else{
        out.println("{ action: \"relocate\", value: \""+utils.HTMLFilter.unfilter(e_url)+"\" },\n");   
      }
    ]|

  return-to-java-servlet :
    Return(call@PageCall(p,arg*)) -> bstm*
    where InAction
    with  bstm* := <redirect-page-call-to-java-statements> call

  // If return statements are emitted during desugar, the call might not be substituted with a page call.
  return-to-java-servlet :
    Return(ThisCall(p,arg*)) -> <return-to-java-servlet> Return(PageCall(p,arg*))
    where InAction

  return-to-java-servlet :
    ReturnEmpty() -> bstm* |[
      isRedirected = true;
    ]|
    where InAction
    
  return-to-java-servlet :
    ReturnEmpty() -> bstm* |[ 
      return;
    ]|
    where InFunction

  return-to-java-servlet :
    Return(e1) -> java|[ return e2; ]|
    where InFunction
    with  e2 := <expression-to-java-servlet> e1

  goto-to-java-servlet :
    GoTo(call@PageCall(p, args)) -> bstm*
    with  bstm* := <redirect-page-call-to-java-statements> call
    
  redirect-page-call-to-java-statements :
    call@PageCall(p,arg*) ->   
    bstm* |[ 
      if(ThreadLocalPage.get().isAjaxRuntimeRequest()){ //doesn't matter whether this is in an ajax template, only important thing for redirects is the current request type
        ~*<ajax-redirect-statements> e_url
      }
      else{
        ~*<normal-redirect-statements> e_url
      }
      isRedirected = true;
    ]|
    with  InAction //should only occur inside actions
    with  e_url := <page-thiscall-to-url-string-java-servlet> call

rules

   qid-to-java-servlet :
     Qualified(qid, x) -> java|[ e.x_get() ]|
     with  x_get := <concat-strings>["get", <capitalize-string> x]
         ; e := <qid-to-java-servlet> qid

   qid-to-java-servlet :
     x -> java|[ x ]|
     where <is-string> x

   // @note : this is compensating for an erroneous annotation of component
   // accessess
   qid-to-java-servlet :
     FieldAccess(Var(x),y) -> expr|[ this.y ]|
     where
         "Component" := <get-type-anno> Var(x)

   vardecl-to-java-servlet :
     VarDeclInit(x, s, e1) -> bstm|[ t x = e2; ]|
     where t := <java-type> s
         ; e2 := <expression-to-java-servlet> e1

   vardecl-to-java-servlet :
     VarDecl(x, s) -> bstm|[ t x = e; ]|
     where t := <java-type> s
         ; e := <java-type-default-value> s

rules // expressions
 
   expression-to-java-servlet :
     Cast(e1, s) -> expr |[ ((x) (org.webdsl.tools.Utils.cast(e2, t.class))) ]| 
     where not(<?GenericSort(_,_)> s)
     with  e2 := <expression-to-java-servlet> e1
         ; t := <java-type> s
         ; x := <java-type-name> s
   expression-to-java-servlet :
     Cast(e1, s) -> expr |[ ((x) e2) ]| 
     where <?GenericSort(_,_)> s // no need for hibernate fix in case of collection
     with  e2 := <expression-to-java-servlet> e1
         ; x := <java-type-name> s

   expression-to-java-servlet :
     InColl(e1, e2) -> expr|[ ( !org.webdsl.tools.Utils.equal(e4,null) && e4.contains(e3)) ]|
     with  e3 := <expression-to-java-servlet> e1
         ; e4 := <expression-to-java-servlet> e2

   expression-to-java-servlet :
     Add(x, y) -> expr|[ ~xt + ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Sub(x, y) -> expr|[ ~xt - ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Mul(x, y) -> expr|[ ~xt * ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Div(x, y) -> expr|[ ~xt / ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Mod(x, y) -> expr|[ ~xt % ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Eq(x, y) -> expr|[ org.webdsl.tools.Utils.equal(e_x,e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     NotEq(x, y) -> expr|[ !org.webdsl.tools.Utils.equal(e_x,e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     LargerThan(x, y) -> expr|[ (!(org.webdsl.tools.Utils.equal(e_x,null)||org.webdsl.tools.Utils.equal(e_y,null)) && e_x > e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     LargerThanOrEqual(x, y) -> expr|[ (!(org.webdsl.tools.Utils.equal(e_x,null)||org.webdsl.tools.Utils.equal(e_y,null)) && e_x >= e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     SmallerThan(x, y) -> expr|[ (!(org.webdsl.tools.Utils.equal(e_x,null)||org.webdsl.tools.Utils.equal(e_y,null)) && e_x < e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     SmallerThanOrEqual(x, y) -> expr|[ (!(org.webdsl.tools.Utils.equal(e_x,null)||org.webdsl.tools.Utils.equal(e_y,null)) && e_x <= e_y) ]|
     with  e_x := <expression-to-java-servlet> x
         ; e_y := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Not(x) -> expr|[ !(~x2) ]|
     with  x2 := <expression-to-java-servlet> x

   expression-to-java-servlet :
     And(x, y) -> expr|[ ~xt && ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

   expression-to-java-servlet :
     Or(x, y) -> expr|[ ~xt || ~yt ]|
     with  xt := <expression-to-java-servlet> x
         ; yt := <expression-to-java-servlet> y

rules

  expression-to-java-servlet :
    IsA(x, s@SimpleSort(x_name)) -> expr |[ e.instanceOf("~x_name") ]|
    with  e := <expression-to-java-servlet> x
     
rules //vars     

   expression-to-java-servlet =
      var-to-java-servlet

   var-to-java-servlet :
     Var(x) -> expr|[ x ]|
     where not(has-ref-type)

   var-to-java-servlet :
     v@Var(x) -> expr|[ (x_type) x.get() ]|
     where has-ref-type
     with  x_type := <get-type-anno;java-type-name> v
     
   var-to-java-servlet :
     v@ExternalScopeVar(x) -> expr|[ (x_type) x_tclass.this.x.get() ]| // add classname before this, so it will also work in anonymous inner class used for actions
     where x_tclass := <ThisTemplateClassName>
     where has-ref-type
     with  x_type := <get-type-anno;java-type-name> v
   var-to-java-servlet :
     ExternalScopeVar(x) -> expr|[ x_tclass.this.x ]| // add classname before this, so it will also work in anonymous inner class used for actions
     where x_tclass := <ThisTemplateClassName>
     where not(has-ref-type)
   var-to-java-servlet :
     v@ExternalScopeVar(x) -> expr|[  (x_type) this.x.get() ]|
     where not(ThisTemplateClassName)
     where has-ref-type
     with  x_type := <get-type-anno;java-type-name> v
   var-to-java-servlet :
     ExternalScopeVar(x) -> expr|[ this.x ]|
     where not(ThisTemplateClassName)
     where not(has-ref-type)

   expression-to-java-servlet =
   field-access-to-java-servlet
   <+ generic-field-access-to-java-servlet
   
   generic-field-access-to-java-servlet :
     FieldAccess(e1, x) -> expr|[ e2.x_get() ]|
     with  x_get := <concat-strings>["get", <capitalize-string> x]
         ; e2 := <expression-to-java-servlet> e1
   // todo: only setupFor if derived property

   expression-to-java-servlet =
     call-to-java-servlet
     <+ generic-call-to-java-servlet

   generic-call-to-java-servlet :
     call@Call(e1, x, e2*){anno*} -> expr|[ e3.x#_(e4*,e5*) ]|
     with  e3 := <expression-to-java-servlet> e1
         ; e4* := <map(expression-to-java-servlet)> e2*
         ; e5* := <generic-call-get-extra-arguments <+ ![]> call{anno*}

  // Static function call
  generic-call-to-java-servlet:
    tc@ThisCall(x, e1*) -> result
    where (get-anno(?StaticFunctionCallAnno(x_class, x_funcname)))
    with  e2* := <map(expression-to-java-servlet)> e1*
          ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]
          ; result := expr|[ x_Class.x_funcname#_(e2*) ]|
            
  // Static entity method call
  call-to-java-servlet =
     special-static-method-call-to-java-servlet
  <+ static-method-call-to-java-servlet
    
  static-method-call-to-java-servlet:
    tc@Call(v,x,e1*) -> result
    where EntitySort(x_class) := <get-type-anno> v
    with  e2* := <map(expression-to-java-servlet)> e1*
          ; x_Class := <concat-strings> [<pp-java5-to-string> <DomainPackage>, ".", x_class]
          ; x_funname := <concat-strings> ["$static$",x,"_"]
          ; result := expr|[ x_Class.x_funname(e2*) ]|

  // Native function call
  generic-call-to-java-servlet :
    tc@ThisCall(x, e1*) -> result
    where (get-anno(?NativeFunctionCallAnno()))
    with  e2* := <map(expression-to-java-servlet)> e1*
        ; x_X := <capitalize-string> x
        ; result := expr|[ nativejava.x_X.x(ThreadLocalPage.get(), e2*) ]|

rules    
  // Global function call
  generic-call-to-java-servlet :
    tc@ThisCall(x, e1*){anno*} -> result
    where (get-anno(?GlobalCallAnno(globalFunctionSig)))
    with  if [] := globalFunctionSig
          then e2* := <map(pass-on-ref-arg-exp <+ expression-to-java-servlet)> e1*
          else functionArgTypes/*Function(_,functionArgs,_,_)*/ := globalFunctionSig
             ; e2* :=<zip(call-arg-ref-resolve-helper)> (functionArgTypes,e1*)
          end
        ; e3* := <generic-call-get-extra-arguments <+ ![]> tc{anno*}
        ; x_Class := <concat-strings> [<pp-java5-to-string> <FunctionPackage>, ".", x]
        ; result := expr|[ x_Class#_.x#_(e2*,e3*) ]|

  generic-call-get-extra-arguments :
    call{anno*} -> [e_Join, e_Queries, e_Cond, e_CondJoins]
    where <?ThisCall(_, _) <+ ?Call(_, _, _)>call
    ; <fetch-elem(?QueryOptimizations(joincandidates, joincandidatesgen, querycondition, conditionjoins, x, srt))> anno*
    ; e_Join := <string-list-to-java-servlet; try(\ expr |[ new String[] {} ]| -> expr |[ null ]| \)> joincandidates
    ; e_Queries := <two-dimensional-string-list-to-java-servlet; try(\ expr |[ new String[][] {} ]| -> expr |[ null ]| \)> joincandidatesgen
    ; e_Cond := <generic-call-get-condition-argument(|x,srt)> querycondition
    ; e_CondJoins := <string-list-to-java-servlet; try(\ expr |[ new String[] {} ]| -> expr |[ null ]| \)> conditionjoins

  string-list-to-java-servlet :
    stringlist -> stringarray
    with stringarray := <foldr(!expr |[ new String[] {} ]|, {?(str, expr |[ new String[] {e_array*} ]|); !expr |[ new String[] {e_array*,"~str"} ]|})> stringlist

  two-dimensional-string-list-to-java-servlet :
    stringlists -> stringarray
    with individualarrays := <map(string-list-to-java-servlet)> stringlists
    ; stringarray := <foldr(!expr |[ new String[][] {} ]|, {?(expr |[ new String[] {e_subarray*} ]|, expr |[ new String[][] {e_arrays*} ]|); !expr |[ new String[][] {e_arrays*,{e_subarray*}} ]|})> individualarrays

  generic-call-get-condition-argument(|x,srt) :
    cond -> expr|[e_Cond]|
    where <not(?True())> cond
    with e_Cond := <hibernate-criteria-transform-condition(|x,srt)> cond

  generic-call-get-condition-argument(|x,srt) :
    cond -> expr|[ null ]|
    where True() := cond

rules          
  call-arg-ref-resolve-helper:
    (srt,arg) -> x
    where <is-ref-type> srt
    with  x := <pass-on-ref-arg-exp> arg
  call-arg-ref-resolve-helper:
    (srt,arg) -> x
    where not(<is-ref-type> srt)
    with  x := <expression-to-java-servlet> arg
     
  //pass-on-ref-arg-exp:
  //used for access control global function internally, but could add ref args to functions at some point
  //currently a global function with ref arg is always passed a ref arg, since the generated functions's farg is based on the arg exp type
  //if ref args are enabled for functions also non has-ref-type args need to be supported here
  pass-on-ref-arg-exp : 
    Var(x) -> e|[ x ]|
    where has-ref-type
    
  pass-on-ref-arg-exp : 
    ExternalScopeVar(x) -> e|[ this.x ]|
    where has-ref-type
    where not(ThisTemplateClassName)
    
  pass-on-ref-arg-exp : 
    v@ExternalScopeVar(x) -> e|[ x_tclass.this.x  ]|
    where has-ref-type
    where x_tclass := <ThisTemplateClassName>

rules
  // Entity function call
  generic-call-to-java-servlet :
    tc@ThisCall(x, e1*) -> result
    with  e2* := <map(expression-to-java-servlet)> e1*
        ; result := expr|[ this.x#_(e2*) ]|
