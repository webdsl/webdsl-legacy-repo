module org/webdsl/dsl/to-java-servlet/java-page-arguments

imports
  libstratego-lib
  libjava-front
  libwebdsl-front
  libback-end-transformations
  org/webdsl/dsl/to-java-servlet/java-page
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
  org/webdsl/dsl/to-java-servlet/type-utils
  org/webdsl/dsl/to-java-servlet/request-param-conversion

rules // page arguments

  page-arg-generation-test =
    where(
      (JavaThisPage<+ThisTemplateName)
    ; not(InAction)
    ; not(InLocalRedefine) //avoid page code generation for Arg constructors in LocalRedefine
    )
    ; page-class-generation-test

  GenerateCodeJavaServlet = 
    page-arg-generation-test
  ; argument-to-java-servlet-property
  ; fail
   
  /**
   *  GenericSort -List and Set- page arguments 
   */ 
  argument-to-java-servlet-property :
    arg@farg|[ x : srt ]| -> 
     <generate-java-servlet-partial> java|[
         @Partial
         protected void conversion(){
           if(parammap.get("~<get-original-name> x")!=null)
           {
             try{ 
                String[] ids = parammap.get("~<get-original-name> x").split(","); 
                x_ids = e;
                for(String anid : ids){
                  x_ids.add(java.util.UUID.fromString(anid));
                }
             }
             catch(NumberFormatException nfe){System.out.println(nfe.getMessage());}  
           } 
         }
         
         @Partial
         void loadArguments() {
           bstm*
         }
         
         private t_idstype x_ids;
       
         public void set#x_ids(t_idstype v) {
           this.x_ids = v;
         }
         public t_idstype get#x_ids() {
           return this.x_ids;
         }
        
         private x1<t_class> x;
         
         public void set#x(x1<t_class> x) {
           this.x = x;
         }
         
         public x1<t_class> get#x() {
           return x;
         }
      ]|    
      where <?GenericSort(x1,[x2])> srt
      with  <?SimpleSort(_)> x2
          ; t_class := <java-type> x2    
          ; x_id := <concat-strings>[x, "_id"]
          ; t := SimpleSort("UUID")
          ; t_idstype := <builtin-java-type> GenericSort(x1,[t])
          ; e := <java-type-default-value> GenericSort(x1, [t])
          ; bstm* := <argument-to-java-servlet-initialization> arg
          ; x_ids := <concat-strings>[x,"_ids"]
     
  /**
   *  defined entities and Entity type page arguments
   */  
  argument-to-java-servlet-property :
    arg@farg|[ x : srt ]| ->
    <generate-java-servlet-partial> java|[
       @Partial
       protected void conversion(){
         if(parammap.get("~<get-original-name> x")!=null)
         {
           bstm1*
         } 
       }
       @Partial
       void loadArguments() {
         bstm*
       }

       private t x_id;
       
       public void set#x_id(t v) {
         this.x_id = v;
       }
       public t get#x_id() {
         return this.x_id;
       }

       private t_class x;
       
       public void set#x(t_class x) {
         this.x = x;
       }
       
       public t_class get#x() {
         return x;
       }
    ]|
    where <has-entity-anno> srt
    with  <?SimpleSort(_)> srt
        ; t_class := <java-type> srt
        ; x_id := <concat-strings>[x, "_id"]
        ; t := <java-type> SimpleSort("String")
        ; bstm* := <argument-to-java-servlet-initialization> arg
        ; bstm1* := <java-servlet-conversion-to-object> (t,x,x_id)
          
  /**
   *  Ref arg
   */  
  argument-to-java-servlet-property :
    arg@Arg(x,srt@RefSort(_)){anno*} ->
    <generate-java-servlet-partial> java|[
       @Partial
       protected void conversion(){
         if(parammap.get("~<get-original-name> x")!=null)
         {
           bstm1*
         } 
       }
       @Partial
       void loadArguments() {
         bstm*
       }

       private t_string x_id;
       
       public void set#x_id(t_string v) {
         this.x_id = v;
       }
       public t_string get#x_id() {
         return this.x_id;
       }

       private t_refarg x;
       
       public void set#x(t_refarg x) {
         this.x = x;
       }
       
       public t_refarg get#x() {
         return x;
       }
    ]|
    with  x_id := <concat-strings>[x, "_id"]
        ; t_refarg := ClassOrInterfaceType(TypeName(Id("utils.RefArg")),None())
        ; t_string := ClassOrInterfaceType(TypeName(Id("String")),None())
        ; <fetch(?ArgNumber(argnum)) <+ <debug(!"ERROR: ArgNumber annotation missing on ref arg, required for back-end translation")> arg;fail> anno*
        ; bstm* := <argument-to-java-servlet-initialization-ref-arg(|argnum)> arg
        ; bstm1* := <java-servlet-conversion-to-object> (t_string,x,x_id)

  /**
   *  Built-in type page arguments
   */ 
  argument-to-java-servlet-property :
    arg@farg|[ x : srt ]| ->
    <generate-java-servlet-partial> java|[
       @Partial
       protected void conversion(){
         if(parammap.get("~<get-original-name> x")!=null)
         {
           bstm1*
         }
       }
       @Partial
       void loadArguments() {
         bstm*
         bstm2*
       }

       private t_Class x;
       
       public void set#x(t_Class x) {
         this.x = x;
       }
       public t_Class get#x() {
         return x;
       }
    ]|
    where t_Class := <builtin-java-type> srt
        ; not(GenericSort(_,_) := srt)
    with  <?SimpleSort(_)> srt
        ; bstm* := <argument-to-java-servlet-initialization> arg
        ; bstm2* := <string-argument-to-java-servlet-initialization <+ ![]> arg // fix for passing strings decode (eg. %20 -> ' ')
        ; bstm1* := <java-servlet-conversion-to-object> (t_Class,x,x)

rules //initialization

  argument-to-java-servlet-initialization :
    arg@Arg(x, srt){anno*} ->
    bstm*|[
      if (x_id != null) {            
        x = (x_class) hibSession.load(x_class.class, java.util.UUID.fromString(x_id));
      }
    ]|
    where <has-entity-anno> srt
        ; not(SimpleSort("Entity") := srt)
        ; not(<get-entity-id-name-with-super> srt)
        ; <not(fetch-elem(?QueryOptimizations(_, _, _, _))) <+ fetch-elem(?QueryOptimizations([], [], True(), []))> anno*
    with  x_class := <java-type-name> srt
        ; x_id := <concat-strings>[x, "_id"]

  argument-to-java-servlet-initialization :
    arg@Arg(x, srt){anno*} ->
    bstm*|[
      if (x_id != null) {            
        org.hibernate.FlushMode oldFlushMode = hibSession.getFlushMode();
        hibSession.setFlushMode(org.hibernate.FlushMode.MANUAL);
        List<t> results = e_criteria
        .add( org.hibernate.criterion.Restrictions.naturalId().set("~x_idprop", java.util.UUID.fromString(x_id)))
        .list();
        if(results.size() != 1){
        	x = (x_class) hibSession.load(x_class.class, java.util.UUID.fromString(x_id));
        }
        else {
          x = results.get(0);
          bstm_criterias*
        }
        hibSession.setFlushMode(oldFlushMode);
      }
    ]|
    where <has-entity-anno> srt
        ; not(SimpleSort("Entity") := srt)
        ; not(<get-entity-id-name-with-super> srt)
        ; <not(fetch-elem(?QueryOptimizations([], [], True(), [])))> anno*
        ; <fetch-elem(?QueryOptimizations(joinproperties, joinpropertiesgen, querycondition, conditionjoins))> anno*
        ; x_idprop := <concat-strings>["_", <get-entity-id-name> srt]
        //; x_idprop := <?SimpleSort(<EntityIdName>)> srt
    with  t := <java-type> srt
        ; x_class := <java-type-name> srt
        ; x_id := <concat-strings>[x, "_id"]
        ; genjoins := <?[<id>|_] <+ ![]> joinpropertiesgen
        ; e_criteria := <conc; foldr(!expr|[ hibSession.createCriteria(x_class.class).setResultTransformer(org.hibernate.Criteria.DISTINCT_ROOT_ENTITY) ]|,hibernate-criteria-join); hibernate-criteria-add-condition(|querycondition,x,srt)> (genjoins, joinproperties, conditionjoins)
        ; bstm_criterias* := <hibernate-extra-criteria; map(argument-to-java-servlet-initialization-add-condition(|x_idprop, expr|[java.util.UUID.fromString(x_id)]|))> (arg, expr|[x_class]|, x, srt, expr|[ hibSession ]|)

  argument-to-java-servlet-initialization-add-condition(|x_idprop, e_id) :
    e_extra -> bstm|[ e_extra.add( org.hibernate.criterion.Restrictions.naturalId().set("~x_idprop", e_id)).list(); ]|

  argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
      x = utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",x_id);
    ]|
    where SimpleSort("Entity") := srt
    with  x_id := <concat-strings>[x, "_id"]
        ; x_domain := <pp-java5-to-string> <DomainPackage>
        
  //ref arg       
  argument-to-java-servlet-initialization-ref-arg(|argnum) :
    arg@Arg(x,srt@RefSort(_)) ->
    bstm*|[
      if (x_id != null) {   
        String[] x_ar = x_id.split("!");
        String x_uuid = x_ar[0];
        String x_classname = x_ar[1];
        //String x_classnamesecondpart = x_ar[1];
        try{
          utils.RefArg x_rap = (utils.RefArg) ThreadLocalPage.get().getRefArgClasses().get(x_classname).newInstance();
          //utils.RefArg x_rap = (utils.RefArg) ThreadLocalPage.get().getRefArgClasses().get("~x_classnamefirstpart"+x_classnamesecondpart).newInstance();
          x_rap.load(x_uuid);
          x = x_rap;
        }
        catch(IllegalAccessException ie)
        { 
          ie.printStackTrace();
          throw new RuntimeException("IllegalAccessException during ref page arg load");
        }
        catch(InstantiationException ie)
        { 
          ie.printStackTrace();
          throw new RuntimeException("InstantiationException during ref page arg load");
        }
        catch(NullPointerException ie)
        { 
          ie.printStackTrace();
          throw new RuntimeException("NullPointerException during ref page arg load");
        }
      }
    ]|
    with  x_id := <concat-strings>[x, "_id"]
        //; x_classnamefirstpart := <gen-page-ref-arg-class-name-first-part> (<ThisTemplateName>,argnum)
        ; x_ar := <newname> "array"
        ; x_rap := <newname> "rap"
        ; x_uuid := <newname> "uuid"
        //; x_classnamesecondpart := <newname> "callnum"
        ; x_classname := <newname> "refargclass"

  argument-to-java-servlet-initialization :
    arg@Arg(x, srt){anno*} ->
    bstm*|[
      if (x_id != null) {            
        //filtering must be done earlier, page arg could be hidden input in post as well //utils.URLFilter.unfilter(x_id.toString());
        List<t> results = hibSession.createCriteria( x_class.class )
        .add( org.hibernate.criterion.Restrictions.naturalId().set("~x_natidprop", x_id))
        .list();
        if(results.size() == 0){
          System.out.println("No entity with this identity found: "+x_id);
          throw new RuntimeException("No entity with this identity found: "+x_id);
        }
        else if(results.size() > 1){
          System.out.println("Multiple entities with this identity found: "+x_id) ;
          throw new RuntimeException("Multiple entities with this identity found: "+x_id);
          //x = results.get(0);
        }
        else {
          x = results.get(0);
        }
      }
    ]|
    where <has-entity-anno> srt
        ; not(SimpleSort("Entity") := srt)
        ; x_natidprop := <concat-strings>["_",<get-entity-id-name-with-super> srt]
        ; <not(fetch-elem(?QueryOptimizations(_, _, _, _))) <+ fetch-elem(?QueryOptimizations([], [], True(), []))> anno*
    with  t := <java-type> srt
        ; x_class := <java-type-name> srt
        ; x_id := <concat-strings>[x, "_id"]

  argument-to-java-servlet-initialization :
    arg@Arg(x, srt){anno*} ->
    bstm*|[
      if (x_id != null) {            
        //filtering must be done earlier, page arg could be hidden input in post as well //utils.URLFilter.unfilter(x_id.toString());
        org.hibernate.FlushMode oldFlushMode = hibSession.getFlushMode();
        hibSession.setFlushMode(org.hibernate.FlushMode.MANUAL);
        List<t> results = e_criteria
        .add( org.hibernate.criterion.Restrictions.naturalId().set("~x_natidprop", x_id))
        .list();
        if(results.size() != 1){
          results = hibSession.createCriteria( x_class.class )
          .add( org.hibernate.criterion.Restrictions.naturalId().set("~x_natidprop", x_id))
          .list();
        }
        else {
          bstm_criterias*
        }
        hibSession.setFlushMode(oldFlushMode);
        if(results.size() == 0){
          System.out.println("No entity with this identity found: "+x_id);
          throw new RuntimeException("No entity with this identity found: "+x_id);
        }
        else if(results.size() > 1){
          System.out.println("Multiple entities with this identity found: "+x_id) ;
          throw new RuntimeException("Multiple entities with this identity found: "+x_id);
          //x = results.get(0);
        }
        else {
          x = results.get(0);
        }
      }
    ]|
    where <has-entity-anno> srt
        ; not(SimpleSort("Entity") := srt)
        ; <not(fetch-elem(?QueryOptimizations([], [], True(), [])))> anno*
        ; <fetch-elem(?QueryOptimizations(joinproperties, joinpropertiesgen, querycondition, conditionjoins))> anno*
        ; x_natidprop := <concat-strings>["_",<get-entity-id-name-with-super> srt]
    with  t := <java-type> srt
        ; x_class := <java-type-name> srt
        ; x_id := <concat-strings>[x, "_id"]
        ; genjoins := <?[<id>|_] <+ ![]> joinpropertiesgen
        ; e_criteria := <conc; foldr(!expr|[ hibSession.createCriteria(x_class.class).setResultTransformer(org.hibernate.Criteria.DISTINCT_ROOT_ENTITY) ]|,hibernate-criteria-join); hibernate-criteria-add-condition(|querycondition,x,srt)> (genjoins, joinproperties, conditionjoins)
        ; bstm_criterias* := <hibernate-extra-criteria; map(argument-to-java-servlet-initialization-add-condition(|x_natidprop, expr|[x_id]|))> (arg, expr|[x_class]|, x, srt, expr|[ hibSession ]|)

  argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
      if (x_ids == null) {            
         //x_ids = new x3();
      } 
      else {
        if (x == null) {
          x = e;
          for(java.util.UUID anid: x_ids) {
            x.add((x_class) hibSession.load(x_class.class, anid));
          }
        }
      }
    ]|
    where <?GenericSort(x1,[x2])> srt
        ; <defined-java-type> x2
    with  <?SimpleSort(x_Class)> x2
        ; e :=    <java-type-default-value> srt
        ; x_ids := <concat-strings>[x, "_ids"]
        ; x_class := <java-type-name> x2
        
  argument-to-java-servlet-initialization : //@TODO List arguments with builtin types, eg. list of strings
    arg@farg|[ x : srt ]| ->
    bstm*|[]|
    where <?GenericSort(x1,[x2])> srt; <builtin-java-type> x2

  argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
          if (x == null) {
            x = e_init;
          }
    ]|
    where <builtin-java-type> srt
    with  <?SimpleSort(x_Class)> srt
        ; e_init := <java-type-default-value> srt
       // ; rules( Parameter :+= x )

  string-argument-to-java-servlet-initialization :
    arg@farg|[ x : srt ]| ->
    bstm*|[
      //filtering must be done earlier, page arg could be hidden input in post as well //utils.URLFilter.unfilter(x);
    ]|
    where <builtin-java-type> srt
        ; <?SimpleSort("String")> srt


  /**
   *  @TODO part below needs refactoring, only the value is different in each case
   */
   
  //hiddens for form
  GenerateCodeJavaServlet = 
    page-arg-generation-test
  ; form-hidden-page-params-java-servlet
  ; fail
       
  form-hidden-page-params-java-servlet :
    Arg(x_ident, s) -> <generate-java-servlet-partial>
    java |[ 
      @Partial 
      public void hiddenParams(java.lang.StringBuffer combinedparams)
      {
        combinedparams.append("<input type=\"hidden\" name=\""+"~<get-original-name> x_ident"+"\" value=\""+utils.HTMLFilter.filter(x_ident.toString())+"\" />");    
      }
    ]|
    where <builtin-java-type> s
        ; not( GenericSort(_,_) := s)
        ; not(<?RefSort(_)> s)

  form-hidden-page-params-java-servlet :
    Arg(x, s) -> <generate-java-servlet-partial>
    java |[ 
      @Partial 
      public void hiddenParams(java.lang.StringBuffer combinedparams)
      {
        combinedparams.append("<input type=\"hidden\" name=\""+"~<get-original-name> x"+"\" value=\""+utils.HTMLFilter.filter(x.getNaturalId().toString())+"\" />");    
      }
    ]|
    where <defined-java-type> s
        ; not(<?RefSort(_)> s)
    
  form-hidden-page-params-java-servlet :
    Arg(x, srt) -> <generate-java-servlet-partial>
    java |[ 
      @Partial 
      public void hiddenParams(java.lang.StringBuffer combinedparams)
      {       
        combinedparams.append("<input type=\"hidden\" name=\""+"~<get-original-name> x"+"\" value=\""+utils.HTMLFilter.filter(org.webdsl.tools.Utils.encodeIdList(x))+"\" />");    
      }
    ]|
    where GenericSort(_,[s]) := srt
        ; <defined-java-type> s  
          
  form-hidden-page-params-java-servlet :
    Arg(x, srt) -> <generate-java-servlet-partial>
    java |[ 
      @Partial 
      public void hiddenParams(java.lang.StringBuffer combinedparams)
      {       
        combinedparams.append("<input type=\"hidden\" name=\""+"~<get-original-name> x"+"\" value=\""+utils.HTMLFilter.filter(x.getUrlString())+"\" />");    
      }
    ]|
    where RefSort(_) := srt
       
  GenerateCodeJavaServlet = 
    page-arg-generation-test
  ; form-post-page-params-java-servlet
  ; fail
       
  form-post-page-params-java-servlet :
    Arg(x_ident, s) -> <generate-java-servlet-partial>
    java |[ 
      @Partial 
      public void hiddenPostParams(java.lang.StringBuffer combinedparams)
      {
        combinedparams.append("~<get-original-name> x_ident"+"="+utils.HTMLFilter.filter(x_ident.toString())+"&");    
      }
      @Partial 
      public void hiddenPostParamsJson(java.lang.StringBuffer combinedparams)
      {
        combinedparams.append("{name:\""+"~<get-original-name> x_ident"+"\", value:\"" + org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(x_ident.toString()) + "\"},");
      }
    ]|
    where <builtin-java-type> s
        ; not( GenericSort(_,_) := s)
        ; not(<?RefSort(_)> s)

  form-post-page-params-java-servlet :
    Arg(x, s) -> <generate-java-servlet-partial>
    java |[ 
      @Partial 
      public void hiddenPostParams(java.lang.StringBuffer combinedparams)
      {
         combinedparams.append("~<get-original-name> x"+"="+utils.HTMLFilter.filter(x.getNaturalId().toString())+"&");    
      }
      @Partial 
      public void hiddenPostParamsJson(java.lang.StringBuffer combinedparams)
      {
        combinedparams.append("{name:\""+"~<get-original-name> x"+"\", value:\"" + org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(x.getNaturalId().toString()) + "\"},");    
      }
    ]|
    where <defined-java-type> s
        ; not(<?RefSort(_)> s)

  form-post-page-params-java-servlet  :
    arg@farg|[ x_ident : srt ]| -> <generate-java-servlet-partial>
    java |[ 
      @Partial 
      public void hiddenPostParams(java.lang.StringBuffer combinedparams)
      {
        combinedparams.append("~<get-original-name> x_ident"+"="+utils.HTMLFilter.filter(org.webdsl.tools.Utils.encodeIdList(x_ident))+"&");
      }
      @Partial 
      public void hiddenPostParamsJson(java.lang.StringBuffer combinedparams)
      {
        combinedparams.append("{name:\""+"~<get-original-name> x_ident"+"\", value:\"" + org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(org.webdsl.tools.Utils.encodeIdList(x_ident)) + "\"},");
      }
    ]|
    where <?GenericSort(_,[s])> srt
        ; <defined-java-type> s
          
  form-post-page-params-java-servlet  :
    arg@farg|[ x_ident : srt ]| -> <generate-java-servlet-partial>
    java |[ 
      @Partial 
      public void hiddenPostParams(java.lang.StringBuffer combinedparams)
      {
        combinedparams.append("~<get-original-name> x_ident"+"="+utils.HTMLFilter.filter(x_ident.getUrlString())+"&");
      }
      @Partial 
      public void hiddenPostParamsJson(java.lang.StringBuffer combinedparams)
      {
        combinedparams.append("{name:\""+"~<get-original-name> x_ident"+"\", value:\"" + org.apache.commons.lang.StringEscapeUtils.escapeJavaScript(x_ident.getUrlString()) + "\"},");
      }
    ]|
    where <?RefSort(_)> srt
    