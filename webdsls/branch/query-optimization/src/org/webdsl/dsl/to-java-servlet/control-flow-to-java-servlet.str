module org/webdsl/dsl/to-java-servlet/control-flow-to-java-servlet

imports
  libstratego-lib
  libjava-front

imports
  libwebdsl-front
  libback-end-transformations
  libstratego-lib
  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
  org/webdsl/dsl/to-java-servlet/java-code
  org/webdsl/dsl/to-java-servlet/template-render
  org/webdsl/dsl/to-java-servlet/template-ref-arguments
  org/webdsl/dsl/to-java-servlet/uicomponents/attributes
  org/webdsl/dsl/to-java-servlet/type-utils
  org/webdsl/dsl/to-java-servlet/hibernate-util
    
// control flow page elements   : for, if, templatecall 

rules // iteration

  for-loop-counter-wrap-code:
    bstm* -> result
    with  if <?[]> bstm* 
          then result :=  []
          else result :=  bstm*|[
                            ident = "";
                            if(inForLoop) {
                              ident += forelementcounter;
                            }
                            bstm*
                          ]| end
                        
  //wraps expression that starts with ident                        
  for-loop-counter-wrap-code-expr:
    e1 -> e |[((inForLoop?forelementcounter:"") + e1 ) ]|
                            
    
  wrap-in-for-loop(|x,t,e) :
    bstm -> res
    with  x_i := <newname> "i"
        ; res := <wrap-in-for-loop(|x_i,x,t,e)> bstm
  
  wrap-in-for-loop(|x_i,x,t,e) :
    bstm ->
    bstm* |[
      Object[] x_array = e.toArray(); // need to iterate set too without iterator, this copied array also makes sure a remove on the collection doesn't cause skipped elements
      for(int x_i = 0; x_i < x_array.length; x_i++)
      { 
        t x = (x_argtype) x_array[x_i];
        bstm*
      }
    ]|
    with  x_array := <newname> "array"
        ; x_argtype := <pp-java5-to-string> t
        ; if <is-list> bstm
          then bstm* := bstm
          else bstm* := [bstm] end

  handle-actions-input-to-java-servlet  =
    control-flow-for(collect-om(handle-actions-input-to-java-servlet)|)

  handle-actions-to-java-servlet =
    control-flow-for(collect-om(handle-actions-to-java-servlet)|)

  elem-to-java-servlet =
    control-flow-for(elems-to-java-servlet|)
    
  data-validation-to-java-servlet  =
    control-flow-for(collect-om(data-validation-to-java-servlet)|)

  control-flow-for(s|) :
     ForCount(x, e1, e2, elems, sep) -> result
     with  x_bound := <newname> "stop"
         ; e3 := <expression-to-java-servlet> e1
         ; e4 := <expression-to-java-servlet> e2
         ; bstm* := <s;concat-with-sublists> elems
         ; x_separatorindex := <newname> "separatorindex"
         ; x_delta := <newname> "delta"
         ; if <?[]> bstm* 
           then result :=  []
           else result :=  bstm*|[
                             inForLoop = true;
                             forLoopCounter++;
                             int x = e3; //x has been renamed already
                             int x_bound = e4;
                             int x_separatorindex = 0;
                             int x_delta = (x < x_bound? 1 : -1);
                             while(x != x_bound) {
                               forelementcounter = Integer.toString(++fallbackcounter);
                               ~*<control-flow-for-separator(s|sep, x_separatorindex)> bstm*|[
                                 ThreadLocalPage.get().enterTemplateContext(forelementcounter);
                                 bstm*
                                 ~*<!bstm*|[ ThreadLocalPage.get().leaveTemplateContext(); ]|
                                    ;if-debug(!bstm*|[ ThreadLocalPage.get().leaveTemplateContextChecked(forelementcounter); ]|)>
                               ]|
                               x += x_delta;
                             }
                             forLoopCounter--;
                             if(forLoopCounter == 0){
                               inForLoop = false;
                               forelementcounter = "0";
                               fallbackcounter = 0;
                             }
                           ]| end

  control-flow-for(s|) :
    For(x, srt, e1, fltr, elems, sep) -> result
    with  bstm* := <s;concat-with-sublists> elems
        ; e2 := <expression-to-java-servlet> e1
        ; t := <java-type> srt
        ; x_list := <newname> "list"
        ; GenericSort(x_setorlist,[_]) := <get-type-anno> e1
        ; if <?[]> bstm*
          then result :=  [] 
          else result :=  bstm* |[
                            java.util.ArrayList<t> x_list = new java.util.ArrayList<t>(e2);
                            ~*<control-flow-for-common(s | x_list, x, srt, t, fltr, sep)> bstm* |[    
                              bstm*
                            ]|
                          ]| end
              
  control-flow-for(s|) :
    fa@ForAll(x, srt, fltr, elems, sep) -> result
    with  bstm*   := <s;concat-with-sublists> elems
        ; t       := <java-type> srt
        ; x_list := <newname> "list"
        ; x_oldFlushMode := <newname> "oldFlushMode"
        ; e_criteria := <hibernate-forall-criteria> (fa, t, x, srt, fltr)
        ; bstm_criterias* := <hibernate-extra-criteria; map(\ e_extra -> bstm|[ e_extra.list(); ]| \)> (fa, t, x, srt)
        ; if <?[]> bstm*
          then result :=  [] 
          else result :=  bstm* |[ 
                            java.util.List<t> x_list = e_criteria.list();
                            org.hibernate.FlushMode x_oldFlushMode = e_HibSession.getFlushMode();
                            e_HibSession.setFlushMode(org.hibernate.FlushMode.MANUAL);
                            bstm_criterias*
                            e_HibSession.setFlushMode(x_oldFlushMode);
                            ~*<control-flow-for-common(s | x_list, x, srt, t, fltr, sep)> bstm*|[
                              bstm*
                            ]|
                          ]| end
        
  control-flow-for-common(s | x_list, x, srt, t, fltr, sep) :
    bstm* ->
    bstm* |[
      inForLoop = true;
      forLoopCounter++;
      bstm_order*
      int x_separatorindex = 0;
      ~*<  control-flow-for-separator(s|sep, x_separatorindex)
         ; wrap-in-for-loop(|x,t,expr|[ x_list ]|)>
      bstm* |[  
        fallbackcounter += 1; 
        if(WebDSLEntity.class.isInstance(x)) {
           WebDSLEntity x_ent = ((WebDSLEntity) ((Object) x));
           forelementcounter = (x_ent.getVersion() == 0 
             ? Integer.toString(fallbackcounter) 
             : x_ent.getId().toString());
        }
        else
          forelementcounter = Integer.toString(fallbackcounter);
        ThreadLocalPage.get().enterTemplateContext(forelementcounter);
        bstm*
        ~*<!bstm*|[ ThreadLocalPage.get().leaveTemplateContext(); ]|
           ;if-debug(!bstm*|[ ThreadLocalPage.get().leaveTemplateContextChecked(forelementcounter); ]|)>
      ]|
      forLoopCounter--;
      if(forLoopCounter == 0){
        inForLoop = false;
        forelementcounter = "0";
        fallbackcounter = 0;
      }
    ]|
    with  bstm_order* := <for-filter-by-code(|x, srt, t, x_list)> fltr
        ; x_separatorindex := <newname> "separatorindex"
        ; x_ent := <newname> "temp"
                          
  control-flow-for-separator(s|sep, x_separatorindex) :
    bstm* -> bstm*
    where None() := sep
    
  control-flow-for-separator(s|sep, x_separatorindex) :
    bstm* -> result
    where ForSeparator(elems) := sep
    with  bstm2* := <s;concat-with-sublists> elems
        ; if <?[]> bstm*
          then result :=  [] 
          else result :=  bstm* |[
                              if(x_separatorindex > 0) {
                                bstm2* // place separator if there was an element before this one
                              }
                              bstm*
                              x_separatorindex++;
                          ]| end

rules // if

  handle-actions-input-to-java-servlet  =
    control-flow-if(collect-om(handle-actions-input-to-java-servlet)|)

  handle-actions-to-java-servlet =
    control-flow-if(collect-om(handle-actions-to-java-servlet)|)

  elem-to-java-servlet =
    control-flow-if(elems-to-java-servlet|)
    
  data-validation-to-java-servlet =
    control-flow-if(collect-om(data-validation-to-java-servlet)|)

  control-flow-if(s|) :
    IfTempl(e, elems, elems2) -> result
    with  bstm* := <s;concat-with-sublists> elems
        ; bstm2* := <s;concat-with-sublists> elems2
        ; e1 := <expression-to-java-servlet> e
        ; if <?([],[])> (bstm*,bstm2*)
          then result :=  [] 
          else result :=  bstm |[
                            if(e1){ 
                              bstm*
                            } else {
                              bstm2*
                            }
                          ]| end

rules //templatecall    

  handle-actions-input-to-java-servlet  =
    control-flow-tcall(|"storeInputs")

  handle-actions-to-java-servlet =
    control-flow-tcall(|"handleActions")

  elem-to-java-servlet =
    control-flow-tcall(|"render")
    
  data-validation-to-java-servlet =
    control-flow-tcall(|"validateInputs")

  control-flow-tcall(|x_methodname) :
    tc@TemplateCall(x_name, args, passign*, _) -> bstm* 
    where <get-anno(?CallToDefinedAnno())> tc
    with  bstm* := <control-flow-tcall-defined-template(|x_methodname)> tc
    
  template-call-to-java-string: 
    (name,args) -> java:expr|[ "~x_name"+"("+"~arg_dump"+")" ]|
    with  x_name := <where(is-string) <+ ?QualifiedElementsCall(<<concat-strings> [<id>".elements"]>)> name
        ; arg_dump := <alltd(get-original-name);map(pp-webdsl-to-string);separate-by(|", ");concat-strings;explode-string;escape-chars;implode-string> args  
    
  control-flow-tcall-defined-template(|x_methodname) :
    tc@TemplateCall(x_name, args, passign*, _){anno*} -> result
    with  // translate (ref) args
          calledTemplateArgs := <fetch-elem(?CalledTemplateArgs(<id>))> anno*
        ; e_argswithref* := <handle-ref-arg> (calledTemplateArgs, args)
          // call common templatecall translation
        ; java_tname := expr|["~x_name"]|
        ; java_args := var-init|[ { e_argswithref* } ]|
        ; result := <control-flow-tcall-helper(|x_methodname,java_tname,java_args,[])> tc
    
  /**
   *  Used for call to defined template and call to required template.
   */
  control-flow-tcall-helper(|x_methodname,java_tname,java_args,java_attrsmap) :
    tc@TemplateCall(x_name, args, passign*, _){anno*} -> bstm* |[  bstm_result* ]|
    with  //
          tname := <<fetch-elem(?PropertyAssignment("templateContext",<id>))> passign* <+ <get-templatecallnumber> tc> // either the static tcallname, e.g. tcall12, or attribute templateContext (e.g. elements[templateContext=tc] used for label implementation)
        ; bstm_npe* := <cflow-tcall-null-pointer-helper> (x_name,args)
        ; withcallsmap := <control-flow-emit-with-calls-map> passign* 
        ; attrsmap := <if <?[]> java_attrsmap then <control-flow-emit-attrs-calls-map(|x_methodname)> passign* else !java_attrsmap end>
        // create template call
        ; bstm_result* := <generate-template-call(|x_methodname)> (
            java_tname, 
            tname, 
            java_args,
            bstm_npe*, 
            withcallsmap, 
            attrsmap
            )
            
  cflow-tcall-null-pointer-helper :
    (x_name,args) -> bstm_npe*
    with  e_tc := <template-call-to-java-string> (x_name,args)
        ; bstm_npe* :=
            bstm*|[
              System.out.println("WebDSL warning: null reference in template arguments: "+e_tc); // TODO proper location information; some way to disable these warnings
              npe.printStackTrace(); // display java exception for now so it can be traced back to the template
            ]|
   
  /**
   *  'elements' call
   *
   *  'with/requires' templatecall for element in with { } arguments (derived from ArgDef constructor), 
   *  stored in TemplateCall with only part of the needed arguments, the closure at the call
   *
   */
  control-flow-emit-with-calls-map :
    passign* -> bstm* 
    with bstm* := <collect(control-flow-emit-with-calls-helper);concat> passign*

  control-flow-emit-with-calls-helper :
    TemplateCall(templname,vars,passigns,_){anno*} -> result
    where <fetch(?ResolvedRequireKey(origname))> passigns
    with templateArgs := <fetch-elem(?CalledTemplateArgs(<id>))> anno*
    with //could be that not all args are specified, only implicit args are available at this point
         varslength := <length> vars
       ; selectedTemplateArgs := <reverse;take(|varslength);reverse> templateArgs
       ; e_templ* := <handle-ref-arg> (selectedTemplateArgs, vars)
       ; result := bstm* |[ newenv.putWithcall("~origname", new utils.TemplateCall("~templname", new Object[] { e_templ* }, attrs)); ]|

  /**
   * e_name : unique template name for lookup in hashmaps - Java expression with type String
   * tname : template call number used in templateContext - Stratego string or WebDSL expression with type TemplateContext to change the templateContext for this call entirely
   * e : regular template arguments - Java Object[] 
   * bstm_npe* : null pointer exception handling statements - Java bstm*
   * bstm_withcallsmap* : statements that add  'with' arguments and 'elements' template argument 
   *   to withcallsmap in newenv - Java bstm*
   * bstm_attrs* : attributes, arguments between [] - Java bstm*
   */    
  generate-template-call(|x_methodname):
    (e_name, tname, e, bstm_npe*, bstm_withcallsmap*, bstm_attrs*) ->
    <for-loop-counter-wrap-code> 
    bstm* |[
      ident += e_tname;
      bstm_entertemplatecontext*
      try{
        Object[] x_args = e;
        //add extra arg for local redefinitions, if any
        utils.LocalTemplateArguments x_argsextra = env.getExtraLocalTemplateArguments(e_name);
        if(x_argsextra != null){
          x_args = ArrayUtils.addAll(x_args,x_argsextra.extraArgs);
        }
        if(templatecalls.get(ident)==null){
          templatecalls.put(ident,(TemplateServlet)env.getTemplate(e_name).newInstance());
        }
        try {
          org.webdsl.lang.Environment newenv = new Environment(env);
          bstm_withcallsmap*
          bstm_attrs*
          ((TemplateServlet) templatecalls.get(ident)).x_methodname(x_args, newenv, attrsmapout, x_argsextra);
          ~*<![];try(<?"handleActions"> x_methodname;!bstm*|[
            if (ThreadLocalPage.get().hasExecutedAction)
              return;
          ]|)>
        }
        catch(NullPointerException npe) {
          bstm_npe*
        }
      }
      catch(IllegalAccessException iae)
      {
        System.out.println("Problem in template servlet template lookup: "+iae.getMessage());
      }
      catch(InstantiationException ie)
      {
        System.out.println("Problem in template servlet template lookup: "+ie.getMessage());
      }
      catch(NullPointerException npe) {
        System.out.println("Problem in template lookup for "+e_name+": "+npe.getMessage());
        npe.printStackTrace();
      }
      ident = "";
      bstm_leavetemplatecontext*
      //set ThreadLocalTemplate back to current template
      ThreadLocalTemplate.set(this);
    ]|
    with  x_args := <newname> "args"
        ; x_argsextra := <newname> "args2"
        ; if is-template-context-passed := <not(<is-string> tname)>
          then x_tmptc := <newname> "tempcontext"
             ; e_templatecontext := <expression-to-java-servlet> tname
             ; e_tname := expr|["customtc"]|
             ; bstm_entertemplatecontext* := bstm*|[ 
                  utils.TemplateContext x_tmptc = ThreadLocalPage.get().getTemplateContext();
                  ThreadLocalPage.get().setTemplateContext(e_templatecontext); 
               ]|
             ; bstm_leavetemplatecontext* := bstm*|[ 
                  ThreadLocalPage.get().setTemplateContext(x_tmptc);
               ]|
          else x_tname := tname
             ; e_tname := expr|["~x_tname"]|
             ; bstm_entertemplatecontext* := bstm*|[ 
                  ThreadLocalPage.get().enterTemplateContext(e_tname);
               ]|
             ; bstm_leavetemplatecontext* := 
                  <!bstm*|[ ThreadLocalPage.get().leaveTemplateContext(); ]|
                  ;if-debug(!bstm*|[ ThreadLocalPage.get().leaveTemplateContextChecked(e_tname); ]|)>
          end
          
/**
 *  Call to template passed as part of required templates
 *  Since the passed TemplateCall object only has the first part of the arguments, it is concatted with the 
 *  actual arguments of the required template definition
 *
 *  'elements' call
 */
rules

  handle-actions-input-to-java-servlet  =
    control-flow-tcall-required-template(|"storeInputs")

  handle-actions-to-java-servlet =
    control-flow-tcall-required-template(|"handleActions")

  elem-to-java-servlet =
    control-flow-tcall-required-template(|"render")
    
  data-validation-to-java-servlet =
    control-flow-tcall-required-template(|"validateInputs")

  control-flow-tcall-required-template(|x_methodname) :
    tc@TemplateCall(x_name, args, passign*, _){anno*} -> result
    where <get-anno(?CallToRequiredAnno())> tc 
    with  originalname := <get-original-name> x_name
        ; // translate (ref) args
          calledTemplateArgs := <fetch-elem(?CalledTemplateArgs(<id>))> anno*
        ; e_argswithref* := <handle-ref-arg> (calledTemplateArgs, args)
        // call common templatecall translation
        ; java_tname := expr|[ env.getWithcall("~originalname").name ]|
        ; java_args:=  expr|[ Utils.concatArrays(new Object[] { e_argswithref* }, env.getWithcall("~originalname").args) ]|
        ; result := <control-flow-tcall-helper(|x_methodname,java_tname,java_args,[])> tc
          
  control-flow-tcall-required-template(|x_methodname) :
    tc@TemplateCall(x_name, args, passign*, _){anno*} -> result
    where <?"elements"> x_name
         ; e := java:expr|[ "elements#"+getElementsContext() ]|
       <+ <?QualifiedElementsCall(context)> x_name
        ; e := java:expr|[ "elements#"+"~context" ]|
    with  // call common templatecall translation
          java_tname := expr|[ env.getWithcall(e)==null?"elementsempty":env.getWithcall(e).name ]| // call emptyelements, if no elements found
        ; java_args :=  expr|[ env.getWithcall(e)==null?new Object[0]:env.getWithcall(e).args ]|
        ; java_attrbstm* :=  bstm*|[ Map<String,String> attrsmapout = env.getWithcall(e)==null?utils.TemplateCall.EmptyAttrs:env.getWithcall(e).attrs; ]|
        ; result := <control-flow-tcall-helper(|x_methodname,java_tname,java_args,java_attrbstm*)> tc
 