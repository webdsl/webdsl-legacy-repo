module org/webdsl/dsl/utils/query-utils

signature constructors

  TemplateArgs : List(Annotation) -> Annotation
  TemplateName : Term -> Annotation
  FunctionArgs : List(Annotation) -> Annotation
  FunctionEntity : Term -> Annotation
  HasQueryOptimizedVersion : Annotation
  QueryOptimizationVars : Term * Term * Term * Term -> Annotation
  QueryOptimizations : Term * Term -> Annotation
  QueryOptimizations : List(String) * Term * Term * Term * Term * Term -> Annotation
  IsNaturalId : Annotation
  MultipleDefinitionsInSubclasses : Annotation
  RequiresAlias : Annotation
  DeclaringEntity : Term -> Term
  IsLazyFetch : Term
  QueryAnalysis : Term * Term * Term * Term * Term -> Term
  WaitingFor : Term -> Annotation
  IfDefaultTemplateImplementation : Term -> Annotation
  JoinCondition : Term -> Annotation
  RelativeFieldAccess : Term * Term -> Term

  // Query optimization modes
  // Used just to easily update other test cases
  NoQueryOptimization : Term
  QueryOptimization : Term
  HibernateBatch : Term
  GuidedBatch : Term
  AllJoins : Term
  AtArguments : Term

strategies

  get-empty-query-optimization = !QueryOptimizations([], True())     

  is-empty-query-optimization = ?QueryOptimizations([], True())

  is-query-optimization = ?QueryOptimizations(_, _)

  // Succeeds only if an empty query optimization annotation is present
  no-query-optimizations-strict = where(fetch-elem(is-empty-query-optimization))

  // Succeed if no query optimization is available
  no-query-optimizations = where(get-query-optimization-anno; is-empty-query-optimization)

  // Always returns a query optimization, but it returns an empty one if it fails to locate one
  get-query-optimization-anno = fetch-elem(is-query-optimization) <+ get-empty-query-optimization

  is-query-analysis = ?QueryAnalysis(_, _, _, _, _)

  get-empty-query-analysis = !QueryAnalysis([], [], [], [], [])

  get-ts-from-query-analysis = ?QueryAnalysis(<id>, _, _, _, _)

  get-returns-from-query-analysis = ?QueryAnalysis(_, <id>, _, _, _)

  get-recursive-from-query-analysis = ?QueryAnalysis(_, _, _, _, <id>)

rules

  remove-casts = repeat(oncetd(?Cast(<id>, _)))

  and-query-condition = fold-query-condition(and-query-condition-helper)
  or-query-condition = fold-query-condition(or-query-condition-helper)

  fold-query-condition(s) :
    [] -> True()

  fold-query-condition(s) =
    ?[x|xs]
    ; <foldr(!x, s)> xs

  // True conditions are ignored, because they are irrelevant
  and-query-condition-helper :
    (cond, e) -> And(cond, e)
    where not(True() := e)
    ; not(True() := cond)

  and-query-condition-helper :
    (cond, True()) -> cond

  and-query-condition-helper :
    (True(), e) -> e

  // As soon as one condition is True, the resulting condition will be true
  or-query-condition-helper :
    (cond, e) -> Or(cond, e)
    where not(True() := e)
    ; not(True() := cond)

  or-query-condition-helper :
    (_, True()) -> True()

  or-query-condition-helper :
    (True(), _) -> True()

  property-to-string :
    Var(_) -> ""

  property-to-string :
    FieldAccess(p, f) -> str
    with prefix := <property-to-string> p
    ; if "" := prefix then
        str := <concat-strings> ["_", f]
      else
        str := <concat-strings> [prefix, "._", f]
      end

  property-to-string :
    Cast(p, _) -> str
    with str := <property-to-string> p

  property-to-alias :
    Var(_) -> ""

  property-to-alias :
    FieldAccess(p, f) -> str
    with prefix := <property-to-alias> p
    ; str := <concat-strings> [prefix, "__", f]

  property-to-alias :
    Cast(p, _) -> str
    with str := <property-to-alias> p

  condition-to-alias-string(|x) :
    FieldAccess(p, f) -> str
    where <collect(?Var(x)); not(?[])> p
    with str := <property-to-alias> p

  get-all-joins = filter(get-joins-helper(id|"_")); flatten-list

  get-to-one-joins = where(AllJoins() := <QueryOptimizationMode>) < get-all-joins + real-get-to-one-joins

  real-get-to-one-joins = filter(get-joins-helper(?(_, _, _, <id>, _); not(is-generic-sort)|"_")); flatten-list

  get-joins-helper(s|prefix) :
    (f, _, _, _, sub){anno*} -> [join{joinanno*} | subjoins]
    where s
    with join := <concat-strings> [prefix, f]//<concat-strings> [prefix, <("" := prefix) < !"_" + !"._">, f]
    ; newprefix := <concat-strings> [join, "._"]
    ; joinanno* := <filter(?RequiresAlias())> anno*
    ; subjoins := <filter(get-joins-helper(s|newprefix))> sub

  join-fetch-to-alias = <concat-strings> ["_", <string-replace(|".", "_")>]
