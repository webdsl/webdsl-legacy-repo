module org/webdsl/dsl/analysis/bigtable

imports
  libstrategolib
  Java-15
  libjava-front

imports
  libwebdsl-front

strategies

  /* DISABLED FOR NOW
  analyze =
    ?Application(_, _)
    ; {| PropertiesToInline
       : topdown(try(analyze-bigtable))
       ; info(|["We would recommend to inline the following: ", <bagof-PropertiesToInline; make-set>])
       |}
    ; fail
  
  analyze-bigtable =
    (?For(x, srt, _, _, _) <+ ?ForAll(x, srt, _, _) <+ ?ForStmt(x, srt, _, _, _) <+ ?ForAllStmt(x, srt, _, _))
    ; ?t
    ; {| IteratedVars, IteratedVar
       : rules ( IteratedVars :+= (x, srt)
                 IteratedVar : Var(x) -> srt )
       //; info(|["Looking for property use of variable ", x, " of type ", srt])
       ; fas := <collect-potential-joins> t
       //; info(|["Field accesses to analyze from ", x, ": ", fas])
       ; inlinecandidates := <filter(an-requires-inlining); remove-position-annos; make-set> fas
       ; if not([] := inlinecandidates) then
           rules ( PropertiesToInline :+= inlinecandidates )
         end
       //; info(|["These should be inlined: ", inlinecandidates])
      |}

  collect-potential-joins =
    collect(an-potential-joins)
    ; flatten-list
  
  an-potential-joins =
    where(
      ?FieldAccess(l, _)
      ; oncetd(where(IteratedVar); not(IteratedVarChild))
    )

  an-potential-joins =
    ?fa@FieldAccess(l, _)
    ; repeat(oncetd(IteratedVarChild))
    ; not(?fa)

  an-potential-joins =
    ?tc@TemplateCall(_, args,_, _)
    //; debug(!"Template call found: ")
    //; info(|["IteredVars: ", <dr-all-keys(|"IteratedVar")>])
    ; not([] := <collect(\ Var(x) -> <IteratedVar> \)> args)
    ; find-definition
    //; debug(!"Definition found: ")
    ; not(?Define([Page()], _, _, _))
    ; ?Define(_, _, fargs, body)
    ; <an-potential-joins-with-args(|args, fargs)> body

  an-potential-joins =
    ?tc@ThisCall(_, args)
    //; debug(!"Function call found: ")
    ; not([] := <collect(\ Var(x) -> <IteratedVar> \)> args)
    ; find-definition
    //; debug(!"Searching in function: ")
    ; ?Function(_, fargs, _, body)
    ; <an-potential-joins-with-args(|args, fargs)> body

  an-potential-joins-with-args(|args, fargs) =
    ?body
    ; {| IteratedVarChild
       : with(id
         ; <filter({vars: 
                     \ (e, Arg(x, srt)) ->  <id>
                       where not([] := <collect(where(IteratedVar))>)
                       with rules( IteratedVarChild : Var(x) -> e 
                                   IteratedVar      : Var(x) -> srt
                                 )
                     \})> <zip> (args, fargs)
         ) 
       ; <collect-potential-joins> body
     |}


strategies // checks for potential inlining

  an-find-entity-property-pair =
    ?fa@FieldAccess(l, fld)
    ; if Var(x) := l then
        !(<type-of> l, fld)
      else
        !(<an-find-entity-property-pair> l, fld)
      end
  
  an-requires-inlining =
    ?FieldAccess(l, fld)
    ; an-find-entity-property-pair
    ; ?((_, _), _)
  */
    