module separation/dr

imports
  separation/-

strategies  
  
  is-ignored-rule = ?"DR_BREAK" <+ ?"DR_EXCEPTION"
  record-dr-internals = !["RecordDR_Enabled", "RecordDR_ExistingRules","RecordDR_NewRuleSets"]
  is-record-dr-internal = ?x; where(<fetch-elem(?x)> (<record-dr-internals>))

  start-record-dynamic-rules =
    where(
        <map(dr-begin-scope(|<id>))> (<record-dr-internals>)
      ; rules(RecordDR_Enabled := 1)
      ; all-dynamic-rules; remove-all(is-record-dr-internal <+ is-ignored-rule)
      /*; string-sort*/; ?rulenames   //sort for easy debugging (compare)
      ; rules(RecordDR_ExistingRules := rulenames)
      ; map(dr-start-change-set(|<id>))
   )
   
  end-record-dynamic-rules =
    where(
        existing-rules := <RecordDR_ExistingRules>
      ; <map(commit-and-store-changes)> existing-rules
        // TODO: diff is slow
      ; <diff> (<all-dynamic-rules; remove-all(is-record-dr-internal <+ is-ignored-rule)>, existing-rules)
      /*; string-sort*/; ?newrules    // sort for easy debugging (compare)
      ; <map(commit-and-store-rules)> newrules
      ; recorded := <bagof-RecordDR_NewRuleSets>
      ; <map(dr-end-scope(|<id>))> (<record-dr-internals>)  // cleanup
    )
    ; !recorded
      
  is-record-dynamic-rules-enabled = RecordDR_Enabled => 1
 
  all-dynamic-rules = <hashtable-keys> Hashtable(<dr-rule-sets-hashtable>) 
  
  remove-dr-dummies = map(remove-dr-dummy)
  
  remove-dr-dummy: x{anno*} -> x{anno2*}
    with  anno2* := <remove-all(?DR_DUMMY())> anno*
 
  commit-and-store-rules: name -> name
    with  dr-get-rule-set(|name); Hd
        ; ?RuleScope(_, table)
        ; <hashtable-keys> table
          // reverse to keep the same ordering for bagof- when loaded  
        ; keyvals := <map(\x -> (x, <hashtable-get(|x); reverse> table)\)>
             // some rules like DR_BREAK are created but have no keys??
        ; if not([] := keyvals) then 
            //where(!name; debug(!"New rule: ")); debug(!"... keyvals:" )
            rules(RecordDR_NewRuleSets :+= (name, keyvals))
          end

  changeset-key-to-rules(|table, oldrules): key@(scopeid, rulekey) -> keyvals
    with  values := <hashtable-get(|key)> table
          // see if any values were in the hashtable before
        ; try(
            oldvals := <dr-lookup-rule(|rulekey)> oldrules
          ; <diff> (values, oldvals)
          )
        ; keyvals := (rulekey, <reverse>)
  
  commit-and-store-changes: name -> (name, changeset)
    with  dr-get-rule-set(|name) => ruleset@[changeset@ChangeSet(_, _, h@Hashtable(csid)) | rs]
        
        // Store changeset as ruleset
        // [extended rules contain *all* values in the changeset, we only want
        //    the newly added]
        ; <hashtable-keys> h
        ; keyvals := <map(\x -> <changeset-key-to-rules(|h, rs)>\); remove-all(?(_, []))>
        ; if not([] := keyvals) then
            //where(!name; debug(!"Changeset for: "))
          //; debug(!"... rules are: ")
            rules(RecordDR_NewRuleSets :+= (name, keyvals))
          end
          // Commit change set
        ; !ruleset
        ; dr-commit-change-set
        //; where(!(name, <id>); debug(!"Ruleset is now: "))
        ; dr-set-rule-set(|name)
        
  load-dynamic-rule-closure: rulelist -> <map(load-dynamic-rule)> rulelist
  
  load-dynamic-rule: (name, keyvals) -> <id>
    with  dr-get-rule-set(|name) => ruleset;
          if is-record-dynamic-rules-enabled then
            // First scope has tracking enabled; put in second scope
            if length => 1 then
              // No scopes before recording. Have to create a new scope behind the current
              dr-new-scope => newscope;
              <concat> [ruleset, [newscope]];
              dr-set-rule-set(|name)
            end;
            ?[_ | <id>]
          end;
          if ?[RuleScope(lbl, table) | xs] then
            <map(\(key, vals) -> <map(\val -> <hashtable-push(|key, val)> table\)> vals\)> keyvals
          else
            // find rule scope
            ?[ChangeSet(lbls, rmset, table) | xs];
            <fetch-elem(?RuleScope(_, tbl@Hashtable(scopeid)))> xs;
            <map(\(key, vals) -> <map(\val -> <hashtable-push(|(scopeid,key), val)> table\)> vals\)> keyvals
          end
          
  load-flat-dynamic-rule-closure: rulelist -> <map(\((name,key), vals) -> <load-dynamic-rule> (name,[(key,vals)])\)> rulelist
          
rules // helpers for dynamic rule set traversal
  
  rules-as-key-val-pairs(s) =
      mapconcat(\(name, keyvals) -> <mapconcat(\(key,vals) -> <map(\val -> <s> ((name,key),val)\)> vals \)> keyvals \)
   
  rules-to-keys =
      mapconcat(\(name,keyvals) -> <map(\(key,vals) -> (name,key)\)> keyvals\)
  
  map-dr-values(s) =
      map(\(name,keyvals) -> (name, <map(\(key,vals) -> (key,<map(s)> vals) \)> keyvals )\)
  
  map-dr-values-with-key(s) =
      map(\(name,keyvals) -> (name, <map(\(key,vals) -> (key,<map(s(|name,key))> vals) \)> keyvals )\)
  
rules // Track usage of DR's and return position info

  TrackRuleUsage = !"__TRACK_RULE_USAGE__"

  enable-dr-usage-tracking =
      where(prim("SSL_hashtable_put", <dr-rule-sets-hashtable>, <TrackRuleUsage>, 1))
  
  disable-dr-usage-tracking =
      where(prim("SSL_hashtable_remove", <dr-rule-sets-hashtable>, <TrackRuleUsage>))
  
  is-dr-usage-tracking-enabled =
      where(prim("SSL_hashtable_get", <dr-rule-sets-hashtable>, <TrackRuleUsage>))
  
  ignore-dr-tracking = fail
  
  override dr-lookup-rule(|name, key) =
      mark-rule-use(|name,key)
    ; proceed
  
  // once-
  override dr-lookup-rule-pointer(|name, key) =
      mark-rule-use(|name,key)
    ; proceed
   
  // bigbag-
  override dr-lookup-rule-pointer(|name, key) =
      mark-rule-use(|name,key)
    ; proceed
  
  // all-keys-
  override dr-all-keys(|name) =
      key := DR_DUMMY()
    ; mark-rule-use(|name,key)
    ; proceed
  
  rule-tracking-table = lookup-table(|"RULE_TRACKING_TABLE")
  
  mark-rule-use(|name, key) =
   where(try(
          is-dr-usage-tracking-enabled
        ; <is-used-dr; not(ignore-dr-tracking)> name
        ; <try(dynamic-rule-resolver)> (name, key)
        ; rule-tracking-table
        ; hashtable-put(|(name,key), 1) 
      ))
 
  // TODO: fold-
  
rules // Callback on dynamic rule lookup
  
  dynamic-rule-resolver = fail
  
  is-used-dr = fail
  
rules // Track rule creation
  
  /*
  override dr-set-rule(|name, key, val) =
    mark-rule-creation(|name, key, val);
    proceed
    
  override dr-add-rule(|name, key, val) =
    mark-rule-creation(|name, key, val);
    proceed
    
  ignore-dr-tracking = ?"DynamicRulesCreated"
    
  mark-rule-creation(|name, key, val) =
    where(try(
          is-dr-usage-tracking-enabled
        ; <is-used-dr; not(ignore-dr-tracking)> name
        ; rules(DynamicRulesCreated :+ (name,key) -> val)
      ))
  */