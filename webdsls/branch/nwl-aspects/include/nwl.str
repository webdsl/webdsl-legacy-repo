module nwl

signature
  constructors
    ExtendEntity            : ID * List(EntityBody) -> ExtendEntity
                            : Function -> EntityBody
                            : Property -> EntityBody
    Inverse                 : ID -> Annotation
    Name                    : Annotation
    Id                      : Annotation
    ExtendFunction          : ID * List(Param) * Block -> Function
    Function                : ID * List(Param) * Block -> Function
    VarDeclInit             : ID * Type * Exp -> VarDecl
    VarDecl                 : ID * Type -> VarDecl
    Block                   : List(Statement) -> Block
    If                      : Exp * Block * Block -> Statement
    While                   : Exp * Block -> Statement
    For                     : ID * Type * Exp * Block -> Statement
    Stat                    : VarDecl -> Statement
    ThisCall                : ID * List(Exp) -> Statement
                            : Block -> Statement
    ReturnPage              : PageRef -> Statement
    ExpStat                 : Exp -> Statement
    Assign                  : Exp * Exp -> Statement
    TemplateRef             : ID * List(Exp) -> TemplateRef
    TemplateRef             : ID -> TemplateRef
    TemplateDef             : List(Mod) * ID * List(Param) * List(Element) -> Template
    SetType                 : Type -> Type
    SimpleType              : ID -> Type
    Property                : ID * Type * List(Annotation) -> Property
    Property                : ID * Type -> Property
    Entity                  : ID * List(Property) -> Entity
    Import                  : ID -> Import
    Module                  : ID * List(Definition) -> Start
    MatchArgs               : List(Param) * Option(WildCardArg) -> MatchArgs
                            : String -> WildCardArg
                            : String -> MatchId
    AccessControlRule       : AcMod * MatchId * MatchArgs * Exp -> AcRule
    AccessControlDefinition : List(AcRule) -> AcDefinition
    Template                : AcMod
    Action                  : AcMod
    Page                    : AcMod
    PageRef                 : TemplateRef -> PageRef
    PageRef                 : ID * List(Exp) -> PageRef
    IfElement               : Exp * List(Element) * List(Element) -> Element
    IfElement               : Exp * List(Element) -> Element
    Call                    : TemplateRef * List(Element) -> Element
    Call                    : TemplateRef -> Element
    Init                    : List(Statement) -> Element
    Elements                : Element
    XmlElem                 : ID * List(Element) * ID -> Element
    Submit                  : ID * List(Exp) * List(Element) -> Element
    Action                  : ID * List(Param) * List(Statement) -> Element
                            : VarDecl -> Element
    Navigate                : PageRef * List(Element) -> Element
    ForAllElem              : ID * Type * List(Element) -> Element
    ForElem                 : ID * Type * Exp * List(Element) -> Element
    Call                    : ID * List(Exp) * List(Element) -> Element
    CallElems               : ID * List(Element) -> Element
    CallArgs                : ID * List(Exp) -> Element
    Call                    : ID -> Element
    String                  : STRING -> Element
    Param                   : ID * Type -> Param
    Page                    : Mod
                            : ExtendEntity -> Definition
    Entity                  : ID * List(EntityBody) -> Definition
                            : Function -> Definition
                            : Template -> Definition
                            : Entity -> Definition
                            : Import -> Definition
                            : AcDefinition -> Definition
    TemplateDef             : List(Mod) * ID * List(Param) * List(Element) -> Definition
    False                   : Exp
    True                    : Exp
    Or                      : Exp * Exp -> Exp
    And                     : Exp * Exp -> Exp
    Geq                     : Exp * Exp -> Exp
    Leq                     : Exp * Exp -> Exp
    Lt                      : Exp * Exp -> Exp
    Gt                      : Exp * Exp -> Exp
    NEq                     : Exp * Exp -> Exp
    Eq                      : Exp * Exp -> Exp
    Minus                   : Exp * Exp -> Exp
    Plus                    : Exp * Exp -> Exp
    Mod                     : Exp * Exp -> Exp
    Div                     : Exp * Exp -> Exp
    Times                   : Exp * Exp -> Exp
    Not                     : Exp -> Exp
    UnaryMinus              : Exp -> Exp
    IndexAccess             : Exp * Exp -> Exp
    PropertyAccess          : Exp * ID -> Exp
    MethodCall              : Exp * ID * List(Exp) -> Exp
    SetLit                  : List(Exp) -> Exp
    Constructor             : ID -> Exp
    Var                     : ID -> Exp
    IntLit                  : INT -> Exp
    StringLit               : STRING -> Exp
                            : String -> STRING
                            : String -> INT
                            : String -> ID


signature
  constructors
    Some : a -> Option(a)
    None : Option(a)


signature
  constructors
    Cons : a * List(a) -> List(a)
    Nil  : List(a)
    Conc : List(a) * List(a) -> List(a)
