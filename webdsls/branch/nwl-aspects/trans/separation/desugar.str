module separation/desugar

imports
  nwl read check emit java-project util
  include/nwl
  separation/-
  lib/track lib/dr

strategies
	
  with-rule-resolving(s) = {| RuleResolvingEnabled:
    rules(RuleResolvingEnabled := 1);
    s
  |}
  
  load-desugar-rules =
    // Load desugar dependencies
    if (all-defs,used-rules,created-rules) := <path-to-cache-path; file-exists; ReadFromFile> "$testdr-rev.aterm" then
      <map(\(key, defs) -> <rules(RuleUsers : key -> defs)> defs\)> used-rules;
      <map(\(key, defvals*) -> <map(\(def,vals) -> <rules(RuleProvider :+ key -> def)>\)> defvals* \)> created-rules;
      <map(\(key, defvals*) -> <map(\(def,vals) -> <rules(RuleVals :+ def -> (key,vals))>\)> defvals* \)> created-rules;
      <load-new-files> all-defs;
      rules(PreviousAllDefs := all-defs)
    else
      <debug> "Cannot load dr rules!";
      load-cached-files
    end
    
  dynamic-rule-resolver: (rulename, key) -> (rulename, key)
     where RuleResolvingEnabled
        ; defs := <bagof-RuleProvider <+ debug(!"No rule providers for: "); fail> (rulename, key)
     with   
          not-loaded := <filter(where(not(DefinitionLoaded); not(defkey-to-mod; is-emit-mod)))> defs
        ; if not([] := not-loaded) then
            <verbose-msg> ["Got rule: ", (rulename, key)];
            <verbose-msg> ["Providers: ", defs];
            <verbose-msg> ["Loading defs: ", not-loaded];
            <map(load-rules-for-def)> not-loaded;
            rules(DesugarApplied := True()) // something changed, need new desugar phase
          end
  
  load-rules-for-def: defkey -> defkey
    with  ruleset := <bagof-RuleVals> defkey;
          disable-dr-usage-tracking;
          load-flat-dynamic-rule-closure;
          enable-dr-usage-tracking;
          rules(DefinitionLoaded : defkey) 
            
  ignore-dr-tracking =
      ?"RuleResolvingEnabled"
   <+ ?"RuleUsers"
   <+ ?"RuleProvider"
   <+ ?"Definition"
   <+ ?"DefinitionLoaded"
   <+ ?"CurrentDefinitionKey"
   <+ ?"MemoOpenParseTable"     // whole parse table!
  
  // Load files for which we don't have a cache
  load-new-files: olddefs -> olddefs
  with
    oldmods := <filter(defkey-to-mod; not(is-emit-mod); modname-to-filename)> olddefs;
    bagof-CachedFiles;
    filter(\x -> x where not(<fetch(?x)> oldmods)\);
    try(not(?[]); debug(!"No rule dependencies found for: "));
    map(load-cached-file)
    
  save-desugar-rules =
      // Purge old rule-usage info
        all-keys-RuleUsers
      ; map({defs: \key -> <RuleUsers; filter(not(DefinitionLoaded); {?def; rules(TempRule :+ key -> def)})> \})
      // Add new rule-usage info
      ; all-keys-DesugarRulesUsed
      ; map({def: 
            ?def
          ; bagof-DesugarRulesUsed    // list of list of dr keys
          ; concat                    // list of dr keys
          ; map({key:
              ?key
            ; rules(TempRule :+ key -> def)
            })
        })
      ; all-keys-TempRule
      ; map({defs: \key -> <bagof-TempRule; ?defs; rules(RuleUsers : key -> defs)>\})
      // Purge old rule-creation info
      ; all-keys-RuleVals
      ; filter(\def -> <rules(RuleVals :- def)> where DefinitionLoaded \)
      // Add new rule-creation info
      ; all-keys-CreatedRules
      ; map({def:
            ?def
          ; bagof-CreatedRules
          ; concat
          ; map({rulename:
                ?(rulename, <id>)
              ; map({rulekey, vals, drkey:
                	?(rulekey,vals)
                ; drkey := (rulename, rulekey)    // workaround StrategoXT/843
                ; rules(RuleVals :+ drkey -> (def, vals))
                })
            })
        })
        // And save...
        // TODO: filter deleted mods
      ; all-defs := <concat; uniq> [<all-keys-DesugarRulesUsed>, <PreviousAllDefs <+ ![]>] // new and old
      // Rule -> defs
      ; uses := <all-keys-RuleUsers; map(\key -> (key, <RuleUsers>)\)>
      ; creates := <all-keys-RuleVals; map(\key -> (key, <bagof-RuleVals>) \)>
      ; <WriteToBinaryFile> (<path-to-cache-path> "$testdr-rev.aterm", (all-defs, uses, creates))

  desugar-check-dependencies = with(
    all-keys-DesugarRulesCreated;
    mapconcat(\key -> (<bagof-DesugarRulesCreated; concat>)\);   
    uniq;
    // term: list of dr-keys that were created
    filter(\key -> (key, <RuleUsers; filter(not(DefinitionLoaded); not(defkey-to-mod; is-emit-mod)); not(?[]); uniq> key)\);
    // term: list of (dr-key, list-of-users)
    where(map({?(key, defs); <verbose-msg> ["Dependent: ", defs, " on rule: ", key, " created in ", <CurrentDefinitionKey>]}));
    map(\(rulekey, defkeys) -> <map(load-cached-def)> defkeys \)
  )
