module desugar

imports libstratego-aterm libstratego-gpp
imports include/nwl
imports emit read check nwl
imports lib/track separation/desugar

rules // desugared builder
    
  show-desugared :
    (selected, position, ast, path, project-path) -> (filename, result-string)
    with
      filename      := <guarantee-extension(|"aterm")> path;
      result-string := <desugar-all; pp-aterm-box; box2text-string(|120)> selected

  show-desugared-pp :
    (selected, position, ast, path, project-path) -> (filename, result-string)
    with
      filename      := <guarantee-extension(|"d.nwl")> path;
      result-string := <normalize-all; pp-nwl> selected
      
strategies
  
  is-used-dr = id
  ignore-dr-tracking = ?"DesugarApplied"
  
  desugar-all = 
    if <path-to-cache-path; not(file-exists)> "$testdr-rev.aterm" then
      load-cached-files;
      desugar-all-1
    else
      rules(IncrementalDesugaring := True());
      load-desugar-rules;
      with-rule-resolving(desugar-all-1)
    end
  
  desugar-all-1 = 
    repeat(
      {| DesugarApplied, DesugarRulesCreated:
        transform-defs( {
          track-rules-with-creates(
            innermost(
              desugar;
              rules(DesugarApplied := True())
            )
            | <CurrentDefinitionKey>
          )})
      ; repeat(
              desugar-once;
              rules(DesugarApplied := True())
            )
      ; where(DesugarApplied)    // quit if nothing done
      ; try(where(IncrementalDesugaring); desugar-check-dependencies)
      ; add-emits
      |}
    )
    ; remove-defs(?[])
      
  normalize-all = innermost(normalize)
   
  desugar = fail
  desugar-once = fail
  
rules

  normalize : 
    Call(r) -> Call(r, [])
  
  normalize :
    TemplateRef(x) -> TemplateRef(x, [])
  
strategies // pretty-printing
  
  pp-nwl =
    ast2abox(|[<import-term(include/nwl.pp.af)>, <import-term(syntax/nwl-pretty.pp.af)>]);
    box2text-string(|120) 
    
      