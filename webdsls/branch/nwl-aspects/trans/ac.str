module ac

imports libstratego-aterm libstratego-gpp
imports include/nwl
imports type-analysis rename pretty-print primitives
imports nwl emit check read

rules
 
  /*
  desugar: |[ rule page $x () { true } ]| -> fname
    with  fname := "x"
  */
 
  // Emit predicates
  desugar: ac@AccessControlRule(type, name, margs, exp) -> []
    with  fname := $[pred_[<CurrentDefinitionKey; key-to-string>]];
          <emit> Function(fname, [], Block([exp]));
          stype := <acrule-type-to-string> type;
          rules(AccessControlRule :+ stype -> (name, margs, fname))
            
  acrule-type-to-string: Page() -> "page"
  acrule-type-to-string: Action() -> "action"
  acrule-type-to-string: Template() -> "template"
            
  desugar: AccessControlDefinition(defs) -> []    // Rules have been processed.
  
  desugar: TemplateDef(mod*, name, fparams, body) -> TemplateDef(mod*, name, fparams, body2)
    where acrules := <mod-to-actype; bagof-AccessControlRule> mod*;
          paramtypes := <param-types> fparams;
          defid := name; // change if overloading must be supported
          !acrules;
          filter(match-ac(|name,paramtypes));
          filter(\fname -> <not(<AcWeavingDone> (fname,defid)); rules(AcWeavingDone : (fname,defid))> fname \);
          not(?[]);
          ?extends
    with  <map(fname-to-ac-check)> extends;
          body2 := <flatten-list> [<id>, body]
          
  mod-to-actype = 
      fetch(?Page()); !"page"
   <+ !"template"
  
  match-ac(|name, paramtypes): p@(mname, margs, funcname) -> funcname
    where <match-ac-name> (mname, name);
          <match-ac-params> (<strip-annos> margs, <strip-annos> paramtypes)
 
  fname-to-ac-check: fname -> accheck
    with  accheck := Init([
        ThisCall(fname, [])
      ])

  // From WebDSL
  match-ac-name:
    tup@(matchstring,name) -> tup
    where
    if not("*" := matchstring)
    then
        leftmatcher := <explode-string;reverse;drop-until(?'*');drop-while(?'*');reverse> matchstring
        ; if [] := leftmatcher 
          then // no * in the name, explicit match
               <eq> (matchstring, name)
          else //left-match: Succeeds if the first list of terms starts with the second list of terms.
               //            Returns the suffix of the first list that is not matched.
               <left-match> (<explode-string> name,leftmatcher)
          end
    end    
    
  match-ac-params=
    ?(MatchArgs(newfargs1, getWC) ,farg*)
    ; newfargs := <param-types> newfargs1 
    ; if None() := getWC 
      then newfarg* := farg*
      else newfarg* := <take(<length> newfargs)> farg* end
    ; <zip(eq)> (newfargs,newfarg*)
    
rules // checks
  
  constraint-warning: rule@AccessControlRule(type, name, margs, exp) -> (rule, $[Access control rule has no matches.])
    where require(<rule-matches-anything> (type,name,margs))
    
  rule-matches-anything: p@(Template(), mname, margs) -> p
    with  sigs := <all-templates(|[])>
    where <fetch(\(x,t*) -> <match-ac(|x, t*)> (mname, margs, "") \)> sigs
    
  rule-matches-anything: p@(Page(), mname, margs) -> p
    with  sigs := <all-templates(|[Page()])>
    where <fetch(\(x,t*) -> <match-ac(|x, t*)> (mname, margs, "") \)> sigs
    
  all-templates(|mod*) = 
    <bagof-TemplateSignatures> mod*
    