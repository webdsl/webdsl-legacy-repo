module compiler

imports include/nwl read check rename desugar java-project
imports libstrategolib libstratego-sglr libstratego-gpp libstratego-xtc
imports lib/editor-common.generated lib/track separation/dependencies lib/dependencies separation/desugar

signature constructors
  At : Term * Term * Term -> Term

rules
  
  main-nwl-compiler = io-wrap(nwl-compile)
  
  my-parse-file: filename -> ast
    with ast := <parse-xtc-file-pt(|<import-term(include/nwl.tbl)>); implode-with-location-annos(|filename)> FILE(filename)
        
  implode-with-location-annos(|path) =
    asfix-anno-location
  ; implode-asfix
  ; topdown(
        try(\t {Location(r, c, _, _)} -> t {At(path, r, c)}\)
      )
      
  get-anno(s) = ?_{anno*}; !anno*; fetch-elem(s)
      
  def-to-key: (modname, elem) -> key
    with  <get-anno(?At(m,x,y))> elem;
          <?constructor#(_)> elem;
          key := (modname, $[[constructor]_[<int-to-string> y]_[<int-to-string> x]])
    
  AlternativeProjectDir = fail
      
  nwl-compile = 
    rules(Standalone := 1);
    filename := <get-config> "-i";
    project-path := <dirname> filename;
    fullpath := filename;
    rules(
          FullPath := fullpath        // Absolute path to file
          ProjectDir := project-path  // Absolute path to project
    );
    
    rules(IncrementalDesugaring := 1); //TODO
    
    
    compiler-phase(
    	
    	<load-modified-modules> filename;
      transform-defs(topdown(try(remove-string-position-anno)));
    	
      declare-all;
      typecheck-dependencies-file;
	    load-dependency-data;
    	find-dependent-modules;
      map(load-cached-def);
      transform-defs(topdown(try(remove-string-position-anno)));
      
      rename-top;
     
	    get-toplevel-defs => ast2;
	    errors   := <collect-tracked(check)> ast2;
	    warnings := <collect-tracked(constraint-warning)> ast2;
	    problem-files := <errors-to-filenames> errors;
	    <map(path-to-cache-path; try(remove-file))> problem-files;
	        
      transform-defs(topdown(try(remove-position-anno)))
      // TODO for new defs: transform-defs(topdown(try(remove-string-position-anno)));
      | "declare"
    );
    store-used-rules;
    update-typecheck-dependencies;
    
    if not([] := warnings) then
      <debug> "*** Warnings found: ";
      <map(report(|"warn"))> warnings
    end;
    if not([] := errors) then
      <debug> "*** Errors found: ";
      <map(report(|"err"))> errors;
      <exit> 1
    end;
    
    compiler-phase(
      desugar-all
      | "desugar"
    );
    
    nwl-to-java-project;
    <exit> 0  // don't output current term
      
  report(|type): (elem, msg) -> <debug> $[[<elem-to-location> elem]:[type]: [msg]]
  
  elem-to-location: x -> $[[filename]:[r]/[c]]
    with <oncetd(get-annos; getfirst(?At(filename, r, c)))> x
    
  errors-to-filenames: errors -> filenames
    with  map(Fst; {file,r,c: oncetd(get-annos; fetch-elem(?At(file,r,c))); !file} );
          uniq => filenames
      
  path-to-cache-path: x -> y
    with  cachedir := <file-exists <+ mkdir> $[[<ProjectDir>]/.nwl-cache];
          fullpath' := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> x;
          y := $[[cachedir]/[fullpath']]
    
  remove-position-anno :
    s{anno*} -> result
    where anno2* := <remove-all(?At(_, _, _))> anno*
        ; if [] := anno2* then
            result := s{}
          else
            result := s{anno2*}
          end

  remove-string-position-anno =
    is-string; strip-annos