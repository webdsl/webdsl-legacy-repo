module read

imports libstratego-aterm libstratego-gpp
imports include/nwl
imports type-analysis rename pretty-print primitives
imports nwl check emit
imports lib/dr
imports lib/editor-common.generated

rules 

  get-toplevel-defs = transform-defs(id)
  
  debug-toplevel-defs = where(get-toplevel-defs; pp-aterm; debug)
          
  transform-defs(s) =
    map-defs(
      {s; ?newdef; where(CurrentDefinitionKey => key; rules(Definition : key -> newdef)) }
    ) 
     
  map-defs(s) =
    all-keys-Definition;
    filter(where(Definition)); // skip deleted
    // TODO: fix scoping
    map(//{| CurrentDefinitionKey: 
      {def:
        \key -> <rules(CurrentDefinitionKey := key); Definition; s> key \}
      /*|}*/)
  
  remove-defs(s) =
    all-keys-Definition;
    filter(where(Definition));
    filter(\key -> <rules(CurrentDefinitionKey := key); Definition; s; rules(Definition :- key)> key\)
  
  collect-in-defs(s) = {| Collected:
    transform-defs(
      { res:
        where(
          try(
            s => res;
            rules(Collected :+= res)
          )
        )
      }
    );
    bagof-Collected;
    concat
  |}

rules
  
  store-module(|filename): mod@Module(name, body) -> Module(name', body')
    with  name' := <strip-annos> name;
          rules(
            Imported : name'
            ModuleFullpath : name' -> filename
          );
          body' := <load-imports; body-to-toplevel-defs> mod;
          rules(ModuleToDefs : name' -> body');
          <map(where({def:
              ?def;
              store-def(|name')
          }))> body'

  body-to-toplevel-defs =
    lift-access-control-defs
    
  lift-access-control-defs : 
    defs -> new-defs
    with  defs1* := <remove-all(?AccessControlDefinition(_))> defs;
          defs2* := <filter(?AccessControlDefinition(<id>)); concat> defs;
          new-defs := [defs1*, defs2*]

  store-def(|modname): def -> key
    with  key := <def-to-key> (modname, def);
          rules(
            Definition : key -> def
            DefinitionLoaded : key
            DefToModule : key -> modname
            // Note: ModuleToDef is undefined for empty modules!
            ModuleToDef :+ modname -> key 
          )
  
  key-to-string: (modname, key) -> $[[modname]_[key]]
  
  def-to-key: (modname, cons#(_)) -> (modname, cons)
    where <is-emit-mod> modname
 
  defkey-to-mod: (modname, _) -> modname
    
  load-imports: mod@Module(name, body) -> body2
    with  imports := <filter(?Import(_); strip-annos)> body;
          <filter(parse-import <+ /*TODO: add error*/ id)> imports;
          name' := <strip-annos> name;
          rules(ModuleImports : name' -> imports);
          body2 := <remove-all(?Import(_))> body

  parse-import: Import(modname) -> []
    where <Imported> modname
          
  parse-import: Import(modname) -> []
    with  filename := <modname-to-filename> modname;
          <parse-file-try-cache> filename
  
  modname-to-filename: modname -> filename
    with  (
              !$[[<ProjectDir>]/[modname].nwl]; file-exists
            <+ !$[[<AlternativeProjectDir>]/[modname].nwl]
          );
          trim-initial-dotslash => filename
  
  trim-initial-dotslash =
    try(where(string-starts-with(|"./")); <split-after> (<id>, "./"); Snd)
  
  load-modified-modules: filename -> filename
    with <parse-file-try-cache> filename  
    
  // Three cases:
  // 1. Cache absent:   store [] as usage, return ast
  // 2. Cache outdated; store cached as usage, return ast
  // 3. Cache uptodate; don't store usage, return "cached" 
  
  parse-file-try-cache: filename -> content'
    with  cache := <path-to-cache-path> filename;
          if (content, cached-content) := <parse-file-with-cache(|cache)> filename then
            id
          else 
            content := <parse-file-without-cache(|cache)> filename;
            rules(OldSignature : filename -> [])
          end;
          content' := <store-module(|filename)> content
          
  parse-file-with-cache(|cache): filename -> (content, cached-content)
    where <file-exists> cache;
          (modname, imports, defrules) := <ReadFromFile> cache
    with  cached-content := defrules;
          if <is-newer> (cache, filename)  then
            // Read rule signature
            <debug(!"Using cache: ")> filename;
            rules(Imported : modname);
            <load-dynamic-rule-closure> defrules;
            <map(parse-import)> imports;
            rules(CachedFiles :+= filename);
            rules(CachedModule : modname);
            content := Module(modname, [])
          else
            // Outdated cache
            content := <parse-file-without-cache(|cache)> filename;
            rules(OldSignature : filename -> cached-content)
          end
          
  read-signature: filename -> defrules
    where cachefile := <path-to-cache-path> filename;
          <file-exists> cachefile;
          ReadFromFile => (modname, imports, defrules)
            
  parse-file-without-cache(|cache): filename -> content
    with  <debug(!"Parsing: ")> filename; 
          content := <my-parse-file> filename;
          ?Module(<strip-annos; ?modname>, _);
          rules(ModuleLoaded : modname)
     
  load-cached-files =
    bagof-CachedFiles;
    debug(!"Loading: ");
    map(load-cached-file)
    
  load-cached-file =
    ?filename;
    my-parse-file;
    \Module(name,defs) -> Module(name, <remove-all(?Import(_))> defs)\;
    store-module(|filename);
    rules(CachedFiles :- filename)
  
  load-cached-def: defkey -> defkey
    with  defkey-to-mod => modname;
          modname-to-filename => filename;
          content := <ParsedFile <+ debug(!"Parsing: "); my-parse-file> filename;
          rules(ParsedFile : filename -> content);
          ?Module(_,<id>);
          body-to-toplevel-defs;
          filter(where(<def-to-key> (modname,<id>); ?defkey));
          try(not(1 := <length>); !(defkey,<id>); debug(!"Multiple defs match key: "));
          ?[thedef];
          <store-def(|modname)> thedef    
    
    