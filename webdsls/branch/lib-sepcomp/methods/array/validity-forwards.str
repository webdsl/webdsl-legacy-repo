module separation/methods/array/validity-forwards

imports
  libstrategolib
  separation/-
  separation/methods/array/array
  separation/methods/array/dr

strategies  
  
  cached-valid = 
    ?(def, n);
    <lt> (n, <get-pointer> def)
  
  dr-ignore-dr-tracking = ?"Pointer"
  
  init-dependency-phase = try(move-rule-pointers)
  
  map-cached-defs(s) =
    with(
      all-definitions;
      filter(def-is-cached);
      map({
        ?def;
        {CurrentDef:
          rules(CurrentDef := def);
          s
        }
      })
    )
  
  move-rule-pointers =
    {| AnythingMoved:
	    repeat( 
	      {| Moved:
	        <verbose-msg> ["move rule pointer iter"];
		      map-cached-defs(
		        try(
		          move-rule-pointer;
		          rules(Moved := 1)
		        )
		      );
		      Moved
		    |};
		    rules(AnythingMoved := 1)
      );
		  AnythingMoved    // fail if no progress
    |}
	  
  get-pointer = Pointer <+ !1
	  
  //debug-sep(s) = debug(s)
  debug-sep(s) = id
	  
  move-rule-pointer: def -> def
    where get-pointer => pointer;
          idx := (def, pointer);
          if use := <Usage> idx then
            <is-usage-valid> use;
            <debug-sep(!"Usage valid, moving pointer: ")> use
          else
            key := <CreateKey> idx;
            <debug-sep(!"Marking valid: ")> (key, idx);
            rules(RuleOwners :+ key -> def)
          end;
          <increase-pointer> def;
          <move-rule-pointer> def   //recurse
          
  increase-pointer: def -> def
    with  pointer := <get-pointer> def;
          pointer' := <inc> pointer;
          rules(Pointer : def -> pointer')
          
  is-usage-valid =
    ?(drkey@(name,key),xval*);
    // TODO: hashed-uniq should not be needed
    val* := <hashed-uniq> xval*;
    if is-dr-usage-tracking-enabled then
      curval* := <dr-lookup-rule(|name,key) <+ ![]>
    else
      curval* := <concat> [<dr-lookup-rule(|name,key) <+ ![]>, <get-cached-rules> drkey]  
    end;
    // TODO: use efficient version of subseteq (using hashtable)
    if <subseteq> (<hashed-uniq> val*, curval*) then
      id
    else
      <verbose-msg> ["Comparing vals for key (cur, expected): ", (drkey, (curval*, val*)), " for def: ", <CurrentDef <+ !"unknown">];
      fail
    end
          
  desugar-exhausted =
    move-rule-pointers; notify-rules-loaded
    <+
    <debug> "Exhausted debug, trying to invalidate creates";
    map-cached-defs(try(invalidate-rule-pointer))
  
  invalidate-rule-pointer =
    !(<id>, <get-pointer>); CreateKey; fatal-err(|"Create encountered when invalidating")
  
  invalidate-rule-pointer: def -> def
    where idx := (def, <get-pointer> def);
          (key, val*) := <Usage> idx;  // if passed end of array, this will fail
          // The current use is not valid; recompile the definition
          <debug(!"Invalidate usage: ")> (idx, key); 
          <debug(!"Recompiling: ")> def;
          <trigger-recompilation> def // TODO; clear rules
  
  // TODO: during desugar, CreatedRules are stored for all iterations (using :+)
  // but only the creates of the last iteration are needed
 
  load-dependent-defs-for-rules(|def): rulekeys -> rulekeys
    with(
      // term: list of dr-keys that were created
      filter(\key -> (key, <bagof-RuleUsers; filter(def-is-cached); not(?[]); uniq> key)\);
      // term: list of (dr-key, list-of-users)
      where(map({key, defs: ?(key, defs); <verbose-msg> ["Dependent: ", defs, " on rule: ", key, " created in ", def]}));
      map(Snd);
      concat;
      hashed-uniq;
      map(trigger-recompilation)
    )
  