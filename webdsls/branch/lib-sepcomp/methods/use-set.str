module separation/methods/use-set

imports
  libstrategolib
  separation/-

strategies  
  
  //desugar-dependency-file = <path-to-cache-path> $[$deps-[<DependencyPhase>].aterm]
  // http://yellowgrass.org/issue/StrategoXT/822
  desugar-dependency-file = <concat-strings; path-to-cache-path> ["$deps-", <DependencyPhase>, ".aterm"]
  
  save-rule-provider: (def, ruleset) -> (def, ruleset)
    where <is-cacheable> def
    with  <rules-to-keys> ruleset;  
          map(\key@(rulename, rulekey) -> 
            <rules(RuleProvider :+ key -> def);
             rules(RuleProvider :+ (rulename, DR_DUMMY()) -> def)>\)
  
  // Find rules which were created during the last compile, but not anymore
  find-removed-rules =
    all-keys-RuleVals;
    filter(is-definition-loaded);
    map(
      {| NewCreatedRules:
        {def,oldkeys:
          ?def;
          // Create set of newly created rules
          // Fails when def is removed
          <bagof-CreatedRules <+ ![]> def;
          concat;
          rules-to-keys;
          map(\key -> <rules(NewCreatedRules : key)>\);
          // Compare with previously created rules
          // Fails if def is loaded during this map 
          <RuleVals <+ ![]> def;
          rules-to-keys;
          remove-all(NewCreatedRules);
          load-dependent-defs-for-rules(|def)
         }
      |}
    )
    
  dependency-phase(s|name) =
    // RuleUsers are per-phase: creation after usage cannot be a dependency
    {| DependencyPhase, RuleUsers, OldCreates, RulesForDefinitionLoaded, CreatedRules: 
        rules(DependencyPhase := name);
        with(
          log-time(load-rules-phase | "load-rules")
        );
        with-rule-resolving(s);
        with(
          log-time(save-rules-phase | "save-rules")
        )
    |}  
  
  load-rules-phase =
    // Load desugar dependencies of unmodified file
    file := <desugar-dependency-file>;
    ts := <file-exists; modification-time <+ !0> file;
    rules(DependenciesTimestamp := ts);
    if (all-old-defs,used-rules,created-rules) := <file-exists; log-time(read-file | "read rule file")> file then
      // USERS
      <map(\(key, defs) -> <filter(is-cacheable); {defs2: ?defs2; rules(RuleUsers : key -> defs2)}> defs\)> used-rules;
      // PROVIDERS
      !created-rules;
      rules(OldCreates := created-rules);
      <filter(save-rule-provider)> created-rules;
      // VALUES
      !created-rules;
      filter(\(def, ruleset) ->
        <rules(RuleVals :+ def -> ruleset)> \);
      // DEFINITIONS
      all-defs := <filter(is-cacheable)> all-old-defs;
      //<load-new-files> all-defs;
      rules(PreviousAllDefs := all-defs)
      /*
      // load definitions that are dependent on changed typecheck rules
      changed := <TypecheckChangeset>;
      filter({key: ?key; 
        RuleUsers; try(not(?[]); where(<debug(!"Loading defs that are dependent on changed typecheck rule: ")> key); debug);
        map(load-def-during-desugar)
      });
      rules(TypecheckChangeset :- _)
      */
    else
      all-definitions; remove-all(is-definition-loaded);
      map(trigger-recompilation);
      rules(OldCreates := [])
    end
    
  get-cached-rules: (rulename, key) -> (rulename, key)
    where defs := <bagof-RuleProvider> (rulename, key)
     with   
          not-loaded := <filter(where(
            not(RulesForDefinitionLoaded);
            not(def-key-to-module; is-emitted-mod; fatal-err(|"Got emitted mod in rule resolver!"));   // TODO: remove
            def-is-cached))> defs
        ; if not([] := not-loaded) then
            <verbose-msg> ["Got rule: ", (rulename, key)];
            <verbose-msg> ["Providers: ", defs];
            <verbose-msg> ["Loading rules for: ", not-loaded];
            <map(load-rules-for-def; notify-rules-loaded)> not-loaded
          end         
          
  load-rules-for-def: defkey -> defkey
    with  ruleset := <bagof-RuleVals; concat> defkey;
          rules(RuleVals :- defkey);
          load-dynamic-rule-closure;
          rules(RulesForDefinitionLoaded : defkey) 
            
  dr-ignore-dr-tracking =
      ?"RuleUsers"
   <+ ?"RuleProvider"
   <+ ?"RulesForDefinitionLoaded"
   
  // Load files for which we don't have a cache
  /*
  load-new-files: olddefs -> olddefs
  with
    oldmods := <map(def-key-to-module)> olddefs;
    all-keys-ModuleToDefs;
    filter(\x -> x where not(<fetch(?x)> oldmods)\);
    try(not(?[]); debug(!"No rule dependencies found for: "));
    map(load-def-during-desugar)
  */
  
  create-rule-index =
    all-used-rules;
    remove-all(?(<id>,_); def-key-to-module; is-emitted-mod); // no usages for emitted def 
    map(\(x, y) -> <rules(RuleUsageIndex :+ y -> x)> \)
  
  flatten-and-combine-rule-index =
    all-keys-RuleUsageIndex;
    map({key,defs2: 
      ?key;
      bagof-RuleUsageIndex;
      try(
        <concat;hashed-uniq> [<id>, <RuleUsers> key]  // add old users
      );
      ?defs2;
      rules(RuleUsers : key -> defs2);
      rules(RuleUsageIndex :- key)
    })
  
  save-rules-phase =
        all-defs := <concat; hashed-uniq> [<all-used-rules; filter(Fst; where(def-key-to-module; not(is-emitted-mod)))>, <PreviousAllDefs <+ ![]>] // new and old
      // Add new rule-usage info
      ; {| RuleUsageIndex:
        log-time(create-rule-index | "Create usage index");
        log-time(flatten-and-combine-rule-index | "Flatten and combine usage")
        |}
      ; clear-used-rules
      ; all-keys-RuleUsers; map(\key -> (key, <RuleUsers>)\) => uses
      ; log-time(
        // Purge old rule-creation info
          OldCreates
        ; remove-all(?(<id>, _); not(is-cacheable))
        ; ?old-creates
        // Add new rule-creation info
        ; all-keys-CreatedRules
        // TODO: should not even record these rules
        ; remove-all(def-key-to-module; is-emitted-mod; debug(!"Got recorded rule for emitted mod:"))
        ; map(\def -> (def, <bagof-CreatedRules;concat> def)\)
        ; <concat> [<id>, old-creates]
        ; ?creates
          | "prepare creates")
      // And save...
      ; <log-time(write-file(|<desugar-dependency-file>) | "write desugar deps")> (all-defs, uses, creates)

  load-dependent-defs-for-rules(|def): rulekeys -> rulekeys
    with(
      // term: list of dr-keys that were created
      filter(\key -> (key, <RuleUsers; filter(def-is-cached); not(?[]); uniq> key)\);
      // term: list of (dr-key, list-of-users)
      where(map({key, defs: ?(key, defs); <verbose-msg> ["Dependent: ", defs, " on rule: ", key, " created in ", def]}));
      map(Snd);
      concat;
      hashed-uniq;
      map(load-def-during-desugar)
    )

  load-def-during-desugar =
    repeat(get-definition-owner);
    ?def;
    if not("desugar" := <DependencyPhase>) then
        !(def, <DependencyPhase>);
        debug(!"WARNING: cannot load dependent def during phase: ")
    end;
    if def-is-cached then
      rules(RuleVals :- def); // release memory
      if RulesForDefinitionLoaded then
        debug(!"WARNING: invalid cache used for definition: ")
      end;
      trigger-recompilation
    end  