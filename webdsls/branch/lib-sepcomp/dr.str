module separation/dr

imports
  libstrategolib
  separation/-
  separation/methods/interface

strategies  
  
  dr-ignore-dr-tracking = ?"DR_BREAK" <+ ?"DR_EXCEPTION"
  dr-ignore-dr-tracking = ignore-dr-tracking
  
  all-dynamic-rule-names =
      <hashtable-keys> Hashtable(<dr-rule-sets-hashtable>) 
    ; remove-all(dr-ignore-dr-tracking)

  is-record-dynamic-rules-enabled = where(table-hashtable; hashtable-get(|"__TRACK_RULE_CREATE__"))
  
  start-record-dynamic-rules =
    with(
        table-hashtable; hashtable-put(|"__TRACK_RULE_CREATE__", 1)
    )
  
  end-record-dynamic-rules =
    with(
      table-hashtable; hashtable-remove(|"__TRACK_RULE_CREATE__")
    );
    get-recorded-rules
  
  remove-dr-dummies = map(remove-dr-dummy)
  
  remove-dr-dummy: x{anno*} -> x{anno2*}
    with  anno2* := <remove-all(?DR_DUMMY())> anno*

  // NOTE: hashtable-push adds the new value to the *beginning* of the list,
  // so we read in the values in reverse order

  load-dynamic-rule-closure: rulelist -> <reverse-nonrec; map(load-dynamic-rule)> rulelist
  
  load-dynamic-rule: ((name, key), vals) -> <id>
    with  dr-get-rule-set(|name) => ruleset;
          ?[RuleScope(lbl, table) | xs];
          <map(\val -> <hashtable-push(|key, val)> table\)> vals
          /*
          
          if is-record-dynamic-rules-enabled then
            if ?[scope] then
              // We just created the first scope by calling dr-get-rule-set. Put a changeset before it.
              dr-new-change-set => changeset;
              ![changeset, scope];
              dr-set-rule-set(|name)
            end;
            ?[_ | <id>]
          end;
          if ?[RuleScope(lbl, table) | xs] then
            <map(\val -> <hashtable-push(|key, val)> table\)> vals
          else
            // find rule scope
            ?[ChangeSet(lbls, rmset, table) | xs];
            <fetch-elem(?RuleScope(_, tbl@Hashtable(scopeid)))> xs;
            <map(\val -> <hashtable-push(|(scopeid, key), val)> table\)> vals
          end
          */
          
  load-flat-dynamic-rule-closure: rulelist -> <map(\((name,key), vals) -> <load-dynamic-rule> (name,[(key,vals)])\)> rulelist
          
rules // helpers for dynamic rule set traversal
  
  rules-as-key-val-pairs(s) =
      mapconcat(\((name, key), vals) -> <map(\val -> <s> ((name, key), val)\)> vals\)
   
  rules-to-keys =
      map(\((name,key), vals) -> (name, key) \)
  
  /*
  map-dr-values(s) =
      map(\(name,keyvals) -> (name, <map(\(key,vals) -> (key,<map(s)> vals) \)> keyvals )\)
  
  map-dr-values-with-key(s) =
      map(\(name,keyvals) -> (name, <map(\(key,vals) -> (key,<map(s(|name,key))> vals) \)> keyvals )\)
  */
  
rules // Track usage of DR's and return position info

  enable-dr-usage-tracking =
    where(table-hashtable; hashtable-put(|"__TRACK_RULE_USAGE__", 1))
      
  disable-dr-usage-tracking =
    where(table-hashtable; hashtable-remove(|"__TRACK_RULE_USAGE__"))
  
  is-dr-usage-tracking-enabled =
    where(table-hashtable; hashtable-get(|"__TRACK_RULE_USAGE__"))

rules
  
  override dr-lookup-rule(|name, key) =
    if <record-dr-use> name then
      before-rule-use(|name,key);
	    proceed;
	    where(
		      // Scoped?
		      dr-get-rule-set(|name);
		      ?[RuleScope(_,_) | [RuleScope(_,_) | _]];
		      <verbose-msg> ["Ignoring scoped rule: ", (name, key)]
        <+
          mark-rule-use(|name,key)
      )
    else
      proceed
    end
    
  // once-, bigbag-
  override dr-lookup-rule-pointer(|name, key) =
    if <record-dr-use> name then
	    before-rule-use(|name,key);
	    proceed;
	    where(Fst; mark-rule-use(|name,key))
	  else
      proceed
	  end
   
  // all-keys-
  override dr-all-keys(|name) =
    where(key := DR_DUMMY());
    if <record-dr-use> name then
      before-rule-use(|name,key);
      proceed;
      mark-rule-use(|name,key)
    else
      proceed
    end
    
rules
    
  rule-tracking-table = lookup-table(|"RULE_TRACKING_TABLE")
  
  record-dr-use: name -> name
    where is-dr-usage-tracking-enabled;
          <is-used-dr; not(dr-ignore-dr-tracking)> name
          
rules // Callback on dynamic rule lookup
  
  is-used-dr = fail
