module separation/dr

imports
  libstrategolib
  separation/-
  separation/methods/interface

strategies  
  
  dr-ignore-dr-tracking = ?"DR_BREAK" <+ ?"DR_EXCEPTION"
  dr-ignore-dr-tracking = ignore-dr-tracking
  
  all-dynamic-rule-names =
      <hashtable-keys> Hashtable(<dr-rule-sets-hashtable>) 
    ; remove-all(dr-ignore-dr-tracking)

  is-record-dynamic-rules-enabled = where(table-hashtable; hashtable-get(|"__TRACK_RULE_CREATE__"))
  
  start-record-dynamic-rules =
    with(
        table-hashtable; hashtable-put(|"__TRACK_RULE_CREATE__", 1)
    )
  
  end-record-dynamic-rules =
    with(
      table-hashtable; hashtable-remove(|"__TRACK_RULE_CREATE__")
    );
    get-recorded-rules
  
  remove-dr-dummies = map(remove-dr-dummy)
  
  remove-dr-dummy: x{anno*} -> x{anno2*}
    with  anno2* := <remove-all(?DR_DUMMY())> anno*

  // NOTE: hashtable-push adds the new value to the *beginning* of the list,
  // so we read in the values in reverse order

  load-dynamic-rule-closure: rulelist -> <reverse-nonrec; map(load-dynamic-rule)> rulelist
  
  load-dynamic-rule: ((name, key), vals) -> <id>
    with  dr-get-rule-set(|name) => ruleset;
          ?[RuleScope(lbl, table) | xs];
          <map(\val -> <hashtable-push(|key, val)> table\)> vals
          /*
          
          if is-record-dynamic-rules-enabled then
            if ?[scope] then
              // We just created the first scope by calling dr-get-rule-set. Put a changeset before it.
              dr-new-change-set => changeset;
              ![changeset, scope];
              dr-set-rule-set(|name)
            end;
            ?[_ | <id>]
          end;
          if ?[RuleScope(lbl, table) | xs] then
            <map(\val -> <hashtable-push(|key, val)> table\)> vals
          else
            // find rule scope
            ?[ChangeSet(lbls, rmset, table) | xs];
            <fetch-elem(?RuleScope(_, tbl@Hashtable(scopeid)))> xs;
            <map(\val -> <hashtable-push(|(scopeid, key), val)> table\)> vals
          end
          */
          
  load-flat-dynamic-rule-closure: rulelist -> <map(\((name,key), vals) -> <load-dynamic-rule> (name,[(key,vals)])\)> rulelist
          
rules // helpers for dynamic rule set traversal
  
  rules-as-key-val-pairs(s) =
      mapconcat(\((name, key), vals) -> <map(\val -> <s> ((name, key), val)\)> vals\)
   
  rules-to-keys =
      map(\((name,key), vals) -> (name, key) \)
  
  /*
  map-dr-values(s) =
      map(\(name,keyvals) -> (name, <map(\(key,vals) -> (key,<map(s)> vals) \)> keyvals )\)
  
  map-dr-values-with-key(s) =
      map(\(name,keyvals) -> (name, <map(\(key,vals) -> (key,<map(s(|name,key))> vals) \)> keyvals )\)
  */
  
rules // Track usage of DR's and return position info

  enable-dr-usage-tracking =
    where(table-hashtable; hashtable-put(|"__TRACK_RULE_USAGE__", 1))
      
  disable-dr-usage-tracking =
    where(table-hashtable; hashtable-remove(|"__TRACK_RULE_USAGE__"))
  
  is-dr-usage-tracking-enabled =
    where(table-hashtable; hashtable-get(|"__TRACK_RULE_USAGE__"))

signature constructors
  
  OnceValues : Term * Term * Term * Term * Term -> Term

rules
  
  override dr-lookup-rule(|name, key) =
    vals := <proceed <+ ![]>;
    <on-rule-load(conc,id)> (name, key, vals)
  
  // once-
  
  override dr-lookup-rule-pointer(|name, key) =
    val := <proceed <+ !([], key, None())>;
    <on-rule-load(combine-pointers,fail)> (name, key, (name, val))
  
  combine-pointers: ((name, (closures, key, tbl)), cached-vals) -> (closures', key, tbl')
    with  //<debug(!"Got once key:")> key;
          //<debug(!"Got closures: ")> closures;
          //<debug(!"Got cached: ")> cached-vals;
          closures' := OnceValues(closures, cached-vals, name, key, tbl);
          tbl' := <lookup-table(|"OnceValuesDummyTable")>;
          <hashtable-clear> tbl'
  
  override split-fetch(s) =
    if ?OnceValues(closures1, closures2, name, key, tbl) then
      if remaining := <split-fetch({x: ?x; s; closure := x}); conc> closures1 then
        // In current values. Remove from tbl
        <hashtable-put(|key, remaining)> tbl
      else
      	remaining := <split-fetch({x: ?x; s; closure := x}); conc> closures2;
        <rule-undefined> ((name, key), closure)
      end;
      <record-usage-if-not-scoped> (name, key, [closure]);
      !([],[])  // will be stored in the dummy table created in combine-pointers
    else
      proceed
    end
    
  // all-keys-
  override dr-all-keys(|name) =
    vals := <proceed <+ ![]>;
    <on-rule-load(conc,id)> (name, DR_DUMMY(), vals)
    
  // TODO: dr-lookup-all-rules for bigbagof-
    
  on-rule-load(combine,record-usage): (name, key, vals) -> vals
    where <not(is-used-dr) <+ dr-ignore-dr-tracking> name
    
  on-rule-load(combine,record-usage): (name, key, vals) -> newvals
    with
      if RuleResolvingEnabled then
        cached := <lookup-cached-values> (name,key);
        newvals := <combine> (vals,cached)
      else
        newvals := vals
      end;
      <try(where(record-usage); record-usage-if-not-scoped)> (name, key, vals)
      
  record-usage-if-not-scoped =
    not(is-dr-usage-tracking-enabled)
    
  record-usage-if-not-scoped: (name, key, vals) -> (name, vals)
    where dr-get-rule-set(|name);
          ?[RuleScope(_,_) | [RuleScope(_,_) | _]];
          <verbose-msg> ["Ignoring scoped rule: ", (name, key)]
	      
  record-usage-if-not-scoped: (name, key, vals) -> (name, vals)
    with <mark-rule-use(|name,key)> vals
    
rules
    
  rule-tracking-table = lookup-table(|"RULE_TRACKING_TABLE")
  
rules // Callback on dynamic rule lookup
  
  is-used-dr = fail
