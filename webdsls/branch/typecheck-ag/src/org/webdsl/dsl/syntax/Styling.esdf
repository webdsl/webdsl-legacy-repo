module Styling

%% syntax for styling of WebDSL applications

hiddens
imports AttributesDefinition

exports

  sorts
    Ident Name Num String UnaryOperator

  lexical syntax
    "-"? [\_a-z][\_a-z0-9\-]*      -> Ident
    [\_a-z0-9\-]+                  -> Name
    [0-9]+                         -> Num
    [0-9]* "." [0-9]+              -> Num
    "\"" ~[\"\n]* "\""             -> String
    "'" ~[\"\n]* "'"               -> String

exports

  sorts
     Number Percentage Ems Exs Length Angle Time Freq Dimension Uri Hash

  lexical syntax
    Num                     -> Number
    Num "%"                 -> Percentage {prefer}
    Num "em"                -> Ems {prefer}
    Num "ex"                -> Exs {prefer}
    Num "px"                -> Length {prefer}
    Num "cm"                -> Length {prefer}
    Num "mm"                -> Length {prefer}
    Num "in"                -> Length {prefer}
    Num "pt"                -> Length {prefer}
    Num "pc"                -> Length {prefer}
    Num "deg"               -> Angle {prefer}
    Num "rad"               -> Angle {prefer}
    Num "grad"              -> Angle {prefer}
    Num "ms"                -> Time {prefer}
    Num "s"                 -> Time {prefer}
    Num "hz"                -> Freq {prefer}
    Num "khz"               -> Freq {prefer}
    Num Id                  -> Dimension {prefer}

    "url" "(" String ")"    -> Uri {prefer}

    "#" Name                -> Hash {prefer}


context-free syntax

  "style" Id StyleDefinition*                                   -> Section {cons("StyleSection"),
  attributes(typecheck:
    root.errors := ![] %% ignored
  )}

context-free syntax

  "theme" Modifier Id "(" ")" "{" def:StyleDeclaration* "}"     -> Definition {cons("ThemeDefinition"),
  attributes(typecheck:
    root.errors := ![] %% ignored
    def.class := !GlobalSort()
  )}

context-free syntax

  "layout" Id "{" LayoutDeclaration* "}"                        -> Definition {cons("LayoutDefinition"),
  attributes(typecheck:
    root.errors := ![] %% ignored
  )}

context-free syntax

%%  Id "(" MatchTemplateArgs ")"
  Id "{" decl:StyleDeclaration* "}"                             -> StyleDefinition {cons("StyleDescription"),
  attributes(typecheck:
    decl.class := !GlobalSort()
  )}

  {Exp ","}*                                                    -> MatchTemplateArgs {cons("MatchTemplateArgs")}

%%  StyleDeclaration*												-> StyleBody
%%  LayoutDeclaration*											-> StyleBody
  
  StyleProperty ":=" StyleValue                                 -> StyleDeclaration {cons("StyleDeclaration")}
  
  Id "(" LayoutDeclaration ")"                                  -> LayoutDeclaration {cons("LayoutDeclaration")}
  {Id "|"}+       												-> LayoutDeclaration {cons("HorLayoutDeclaration"), prefer}
  Id+		       												-> LayoutDeclaration {cons("VertLayoutDeclaration"), prefer}

  Name															-> StyleProperty {cons("StyleProperty")}

  %% Alternative are not handle by the Transformers attribute
  %% grammar. (if we add attributes on)
  Number       -> StyleValue {cons("StyleValue")}
  Percentage   -> StyleValue {cons("StyleValue")}
  Length       -> StyleValue {cons("StyleValue")}
  Ems          -> StyleValue {cons("StyleValue")}
  Exs          -> StyleValue {cons("StyleValue")}
  Angle        -> StyleValue {cons("StyleValue")}
  Time         -> StyleValue {cons("StyleValue")}
  Freq         -> StyleValue {cons("StyleValue")}
  String       -> StyleValue {cons("StyleValue")}
  Ident        -> StyleValue {cons("StyleValue")}
  Uri          -> StyleValue {cons("StyleValue")}
  %% cannot find the definition of Hexcolor !
  %% the attribute grammar compiler does not accept dangling context-free symbol.
  %% Hexcolor     -> StyleValue {cons("StyleValue")}
  Function     -> StyleValue {cons("StyleValue")}
