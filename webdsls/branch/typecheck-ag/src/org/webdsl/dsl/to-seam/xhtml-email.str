module org/webdsl/dsl/to-seam/xhtml-email

imports 
  libstrategolib 
  
imports 
  org/webdsl/dsl/syntax/WebDSL
  org/webdsl/dsl/utils/-
    
rules
  
  emails-to-xml =
    ?def@Define([Email()], x, args, elems1)
    ; email_templates := <EmailTemplates> x
    ; <map(email-to-xml(|def))> email_templates
  
  email-to-xml(|def) =
    ?template
    ; {| Component
        : rules( Component := <GetEmailTemplatePage> template )
 	    ; Define([Email()], x, fargs, elems) := def
 	    ; {|
             ArrayIndex : bargs := <map(parameters-to-array-calls)> fargs
           |}
        ; arg_list := <zip> (fargs, bargs)
        ; elems1 := <try(sometd(transform-variables(|arg_list)))> elems
        ; elems2 := <try(sometd(translate-template-expression))> elems1
	    ; <email-to-xhtml> Define([Email()], template, fargs, elems2)
        |}
	  
  email-to-xhtml :
    Define([Email()], x, args, elems) ->
      XmlFile(["view"], <concat-strings>[x, ".xhtml"], 
		%>
		<?xml version="1.0" encoding="UTF-8"?>
		
		<m:message xmlns="http://www.w3.org/1999/xhtml"
		           xmlns:m="http://jboss.com/products/seam/mail"
		           xmlns:h="http://java.sun.com/jsf/html"
		           xmlns:c="http://java.sun.com/jstl/core"
		           xmlns:s="http://jboss.com/products/seam/taglib">
            <%= <email-elems-to-xhtml> elems::* %>
		</m:message>
		<%)
			
/*		
    where {| Component
           : rules( Component := <GetEmailTemplatePage> template )
           ; elems' := <email-elems-to-xhtml> elems
           |}*/

  email-elems-to-xhtml =
    filter-concat-warn(email-elem-to-xhtml <+ undefined-template-call | "email-elem-to-xhtml undefined: ")
  
  email-elem-to-xhtml :
    TemplateCall("to", [elem], []) ->
    %>
      <m:to address="<%= email_address %>" />
    <%
    where email_address := <arg-to-value-string> elem
  
  email-elem-to-xhtml :
    TemplateCall("from", [name, email], []) ->
    %>
      <m:from name="<%= x_name %>" address="<%= x_email %>" />
    <%
  where x_name := <arg-to-value-string> name
      ; x_email := <arg-to-value-string> email
    
  email-elem-to-xhtml :
    TemplateCall("subject", elems, _) ->
    %>
      <m:subject>
        <%= subject::cdata %>
      </m:subject>
    <%
    where [elem] := elems
        ; subject := <arg-to-value-string> elem
  
  email-elem-to-xhtml :
    TemplateCall("body", [], elems) ->
    %>
      <m:body>
        <%= <elems-to-xhtml> elems::* %>
      </m:body>
    <%

/*  construct-email-definition(|def) =
    call_from_page := <id>
    ; <transform-email-template(|call_from_page)> def
  
   transform-email-template(|call_from_page) : 
     Define([Email()], x, fargs, elems1) -> Define([Email()], template_name, fargs, elems3)
     where (template_name, page) := <EmailCallToTemplateName> call_from_page
         ; ThisCall("email", [ThisCall(name2, aargs)]) := call_from_page
         ; {|
             ArrayIndex : bargs := <map(parameters-to-array-calls(|page))> aargs
           |}
         ; arg_list := <zip> (fargs, bargs)
         ; rules ( Component := page )
         ; elems2 := <try(sometd(transform-variables(|arg_list)))> elems1
         ; elems3 := <try(sometd(translate-template-expression))> elems2
*/
  transform-variables(|arg_list) :
    Var(name) -> exp
    where <collect(?(Arg(name, _), exp))> arg_list  

  parameters-to-array-calls =
    ?Arg(name, s)
    ; rules( ArrayIndex := <(ArrayIndex; inc) <+ !0> )
    ; x_parm := <concat-strings>[<GetEmailArgumentsList> <Component>, "[", <ArrayIndex; int-to-string>, "]"]
    ; !FieldAccess(Var(<Component>){Type("Component")}, x_parm){Type(s)}