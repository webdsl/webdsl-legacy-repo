module nwl

imports Common

exports

  context-free start-symbols
    Start

  sorts Definition
  context-free syntax
    "module" ID Definition* -> Start {cons("Module")}
    
  sorts Property Annotations
  context-free syntax
    "entity" ID "{" Property* "}"         -> Definition {cons("Entity")}
    ID ":" Type                           -> Property   {cons("Property")} 
    ID ":" Type "(" {Annotation ","}* ")" -> Property   {cons("Property")}
    "id"                                  -> Annotation {cons("Id")}
    "name"                                -> Annotation {cons("Name")}
    "inverse" ":" ID                      -> Annotation {cons("Inverse")}
    
  sorts Type
  context-free syntax
     ID                 -> Type {cons("SimpleType")}
     "Set" "<" Type ">" -> Type {cons("SetType")}
     
  sorts Exp
  context-free syntax
    ID                            -> Exp {cons("Id")}
    Exp "." ID                    -> Exp {cons("GetProperty")}
    Exp "." ID "(" {Exp ","}* ")" -> Exp {cons("MethodCall")}
    ID "{" "}"                    -> Exp {cons("Constructor")}
  
  sorts LValue
  context-free syntax
    ID             -> LValue {cons("LValId")}
    LValue "." ID -> LValue {cons("LValProperty")}
    
  sorts Mod Arg
  context-free syntax
    "define" Mod* ID "(" {Param ","}* ")" "{" Element* "}" -> Definition {cons("TemplateDef")}
    "page"                                                 -> Mod {cons("Page")}
    ID ":" Type                                            -> Param {cons("Param")}
    
  sorts Element
  context-free syntax
    STRING                                              -> Element {cons("String")}
    ID                                                  -> Element {cons("Call")}
    ID "(" {Exp ","}* ")"                               -> Element {cons("CallArgs")}
    ID                    "{" Element* "}"              -> Element {cons("CallElems")}
    ID "(" {Exp ","}* ")" "{" Element* "}"              -> Element {cons("Call")}
    "for" "(" ID ":" Type "in" Exp ")" "{" Element* "}" -> Element {cons("ForElem")}
    "navigate" ID "(" {Exp ","}* ")" "{" Element* "}"   -> Element {cons("Navigate")}
    
    "input" "(" LValue ")"                              -> Element {cons("Input")}
    "input"                                             -> ID {reject}
     
    "var" ID ":" Type ":=" Exp                          -> Element {cons("VarDeclElem")}
    "action" ID "(" {Param ","}* ")" "{" Statement* "}" -> Element {cons("Action")}
    "submit" ID "(" {Exp ","}* ")" "{" Element* "}"     -> Element {cons("Submit")}
     
    "submit" -> ID {reject}
    
  sorts Statement
  context-free syntax
    LValue ":=" Exp ";"                -> Statement {cons("Assign")}
    Exp ";"                            -> Statement {cons("ExpStat")}
    "return" ID "(" {Exp ","}* ")" ";" -> Statement {cons("ReturnPage")}
  
  