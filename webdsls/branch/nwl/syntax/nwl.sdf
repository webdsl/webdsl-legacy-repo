module nwl
    
imports Common 
   
exports
  context-free start-symbols Start
  sorts Definition
  context-free syntax
    "module" ID Definition* -> Start {cons("Module")}
    
exports
  
  sorts Property Annotations
  context-free syntax
    "entity" ID "{" Property* "}"         -> Definition {cons("Entity")} 
    ID ":" Type                           -> Property   {cons("Property")} 
%%    ID ":" Type "(" {Annotation ","}* ")" -> Property   {cons("Property")}
%%    "id"                                  -> Annotation {cons("Id")}
%%    "name"                                -> Annotation {cons("Name")}
%%    "inverse" ":" ID                      -> Annotation {cons("Inverse")}
       
  sorts Type
  context-free syntax
     ID                    -> Type {cons("SimpleType")}
%%     "Set" "<" Type ">"    -> Type {cons("SetType")}
  
exports
  
  sorts Exp IndexExp
  context-free syntax
    STRING          -> Exp {cons("StringLit")}
    ID              -> Exp {cons("Var")}
%%    INT             -> Exp {cons("IntLit")}
%%    ID "{" "}"      -> Exp {cons("Constructor")}
    
%%    "{" {Exp ","}+ "}" -> Exp {cons("SetLit")}
    
  context-free syntax
    Exp "." ID "(" {Exp ","}* ")" -> Exp {cons("MethodCall")}
    Exp "." ID                    -> Exp {cons("PropertyAccess")}
%%    Exp "[" Exp "]"               -> Exp {cons("IndexAccess")}
 
  context-free syntax
    "(" Exp ")"  -> Exp {bracket}
    %% "-" Exp      -> Exp {cons("UnaryMinus")}
    %% "!" Exp      -> Exp {cons("Not")}
    %% Exp "*"  Exp -> Exp {cons("Times"), left}
    %% Exp "/"  Exp -> Exp {cons("Div"), left}
    %% Exp "%"  Exp -> Exp {cons("Mod"), left}
    %% Exp "+"  Exp -> Exp {cons("Plus"), left}
    %% Exp "-"  Exp -> Exp {cons("Minus"), left}
    %% Exp "==" Exp -> Exp {cons("Eq"), non-assoc}
    %% Exp "!=" Exp -> Exp {cons("NEq"), non-assoc}
    %% Exp ">"  Exp -> Exp {cons("Gt"), non-assoc}
    %% Exp "<"  Exp -> Exp {cons("Lt"), non-assoc}
    %% Exp "<=" Exp -> Exp {cons("Leq"), non-assoc}
    %% Exp ">=" Exp -> Exp {cons("Geq"), non-assoc}
    %% Exp "&&" Exp -> Exp {cons("And"), assoc}
    %% Exp "||" Exp -> Exp {cons("Or"), assoc}

  %% context-free priorities
      %% { "-" Exp -> Exp
        %% "!" Exp -> Exp }
    %% > { Exp "." ID                    -> Exp 
        %% Exp "." ID "(" {Exp ","}* ")" -> Exp
        %% Exp "[" Exp "]"               -> Exp }
    %% > {left:
        %% Exp "*" Exp -> Exp
        %% Exp "/" Exp -> Exp
        %% Exp "%" Exp -> Exp }
    %% > {left:
        %% Exp "+" Exp -> Exp
        %% Exp "-" Exp -> Exp }
    %% > {non-assoc:
        %% Exp "==" Exp -> Exp 
        %% Exp "!=" Exp -> Exp
        %% Exp ">"  Exp -> Exp
        %% Exp "<"  Exp -> Exp
        %% Exp "<=" Exp -> Exp 
        %% Exp ">=" Exp -> Exp }
     %% > Exp "&&" Exp -> Exp
     %% > Exp "||" Exp -> Exp
        
exports
  
  sorts Mod Arg
  context-free syntax
    "define" Mod* ID "(" {Param ","}* ")" "{" Element* "}" -> Definition {cons("TemplateDef")}
    "page"                                                 -> Mod {cons("Page")}
    ID ":" Type                                            -> Param {cons("Param")}
      
  sorts Element
  context-free syntax
    STRING                                              -> Element {cons("String")}
    
    ID                                                  -> Element {cons("Call")}
    ID "(" {Exp ","}* ")"                               -> Element {cons("CallArgs")}
    ID                    "{" Element* "}"              -> Element {cons("CallElems")}
    ID "(" {Exp ","}* ")" "{" Element* "}"              -> Element {cons("Call")}
    
%%    "for" "(" ID ":" Type "in" Exp ")" "{" Element* "}" -> Element {cons("ForElem")}
%%    "for" "(" ID ":" Type          ")" "{" Element* "}" -> Element {cons("ForAllElem")}
    
    "navigate" PageRef "{" Element* "}"                 -> Element {cons("Navigate")}
    ID "(" {Exp ","}* ")"                               -> TemplateRef {cons("TemplateRef")}
    TemplateRef                                         -> PageRef {cons("PageRef")}
         
    "if" "(" Exp ")" "{" Element* "}"  -> Element {cons("IfElement")}
    "if" "(" Exp ")" "{" Element* "}" "else" "{" Element* "}" -> Element {cons("IfElement")}
    VarDecl                                             -> Element 
%%    "action" ID "(" {Param ","}* ")" "{" Statement* "}" -> Element {cons("Action")}
    
%%    "submit" ID "(" {Exp ","}* ")" "{" Element* "}"     -> Element {cons("Submit")}
    
%%    "<" ID ">" Element* "</" ID ">"                     -> Element {cons("XmlElem")}
%%    "elements"                                          -> Element {cons("Elements")}
    
%%    "init" "{" Statement* "}"                           -> Element {cons("Init")} 
    
  lexical syntax
%%    "submit"   -> ID {reject}
%%    "action"   -> ID {reject} 
    "navigate" -> ID {reject}
    "if" -> ID {reject}
    "else" -> ID {reject}
%%    "init"     -> ID {reject}
    
%%exports
  
%%  context-free syntax
%%    "rule" AcMod* ID "(" {Param ","}* ")" "{" Exp "}" -> Definition {cons("Rule")}
%%    "page"     -> AcMod {cons("Page")}
%%    "action"   -> AcMod {cons("Action")}
%%    "template" -> AcMod {cons("Template")}
    
%% exports

  %%sorts Statement
  %% context-free syntax
    %% Exp ":=" Exp ";"     -> Statement {cons("Assign")}
    %% Exp ";"              -> Statement {cons("ExpStat")}
    %% "return" PageRef ";" -> Statement {cons("ReturnPage")}
    %% "{" Statement* "}"   -> Block     {cons("Block")}
    %% Block                -> Statement

  %%sorts VarDecl
  %% context-free syntax
    %% "var" ID ":" Type          -> VarDecl {cons("VarDecl")}
    %% "var" ID ":" Type ":=" Exp -> VarDecl {cons("VarDeclInit")}
    %% VarDecl ";"                -> Statement {cons("Stat")}
    %% "var"                      -> ID {reject}
    
  %%context-free syntax
    %% "for" "(" ID ":" Type "in" Exp ")" Block -> Statement {cons("For")}
    %% "while" "(" Exp ")" Block                -> Statement {cons("While")}
    %% "if" "(" Exp ")" Block "else" Block      -> Statement {cons("If")}
