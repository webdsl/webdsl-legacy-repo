module nwl

imports
  libstratego-lib
  libstratego-aterm
  libstratego-gpp
  include/nwl
  entities
  expressions
  templates
  actions

strategies // editor interface

  main-nwl =
    fatal-err(|"No main strategy")
  
  editor-analyze:
    (ast, path, fullpath) -> (errors, warnings, notes)
    with
      // Analysis: scope and record dynamic ruless
      say(!" ");
      try(dr-scope-all-end);
      dr-scope-all-start;
      innermost(desugar);
      declare-all;
      //debug(!"declared: ");
      rename-all => ast2
      //debug(!"renamed: ")
    with
      errors   := <collect-markers(check)> ast2;
      warnings := <collect-markers(constraint-warning)> ast2;
      notes    := <collect-markers(constraint-note)> ast2
      
  // collect-all/conc: causes multiple messages per location
  
  collect-markers(s) =
    collect-all(s,conc);
    try(flatten-list);
    map((id,try(concat-strings)))

  editor-hover:
    (term, position, ast, path, fullpath) -> <conc-strings> ("Hover help: ", <write-to-string> term)

  generate-java:
    (selected, position, ast, path, project-path) ->
    <fatal-err(|"Not implemented, sorry :(")>
  
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result-string)
    with
      filename      := <guarantee-extension(|"aterm")> path;
      result-string := <pp-aterm-box; box2text-string(|120)> selected
    
  constraint-note:
    Module("example", _) -> "This is just an example program in the \"entities\" language"
    
rules // resolution

  editor-resolve:
    (SimpleType(type), position, ast, path, fullpath) -> target
    where
      Entity(target,_) := <GetEntity> type
      
rules // declare-all and rename-all

  declare-all =
    alltd(declare-entity <+ declare-template)
    
  rename-all =
    alltd(rename)
