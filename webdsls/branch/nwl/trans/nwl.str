module nwl

imports
  libstratego-lib
  libstratego-aterm
  libstratego-gpp
  include/nwl
  entities
  expressions
  templates
  actions
  modules
  generate

strategies // editor interface

  main-nwl =
    fatal-err(|"No main strategy")

  editor-analyze:
    (ast, path, fullpath) -> (errors, warnings, notes)
    with
      try(dr-scope-all-end); dr-scope-all-start;
      ast2 := <declare-all> ast
    with
      errors   := <collect-markers(check)> ast2;
      warnings := <collect-markers(constraint-warning)> ast2;
      notes    := <collect-markers(constraint-note)> ast2
  
  collect-markers(s) =
    collect-all(s,conc);
    try(flatten-list);
    map((id,try(concat-strings)))

  editor-hover:
    (term, position, ast, path, fullpath) -> help
    where help := <hover-help <+ hover-help-default> term
    
  hover-help-default :
    term -> $[Hover help: [<write-to-string> term]]

  generate-java:
    (selected, position, ast, path, project-path) ->
    ($[[<module-name>ast].java], <nwl-to-java> selected)
  
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result-string)
    with
      filename      := <guarantee-extension(|"aterm")> path;
      result-string := <pp-aterm-box; box2text-string(|120)> selected
    
  constraint-note:
    Module("example", _) -> $[This is just an example program in the "entities" language]
    
rules // resolution

  editor-resolve:
    (SimpleType(type), position, ast, path, fullpath) -> target
    where
      Entity(target,_) := <EntityDeclaration> type
 
  editor-resolve:
    (ref@PageRef(x,e*), position, ast, path, fullpath) -> target
    where
      TemplateDef(_,target,_,_) := <declaration-of> ref
 
  // submit to action def
  // variable use to declaration
  // constructor to entity
  

 
