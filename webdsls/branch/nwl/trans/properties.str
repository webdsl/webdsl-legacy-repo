module properties

imports entities

signature
  constructors
    Property : ID * Type * List(Annotation) -> Property
    Inverse  : ID -> Annotation

rules // looking up properties

lookup-property(|x) = lookup-property(?Property(x,_,_))
lookup-property(s)  : Entity(x, prop*) -> <fetch-elem(s)> prop*
lookup-property(s)  : SimpleType(x) -> <declaration-of; lookup-property(s)>
type-of             : Property(_, type, _) -> type
inverse             : Property(_, _, anno*) -> <fetch-elem(?Inverse(_))> anno*
  
rules // checking properties

check:
  ent@Entity(x, prop*) -> errors
  where errors := <filter(check-property(|ent)); not(?[])> prop*
  
check-property(|ent) : 
  Property(f, t, annos) -> (g, $[Inverse relation requires entity type])
  where Inverse(g) := <inverse>
  where tc := <carrier-type> t
  where <is-simple-type> tc // non-existing type already produces error message
  where require(<is-entity-type> tc)
      
check-property(|ent1) : 
  Property(f, t, annos) -> (g, $[Entity '[<pp>tc]' has no property '[g]'])
  where Inverse(g) := <inverse>
  where tc := <carrier-type> t
  where <is-entity-type> tc
  where require(<lookup-property(|g)> tc)
       
check-property(|ent) : 
  Property(f, t, anno*) -> (g, $[Type of '[<pp>t1].[g]' should be [<pp>t3] or [<pp>SetType(t3)]])
  where Inverse(g) := <inverse>
  where t1 := <carrier-type> t
  where t2 := <lookup-property(|g); type-of; carrier-type> t1
  where t3 := <type-of>ent
  where require(<eq>(t2, t3))


// cut here

signature
  constructors
    Name     : Annotation
    Id       : Annotation
    
    Property : ID * Type -> Property
    
rules // desugaring

desugar : Property(x, t) -> Property(x, t, [])

rules // id and name properties
  
is-id-property       = Property(id,id,fetch(?Id()))
is-name-property     = Property(id,id,fetch(?Name()))
lookup-id-property   = lookup-property(is-id-property)
lookup-name-property = lookup-property(is-name-property)

rules // multiple definitions
 
check-property(|ent) :
  Property(name, type, annos) -> (name, $[Property '[name]' defined more than once])
  where not(<lookup-property(|name)>ent => type)
 
check-property(|ent) :
  prop@Property(name, type, annos) -> (annos, $[More than one property with annotation 'id'])
  where is-id-property
  where not(<lookup-id-property>ent => prop)
   
check-property(|ent) :
  prop@Property(name, type, annos) -> (annos, $[More than one property with annotation 'name'])
  where is-name-property
  where not(<lookup-name-property>ent => prop)
 
check-property(|ent) :
  prop@Property(name, type, annos) -> (type, $[Name property should have type 'String'])
  where is-name-property
  where not(<is-string-type>type)
  
check-property(|ent) : 
  Property(name, type, annos) -> (annos, $[Multiple inverse annotations])
  where not(<leq>(<filter(?Inverse(_)); length> annos, 1))
 