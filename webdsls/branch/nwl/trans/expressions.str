 module expressions
 
 rules // expressions
 
   rename = 
     Rename; debug(!"renamed: "); where(try(TypeOf; debug(!"type: ")))
 

           
  type-of :
    Id(x) -> t
    where debug(!"type-of Id: "); t := <TypeOf>; debug(!"type: ")
    
  constraint-error :
    Id(x) -> (<id>, ["Variable not declared"])
    where debug(!"ce(x): "); not(type-of)
    
  type-of :
    GetProperty(e, f) -> t
    where t := <type-of; lookup-property-type(|f)> e
    
  constraint-error :
    GetProperty(e, f) -> (<id>, [t, " has no property ", f])
    where debug(!"ce(e.f): "); not(type-of; debug(!"type: ")); t := <type-of; debug(!"sub: ")> e