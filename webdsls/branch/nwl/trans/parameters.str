module parameters

imports entities

 signature
  constructors    
    Param : ID * Type -> Param
    Var   : ID -> Exp
 
rules // name resolution

rename : 
  Param(x, t) -> Param(y, t)
  with y := <rename-var>(x, t)
  
rename-var : 
   (x, t) -> y
   with y := x{<new>};
        rules(
           RenameId : x -> y
           TypeOf   : y -> t 
        )
         
rules // projections

param-types = is-list; map(?Param(_,<id>))
rename      : Var(x) -> Var(y) where y := <RenameId> x
type-of     : Var(x) -> t where t := <TypeOf> x

rules // checking

check :
  Var(x) -> (<id>, $[Variable '[x]' not declared])
  where require(type-of)

check-args = 
  !(<call-of>, <declaration-of>); (check-arg-types <+ check-args-arity)

check-arg-types :
  ((f, e*), def) -> errors
  where errors := <zip; filter(check-arg); not(?[])> (e*, <param-types> def)
  
check-arg :
  (e, t) -> (e, $[Argument of type '[<pp>t]' expected (not of type '[<pp>t2]')])
  where t2 := <type-of> e
  where require(<eq>(t, t2))
  
check-args-arity :
  ((f, e*), def) -> [(f, $['[f]' expects [<int-to-string>l] arguments; [<int-to-string>k] provided])]
  with k := <length>e*
  with l := <param-types; length> def
  where require(<eq>(k, l))
 
rules // reference to variable declaration for reference resolving (not relevant for checking)

rename-res : 
  Param(x, t) -> <declare-var(|y)> Param(y, t)
  with y := <rename-var>(x, t)
 
declare-var(|x) : 
  decl -> decl 
  with rules( VariableDeclaration : x -> decl )

declaration-of : 
  Var(x) -> <VariableDeclaration> x