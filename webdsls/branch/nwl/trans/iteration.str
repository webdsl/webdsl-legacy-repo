module iteration

/*
imports include/nwl
imports templates
imports parameters
imports modules
imports entities
imports utils

rules // name resolution
       
  rename :
    ForElem(x, t, e1, elem1*) -> ForElem(y, t, e2, elem2*)
    with e2 := <rename-all> e1
    with {| RenameId 
          : y := <rename-var>(x, t)
          ; elem2* := <rename-all> elem1*
          |}
        
  rename :
    ForAllElem(x, t, elem1*) -> ForAllElem(y, t, elem2*)
    with {| RenameId 
          : y := <rename-var>(x, t)
          ; elem2* := <rename-all> elem1*
          |}
            
rules // checking
      
  check :
    ForElem(x, t, e, elem*) -> (e, $[[<pp>SetType(t)] expected])
    where t2 := <type-of> e
    where require(!t2 => SetType(t))
  
  check :
    ForElem(x, t, e, elem*) -> (t, $[Should be entity type])
    where require(<is-entity-type> t)
  
*/