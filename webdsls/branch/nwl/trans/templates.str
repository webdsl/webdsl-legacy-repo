module templates

imports include/nwl parameters expressions actions template-calls utils

rules // projection
 
  is-page-def = 
    ?TemplateDef([Page()],_,_,_)
    
  param-types : 
    TemplateDef(mod*, x, param*, elem*) -> <param-types> param*
    
  signature-of : 
    TemplateDef(mod*, x, param*, elem*) -> (x, <param-types>param*)
    
  declaration-of : 
    TemplateDef(mod*, x, param*, elem*) -> <signature-of; Template>

  declaration-of : 
    Navigate(ref, elems) -> <declaration-of> ref
    
  declaration-of : 
    TemplateRef(x, e*) -> <Template> x
   
  declaration-of :
    PageRef(r) -> <declaration-of> r
    
  call-of : 
    TemplateRef(x, e*) -> (x, e*)
    
  call-of :
    PageRef(r) -> <call-of> r

rules // name resolution 

  declare-def :
    def@TemplateDef(mod*, x, param*, elem*) -> TemplateDef(mod*, x, param*, elem*)
    with sig := <signature-of> def;
         rules(
           Template : x -> def
           Template : sig -> def
         )

  rename : 
    TemplateDef(mod*, x, param1*, elem1*) -> <declare-def> TemplateDef(mod*, x, param2*, elem3*)
    with {| RenameId//, RenameAction
          : param2* := <rename-all> param1*
          ; elem2*  := <alltd(rename)> elem1*
          ; elem3*  := <rename-all> elem2*
          |}
        
rules // checking 
  
  check :
    IfElement(e, elem1, elem2) -> (e, $[])
    where require(<type-of> e) 

  check :
    IfElement(e, elem1, elem2) -> (e, $[])
    where require(<type-of> e) 

  check :
    PageRef(TemplateRef(x, e*)) -> (x, $[Navigation to non-existing page])
    where require(declaration-of)
 
  check :
    PageRef(TemplateRef(x, e*)) -> [(x, $[Navigation to template '[x]' (not a page)])]
    where def := <declaration-of>
    where require(<is-page-def> def)
        
  check :
    TemplateRef(x, e*) -> <check-args> 
  
  check :
    def@TemplateDef(mod*, x, param*, elem*) -> (x, $[Multiple definitions for page '[x]'])
    where <is-page-def> def
    where require(<Template> x => def)
  
  check :
    def@TemplateDef(mod*, x, param*, elem*) -> (x, $[Multiple definitions for template with signature [sig]])
    where not(is-page-def)
    where require(<declaration-of> def => def)
    where sig := <signature-of;pp-sig> def
