module template-calls

imports include/nwl 
imports parameters 
imports expressions 
imports templates
imports utils
imports entities

rules // projection

  signature-of : 
    Call(TemplateRef(x, e*), elem*) -> (x, <map(type-of)> e*)

  call-of : 
    Call(TemplateRef(x, e*), elem*) -> (x, e*)

  declaration-of : 
    Call(TemplateRef(x, e*), elem*) -> <signature-of; Template>

  is-primitive-template =  
    ?"input" <+ ?"output" <+ ?"form"

rules // checking 
  
  is-lvalue = ?Var(_) <+ ?PropertyAccess(_,_)

  check :
    Call(TemplateRef("input", [e]), []) -> (e, $[Argument of input should be variable or property access])
    where require(<is-lvalue> e)
   
  check :
    Call(TemplateRef("output", [e]), []) -> (e, $[Navigation to undefined page '[n](x: [n])'])
    where t@SimpleType(n) := <type-of> e
    where <is-entity-type> t
    where not(<Template> ("output", [t]))
    where require(<Template> (<lower-case>n, [t]))

  check :
    TemplateRef(x, e*) -> (x, $[Template '[x]' is not defined])
    where not(<is-primitive-template> x)
    where require(<Template> x)

  check :
    TemplateRef(x, e*) -> (x, $[No definition for template with signature '[x]([<map(type-of);pp> e*])'])
    where not(<is-primitive-template> x)
    where <Template> x
    where require(declaration-of)
  
  constraint-warning :
    Call(TemplateRef(x, e*), elem*) -> [(x, $[Page definition is used as template])]
    where def := <declaration-of>
    where require(not(<is-page-def> def))

rules // pretty-print

  pp-sig : (x, t*) -> $[[x]([<pp>t*])]
          
rules // desugaring template calls
 
  check :
    Call(TemplateRef("form", [e*]), []) -> (e*, $[Form should not have arguments])
    where require(<length> e* => 0)
