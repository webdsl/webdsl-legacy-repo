module entities

rules // types
  
  declaration-of :
    SimpleType(x) -> <EntityDeclaration> x
 
  carrier-type =
    try(?SetType(<id>))
    
  is-entity-type =    
    where(SimpleType(EntityDeclaration))

  is-simple-type =
    is-primitive-type <+ is-entity-type
    
rules // pretty-printing types

  pp : SimpleType(x) -> x
  pp : SetType(t) -> $[Set<[<pp> t]>]
  pp : [] -> $[]
  pp : [t] -> <pp>t
  pp : [t1,t2|ts] -> $[[<pp>t1],[<pp>[t2|ts]]]
  
rules // declaring entities

  declare-def:
    ent@Entity(x, prop*) -> Entity(x, prop*)
    with rules( EntityDeclaration : x -> ent )

  name-of :
    Entity(x, prop*) -> x
    
  type-of :
    Entity(x, prop*) -> SimpleType(x)
 
rules // checking entity declarations and type expressions

  constraint-warning :
    Entity(x, _) -> (x, $[Entity names must start with a capital letter])
    where not(<explode-string; Hd; is-upper> x)
      
  check :
    ent@Entity(x, prop*) -> (x, $[Entity '[x]' defined more than once])
    where not(<EntityDeclaration> x => ent)
    
  check :
    SimpleType(x) -> (x, $[Type '[x]' is not defined])
    where not(is-simple-type)
    
  check :
    t@SetType(type) -> (t, $[Set should have entity type as argument])
    where <is-simple-type> type
    where not(<is-entity-type> type)