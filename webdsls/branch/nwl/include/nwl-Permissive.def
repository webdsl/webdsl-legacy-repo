definition

module Common
exports
  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR

  lexical syntax
    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
    ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}
    WATERTOKEN                     -> WATER               
    WATERTOKENSEPARATOR            -> WATER               

  lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  (

  sorts WATEREOF

  lexical restrictions
    WATEREOF -/- ~[]

  lexical syntax
    %% Lexical insertion recovery rules                                
    "\""                                           -> INSERTOPENQUOTE1 {recover}
    INSERTOPENQUOTE1 ~[\"\n]* "\n"                 -> STRING           {cons("INSERTEND")}
    INSERTOPENQUOTE1 ~[\"\n]* WATEREOF             -> STRING           {cons("INSERTEND")}
    "\""                                           -> INSERTOPENQUOTE0 {recover}
    INSERTOPENQUOTE0 StringChar* "\n"              -> STRING           {cons("INSERTEND")}
    INSERTOPENQUOTE0 StringChar* WATEREOF          -> STRING           {cons("INSERTEND")}
    "/*"                                           -> INSERTSTART0     {recover}
    INSERTSTART0 ( ~[\*] | CommentChar )* WATEREOF -> LAYOUT           {cons("INSERTEND")}
                                                   -> ">"              {recover, cons("INSERTION")}
                                                   -> ")"              {recover, cons("INSERTION")}
                                                   -> "}"              {recover, cons("INSERTION")}
                                                   -> ";"              {recover, cons("INSERTION")}
                                                   -> ","              {recover, cons("INSERTION")}

  syntax
    %% Kernel syntax insertion recovery rules   

  )

  (

  sorts ID INT STRING StringChar CommentChar

  lexical syntax
    [a-zA-Z] [a-zA-Z0-9\_]*            -> ID          
    "-"? [0-9]+                        -> INT         
    "\"" ~[\"\n]* "\""                 -> STRING      
    "\"" StringChar* "\""              -> STRING      
    ~[\"\n]                            -> StringChar  
    "\\\""                             -> StringChar  
    [\ \t\n\r]                         -> LAYOUT      
    [\*]                               -> CommentChar 
    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT      
    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT      
                                       -> EOF         

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    EOF -/- ~[]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

  )

module nwl
imports Common

exports
  context-free start-symbols
    Start

  sorts Definition

  context-free syntax
    "module" ID Definition* -> Start {cons("Module")}

  sorts Property Annotations

  context-free syntax
    "entity" ID "{" Property* "}" -> Definition  {cons("Entity")}
    ID ":" Type Annotations?      -> Property    {cons("Property")}
    "(" {Annotation ","}* ")"     -> Annotations {cons("Annotations")}
    "id"                          -> Annotation  {cons("Id")}
    "name"                        -> Annotation  {cons("Name")}
    "inverse" ":" ID              -> Annotation  {cons("Inverse")}

  sorts Type

  context-free syntax
    ID                 -> Type {cons("SimpleType")}
    "Set" "<" Type ">" -> Type {cons("SetType")}

  sorts Exp

  context-free syntax
    ID                            -> Exp {cons("Id")}
    Exp "." ID                    -> Exp {cons("GetProperty")}
    Exp "." ID "(" {Exp ","}* ")" -> Exp {cons("MethodCall")}
    ID "{" "}"                    -> Exp {cons("Constructor")}

  sorts LValue

  context-free syntax
    ID            -> LValue {cons("LValId")}
    LValue "." ID -> LValue {cons("LValProperty")}

  sorts Mod Arg

  context-free syntax
    "define" Mod* ID "(" {Param ","}* ")" "{" Element* "}" -> Definition {cons("TemplateDef")}
    "page"                                                 -> Mod        {cons("Page")}
    ID ":" Type                                            -> Param      {cons("Param")}

  sorts Element

  context-free syntax
    STRING                                              -> Element {cons("String")}
    ID                                                  -> Element {cons("Call")}
    ID "(" {Exp ","}* ")"                               -> Element {cons("CallArgs")}
    ID "{" Element* "}"                                 -> Element {cons("CallElems")}
    ID "(" {Exp ","}* ")" "{" Element* "}"              -> Element {cons("Call")}
    "for" "(" ID ":" Type "in" Exp ")" "{" Element* "}" -> Element {cons("ForElem")}
    "navigate" ID "(" {Exp ","}* ")" "{" Element* "}"   -> Element {cons("Navigate")}
    "input" "(" LValue ")"                              -> Element {cons("Input")}
    "input"                                             -> ID      {reject}
    "var" ID ":" Type ":=" Exp                          -> Element {cons("VarDeclElem")}
    "action" ID "(" {Param ","}* ")" "{" Statement* "}" -> Element {cons("Action")}
    "submit" ID "(" {Exp ","}* ")" "{" Element* "}"     -> Element {cons("Submit")}

  sorts Statement

  context-free syntax
    LValue ":=" Exp ";"                -> Statement {cons("Assign")}
    Exp ";"                            -> Statement {cons("ExpStat")}
    "return" ID "(" {Exp ","}* ")" ";" -> Statement {cons("ReturnPage")}