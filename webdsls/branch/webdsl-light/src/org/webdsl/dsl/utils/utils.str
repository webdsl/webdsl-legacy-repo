module org/webdsl/dsl/utils/utils

imports 
  libstrategolib 
  Java-15 
  libjava-front
  libstratego-gpp

imports
  org/webdsl/dsl/utils/xml-doc2abox
  
strategies

  get-namefield =
    oncetd(\ Property(name, k, type, annos) -> name where <fetch(?SimpleAnno("name"))> annos \; ?name ); !name
    <+ !"id"
 
  is-namefield =
    ?Property(name, k, type, annos)
    ; where( <fetch(?SimpleAnno("name"))> annos)
    
strategies

  filter-warn(s | msg) =
    filter(s <+ notice(|msg); fail)

  filter-concat-warn(s | msg) =
    filter(s; if not(is-list) then notice(|"should be a list: "); fail end <+ notice(|msg); fail); concat

strategies

  /* Create a nested directory structure. Works on a
     list containing the directories to be created,
     returns the path to the last (innermost) directory
     Current working directory remains unchanged.

     @type List(String) -> String
  */
  
  create-dirs = 
    where(root := <getcwd>) 
	; map((file-exists <+ mkdir(|"w")) ; chdir) 
	; getcwd // return path to innermost created dir.
    ; where (<chdir> root) // restore old cwd'
    
  capitalize-string =
    explode-string
    ; [to-upper | id]
    ; implode-string
    
  decapitalize-string =
    explode-string
    ; [to-lower | id]
    ; implode-string
    
rules
    
  qid-to-list(|xs) :
    Qualified(qid, x) -> <qid-to-list(|[x|xs])> qid
    
  qid-to-list(|xs) :
    x -> [x | xs]
    where <is-string> x
      
  qid-to-list = 
    qid-to-list(|[])
  
  qid-to-string =
    qid-to-list
    ; foldr(!"", \ (x,y) -> <concat-strings>[x, ".", y] \ )
    
  qid-to-package-name :
    qid -> PackageName(xs)
    where xs := <qid-to-list; map(!Id(<id>))> qid
        
signature
  constructors
    TextFile : String * CompilationUnit -> File

strategies

  text-file-to-file =
    ?TextFile(name, text)
    ; where(
	    file := <fopen> (name, "w")
	    ; <fputs> (text, file)
	    ; <fclose> file
	  )
    
signature
  constructors
    JavaFile : List(String) * CompilationUnit -> File

strategies

  java-file-to-file = 
    java-file-to-text-file
    ; text-file-to-file

  //java-file-to-text-file :
  //  JavaFile(prefix, pkg, name, cu) -> TextFile(filename, text)
  //  where path := <conc; create-dirs> (prefix, <qid-to-list> pkg)
  //    ; filename := <concat-strings> [path, "/", name, ".java"]
  //	    ; text := <core-lift-eblocks; pp-java5-to-string> cu
	    
  java-file-to-text-file :
    JavaFile(prefix, cu) -> TextFile(filename, text)
    where pkg := <package-name> cu
        ; name := <class-name> cu
        ; path := <conc; create-dirs> (prefix, pkg)
	    ; filename := <concat-strings> [path, "/", name, ".java"]
	    ; text := <core-lift-eblocks; pp-java5-to-string> cu
	  
	  
  // @todo what is first argument of PackageDec?
  
  package-name :
    CompilationUnit(Some(PackageDec(_, PackageName(ids))), _, _) -> xs
    where xs := <map(?Id(<id>))> ids
    
  package-name :
    CompilationUnit(None(), _, _) -> []
    
  class-name :
    CompilationUnit(_, _, [ClassDec(ClassDecHead(_,Id(x),_,_,_),_)|_]) -> x

  class-name :
    CompilationUnit(_, _, [InterfaceDec(InterfaceDecHead(_,Id(x),_,_),_)|_]) -> x
	  	 
signature
  constructors
    XmlFile : String * String * Document -> File

strategies

  xml-file-to-file =
    xml-file-to-text-file
    ; try(text-file-to-file)
    
  xml-file-to-text-file : 
    XmlFile(pkg, name, doc) -> TextFile(filename, text)
    where path := <create-dirs> pkg
	    ; filename := <concat-strings> [path, "/", name]
	    ; text := <xml-doc2abox; box2text-string(|80) <+ write-to-string> doc
	    
	    
	    