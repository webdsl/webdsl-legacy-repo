/**

 Access control for WebDSL

*/

module org/webdsl/dsl/transformation/access-control-declarations

imports
  libstrategolib

imports
  libwebdsl-front
  org/webdsl/dsl/transformation/-
rules

  declare-definition =
    ?webdsl|[ access control policy pexp ]|
  ; rules(AC-Policy-Expression := pexp)

  declare-definition:
    AccessControlDefinition(name,defs) -> AccessControlDefinition(name,defs)
    where rules (
            Security-Check-Types := 
            [
             ["page"]
            ,["action"]
            ,["page" , "action"]
            ,["template"]
            //,["page","template"]
            ,["template","action"]
            //,["template","template"]
            //,["function"]
           // ,["pointcut"]
            ]
          )
        ; <alltd(declare-definition)> defs // declare-definition is done with alltd, which doesn't go into the tree after a match, explicitly search deeper
        
  // declare-ac-principal :
  //  AccessControlPrincipal(ident,props) -> AccessControlPrincipal(ident,props)
  //nothing to declare, gets translated to securityContext which should be declared
 
 // declare-ac-rule = 
 //   ?AccessControlRule(_,_,_,_,_)
    
  declare-definition:
    AccessControlPointcut(pname,fa,elems) -> AccessControlPointcut(pname,fa,elems) 
    where 
         {| pointcut-formal-argument :
             <filter(\ ar@Arg(ident,thesort)->ar where rules (pointcut-formal-argument : ident -> ar) \)> fa
           ; <filter(declare-ac-pointcut-element(|pname,fa))> elems
          |}  

          
  declare-ac-pointcut-element(|pname,fa):
    AccessControlPointcutElement(ident,matchident,faidents,wc) -> AccessControlPointcutElement(ident,matchident,faidents,wc)
    where faidentsargs := MatchArgs(<map(pointcut-formal-argument)> faidents,wc)
        ; newPointcutList := <concat> [<AccessControlPointcuts<+![]> (pname,fa),[(ident,matchident,faidentsargs)]]
        ; rules(
            AccessControlPointcuts: (pname,fa) -> newPointcutList
            is-access-control-pointcut: (pname,fa)
          )   

          
  // uses: declare-global-funcs = ?fu@Function(f, args, s, b) ...
  declare-definition:
    p@Predicate(f,args,b) -> p//<declare-global-funcs> Function(f, args, SimpleSort("Bool"), b)
    where rules (IsPredicate : (f,args)
                 IsPredicate : f ) //TODO remove need for this one
                        