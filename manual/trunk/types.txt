Types in WebDSL
===============

**String**  
Represents a string of characters. Example:
<verbatim>var s : String := "Hello world";</verbatim>

**Int**  
Represents an integer number. Example:
<verbatim>var i : Int := 3;</verbatim>


**Float**  
Represents a floating number. Example:
<verbatim>var f : Float := 3.5;</verbatim>

**Boolean**  
Represents a truth. Either <tt>true</tt> or <tt>false</tt>. Example:
<verbatim>var b : Boolean := true;</verbatim>

**Secret**
Represents a secret string (usually a password). Has two methods:

* <tt>secretVar.check(digest)</tt> checks the <tt>secretVar</tt>
  password against the digest version contained in <tt>digest</tt>.
* <tt>secretVar.digest()</tt> generates a digest version of the
  clear-text password contained in <tt>secretVar</tt>.

Example:
<verbatim>if (user.password.check(password)) {
  securityContext.principal := us;
  securityContext.loggedIn := true;
}</verbatim>


**Email**  
Represents an e-mail address as a string.

**Text**  
A longer string, in the UI represented as a text area and as
outputed as formatted output.

**WikiText**  

Wiki text represented as an extension of Text. The format of wiki text is based on
[MarkDown](http://daringfireball.net/projects/markdown/), with two
extensions:

* Wiki links: [ [page(MainPage)]] where "page" is the name of the page
  to link to and "MainPage" is the id of the first parameter. If no
  parameters are passed, simply [ [page] ] is also allowed. A wiki link
  can be given a different name like so: <tt>[ [page(Mainpage)|the main
  page]]</tt>.
* Verbatim tag: < verbatim>Verbatim code< /verbatim>.

**Date**  

Represents a date (not including a time). When *input* is used with a
date type, a calendar widget will appear. Dates can be used as
literals using the <tt>Date</tt> constructor:
<verbatim>var d : Date := Date("22/06/1983");</verbatim>

**Time**  

Represents a time (not including a date). Time literals can be
expressed using a <tt>Time</tt> constructor. Example:
<verbatim>var t : Time := Time("22:08");</verbatim>

**DateTime** 

Represents both a date and a time. DateTime literals can be expressed
using a <tt>DateTime</tt> constructor. Example:

<verbatim>var dt : DateTime := DateTime("22/06/1983 22:08", "dd/MM/yyyy H:mm");</verbatim>

The second parameter is optional and can also be used for *Date* and
*Time* types, it represents the date/time formatting string.

**Patch**  

Represents a patch. Has two methods:

* <tt>patch.applyPatch(objectString)</tt> applies <tt>patch</tt> to <tt>objectString</tt>
* <tt>str.makePatch(originalString)</tt> creates a patch from a
  variable of String-compatible type <tt>str</tt>, by comparing it to
  <tt>originalString</tt>.

**Image**  

Represents an (uploaded) image.

**File**  

Represents an (uploaded) file.

**URL**  

Represents a link.

**Set**  

Represents a collection of items of a certain type. Example

<verbatim>var s : Set<Int> := {1, 2, 3, 4};</verbatim>

Fields:

* <tt>s.length</tt> gives the number of items in this set.

**List**  
Represents an ordered list of items of a certain type. Example:

<verbatim>var l : List<Int> := [1, 2, 3, 4];</verbatim>

Fields:

* <tt>l.length</tt> gives the number of items in this list.
