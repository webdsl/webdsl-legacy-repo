module create-parse-controller

imports
  libstratego-lib
  libstratego-xtc
  sdf-options
  rtg
  
  io
  debug

strategies
  
  get-parse-controller-name =
    <conc-strings> (<get-main-class-name>, "ParseController")

  create-parse-controller =
    x_Name    := <get-parse-controller-name>;
    x_Factory := <get-ast-factory-name>;
    table     := <get-sdf-main-module>;
  
    <output-java-file> |[
      package parser;

      import java.io.IOException;      
      import org.spoofax.jsglr.InvalidParseTableException;
      import org.strategoxt.imp.runtime.parser.SGLRParseController;
      import org.strategoxt.imp.runtime.parser.tokens.SGLRTokenKindManager;
      import parser.ast.x_Factory;
      
      public class x_Name extends SGLRParseController {
        private static final String GRAMMAR = "~table";
        private static final String TABLE = "/syntax/" + GRAMMAR + ".tbl";
        
        public x_Name() throws IOException, InvalidParseTableException {          
          // TODO2: Grammar-specific token kind manager?
          
          super(new x_Factory(), new SGLRTokenKindManager(), null);
        }
        
        @Override
        public String getLanguageName() {
          return GRAMMAR;
        }
        
        @Override
        protected InputStream openParseTable() {
          return x_Name.class.getResourceAsStream(TABLE);
        }
        
        @Override
        public String getSingleLineCommentPrefix() { // TODO2: Produce single-line comment prefix for grammar?
          return super.getSingleLineCommentPrefix();
        }
        
        /* UNDONE: Using covariance here is cheaper than the immense signature explosion caused by full generics
        @Override 
        public x_Node parse(String input, boolean scanOnly, IProgressMonitor monitor) {
          return (x_Node) super.parse(input, scanOnly, monitor);
        }
        */
      }
    ]|