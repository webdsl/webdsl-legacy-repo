module io

strategies
  
  output-file =
    where(
      path := <create-dirs> <package-name>
    );
    
    output-java-file(|<conc-strings> (path, "/", <class-name>, ".java"))
  
  // TODO2: Add @Generated attribute to files
  // import javax.annotation.Generated;
  // @Generated("sdf2imp")

  output-java-file(|filename) =
    verbose-msg(!"Outputting", <conc-strings> (
                                 <package-name; separate-by(|"."); concat-strings>
                               , ".", <class-name>
                               ));
    
    risky(
      text := <pp-java-string>
    | "Illegal Java output"
    );
    
    file := <fopen> (filename, "w");
    <fputs> (text, file);
    <fclose> file
  
  create-dirs = 
    where(root := <getcwd>) 
    ; map((file-exists <+ mkdir(|"w")) ; chdir) 
    ; getcwd // return path to innermost created dir.
    ; where (<chdir> root)     
  
  package-name:
    CompilationUnit(Some(PackageDec(_, PackageName(ids))), _, _) -> xs
    where xs := <map(?Id(<id>))> ids
    
  package-name:
    CompilationUnit(None(), _, _) -> []
    
  class-name =
    ?CompilationUnit(_, _, [ClassDec(ClassDecHead(_,Id(<id>),_,_,_),_)|_])
  <+
    ?CompilationUnit(_, _, [InterfaceDec(InterfaceDecHead(_,Id(<id>),_,_),_)|_])
