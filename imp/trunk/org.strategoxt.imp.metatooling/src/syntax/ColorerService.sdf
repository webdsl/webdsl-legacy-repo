module ColorerService

imports
  Common

exports

  sorts
  
    Section ColorRule Font Color MaybeColor NoColor
    TokenKind TokenKindName AttributeId Attribute AttributeRef

  syntax
  
    "colorer" <SectionName-LEX> <LAYOUT?-CF> <ColorRule*-CF> -> <Section-CF> {cons("Colorer")}
    
    "colorer" -> <ReservedName-CF>

  context-free syntax
  
    "environment" ColorNode ":" Attribute -> ColorRule {cons("ColorRuleAll")} %% One rule to rule them all
                  ColorNode ":" Attribute -> ColorRule {cons("ColorRule")}
    
    "environment" ColorNode ":" AttributeRef "=" Attribute -> ColorRule {cons("ColorRuleAllNamed")}
                  ColorNode ":" AttributeRef "=" Attribute -> ColorRule {cons("ColorRuleNamed")}

    Color   MaybeColor Font -> Attribute {cons("Attribute")}
    NoColor NoColor    Font -> Attribute {cons("Attribute")}
    AttributeId             -> Attribute {cons("AttributeRef")}
    
    Node          -> ColorNode
    TokenKindName -> ColorNode {cons("Token"), prefer}
    
    "identifier" -> TokenKindName {cons("TK_IDENTIFIER")}
    "number"     -> TokenKindName {cons("TK_NUMBER")}
    "layout"     -> TokenKindName {cons("TK_LAYOUT")}
    "string"     -> TokenKindName {cons("TK_STRING")}
    "keyword"    -> TokenKindName {cons("TK_KEYWORD")}
    "operator"   -> TokenKindName {cons("TK_OPERATOR")}
    "var"        -> TokenKindName {cons("TK_VAR")}
    "junk"       -> TokenKindName {cons("TK_JUNK")}
    "unknown"    -> TokenKindName {cons("TK_UNKNOWN")}
    
              -> Font {cons("NORMAL")}
    "bold"    -> Font {cons("BOLD")}
    "italic"  -> Font {cons("ITALIC")}

    %% TODO: Default "font" attribute? (would need disambiguation and merging support)
    %%
    %% "_" -> Font {cons("NORMAL")}
    
    "_"         -> Color {cons("ColorDefault")}
    Int Int Int -> Color {cons("ColorRGB")}
                -> NoColor {cons("ColorDefault")}
    Color       -> MaybeColor
    NoColor     -> MaybeColor

    AttributeId "=" Attribute -> ColorRule {cons("ColorDef")}
    
    Id             -> AttributeId          %% Standard color name (e.g., 'red')
    String         -> AttributeId          %% Descriptive color name (could be show in IDE)
    "_"            -> AttributeId {reject}
    Font           -> AttributeId {reject}
    "environment"  -> AttributeId {reject}
