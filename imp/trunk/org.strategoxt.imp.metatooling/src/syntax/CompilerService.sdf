module CompilerService

imports
  Common LanguageDescription

exports

  sorts
    Section CompilerRule StrategoId StrategoCall ReferenceNode

  syntax
  
    %% TODO: first-class treatment for these sections
  
    "compiler" <SectionName-LEX> <LAYOUT?-CF> <CompilerRule*-CF> -> <Section-CF> {cons("Compiler")}
    "analysis" <SectionName-LEX> <LAYOUT?-CF> <CompilerRule*-CF> -> <Section-CF> {cons("Compiler")}
    "occurrences" <SectionName-LEX> <LAYOUT?-CF> <CompilerRule*-CF> -> <Section-CF> {cons("Compiler")}
    "references" <SectionName-LEX> <LAYOUT?-CF> <CompilerRule*-CF> -> <Section-CF> {cons("Compiler")}

    "analysis" -> <ReservedName-CF>
    "compiler" -> <ReservedName-CF>
    "occurrences" -> <ReservedName-CF>
    "references" -> <ReservedName-CF>
    
    %% TODO: occurrence highlighting

  lexical syntax

    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* -> StrategoId
  
    ConstructorId -> ReferenceNode
    "_"           -> ReferenceNode

  context-free syntax
  
    "reference" ReferenceNode ":" StrategoCall StrategoCall -> CompilerRule {cons("ReferenceRule")}
%%  "reference" "*"           ":" StrategoCall StrategoCall -> CompilerRule {cons("AllReferenceRule")}

    "provider" PropertyValue     -> CompilerRule {cons("CompilerProvider")}
    
    "observer" ":" PropertyValue -> CompilerRule {cons("CompilerObserver")}

             StrategoId -> StrategoCall {cons("Strategy")}
    "id" "." StrategoId -> StrategoCall {cons("Attribute")}
