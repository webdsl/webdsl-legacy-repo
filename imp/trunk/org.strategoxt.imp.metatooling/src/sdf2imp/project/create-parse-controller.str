module sdf2imp/project/create-parse-controller

imports
  libstratego-lib
  libstratego-xtc
  sdf-options
  
  sdf2imp/lib/RTG
    
  sdf2imp/util/-

strategies
  
  get-parse-controller-name =
    <conc-strings> (<get-main-class-name>, "ParseController")

  create-parse-controller =
    x_name  := <get-parse-controller-name>;
    pkgname := <get-package-name>;
    table   := <get-sdf-main-module>;
    
    <output-java-file> |[
      package pkgname;

      import java.io.InputStream;
      import java.io.IOException;
      import org.eclipse.imp.parser.IParseController;
      import org.strategoxt.imp.runtime.Environment;
      import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
      import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
      import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
      import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
      
      public class x_name extends DynamicParseController {
        private static final String LANGUAGE = "~table";

        private static final String TABLE = "/include/" + LANGUAGE + ".tbl";

        private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";

        private static boolean registered;
        
        @Override
        public IParseController getWrapped() { 
          if (!registered) { 
            registered = true;
            try {
              InputStream descriptorStream = x_name.class.getResourceAsStream(DESCRIPTOR);
              InputStream table = x_name.class.getResourceAsStream(TABLE);

              if (descriptorStream == null)
                throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin)");

              if (table == null)
                throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin)");

              Descriptor descriptor = DescriptorFactory.load(descriptorStream, table, null);
              initialize(descriptor.getLanguage());
            } catch (BadDescriptorException exc) {
              setNotLoadingCause(exc);
              Environment.logException("Bad descriptor for " + LANGUAGE, exc);
              throw new RuntimeException("Bad descriptor for " + LANGUAGE, exc);
            } catch (IOException exc) {
              setNotLoadingCause(exc);
              Environment.logException("I/O problem loading descriptor for " + LANGUAGE, exc);
              throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE, exc);
            }
          }
          return super.getWrapped();
        }
      }
    ]|
