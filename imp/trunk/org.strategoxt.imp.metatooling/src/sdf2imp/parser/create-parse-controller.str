module sdf2imp/parser/create-parse-controller

imports
  libstratego-lib
  libstratego-xtc
  sdf-options
  
  sdf2imp/lib/RTG
    
  sdf2imp/util/-

strategies
  
  get-parse-controller-name =
    <conc-strings> (<get-main-class-name>, "ParseController")

  create-parse-controller =
    x_Name    := <get-parse-controller-name>;
    table     := <get-sdf-main-module>;
    
    <output-java-file> |[
      package parser;

      import java.io.IOException;      
      import org.eclipse.core.runtime.IPath;
      import org.spoofax.jsglr.ParseTable;
      import org.spoofax.jsglr.InvalidParseTableException;
      import org.strategoxt.imp.runtime.Environment;
      import org.strategoxt.imp.runtime.parser.SGLRParseController;
      
      public class x_Name extends SGLRParseController {
        private static final String GRAMMAR = "~table";
        private static final String TABLE = "/syntax/" + GRAMMAR + ".tbl";
        private static final String START_SYMBOL = "~<StartSymbol>";
      
        static {
          try {
            Environment.registerParseTable(GRAMMAR, x_Name.class.getResourceAsStream(TABLE));
            
            // TODO: Load all parse tables associated with this file extension         
          } catch (IOException exc) {
            throw new RuntimeException(exc);
          } catch (InvalidParseTableException exc) {
            throw new RuntimeException(exc);
          }
        }
        
        public x_Name() throws IOException, InvalidParseTableException {          
          super(START_SYMBOL);
        }
        
        @Override
        public String getActiveGrammarName() {
          return GRAMMAR;
        }
        
        @Override
        public ParseTable selectParseTable(IPath path) {
          // TODO: Run-time selection of a parse table, e.g., by use of .meta files
          return Environment.getParseTable(GRAMMAR);
        }
      }
    ]|
