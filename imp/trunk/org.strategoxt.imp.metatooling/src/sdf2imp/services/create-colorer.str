module sdf2imp/services/create-colorer

imports
  libstratego-lib
  
  sdf2imp/util/-
  sdf2imp/services/common

strategies

  // TODO: Read colorer descriptor
  read-colorer =
    <input-descriptor-file> "Colorer";
    
    collect-all(?Colorer(<id>));
    
    concat
  
  // "all" rules override any existing coloring style
  descriptor-rule-to-java:
    RuleAll(condition, color, bgcolor, font) ->
    |[ if (e_Condition) result = mergeStyles(x_Style, result); ]|
    where
      e_Condition := <condition-to-java> condition;
      x_Style     := <create-style(|color, bgcolor, font)>
  
  // regular rules just set a new coloring style if none applicable yet
  descriptor-rule-to-java:
    Rule(condition, color, bgcolor, font) ->
    |[ if (result == null && e_Condition) result = x_Style; ]|
    where
      e_Condition := <condition-to-java> condition;
      x_Style := <create-style(|color, bgcolor, font)>

  create-style(|color, bgcolor, font) =
    e_Color     := <color-to-java> color;
    e_BGColor   := <color-to-java> bgcolor;
    e_Font      := <font-to-java> font;
    x_Style     := <newname> "style";
    
    rules(
      TokenStyles :+= |[
        private TextAttribute x_Style =
          new TextAttribute(e_Color, e_BGColor, e_Font);
      ]|
    )
  
  color-to-java:
    ColorName(x) -> |[ display.getSystemColor(SWT.x_Name) ]|
    where
      x_Name := <conc-strings> ("COLOR_", <write-to-string> x)
  
  color-to-java:
    ColorDefault() -> |[ null ]|
    
  color-to-java:
    ColorRGB(r,g,b) -> |[ new Color(display, ~i:r, ~i:g, ~i:b) ]|
  
  font-to-java:
    x -> |[ SWT.x_Name ]|
    where x_Name := <write-to-string> x

  create-colorer =
    x_Name  := <conc-strings> (<get-main-class-name>, "TokenColorer");
    pkgname := <get-package-name(|["tokenColorer"])>;
    
    {| TokenStyles:
      read-colorer;
      ifs   := <map(risky(descriptor-rule-to-java |"Rule not supported"))>;
      decls := <bagof-TokenStyles>
    |};
    
    <output-java-file> |[
      package pkgname;
      
      import org.eclipse.imp.parser.IParseController;
      import org.eclipse.imp.services.ITokenColorer;
      import org.eclipse.imp.services.base.TokenColorerBase;
      import org.eclipse.jface.text.TextAttribute;
      import org.eclipse.swt.SWT;
      import org.eclipse.swt.widgets.Display;
      import org.eclipse.swt.graphics.Color;
      
      import org.strategoxt.imp.runtime.parser.ast.AstNode;
      import org.strategoxt.imp.runtime.parser.tokens.SGLRToken;
      import static org.strategoxt.imp.runtime.parser.tokens.SGLRParsersym.*;
      
      import lpg.runtime.IToken;
      
      public class x_Name extends TokenColorerBase implements ITokenColorer {
        private Display display = Display.getDefault();
        
        ~*decls
      
        public TextAttribute getColoring(IParseController controller, IToken token) {
          TextAttribute result = null;
          AstNode node = ((SGLRToken) token).getAstNode();
          int tokenKind = token.getKind();
          
          // TODO2: Optimize - color selection loop
          do {
            String sort = node == null ? null : node.getSort();
            String constructor = node == null ? null :node.getConstructor();
            
            ~*ifs
            
            if (node != null) node = node.getParent();
            
          } while (node != null);
          
          if (result != null) return result;

          return super.getColoring(controller, token);
        }
        
        // TODO: Allow overriding of colors and text attributes?
        private TextAttribute mergeStyles(TextAttribute master, TextAttribute slave) {
          if (slave == null)
            return master;
          
          Color fg = master.getForeground();
          Color bg = master.getBackground();
          
          if (fg == null || bg == null) {
            return new TextAttribute(
              fg == null ? slave.getForeGround() : fg,
              bg == null ? slave.getBackground : bg,
              master.getStyle()
            );
          }
        }        
      }
  ]|
