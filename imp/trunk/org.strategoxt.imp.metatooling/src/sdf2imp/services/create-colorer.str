module sdf2imp/services/create-colorer

imports
  libstratego-lib
  
  sdf2imp/util/-

strategies

  // TODO: Read colorer descriptor
  read-colorer =
    <input-descriptor-file> "Colorer";
    
    collect-all(?Colorer(<id>));
    concat
  
  descriptor-rule-to-java:
    Rule(condition, color, bgcolor, font) ->
    |[ if (e_Condition) return x_Style; ]|
    where x_Style     := <newname> "style";
          e_Condition := <condition-to-java> condition;
          e_Color     := <color-to-java> color;
          e_BGColor   := <color-to-java> bgcolor;
          e_Font      := <font-to-java> font;
          
          rules(
            TokenStyles :+= |[
              TextAttribute x_Style =
                new TextAttribute(e_Color, e_BGColor, e_Font);
            ]|
          )
  
  condition-to-java: // TODO: sort/c'tor conditions
    Token(x) ->
    |[ tokenKind == x_Name ]|
    where x_Name := <write-to-string> x
  
  color-to-java = id // TODO
  
  font-to-java = id // TODO

  create-colorer =
    x_Name  := <conc-strings> (<get-main-class-name>, "TokenColorer");
    pkgname := <get-package-name(|["tokenColorer"])>;
    
    {| TokenStyles:
      read-colorer;
      ifs   := <map(risky(descriptor-rule-to-java |"Rule not supported"))>;
      decls := <bagof-TokenStyles>
    |};
    
    <output-java-file> |[
      package pkgname;
      
      import org.eclipse.imp.parser.IParseController;
      import org.eclipse.imp.services.ITokenColorer;
      import org.eclipse.imp.services.base.TokenColorerBase;
      import org.eclipse.jface.text.TextAttribute;
      import org.eclipse.swt.SWT;
      import org.eclipse.swt.widgets.Display;
      import org.eclipse.swt.graphics.Color;
      
      import static org.strategoxt.imp.runtime.parser.tokens.SGLRParsersym.*;
      
      import lpg.runtime.IToken;
      
      public class x_Name extends TokenColorerBase implements ITokenColorer {
        ~*decls
      
        public TextAttribute getColoring(IParseController controller, IToken token) {
          ~*ifs
      
          // Default:
          return super.getColoring(controller, token);
        }
        
        /*
        public x_Name() {
          Display display = Display.getDefault();
          commentAttribute = new TextAttribute(
              new Color(display, 0x60, 0x60, 0), null, SWT.ITALIC);
          stringAttribute = new TextAttribute(display
              .getSystemColor(SWT.COLOR_BLUE), null, SWT.NORMAL);
          identifierAttribute = new TextAttribute(display
              .getSystemColor(SWT.COLOR_BLACK), null, SWT.NORMAL);
          doubleAttribute = new TextAttribute(display
              .getSystemColor(SWT.COLOR_DARK_GREEN), null, SWT.NORMAL);
          numberAttribute = new TextAttribute(display
              .getSystemColor(SWT.COLOR_DARK_GREEN), null, SWT.NORMAL);
          keywordAttribute = new TextAttribute(display
              .getSystemColor(SWT.COLOR_DARK_MAGENTA), null, SWT.BOLD);
          operatorAttribute = new TextAttribute(
              new Color(display, 0, 0xA0, 0x70), null, SWT.NORMAL);
          varAttribute = new TextAttribute(display
              .getSystemColor(SWT.COLOR_MAGENTA), null, SWT.BOLD);
        }
        */      
      }
  ]|
