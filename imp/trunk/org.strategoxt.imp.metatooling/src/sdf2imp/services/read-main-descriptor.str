module sdf2imp/services/read-main-descriptor

imports
  libstratego-lib
  
  sdf2imp/util/-

strategies

  read-main-descriptor =
    current-main-descriptor-file;
    
    rules(MainDescriptor := <id>);
    
    require-option(
      where(<set-config> (SdfMainModuleFlag(), <find-main-module>));
      with(get-sdf-main-module)
    | <NoExistingDescriptor < !"Main module (-m)" + !"language name">
    );
    
    require-option(
      rules(StartSymbol := <find-start-symbol>)
    | <NoExistingDescriptor < !"Start symbols (-s)" + !"language start symbols">
    );
    
    require-option(
     rules(BasePackage := <find-package-name>)
    | <NoExistingDescriptor < !"Package name (-p)" + !"language id">
    );
    
    require-option(
      rules(EditorExtensions := <find-editor-extensions>)
    | <NoExistingDescriptor < !"Editor file extensions (-e)" + !"language extensions">
    )
  
  current-main-descriptor-file =
     {| InputDirPrefix, OnImportFailure:
       <add-input-dir-prefix> <SrcDir <+ !"src/">;
       rules(
         OnImportFailure:
           Import(m) -> Module("", NoImports(), [])
           where
             if <eq> (<main-descriptor-name>, m) then
               fail
             end
       );
       
       verbosity-scope(
         main-descriptor-name;
         input-descriptor-file
       | -1
       );
       verbose-msg(!"Existing descriptor determines generated services:", main-descriptor-name)
     |}
     ; where(<debug(!"reading of  ")> <main-descriptor-name>)
   <+
     where(<debug(!"no reading of  ")> <main-descriptor-name>);
     // Could not read the existing file: use the defaults instead, but don't overwrite the file
     rules(NoExistingDescriptor: _);
     default-main-descriptor

  find-main-module =
    oncetd(?LanguageName(result));
    verbose-msg(!"Using main module", !result);
    !result

  find-start-symbol =
    oncetd(?StartSymbols(Values([result])));
    verbose-msg(!"Using start symbol", !result);
    !result

  find-editor-extensions =
    oncetd(?Extensions(Values(results)));
    result := <separate-by(|","); concat-strings> results;
    verbose-msg(!"Using file extensions", !result);
    !result

  find-package-name =
    with(
      oncetd(?LanguageId(result))
    <+
      default-package-name => result
    );
    verbose-msg(!"Using package name", !result);
    !result

  verbosity-scope(s|level) = 
    with( 
      oldlevel := <verbosity>;
      <set-verbosity> level
    );
    finally(
      s
    , <set-verbosity> oldlevel
    )
