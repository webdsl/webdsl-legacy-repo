module sdf2imp/services/create-outliner

imports
  libstratego-lib
  
  sdf2imp/util/-
  sdf2imp/services/common

strategies

  read-outliner =
    <input-descriptor-file> "Outliner";
    
    collect-all(?Outliner(<id>));
    
    concat

  // TODO: Read outliner descriptor
  
  create-outliner = id

  /* UNDONE: Direct output of Java file
  rtg-to-outliner =
    heuristic-outline-and-folding-sorts;
    sorts-to-outliner
  
  sorts-to-outliner =
    visitmethods := <mapconcat(create-outline-methods)>;
    sdfmodule    := <get-sdf-main-module>;
    x_Name       := <conc-strings> (<get-main-class-name>, "Outliner");
    
    <output-java-file> |[
      package outliner;
    
      import parser.ast.*;
      
      public class x_Name extends org.eclipse.imp.services.base.OutlinerBase {
      
        private final class OutlineVisitor extends AbstractVisitor {
          public OutlineVisitor() {
            pushTopItem("~sdfmodule" + " program", null);
          }
          
          public void unimplementedVisitor(java.lang.String n) {
            // Could be used for debugging purposes.
          }
        
          ~*visitmethods
        }
  
        protected void sendVisitorToAST(Object node) {
          ASTNode root = (ASTNode) node;
          root.accept(new OutlineVisitor());
        }
      }
    ]|
  
  create-outline-methods:
    x_Type ->
    class-body-dec* |[
      public boolean visit(x_Type n) {
        if (n.getChildren().size() > 0) {
          Object descriptor = n.getChildren().get(0);
          
          java.lang.String text = descriptor.toString();
          pushSubItem(text, n);
        }
        return true;
      }
      
      public void endVisit(x_Type n) {
        if (n.getChildren().size() > 0) {
          popSubItem();
        }
      }
    ]|
  */
