module sdf2imp/services/create-main-descriptor

imports
  libstratego-lib
  
  sdf2imp/util/-

strategies

  create-analyze-main-descriptor =
    output-default-descriptor-file(
      main-descriptor-name
    , 
      default-main-descriptor => main-descriptor
    );
    
    // Store the main descriptor in a rule for further reference
    
    if not(!main-descriptor) then
      main-descriptor := <current-main-descriptor-file>
    end;
    
    rules(MainDescriptor := main-descriptor)

  default-main-descriptor =
    name        := <get-sdf-main-module>;
    classname   := <get-main-class-name>;
    pkgname     := <BasePackage>;
    extensions  := <EditorExtensions>;
    parsetable  := <parse-table-target>;
    startsymbol := <StartSymbol>;
    !|[
      module <main-descriptor-name>
      
      imports <descriptor-name> "-Colorer.generated"
              <descriptor-name> "-Outliner.generated"
              <descriptor-name> "-Folding.generated"
      
      language
      
        name ~name
        description <conc-strings> ("\"sdf2imp-generated editor for the ", name, " language\"")
        url http://strategoxt.org
        ~
        id ~pkgname
        extends
        aliases
        ~
        extensions ~extensions
        table ~parsetable
        start symbol ~startsymbol
    ]|
  
  current-main-descriptor-file =
     {| InputDirPrefix, OnImportFailure:
       <add-input-dir-prefix> "src/";
       rules(
         OnImportFailure := Module("", NoImports(), [])
       );
       
       verbosity-scope(
         main-descriptor-name;
         input-descriptor-file
       | -1
       );
       verbose-msg(!"Current descriptor determines generated services")
     |}
   <+
     default-main-descriptor

  verbosity-scope(s|level) = 
    with( 
      oldlevel := <verbosity>;
      <set-verbosity> level
    );
    s;
    with(<set-verbosity> oldlevel)
