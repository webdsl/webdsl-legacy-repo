module sdf2imp/services/create-main-descriptor

imports
  libstratego-lib
  
  sdf2imp/util/-

strategies

  create-analyze-main-descriptor =
    output-default-descriptor-file(
      main-descriptor-name
    , 
      default-main-descriptor => main-descriptor
    );
    
    // Store the main descriptor in a rule for further reference
    
    if not(!main-descriptor) then
      main-descriptor := <current-main-descriptor-file>;
      require-option(
        <set-config> (SdfMainModuleFlag(), <find-main-module>)
      |"Main module (-m)"
      );
      require-option(
        rules(StartSymbol := <find-start-symbol>)
      |"Main module (-m)"
      );
      require-option(
        rules(BasePackage := <find-package-name>)
      |"Package name (-p)"
      )
    end;
    
    rules(MainDescriptor := main-descriptor)

  default-main-descriptor =
    name        := <get-sdf-main-module>;
    classname   := <get-main-class-name>;
    pkgname     := <BasePackage <+ default-package-name>;
    extensions  := <require-option(EditorExtensions |"File extensions (-e)")>;
    parsetable  := <parse-table-target>;
    startsymbol := <StartSymbol <+ !NoStartSymbol()>;
    
    !|[
      module <main-descriptor-name>
      
      imports <descriptor-name> "-Colorer.generated"
              <descriptor-name> "-Folding.generated"
              <descriptor-name> "-Outliner.generated"
              <descriptor-name> "-References.generated"
              <descriptor-name> "-Syntax.generated"
      
      language General properties
        ~
        name: ~name
        aliases:
        id: ~pkgname
        ~
        description: <conc-strings> ("\"sdf2imp-generated editor for the ", name, " language\"")
        url: http://strategoxt.org
        ~
        extensions: ~extensions
        table:  ~parsetable
        start symbol: ~startsymbol
        ~
      language Syntax properties (defaults)
        ~
        // TODO: Infer syntax properties from the SDF .def file
        line comment: "//"
        block comment: "/*" * "*/"
        fences: [  ]
                (  )
                {  }
                |[ ]|
                <? ?> //"
    ]|
  
  current-main-descriptor-file =
     {| InputDirPrefix, OnImportFailure:
       <add-input-dir-prefix> "src/";
       rules(
         OnImportFailure := Module("", NoImports(), [])
       );
       
       verbosity-scope(
         main-descriptor-name;
         input-descriptor-file
       | -1
       );
       verbose-msg(!"Current descriptor determines generated services")
     |}
   <+
     default-main-descriptor

  find-main-module =
    oncetd(?LanguageName(result));
    verbose-msg(!"Using main module ", !result);
    !result

  find-start-symbol =
    oncetd(?StartSymbol(result));
    verbose-msg(!"Using start symbol ", !result);
    !result

  find-package-name =
    with(
      oncetd(?LanguageId(result))
    <+
      default-package-name => result
    );
    verbose-msg(!"Using package name ", !result);
    !result

  verbosity-scope(s|level) = 
    with( 
      oldlevel := <verbosity>;
      <set-verbosity> level
    );
    s;
    with(<set-verbosity> oldlevel)
