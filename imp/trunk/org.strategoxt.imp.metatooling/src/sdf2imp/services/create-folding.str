module sdf2imp/services/create-folding

imports
  libstratego-lib
  
  sdf2imp/util/-
  sdf2imp/services/common

overlays

  tname_FOLDINGHELPER = tname |[ org.strategoxt.imp.runtime.services.FoldingHelper ]|
  tname_FOLDINGBASE   = tname |[ org.eclipse.imp.services.base.FolderBase ]|

strategies

  // TODO: Read folding descriptor

  create-folding = id

  /* UNDONE: Direct output of Java file
  rtg-to-folding =
    heuristic-outline-and-folding-sorts;
    sorts-to-folding
  
  sorts-to-folding =
    visitmethods := <map(create-folding-method)>;
    x_Name       := <conc-strings> (<get-main-class-name>, "FoldingUpdater");
    
    <output-java-file> |[
      package foldingUpdater;
    
      import parser.ast.*;
      
      public class x_Name extends tname_FOLDINGBASE {
        private lpg.runtime.IPrsStream prsStream;
          
        private tname_FOLDINGHELPER helper;
      
        public void makeAnnotationWithOffsets(int first_offset, int last_offset) {
          super.makeAnnotation(first_offset, last_offset - first_offset + 1);
        }
          
        // Visitor inner class
        private class FoldingVisitor extends AbstractVisitor {
          public void unimplementedVisitor(java.lang.String s) {
            // Could be used for debugging purposes.
          }
      
          ~*visitmethods
        };

        public void sendVisitorToAST(java.util.HashMap newAnnotations, java.util.List annotations, java.lang.Object ast) {
          ASTNode theAST = (ASTNode) ast;
          prsStream = theAST.getLeftIToken().getPrsStream();
          AbstractVisitor abstractVisitor = new FoldingVisitor();
          
          helper = new tname_FOLDINGHELPER(this, prsStream);
          
          theAST.accept(abstractVisitor);
        }
      }
    ]|
  
  create-folding-method:
    x_Type ->
    class-body-dec |[
      public boolean visit(x_Type n) {
        helper.makeCompleteAnnotation(n);
        return true;
      }
    ]|
  */
