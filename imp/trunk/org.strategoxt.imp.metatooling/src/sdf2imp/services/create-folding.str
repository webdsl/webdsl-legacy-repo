/**
 * sdf2imp concrete folding service generator.
 *
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module sdf2imp/services/create-folding

imports
  libstratego-lib
  
  sdf2imp/util/-
  sdf2imp/services/common

strategies

  read-folding =
    <input-descriptor-file> <main-descriptor-name>;
    
    collect-all(?Folding(_, <id>));
    
    concat
  
  folding-rule-to-java:
    condition ->
    |[ if (e_Condition) { makeCompleteAnnotation(node); return true; } ]|
    where
      e_Condition := <condition-to-java>
  
  condition-to-java:
    FoldAll(x) -> <condition-to-java> x
    where
      warn(|"Folding of lists of nodes not implemented yet.")// TODO: condition-to-java for FoldAll()

  create-folding =
    folding := <read-folding>;
    ifs     := <map(risky(folding-rule-to-java |"Rule not supported"))> folding;
    x_Name  := <conc-strings> (<get-main-class-name>, "FoldingUpdater");
    
    <output-java-file> |[
      package foldingUpdater;
      
      public class x_Name extends tname_FOLDINGBASE {
        // Visitor inner class
        private class FoldingVisitor extends tname_VISITOR {
          public boolean preVisit(tname_ASTNODE node) {
            String constructor = node.getConstructor();
            String sort = node.getSort();
            
            ~*ifs
            
            return true;
          }
          
          public void postVisit(tname_ASTNODE node) {
            // Nothing to see here; move along.
          }
        };

        public void sendVisitorToAST(tname_ASTNODE node) {
          node.accept(new FoldingVisitor());
        }
      }
    ]|
