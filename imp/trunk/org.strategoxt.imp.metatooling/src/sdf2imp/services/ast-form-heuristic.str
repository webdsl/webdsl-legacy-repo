module sdf2imp/services/ast-form-heuristic

imports
  libstratego-lib
  
  sdf2imp/util/-

strategies

  
/**
 * Heuristic traversal strategies.
 *
 * @internal
 */
strategies

  init-ast-form-heuristic =
    list-loop(heuristic-register-production);
    
    verified-start-symbol

  verified-start-symbol =
    StartSymbol;
    where(
      bagof-Productions;
      not([])
    )
  <+
    fatal-err-msg(|"No legal start symbol specified.")
  
  heuristic-register-production =
    try(
      ?prod;
      heuristic-rtg-sort-name => sort;
      
      rules(
        Productions :+ sort -> prod
      )
    )

  heuristic-child-sorts =
    ?ProdRule(
      Nonterm(Plain(sort))
    , [Appl(_, <id>)]
    );
    
    map(?Ref(Nonterm(Plain(<id>))));
    
    filter(not(?sort)) // avoid circular references
  <+
    // Injection
    ?ProdRule(
      Nonterm(Plain(sort))
    , [Ref(Nonterm(Plain(<id>)))]
    );
    
    ![<not(?sort)>] // avoid circular references
  <+
    verify(ProdRule(id, id), !"Bad input for heuristic-child-sorts");
    ![]
  
  heuristic-collect-all-rtg(condition) =
  {| CollectAllVisited:
    rec rec(
      CollectAllVisited;
      ![]
    <+
      { ?sort;
        rules(CollectAllVisited: sort);
        
        heuristic-collect-all-visit-sort(condition, rec)
      }
    );
    
    flatten-list
  |}
  
  heuristic-collect-all-visit-sort(condition, rec) =
    bagof-Productions;
    
    map(heuristic-collect-all-visit-production(condition, rec))
  
  heuristic-collect-all-visit-production(condition, rec) =
    ?prod;
    heuristic-child-sorts;
    filter(rec);
    
    try(![<condition> prod | <id>])
  
   // TODO2: Cleanup
  
  /**
   * Succeeds if by following recursively the current productions single child,
   * at some point <condition> applies for _one_ of the encountered productions.
   */
  heuristic-follow-single-child-productions1(condition) =
  {| FollowVisited:
    rec rec({
      // Avoid infinite looping
      not(FollowVisited) => sort; 
      rules(FollowVisited: sort);
        
      bagof-Productions;
      (
        getfirst(condition)
      <+
        getfirst(
          heuristic-child-sorts => [<rec>]
        )
      )
    })
  |}
  
  /**
   * Succeeds if by following recursively the current productions single child,
   * at some point <condition> applies for _all_ of the encountered productions.
   */
  heuristic-follow-single-child-productions(condition) =
  {| FollowVisited, FollowSuccess:
    rec rec({
      // Avoid infinite looping
      not(FollowVisited) => sort; 
      rules(FollowVisited: sort);
        
      bagof-Productions;
      not([]);
      
      map({
        FollowSuccess
      <+
        condition
      <+
        ?prod;
        
         heuristic-child-sorts => [<rec>];
          
         rules(FollowSuccess: prod)
        //| "Hey what's this then?")
      });
      Hd
    })
  |}

/**
 * Heuristic conditions.
 *
 * @internal
 */
strategies

  heuristic-rtg-sort-name =
    non-terminal-sort-name
  <+
    // Injection: use lhs name
    ?ProdRule(
      Nonterm(Plain(<id>))
    , [Ref(_)]
    )

  heuristic-asfix-sort-name =
    non-terminal-sort-name
  <+
    // Injection: use rhs name
    ?ProdRule(
      _
    , [Ref(Nonterm(Plain(<id>)))]
    )
  
  non-terminal-sort-name =
    ?ProdRule(
      Nonterm(Plain(<id>))
    , [Appl(_, _)]
    )
  
  constructor-name =
    ?ProdRule(
      _
    , [Appl(Term(Plain(<id>)), _)]
    )
  
  // TODO: Don't match the webdsl "if"
  //       is-identifier should be more strict,
  //       so that it matches identifiers and lists of identifiers
  //       for _all_ productions
  
  heuristic-sort-is-identifier =
    heuristic-follow-single-child-productions1(is-string-production)
  
  /**
   * Succeeds if the sort points to a list of things that are not of the given sort, or one of its injections.
   */
  heuristic-sort-is-unvisited-list =
    heuristic-follow-single-child-productions(is-unvisited-list-production)
  
  heuristic-sort-is-list =
    heuristic-follow-single-child-productions1(is-list-production)
  
  heuristic-production-has-no-same-sort-descendant =
    where(
      rootsort := <get-list-production-item-sort>
    <+
      rootsort := <heuristic-rtg-sort-name>
    );
  
    {| ProductionVisited:
      rec rec({ production:
        ProductionVisited
      <+
        ?production;
        rules(ProductionVisited: production);
        
        heuristic-child-sorts;
        
        // Check condition
        list-loop(not(?rootsort));
        
        // Recurse
        list-loop(
          bagof-Productions;
          list-loop(rec)
        )
      })
    |}
  
  is-string-production =
    ?ProdRule(
      _
    , [Ref(String())]
    )
  
  is-list-production =
    ProdRule(
      id
    , [Appl(is-list-term, id)]
    )

  is-list-term =
    ConcTerm + ConsTerm + NilTerm + TupleTerm(id)
  
  is-unvisited-list-production =
    where(
     get-list-production-item-sort;
     not(FollowVisited)
    )
  <+ // TODO: Cleanup?
    ProdRule(
      id
    , [Appl(is-list-term; not(ConsTerm()), id)]
    )
  
  is-list-production =
    ProdRule(
      id
    , [Appl(is-list-term, id)]
    )
  
  get-list-production-item-sort =
    ?ProdRule(
      _
    , [Appl(ConsTerm(), [Ref(Nonterm(Plain(<id>))), _])]
    )
