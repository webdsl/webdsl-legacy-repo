head	1.3;
access;
symbols;
locks
	apache:1.3; strict;
comment	@# @;


1.3
date	2004.03.26.09.51.32;	author EelcoVisser;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.10.14.11.20;	author EelcoVisser;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.30.22.19.41;	author EelcoVisser;	state Exp;
branches;
next	;


desc
@none
@


1.3
log
@none
@
text
@%META:TOPICINFO{author="EelcoVisser" date="1080294692" format="1.0" version="1.3"}%
%META:TOPICPARENT{name="StrategoPublications"}%
%INCLUDE{http://www.stratego-language.org/Stratego/FusingLogicAndControl?skin=plain}%

<!--
	* Set SKIN = notitle
-->

@


1.2
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="EelcoVisser" date="1036937480" format="1.0" version="1.2"}%
d3 1
a3 1
Transform.PatriciaJohann and Main.EelcoVisser. Fusing Logic and Control with Local Transformations: An Example Optimization. In _Workshop on Reduction Strategies in Rewriting and Programming (Transform.WRS'01)_, volume 57 of _Electronic Notes in Theoretical Computer Science_, Utrecht, The Netherlands, May 2001. Elsevier Science Publishers. 
d5 3
a7 1
*Abstract*
a8 26
Abstract programming supports the separation of logical concerns from issues of
control in program construction. While this separation of concerns leads to reduced
code size and increased reusability of code, its main disadvantage is the computa-
tional overhead it incurs. Fusion techniques can be used to combine the reusability
of abstract programs with the eciency of specialized programs.

In this paper we illustrate some of the ways in which rewriting strategies can be
used to separate the denition of program transformation rules from the strategies
under which they are applied. Doing so supports the generic denition of program
transformation components. Fusion techniques for strategies can then be used to
specialize such generic components.

We show how the generic innermost rewriting strategy can be optimized by fusing
it with the rules to which it is applied. Both the optimization and the programs to
which the optimization applies are specied in the strategy language Stratego. The
optimization is based on small transformation rules that are applied locally under
the control of strategies, using special knowledge about the contexts in which the
rules are applied.

*Online*

	* http://www.elsevier.nl/locate/entcs/volume57.html
	* http://www.cs.uu.nl/people/visser/ftp/JV01.pdf

-----
CategoryPaper
@


1.1
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="EelcoVisser" date="1009750781" format="1.0" version="1.1"}%
d32 1
a32 1
Transform.CategoryPaper
@
