%META:TOPICINFO{author="EelcoVisser" date="1055020680" format="1.0" version="1.1"}%
%META:TOPICPARENT{name="BachelorProjects"}%
Character class grammars provide a formalism for compactly expressing
the syntax of programming languages. Instead of using non-terminals,
which represent a fixed set of productions, the symbols used in
productions are classes of productions conveniently represented by
means of character classes. This allows a fine-grained specification
of which production may be used where. Thus, it is possible to express
the conventional disambiguatoin of expression syntax without
introducing auxiliary productions. Furthermore, all kinds of
optimizations can be expressed directly on grammars.

The formalism of character class grammmars (CCGs) and a translation
from context-free grammars to CCGs is described in the technical
report [[PublicationsByYear#Vis97.ccg][From Context-free Grammars with Priorities to Character Class Grammars]]. The report
provides a specification of the transformation in ASF+SDF, which 
was used as a proto-type.

The goal of this project is to implement in a programming language of
your choice the transformation from context-free grammars with
priorities to character class grammars.  This involves writing parsers
and pretty-printers for the grammar formalisms involved. If time
allows, also write a back-end translating character class grammars to
an existing grammar formalism such as YACC.
