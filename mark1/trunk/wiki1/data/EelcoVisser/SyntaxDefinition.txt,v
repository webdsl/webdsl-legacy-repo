head	1.9;
access;
symbols;
locks
	apache:1.9; strict;
comment	@# @;


1.9
date	2006.10.17.14.50.07;	author EelcoVisser;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.02.12.54.15;	author EelcoVisser;	state Exp;
branches;
next	1.7;

1.7
date	2005.06.09.18.08.53;	author EelcoVisser;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.09.10.48.00;	author EelcoVisser;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.09.13.23.10;	author EelcoVisser;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.07.14.34.00;	author EelcoVisser;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.29.17.06.39;	author EelcoVisser;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.28.09.33.35;	author EelcoVisser;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.23.13.08.00;	author EelcoVisser;	state Exp;
branches;
next	;


desc
@none
@


1.9
log
@none
@
text
@%META:TOPICINFO{author="EelcoVisser" date="1161096607" format="1.0" version="1.9"}%
%META:TOPICPARENT{name="ProgramTransformation"}%

---------------+ Syntax Definition

<img SRC="/~visser/thesis/tiny-circle.gif" align="right"  border=0 alt ="Thesis">

Producing and maintaining parsers for large languages requires a declarative syntax definition formalism from which parsers can be generated. SDF2 is a modular syntax definition formalism that integrates lexical and context-free syntax and supports arbitrary context-free grammars. Since the formalism is declarative, syntax definitions can be used to generate other tools from, e.g., pretty-printers and data type definitions. I developed SDF2 as part of my PhD research at the University of Amsterdam. The language and core tools are maintained and further developed at CWI. SDF is an important component of the StrategoXT toolset. Various tools for generation, transformation, and analysis of SDF syntax definitions are developed as part of StrategoXT. Recently we have been employing SDF to provide _concrete syntax_ for data in host languages such as Stratego, Prolog, and Java.

----++ Publications

----+++ [[Syntax Definition for Language Prototyping]]

PhD thesis on design and implementation of syntax definition formalisms.

-----+++ SDF

	* [[A family of syntax definition formalisms]]
	* [[Character classes]]

-----+++ SGLR

	* [[Scannerless generalized LR parsing]]

-----+++ Disambiguation

	* [[Using filters for the disambiguation of context-free grammars]]
	* [[A case study in optimizing parsing schemata by disambiguation filters]]
	* [[From context-free grammars with priorities to character class grammars]]
	* [[Disambiguation filters for scannerless generalized LR parsers]]
	* [[Generalized Type Based Disambiguation of Meta Programs with Concrete Object Syntax][Generalized Type-Based Disambiguation of Meta Programs with Concrete Object Syntax]]

-----+++ Pretty-printing

	* [[Generation of formatters for context-free languages]]
	* [[From Box to TeX]]

-----+++ Concrete Syntax

	* [[Concrete syntax for objects]]
	* [[Retrofitting the AutoBayes program synthesis system with concrete syntax]]
	* [[Meta programming with concrete object syntax]]

-----+++ SDF in XT

	* [[XT A Bundle of Program Transformation Tools]]
	* [[Program Transformation with StrategoXT]]

----++ Other Resources

	* [[http://www.program-transformation.org/Sdf][SDF Wiki]] has many pointers to SDF related pages
	* [[http://www.cwi.nl/htbin/sen1/twiki/bin/view/SEN1/SDF2][SDF2]]
	* [[http://www.stratego-language.org/Stratego/SdfTools][sdf-tools]] in StrategoXT


------++ Bibliography

An (incomplete) bibliography of SDF.

%INCLUDE{http://www.cs.uu.nl/~visser/sdf/sdf-by-year.html}%

@


1.8
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="EelcoVisser" date="1136206455" format="1.0" version="1.8"}%
d3 3
@


1.7
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="EelcoVisser" date="1118340533" format="1.0" version="1.7"}%
d52 7
@


1.6
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="EelcoVisser" date="1086778080" format="1.0" version="1.6"}%
d3 49
a51 48
<img SRC="/~visser/thesis/tiny-circle.gif" align="right"  border=0 alt ="Thesis">

Producing and maintaining parsers for large languages requires a declarative syntax definition formalism from which parsers can be generated. SDF2 is a modular syntax definition formalism that integrates lexical and context-free syntax and supports arbitrary context-free grammars. Since the formalism is declarative, syntax definitions can be used to generate other tools from, e.g., pretty-printers and data type definitions. I developed SDF2 as part of my PhD research at the University of Amsterdam. The language and core tools are maintained and further developed at CWI. SDF is an important component of the StrategoXT toolset. Various tools for generation, transformation, and analysis of SDF syntax definitions are developed as part of StrategoXT. Recently we have been employing SDF to provide _concrete syntax_ for data in host languages such as Stratego, Prolog, and Java.

----++ Publications

----+++ [[Syntax Definition for Language Prototyping]]

PhD thesis on design and implementation of syntax definition formalisms.

-----+++ SDF

	* [[A family of syntax definition formalisms]]
	* [[Character classes]]

-----+++ SGLR

	* [[Scannerless generalized LR parsing]]

-----+++ Disambiguation

	* [[Using filters for the disambiguation of context-free grammars]]
	* [[A case study in optimizing parsing schemata by disambiguation filters]]
	* [[From context-free grammars with priorities to character class grammars]]
	* [[Disambiguation filters for scannerless generalized LR parsers]]

-----+++ Pretty-printing

	* [[Generation of formatters for context-free languages]]
	* [[From Box to TeX]]

-----+++ Concrete Syntax

	* [[Concrete syntax for objects]]
	* [[Retrofitting the AutoBayes program synthesis system with concrete syntax]]
	* [[Meta programming with concrete object syntax]]

-----+++ SDF in XT

	* [[XT A Bundle of Program Transformation Tools]]
	* [[Program Transformation with StrategoXT]]

----++ Other Resources

	* [[http://www.program-transformation.org/Sdf][SDF Wiki]] has many pointers to SDF related pages
	* [[http://www.cwi.nl/htbin/sen1/twiki/bin/view/SEN1/SDF2][SDF2]]
	* [[http://www.stratego-language.org/Stratego/SdfTools][sdf-tools]] in StrategoXT

@


1.5
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="EelcoVisser" date="1084108990" format="1.0" version="1.5"}%
d5 3
a7 2
Producing and maintaining parsers for large languages requires a declarative syntax definition formalism from which parsers can be generated. SDF2 is a modular syntax definition formalism that integrates lexical and context-free syntax and supports arbitrary context-free grammars. Since the formalism is declarative, syntax definitions can be used to generate other tools from, e.g., pretty-printers and data type definitions. I developed SDF2 as part of my PhD research at the University of Amsterdam. The language and core tools are maintained and further developed at CWI. SDF is an important component of the StrategoXT toolset.
Various tools for generation, transformation, and analysis of SDF syntax definitions are developed as part of StrategoXT.
d13 33
a45 1
----+++ Resources
@


1.4
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="EelcoVisser" date="1062945240" format="1.0" version="1.4"}%
d14 1
d16 2
a17 2
	* [[http://www.stratego-language.org/Stratego/SdfTools][sdf-tools]] in StrategoXT

@


1.3
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="EelcoVisser" date="1030640798" format="1.0" version="1.3"}%
d3 1
a3 1
<a href="/~visser/thesis/cover.html"><img SRC="/~visser/thesis/tiny-circle.gif" align="right"  border=0 alt ="Thesis"> </a>
d5 2
a6 9
Program transformation requires parsing of program source
	  texts. Producing and maintaining parsers for large languages
	  requires a declarative syntax definition formalism from
	  which parsers can be generated.  SDF2 is a modular syntax
	  definition formalism that integrates lexical and
	  context-free syntax and supports arbitrary context-free
	  grammars. Since the formalism is declarative, syntax
	  definitions can be used to generate other tools from, e.g.,
	  pretty-printers and data type definitions.
d8 1
a8 9
	  <ul>
<li> <a href="thesis/cover.html">Syntax Definition for Language Prototyping</a>:
			PhD thesis on design and implementation of syntax definition formalisms</li>
<li><a href="http://www.program-transformation.org/gb/">The Online Grammar Base</a>: 
			a collection of syntax definitions of common languages </li>
<li> <a href="http://www.program-transformation.org/sdf/">SDF2</a>: 
			wiki site for SDF2
				<li> <a href="http://www.program-transformation.org/Transform/DisambiguationFiltersForScannerlessGeneralizedLRParsers">Disambiguation Filters for Scannerless Generalized LR Parsers</a> (CC'02)
	  </ul>
d10 1
d12 5
@


1.2
log
@none
@
text
@d1 2
a2 2
%META:TOPICINFO{author="EelcoVisser" date="1030527215" format="1.0" version="1.2"}%
%META:TOPICPARENT{name="WebHome"}%
@


1.1
log
@none
@
text
@d1 1
a1 1
%META:TOPICINFO{author="EelcoVisser" date="1030108300" format="1.0" version="1.1"}%
d3 1
a3 1
<a href="/~visser/thesis/cover.html"><img SRC="/~visser/thesis/tiny-circle.gif" align =" right"  valign="center" border=0 alt =" Thesis"> </a>
@
