module twiki-to-markdown

imports libstrategolib 
	site-specific
	xml-lib

strategies

  main = 
    where(initiatialize-stratego-external-links);
    input-wrap(
      alltd(?Element(Name(_,"body"),_,<map(convert)>))
    )

  convert =
    ignore-element
    <+ site-specific-element
    <+ special-element
    <+ convert-element
    <+ debug(!"unknown-element: ")

  site-specific-element =
    fail

strategies // default: copy xhtml elements literally

  convert-element =
    ?Element(Name(_, tag), attr*, [])
    ; <print-strings> ["<", tag]
    ; <map(print-attribute)> attr*
    ; <printstring> "/>"

  convert-element =
    ?Element(Name(_, tag), attr*, elem*)
    ; where(<not(?[])> elem*)
    ; <print-strings> ["<", tag]
    ; <map(print-attribute)> attr*
    ; <printstring> ">"
    ; <map(convert)> elem*
    ; <print-strings> ["</", tag, ">"]

  print-attribute =
    ?Attribute(Name(_, aname), aval)
    ; <print-strings>[" ", aname, "=\"", <escape-text> aval, "\""]

strategies // default: copy element text literally 

  convert-element =
    ?Text(txt)
    ; where(<is-string> txt)
    ; <convert-text-string> txt

  convert-element =
    ?Text(txt)
    ; where(<is-list> txt)
    ; <map(convert-text-string)> txt

  convert-text-string =
    is-string
    ; string-tokenize-keep-empty(|['\n'])
    ; if ?["" | _] then
        where(<print-strings>["\n"])
        ; Tl
      else
        where(Hd; escape-text; <print-strings>[<id>, " "])
        ; Tl
      end
    ; map(trim-leading-whitespace; trim-trailing-whitespace; escape-text; <print-strings>[<id>, " "])

    // problem: <p><a href="...">foo</a> bar</p>

  convert-text-string =
    ?Literal(<is-string>)
    ; escape-text
    ; printstring

  convert-text-string =
    ?EntityRef(ref)
    ; if not("nbsp" := ref) then
        <print-strings>["&", ref, ";"]
      end

  escape-text = 
    string-as-chars(escape-chars(Escape <+ Escape-single-quote))

strategies // elements to ignore

  ignore-element =
    ? Element(
            Name(_, "a")
          , [ Attribute(Name(None(), "name"), "PageTop")
            , Attribute(Name(None(), "id"), "PageTop")
            ]
          , []
          )

  ignore-element =
    ?Element(Name(_, "a")
          , [ Attribute(Name(None(), "name"), "PageBottom")
            , Attribute(Name(None(), "id"), "PageBottom")
            ]
          , []
          )

  ignore-element =
    ?Element(Name(_, "a")
            , [ Attribute(Name(None(), "name"), _)
              , Attribute(Name(None(), "id"), _) ]
            , [])

  ignore-element =
    ?Elem("font", _, elems)
    ; <map(convert-element)> elems

  ignore-element =
    ?Elem("div", [Attr("class", "twikiWebTitle")], _)

strategies // structural markup

  special-element =
    ?Elem("p", [], [])
    ; <printstring> "\n\n"

  special-element =
    ?Element(Name(_, "p"), [], elem*)
    ; <printstring> "\n\n"
    ; <map(convert)> elem*

  special-element =
    ?Elem("hr", [], [])
    ; <printstring> "\n--------------------------------------------\n"

  special-element =
    convert-header(|"h1", "#")
    <+ convert-header(|"h2", "##")
    <+ convert-header(|"h3", "###")
    <+ convert-header(|"h4", "####")
    <+ convert-header(|"h5", "#####")

  convert-header(|h, hashes) =
    ?Elem(h, _, elems)
    ; <print-strings>[hashes, " "]
    ; <map(convert)> elems
    //; <print-strings>["\n"]
    

  special-element =
    ?Element(Name(_,"em"), [], [Text(txt)])
    ; <print-strings>["_", <escape-text>txt, "_"]

  special-element =
    ?Element(Name(_,"strong"), [], [Text(txt)])
    ; <print-strings>["**", <escape-text>txt, "**"]

  special-element =
    ?Element(Name(_,"b"), [], [Text(txt)])
    ; <print-strings>["**", <escape-text>txt, "**"]

strategies // lists

  special-element =
    ?Elem("ul", [], elems)
    ; <print-strings>["\n\n"]
    ; {| ListIndent
       : rules( 
           ListIndent  := <concat-strings>["   ", <ListIndent <+ !"">] 
           OrderedList :- _
         )
       ; <map(convert)> elems
       |}

  special-element =
    ?Elem("ol", [], elems)
    ; <print-strings>["\n\n"]
    ; {| ListIndent, OL 
       : rules( 
           ListIndent  := <concat-strings>["   ", <ListIndent <+ !"">] 
           OrderedList : _ 
         )
       ; <map(convert)> elems
       |}

  special-element =
    ?Elem("li", [], elems)
    ; <print-strings>[
        "\n", 
        <ListIndent <+ !"">, 
        <if OrderedList then !"1. " else !"- " end>]
    ; <map(convert)> elems

strategies // tables

  special-element =
    ?Elem("table", _, elems)
    ; <print-strings>["\n<table>"]
    ; <map(convert)> elems
    ; <print-strings>["\n</table>"]

  special-element =
    ?Elem("tr", _, elems)
    ; <print-strings>["\n<tr>"]
    ; <map(convert)> elems
    ; <print-strings>["\n</tr>"]

  special-element =
    ?Elem("th", _, elems)
    ; <print-strings>["\n<th>"]
    ; <map(convert)> elems
    ; <print-strings>[" </th>"]

  special-element =
    ?Elem("td", _, elems)
    ; <print-strings>["\n <td>"]
    ; <map(convert)> elems
    ; <print-strings>[" </td>"]

strategies

  special-element =
    ?Elem("div", [Attr("class", "twikiToc")], _)
    //; <print-strings>["\n%TOC%\n"]

  special-element =
    ?Elem("span"
	 , [ Attr("class", "twikiNewLink") | _ ]
         , [ Elem("font", _, [Text(txt)] ) | _ ] )
    ; <print-strings>[<escape-text>txt]

strategies // links

  special-element =
    internal-link
    <+ external-link

  internal-link =
    ?Elem("a", [ Attribute(Name(_, "class"), "twikiLink")
               , Attribute(Name(_, "href"), url)]
             , [Text(anchor)])
    ; <convert-internal-url(|<escape-text>anchor); print-strings> url
    
    //; <print-strings>["[[", url2, "|", anchor, "]]"]

  external-link =
    ?Element(Name(_, "a"), 
      <fetch(?Attribute(Name(_, "href"), url))>
      , [Text(anchor)])
    ; <print-strings>["[", <escape-text>anchor, "](", url, ")"]

  convert-internal-url(|anchor) =
    <string-tokenize>(['/'], <id>)
    ; debug(!"internal url: ")
    ; if ?["http:", site, web, topic] then
        <internal-url(|anchor)> (web, topic)
      else if ?[web, topic] then
        <internal-url(|anchor)> (web, topic)
      else 
        debug(!"unparseable internal link: "); fail 
      end end

strategies // literal code

  special-element =
    ?Elem("pre", [Attr("space", "preserve")], [Text(txt)])
    ; <string-tokenize-keep-empty(|['\n'])> txt
    ; where(<printstring>"\n")
    ; map(where(<printstring>"\n    "); escape-text; printstring)
    ; where(<printstring>"\n\n")

    //; <indent-text(|4); debug(!"code: ");  escape-text; debug(!"code escaped: "); printstring> txt

  special-element =
    ?Elem("code", _, [Text(txt)])
    ; <print-strings>["`", <escape-text>txt, "`"]

  special-element =
    ?Elem("code", _, elems)
    ; where(<not([])> elems)
    ; <print-strings>["`"]
    ; <map(convert)> elems
    ; <print-strings>["`"]

