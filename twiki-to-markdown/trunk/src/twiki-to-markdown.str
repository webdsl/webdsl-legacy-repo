module twiki-to-markdown
imports libstrategolib xml-info

overlays

  Elem(tag, attrs, elems) = Element(Name(_ None(), tag), attrs, elems)

  Attr(name, value) = Attribute(Name(_ None(), name), value)

strategies

  main = 
    input-wrap(
      alltd(?Element(Name(_,"body"),_,<map(convert)>))
    )

  print-strings =
   <fprint>(stdout(), <id>)

  convert =
    ignore-element
    <+ special-element
    <+ convert-element
    <+ debug(!"unknown-element: ")


strategies // default: copy xhtml elements literally

  convert-element =
    ?Element(Name(_, tag), attr*, elem*)
    ; <print-strings> ["<", tag]
    ; <map(print-attribute)> attr*
    ; <printstring> ">"
    ; <map(convert)> elem*
    ; <print-strings> ["</", tag, ">"]

  print-attribute =
    ?Attribute(Name(_, aname), aval)
    ; <print-strings>[" ", aname, "=\"", <escape-text> aval, "\""]

  convert-element =
    ?Text(txt)
    ; <string-tokenize>(['\n'], txt)
    ; map(trim-leading-whitespace; escape-text; printstring)

  escape-text = 
    string-as-chars(escape-chars(Escape <+ Escape-single-quote))

strategies // elements to ignore

  ignore-element =
    ? Element(
            Name(_, "a")
          , [ Attribute(Name(None(), "name"), "PageTop")
            , Attribute(Name(None(), "id"), "PageTop")
            ]
          , []
          )

  ignore-element =
    ? Element(
            Name(_, "a")
          , [ Attribute(Name(None(), "name"), "PageBottom")
            , Attribute(Name(None(), "id"), "PageBottom")
            ]
          , []
          )


strategies // structural markup

  special-element =
    ?Elem("p", [], [])
    ; <printstring> "\n\n"

  special-element =
    ?Element(Name(_, "h3"), []
          , [ Element(Name(_, "a")
              , [ Attribute(Name(None(), "name"), _)
                , Attribute(Name(None(), "id"), _)
                ]
              , []
              )
            , Text(txt)
            ]
          )
    ; <print-strings>["\n### ", <escape-text>txt, "\n\n"]

  special-element =
    ?Element(Name(_, "p"), [], elem*)
    ; <printstring> "\n"
    ; <map(convert)> elem*
    ; <printstring> "\n"

  special-element =
    ?Element(Name(_,"em"), [], [Text(txt)])
    ; <print-strings>["_", <escape-text>txt, "_"]


strategies // links

//[E. Visser](/Stratego/EelcoVisser)

  special-element =
    internal-link
    <+ external-link

  internal-link =
    ?Elem("a", [ Attribute(Name(_, "class"), "twikiLink")
               , Attribute(Name(_, "href"), url1)]
             , [Text(anchor)])
    ; url2 := <convert-internal-url> url1
    ; <print-strings>["[[", url2, "|", <escape-text>anchor, "]] "]

  external-link =
    ?Element(Name(_, "a"), 
      <fetch(?Attribute(Name(_, "href"), url))>
      , [Text(anchor)])
    ; <print-strings>["[", <escape-text>anchor, "](", url, ") "]

  convert-internal-url =
    <string-tokenize>(['/'], <id>)
    ; debug(!"internal url: ")
    ; if ?["http:", site, web, topic] then
        <concat-strings> ["page(", web, "/", topic, ")"]
      else if ?[web, topic] then
        <concat-strings> ["page(", web, "/", topic, ")"]
      end end

  special-element =
    ?Element(Name(_, "pre")
            ,[Attribute(Name(_, "space"), "preserve")]
            ,[Text(txt)]
            )
    ; <indent-text(|4); escape-text; printstring> txt


/* 

TODO

- escape ' in text

- internal links

- leave out table of contents

- space after links, emphasis

- link syntax

*/
