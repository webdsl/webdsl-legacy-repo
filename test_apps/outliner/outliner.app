application outliner

//generic imports
imports widgets/widgets
imports widgets/tree
imports widgets/masterdetail
imports widgets/popup
imports widgets/tabcontrol
imports widgets/dnd
imports widgets/loaddojo

//application specific imports
imports data/data
imports data/header
imports data/image
imports data/text
imports data/documentmanagement
imports data/json

imports layout
imports toolbar

section pages

define page root() {
  var d: Document := null;
  outliner_contents(d)
}

define page outliner(doc: Document) {
  outliner_contents(doc)
}

define outliner_contents(doc: Document) {
  //loadDojo(true, "1.3.2")
  loadDojo(false, "1.3.0")
  loadCSS("../stylesheets/outliner.css")
  loadCSS("../stylesheets/widgets.css")
  footerLayout("100px")[width:="800px"] with {
    contents() {
      collapseUp() {
          toolbar(doc)
      }
      main(doc)
    
      //a hook for the popup windows
      placeholder popup {}
    }
    footer() {
      spacer 
      container[id:= statusBar, style:="height: 20px; width:100%; float: bottom"] { " Loaded." } 
      spacer
      "application generated by WebDSLx"
    }
  }
}

define main(doc: Document) {
  if (doc == null) {
    "(No document loaded)" 
  }
  else {
    tabs[height:="800px"] {
      tab(doc.name) {
        masterdetail() with {
          masterview() {
            documentTree(doc)
          }
          detailview() {
            detailView(doc.root)
          }
        }
      }
      lazytab("Print preview") {
        //todo:
      }
      lazytab("JSON tree") {
        documentoutlinehelper(doc)
      } 
    }
  }
} 

define template documentTree(doc: Document) {
  Tree(navigate(documentoutline(doc)), doc.root.id.toString())
    [onselect:=selectHeader(null)]
  
  action selectHeader(id: String) {
    var n: HeaderNode := loadHeaderNode(UUIDFromString(id));
    replace(detailView, detailView(n));
  }
}

//dispatch to  proper view
define detailView(item: HeaderNode) {
  dndOnce()
  showPath(item)
  
  spacer
  nodeView(item)
}

define nodeView(item: TreeItem) {
         if (item isa HeaderNode) { viewHeader(item as HeaderNode) }
  else { if (item isa TextNode)   { viewText  (item as TextNode) }
  else { if (item isa ImageNode)  { viewImage (item as ImageNode) }
  else { "Error: unsupported node type" }  }  }
}

define showPath(item: HeaderNode) {
  var path: List<HeaderNode> := List<HeaderNode>();
  init {
    var cur: HeaderNode := item;
    while(cur != null) {
      path.add(cur);
      cur := cur.parent as HeaderNode;
    }
  }
  
  for(i: Int from path.length -1 to 0) {
    image("/images/go-next.png")
    navigate[
      onclick:= loadView(path.get(i))
    ]{ output(path.get(i).caption) }
    
  } 
  image("/images/go-next.png")
  output(item.caption)
  
  action loadView(item: HeaderNode) {
    replace (detailView, detailView(item));
  }
}