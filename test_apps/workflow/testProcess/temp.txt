application org.webdsl.testProcess

access control rules
  anonymous
  rule page pdpWorkflow ( p : PdpMeeting ) {
    true && true && true && true && p.pdpWorkflow.isEnabled
    rule action doAction (  ) {
      true && true && true && true && p.pdpWorkflow.isEnabled
    }
  }

access control rules
  anonymous
  rule page testReport ( p : PdpMeeting ) {
    true && true && true && p.testReport.isEnabled
    rule action doAction (  ) {
      true && true && true && p.testReport.isEnabled
    }
  }

access control rules
  anonymous
  rule page employeeFillInForm ( p : PdpMeeting ) {
    true && true && securityContext.principal == p.employee && true && p.employeeFillInForm.isEnabled
    rule action doAction (  ) {
      true && true && securityContext.principal == p.employee && true && p.employeeFillInForm.isEnabled
    }
  }

access control rules
  anonymous
  rule page managerFillInForm ( p : PdpMeeting ) {
    true && true && securityContext.principal == p.employee && true && p.managerFillInForm.isEnabled
    rule action doAction (  ) {
      true && true && securityContext.principal == p.employee && true && p.managerFillInForm.isEnabled
    }
  }

access control rules
  anonymous
  rule page writeReport ( p : PdpMeeting ) {
    true && true && securityContext.principal == p.employee && true && p.writeReport.isEnabled
    rule action doAction (  ) {
      true && true && securityContext.principal == p.employee && true && p.writeReport.isEnabled
    }
  }

access control rules
  anonymous
  rule page finalizeReport ( p : PdpMeeting ) {
    true && true && securityContext.principal == p.employee && p.finalizeReport.isEnabled
    rule action doAction (  ) {
      true && true && securityContext.principal == p.employee && p.finalizeReport.isEnabled
    }
  }

access control rules
  anonymous
  rule page approveReport ( p : PdpMeeting ) {
    true && true && securityContext.principal == p.employee && p.approveReport.isEnabled
    rule action doAction (  ) {
      true && true && securityContext.principal == p.employee && p.approveReport.isEnabled
    }
  }

access control rules
  anonymous
  rule page testRecursiveWorkflow ( t : TestRecursive ) {
    true && true && true && true && t.testRecursiveWorkflow.isEnabled
    rule action doAction (  ) {
      true && true && true && true && t.testRecursiveWorkflow.isEnabled
    }
  }

access control rules
  anonymous
  rule page proc1 ( t : TestRecursive ) {
    true && true && true && true && t.proc1.isEnabled
    rule action doAction (  ) {
      true && true && true && true && t.proc1.isEnabled
    }
  }

access control rules
  anonymous
  rule page proc2 ( t : TestRecursive ) {
    true && true && true && true && t.proc2.isEnabled
    rule action doAction (  ) {
      true && true && true && true && t.proc2.isEnabled
    }
  }

access control rules
  anonymous
  rule page ifProc0 ( t : TestRecursive ) {
    true && true && true && true && true && t.ifProc0.isEnabled
    rule action doAction (  ) {
      true && true && true && true && true && t.ifProc0.isEnabled
    }
  }

access control rules
  anonymous
  rule page repeatUntilProc0 ( p : PdpMeeting ) {
    true && true && true && true && true && p.repeatUntilProc0.isEnabled
    rule action doAction (  ) {
      true && true && true && true && true && p.repeatUntilProc0.isEnabled
    }
  }

access control rules
  anonymous
  rule page andProc0 ( p : PdpMeeting ) {
    true && true && true && true && true && p.andProc0.isEnabled
    rule action doAction (  ) {
      true && true && true && true && true && p.andProc0.isEnabled
    }
  }

description {
  A workflow example for a personal development plan workflow
}

module templates
section  templates .

  function newTestRecursive ( ) : TestRecursive
  {
    var o : TestRecursive := TestRecursive{} ;
    o.persist();
    o.ifProc0 := IfProc0ProcedureStatus{};
    o.ifProc0.t := o;
    o.ifProc0.persist();
    o.proc2 := Proc2ProcedureStatus{};
    o.proc2.t := o;
    o.proc2.persist();
    o.proc1 := Proc1ProcedureStatus{};
    o.proc1.t := o;
    o.proc1.persist();
    o.testRecursiveWorkflow := TestRecursiveWorkflowProcedureStatus{};
    o.testRecursiveWorkflow.t := o;
    o.testRecursiveWorkflow.persist();
    o.persist();
    return o;
  }

  function newPdpMeeting ( ) : PdpMeeting
  {
    var o : PdpMeeting := PdpMeeting{} ;
    o.persist();
    o.repeatUntilProc0 := RepeatUntilProc0ProcedureStatus{};
    o.repeatUntilProc0.p := o;
    o.repeatUntilProc0.persist();
    o.andProc0 := AndProc0ProcedureStatus{};
    o.andProc0.p := o;
    o.andProc0.persist();
    o.approveReport := ApproveReportProcedureStatus{};
    o.approveReport.p := o;
    o.approveReport.persist();
    o.finalizeReport := FinalizeReportProcedureStatus{};
    o.finalizeReport.p := o;
    o.finalizeReport.persist();
    o.writeReport := WriteReportProcedureStatus{};
    o.writeReport.p := o;
    o.writeReport.persist();
    o.managerFillInForm := ManagerFillInFormProcedureStatus{};
    o.managerFillInForm.p := o;
    o.managerFillInForm.persist();
    o.employeeFillInForm := EmployeeFillInFormProcedureStatus{};
    o.employeeFillInForm.p := o;
    o.employeeFillInForm.persist();
    o.testReport := TestReportProcedureStatus{};
    o.testReport.p := o;
    o.testReport.persist();
    o.pdpWorkflow := PdpWorkflowProcedureStatus{};
    o.pdpWorkflow.p := o;
    o.pdpWorkflow.persist();
    o.persist();
    return o;
  }

  entity ProcedureStatus {
    caller -> ProcedureStatus ( )
    returnstate :: Int ( )
    branch :: Int ( )
    name :: String ( ) := "Procedure status"
    isEnabled :: Bool ( )
    date :: DateTime ( )
    function enable ( c : ProcedureStatus r : Int b : Int ) : Void
    {
      this.isEnabled := true;
      this.caller := c;
      this.branch := b;
      this.returnstate := r;
      this.persist();
      this.enabled();
    }
    function next ( state : Int ) : Void
    {
    }
    function processed ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      if ( this.caller != null )
      {
        if ( this.branch != null )
        {
          this.caller.notifyOfActivity(this.branch);
        }
        else
        {
        }
        this.caller.next(this.returnstate);
      }
      else
      {
      }
    }
    function notifyOfActivity ( branch : Int ) : Void
    {
      this.cascadeNotification();
    }
    function cascadeNotification ( ) : Void
    {
      if ( this.caller != null && this.branch != null )
      {
        this.caller.notifyOfActivity(this.branch);
      }
      else
      {
      }
    }
    function partialCommit ( ) : Void
    {
      if ( this.caller != null )
      {
        this.caller.partialCommit();
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
    }
    function disabled ( ) : Void
    {
    }
    function do ( ) : Void
    {
    }
    function done ( ) : Void
    {
    }
    function enable ( ) : Void
    {
      this.isEnabled := true;
      this.persist();
      this.enabled();
    }
    function disable ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.disabled();
    }
  }

  define template testRecursiveProceduresList (testRecursive : TestRecursive) {
    list()[]{
      if ( true && testRecursive.proc2 != null && testRecursive.proc2.isEnabled && true ) {
        listitem()[]{
          navigate(proc2(testRecursive))[]{
            text("Proc2")[]{
            }
          }
        }
      }
      else
      {
      },
      if ( true && testRecursive.proc1 != null && testRecursive.proc1.isEnabled && true ) {
        listitem()[]{
          navigate(proc1(testRecursive))[]{
            text("Proc1")[]{
            }
          }
        }
      }
      else
      {
      },
      if ( true && testRecursive.testRecursiveWorkflow != null && testRecursive.testRecursiveWorkflow.isEnabled && true ) {
        listitem()[]{
          navigate(testRecursiveWorkflow(testRecursive))[]{
            text("Test recursive workflow")[]{
            }
          }
        }
      }
      else
      {
      }
    }
  }

  define template testRecursiveProcedures (testRecursive : TestRecursive) {
    header()[]{
      dummy()[]{
        if ( testRecursive != null ) {
          navigate(testRecursive(testRecursive))[]{
            text(testRecursive.name)[]{
            }
          }
        }
        else
        {
        },
        if ( testRecursive == null ) {
          text("null")[]{
          }
        }
        else
        {
        }
      }
    }
    testRecursiveProceduresList(testRecursive)[]{
    }
  }

  define template pdpMeetingProceduresList (pdpMeeting : PdpMeeting) {
    list()[]{
      if ( securityContext.principal == pdpMeeting.employee && pdpMeeting.approveReport != null && pdpMeeting.approveReport.isEnabled && true ) {
        listitem()[]{
          navigatebutton(approveReport(pdpMeeting), "Approve report")[]{
          }
        }
      }
      else
      {
      },
      if ( securityContext.principal == pdpMeeting.employee && pdpMeeting.finalizeReport != null && pdpMeeting.finalizeReport.isEnabled && true ) {
        listitem()[]{
          navigatebutton(finalizeReport(pdpMeeting), "Finalize report")[]{
          }
        }
      }
      else
      {
      },
      if ( securityContext.principal == pdpMeeting.employee && pdpMeeting.writeReport != null && pdpMeeting.writeReport.isEnabled && true ) {
        listitem()[]{
          navigate(writeReport(pdpMeeting))[]{
            text("Write report")[]{
            }
          }
        }
      }
      else
      {
      },
      if ( securityContext.principal == pdpMeeting.employee && pdpMeeting.managerFillInForm != null && pdpMeeting.managerFillInForm.isEnabled && true ) {
        listitem()[]{
          navigate(managerFillInForm(pdpMeeting))[]{
            text("Manager fill in form")[]{
            }
          }
        }
      }
      else
      {
      },
      if ( securityContext.principal == pdpMeeting.employee && pdpMeeting.employeeFillInForm != null && pdpMeeting.employeeFillInForm.isEnabled && true ) {
        listitem()[]{
          navigate(employeeFillInForm(pdpMeeting))[]{
            text("Employee fill in form")[]{
            }
          }
        }
      }
      else
      {
      },
      if ( true && pdpMeeting.testReport != null && pdpMeeting.testReport.isEnabled && true ) {
        listitem()[]{
          navigatebutton(testReport(pdpMeeting), "Test report")[]{
          }
        }
      }
      else
      {
      },
      if ( true && pdpMeeting.pdpWorkflow != null && pdpMeeting.pdpWorkflow.isEnabled && true ) {
        listitem()[]{
          navigate(pdpWorkflow(pdpMeeting))[]{
            text("Pdp workflow")[]{
            }
          }
        }
      }
      else
      {
      }
    }
  }

  define template pdpMeetingProcedures (pdpMeeting : PdpMeeting) {
    header()[]{
      dummy()[]{
        if ( pdpMeeting != null ) {
          navigate(pdpMeeting(pdpMeeting))[]{
            text(pdpMeeting.name)[]{
            }
          }
        }
        else
        {
        },
        if ( pdpMeeting == null ) {
          text("null")[]{
          }
        }
        else
        {
        }
      }
    }
    pdpMeetingProceduresList(pdpMeeting)[]{
    }
  }

  define page allTasks () {
    title()[]{
      "All tasks"
    }
    main()[]{
    }
    define local body () {
      header()[]{
        "All tasks"
      }
      section()[]{
        testRecursiveTaskList()[]{
        },
        pdpMeetingTaskList()[]{
        }
      }
    }
  }

  function testRecursiveHasProcedures ( testRecursive : TestRecursive ) : Bool
  {
    return true && testRecursive.proc2 != null && testRecursive.proc2.isEnabled && true || true && testRecursive.proc1 != null && testRecursive.proc1.isEnabled && true || true && testRecursive.testRecursiveWorkflow != null && testRecursive.testRecursiveWorkflow.isEnabled && true || false;
  }

  define template testRecursiveTaskList () {
    header()[]{
      "Test recursive"
    }
    list()[]{
      for ( testRecursive : TestRecursive where true order by null asc limit 1000 offset 0 ) {
        if ( testRecursiveHasProcedures(testRecursive) ) {
          listitem()[]{
            dummy()[]{
              if ( testRecursive != null ) {
                navigate(testRecursive(testRecursive))[]{
                  text(testRecursive.name)[]{
                  }
                }
              }
              else
              {
              },
              if ( testRecursive == null ) {
                text("null")[]{
                }
              }
              else
              {
              }
            },
            testRecursiveProceduresList(testRecursive)[]{
            }
          }
        }
        else
        {
        }
      }
    }
  }

  define page testRecursiveTasks () {
    title()[]{
      "Test recursive"
    }
    main()[]{
    }
    define local body () {
      header()[]{
        "Tasks"
      }
      testRecursiveTaskList()[]{
      }
    }
  }

  function pdpMeetingHasProcedures ( pdpMeeting : PdpMeeting ) : Bool
  {
    return securityContext.principal == pdpMeeting.employee && pdpMeeting.approveReport != null && pdpMeeting.approveReport.isEnabled && true || securityContext.principal == pdpMeeting.employee && pdpMeeting.finalizeReport != null && pdpMeeting.finalizeReport.isEnabled && true || securityContext.principal == pdpMeeting.employee && pdpMeeting.writeReport != null && pdpMeeting.writeReport.isEnabled && true || securityContext.principal == pdpMeeting.employee && pdpMeeting.managerFillInForm != null && pdpMeeting.managerFillInForm.isEnabled && true || securityContext.principal == pdpMeeting.employee && pdpMeeting.employeeFillInForm != null && pdpMeeting.employeeFillInForm.isEnabled && true || true && pdpMeeting.testReport != null && pdpMeeting.testReport.isEnabled && true || true && pdpMeeting.pdpWorkflow != null && pdpMeeting.pdpWorkflow.isEnabled && true || false;
  }

  define template pdpMeetingTaskList () {
    header()[]{
      "Pdp meeting"
    }
    list()[]{
      for ( pdpMeeting : PdpMeeting where true order by null asc limit 1000 offset 0 ) {
        if ( pdpMeetingHasProcedures(pdpMeeting) ) {
          listitem()[]{
            dummy()[]{
              if ( pdpMeeting != null ) {
                navigate(pdpMeeting(pdpMeeting))[]{
                  text(pdpMeeting.name)[]{
                  }
                }
              }
              else
              {
              },
              if ( pdpMeeting == null ) {
                text("null")[]{
                }
              }
              else
              {
              }
            },
            pdpMeetingProceduresList(pdpMeeting)[]{
            }
          }
        }
        else
        {
        }
      }
    }
  }

  define page pdpMeetingTasks () {
    title()[]{
      "Pdp meeting"
    }
    main()[]{
    }
    define local body () {
      header()[]{
        "Tasks"
      }
      pdpMeetingTaskList()[]{
      }
    }
  }

  define template testRecursiveStatusList () {
    header()[]{
      "Test recursive"
    }
    list()[]{
      for ( testRecursive : TestRecursive where true order by null asc limit 1000 offset 0 ) {
        listitem()[]{
          dummy()[]{
            if ( testRecursive != null ) {
              navigate(testRecursive(testRecursive))[]{
                text(testRecursive.name)[]{
                }
              }
            }
            else
            {
            },
            if ( testRecursive == null ) {
              text("null")[]{
              }
            }
            else
            {
            }
          },
          list()[]{
            if ( testRecursive.proc2 != null && testRecursive.proc2.isEnabled && true ) {
              if ( true ) {
                listitem()[]{
                  navigate(proc2(testRecursive))[]{
                    text("Proc2")[]{
                    },
                    ""
                  }
                }
              }
              else
              {
              }
              if ( ! true ) {
                listitem()[]{
                  text("Proc2")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            },
            if ( testRecursive.proc1 != null && testRecursive.proc1.isEnabled && true ) {
              if ( true ) {
                listitem()[]{
                  navigate(proc1(testRecursive))[]{
                    text("Proc1")[]{
                    },
                    ""
                  }
                }
              }
              else
              {
              }
              if ( ! true ) {
                listitem()[]{
                  text("Proc1")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            },
            if ( testRecursive.testRecursiveWorkflow != null && testRecursive.testRecursiveWorkflow.isEnabled && true ) {
              if ( true ) {
                listitem()[]{
                  navigate(testRecursiveWorkflow(testRecursive))[]{
                    text("Test recursive workflow")[]{
                    },
                    ""
                  }
                }
              }
              else
              {
              }
              if ( ! true ) {
                listitem()[]{
                  text("Test recursive workflow")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            }
          }
        }
      }
    }
  }

  define page testRecursiveStatus () {
    title()[]{
      "Test recursive"
    }
    main()[]{
    }
    define local body () {
      section()[]{
        header()[]{
          "Status"
        },
        section()[]{
          testRecursiveStatusList()[]{
          }
        }
      }
    }
  }

  define template pdpMeetingStatusList () {
    header()[]{
      "Pdp meeting"
    }
    list()[]{
      for ( pdpMeeting : PdpMeeting where true order by null asc limit 1000 offset 0 ) {
        listitem()[]{
          dummy()[]{
            if ( pdpMeeting != null ) {
              navigate(pdpMeeting(pdpMeeting))[]{
                text(pdpMeeting.name)[]{
                }
              }
            }
            else
            {
            },
            if ( pdpMeeting == null ) {
              text("null")[]{
              }
            }
            else
            {
            }
          },
          list()[]{
            if ( pdpMeeting.approveReport != null && pdpMeeting.approveReport.isEnabled && true ) {
              if ( securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  navigate(approveReport(pdpMeeting))[]{
                    text("Approve report")[]{
                    },
                    " (X)"
                  }
                }
              }
              else
              {
              }
              if ( ! securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  text("Approve report")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            },
            if ( pdpMeeting.finalizeReport != null && pdpMeeting.finalizeReport.isEnabled && true ) {
              if ( securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  navigate(finalizeReport(pdpMeeting))[]{
                    text("Finalize report")[]{
                    },
                    " (X)"
                  }
                }
              }
              else
              {
              }
              if ( ! securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  text("Finalize report")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            },
            if ( pdpMeeting.writeReport != null && pdpMeeting.writeReport.isEnabled && true ) {
              if ( securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  navigate(writeReport(pdpMeeting))[]{
                    text("Write report")[]{
                    },
                    ""
                  }
                }
              }
              else
              {
              }
              if ( ! securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  text("Write report")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            },
            if ( pdpMeeting.managerFillInForm != null && pdpMeeting.managerFillInForm.isEnabled && true ) {
              if ( securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  navigate(managerFillInForm(pdpMeeting))[]{
                    text("Manager fill in form")[]{
                    },
                    ""
                  }
                }
              }
              else
              {
              }
              if ( ! securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  text("Manager fill in form")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            },
            if ( pdpMeeting.employeeFillInForm != null && pdpMeeting.employeeFillInForm.isEnabled && true ) {
              if ( securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  navigate(employeeFillInForm(pdpMeeting))[]{
                    text("Employee fill in form")[]{
                    },
                    ""
                  }
                }
              }
              else
              {
              }
              if ( ! securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  text("Employee fill in form")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            },
            if ( pdpMeeting.testReport != null && pdpMeeting.testReport.isEnabled && true ) {
              if ( true ) {
                listitem()[]{
                  navigate(testReport(pdpMeeting))[]{
                    text("Test report")[]{
                    },
                    " (X)"
                  }
                }
              }
              else
              {
              }
              if ( ! true ) {
                listitem()[]{
                  text("Test report")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            },
            if ( pdpMeeting.pdpWorkflow != null && pdpMeeting.pdpWorkflow.isEnabled && true ) {
              if ( true ) {
                listitem()[]{
                  navigate(pdpWorkflow(pdpMeeting))[]{
                    text("Pdp workflow")[]{
                    },
                    ""
                  }
                }
              }
              else
              {
              }
              if ( ! true ) {
                listitem()[]{
                  text("Pdp workflow")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            }
          }
        }
      }
    }
  }

  define page pdpMeetingStatus () {
    title()[]{
      "Pdp meeting"
    }
    main()[]{
    }
    define local body () {
      section()[]{
        header()[]{
          "Status"
        },
        section()[]{
          pdpMeetingStatusList()[]{
          }
        }
      }
    }
  }

  define page procedureStatus (s : ProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  define template main () {
    top()[]{
    }
    topmenu()[]{
    }
    block("mainbody0")[]{
      block("_colmask_ _leftmenu_")[]{
        block("mainbody00 _container_")[]{
          block("sidebar2 _col1_")[]{
            sidebar()[]{
            }
          },
          block("wrapper0 _colwrap_")[]{
            block("body113 _col2_ clearfix")[]{
              body()[]{
              }
            }
          }
        }
      }
    }
    dummy()[]{
    }
    footer()[]{
    }
  }

  define template top () {
    block("logo_area0")[]{
      block("_colmask_ _leftmenu_")[]{
        block("logo_area00 _container_")[]{
          block("logos0 _col1_")[]{
            block("logos")[]{
              image("/images/webdsl_logo_small.png")[]{
              },
              image("/images/webdsl_logo_text.png")[]{
              }
            }
          },
          block("wrapper1 _colwrap_")[]{
            block("text0 _col2_ clearfix")[]{
              block("text")[]{
                text("WebWorkFlow tests")[]{
                }
              }
            }
          }
        }
      }
    }
    dummy()[]{
    }
  }

  define template topmenu () {
    menubar("horizontal")[]{
      menu()[]{
        menuheader()[]{
          navigate(home())[]{
            "Home"
          }
        }
      },
      menu()[]{
        menuheader()[]{
          "User"
        },
        menuitem()[]{
          navigate(signin())[]{
            "Sign in"
          }
        },
        menuitem()[]{
          navigate(allTasks())[]{
            "Tasks"
          }
        }
      }
    }
  }
section  basic page elements. .

  define template sidebar () {
    contextSidebar()[]{
    }
  }

  define template contextSidebar () {
    header()[]{
      "Side menu"
    }
    menuitem()[]{
      navigate(allTasks())[]{
        "Tasks"
      }
    }
  }

  define template footer () {
    "generated with "
    navigate(url("http://www.webdsl.org"))[]{
      text("WebDSL")[]{
      }
    }
    " and "
    navigate(url("http://www.strategoxt.org"))[]{
      text("Stratego/XT")[]{
      }
    }
  }

module data
section  data model .

  var aManager : User := User{username := "manager" name := "Joe Manager" password := "secret"} ;

  var aUser : User := User{username := "user" name := "Joe User" password := "secret" manager := aManager} ;

  entity User {
    username :: String ( )
    name :: String ( )
    password :: Secret ( )
    manager -> User ( )
  }

  entity PdpMeeting {
    approveReport <> ApproveReportProcedureStatus ( )
    finalizeReport <> FinalizeReportProcedureStatus ( )
    writeReport <> WriteReportProcedureStatus ( )
    managerFillInForm <> ManagerFillInFormProcedureStatus ( )
    employeeFillInForm <> EmployeeFillInFormProcedureStatus ( )
    testReport <> TestReportProcedureStatus ( )
    pdpWorkflow <> PdpWorkflowProcedureStatus ( )
    repeatUntilProc0 <> RepeatUntilProc0ProcedureStatus ( )
    andProc0 <> AndProc0ProcedureStatus ( )
    employee -> User ( )
    name :: String ( ) := this.employee.name + " PDP Form"
    employeePreparation :: Text ( )
    managerPreparation :: Text ( )
    report :: Text ( )
  }

  entity TestRecursive {
    proc2 <> Proc2ProcedureStatus ( )
    proc1 <> Proc1ProcedureStatus ( )
    testRecursiveWorkflow <> TestRecursiveWorkflowProcedureStatus ( )
    ifProc0 <> IfProc0ProcedureStatus ( )
    name :: String ( )
    comments :: String ( )
    proc1Text :: String ( )
    proc2Text :: String ( )
    child -> TestRecursive ( )
  }

module ac
access control rules
  anonymous
  rule page createPdpMeeting (  ) {
    true
    rule action * ( * ) {
      true
    }
  }
  rule page * ( * ) {
    true
    rule action * ( * ) {
      true
    }
  }
  rule action * ( * ) {
    true
  }
  rule template * ( * ) {
    true
    rule action * ( * ) {
      true
    }
  }
section  pages .

  session securityContext {
    principal -> User ( )
    loggedIn :: Bool ( )
  }

  function loggedIn ( ) : Bool
  {
    return securityContext != null && securityContext.loggedIn && securityContext.principal != null;
  }

  define page signin () {
    main()[]{
    }
    title()[]{
      "Log in"
    }
    define local body () {
      var username : String ;
      var password : Secret ;
      form()[]{
        table()[]{
          row()[]{
            "Username: ",
            inputString(username)[]{
            }
          },
          row()[]{
            "Password: ",
            inputSecret(password)[]{
            }
          },
          row()[]{
            action("Sign in", dosignin())[]{
            },
            ""
          }
        },
        action dosignin ( )
        {
          for ( us : User where us.username == username order by null asc limit 1000 offset 0 )
          {
            if ( us.password.check(password) )
            {
              securityContext.principal := us;
              securityContext.loggedIn := true;
              return allTasks();
            }
            else
            {
            }
          }
          securityContext.loggedIn := false;
          return error("Wrong combination of username and password");
        }
      }
    }
  }

  define page error (msg : String) {
    main()[]{
    }
    title()[]{
      "Error"
    }
    define local body () {
      header()[]{
        "Error"
      }
      text(msg)[]{
      }
    }
  }

  define page message (msg : String) {
    main()[]{
    }
    title()[]{
      "Message"
    }
    define local body () {
      header()[]{
        "Message"
      }
      section()[]{
        text(msg)[]{
        }
      }
    }
  }

module layout
layout
template
main()
{
top()
;
topmenu()
;
mainbody0: [ sidebar() body() ]
;
footer()
;
}
template
top()
{
logo_area0: [ logos text ]
;
}
template
footer()
{
f0: [ footer_links footer_text ]
;
}

module style
style
globalStyle
const mainColor : Color := # 330099 ;
const globalFont : Font := Font.Lucida.Grande ;
const globalFontSize : Length := 0.75em ;
const layoutBorderColor : Color := # c0c0c0 ;
.section {
  font := Font.Lucida.Grande;
  font-size := 0.75em;
}
a {
  font := Font.Lucida.Grande;
  font-size := 0.75em;
}
h1 {
  font := Font.Lucida.Grande;
  font-size := 0.99997499999999995em;
  margin-top := 0px;
}
table {
  font := Font.Lucida.Grande;
  font-size := 0.75em;
}
table >> tr > th {
  border-top-color := #c0c0c0;
  border-right-color := #c0c0c0;
  border-bottom-color := #c0c0c0;
  border-left-color := #c0c0c0;
  font := Font.Lucida.Grande;
  font-size := 1em;
  font-weight := bold;
  color := #404040;
  image := url("images/menubar_bg.png");
  background-repeat := repeat-x;
}
table >> tr > td {
  background-color := Color.white;
}
.block {
  font := Font.Lucida.Grande;
  font-size := 1em;
}
form {
  font := Font.Lucida.Grande;
  font-size := 0.75em;
}
form >> fieldset {
  font-size := 0.99974999999999992em;
}
fieldset {
  font := Font.Lucida.Grande;
  font-size := 0.75em;
}
fieldset >> a {
  font-size := 0.99974999999999992em;
}
style
templateStyle
template topmenu() {
  border-top-color := #c0c0c0;
  border-right-color := #c0c0c0;
  border-bottom-color := #c0c0c0;
  border-left-color := #c0c0c0;
  border-top-width := 1px;
  border-right-width := 1px;
  border-bottom-width := 1px;
  border-left-width := 1px;
  border-top-style := BorderStyle.solid;
  border-right-style := BorderStyle.solid;
  border-bottom-style := BorderStyle.solid;
  border-left-style := BorderStyle.solid;
  width := 100%;
  margin-bottom := 1em;
}
template top() {
  background-color := Color.white;
  width := 100%;
}
template top() >> .logos {
  width := 25em;
}
template top() > .logo_area0 {
  margin-left := auto;
  margin-right := auto;
  width := 80%;
}
template main() > .mainbody0 {
  margin-left := auto;
  margin-right := auto;
  width := 80%;
  padding-top := 4px;
}
template sidebar() {
  width := 15em;
  padding := 1em;
}
template body() {
  padding := 1em;
  border-left-color := #c0c0c0;
  border-left-style := BorderStyle.solid;
  border-left-width := 1px;
}
template footer() {
  background-color := Color.white;
  border-top-width := 1px;
  border-top-color := #c0c0c0;
  border-top-style := BorderStyle.solid;
  font := Font.Lucida.Grande;
  font-size := 0.7em;
  width := 100%;
  margin-top := 1em;
}
style
formStyle
const labelWidth : Length := 8em ;
const formItemSpacing : Length := 0.3em ;
fieldset > ol > li {
  padding-bottom := 0.3em;
}
fieldset {
  image := url("images/background_gradient.png");
  border-top-color := #003399;
  border-bottom-color := #003399;
  background-color := #ccccff;
}
style
menuStyle
const globalBorderColor : Color := # c0c0c0 ;
const fontColor : Color := # 505050 ;
template topmenu() {
  background-color := #ffff00;
  image := url("images/menubar_bg.png");
  background-repeat := repeat-x;
}
template topmenu() >> .menubar {
  margin-left := auto;
  margin-right := auto;
  width := 80%;
}
template topmenu() >> .menu > .menuheader > a {
  padding := 0.3em;
  font := Font.Lucida.Grande;
  color := #505050;
  font-size := 0.75em;
  text-decoration := none;
}
template topmenu() >> .menu >> a .hover {
  image := url("images/menubar_bg_hover.png");
  background-repeat := repeat-x;
}
style
footerStyle
template footer() >> ul > li {
  float := left;
}
template footer() >> ul > li .before {
  content := '|';
}
template footer() >> ul > li .before {
  margin-right := 1em;
  margin-left := 1em;
}
template footer() >> .footer_text {
  float := right;
}
template footer() >> .footer_links {
  float := left;
}
template footer() >> a {
  font-size := 1.0em;
}
template footer() >> ul {
  list-style := none;
  padding-left := 0;
  separator := Separator.pipe;
}
style
groupStyle
fieldset >> label {
  width := 13em;
}
fieldset >> .text {
  width := 40em;
}
ol > li >> p {
  font-weight := bold;
}

section  procedures .

  entity AndProc0ProcedureStatus : ProcedureStatus {
    otherBranch :: Int ( )
    p -> PdpMeeting ( )
    function next ( state : Int ) : Void
    {
      if ( state == 0 )
      {
        this.p.writeReport.enable(this as ProcedureStatus, 1, 1);
      }
      else
      {
      }
      if ( state == 1 )
      {
        if ( this.otherBranch == 0 )
        {
          this.otherBranch := 1;
          this.persist();
        }
        else
        {
          this.otherBranch := 0;
          this.processed();
        }
      }
      else
      {
      }
      if ( state == 2 )
      {
        this.p.employeeFillInForm.enable(this as ProcedureStatus, 3, 2);
      }
      else
      {
      }
      if ( state == 3 )
      {
        if ( this.otherBranch == 0 )
        {
          this.otherBranch := 1;
          this.persist();
        }
        else
        {
          this.otherBranch := 0;
          this.processed();
        }
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
      this.next(0);
      this.next(2);
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.next(0);
    }
    function disabled ( ) : Void
    {
      this.p.writeReport.disable();
      this.p.employeeFillInForm.disable();
    }
  }

  define page andProc0ProcedureStatus (s : AndProc0ProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Other branch: ")[]{
                outputInt(s.otherBranch)[]{
                }
              }
            },
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  define page andProc0 (p : PdpMeeting) {
  }

  entity RepeatUntilProc0ProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function next ( state : Int ) : Void
    {
      if ( state == 0 )
      {
        this.p.andProc0.enable(this as ProcedureStatus, 1, 1);
      }
      else
      {
      }
      if ( state == 1 )
      {
        this.p.approveReport.enable(this as ProcedureStatus, 2, 1);
      }
      else
      {
      }
      if ( state == 2 )
      {
        this.enableRepeat();
        this.enableUntil();
      }
      else
      {
      }
      if ( state == 3 )
      {
        this.p.finalizeReport.enable(this as ProcedureStatus, 4, 2);
      }
      else
      {
      }
      if ( state == 4 )
      {
        this.disableRepeat();
        this.processed();
      }
      else
      {
      }
    }
    function enableRepeat ( ) : Void
    {
      this.next(0);
    }
    function disableRepeat ( ) : Void
    {
      this.p.andProc0.disable();
      this.p.approveReport.disable();
    }
    function enableUntil ( ) : Void
    {
      this.next(3);
    }
    function notifyOfActivity ( branch : Int ) : Void
    {
      this.cascadeNotification();
      if ( branch == 1 )
      {
        this.p.finalizeReport.disable();
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
      this.enableRepeat();
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.next(0);
    }
    function disabled ( ) : Void
    {
      this.p.andProc0.disable();
      this.p.approveReport.disable();
      this.p.finalizeReport.disable();
    }
  }

  define page repeatUntilProc0ProcedureStatus (s : RepeatUntilProc0ProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  define page repeatUntilProc0 (p : PdpMeeting) {
  }

  entity PdpWorkflowProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function next ( state : Int ) : Void
    {
      if ( state == 0 )
      {
        this.p.repeatUntilProc0.enable(this as ProcedureStatus, 1, 0);
      }
      else
      {
      }
      if ( state == 1 )
      {
        this.processed();
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
      this.p.report := "Kanarie";
      this.p.persist();
      this.p.pdpWorkflow.done();
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.next(0);
    }
    function disabled ( ) : Void
    {
    }
  }

  define page pdpWorkflowProcedureStatus (s : PdpWorkflowProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  entity TestReportProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
  }

  define page testReportProcedureStatus (s : TestReportProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  entity EmployeeFillInFormProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
  }

  define page employeeFillInFormProcedureStatus (s : EmployeeFillInFormProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  entity ManagerFillInFormProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
  }

  define page managerFillInFormProcedureStatus (s : ManagerFillInFormProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  entity WriteReportProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
  }

  define page writeReportProcedureStatus (s : WriteReportProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  entity FinalizeReportProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
  }

  define page finalizeReportProcedureStatus (s : FinalizeReportProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  entity ApproveReportProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
  }

  define page approveReportProcedureStatus (s : ApproveReportProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("P: ")[]{
                dummy()[]{
                  if ( s.p != null ) {
                    navigate(pdpMeeting(s.p))[]{
                      text(s.p.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.p == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  entity IfProc0ProcedureStatus : ProcedureStatus {
    t -> TestRecursive ( )
    function next ( state : Int ) : Void
    {
      if ( state == 0 )
      {
        this.t.child.testRecursiveWorkflow.enable(this as ProcedureStatus, 1, 1);
      }
      else
      {
      }
      if ( state == 1 )
      {
        this.processed();
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
      if ( this.t.child != null )
      {
        this.next(0);
      }
      else
      {
        this.processed();
      }
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.next(0);
    }
    function disabled ( ) : Void
    {
      this.t.child.testRecursiveWorkflow.disable();
    }
  }

  define page ifProc0ProcedureStatus (s : IfProc0ProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("T: ")[]{
                dummy()[]{
                  if ( s.t != null ) {
                    navigate(testRecursive(s.t))[]{
                      text(s.t.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.t == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("T: ")[]{
                dummy()[]{
                  if ( s.t != null ) {
                    navigate(testRecursive(s.t))[]{
                      text(s.t.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.t == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  define page ifProc0 (t : TestRecursive) {
  }

  entity TestRecursiveWorkflowProcedureStatus : ProcedureStatus {
    t -> TestRecursive ( )
    function next ( state : Int ) : Void
    {
      if ( state == 0 )
      {
        this.t.proc1.enable(this as ProcedureStatus, 1, 0);
      }
      else
      {
      }
      if ( state == 1 )
      {
        this.t.ifProc0.enable(this as ProcedureStatus, 2, 0);
      }
      else
      {
      }
      if ( state == 2 )
      {
        this.t.proc2.enable(this as ProcedureStatus, 3, 0);
      }
      else
      {
      }
      if ( state == 3 )
      {
        this.processed();
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
      this.t.testRecursiveWorkflow.done();
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.next(0);
    }
    function disabled ( ) : Void
    {
    }
  }

  define page testRecursiveWorkflowProcedureStatus (s : TestRecursiveWorkflowProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("T: ")[]{
                dummy()[]{
                  if ( s.t != null ) {
                    navigate(testRecursive(s.t))[]{
                      text(s.t.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.t == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("T: ")[]{
                dummy()[]{
                  if ( s.t != null ) {
                    navigate(testRecursive(s.t))[]{
                      text(s.t.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.t == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  entity Proc1ProcedureStatus : ProcedureStatus {
    t -> TestRecursive ( )
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
  }

  define page proc1ProcedureStatus (s : Proc1ProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("T: ")[]{
                dummy()[]{
                  if ( s.t != null ) {
                    navigate(testRecursive(s.t))[]{
                      text(s.t.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.t == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("T: ")[]{
                dummy()[]{
                  if ( s.t != null ) {
                    navigate(testRecursive(s.t))[]{
                      text(s.t.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.t == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  entity Proc2ProcedureStatus : ProcedureStatus {
    t -> TestRecursive ( )
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
  }

  define page proc2ProcedureStatus (s : Proc2ProcedureStatus) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(s.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("T: ")[]{
                dummy()[]{
                  if ( s.t != null ) {
                    navigate(testRecursive(s.t))[]{
                      text(s.t.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.t == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("T: ")[]{
                dummy()[]{
                  if ( s.t != null ) {
                    navigate(testRecursive(s.t))[]{
                      text(s.t.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.t == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(s.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Is enabled: ")[]{
                outputBool(s.isEnabled)[]{
                }
              }
            },
            groupitem()[]{
              label("Date: ")[]{
                outputDateTime(s.date)[]{
                }
              }
            },
            groupitem()[]{
              label("Caller: ")[]{
                dummy()[]{
                  if ( s.caller != null ) {
                    navigate(procedureStatus(s.caller))[]{
                      text(s.caller.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( s.caller == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Returnstate: ")[]{
                outputInt(s.returnstate)[]{
                }
              }
            },
            groupitem()[]{
              label("Branch: ")[]{
                outputInt(s.branch)[]{
                }
              }
            }
          }
        }
      }
    }
  }

  define page pdpWorkflow (p : PdpMeeting) {
  }

  define page testReport (p : PdpMeeting) {
    init
    {
      p.testReport.done();
      goto pdpMeeting(p);
    }
  }

  define page employeeFillInForm (p : PdpMeeting) {
    dummy()[]{
      main()[]{
      },
      define local contextSidebar () {
        pdpMeetingProcedures(p)[]{
        }
      },
      define local body () {
        form()[]{
          group("Details")[]{
            dummy()[]{
              groupitem()[]{
                label("Employee preparation: ")[]{
                  inputText(p.employeePreparation)[]{
                  }
                }
              }
            }
          },
          dummy()[]{
            action("Submit", doAction())[]{
            },
            action doAction ( )
            {
              p.persist();
              p.employeeFillInForm.done();
              return pdpMeeting(p);
            }
          }
        }
      }
    }
  }

  define page managerFillInForm (p : PdpMeeting) {
    title()[]{
      "Fill in manager form"
    }
    dummy()[]{
      main()[]{
      },
      define local contextSidebar () {
        pdpMeetingProcedures(p)[]{
        }
      },
      define local body () {
        form()[]{
          group("Details")[]{
            dummy()[]{
              groupitem()[]{
                label("Manager preparation: ")[]{
                  inputText(p.managerPreparation)[]{
                  }
                }
              }
            }
          },
          dummy()[]{
            action("Submit", doAction())[]{
            },
            action doAction ( )
            {
              p.persist();
              p.managerFillInForm.done();
              return pdpMeeting(p);
            }
          }
        }
      }
    }
  }

  define page writeReport (p : PdpMeeting) {
    dummy()[]{
      main()[]{
      },
      define local contextSidebar () {
        pdpMeetingProcedures(p)[]{
        }
      },
      define local body () {
        form()[]{
          group("Details")[]{
            dummy()[]{
              groupitem()[]{
                label("Report: ")[]{
                  inputText(p.report)[]{
                  }
                }
              }
            }
          },
          dummy()[]{
            action("Submit", doAction())[]{
            },
            action doAction ( )
            {
              p.persist();
              p.writeReport.done();
              return pdpMeeting(p);
            }
          }
        }
      }
    }
  }

  define page finalizeReport (p : PdpMeeting) {
    init
    {
      p.finalizeReport.done();
      goto pdpMeeting(p);
    }
  }

  define page approveReport (p : PdpMeeting) {
    init
    {
      p.approveReport.done();
      goto pdpMeeting(p);
    }
  }

  define page testRecursiveWorkflow (t : TestRecursive) {
  }

  define page proc1 (t : TestRecursive) {
    dummy()[]{
      main()[]{
      },
      define local contextSidebar () {
        testRecursiveProcedures(t)[]{
        }
      },
      define local body () {
        form()[]{
          group("Details")[]{
            dummy()[]{
              groupitem()[]{
                label("Proc1 text: ")[]{
                  inputString(t.proc1Text)[]{
                  }
                }
              }
            }
          },
          dummy()[]{
            action("Submit", doAction())[]{
            },
            action doAction ( )
            {
              t.persist();
              t.proc1.done();
              return testRecursive(t);
            }
          }
        }
      }
    }
  }

  define page proc2 (t : TestRecursive) {
    dummy()[]{
      main()[]{
      },
      define local contextSidebar () {
        testRecursiveProcedures(t)[]{
        }
      },
      define local body () {
        form()[]{
          group("Details")[]{
            dummy()[]{
              groupitem()[]{
                label("Proc2 text: ")[]{
                  inputString(t.proc2Text)[]{
                  }
                }
              }
            }
          },
          dummy()[]{
            action("Submit", doAction())[]{
            },
            action doAction ( )
            {
              t.persist();
              t.proc2.done();
              return testRecursive(t);
            }
          }
        }
      }
    }
  }

section  pages .

  var test3 : TestRecursive ;

  define template body () {
  }

  define page home () {
    main()[]{
    }
    define local body () {
      var employee : User ;
      header()[]{
        "Home"
      }
      section()[]{
        form()[]{
          header()[]{
            "Quick start PDP Meeting for employee"
          },
          action("Quick start", quickStart())[]{
          },
          action quickStart ( )
          {
            var p : PdpMeeting := newPdpMeeting() ;
            p.employee := aUser;
            p.persist();
            p.pdpWorkflow.enable();
            if ( securityContext.loggedIn )
            {
              return message("Workflows started!");
            }
            else
            {
              return signin();
            }
          }
        }
      }
      section()[]{
        form()[]{
          header()[]{
            "Organize PDP Meeting"
          },
          "For: ",
          block("inputSimpleRefAssociation")[]{
            select ( user0 : User , Select , employee )
          },
          action("Organize", organize())[]{
          },
          action organize ( )
          {
            var p : PdpMeeting := newPdpMeeting() ;
            p.employee := employee;
            p.persist();
            p.pdpWorkflow.enable();
            if ( securityContext.loggedIn )
            {
              return message("Workflows started!");
            }
            else
            {
              return signin();
            }
          }
        }
      }
    }
  }

  define page allMeetings () {
    main()[]{
    }
    define local body () {
      for ( p : PdpMeeting where true order by null asc limit 1000 offset 0 ) {
        text(p.name)[]{
        }
        text(" ")[]{
        }
      }
    }
  }

access control rules
  anonymous
  rule page pdpMeeting ( pdpMeeting : PdpMeeting ) {
    securityContext.principal == pdpMeeting.employee || securityContext.principal == pdpMeeting.employee.manager
    rule action * ( * ) {
      securityContext.principal == pdpMeeting.employee || securityContext.principal == pdpMeeting.employee.manager
    }
  }
  rule page testRecursive ( t : testRecursive ) {
    true
    rule action * ( * ) {
      true
    }
  }

section  pages .

  define page pdpMeeting (p : PdpMeeting) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(p.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("Employee: ")[]{
                dummy()[]{
                  if ( p.employee != null ) {
                    navigate(user(p.employee))[]{
                      text(p.employee.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( p.employee == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(p.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Employee preparation: ")[]{
                outputText(p.employeePreparation)[]{
                }
              }
            },
            groupitem()[]{
              label("Manager preparation: ")[]{
                outputText(p.managerPreparation)[]{
                }
              }
            },
            groupitem()[]{
              label("Report: ")[]{
                outputText(p.report)[]{
                }
              }
            }
          }
        }
      },
      define local contextSidebar () {
        pdpMeetingProcedures(p)[]{
        }
      }
    }
  }

  define page user (u : User) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(u.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("Username: ")[]{
                text(u.username)[]{
                }
              }
            },
            groupitem()[]{
              label("Name: ")[]{
                text(u.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Password: ")[]{
                outputSecret(u.password)[]{
                }
              }
            },
            groupitem()[]{
              label("Manager: ")[]{
                dummy()[]{
                  if ( u.manager != null ) {
                    navigate(user(u.manager))[]{
                      text(u.manager.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( u.manager == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  define page testRecursive (t : TestRecursive) {
    dummy()[]{
      main()[]{
      },
      define local body () {
        header()[]{
          text(t.name)[]{
          }
        }
        group("Details")[]{
          dummy()[]{
            groupitem()[]{
              label("Name: ")[]{
                text(t.name)[]{
                }
              }
            },
            groupitem()[]{
              label("Comments: ")[]{
                text(t.comments)[]{
                }
              }
            },
            groupitem()[]{
              label("Proc1 text: ")[]{
                text(t.proc1Text)[]{
                }
              }
            },
            groupitem()[]{
              label("Proc2 text: ")[]{
                text(t.proc2Text)[]{
                }
              }
            },
            groupitem()[]{
              label("Child: ")[]{
                dummy()[]{
                  if ( t.child != null ) {
                    navigate(testRecursive(t.child))[]{
                      text(t.child.name)[]{
                      }
                    }
                  }
                  else
                  {
                  },
                  if ( t.child == null ) {
                    text("null")[]{
                    }
                  }
                  else
                  {
                  }
                }
              }
            }
          }
        }
      },
      define local contextSidebar () {
        testRecursiveProcedures(t)[]{
        }
      }
    }
  }