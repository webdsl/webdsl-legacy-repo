application org.webdsl.testProcess

access control rules
  anonymous
  rule page pdpWorkflow ( p : PdpMeeting ) {
    true && true && true && true && p.pdpWorkflow.isEnabled
    rule action doAction (  ) {
      true && true && true && true && p.pdpWorkflow.isEnabled
    }
  }

access control rules
  anonymous
  rule page employeeFillInForm ( p : PdpMeeting ) {
    true && securityContext.principal == p.employee && true && true && p.employeeFillInForm.isEnabled
    rule action doAction (  ) {
      true && securityContext.principal == p.employee && true && true && p.employeeFillInForm.isEnabled
    }
  }

access control rules
  anonymous
  rule page managerFillInForm ( p : PdpMeeting ) {
    true && true && securityContext.principal == p.employee.manager && true && p.managerFillInForm.isEnabled
    rule action doAction (  ) {
      true && true && securityContext.principal == p.employee.manager && true && p.managerFillInForm.isEnabled
    }
  }

access control rules
  anonymous
  rule page writeReport ( p : PdpMeeting ) {
    true && true && securityContext.principal == p.employee.manager && true && p.writeReport.isEnabled
    rule action doAction (  ) {
      true && true && securityContext.principal == p.employee.manager && true && p.writeReport.isEnabled
    }
  }

access control rules
  anonymous
  rule page finalizeReport ( p : PdpMeeting ) {
    true && true && securityContext.principal == p.employee.manager && p.finalizeReport.isEnabled
    rule action doAction (  ) {
      true && true && securityContext.principal == p.employee.manager && p.finalizeReport.isEnabled
    }
  }

access control rules
  anonymous
  rule page approveReport ( p : PdpMeeting ) {
    true && true && securityContext.principal == p.employee && p.approveReport.isEnabled
    rule action doAction (  ) {
      true && true && securityContext.principal == p.employee && p.approveReport.isEnabled
    }
  }

access control rules
  anonymous
  rule page repeatUntilProc1 ( p : PdpMeeting ) {
    true && true && true && true && true && p.repeatUntilProc1.isEnabled
    rule action doAction (  ) {
      true && true && true && true && true && p.repeatUntilProc1.isEnabled
    }
  }

access control rules
  anonymous
  rule page repeatUntilProc0 ( p : PdpMeeting ) {
    true && true && true && true && true && p.repeatUntilProc0.isEnabled
    rule action doAction (  ) {
      true && true && true && true && true && p.repeatUntilProc0.isEnabled
    }
  }

access control rules
  anonymous
  rule page andProc0 ( p : PdpMeeting ) {
    true && true && true && true && true && p.andProc0.isEnabled
    rule action doAction (  ) {
      true && true && true && true && true && p.andProc0.isEnabled
    }
  }

section definitions .

  entity ProcedureStatus {
    caller -> ProcedureStatus ( )
    returnstate :: Int ( )
    branch :: Int ( )
    name :: String ( ) := "Procedure status"
    isEnabled :: Bool ( )
    isProcessed :: Bool ( )
    date :: DateTime ( )
    function enable ( c : ProcedureStatus r : Int b : Int ) : Void
    {
      this.isEnabled := true;
      this.caller := c;
      this.branch := b;
      this.returnstate := r;
      this.persist();
      this.enabled();
    }
    function next ( state : Int ) : Void
    {
    }
    function processed ( ) : Void
    {
      this.isEnabled := false;
      this.isProcessed := true;
      this.persist();
      if ( this.caller != null )
      {
        if ( this.branch != null )
        {
          this.caller.notifyOfActivity(this.branch);
        }
        else
        {
        }
        this.caller.next(this.returnstate);
      }
      else
      {
      }
    }
    function notifyOfActivity ( branch : Int ) : Void
    {
      this.cascadeNotification();
    }
    function cascadeNotification ( ) : Void
    {
      if ( this.caller != null && this.branch != null )
      {
        this.caller.notifyOfActivity(this.branch);
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
    }
    function disabled ( ) : Void
    {
    }
    function do ( ) : Void
    {
    }
    function done ( ) : Void
    {
    }
    function enable ( ) : Void
    {
      this.isEnabled := true;
      this.persist();
      this.enabled();
    }
    function disable ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.disabled();
    }
  }

  define template pdpMeetingProceduresList (pdpMeeting : PdpMeeting) {
    list()[]{
      if ( securityContext.principal == pdpMeeting.employee && pdpMeeting.approveReport != null && pdpMeeting.approveReport.isEnabled && true ) {
        listitem()[]{
          navigatebutton(approveReport(pdpMeeting), "Approve report")[]{
          }
        }
      }
      else
      {
      } 
      if ( securityContext.principal == pdpMeeting.employee.manager && pdpMeeting.finalizeReport != null && pdpMeeting.finalizeReport.isEnabled && true ) {
        listitem()[]{
          navigatebutton(finalizeReport(pdpMeeting), "Finalize report")[]{
          }
        }
      }
      else
      {
      } 
      if ( securityContext.principal == pdpMeeting.employee.manager && pdpMeeting.writeReport != null && pdpMeeting.writeReport.isEnabled && true ) {
        listitem()[]{
          navigate(writeReport(pdpMeeting))[]{
            text("Write report")[]{
            }
          }
        }
      }
      else
      {
      } 
      if ( securityContext.principal == pdpMeeting.employee.manager && pdpMeeting.managerFillInForm != null && pdpMeeting.managerFillInForm.isEnabled && true ) {
        listitem()[]{
          navigate(managerFillInForm(pdpMeeting))[]{
            text("Manager fill in form")[]{
            }
          }
        }
      }
      else
      {
      } 
      if ( securityContext.principal == pdpMeeting.employee && pdpMeeting.employeeFillInForm != null && pdpMeeting.employeeFillInForm.isEnabled && true ) {
        listitem()[]{
          navigate(employeeFillInForm(pdpMeeting))[]{
            text("Employee fill in form")[]{
            }
          }
        }
      }
      else
      {
      } 
      if ( true && pdpMeeting.pdpWorkflow != null && pdpMeeting.pdpWorkflow.isEnabled && true ) {
        listitem()[]{
          navigate(pdpWorkflow(pdpMeeting))[]{
            text("Pdp workflow")[]{
            }
          }
        }
      }
      else
      {
      }
    }
  }

  define template pdpMeetingProcedures (pdpMeeting : PdpMeeting) {
    header()[]{
      if ( pdpMeeting != null ) {
        navigate(pdpMeeting(pdpMeeting))[]{
          text(pdpMeeting.name)[]{
          }
        }
      }
      else
      {
      } 
      if ( pdpMeeting == null ) {
        text("null")[]{
        }
      }
      else
      {
      }
    }
    pdpMeetingProceduresList(pdpMeeting)[]{
    }
  }

  define page allTasks () {
    title()[]{
      "All tasks"
    }
    main()[]{
    }
    define local body () {
      header()[]{
        "All tasks"
      }
      section()[]{
        pdpMeetingTaskList()[]{
        }
      }
    }
  }

  function pdpMeetingHasProcedures ( pdpMeeting : PdpMeeting ) : Bool
  {
    return securityContext.principal == pdpMeeting.employee && pdpMeeting.approveReport != null && pdpMeeting.approveReport.isEnabled && true || securityContext.principal == pdpMeeting.employee.manager && pdpMeeting.finalizeReport != null && pdpMeeting.finalizeReport.isEnabled && true || securityContext.principal == pdpMeeting.employee.manager && pdpMeeting.writeReport != null && pdpMeeting.writeReport.isEnabled && true || securityContext.principal == pdpMeeting.employee.manager && pdpMeeting.managerFillInForm != null && pdpMeeting.managerFillInForm.isEnabled && true || securityContext.principal == pdpMeeting.employee && pdpMeeting.employeeFillInForm != null && pdpMeeting.employeeFillInForm.isEnabled && true || true && pdpMeeting.pdpWorkflow != null && pdpMeeting.pdpWorkflow.isEnabled && true || false;
  }

  define template pdpMeetingTaskList () {
    header()[]{
      "Pdp meeting"
    }
    list()[]{
      for ( pdpMeeting : PdpMeeting where true order by null asc limit 1000 offset 0 ) {
        if ( pdpMeetingHasProcedures(pdpMeeting) ) {
          listitem()[]{
            if ( pdpMeeting != null ) {
              navigate(pdpMeeting(pdpMeeting))[]{
                text(pdpMeeting.name)[]{
                }
              }
            }
            else
            {
            } 
            if ( pdpMeeting == null ) {
              text("null")[]{
              }
            }
            else
            {
            } 
            pdpMeetingProceduresList(pdpMeeting)[]{
            }
          }
        }
        else
        {
        }
      }
    }
  }

  define page pdpMeetingTasks () {
    title()[]{
      "Pdp meeting"
    }
    main()[]{
    }
    define local body () {
      header()[]{
        "Tasks"
      }
      pdpMeetingTaskList()[]{
      }
    }
  }

  define template pdpMeetingStatusList () {
    header()[]{
      "Pdp meeting"
    }
    list()[]{
      for ( pdpMeeting : PdpMeeting where true order by null asc limit 1000 offset 0 ) {
        listitem()[]{
          if ( pdpMeeting != null ) {
            navigate(pdpMeeting(pdpMeeting))[]{
              text(pdpMeeting.name)[]{
              }
            }
          }
          else
          {
          } 
          if ( pdpMeeting == null ) {
            text("null")[]{
            }
          }
          else
          {
          } 
          list()[]{
            if ( pdpMeeting.approveReport != null && pdpMeeting.approveReport.isEnabled && true ) {
              if ( securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  navigate(approveReport(pdpMeeting))[]{
                    text("Approve report")[]{
                    } 
                    " (X)"
                  }
                }
              }
              else
              {
              }
              if ( ! securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  text("Approve report")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            } 
            if ( pdpMeeting.finalizeReport != null && pdpMeeting.finalizeReport.isEnabled && true ) {
              if ( securityContext.principal == pdpMeeting.employee.manager ) {
                listitem()[]{
                  navigate(finalizeReport(pdpMeeting))[]{
                    text("Finalize report")[]{
                    } 
                    " (X)"
                  }
                }
              }
              else
              {
              }
              if ( ! securityContext.principal == pdpMeeting.employee.manager ) {
                listitem()[]{
                  text("Finalize report")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            } 
            if ( pdpMeeting.writeReport != null && pdpMeeting.writeReport.isEnabled && true ) {
              if ( securityContext.principal == pdpMeeting.employee.manager ) {
                listitem()[]{
                  navigate(writeReport(pdpMeeting))[]{
                    text("Write report")[]{
                    } 
                    ""
                  }
                }
              }
              else
              {
              }
              if ( ! securityContext.principal == pdpMeeting.employee.manager ) {
                listitem()[]{
                  text("Write report")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            } 
            if ( pdpMeeting.managerFillInForm != null && pdpMeeting.managerFillInForm.isEnabled && true ) {
              if ( securityContext.principal == pdpMeeting.employee.manager ) {
                listitem()[]{
                  navigate(managerFillInForm(pdpMeeting))[]{
                    text("Manager fill in form")[]{
                    } 
                    ""
                  }
                }
              }
              else
              {
              }
              if ( ! securityContext.principal == pdpMeeting.employee.manager ) {
                listitem()[]{
                  text("Manager fill in form")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            } 
            if ( pdpMeeting.employeeFillInForm != null && pdpMeeting.employeeFillInForm.isEnabled && true ) {
              if ( securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  navigate(employeeFillInForm(pdpMeeting))[]{
                    text("Employee fill in form")[]{
                    } 
                    ""
                  }
                }
              }
              else
              {
              }
              if ( ! securityContext.principal == pdpMeeting.employee ) {
                listitem()[]{
                  text("Employee fill in form")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            } 
            if ( pdpMeeting.pdpWorkflow != null && pdpMeeting.pdpWorkflow.isEnabled && true ) {
              if ( true ) {
                listitem()[]{
                  navigate(pdpWorkflow(pdpMeeting))[]{
                    text("Pdp workflow")[]{
                    } 
                    ""
                  }
                }
              }
              else
              {
              }
              if ( ! true ) {
                listitem()[]{
                  text("Pdp workflow")[]{
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            }
          }
        }
      }
    }
  }

  define page pdpMeetingStatus () {
    title()[]{
      "Pdp meeting"
    }
    main()[]{
    }
    define local body () {
      section()[]{
        header()[]{
          "Status"
        } 
        section()[]{
          pdpMeetingStatusList()[]{
          }
        }
      }
    }
  }

  define page procedureStatus (s : ProcedureStatus) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(s.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_0"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_0]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_1"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_1]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_2"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(s.name)[id := forid_2]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is enabled: ")[for := "forid_3"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isEnabled)[id := forid_3]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is processed: ")[for := "forid_4"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isProcessed)[id := forid_4]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Date: ")[for := "forid_5"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputDateTime(s.date)[id := forid_5]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_6"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_6]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_7"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_7]{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  description {
    A workflow example for a personal development plan workflow
  }

  note
  end

  note
  end

  note
  end

  note
  end

  note
  end

section  procedures .

  entity AndProc0ProcedureStatus : ProcedureStatus {
    otherBranch :: Int ( )
    p -> PdpMeeting ( )
    function next ( state : Int ) : Void
    {
      if ( state == 0 )
      {
        this.p.prepareEmployeeFillInForm();
        this.p.employeeFillInForm.enable(this as ProcedureStatus, 1, 1);
      }
      else
      {
      }
      if ( state == 1 )
      {
        if ( this.otherBranch == 0 )
        {
          this.otherBranch := 1;
          this.persist();
        }
        else
        {
          this.otherBranch := 0;
          this.processed();
        }
      }
      else
      {
      }
      if ( state == 2 )
      {
        this.p.prepareManagerFillInForm();
        this.p.managerFillInForm.enable(this as ProcedureStatus, 3, 2);
      }
      else
      {
      }
      if ( state == 3 )
      {
        if ( this.otherBranch == 0 )
        {
          this.otherBranch := 1;
          this.persist();
        }
        else
        {
          this.otherBranch := 0;
          this.processed();
        }
      }
      else
      {
      }
    }
    function processed ( ) : Void
    {
      this.isEnabled := false;
      this.isProcessed := true;
      this.persist();
      if ( this.caller != null )
      {
        if ( this.branch != null )
        {
          this.caller.notifyOfActivity(this.branch);
        }
        else
        {
        }
        this.caller.next(this.returnstate);
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
      this.next(0);
      this.next(2);
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.next(0);
    }
    function disabled ( ) : Void
    {
      if ( this.p.employeeFillInForm != null )
      {
        this.p.employeeFillInForm.disable();
      }
      else
      {
      }
      if ( this.p.managerFillInForm != null )
      {
        this.p.managerFillInForm.disable();
      }
      else
      {
      }
    }
    function canPerform ( ) : Bool
    {
      return true && true && true && true && true && this.isEnabled;
    }
  }

  define page andProc0ProcedureStatus (s : AndProc0ProcedureStatus) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(s.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Other branch: ")[for := "forid_75"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.otherBranch)[id := forid_75]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_76"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_76]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_77"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_77]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_78"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(s.name)[id := forid_78]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is enabled: ")[for := "forid_79"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isEnabled)[id := forid_79]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is processed: ")[for := "forid_80"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isProcessed)[id := forid_80]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Date: ")[for := "forid_81"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputDateTime(s.date)[id := forid_81]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_82"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_82]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_83"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_83]{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  define page andProc0 (p : PdpMeeting) {
  }

  entity RepeatUntilProc0ProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function next ( state : Int ) : Void
    {
      if ( state == 0 )
      {
        this.p.prepareWriteReport();
        this.p.writeReport.enable(this as ProcedureStatus, 1, 1);
      }
      else
      {
      }
      if ( state == 1 )
      {
        this.enableRepeat();
        this.enableUntil();
      }
      else
      {
      }
      if ( state == 2 )
      {
        this.p.prepareApproveReport();
        this.p.approveReport.enable(this as ProcedureStatus, 3, 2);
      }
      else
      {
      }
      if ( state == 3 )
      {
        this.disableRepeat();
        this.processed();
      }
      else
      {
      }
    }
    function enableRepeat ( ) : Void
    {
      this.next(0);
    }
    function disableRepeat ( ) : Void
    {
      if ( this.p.writeReport != null )
      {
        this.p.writeReport.disable();
      }
      else
      {
      }
    }
    function enableUntil ( ) : Void
    {
      this.next(2);
    }
    function notifyOfActivity ( branch : Int ) : Void
    {
      this.cascadeNotification();
      if ( branch == 1 )
      {
        if ( this.p.approveReport != null )
        {
          this.p.approveReport.disable();
        }
        else
        {
        }
      }
      else
      {
      }
    }
    function processed ( ) : Void
    {
      this.isEnabled := false;
      this.isProcessed := true;
      this.persist();
      if ( this.caller != null )
      {
        if ( this.branch != null )
        {
          this.caller.notifyOfActivity(this.branch);
        }
        else
        {
        }
        this.caller.next(this.returnstate);
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
      this.enableRepeat();
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.next(0);
    }
    function disabled ( ) : Void
    {
      if ( this.p.writeReport != null )
      {
        this.p.writeReport.disable();
      }
      else
      {
      }
      if ( this.p.approveReport != null )
      {
        this.p.approveReport.disable();
      }
      else
      {
      }
    }
    function canPerform ( ) : Bool
    {
      return true && true && true && true && true && this.isEnabled;
    }
  }

  define page repeatUntilProc0ProcedureStatus (s : RepeatUntilProc0ProcedureStatus) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(s.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_67"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_67]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_68"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_68]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_69"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(s.name)[id := forid_69]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is enabled: ")[for := "forid_70"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isEnabled)[id := forid_70]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is processed: ")[for := "forid_71"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isProcessed)[id := forid_71]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Date: ")[for := "forid_72"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputDateTime(s.date)[id := forid_72]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_73"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_73]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_74"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_74]{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  define page repeatUntilProc0 (p : PdpMeeting) {
  }

  entity RepeatUntilProc1ProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function next ( state : Int ) : Void
    {
      if ( state == 0 )
      {
        this.p.prepareRepeatUntilProc0();
        this.p.repeatUntilProc0.enable(this as ProcedureStatus, 1, 1);
      }
      else
      {
      }
      if ( state == 1 )
      {
        this.enableRepeat();
        this.enableUntil();
      }
      else
      {
      }
      if ( state == 2 )
      {
        this.p.prepareFinalizeReport();
        this.p.finalizeReport.enable(this as ProcedureStatus, 3, 2);
      }
      else
      {
      }
      if ( state == 3 )
      {
        this.disableRepeat();
        this.processed();
      }
      else
      {
      }
    }
    function enableRepeat ( ) : Void
    {
      this.next(0);
    }
    function disableRepeat ( ) : Void
    {
      if ( this.p.repeatUntilProc0 != null )
      {
        this.p.repeatUntilProc0.disable();
      }
      else
      {
      }
    }
    function enableUntil ( ) : Void
    {
      this.next(2);
    }
    function notifyOfActivity ( branch : Int ) : Void
    {
      this.cascadeNotification();
      if ( branch == 1 )
      {
        if ( this.p.finalizeReport != null )
        {
          this.p.finalizeReport.disable();
        }
        else
        {
        }
      }
      else
      {
      }
    }
    function processed ( ) : Void
    {
      this.isEnabled := false;
      this.isProcessed := true;
      this.persist();
      if ( this.caller != null )
      {
        if ( this.branch != null )
        {
          this.caller.notifyOfActivity(this.branch);
        }
        else
        {
        }
        this.caller.next(this.returnstate);
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
      this.enableRepeat();
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.next(0);
    }
    function disabled ( ) : Void
    {
      if ( this.p.repeatUntilProc0 != null )
      {
        this.p.repeatUntilProc0.disable();
      }
      else
      {
      }
      if ( this.p.finalizeReport != null )
      {
        this.p.finalizeReport.disable();
      }
      else
      {
      }
    }
    function canPerform ( ) : Bool
    {
      return true && true && true && true && true && this.isEnabled;
    }
  }

  define page repeatUntilProc1ProcedureStatus (s : RepeatUntilProc1ProcedureStatus) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(s.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_59"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_59]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_60"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_60]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_61"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(s.name)[id := forid_61]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is enabled: ")[for := "forid_62"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isEnabled)[id := forid_62]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is processed: ")[for := "forid_63"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isProcessed)[id := forid_63]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Date: ")[for := "forid_64"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputDateTime(s.date)[id := forid_64]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_65"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_65]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_66"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_66]{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  define page repeatUntilProc1 (p : PdpMeeting) {
  }

  entity PdpWorkflowProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function next ( state : Int ) : Void
    {
      if ( state == 0 )
      {
        this.p.prepareAndProc0();
        this.p.andProc0.enable(this as ProcedureStatus, 1, 0);
      }
      else
      {
      }
      if ( state == 1 )
      {
        this.p.prepareRepeatUntilProc1();
        this.p.repeatUntilProc1.enable(this as ProcedureStatus, 2, 0);
      }
      else
      {
      }
      if ( state == 2 )
      {
        this.processed();
      }
      else
      {
      }
    }
    function processed ( ) : Void
    {
      this.isEnabled := false;
      this.isProcessed := true;
      this.persist();
      if ( this.caller != null )
      {
        if ( this.branch != null )
        {
          this.caller.notifyOfActivity(this.branch);
        }
        else
        {
        }
        this.caller.next(this.returnstate);
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
      this.p.pdpWorkflow.done();
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.next(0);
    }
    function disabled ( ) : Void
    {
    }
    function canPerform ( ) : Bool
    {
      return true && true && true && true && this.isEnabled;
    }
  }

  define page pdpWorkflowProcedureStatus (s : PdpWorkflowProcedureStatus) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(s.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_51"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_51]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_52"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_52]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_53"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(s.name)[id := forid_53]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is enabled: ")[for := "forid_54"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isEnabled)[id := forid_54]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is processed: ")[for := "forid_55"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isProcessed)[id := forid_55]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Date: ")[for := "forid_56"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputDateTime(s.date)[id := forid_56]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_57"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_57]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_58"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_58]{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  entity EmployeeFillInFormProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function processed ( ) : Void
    {
      this.isEnabled := false;
      this.isProcessed := true;
      this.persist();
      if ( this.caller != null )
      {
        if ( this.branch != null )
        {
          this.caller.notifyOfActivity(this.branch);
        }
        else
        {
        }
        this.caller.next(this.returnstate);
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
    function canPerform ( ) : Bool
    {
      return true && securityContext.principal == p.employee && true && true && this.isEnabled;
    }
  }

  define page employeeFillInFormProcedureStatus (s : EmployeeFillInFormProcedureStatus) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(s.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_43"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_43]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_44"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_44]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_45"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(s.name)[id := forid_45]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is enabled: ")[for := "forid_46"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isEnabled)[id := forid_46]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is processed: ")[for := "forid_47"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isProcessed)[id := forid_47]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Date: ")[for := "forid_48"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputDateTime(s.date)[id := forid_48]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_49"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_49]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_50"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_50]{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  entity ManagerFillInFormProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function processed ( ) : Void
    {
      this.isEnabled := false;
      this.isProcessed := true;
      this.persist();
      if ( this.caller != null )
      {
        if ( this.branch != null )
        {
          this.caller.notifyOfActivity(this.branch);
        }
        else
        {
        }
        this.caller.next(this.returnstate);
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
    function canPerform ( ) : Bool
    {
      return true && true && securityContext.principal == p.employee.manager && true && this.isEnabled;
    }
  }

  define page managerFillInFormProcedureStatus (s : ManagerFillInFormProcedureStatus) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(s.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_35"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_35]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_36"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_36]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_37"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(s.name)[id := forid_37]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is enabled: ")[for := "forid_38"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isEnabled)[id := forid_38]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is processed: ")[for := "forid_39"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isProcessed)[id := forid_39]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Date: ")[for := "forid_40"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputDateTime(s.date)[id := forid_40]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_41"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_41]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_42"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_42]{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  entity WriteReportProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function processed ( ) : Void
    {
      this.isEnabled := false;
      this.isProcessed := true;
      this.persist();
      if ( this.caller != null )
      {
        if ( this.branch != null )
        {
          this.caller.notifyOfActivity(this.branch);
        }
        else
        {
        }
        this.caller.next(this.returnstate);
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
    function canPerform ( ) : Bool
    {
      return true && true && securityContext.principal == p.employee.manager && true && this.isEnabled;
    }
  }

  define page writeReportProcedureStatus (s : WriteReportProcedureStatus) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(s.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_27"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_27]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_28"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_28]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_29"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(s.name)[id := forid_29]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is enabled: ")[for := "forid_30"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isEnabled)[id := forid_30]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is processed: ")[for := "forid_31"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isProcessed)[id := forid_31]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Date: ")[for := "forid_32"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputDateTime(s.date)[id := forid_32]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_33"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_33]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_34"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_34]{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  entity FinalizeReportProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function processed ( ) : Void
    {
      this.isEnabled := false;
      this.isProcessed := true;
      this.persist();
      if ( this.caller != null )
      {
        if ( this.branch != null )
        {
          this.caller.notifyOfActivity(this.branch);
        }
        else
        {
        }
        this.caller.next(this.returnstate);
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
    function canPerform ( ) : Bool
    {
      return true && true && securityContext.principal == p.employee.manager && this.isEnabled;
    }
  }

  define page finalizeReportProcedureStatus (s : FinalizeReportProcedureStatus) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(s.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_19"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_19]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_20"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_20]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_21"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(s.name)[id := forid_21]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is enabled: ")[for := "forid_22"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isEnabled)[id := forid_22]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is processed: ")[for := "forid_23"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isProcessed)[id := forid_23]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Date: ")[for := "forid_24"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputDateTime(s.date)[id := forid_24]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_25"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_25]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_26"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_26]{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  entity ApproveReportProcedureStatus : ProcedureStatus {
    p -> PdpMeeting ( )
    function processed ( ) : Void
    {
      this.isEnabled := false;
      this.isProcessed := true;
      this.persist();
      if ( this.caller != null )
      {
        if ( this.branch != null )
        {
          this.caller.notifyOfActivity(this.branch);
        }
        else
        {
        }
        this.caller.next(this.returnstate);
      }
      else
      {
      }
    }
    function enabled ( ) : Void
    {
    }
    function done ( ) : Void
    {
      this.isEnabled := false;
      this.persist();
      this.processed();
    }
    function disabled ( ) : Void
    {
    }
    function canPerform ( ) : Bool
    {
      return true && true && securityContext.principal == p.employee && this.isEnabled;
    }
  }

  define page approveReportProcedureStatus (s : ApproveReportProcedureStatus) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(s.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("P: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.p != null ) {
                      navigate(pdpMeeting(s.p))[]{
                        text(s.p.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.p == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_11"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_11]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_12"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_12]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_13"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(s.name)[id := forid_13]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is enabled: ")[for := "forid_14"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isEnabled)[id := forid_14]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Is processed: ")[for := "forid_15"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputBool(s.isProcessed)[id := forid_15]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Date: ")[for := "forid_16"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputDateTime(s.date)[id := forid_16]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Caller: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( s.caller != null ) {
                      navigate(procedureStatus(s.caller))[]{
                        text(s.caller.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( s.caller == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Returnstate: ")[for := "forid_17"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.returnstate)[id := forid_17]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Branch: ")[for := "forid_18"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputInt(s.branch)[id := forid_18]{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  define page pdpWorkflow (p : PdpMeeting) {
  }

  define page employeeFillInForm (p : PdpMeeting) {
    main()[]{
    }
    define local contextSidebar () {
      pdpMeetingProcedures(p)[]{
      }
    }
    define local body () {
      form()[]{
        group("Details")[]{
          table()[]{
            row()[]{
              column()[]{
                row()[]{
                  column()[]{
                    label("Employee preparation: ")[for := "forid_8"]{
                    }
                  } 
                  column()[]{
                    container()[]{
                      inputText(p.employeePreparation)[id := forid_8]{
                      }
                    }
                  }
                }
              }
            }
          }
        } 
        action("Submit", doAction())[]{
        } 
        action doAction ( )
        {
          p.persist();
          p.report := "Initial report";
          p.persist();
          p.employeeFillInForm.done();
          return pdpMeeting(p);
        }
      }
    }
  }

  define page managerFillInForm (p : PdpMeeting) {
    title()[]{
      "Fill in manager form"
    }
    main()[]{
    }
    define local contextSidebar () {
      pdpMeetingProcedures(p)[]{
      }
    }
    define local body () {
      form()[]{
        group("Details")[]{
          table()[]{
            row()[]{
              column()[]{
                row()[]{
                  column()[]{
                    label("Manager preparation: ")[for := "forid_9"]{
                    }
                  } 
                  column()[]{
                    container()[]{
                      inputText(p.managerPreparation)[id := forid_9]{
                      }
                    }
                  }
                }
              }
            }
          }
        } 
        action("Submit", doAction())[]{
        } 
        action doAction ( )
        {
          p.persist();
          p.managerFillInForm.done();
          return pdpMeeting(p);
        }
      }
    }
  }

  define page writeReport (p : PdpMeeting) {
    main()[]{
    }
    define local contextSidebar () {
      pdpMeetingProcedures(p)[]{
      }
    }
    define local body () {
      form()[]{
        group("Details")[]{
          table()[]{
            row()[]{
              column()[]{
                row()[]{
                  column()[]{
                    label("Report: ")[for := "forid_10"]{
                    }
                  } 
                  column()[]{
                    container()[]{
                      inputText(p.report)[id := forid_10]{
                      }
                    }
                  }
                }
              }
            }
          }
        } 
        action("Submit", doAction())[]{
        } 
        action doAction ( )
        {
          p.persist();
          p.writeReport.done();
          return pdpMeeting(p);
        }
      }
    }
  }

  define page finalizeReport (p : PdpMeeting) {
    init
    {
      p.finalizeReport.done();
      goto pdpMeeting(p);
    }
  }

  define page approveReport (p : PdpMeeting) {
    init
    {
      p.approveReport.done();
      goto pdpMeeting(p);
    }
  }

section  pages .

  define template body () {
  }

  define page home () {
    main()[]{
    }
    define local body () {
      var employee : User ;
      header()[]{
        "Home"
      }
      section()[]{
        form()[]{
          header()[]{
            "Quick start PDP Meeting for employee"
          } 
          action("Quick start", quickStart())[]{
          } 
          action quickStart ( )
          {
            var p : PdpMeeting := PdpMeeting{employee := aUser} ;
            p.persist();
            p.startPdpWorkflow();
            if ( securityContext.loggedIn )
            {
              return message("Workflows started!");
            }
            else
            {
              return signin();
            }
          }
        }
      }
      section()[]{
        form()[]{
          header()[]{
            "Organize PDP Meeting"
          } 
          "For: " 
          block("inputSimpleRefAssociation")[]{
            select ( user0 : User , Select , employee )
          } 
          action("Organize", organize())[]{
          } 
          action organize ( )
          {
            var p : PdpMeeting := PdpMeeting{employee := employee} ;
            p.persist();
            p.startPdpWorkflow();
            if ( securityContext.loggedIn )
            {
              return message("Workflows started!");
            }
            else
            {
              return signin();
            }
          }
        }
      }
    }
  }

  define page allMeetings () {
    main()[]{
    }
    define local body () {
      for ( p : PdpMeeting where true order by null asc limit 1000 offset 0 ) {
        text(p.name)[]{
        }
        text(" ")[]{
        }
      }
    }
  }

access control rules
  anonymous
  rule page pdpMeeting ( pdpMeeting : PdpMeeting ) {
    securityContext.principal == pdpMeeting.employee || securityContext.principal == pdpMeeting.employee.manager
    rule action * ( * ) {
      securityContext.principal == pdpMeeting.employee || securityContext.principal == pdpMeeting.employee.manager
    }
  }

section  pages .

  define page pdpMeeting (p : PdpMeeting) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(p.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Employee: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( p.employee != null ) {
                      navigate(user(p.employee))[]{
                        text(p.employee.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( p.employee == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_84"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(p.name)[id := forid_84]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Employee preparation: ")[for := "forid_85"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputText(p.employeePreparation)[id := forid_85]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Manager preparation: ")[for := "forid_86"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputText(p.managerPreparation)[id := forid_86]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Report: ")[for := "forid_87"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputText(p.report)[id := forid_87]{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    define local contextSidebar () {
      pdpMeetingProcedures(p)[]{
      }
    }
  }

  define page user (u : User) {
    main()[]{
    }
    define local body () {
      header()[]{
        text(u.name)[]{
        }
      }
      group("Details")[]{
        table()[]{
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Username: ")[for := "forid_88"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(u.username)[id := forid_88]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Name: ")[for := "forid_89"]{
                  }
                } 
                column()[]{
                  container()[]{
                    text(u.name)[id := forid_89]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Password: ")[for := "forid_90"]{
                  }
                } 
                column()[]{
                  container()[]{
                    outputSecret(u.password)[id := forid_90]{
                    }
                  }
                }
              }
            }
          } 
          row()[]{
            column()[]{
              row()[]{
                column()[]{
                  label("Manager: ")[]{
                  }
                } 
                column()[]{
                  container()[]{
                    if ( u.manager != null ) {
                      navigate(user(u.manager))[]{
                        text(u.manager.name)[]{
                        }
                      }
                    }
                    else
                    {
                    } 
                    if ( u.manager == null ) {
                      text("null")[]{
                      }
                    }
                    else
                    {
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

module style
style
globalStyle
const mainColor : Color := # 330099 ;
const globalFont : Font := Font.Lucida.Grande ;
const globalFontSize : Length := 0.75em ;
const layoutBorderColor : Color := # c0c0c0 ;
.section {
  font := Font.Lucida.Grande;
  font-size := 0.75em;
}
a {
  font := Font.Lucida.Grande;
  font-size := 0.75em;
}
.header {
  font := Font.Lucida.Grande;
  font-size := 0.99997499999999995em;
  margin-top := 0px;
}
table {
  font := Font.Lucida.Grande;
  font-size := 0.75em;
}
table >> tr > th {
  border-top-color := #c0c0c0;
  border-right-color := #c0c0c0;
  border-bottom-color := #c0c0c0;
  border-left-color := #c0c0c0;
  font := Font.Lucida.Grande;
  font-size := 1em;
  font-weight := bold;
  color := #404040;
  image := url("images/menubar_bg.png");
  background-repeat := repeat-x;
}
table >> tr > td {
  background-color := Color.white;
}
.block {
  font := Font.Lucida.Grande;
  font-size := 1em;
}
form {
  font := Font.Lucida.Grande;
  font-size := 0.75em;
}
form >> fieldset {
  font-size := 0.99974999999999992em;
}
fieldset {
  font := Font.Lucida.Grande;
  font-size := 0.75em;
}
fieldset >> a {
  font-size := 0.99974999999999992em;
}
style
templateStyle
template topmenu() {
  border-top-color := #c0c0c0;
  border-right-color := #c0c0c0;
  border-bottom-color := #c0c0c0;
  border-left-color := #c0c0c0;
  border-top-width := 1px;
  border-right-width := 1px;
  border-bottom-width := 1px;
  border-left-width := 1px;
  border-top-style := BorderStyle.solid;
  border-right-style := BorderStyle.solid;
  border-bottom-style := BorderStyle.solid;
  border-left-style := BorderStyle.solid;
  width := 100%;
  margin-bottom := 1em;
}
template top() {
  background-color := Color.white;
  width := 100%;
}
template top() >> .logos {
  width := 25em;
}
template top() > .logo_area0 {
  margin-left := auto;
  margin-right := auto;
  width := 80%;
}
template main() > .mainbody0 {
  margin-left := auto;
  margin-right := auto;
  width := 80%;
  padding-top := 4px;
}
template sidebar() {
  width := 15em;
  padding := 1em;
}
template body() {
  padding := 1em;
  border-left-color := #c0c0c0;
  border-left-style := BorderStyle.solid;
  border-left-width := 1px;
}
template footer() {
  background-color := Color.white;
  border-top-width := 1px;
  border-top-color := #c0c0c0;
  border-top-style := BorderStyle.solid;
  font := Font.Lucida.Grande;
  font-size := 0.7em;
  width := 100%;
  margin-top := 1em;
}
style
formStyle
const labelWidth : Length := 8em ;
const formItemSpacing : Length := 0.3em ;
fieldset > ol > li {
  padding-bottom := 0.3em;
}
fieldset {
  image := url("images/background_gradient.png");
  border-top-color := #003399;
  border-bottom-color := #003399;
  background-color := #ccccff;
}
style
menuStyle
const globalBorderColor : Color := # c0c0c0 ;
const fontColor : Color := # 505050 ;
template topmenu() {
  background-color := #ffff00;
  image := url("images/menubar_bg.png");
  background-repeat := repeat-x;
}
template topmenu() >> .menubar {
  margin-left := auto;
  margin-right := auto;
  width := 80%;
}
template topmenu() >> .menu > .menuheader > a {
  padding := 0.3em;
  font := Font.Lucida.Grande;
  color := #505050;
  font-size := 0.75em;
  text-decoration := none;
}
template topmenu() >> .menu >> a :hover {
  image := url("images/menubar_bg_hover.png");
  background-repeat := repeat-x;
}
style
footerStyle
template footer() >> ul > li {
  float := left;
}
template footer() >> ul > li :before {
  content := '|';
}
template footer() >> ul > li :before {
  margin-right := 1em;
  margin-left := 1em;
}
template footer() >> .footer_text {
  float := right;
}
template footer() >> .footer_links {
  float := left;
}
template footer() >> a {
  font-size := 1.0em;
}
template footer() >> ul {
  list-style := none;
  padding-left := 0;
  separator := Separator.pipe;
}
style
groupStyle
fieldset >> label {
  width := 13em;
}
fieldset >> .text {
  width := 40em;
}
ol > li >> p {
  font-weight := bold;
}

module layout
layout
template
main()
{
top()
;
topmenu()
;
mainbody0: [ sidebar() body() ]
;
footer()
;
}
template
top()
{
logo_area0: [ logos text ]
;
}
template
footer()
{
f0: [ footer_links footer_text ]
;
}

module ac
access control rules
  anonymous
  rule page createPdpMeeting (  ) {
    true
    rule action * ( * ) {
      true
    }
  }
  rule page * ( * ) {
    true
    rule action * ( * ) {
      true
    }
  }
  rule action * ( * ) {
    true
  }
  rule template * ( * ) {
    true
    rule action * ( * ) {
      true
    }
  }
section  pages .

  session securityContext {
    principal -> User ( )
    loggedIn :: Bool ( )
  }

  function loggedIn ( ) : Bool
  {
    return securityContext != null && securityContext.principal != null;
  }

  define page signin () {
    main()[]{
    }
    title()[]{
      "Log in"
    }
    define local body () {
      var username : String ;
      var password : Secret ;
      form()[]{
        table()[]{
          row()[]{
            column()[]{
              "Username: "
            } 
            column()[]{
              inputString(username)[]{
              }
            }
          } 
          row()[]{
            column()[]{
              "Password: "
            } 
            column()[]{
              inputSecret(password)[]{
              }
            }
          } 
          row()[]{
            column()[]{
              action("Sign in", dosignin())[]{
              }
            } 
            column()[]{
              ""
            }
          }
        } 
        action dosignin ( )
        {
          for ( us : User where us.username == username order by null asc limit 1000 offset 0 )
          {
            if ( us.password.check(password) )
            {
              securityContext.principal := us;
              securityContext.loggedIn := true;
              return allTasks();
            }
            else
            {
            }
          }
          securityContext.loggedIn := false;
          return error("Wrong combination of username and password");
        }
      }
    }
  }

  define page error (msg : String) {
    main()[]{
    }
    title()[]{
      "Error"
    }
    define local body () {
      header()[]{
        "Error"
      }
      text(msg)[]{
      }
    }
  }

  define page message (msg : String) {
    main()[]{
    }
    title()[]{
      "Message"
    }
    define local body () {
      header()[]{
        "Message"
      }
      section()[]{
        text(msg)[]{
        }
      }
    }
  }

module data
section  data model .

  var aManager : User := User{username := "manager" name := "Joe Manager" password := "secret"} ;

  var aUser : User := User{username := "user" name := "Joe User" password := "secret" manager := aManager} ;

  entity User {
    username :: String ( )
    name :: String ( )
    password :: Secret ( )
    manager -> User ( )
  }

  entity PdpMeeting {
    approveReport <> ApproveReportProcedureStatus ( )
    finalizeReport <> FinalizeReportProcedureStatus ( )
    writeReport <> WriteReportProcedureStatus ( )
    managerFillInForm <> ManagerFillInFormProcedureStatus ( )
    employeeFillInForm <> EmployeeFillInFormProcedureStatus ( )
    pdpWorkflow <> PdpWorkflowProcedureStatus ( )
    repeatUntilProc1 <> RepeatUntilProc1ProcedureStatus ( )
    repeatUntilProc0 <> RepeatUntilProc0ProcedureStatus ( )
    andProc0 <> AndProc0ProcedureStatus ( )
    employee -> User ( )
    name :: String ( ) := this.employee.name + " PDP Form"
    employeePreparation :: Text ( )
    managerPreparation :: Text ( )
    report :: Text ( )
    function startApproveReport ( ) : Void
    {
      this.prepareApproveReport();
      this.approveReport.enable();
    }
    function prepareApproveReport ( ) : Void
    {
      if ( this.approveReport == null )
      {
        this.approveReport := ApproveReportProcedureStatus{};
        this.approveReport.p := this;
        this.approveReport.persist();
        this.persist();
      }
      else
      {
      }
    }
    function startFinalizeReport ( ) : Void
    {
      this.prepareFinalizeReport();
      this.finalizeReport.enable();
    }
    function prepareFinalizeReport ( ) : Void
    {
      if ( this.finalizeReport == null )
      {
        this.finalizeReport := FinalizeReportProcedureStatus{};
        this.finalizeReport.p := this;
        this.finalizeReport.persist();
        this.persist();
      }
      else
      {
      }
    }
    function startWriteReport ( ) : Void
    {
      this.prepareWriteReport();
      this.writeReport.enable();
    }
    function prepareWriteReport ( ) : Void
    {
      if ( this.writeReport == null )
      {
        this.writeReport := WriteReportProcedureStatus{};
        this.writeReport.p := this;
        this.writeReport.persist();
        this.persist();
      }
      else
      {
      }
    }
    function startManagerFillInForm ( ) : Void
    {
      this.prepareManagerFillInForm();
      this.managerFillInForm.enable();
    }
    function prepareManagerFillInForm ( ) : Void
    {
      if ( this.managerFillInForm == null )
      {
        this.managerFillInForm := ManagerFillInFormProcedureStatus{};
        this.managerFillInForm.p := this;
        this.managerFillInForm.persist();
        this.persist();
      }
      else
      {
      }
    }
    function startEmployeeFillInForm ( ) : Void
    {
      this.prepareEmployeeFillInForm();
      this.employeeFillInForm.enable();
    }
    function prepareEmployeeFillInForm ( ) : Void
    {
      if ( this.employeeFillInForm == null )
      {
        this.employeeFillInForm := EmployeeFillInFormProcedureStatus{};
        this.employeeFillInForm.p := this;
        this.employeeFillInForm.persist();
        this.persist();
      }
      else
      {
      }
    }
    function startPdpWorkflow ( ) : Void
    {
      this.preparePdpWorkflow();
      this.pdpWorkflow.enable();
    }
    function preparePdpWorkflow ( ) : Void
    {
      if ( this.pdpWorkflow == null )
      {
        this.pdpWorkflow := PdpWorkflowProcedureStatus{};
        this.pdpWorkflow.p := this;
        this.pdpWorkflow.persist();
        this.persist();
      }
      else
      {
      }
    }
    function startRepeatUntilProc1 ( ) : Void
    {
      this.prepareRepeatUntilProc1();
      this.repeatUntilProc1.enable();
    }
    function prepareRepeatUntilProc1 ( ) : Void
    {
      if ( this.repeatUntilProc1 == null )
      {
        this.repeatUntilProc1 := RepeatUntilProc1ProcedureStatus{};
        this.repeatUntilProc1.p := this;
        this.repeatUntilProc1.persist();
        this.persist();
      }
      else
      {
      }
    }
    function startRepeatUntilProc0 ( ) : Void
    {
      this.prepareRepeatUntilProc0();
      this.repeatUntilProc0.enable();
    }
    function prepareRepeatUntilProc0 ( ) : Void
    {
      if ( this.repeatUntilProc0 == null )
      {
        this.repeatUntilProc0 := RepeatUntilProc0ProcedureStatus{};
        this.repeatUntilProc0.p := this;
        this.repeatUntilProc0.persist();
        this.persist();
      }
      else
      {
      }
    }
    function startAndProc0 ( ) : Void
    {
      this.prepareAndProc0();
      this.andProc0.enable();
    }
    function prepareAndProc0 ( ) : Void
    {
      if ( this.andProc0 == null )
      {
        this.andProc0 := AndProc0ProcedureStatus{};
        this.andProc0.p := this;
        this.andProc0.persist();
        this.persist();
      }
      else
      {
      }
    }
  }

  entity TestRecursive {
    name :: String ( )
    comments :: String ( )
    proc1Text :: String ( )
    proc2Text :: String ( )
    child -> TestRecursive ( )
  }

module templates
section  templates .

  define template main () {
    top()[]{
    }
    topmenu()[]{
    }
    block("mainbody0")[]{
      block("_colmask_ _leftmenu_")[]{
        block("mainbody00 _container_")[]{
          block("sidebar2 _col1_")[]{
            sidebar()[]{
            }
          } 
          block("wrapper0 _colwrap_")[]{
            block("body82 _col2_ clearfix")[]{
              body()[]{
              }
            }
          }
        }
      }
    }
    footer()[]{
    }
  }

  define template top () {
    block("logo_area0")[]{
      block("_colmask_ _leftmenu_")[]{
        block("logo_area00 _container_")[]{
          block("logos0 _col1_")[]{
            block("logos")[]{
              image("/images/webdsl_logo_small.png")[]{
              } 
              image("/images/webdsl_logo_text.png")[]{
              }
            }
          } 
          block("wrapper1 _colwrap_")[]{
            block("text0 _col2_ clearfix")[]{
              block("text")[]{
                text("WebWorkFlow tests")[]{
                }
              }
            }
          }
        }
      }
    }
  }

  define template topmenu () {
    menubar("horizontal")[]{
      menu()[]{
        menuheader()[]{
          navigate(home())[]{
            "Home"
          }
        }
      } 
      menu()[]{
        menuheader()[]{
          "User"
        } 
        menuitem()[]{
          navigate(signin())[]{
            "Sign in"
          }
        } 
        menuitem()[]{
          navigate(allTasks())[]{
            "Tasks"
          }
        }
      }
    }
  }
section  basic page elements. .

  define template sidebar () {
    contextSidebar()[]{
    }
  }

  define template contextSidebar () {
    header()[]{
      "Side menu"
    }
    menuitem()[]{
      navigate(allTasks())[]{
        "Tasks"
      }
    }
  }

  define template footer () {
    "generated with "
    navigate(url("http://www.webdsl.org"))[]{
      text("WebDSL")[]{
      }
    }
    " and "
    navigate(url("http://www.strategoxt.org"))[]{
      text("Stratego/XT")[]{
      }
    }
  }