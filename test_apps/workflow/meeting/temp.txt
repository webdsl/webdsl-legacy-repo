application org.webdsl.testProcess

description
  {
  A workflow example for a personal development plan workflow
}

module templates
section templates .

  define main () {
    block("top"){
      top(){
      }
    }
    block("body"){
      block("left_innerbody"){
        sidebar(){
        }
      }
      block("main_innerbody"){
        body(){
        }
      }
    }
    block("footer"){
      footer(){
      }
    }
  }

  define top () {
    block("header"){
    }
    block("menubar"){
      menubar("horizontal"){
        menu(){
          menuheader(){
            navigate(home()){
              "Home"
            }
          }
        }
        menu(){
          menuheader(){
            "User"
          }
          menuitem(){
            navigate(signin()){
              "Sign in"
            }
          }
          menuitem(){
            navigate(allTasks()){
              "Tasks"
            }
          }
        }
      }
    }
  }
section basic page elements. .

  define sidebar () {
    contextSidebar(){
    }
  }

  define contextSidebar () {
  }

  define footer () {
    "generated with "
    navigate(url("http://www.webdsl.org")){
      text("WebDSL"){
      }
    }
    " and "
    navigate(url("http://www.strategoxt.org")){
      text("Stratego/XT"){
      }
    }
  }

module data
section data model .

  entity User {
    username :: String ( )
    name :: String ( )
    password :: Secret ( )
    manager -> User ( )
  }

  entity PdpMeeting {
    employee -> User ( )
    name :: String ( ) := employee.name + " PDP Form"
    employeePreparation :: Text ( )
    managerPreparation :: Text ( )
    report :: Text ( )
    syncAlmostReady :: Bool ( )
    proces <> ProcedureStatus ( )
    stap1 <> ProcedureStatus ( )
    stap2 <> ProcedureStatus ( )
    stap3 <> ProcedureStatus ( )
  }

  globals

  {

  var aManager : User := User{username := "manager" name := "Joe Manager" password := "secret"} ;

  var aUser : User := User{username := "user" name := "Joe User" password := "secret" manager := aManager} ;

  }

module ac
access
control
rules
anonymous
rule
page
createPdpMeeting
(
)
{
true
rule
action
*
(
*
)
{
true
}
}
rule
page
*
(
*
)
{
true
rule
action
*
(
*
)
{
true
}
}
rule
action
*
(
*
)
{
true
}
rule
template
*
(
*
)
{
true
rule
action
*
(
*
)
{
true
}
}
section pages .

  session securityContext {
    loggedIn :: Bool ( )
    principal -> User ( )
  }

  define page signin () {
    main(){
    }
    title(){
      "Sign in"
    }
    define body () {
      var username : String ;
      var password : Secret ;
      form(){
        table(){
          row(){
            "Username: "
            input(username){
            }
          }
          row(){
            "Password: "
            input(password){
            }
          }
          row(){
            action("Sign in", signin()){
            }
            ""
          }
        }
        action signin ( )
        {
          var users : List<User> ;
          users := select u from User as u where ( u . _username = username );
          for ( us : User in users where true order by null asc )
          {
            if ( us.password.check(password) )
              {
                securityContext.principal := us;
                securityContext.loggedIn := true;
                return allTasks();
              }
            else
              {
              }
          }
          securityContext.loggedIn := false;
          return error("Wrong combination of username/password");
        }
      }
    }
  }

  define page error (msg : String) {
    main(){
    }
    title(){
      "Error"
    }
    define body () {
      header(){
        "Error"
      }
      output(msg){
      }
    }
  }

  define page message (msg : String) {
    main(){
    }
    title(){
      "Message"
    }
    define body () {
      header(){
        "Message"
      }
      output(msg){
      }
    }
  }

section procedures .

  define page proces (p : PdpMeeting) {
    init
    {
      procesDone(p);
      goto pdpMeeting(p);
    }
  }

  define page stap1 (p : PdpMeeting) {
    dummy(){
      main(){
      }
      define body () {
        header(){
          text(p.name){
          }
        }
        table(){
          dummy(){
            row(){
              "Name: "
              output(p.name){
              }
            }
          }
        }
      }
    }
    action doAction ( )
    {
      stap1Done(p);
      return pdpMeeting(p);
    }
  }

  define page stap2 (p : PdpMeeting) {
    dummy(){
      main(){
      }
      define body () {
        header(){
          text(p.name){
          }
        }
        table(){
          dummy(){
            row(){
              "Name: "
              output(p.name){
              }
            }
            row(){
              "Report: "
              output(p.report){
              }
            }
          }
        }
      }
    }
    action doAction ( )
    {
      stap2Done(p);
      return pdpMeeting(p);
    }
  }

  define page stap3 (p : PdpMeeting) {
    dummy(){
      main(){
      }
      define body () {
        header(){
          text(p.name){
          }
        }
        table(){
          dummy(){
            row(){
              "Name: "
              output(p.name){
              }
            }
            row(){
              "Report: "
              output(p.report){
              }
            }
            row(){
              "Employee: "
              output(p.employee){
              }
            }
          }
        }
      }
    }
    action doAction ( )
    {
      stap3Done(p);
      return pdpMeeting(p);
    }
  }

section pages .

  define page home () {
    main(){
    }
    define body () {
      var employee : User ;
      navigatebutton(signin(), "Sign in!"){
      }
      form(){
        header(){
          "Organize PDP Meeting"
        }
        "For: "
        input(employee){
        }
        action("Organize", organize()){
        }
        action organize ( )
        {
          var p : PdpMeeting ;
          p := PdpMeeting{};
          p.employee := employee;
          p.persist();
          procesEnabled(p);
          return message("Done!");
        }
      }
    }
  }

access

control

rules

anonymous

rule

page

pdpMeeting

(

pdpMeeting : PdpMeeting

)

{

securityContext.principal

=

pdpMeeting.employee

||

securityContext.principal

=

pdpMeeting.employee.manager

rule

action

*

(

*

)

{

securityContext.principal

=

pdpMeeting.employee

||

securityContext.principal

=

pdpMeeting.employee.manager

}

}

section pages .

  define pdpMeetingOperations (p : PdpMeeting) {
    "haha!"
    pdpMeetingOperationsList(p){
    }
  }

section file-definition .

  entity File {
    name :: String ( name )
    contenttype :: String ( )
    data :: Binary ( )
  }

section Emited WebDSL code .

  entity ProcedureStatus {
    name :: String ( ) := "Procedure status"
    enabled :: Bool ( )
    date :: DateTime ( )
  }

section generated pages. .

  define createMenu () {
    listitem(){
      "New"
      list(){
        listitem(){
          navigate(createProcedureStatus()){
            "ProcedureStatus"
          }
        }
        listitem(){
          navigate(createFile()){
            "File"
          }
        }
        listitem(){
          navigate(createPdpMeeting()){
            "PdpMeeting"
          }
        }
        listitem(){
          navigate(createUser()){
            "User"
          }
        }
      }
    }
  }

  define allMenu () {
    listitem(){
      "All"
      list(){
        listitem(){
          navigate(allProcedureStatus()){
            "ProcedureStatus"
          }
        }
        listitem(){
          navigate(allFile()){
            "File"
          }
        }
        listitem(){
          navigate(allPdpMeeting()){
            "PdpMeeting"
          }
        }
        listitem(){
          navigate(allUser()){
            "User"
          }
        }
      }
    }
  }

  define editRowsObject (o : Object) {
  }

  define viewRowsObject (o : Object) {
  }

  define page editUser (user : User) {
    main(){
    }
    define body () {
      section(){
        header(){
          "Edit "
          "User"
          " "
          text(user.name){
          }
        }
        form(){
          table(){
            editRowsUser(user){
            }
          }
          action("Save", save()){
          }
          action("Cancel", cancel()){
          }
        }
      }
      action cancel ( )
      {
        cancel user(user);
      }
      action save ( )
      {
        user.save();
        return user(user);
      }
    }
  }

  define page createUser () {
    var user : User := User{} ;
    main(){
    }
    define body () {
      section(){
        header(){
          "Create new "
          "User"
        }
        form(){
          table(){
            editRowsUser(user){
            }
          }
          action("Save", save()){
          }
          action("Cancel", cancel()){
          }
        }
      }
      action cancel ( )
      {
        return home();
      }
      action save ( )
      {
        user.save();
        return user(user);
      }
    }
  }

  define editRowsUser (user : User) {
    editRowsObject(user){
    }
    row(){
      "Username:"
      input(user.username){
      }
    }
    row(){
      "Name:"
      input(user.name){
      }
    }
    row(){
      "Password:"
      input(user.password){
      }
    }
    row(){
      "Manager:"
      input(user.manager){
      }
    }
  }

  define page user (user : User) {
    main(){
    }
    define manageMenu () {
      listitem(){
        navigate(editUser(user)){
          text("Edit"){
          }
        }
      }
    }
    define body () {
      section(){
        header(){
          text(user.name){
          }
        }
        viewRowsUser(user){
        }
      }
      navigate(editUser(user)){
        text("Edit"){
        }
      }
    }
  }

  define viewRowsUser (user : User) {
    viewRowsObject(user){
    }
    table(){
      row(){
        "Username:"
        output(user.username){
        }
      }
      row(){
        "Name:"
        output(user.name){
        }
      }
      row(){
        "Password:"
        output(user.password){
        }
      }
      row(){
        "Manager:"
        output(user.manager){
        }
      }
    }
  }

  define page allUser () {
    main(){
    }
    define body () {
      section(){
        header(){
          "All "
          "User"
        }
        form(){
          list(){
            for ( user : User where true order by null asc ) {
              listitem(){
                navigate(user(user)){
                  text(user.name){
                  }
                }
                " "
                actionLink("[X]", removeUser(user)){
                }
                action removeUser ( user : User )
                {
                  user.delete();
                }
              }
            }
          }
        }
      }
    }
  }

  define page editPdpMeeting (pdpMeeting : PdpMeeting) {
    main(){
    }
    define body () {
      section(){
        header(){
          "Edit "
          "PdpMeeting"
          " "
          text(pdpMeeting.name){
          }
        }
        form(){
          table(){
            editRowsPdpMeeting(pdpMeeting){
            }
          }
          action("Save", save()){
          }
          action("Cancel", cancel()){
          }
        }
      }
      action cancel ( )
      {
        cancel pdpMeeting(pdpMeeting);
      }
      action save ( )
      {
        pdpMeeting.save();
        return pdpMeeting(pdpMeeting);
      }
    }
  }

  define page createPdpMeeting () {
    var pdpMeeting : PdpMeeting := PdpMeeting{} ;
    main(){
    }
    define body () {
      section(){
        header(){
          "Create new "
          "PdpMeeting"
        }
        form(){
          table(){
            editRowsPdpMeeting(pdpMeeting){
            }
          }
          action("Save", save()){
          }
          action("Cancel", cancel()){
          }
        }
      }
      action cancel ( )
      {
        return home();
      }
      action save ( )
      {
        pdpMeeting.save();
        return pdpMeeting(pdpMeeting);
      }
    }
  }

  define editRowsPdpMeeting (pdpMeeting : PdpMeeting) {
    editRowsObject(pdpMeeting){
    }
    row(){
      "Employee:"
      input(pdpMeeting.employee){
      }
    }
    row(){
      "EmployeePreparation:"
      input(pdpMeeting.employeePreparation){
      }
    }
    row(){
      "ManagerPreparation:"
      input(pdpMeeting.managerPreparation){
      }
    }
    row(){
      "Report:"
      input(pdpMeeting.report){
      }
    }
    row(){
      "SyncAlmostReady:"
      input(pdpMeeting.syncAlmostReady){
      }
    }
  }

  define page pdpMeeting (pdpMeeting : PdpMeeting) {
    main(){
    }
    define manageMenu () {
      listitem(){
        navigate(editPdpMeeting(pdpMeeting)){
          text("Edit"){
          }
        }
      }
    }
    define contextSidebar () {
      pdpMeetingProcedures(pdpMeeting){
      }
    }
    define body () {
      section(){
        header(){
          text(pdpMeeting.name){
          }
        }
        viewRowsPdpMeeting(pdpMeeting){
        }
      }
      navigate(editPdpMeeting(pdpMeeting)){
        text("Edit"){
        }
      }
    }
  }

  define viewRowsPdpMeeting (pdpMeeting : PdpMeeting) {
    viewRowsObject(pdpMeeting){
    }
    table(){
      row(){
        "Employee:"
        output(pdpMeeting.employee){
        }
      }
      row(){
        "Name:"
        output(pdpMeeting.name){
        }
      }
      row(){
        "EmployeePreparation:"
        output(pdpMeeting.employeePreparation){
        }
      }
      row(){
        "ManagerPreparation:"
        output(pdpMeeting.managerPreparation){
        }
      }
      row(){
        "Report:"
        output(pdpMeeting.report){
        }
      }
      row(){
        "SyncAlmostReady:"
        output(pdpMeeting.syncAlmostReady){
        }
      }
    }
  }

  define page allPdpMeeting () {
    main(){
    }
    define body () {
      section(){
        header(){
          "All "
          "PdpMeeting"
        }
        form(){
          list(){
            for ( pdpMeeting : PdpMeeting where true order by null asc ) {
              listitem(){
                navigate(pdpMeeting(pdpMeeting)){
                  text(pdpMeeting.name){
                  }
                }
                " "
                actionLink("[X]", removePdpMeeting(pdpMeeting)){
                }
                action removePdpMeeting ( pdpMeeting : PdpMeeting )
                {
                  pdpMeeting.delete();
                }
              }
            }
          }
        }
      }
    }
  }

  define page editFile (file : File) {
    main(){
    }
    define body () {
      section(){
        header(){
          "Edit "
          "File"
          " "
          text(file.name){
          }
        }
        form(){
          table(){
            editRowsFile(file){
            }
          }
          action("Save", save()){
          }
          action("Cancel", cancel()){
          }
        }
      }
      action cancel ( )
      {
        cancel file(file);
      }
      action save ( )
      {
        file.save();
        return file(file);
      }
    }
  }

  define page createFile () {
    var file : File := File{} ;
    main(){
    }
    define body () {
      section(){
        header(){
          "Create new "
          "File"
        }
        form(){
          table(){
            editRowsFile(file){
            }
          }
          action("Save", save()){
          }
          action("Cancel", cancel()){
          }
        }
      }
      action cancel ( )
      {
        return home();
      }
      action save ( )
      {
        file.save();
        return file(file);
      }
    }
  }

  define editRowsFile (file : File) {
    editRowsObject(file){
    }
    row(){
      "Name:"
      input(file.name){
      }
    }
    row(){
      "Contenttype:"
      input(file.contenttype){
      }
    }
    row(){
      "Data:"
      input(file.data){
      }
    }
  }

  define page file (file : File) {
    main(){
    }
    define manageMenu () {
      listitem(){
        navigate(editFile(file)){
          text("Edit"){
          }
        }
      }
    }
    define body () {
      section(){
        header(){
          text(file.name){
          }
        }
        viewRowsFile(file){
        }
      }
      navigate(editFile(file)){
        text("Edit"){
        }
      }
    }
  }

  define viewRowsFile (file : File) {
    viewRowsObject(file){
    }
    table(){
      row(){
        "Name:"
        output(file.name){
        }
      }
      row(){
        "Contenttype:"
        output(file.contenttype){
        }
      }
      row(){
        "Data:"
        output(file.data){
        }
      }
    }
  }

  define page allFile () {
    main(){
    }
    define body () {
      section(){
        header(){
          "All "
          "File"
        }
        form(){
          list(){
            for ( file : File where true order by null asc ) {
              listitem(){
                navigate(file(file)){
                  text(file.name){
                  }
                }
                " "
                actionLink("[X]", removeFile(file)){
                }
                action removeFile ( file : File )
                {
                  file.delete();
                }
              }
            }
          }
        }
      }
    }
  }

  define page editProcedureStatus (procedureStatus : ProcedureStatus) {
    main(){
    }
    define body () {
      section(){
        header(){
          "Edit "
          "ProcedureStatus"
          " "
          text(procedureStatus.name){
          }
        }
        form(){
          table(){
            editRowsProcedureStatus(procedureStatus){
            }
          }
          action("Save", save()){
          }
          action("Cancel", cancel()){
          }
        }
      }
      action cancel ( )
      {
        cancel procedureStatus(procedureStatus);
      }
      action save ( )
      {
        procedureStatus.save();
        return procedureStatus(procedureStatus);
      }
    }
  }

  define page createProcedureStatus () {
    var procedureStatus : ProcedureStatus := ProcedureStatus{} ;
    main(){
    }
    define body () {
      section(){
        header(){
          "Create new "
          "ProcedureStatus"
        }
        form(){
          table(){
            editRowsProcedureStatus(procedureStatus){
            }
          }
          action("Save", save()){
          }
          action("Cancel", cancel()){
          }
        }
      }
      action cancel ( )
      {
        return home();
      }
      action save ( )
      {
        procedureStatus.save();
        return procedureStatus(procedureStatus);
      }
    }
  }

  define editRowsProcedureStatus (procedureStatus : ProcedureStatus) {
    editRowsObject(procedureStatus){
    }
    row(){
      "Enabled:"
      input(procedureStatus.enabled){
      }
    }
    row(){
      "Date:"
      input(procedureStatus.date){
      }
    }
  }

  define page procedureStatus (procedureStatus : ProcedureStatus) {
    main(){
    }
    define manageMenu () {
      listitem(){
        navigate(editProcedureStatus(procedureStatus)){
          text("Edit"){
          }
        }
      }
    }
    define body () {
      section(){
        header(){
          text(procedureStatus.name){
          }
        }
        viewRowsProcedureStatus(procedureStatus){
        }
      }
      navigate(editProcedureStatus(procedureStatus)){
        text("Edit"){
        }
      }
    }
  }

  define viewRowsProcedureStatus (procedureStatus : ProcedureStatus) {
    viewRowsObject(procedureStatus){
    }
    table(){
      row(){
        "Enabled:"
        output(procedureStatus.enabled){
        }
      }
      row(){
        "Date:"
        output(procedureStatus.date){
        }
      }
    }
  }

  define page allProcedureStatus () {
    main(){
    }
    define body () {
      section(){
        header(){
          "All "
          "ProcedureStatus"
        }
        form(){
          list(){
            for ( procedureStatus : ProcedureStatus where true order by null asc ) {
              listitem(){
                navigate(procedureStatus(procedureStatus)){
                  text(procedureStatus.name){
                  }
                }
                " "
                actionLink("[X]", removeProcedureStatus(procedureStatus)){
                }
                action removeProcedureStatus ( procedureStatus : ProcedureStatus )
                {
                  procedureStatus.delete();
                }
              }
            }
          }
        }
      }
    }
  }

section Emited WebDSL code .

  define pdpMeetingProceduresList (pdpMeeting : PdpMeeting) {
    list(){
      if ( true && pdpMeeting.stap3.enabled && true ) {
        listitem(){
          navigate(stap3(pdpMeeting)){
            text("Stap3"){
            }
          }
        }
      }
      if ( true && pdpMeeting.stap2.enabled && true ) {
        listitem(){
          navigate(stap2(pdpMeeting)){
            text("Stap2"){
            }
          }
        }
      }
      if ( true && pdpMeeting.stap1.enabled && true ) {
        listitem(){
          navigate(stap1(pdpMeeting)){
            text("Stap1"){
            }
          }
        }
      }
      if ( true && pdpMeeting.proces.enabled && true ) {
        listitem(){
          navigatebutton(proces(pdpMeeting), "Proces"){
          }
        }
      }
    }
  }

  define pdpMeetingProcedures (pdpMeeting : PdpMeeting) {
    pdpMeetingProceduresList(pdpMeeting){
    }
  }

  globals

  {

  function pdpMeetingHasProcedures ( pdpMeeting : PdpMeeting ) : Bool
  {
    return true && pdpMeeting.stap3.enabled && true || true && pdpMeeting.stap2.enabled && true || true && pdpMeeting.stap1.enabled && true || true && pdpMeeting.proces.enabled && true || false;
  }

  }

  define pdpMeetingTaskList () {
    header(){
      "Pdp meeting"
    }
    list(){
      for ( pdpMeeting : PdpMeeting where true order by null asc ) {
        if ( pdpMeetingHasProcedures(pdpMeeting) ) {
          listitem(){
            output(pdpMeeting){
            }
            pdpMeetingProceduresList(pdpMeeting){
            }
          }
        }
      }
    }
  }

  define page pdpMeetingTasks () {
    title(){
      "Pdp meeting"
    }
    main(){
    }
    define body () {
      header(){
        "Tasks"
      }
      pdpMeetingTaskList(){
      }
    }
  }

  define page allTasks () {
    title(){
      "All tasks"
    }
    main(){
    }
    define body () {
      header(){
        "All tasks"
      }
      section(){
        pdpMeetingTaskList(){
        }
      }
    }
  }

  define pdpMeetingStatusList () {
    header(){
      "Pdp meeting"
    }
    list(){
      for ( pdpMeeting : PdpMeeting where true order by null asc ) {
        listitem(){
          output(pdpMeeting){
          }
          list(){
            if ( pdpMeeting.stap3.enabled && true ) {
              if ( true ) {
                listitem(){
                  navigate(stap3(pdpMeeting)){
                    text("Stap3"){
                    }
                    ""
                  }
                }
              }
              if ( ! true ) {
                listitem(){
                  text("Stap3"){
                  }
                }
              }
            }
            if ( pdpMeeting.stap2.enabled && true ) {
              if ( true ) {
                listitem(){
                  navigate(stap2(pdpMeeting)){
                    text("Stap2"){
                    }
                    ""
                  }
                }
              }
              if ( ! true ) {
                listitem(){
                  text("Stap2"){
                  }
                }
              }
            }
            if ( pdpMeeting.stap1.enabled && true ) {
              if ( true ) {
                listitem(){
                  navigate(stap1(pdpMeeting)){
                    text("Stap1"){
                    }
                    ""
                  }
                }
              }
              if ( ! true ) {
                listitem(){
                  text("Stap1"){
                  }
                }
              }
            }
            if ( pdpMeeting.proces.enabled && true ) {
              if ( true ) {
                listitem(){
                  navigate(proces(pdpMeeting)){
                    text("Proces"){
                    }
                    " (X)"
                  }
                }
              }
              if ( ! true ) {
                listitem(){
                  text("Proces"){
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  define page pdpMeetingStatus () {
    title(){
      "Pdp meeting"
    }
    main(){
    }
    define body () {
      section(){
        header(){
          "Status"
        }
        section(){
          pdpMeetingStatusList(){
          }
        }
      }
    }
  }

  globals

  {

  function procesEnabled ( p : PdpMeeting ) : Void
  {
    p.proces.enabled := true;
  }

  }

  globals

  {

  function procesProcessed ( p : PdpMeeting ) : Void
  {
  }

  }

  globals

  {

  function procesDone ( p : PdpMeeting ) : Void
  {
    p.proces.enabled := false;
  }

  }

  globals

  {

  function procesDo ( p : PdpMeeting ) : Void
  {
    procesDone(p);
  }

  }

  globals

  {

  function procesDisabled ( p : PdpMeeting ) : Void
  {
    p.proces.enabled := false;
  }

  }

  globals

  {

  function stap1Enabled ( p : PdpMeeting ) : Void
  {
    p.stap1.enabled := true;
  }

  }

  globals

  {

  function stap1Processed ( p : PdpMeeting ) : Void
  {
  }

  }

  globals

  {

  function stap1Done ( p : PdpMeeting ) : Void
  {
    p.stap1.enabled := false;
  }

  }

  globals

  {

  function stap1Do ( p : PdpMeeting ) : Void
  {
    stap1Done(p);
  }

  }

  globals

  {

  function stap1Disabled ( p : PdpMeeting ) : Void
  {
    p.stap1.enabled := false;
  }

  }

  globals

  {

  function stap2Enabled ( p : PdpMeeting ) : Void
  {
    p.stap2.enabled := true;
  }

  }

  globals

  {

  function stap2Processed ( p : PdpMeeting ) : Void
  {
  }

  }

  globals

  {

  function stap2Done ( p : PdpMeeting ) : Void
  {
    p.stap2.enabled := false;
  }

  }

  globals

  {

  function stap2Do ( p : PdpMeeting ) : Void
  {
    stap2Done(p);
  }

  }

  globals

  {

  function stap2Disabled ( p : PdpMeeting ) : Void
  {
    p.stap2.enabled := false;
  }

  }

  globals

  {

  function stap3Enabled ( p : PdpMeeting ) : Void
  {
    p.stap3.enabled := true;
  }

  }

  globals

  {

  function stap3Processed ( p : PdpMeeting ) : Void
  {
  }

  }

  globals

  {

  function stap3Done ( p : PdpMeeting ) : Void
  {
    p.stap3.enabled := false;
  }

  }

  globals

  {

  function stap3Do ( p : PdpMeeting ) : Void
  {
    stap3Done(p);
  }

  }

  globals

  {

  function stap3Disabled ( p : PdpMeeting ) : Void
  {
    p.stap3.enabled := false;
  }

  }

access

control

rules

anonymous

rule

page

proces

(

p : PdpMeeting

)

{

true

&&

true

&&

true

rule

action

doAction

(

)

{

true

&&

true

&&

true

}

}

access

control

rules

anonymous

rule

page

stap1

(

p : PdpMeeting

)

{

true

&&

true

&&

true

rule

action

doAction

(

)

{

true

&&

true

&&

true

}

}

access

control

rules

anonymous

rule

page

stap2

(

p : PdpMeeting

)

{

true

&&

true

&&

true

rule

action

doAction

(

)

{

true

&&

true

&&

true

}

}

access

control

rules

anonymous

rule

page

stap3

(

p : PdpMeeting

)

{

true

&&

true

&&

true

rule

action

doAction

(

)

{

true

&&

true

&&

true

}

}

section Emited WebDSL code .

section Emited WebDSL code .