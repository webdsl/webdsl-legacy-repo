module DomainTransformationSyntax

hiddens
	context-free start-symbols Application Module

imports WebDSL

exports
	sorts 
		Transformation
		TransformationAnnotation
		TransformationDefinition
		EquivalenceTransformation
		RefinementTransformation
		RestrictingTransformation
		
		Migration
		MigrationDefinition

	context-free syntax
		%% TODO Local data model trafo to global data model trafo transformation 
		%% TODO Remove data level information from data model level (maybe use oracle)
	
		%% ---- Framework ---- %%
		Section*															-> MigrationDefinition
		TransformationDefinition											-> GlobalsDef
		Migration															-> GlobalsDef
		"transformation" Id "(" {Id ","}* ")" "{" Transformation "}"		-> TransformationDefinition {cons("TransformationDefinition")}
		"transformation" "(" {Id ","}* ")" "{" Transformation "}"			-> Transformation {cons("LambdaTransformation")}
		"(" Transformation Transformation ")" TransformationAnnotation*		-> Transformation {cons("TransformationApplication")}
		Id																	-> Transformation {cons("TransformationCall"), avoid}
		"migrate" Id* "to" Id "{" Transformation "}"						-> Migration {cons("Migration")}
		"to"																-> Id {reject}
		
		EntityNoSuper														-> Type {cons("TypeDeclaration")}
		Id																	-> Type {cons("TypeId")}
		%% ==================================================================================== %%
		
		%% ---- Isomorphisms ---- %%
		EquivalenceTransformation 											-> Transformation
		"propertyNameChange" "(" Id "," Id ")"								-> EquivalenceTransformation {cons("PropertyNameChange")}
		
		%% ---- Refinements ---- %%
		RefinementTransformation 											-> Transformation
		"addProperty" "(" Id "," Sort "," Exp ")"							-> RefinementTransformation {cons("PropertyAddition")}
				%% TODO Maybe detect trafo below from trafo above?
		"addPropertyDefaultValue" "(" Id "," Sort "," Exp ")"				-> RefinementTransformation {cons("PropertyAdditionDefaultValue")}
		"emptyEntity"														-> RefinementTransformation {cons("EmptyEntity")}
		"emptyEntity"														-> Id {reject}
		"inject" Exp ":" Type												-> RefinementTransformation {cons("Injection")}
		
				%% Assuming reference is many to one (set and list are not references!)
		"elevateAttributeOverReference" "(" Id "," Id ")"					-> RefinementTransformation {cons("ElevateAttributeOverReference")}

		%% ---- Data restrictions ---- %%
		RestrictingTransformation 											-> Transformation
		"removeProperty" "(" Id ")"	 										-> RestrictingTransformation {cons("PropertyRemoval")}
		"keep" "(" {Id ","}* ")"											-> RestrictingTransformation {cons("PropertyKeep")}

		%% ---- Combined ---- %% TODO !
		"propertySimpleTypeChange" "(" Id "," Sort ")"						-> Transformation {cons("PropertySimpleTypeChange")}
		"propertyReferenceTypeChange" "(" Id "," Sort "," Transformation ")"-> Transformation {cons("PropertyReferenceTypeChange")}
		"merge"						 										-> Transformation {cons("Merge")}
		"merge" "(" Exp ")"													-> Transformation {cons("RelatedMerge")}
		"merge" "(" Type "," Type ")" "(" Exp ")"							-> Transformation {cons("TypedRelatedMerge")}
		
		"restrict" "(" Exp ")"												-> Transformation {cons("Restrict")}
		
		%% ==================================================================================== %%
		
		%% ---- Sugar ---- %%
		"migrate" Id* "{" Transformation "}"								-> Migration {cons("OpenMigration")}
		Transformation ";" Transformation									-> Transformation {cons("Composition")}
		"(" Transformation Transformation+ ")" TransformationAnnotation*	-> Transformation {cons("MultiParameterTransformationApplication")}
		
		"addProperty" Id "::" Sort "(" Exp ")"								-> RefinementTransformation {cons("DecorativePropertyAddition")}
		"addPropertyDefaultValue" Id "::" Sort "(" Exp ")"					-> RefinementTransformation {cons("DecorativePropertyAdditionDefaultValue")}
		"propertySimpleTypeChange" Id "::" Sort 							-> Transformation {cons("DecorativePropertySimpleTypeChange")}
		"removeProperty" Id			 										-> RestrictingTransformation {cons("PropertyRemoval")}
		
		%% ==================================================================================== %%
		"@" "type" "=" Entity												-> TransformationAnnotation {cons("TypeAnnotation")}
		"@" "typeName" "=" Id												-> TransformationAnnotation {cons("TypeNameAnnotation")}
	context-free priorities 
		{left:
			Transformation ";" Transformation								-> Transformation
		}
	context-free start-symbols Application