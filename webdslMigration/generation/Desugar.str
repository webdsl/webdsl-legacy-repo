module Desugar
imports
	DomainTransformationSyntax
	liblib
	org/webdsl/dsl/transformation/desugar
	org/webdsl/dsl/transformation/types
	org/webdsl/dsl/utils/utils
	org/webdsl/dsl/generation/xhtml-page
	org/webdsl/dsl/syntax/parse-webdsl
	org/webdsl/dsl/generation/generator

strategies
	desugarDomain : 
		Transformer(dom, trans) -> Transformer(<desugar-any> dom, trans)	// TODO attach extend entity not taken into account
	
	desugarTransformations =
		// More or less harmless rewrites (merely change single node to semantically equivalent single node)
		innermost(
			rewriteDoubleQuote + 
			rewriteDecorativePropertyAdditionDefaultValue + 
			rewriteDecorativePropertyAddition + 
			rewriteDecorativePropertySimpleTypeChange
		);
		// More harmful rewrites
		rewriteDefinitions;
		innermost(			// Do this now, to prevent having to write getType for other sugar
			rewriteOpenEnd
		)
	// TODO reference to self??	
	
	rewriteDecorativePropertyAdditionDefaultValue : 
		DecorativePropertyAdditionDefaultValue(itrafo, propName, propType, propDefaultValue) -> PropertyAdditionDefaultValue(itrafo, propName, propType, propDefaultValue)

	rewriteDecorativePropertyAddition : 
		DecorativePropertyAddition(itrafo, propName, propType, propDefaultValue) -> PropertyAddition(itrafo, propName, propType, propDefaultValue)
	
	rewriteDecorativePropertySimpleTypeChange : 
		DecorativePropertySimpleTypeChange(itrafo, propName, propType) -> PropertySimpleTypeChange(itrafo, propName, propType)
	
	rewriteDoubleQuote : 
		String(x) -> String(y)
			where y := <un-double-quote> x
	
	rewriteDefinitions : 
		Transformer(ent, els) -> <outermost(rewriteTransformationDefinitions)>Transformer(ent, <filter(not(?TransformationDefinition(_, _)))>els) // Outermost to make sure also the references in references are replaced
		where
			<map(try(defineTransformation))> els
		
	defineTransformation =  
		?TransformationDefinition(trafoId, trafo);
		rules (
			rewriteTransformationDefinitions : 
				TransformationRequest(trafoId) -> trafo
		)
	
	rewriteOpenEnd : 
		OpenEnd(trafo) -> Ejection(trafo, <getType> trafo)
		
	/* ---- Auxiliary strategies ---- */
	getType : 
		EmptyEntity() -> <newname> "newEntity"
	getType : 
		PropertyAdditionDefaultValue(trafo, _, _, _) -> <getType> trafo
	getType : 
		PropertyAddition(trafo, _, _, _) -> <getType> trafo
	getType : 
		PropertyRemoval(trafo, _) -> <getType> trafo
	getType : 
		ElevateAttributeOverReference(trafo, _, _) -> <getType> trafo
	getType : 
		PropertyNameChange(trafo, _, _) -> <getType> trafo
	getType : 
		PropertySimpleTypeChange(trafo, _, _) -> <getType> trafo
	getType : 
		PropertyReferenceTypeChange(trafo, _, _, _) -> <getType> trafo
	getType : 
		Injection(entityId) -> entityId
	getType : 
		Ejection(_, entityId) -> entityId
	getType : 
		OpenEnd(trafo) -> <getType> trafo
	getType : 
		Merge(trafo1, trafo2) -> <getType> trafo1
	getType : 
		RelatedMerge(trafo1, _, trafo2) -> <getType> Merge(trafo1, trafo2)