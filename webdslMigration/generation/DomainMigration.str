module DomainMigration
imports
	DomainTransformationSyntax
	DataModelTransformationToDataTransformation
	IntermediateTypes
	liblib
	libjava-front
	Desugar
	TransformationAuxiliary
	TransformationDefinition
	org/webdsl/dsl/generation/java-code
	org/webdsl/dsl/transformation/types
	org/webdsl/dsl/syntax/parse-webdsl
	org/webdsl/dsl/transformation/desugar
	org/webdsl/dsl/builtins/builtins-desugar
	org/webdsl/dsl/generation/generator

strategies
	main-DomainMigration = 
		io-wrap(constructMigration(|"webdslorg0", "webdslorg1"))

	constructMigration(|persistenceUnit0, persistenceUnit1) =
		prepare;
		?world;
		// Contruct domain 0
		<constructDomain(|"domain_0")> world;
		
		// Construct domain 1
		<
			collectAllMigrations;
			map(
				(getMigrationType(|world)									<+ error(|"Unable to derive migration type"))
			);
			constructDomain(|"domain_1")
		> world;
		
		// Construct migration (intermediate types and migration itself)
		rules (	DomainPackage :=  PackageName([Id("migration")]));
		info(|" -- deriving and constructing intermediate types");
			// Ugly hack - view all target types as intermediate types, because the entity to java cannot process package names (only used for entity definitions that refer to target type in generic types)
		<constructDomain(|"migration")> world;
			
		{| RewriteTransformationDefinition:
			info(|" -- constructing migrator");
			!world;
			collectAllMigrations;
			map(
				(migrationToJava(|world)									<+ error(|"Unable to write migration to Java"))
			);
			surroundWithDefaultFunctionality(|persistenceUnit0, persistenceUnit1, <constructGlobalTransformationDefs(|"scope")> world);
			risky(java-file-to-file | "Cannot write java to file");
			info(|" -- migration generated")
		|};
		!""
	
	prepare = 
		info(|" -- importing modules");
		import-modules;
		info(|" -- desugaring");
		desugarDomain;
		desugarTransformations
	
	constructDomain(|domainName) = 
		info(|<concat-strings> [" -- constructing domain ", domainName]);
		rules (	DomainPackage :=  PackageName([Id(domainName)]));
		(alltd(declare-entity)										<+ error(|"Unable to declare domain entities"));		
		(alltd(entity-to-java-Entity)								<+ error(|"Unable to translate entity to java entity"));
		(alltd(java-file-to-file)									<+ error(|"Cannot write java to file"))

	collectAllMigrations = 
		collect-all(?Migration(_, _, _))
	
	getMigrationType(|world) : 
		Migration(inputTypeNames, outputTypeName, transformation) -> EntityNoSuper(outputTypeName, props, funcs)
		where
			<deriveTransformationType(|world, inputTypeNames)> transformation;
			?EntityNoSuper(_, props, funcs)
	
	migrationToJava(|world) : // Assuming any transformation definitions outside this migration have been defined
		Migration(inputTypes, outputType, transformation) -> 
			|[
				new HibernateMigrator(em0, em1,
					new TypedApplication(
						new HibernateTransformer(domain_1.~x:outputType.class, emf1),	// TODO Hack: domain_1 should be improved when packages are supported in WebDSL
						~trafoInJava
					),
					Arrays.asList(~e:inputTypesAsList)
				)
			
			]|
		where
			constructTransformationDefinitionRewrites;
			typesAsInjections := <map(\inputType -> Injection(Null(), inputType)\)> inputTypes; // Make injections, since inputs must be transformations (not types)
			decoratedTransformation := <decorateTransformationWithIntermediateTypes(|world, typesAsInjections)> transformation;
			trafoInJava := <transformationToJava> decoratedTransformation;
			<debug(!" -- Migration In Java:")> trafoInJava;
			inputTypesAsList := <map(\inputType -> |[~x:inputType.class]|\); arrayToJavaArray(|"Class")> inputTypes
	
	constructGlobalTransformationDefs(|scopeName) = 
		collectAllTransformationDefinitions;
		map(transformationDefinitionToJava(|scopeName) <+ error(|"Unable to write transformation definition to Java"))
	
	surroundWithDefaultFunctionality(|persistenceUnit0, persistenceUnit1, globalDefs) :
		migrators -> JavaFile(["src"],
		compilation-unit|[
			package pkgname;
			
			import transformation.*;
			import transformation.hibernate.*;
			import javax.persistence.*;
			import java.util.*;
			
			public class CustomMigrator {
				
				public static void main(String[] args)
				{
					System.out.println("Starting migration");
					EntityManagerFactory emf0 = Persistence.createEntityManagerFactory("~persistenceUnit0");
					EntityManagerFactory emf1 = Persistence.createEntityManagerFactory("~persistenceUnit1");
					EntityManager em0 = emf0.createEntityManager();
					EntityManager em1 = emf1.createEntityManager();
					
					TransformationScope scope = new TransformationScope();
					~*globalDefs
					
					HibernateMigrator[] migs = ~migratorsArrayInit;
					
					try {
						for(HibernateMigrator mig: migs)
							mig.migrate(scope);
					} catch (TransformationException ex) {
						ex.printStackTrace();
					}
					
					emf0.close();
					emf1.close();
					System.out.println("Migration completed");
				}
			}
		]| )
		where 
			!ArrayInit(migrators) => migratorsArrayInit;
			pkgname := <DomainPackage>
	
	/* ---- Auxiliary strategies ---- */
	error(|msg) = 
		log(|Error(), msg, <id>); 
		fail
		
	arrayToJavaArray(|type) : 
			array ->  NewArray(TypeName(Id(type)), [Dim()], ArrayInit(array))