module DomainTransformation
imports
	DomainTransformationSyntax 
	liblib
	Desugar

strategies
	main-DomainTransformation = 
		io-wrap(
			domainTransformationDesugar;
			transform
		)
	
	transform : 
		Transformer(entities, transformations) -> <transform>(entities, transformations)
	
	transform : 
		(entities, transformations) -> <map(innermost(SubstituteInjection); applyTransformation)> transformations
			where 
				<is-list> transformations;
				<map(injectionConstruction)> entities
	
	transform : 
		(entities, transformation) -> <innermost(SubstituteInjection); applyTransformation> transformation
			where
				<not(is-list)> transformation;
				<map(injectionConstruction)> entities
	
	injectionConstruction : 
		EntityNoSuper(entityName, properties, functions) -> EntityNoSuper(entityName, properties, functions)
			where rules(SubstituteInjection : Injection(entityName) ->  EntityNoSuper(entityName, properties, functions))

	applyTransformation = 
		innermost(
			emptyEntityRewrite + 
			ejectionRewrite +
			propertyRemoval +
			propertyAddition +
			elevateAttributeOverReference +
			propertyNameChange +
			propertySimpleTypeChange +
			propertyReferenceTypeChange +
			merge +
			relatedMerge
		)
		
	/****************************** Level 0 ******************************/
	emptyEntityRewrite : 
		EmptyEntity() ->
			EntityNoSuper(<getType>, [], [])	// Name should be overwritten anyway

	/****************************** Level 1 ******************************/
	/** Entity modifications **/
	ejectionRewrite : 
		Ejection(EntityNoSuper(entityName, properties, functions), newEntityName) ->
			EntityNoSuper(newEntityName, properties, functions)
	
	propertyAddition :
		PropertyAddition(EntityNoSuper(entityName, properties, functions), propertyName, sort,_) ->	// Default value will be ignored for now (cannot be used as part of the domain model)
			EntityNoSuper(entityName, <conc>(properties, [Property(propertyName, Simple(), sort, [])]) , functions)
	
	propertyRemoval :
		PropertyRemoval(EntityNoSuper(entityName, properties, functions), propertyName) ->
			EntityNoSuper(entityName, <remove-all(?Property(propertyName, _, _, _))> properties, functions)
			
	elevateAttributeOverReference : 
		ElevateAttributeOverReference(EntityNoSuper(entityName, properties, functions), refName, attName) -> 
			EntityNoSuper(entityName, <conc> (properties, propertyToElevate), functions)
		where <fetch(?Property(propertyName, _, _, _))> properties => propertyToElevate
	
	/** Property modifications **/
	propertyNameChange :
		PropertyNameChange(EntityNoSuper(entityName, properties, functions), oldName, newName) ->
			EntityNoSuper(entityName, <map(try(ChangePropertyName))> properties, functions)
				where rules(
					ChangePropertyName : PropertyNoAnno(oldName, kind, sort) ->  PropertyNoAnno(newName, kind, sort)
					ChangePropertyName : Property(oldName, kind, sort, annos) ->  Property(newName, kind, sort, annos) 
				)
				
	propertySimpleTypeChange :
		PropertySimpleTypeChange(EntityNoSuper(entityName, properties, functions), name, newSort) ->
			EntityNoSuper(entityName, <map(try(ChangeSimplePropertyType))> properties, functions)
				where rules(	// TODO Scope required?
					ChangeSimplePropertyType : PropertyNoAnno(name, kind, _) ->  PropertyNoAnno(name, kind, newSort)
					ChangeSimplePropertyType : Property(name, kind, _, annos) ->  Property(name, kind, newSort, annos) 
				)
	
	propertyReferenceTypeChange :
		PropertyReferenceTypeChange(EntityNoSuper(entityName, properties, functions), name, newSort, _) ->
			EntityNoSuper(entityName, <map(try(ChangeReferencePropertyType))> properties, functions)
				where rules(	// TODO Scope required?
					ChangeReferencePropertyType : PropertyNoAnno(name, kind, _) ->  PropertyNoAnno(name, kind, newSort)
					ChangeReferencePropertyType : Property(name, kind, _, annos) ->  Property(name, kind, newSort, annos) 
				)
	
	/****************************** Level 2 ******************************/	
	merge :
		Merge(EntityNoSuper(entityName, masterProperties, functions), EntityNoSuper(_, [slaveProperty|slavePropertiesTail], _)) ->
			Merge(EntityNoSuper(entityName, newProperties, functions), EntityNoSuper(entityName,  slavePropertiesTail, []))
		where
			<mergeElementAndList(|slaveProperty)> masterProperties => newProperties
	merge :
		Merge(EntityNoSuper(entityName, masterProperties, functions), EntityNoSuper(_, [], _)) ->
			EntityNoSuper(entityName, masterProperties, functions)
			
	relatedMerge :
		RelatedMerge(e1, _, e2) -> Merge(e1, e2)

	/****************************** Auxiliary ******************************/	
	mergeElementAndList(|element) : list -> list
		where <elem> (element, list)
	mergeElementAndList(|element) : list -> [element|list]
		where not(<elem> (element, list))
	
			
			