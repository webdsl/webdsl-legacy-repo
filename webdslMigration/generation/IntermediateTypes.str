module IntermediateTypes
imports
	TransformationTypeDerivation
	DomainTransformationSyntax
	liblib
	libjava-front
	org/webdsl/dsl/generation/java-code
	org/webdsl/dsl/transformation/types
	org/webdsl/dsl/syntax/parse-webdsl
	org/webdsl/dsl/transformation/desugar
	org/webdsl/dsl/builtins/builtins-desugar
	org/webdsl/dsl/generation/generator

strategies
	/****************************** Intermediate type decoration ******************************/	
	decorateTransformationWithIntermediateTypes(|context, inputs) = 
		try(
			decorateApplicationWithIntermediateTypes(|context, inputs) <+
			decorateRelatedMergeWithIntermediateTypes(|context, inputs)
		)
	decorateApplicationWithIntermediateTypes(|context, inputs) : 
		TransformationApplication(t1, t2, annos) -> TransformationApplication(decoratedT1, decoratedT2, newAnnos)
		where
			decoratedT1 := <decorateTransformationWithIntermediateTypes(|context, [ t2 | inputs])> t1;
			decoratedT2 := t2; // Cannot decorate t2, types in this transformation are not fixed (unknown how it is used in t1)
			typeOft1 := <deriveTransformationTypeFromInputs(|context, [t2| inputs])> decoratedT1;
			// Decorate this node
			newAnnos := <setTypeAnnotation(|typeOft1)> annos

	decorateRelatedMergeWithIntermediateTypes(|context, inputs) : 
		RelatedMerge(exp) -> TypedRelatedMerge(type0, type1, exp)
		where
			<?[input0 | [input1 | inputtl] ]> inputs;
			nrInputs0 := <maxNrInputs(|context)> (input0, inputtl);
			inputtlPart1 := <drop(|nrInputs0)> inputtl;
			type0 := <deriveTransformationTypeFromInputs(|context, inputtl)> input0;
			type1 := <deriveTransformationTypeFromInputs(|context, inputtlPart1)> input1
			
	setTypeAnnotation(|type) = 
		remove-all(?TypeAnnotation(_));
		![TypeAnnotation(type)| <id>]

	/****************************** Intermediate type definition ******************************/	
		
	getIntermediateType : 
		TransformationApplication(lhs, rhs, annos) -> interMediateTypeName
		where
			interMediateTypeName := <getNewIntermediateTypeName>;
			<getType> annos 					<+ <error(|"Unable to get type from annotations (does the transformation use primitives that require typing, but cannot be typed in the current setting?)")> TransformationApplication(lhs, rhs, annos)//;
			//defineType(|interMediateTypeName) 	<+ error(|"Intermediate type definition failed");
			//info(|<concat-strings> ["Constructed intermediate type ", interMediateTypeName])

	getNewIntermediateTypeName = 
		<newname>"DerivedType_"

	defineType(|name) : 
		EntityNoSuper(_, properties, functions) -> <risky(entity-to-java-Entity | "Entity to java conversion failed"); risky(java-file-to-file | "Cannot write java to file")>EntityNoSuper(name, properties, functions)
	
	getType =
		getTypeFromAnnotation <+ 					// Only possible if this is an application
		<deriveTransformationTypeStep> (<id>, [])	// Try to get it directly (only possible if it does not require inputs)
/*

	handleIntermediateTypes(|originalTypeSet) : 
		transformations -> <risky(substituteDerivedTypes|"Intermediate type substitution failed")>transformations
		where
			risky(deriveTypes(|originalTypeSet) | "Intermediate type derivation failed");
			risky(defineTypes | "Intermediate type definition failed")

	defineTypes =
		map(risky(defineType|"Cannot define intermediate type"))
	defineType : 
		(name, EntityNoSuper(_, properties, functions)) -> <risky(entity-to-java-Entity | "Entity to java conversion failed"); risky(java-file-to-file | "Cannot write java to file")>EntityNoSuper(name, properties, functions)
	
	substituteDerivedTypes = 
		bottomup(	// bottom-up to make sure the elements can still be recognized
			try (
				substituteDerivedTypesRelatedMerge
			)
		)
	
	deriveTypes (|originalTypeSet) = 
		map(
			collect-all(
				deriveType(|originalTypeSet)
			);
			concat
		);
		concat;
		where (<fprintnl> (stdout(), [<length; int-to-string>, " intermediate types have been derived"]))
	
	deriveType (|originalTypeSet): 
		RelatedMerge(
			itrafo, 
			Function(name , [Arg(arg1, argType1), Arg(arg2, argType2)], resType, relationDef), 
			slavetrafo
		)
		->
		<conc> (newTypes1, newTypes2)
	where
		if <?SimpleSort("DerivedType")> argType1 then
			newArgTypeName1	:= <newname>"DerivedMergeLHSType_";
			newTypes1 := [(newArgTypeName1, <transform> (originalTypeSet, itrafo))]
		else
			newArgType1	:= argType1;
			newTypes1 := []
		end;
		if <?SimpleSort("DerivedType")> argType2 then
			newArgTypeName2	:= <newname>"DerivedMergeRHSType_";
			newTypes2 := [(newArgTypeName2, <transform> (originalTypeSet, slavetrafo))]
		else
			newArgType2	:= argType2;
			newTypes2 := []
		end;
		rules (
			substituteDerivedTypesRelatedMerge : 
				RelatedMerge(
					itrafo, 
					Function(name , [Arg(arg1, argType1), Arg(arg2, argType2)], resType, relationDef), 
					slavetrafo
				)
				->
				RelatedMerge(
					itrafo, 
					Function(name , [Arg(arg1, SimpleSort(newArgTypeName1)), Arg(arg2, SimpleSort(newArgTypeName2))], resType, relationDef), 
					slavetrafo
				)
		)
*/